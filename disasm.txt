
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 07 6c 00 00       	call   c0006c27 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 55 b8 01 00       	call   c001b87a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 16 c3 01 c0       	mov    ebx,0xc001c316
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 20 c3 01 c0    	cmp    ebx,0xc001c320
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 ee 01 c0       	mov    eax,0xc001ee58
c0000049:	3d 58 ee 01 c0       	cmp    eax,0xc001ee58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 ee 01 c0       	push   0xc001ee58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 ee 01 c0       	mov    eax,0xc001ee58
c0000075:	2d 58 ee 01 c0       	sub    eax,0xc001ee58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 ee 01 c0       	push   0xc001ee58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e0 ef 01 c0 00 	cmp    BYTE PTR ds:0xc001efe0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 28 c3 01 c0       	mov    ebx,0xc001c328
c00000bb:	81 eb 24 c3 01 c0    	sub    ebx,0xc001c324
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 24 c3 01 c0       	mov    esi,0xc001c324
c00000ca:	a1 e4 ef 01 c0       	mov    eax,ds:0xc001efe4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e4 ef 01 c0       	mov    ds:0xc001efe4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e4 ef 01 c0       	mov    eax,ds:0xc001efe4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 ee 01 c0       	push   0xc001ee58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e0 ef 01 c0 01 	mov    BYTE PTR ds:0xc001efe0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e8 ef 01 c0       	push   0xc001efe8
c000012c:	68 58 ee 01 c0       	push   0xc001ee58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 b8 1e 01 00       	call   c0012188 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 3c 94 00 00       	call   c0009724 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 96 1e 01 00       	call   c0012188 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 67 23 01 00       	call   c0012678 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 b6 29 01 00       	call   c0012cd0 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 30 f4 01 c0 	lgdtd  ds:0xc001f430
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 4d 58 00 00       	jmp    c0005bef <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 00 f0 01 c0       	mov    ds:0xc001f000,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 00 f0 01 c0    	mov    DWORD PTR ds:0xc001f000,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 00 f0 01 c0    	mov    ebx,DWORD PTR ds:0xc001f000
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 40 c3 01 c0 02 	test   BYTE PTR [edx-0x3ffe3cc0],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 40 c3 01 c0 01 	test   BYTE PTR [edx-0x3ffe3cc0],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 40 c3 01 c0 08 	test   BYTE PTR [edx-0x3ffe3cc0],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 40 c3 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3cc0],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 40 c3 01 c0 01 	test   BYTE PTR [edx-0x3ffe3cc0],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 20 f0 01 c0    	mov    ecx,DWORD PTR ds:0xc001f020
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 20 f0 01 c0    	mov    DWORD PTR ds:0xc001f020,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 24 f0 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0fdc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 24 f0 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0fdc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 20 f0 01 c0    	mov    DWORD PTR ds:0xc001f020,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 4c f0 01 c0    	cmp    DWORD PTR ds:0xc001f04c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 5c f0 01 c0    	mov    ecx,DWORD PTR ds:0xc001f05c
c0000d5d:	c7 42 0c 54 f0 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f054
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 5c f0 01 c0    	mov    DWORD PTR ds:0xc001f05c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 4c f0 01 c0    	mov    DWORD PTR ds:0xc001f04c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 20 f0 01 c0 02 	test   BYTE PTR ds:0xc001f020,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 fa 5b 00 00       	call   c0006a38 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 3c 5b 00 00       	call   c0006a38 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 26 5b 00 00       	call   c0006a38 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 02 5b 00 00       	call   c0006a38 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 20 f0 01 c0    	mov    edi,DWORD PTR ds:0xc001f020
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 24 f0 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0fdc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 24 f0 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0fdc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 54 f0 01 c0 	lea    edx,[eax*8-0x3ffe0fac]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 60 f0 01 c0    	mov    ebx,DWORD PTR ds:0xc001f060
c00010df:	81 fb 54 f0 01 c0    	cmp    ebx,0xc001f054
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 54 f0 01 c0       	cmp    eax,0xc001f054
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 50 f0 01 c0    	cmp    DWORD PTR ds:0xc001f050,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 5c f0 01 c0       	mov    ds:0xc001f05c,eax
c000111b:	a3 60 f0 01 c0       	mov    ds:0xc001f060,eax
c0001120:	a3 50 f0 01 c0       	mov    ds:0xc001f050,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 54 f0 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f054
c000112e:	c7 40 0c 54 f0 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f054
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 60 f0 01 c0       	mov    ds:0xc001f060,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 54 f0 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f054
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 18 f0 01 c0 	lea    ebp,[edx*4-0x3ffe0fe8]
c000117f:	8b 14 95 20 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fe0]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 20 f0 01 c0 	lea    ecx,[edx*4-0x3ffe0fe0]
c000119a:	8b 14 95 20 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fe0]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 54 f3 01 c0 	or     DWORD PTR [edi*4-0x3ffe0cac],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 54 f0 01 c0 	lea    eax,[eax*8-0x3ffe0fac]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 5c f0 01 c0    	mov    DWORD PTR ds:0xc001f05c,ecx
c0001254:	89 0d 60 f0 01 c0    	mov    DWORD PTR ds:0xc001f060,ecx
c000125a:	c7 41 08 54 f0 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f054
c0001261:	c7 41 0c 54 f0 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f054
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 4c f0 01 c0 	lea    edx,[ecx*8-0x3ffe0fb4]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 54 f3 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0cac]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 54 f3 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe0cac]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 4c f0 01 c0 	lea    edx,[eax*4-0x3ffe0fb4]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 54 f3 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0cac],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 5c f0 01 c0    	mov    DWORD PTR ds:0xc001f05c,edi
c0001327:	89 3d 60 f0 01 c0    	mov    DWORD PTR ds:0xc001f060,edi
c000132d:	c7 47 08 54 f0 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f054
c0001334:	c7 47 0c 54 f0 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f054
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 50 f0 01 c0    	mov    DWORD PTR ds:0xc001f050,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 4c f0 01 c0       	mov    eax,ds:0xc001f04c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 4c f0 01 c0    	mov    DWORD PTR ds:0xc001f04c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 20 f0 01 c0       	mov    edx,0xc001f020
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 20 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f020,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 74 f3 01 c0    	mov    ebx,DWORD PTR ds:0xc001f374
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 74 f3 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f374,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 74 f3 01 c0    	mov    DWORD PTR ds:0xc001f374,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 4c f0 01 c0    	cmp    DWORD PTR ds:0xc001f04c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 4c f0 01 c0    	mov    DWORD PTR ds:0xc001f04c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 20 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f020,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 7c f3 01 c0    	push   DWORD PTR ds:0xc001f37c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 20 f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f020,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 7c f3 01 c0       	mov    eax,ds:0xc001f37c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 4c f0 01 c0 00 	cmp    DWORD PTR ds:0xc001f04c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 4c f0 01 c0       	mov    eax,ds:0xc001f04c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 24 f0 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0fdc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 54 f0 01 c0       	mov    eax,0xc001f054
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 4c f3 01 c0       	cmp    eax,0xc001f34c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 88 f3 01 c0       	mov    eax,ds:0xc001f388
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 70 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f370
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 84 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f384
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 94 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f394
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 20 f0 01 c0       	mov    eax,0xc001f020
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 44 c4 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe3bbc]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 20 f0 01 c0       	mov    eax,ds:0xc001f020
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 20 f0 01 c0       	mov    ds:0xc001f020,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 64 f3 01 c0    	mov    DWORD PTR ds:0xc001f364,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 68 f3 01 c0    	mov    DWORD PTR ds:0xc001f368,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 6c f3 01 c0    	mov    DWORD PTR ds:0xc001f36c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 74 f3 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f374,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    

c0001afb <disk_status>:
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	c3                   	ret    

c0001afe <disk_initialize>:
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	c3                   	ret    

c0001b01 <disk_read>:
c0001b01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b06:	0f b6 04 85 60 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd5a0]
c0001b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b12:	e9 e1 43 01 00       	jmp    c0015ef8 <fatWrapperReadDisk>

c0001b17 <disk_write>:
c0001b17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b1c:	0f b6 04 85 60 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd5a0]
c0001b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b28:	e9 0f 44 01 00       	jmp    c0015f3c <fatWrapperWriteDisk>

c0001b2d <disk_ioctl>:
c0001b2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 60 2a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdd5a0]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 34 44 01 00       	jmp    c0015f80 <fatWrapperIoctl>

c0001b4c <ld_word>:
c0001b4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b53:	c1 e2 08             	shl    edx,0x8
c0001b56:	09 d0                	or     eax,edx
c0001b58:	c3                   	ret    

c0001b59 <ld_dword>:
c0001b59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b5d:	89 d1                	mov    ecx,edx
c0001b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b63:	c1 e1 08             	shl    ecx,0x8
c0001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b69:	09 ca                	or     edx,ecx
c0001b6b:	c1 e2 08             	shl    edx,0x8
c0001b6e:	09 d0                	or     eax,edx
c0001b70:	c3                   	ret    

c0001b71 <st_word>:
c0001b71:	66 89 10             	mov    WORD PTR [eax],dx
c0001b74:	c3                   	ret    

c0001b75 <st_dword>:
c0001b75:	89 10                	mov    DWORD PTR [eax],edx
c0001b77:	c3                   	ret    

c0001b78 <mem_cpy>:
c0001b78:	85 c9                	test   ecx,ecx
c0001b7a:	74 10                	je     c0001b8c <mem_cpy+0x14>
c0001b7c:	57                   	push   edi
c0001b7d:	01 c1                	add    ecx,eax
c0001b7f:	56                   	push   esi
c0001b80:	89 c7                	mov    edi,eax
c0001b82:	89 d6                	mov    esi,edx
c0001b84:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001b85:	39 f9                	cmp    ecx,edi
c0001b87:	75 fb                	jne    c0001b84 <mem_cpy+0xc>
c0001b89:	5e                   	pop    esi
c0001b8a:	5f                   	pop    edi
c0001b8b:	c3                   	ret    
c0001b8c:	c3                   	ret    

c0001b8d <mem_set>:
c0001b8d:	01 c1                	add    ecx,eax
c0001b8f:	40                   	inc    eax
c0001b90:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b93:	39 c8                	cmp    eax,ecx
c0001b95:	75 f8                	jne    c0001b8f <mem_set+0x2>
c0001b97:	c3                   	ret    

c0001b98 <mem_cmp>:
c0001b98:	57                   	push   edi
c0001b99:	56                   	push   esi
c0001b9a:	89 c6                	mov    esi,eax
c0001b9c:	53                   	push   ebx
c0001b9d:	46                   	inc    esi
c0001b9e:	42                   	inc    edx
c0001b9f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ba3:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ba7:	29 fb                	sub    ebx,edi
c0001ba9:	89 cf                	mov    edi,ecx
c0001bab:	29 f7                	sub    edi,esi
c0001bad:	01 c7                	add    edi,eax
c0001baf:	74 04                	je     c0001bb5 <mem_cmp+0x1d>
c0001bb1:	85 db                	test   ebx,ebx
c0001bb3:	74 e8                	je     c0001b9d <mem_cmp+0x5>
c0001bb5:	89 d8                	mov    eax,ebx
c0001bb7:	5b                   	pop    ebx
c0001bb8:	5e                   	pop    esi
c0001bb9:	5f                   	pop    edi
c0001bba:	c3                   	ret    

c0001bbb <chk_chr>:
c0001bbb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001bbe:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001bc1:	74 07                	je     c0001bca <chk_chr+0xf>
c0001bc3:	39 d1                	cmp    ecx,edx
c0001bc5:	74 03                	je     c0001bca <chk_chr+0xf>
c0001bc7:	40                   	inc    eax
c0001bc8:	eb f1                	jmp    c0001bbb <chk_chr>
c0001bca:	89 c8                	mov    eax,ecx
c0001bcc:	c3                   	ret    

c0001bcd <dbc_1st>:
c0001bcd:	31 c0                	xor    eax,eax
c0001bcf:	c3                   	ret    

c0001bd0 <dbc_2nd>:
c0001bd0:	31 c0                	xor    eax,eax
c0001bd2:	c3                   	ret    

c0001bd3 <tchar2uni>:
c0001bd3:	57                   	push   edi
c0001bd4:	89 c7                	mov    edi,eax
c0001bd6:	56                   	push   esi
c0001bd7:	53                   	push   ebx
c0001bd8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001bda:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001bdc:	8d 73 01             	lea    esi,[ebx+0x1]
c0001bdf:	84 c9                	test   cl,cl
c0001be1:	78 0a                	js     c0001bed <tchar2uni+0x1a>
c0001be3:	0f b6 d1             	movzx  edx,cl
c0001be6:	89 f3                	mov    ebx,esi
c0001be8:	e9 9f 00 00 00       	jmp    c0001c8c <tchar2uni+0xb9>
c0001bed:	88 ca                	mov    dl,cl
c0001bef:	83 e2 e0             	and    edx,0xffffffe0
c0001bf2:	80 fa c0             	cmp    dl,0xc0
c0001bf5:	75 0c                	jne    c0001c03 <tchar2uni+0x30>
c0001bf7:	89 ca                	mov    edx,ecx
c0001bf9:	b9 01 00 00 00       	mov    ecx,0x1
c0001bfe:	83 e2 1f             	and    edx,0x1f
c0001c01:	eb 2e                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c03:	88 ca                	mov    dl,cl
c0001c05:	83 e2 f0             	and    edx,0xfffffff0
c0001c08:	80 fa e0             	cmp    dl,0xe0
c0001c0b:	75 0c                	jne    c0001c19 <tchar2uni+0x46>
c0001c0d:	89 ca                	mov    edx,ecx
c0001c0f:	b9 02 00 00 00       	mov    ecx,0x2
c0001c14:	83 e2 0f             	and    edx,0xf
c0001c17:	eb 18                	jmp    c0001c31 <tchar2uni+0x5e>
c0001c19:	88 ca                	mov    dl,cl
c0001c1b:	83 e2 f8             	and    edx,0xfffffff8
c0001c1e:	88 d0                	mov    al,dl
c0001c20:	83 ca ff             	or     edx,0xffffffff
c0001c23:	3c f0                	cmp    al,0xf0
c0001c25:	75 6c                	jne    c0001c93 <tchar2uni+0xc0>
c0001c27:	89 ca                	mov    edx,ecx
c0001c29:	b9 03 00 00 00       	mov    ecx,0x3
c0001c2e:	83 e2 07             	and    edx,0x7
c0001c31:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c35:	46                   	inc    esi
c0001c36:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c39:	88 c8                	mov    al,cl
c0001c3b:	83 e0 c0             	and    eax,0xffffffc0
c0001c3e:	3c 80                	cmp    al,0x80
c0001c40:	75 4e                	jne    c0001c90 <tchar2uni+0xbd>
c0001c42:	c1 e2 06             	shl    edx,0x6
c0001c45:	83 e1 3f             	and    ecx,0x3f
c0001c48:	09 ca                	or     edx,ecx
c0001c4a:	39 de                	cmp    esi,ebx
c0001c4c:	75 e7                	jne    c0001c35 <tchar2uni+0x62>
c0001c4e:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001c51:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001c57:	77 37                	ja     c0001c90 <tchar2uni+0xbd>
c0001c59:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001c5f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c65:	76 29                	jbe    c0001c90 <tchar2uni+0xbd>
c0001c67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001c6d:	76 1d                	jbe    c0001c8c <tchar2uni+0xb9>
c0001c6f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001c75:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001c7b:	c1 e1 06             	shl    ecx,0x6
c0001c7e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001c84:	09 ca                	or     edx,ecx
c0001c86:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c8c:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c8e:	eb 03                	jmp    c0001c93 <tchar2uni+0xc0>
c0001c90:	83 ca ff             	or     edx,0xffffffff
c0001c93:	5b                   	pop    ebx
c0001c94:	89 d0                	mov    eax,edx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <put_utf>:
c0001c99:	53                   	push   ebx
c0001c9a:	83 f8 7f             	cmp    eax,0x7f
c0001c9d:	89 c3                	mov    ebx,eax
c0001c9f:	b0 00                	mov    al,0x0
c0001ca1:	77 11                	ja     c0001cb4 <put_utf+0x1b>
c0001ca3:	85 c9                	test   ecx,ecx
c0001ca5:	0f 84 e5 00 00 00    	je     c0001d90 <put_utf+0xf7>
c0001cab:	88 1a                	mov    BYTE PTR [edx],bl
c0001cad:	b0 01                	mov    al,0x1
c0001caf:	e9 dc 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cb4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001cba:	77 23                	ja     c0001cdf <put_utf+0x46>
c0001cbc:	83 f9 01             	cmp    ecx,0x1
c0001cbf:	0f 86 cb 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 c8 c0             	or     eax,0xffffffc0
c0001cd3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	b0 02                	mov    al,0x2
c0001cda:	e9 b1 00 00 00       	jmp    c0001d90 <put_utf+0xf7>
c0001cdf:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ce5:	77 40                	ja     c0001d27 <put_utf+0x8e>
c0001ce7:	83 f9 02             	cmp    ecx,0x2
c0001cea:	0f 86 a0 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001cf0:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001cf6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cfc:	0f 86 8e 00 00 00    	jbe    c0001d90 <put_utf+0xf7>
c0001d02:	89 d8                	mov    eax,ebx
c0001d04:	c1 e8 0c             	shr    eax,0xc
c0001d07:	83 c8 e0             	or     eax,0xffffffe0
c0001d0a:	88 02                	mov    BYTE PTR [edx],al
c0001d0c:	89 d8                	mov    eax,ebx
c0001d0e:	83 e3 3f             	and    ebx,0x3f
c0001d11:	c1 e8 06             	shr    eax,0x6
c0001d14:	83 cb 80             	or     ebx,0xffffff80
c0001d17:	83 e0 3f             	and    eax,0x3f
c0001d1a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d1d:	83 c8 80             	or     eax,0xffffff80
c0001d20:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d23:	b0 03                	mov    al,0x3
c0001d25:	eb 69                	jmp    c0001d90 <put_utf+0xf7>
c0001d27:	83 f9 03             	cmp    ecx,0x3
c0001d2a:	76 64                	jbe    c0001d90 <put_utf+0xf7>
c0001d2c:	89 d9                	mov    ecx,ebx
c0001d2e:	0f b7 c3             	movzx  eax,bx
c0001d31:	66 31 c9             	xor    cx,cx
c0001d34:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d3a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d40:	c1 e9 06             	shr    ecx,0x6
c0001d43:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001d49:	77 43                	ja     c0001d8e <put_utf+0xf5>
c0001d4b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001d51:	77 3b                	ja     c0001d8e <put_utf+0xf5>
c0001d53:	09 cb                	or     ebx,ecx
c0001d55:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001d5b:	89 d8                	mov    eax,ebx
c0001d5d:	c1 e8 12             	shr    eax,0x12
c0001d60:	83 c8 f0             	or     eax,0xfffffff0
c0001d63:	88 02                	mov    BYTE PTR [edx],al
c0001d65:	89 d8                	mov    eax,ebx
c0001d67:	c1 e8 0c             	shr    eax,0xc
c0001d6a:	83 e0 3f             	and    eax,0x3f
c0001d6d:	83 c8 80             	or     eax,0xffffff80
c0001d70:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d73:	89 d8                	mov    eax,ebx
c0001d75:	83 e3 3f             	and    ebx,0x3f
c0001d78:	c1 e8 06             	shr    eax,0x6
c0001d7b:	83 cb 80             	or     ebx,0xffffff80
c0001d7e:	83 e0 3f             	and    eax,0x3f
c0001d81:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001d84:	83 c8 80             	or     eax,0xffffff80
c0001d87:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d8a:	b0 04                	mov    al,0x4
c0001d8c:	eb 02                	jmp    c0001d90 <put_utf+0xf7>
c0001d8e:	31 c0                	xor    eax,eax
c0001d90:	5b                   	pop    ebx
c0001d91:	c3                   	ret    

c0001d92 <clst2sect>:
c0001d92:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001d95:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001d98:	83 ea 02             	sub    edx,0x2
c0001d9b:	39 ca                	cmp    edx,ecx
c0001d9d:	76 0d                	jbe    c0001dac <clst2sect+0x1a>
c0001d9f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001da3:	0f af d1             	imul   edx,ecx
c0001da6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001da9:	89 d0                	mov    eax,edx
c0001dab:	c3                   	ret    
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <pick_lfn>:
c0001daf:	55                   	push   ebp
c0001db0:	57                   	push   edi
c0001db1:	56                   	push   esi
c0001db2:	89 d6                	mov    esi,edx
c0001db4:	53                   	push   ebx
c0001db5:	89 c3                	mov    ebx,eax
c0001db7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dba:	e8 8d fd ff ff       	call   c0001b4c <ld_word>
c0001dbf:	66 85 c0             	test   ax,ax
c0001dc2:	74 04                	je     c0001dc8 <pick_lfn+0x19>
c0001dc4:	31 c0                	xor    eax,eax
c0001dc6:	eb 5c                	jmp    c0001e24 <pick_lfn+0x75>
c0001dc8:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001dcb:	bd 01 00 00 00       	mov    ebp,0x1
c0001dd0:	83 e1 bf             	and    ecx,0xffffffbf
c0001dd3:	31 ff                	xor    edi,edi
c0001dd5:	49                   	dec    ecx
c0001dd6:	6b c9 0d             	imul   ecx,ecx,0xd
c0001dd9:	0f b6 87 a0 c5 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3a60]
c0001de0:	01 f0                	add    eax,esi
c0001de2:	e8 65 fd ff ff       	call   c0001b4c <ld_word>
c0001de7:	66 85 ed             	test   bp,bp
c0001dea:	74 11                	je     c0001dfd <pick_lfn+0x4e>
c0001dec:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001df2:	77 d0                	ja     c0001dc4 <pick_lfn+0x15>
c0001df4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001df8:	89 c5                	mov    ebp,eax
c0001dfa:	41                   	inc    ecx
c0001dfb:	eb 04                	jmp    c0001e01 <pick_lfn+0x52>
c0001dfd:	66 40                	inc    ax
c0001dff:	75 c3                	jne    c0001dc4 <pick_lfn+0x15>
c0001e01:	47                   	inc    edi
c0001e02:	83 ff 0d             	cmp    edi,0xd
c0001e05:	75 d2                	jne    c0001dd9 <pick_lfn+0x2a>
c0001e07:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001e0a:	74 13                	je     c0001e1f <pick_lfn+0x70>
c0001e0c:	66 85 ed             	test   bp,bp
c0001e0f:	74 0e                	je     c0001e1f <pick_lfn+0x70>
c0001e11:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e17:	77 ab                	ja     c0001dc4 <pick_lfn+0x15>
c0001e19:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001e1f:	b8 01 00 00 00       	mov    eax,0x1
c0001e24:	5b                   	pop    ebx
c0001e25:	5e                   	pop    esi
c0001e26:	5f                   	pop    edi
c0001e27:	5d                   	pop    ebp
c0001e28:	c3                   	ret    

c0001e29 <put_lfn>:
c0001e29:	55                   	push   ebp
c0001e2a:	31 ed                	xor    ebp,ebp
c0001e2c:	57                   	push   edi
c0001e2d:	89 d7                	mov    edi,edx
c0001e2f:	56                   	push   esi
c0001e30:	31 f6                	xor    esi,esi
c0001e32:	53                   	push   ebx
c0001e33:	83 ec 08             	sub    esp,0x8
c0001e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e39:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e41:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e47:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e4a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e4d:	31 d2                	xor    edx,edx
c0001e4f:	e8 1d fd ff ff       	call   c0001b71 <st_word>
c0001e54:	0f b6 d9             	movzx  ebx,cl
c0001e57:	4b                   	dec    ebx
c0001e58:	6b db 0d             	imul   ebx,ebx,0xd
c0001e5b:	66 83 fe ff          	cmp    si,0xffff
c0001e5f:	74 08                	je     c0001e69 <put_lfn+0x40>
c0001e61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e64:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e68:	43                   	inc    ebx
c0001e69:	0f b6 85 a0 c5 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3a60]
c0001e70:	0f b7 d6             	movzx  edx,si
c0001e73:	01 f8                	add    eax,edi
c0001e75:	e8 f7 fc ff ff       	call   c0001b71 <st_word>
c0001e7a:	66 85 f6             	test   si,si
c0001e7d:	75 03                	jne    c0001e82 <put_lfn+0x59>
c0001e7f:	83 ce ff             	or     esi,0xffffffff
c0001e82:	45                   	inc    ebp
c0001e83:	83 fd 0d             	cmp    ebp,0xd
c0001e86:	75 d3                	jne    c0001e5b <put_lfn+0x32>
c0001e88:	66 46                	inc    si
c0001e8a:	74 0a                	je     c0001e96 <put_lfn+0x6d>
c0001e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e94:	75 09                	jne    c0001e9f <put_lfn+0x76>
c0001e96:	88 c8                	mov    al,cl
c0001e98:	83 c8 40             	or     eax,0x40
c0001e9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001ea3:	88 07                	mov    BYTE PTR [edi],al
c0001ea5:	83 c4 08             	add    esp,0x8
c0001ea8:	5b                   	pop    ebx
c0001ea9:	5e                   	pop    esi
c0001eaa:	5f                   	pop    edi
c0001eab:	5d                   	pop    ebp
c0001eac:	c3                   	ret    

c0001ead <gen_numname>:
c0001ead:	57                   	push   edi
c0001eae:	89 cf                	mov    edi,ecx
c0001eb0:	56                   	push   esi
c0001eb1:	b9 0b 00 00 00       	mov    ecx,0xb
c0001eb6:	53                   	push   ebx
c0001eb7:	89 c6                	mov    esi,eax
c0001eb9:	83 ec 10             	sub    esp,0x10
c0001ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001ec0:	e8 b3 fc ff ff       	call   c0001b78 <mem_cpy>
c0001ec5:	83 fb 05             	cmp    ebx,0x5
c0001ec8:	76 2d                	jbe    c0001ef7 <gen_numname+0x4a>
c0001eca:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001ecd:	66 85 c0             	test   ax,ax
c0001ed0:	74 25                	je     c0001ef7 <gen_numname+0x4a>
c0001ed2:	83 c7 02             	add    edi,0x2
c0001ed5:	ba 10 00 00 00       	mov    edx,0x10
c0001eda:	01 db                	add    ebx,ebx
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	66 d1 e8             	shr    ax,1
c0001ee1:	83 e1 01             	and    ecx,0x1
c0001ee4:	01 cb                	add    ebx,ecx
c0001ee6:	0f ba e3 10          	bt     ebx,0x10
c0001eea:	73 06                	jae    c0001ef2 <gen_numname+0x45>
c0001eec:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ef2:	4a                   	dec    edx
c0001ef3:	75 e5                	jne    c0001eda <gen_numname+0x2d>
c0001ef5:	eb d3                	jmp    c0001eca <gen_numname+0x1d>
c0001ef7:	b8 07 00 00 00       	mov    eax,0x7
c0001efc:	88 d9                	mov    cl,bl
c0001efe:	83 e1 0f             	and    ecx,0xf
c0001f01:	8d 51 30             	lea    edx,[ecx+0x30]
c0001f04:	80 fa 39             	cmp    dl,0x39
c0001f07:	76 03                	jbe    c0001f0c <gen_numname+0x5f>
c0001f09:	8d 51 37             	lea    edx,[ecx+0x37]
c0001f0c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001f0f:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001f13:	89 da                	mov    edx,ebx
c0001f15:	c1 ea 04             	shr    edx,0x4
c0001f18:	83 fb 0f             	cmp    ebx,0xf
c0001f1b:	76 06                	jbe    c0001f23 <gen_numname+0x76>
c0001f1d:	89 c8                	mov    eax,ecx
c0001f1f:	89 d3                	mov    ebx,edx
c0001f21:	eb d9                	jmp    c0001efc <gen_numname+0x4f>
c0001f23:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001f28:	31 d2                	xor    edx,edx
c0001f2a:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001f2d:	8d 04 16             	lea    eax,[esi+edx*1]
c0001f30:	39 ca                	cmp    edx,ecx
c0001f32:	73 18                	jae    c0001f4c <gen_numname+0x9f>
c0001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f37:	3c 20                	cmp    al,0x20
c0001f39:	74 11                	je     c0001f4c <gen_numname+0x9f>
c0001f3b:	e8 8d fc ff ff       	call   c0001bcd <dbc_1st>
c0001f40:	85 c0                	test   eax,eax
c0001f42:	74 05                	je     c0001f49 <gen_numname+0x9c>
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	74 04                	je     c0001f4c <gen_numname+0x9f>
c0001f48:	42                   	inc    edx
c0001f49:	42                   	inc    edx
c0001f4a:	eb e1                	jmp    c0001f2d <gen_numname+0x80>
c0001f4c:	b0 20                	mov    al,0x20
c0001f4e:	83 f9 07             	cmp    ecx,0x7
c0001f51:	77 05                	ja     c0001f58 <gen_numname+0xab>
c0001f53:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f57:	41                   	inc    ecx
c0001f58:	42                   	inc    edx
c0001f59:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f5d:	83 fa 07             	cmp    edx,0x7
c0001f60:	76 ea                	jbe    c0001f4c <gen_numname+0x9f>
c0001f62:	83 c4 10             	add    esp,0x10
c0001f65:	5b                   	pop    ebx
c0001f66:	5e                   	pop    esi
c0001f67:	5f                   	pop    edi
c0001f68:	c3                   	ret    

c0001f69 <sum_sfn>:
c0001f69:	31 c9                	xor    ecx,ecx
c0001f6b:	31 d2                	xor    edx,edx
c0001f6d:	d0 ca                	ror    dl,1
c0001f6f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f72:	41                   	inc    ecx
c0001f73:	83 f9 0b             	cmp    ecx,0xb
c0001f76:	75 f5                	jne    c0001f6d <sum_sfn+0x4>
c0001f78:	88 d0                	mov    al,dl
c0001f7a:	c3                   	ret    

c0001f7b <get_ldnumber>:
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 14                	je     c0001f95 <get_ldnumber+0x1a>
c0001f81:	56                   	push   esi
c0001f82:	53                   	push   ebx
c0001f83:	89 d3                	mov    ebx,edx
c0001f85:	43                   	inc    ebx
c0001f86:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f89:	80 f9 1f             	cmp    cl,0x1f
c0001f8c:	76 0d                	jbe    c0001f9b <get_ldnumber+0x20>
c0001f8e:	80 f9 3a             	cmp    cl,0x3a
c0001f91:	75 f2                	jne    c0001f85 <get_ldnumber+0xa>
c0001f93:	eb 0a                	jmp    c0001f9f <get_ldnumber+0x24>
c0001f95:	83 c9 ff             	or     ecx,0xffffffff
c0001f98:	89 c8                	mov    eax,ecx
c0001f9a:	c3                   	ret    
c0001f9b:	31 c9                	xor    ecx,ecx
c0001f9d:	eb 24                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001f9f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001fa2:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001fa5:	80 f9 09             	cmp    cl,0x9
c0001fa8:	77 16                	ja     c0001fc0 <get_ldnumber+0x45>
c0001faa:	83 c2 02             	add    edx,0x2
c0001fad:	83 c9 ff             	or     ecx,0xffffffff
c0001fb0:	39 d3                	cmp    ebx,edx
c0001fb2:	75 0f                	jne    c0001fc3 <get_ldnumber+0x48>
c0001fb4:	89 f2                	mov    edx,esi
c0001fb6:	89 18                	mov    DWORD PTR [eax],ebx
c0001fb8:	0f be ca             	movsx  ecx,dl
c0001fbb:	83 e9 30             	sub    ecx,0x30
c0001fbe:	eb 03                	jmp    c0001fc3 <get_ldnumber+0x48>
c0001fc0:	83 c9 ff             	or     ecx,0xffffffff
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	5b                   	pop    ebx
c0001fc6:	5e                   	pop    esi
c0001fc7:	c3                   	ret    

c0001fc8 <validate>:
c0001fc8:	56                   	push   esi
c0001fc9:	53                   	push   ebx
c0001fca:	89 d6                	mov    esi,edx
c0001fcc:	51                   	push   ecx
c0001fcd:	85 c0                	test   eax,eax
c0001fcf:	75 09                	jne    c0001fda <validate+0x12>
c0001fd1:	b8 09 00 00 00       	mov    eax,0x9
c0001fd6:	31 c9                	xor    ecx,ecx
c0001fd8:	eb 2f                	jmp    c0002009 <validate+0x41>
c0001fda:	89 c3                	mov    ebx,eax
c0001fdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001fde:	85 c0                	test   eax,eax
c0001fe0:	74 ef                	je     c0001fd1 <validate+0x9>
c0001fe2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001fe5:	74 ea                	je     c0001fd1 <validate+0x9>
c0001fe7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0001feb:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0001fef:	75 e0                	jne    c0001fd1 <validate+0x9>
c0001ff1:	83 ec 0c             	sub    esp,0xc
c0001ff4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0001ff8:	50                   	push   eax
c0001ff9:	e8 fd fa ff ff       	call   c0001afb <disk_status>
c0001ffe:	83 c4 10             	add    esp,0x10
c0002001:	a8 01                	test   al,0x1
c0002003:	75 cc                	jne    c0001fd1 <validate+0x9>
c0002005:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002007:	31 c0                	xor    eax,eax
c0002009:	89 0e                	mov    DWORD PTR [esi],ecx
c000200b:	5a                   	pop    edx
c000200c:	5b                   	pop    ebx
c000200d:	5e                   	pop    esi
c000200e:	c3                   	ret    

c000200f <sync_window>:
c000200f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002013:	74 58                	je     c000206d <sync_window+0x5e>
c0002015:	56                   	push   esi
c0002016:	53                   	push   ebx
c0002017:	8d 70 34             	lea    esi,[eax+0x34]
c000201a:	51                   	push   ecx
c000201b:	89 c3                	mov    ebx,eax
c000201d:	6a 01                	push   0x1
c000201f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002022:	56                   	push   esi
c0002023:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002027:	50                   	push   eax
c0002028:	e8 ea fa ff ff       	call   c0001b17 <disk_write>
c000202d:	83 c4 10             	add    esp,0x10
c0002030:	ba 01 00 00 00       	mov    edx,0x1
c0002035:	85 c0                	test   eax,eax
c0002037:	75 2e                	jne    c0002067 <sync_window+0x58>
c0002039:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000203c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000203f:	89 c1                	mov    ecx,eax
c0002041:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002045:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002048:	39 d1                	cmp    ecx,edx
c000204a:	73 19                	jae    c0002065 <sync_window+0x56>
c000204c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002050:	75 13                	jne    c0002065 <sync_window+0x56>
c0002052:	6a 01                	push   0x1
c0002054:	01 d0                	add    eax,edx
c0002056:	50                   	push   eax
c0002057:	56                   	push   esi
c0002058:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000205c:	50                   	push   eax
c000205d:	e8 b5 fa ff ff       	call   c0001b17 <disk_write>
c0002062:	83 c4 10             	add    esp,0x10
c0002065:	31 d2                	xor    edx,edx
c0002067:	89 d0                	mov    eax,edx
c0002069:	5a                   	pop    edx
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    
c000206d:	31 d2                	xor    edx,edx
c000206f:	89 d0                	mov    eax,edx
c0002071:	c3                   	ret    

c0002072 <move_window>:
c0002072:	57                   	push   edi
c0002073:	56                   	push   esi
c0002074:	31 f6                	xor    esi,esi
c0002076:	53                   	push   ebx
c0002077:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000207a:	74 32                	je     c00020ae <move_window+0x3c>
c000207c:	89 c3                	mov    ebx,eax
c000207e:	89 d7                	mov    edi,edx
c0002080:	e8 8a ff ff ff       	call   c000200f <sync_window>
c0002085:	89 c6                	mov    esi,eax
c0002087:	85 c0                	test   eax,eax
c0002089:	75 23                	jne    c00020ae <move_window+0x3c>
c000208b:	6a 01                	push   0x1
c000208d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002090:	57                   	push   edi
c0002091:	50                   	push   eax
c0002092:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002096:	50                   	push   eax
c0002097:	e8 65 fa ff ff       	call   c0001b01 <disk_read>
c000209c:	83 c4 10             	add    esp,0x10
c000209f:	85 c0                	test   eax,eax
c00020a1:	74 08                	je     c00020ab <move_window+0x39>
c00020a3:	be 01 00 00 00       	mov    esi,0x1
c00020a8:	83 cf ff             	or     edi,0xffffffff
c00020ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00020ae:	89 f0                	mov    eax,esi
c00020b0:	5b                   	pop    ebx
c00020b1:	5e                   	pop    esi
c00020b2:	5f                   	pop    edi
c00020b3:	c3                   	ret    

c00020b4 <check_fs>:
c00020b4:	53                   	push   ebx
c00020b5:	89 c3                	mov    ebx,eax
c00020b7:	83 ec 08             	sub    esp,0x8
c00020ba:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00020be:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00020c5:	e8 a8 ff ff ff       	call   c0002072 <move_window>
c00020ca:	ba 04 00 00 00       	mov    edx,0x4
c00020cf:	85 c0                	test   eax,eax
c00020d1:	75 68                	jne    c000213b <check_fs+0x87>
c00020d3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00020d9:	e8 6e fa ff ff       	call   c0001b4c <ld_word>
c00020de:	ba 03 00 00 00       	mov    edx,0x3
c00020e3:	66 3d 55 aa          	cmp    ax,0xaa55
c00020e7:	75 52                	jne    c000213b <check_fs+0x87>
c00020e9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00020ec:	8d 50 18             	lea    edx,[eax+0x18]
c00020ef:	80 fa 01             	cmp    dl,0x1
c00020f2:	76 09                	jbe    c00020fd <check_fs+0x49>
c00020f4:	ba 02 00 00 00       	mov    edx,0x2
c00020f9:	3c eb                	cmp    al,0xeb
c00020fb:	75 3e                	jne    c000213b <check_fs+0x87>
c00020fd:	ba 9c e4 01 c0       	mov    edx,0xc001e49c
c0002102:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002105:	b9 03 00 00 00       	mov    ecx,0x3
c000210a:	e8 89 fa ff ff       	call   c0001b98 <mem_cmp>
c000210f:	31 d2                	xor    edx,edx
c0002111:	85 c0                	test   eax,eax
c0002113:	74 26                	je     c000213b <check_fs+0x87>
c0002115:	ba 5c c4 01 c0       	mov    edx,0xc001c45c
c000211a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002120:	b9 05 00 00 00       	mov    ecx,0x5
c0002125:	e8 6e fa ff ff       	call   c0001b98 <mem_cmp>
c000212a:	31 d2                	xor    edx,edx
c000212c:	85 c0                	test   eax,eax
c000212e:	74 0b                	je     c000213b <check_fs+0x87>
c0002130:	31 d2                	xor    edx,edx
c0002132:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002136:	0f 95 c2             	setne  dl
c0002139:	01 d2                	add    edx,edx
c000213b:	89 d0                	mov    eax,edx
c000213d:	83 c4 08             	add    esp,0x8
c0002140:	5b                   	pop    ebx
c0002141:	c3                   	ret    

c0002142 <find_volume>:
c0002142:	55                   	push   ebp
c0002143:	57                   	push   edi
c0002144:	56                   	push   esi
c0002145:	89 c6                	mov    esi,eax
c0002147:	53                   	push   ebx
c0002148:	89 d3                	mov    ebx,edx
c000214a:	83 ec 2c             	sub    esp,0x2c
c000214d:	31 d2                	xor    edx,edx
c000214f:	e8 60 ff ff ff       	call   c00020b4 <check_fs>
c0002154:	83 f8 02             	cmp    eax,0x2
c0002157:	74 06                	je     c000215f <find_volume+0x1d>
c0002159:	77 62                	ja     c00021bd <find_volume+0x7b>
c000215b:	85 db                	test   ebx,ebx
c000215d:	74 5e                	je     c00021bd <find_volume+0x7b>
c000215f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002163:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002169:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000216f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002173:	89 cf                	mov    edi,ecx
c0002175:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002179:	89 e8                	mov    eax,ebp
c000217b:	83 c5 10             	add    ebp,0x10
c000217e:	e8 d6 f9 ff ff       	call   c0001b59 <ld_dword>
c0002183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002187:	89 01                	mov    DWORD PTR [ecx],eax
c0002189:	83 c1 04             	add    ecx,0x4
c000218c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002190:	75 e3                	jne    c0002175 <find_volume+0x33>
c0002192:	31 ed                	xor    ebp,ebp
c0002194:	85 db                	test   ebx,ebx
c0002196:	74 03                	je     c000219b <find_volume+0x59>
c0002198:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000219b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000219e:	b8 03 00 00 00       	mov    eax,0x3
c00021a3:	85 d2                	test   edx,edx
c00021a5:	74 0c                	je     c00021b3 <find_volume+0x71>
c00021a7:	89 f0                	mov    eax,esi
c00021a9:	e8 06 ff ff ff       	call   c00020b4 <check_fs>
c00021ae:	83 f8 01             	cmp    eax,0x1
c00021b1:	76 0a                	jbe    c00021bd <find_volume+0x7b>
c00021b3:	85 db                	test   ebx,ebx
c00021b5:	75 06                	jne    c00021bd <find_volume+0x7b>
c00021b7:	45                   	inc    ebp
c00021b8:	83 fd 03             	cmp    ebp,0x3
c00021bb:	76 de                	jbe    c000219b <find_volume+0x59>
c00021bd:	83 c4 2c             	add    esp,0x2c
c00021c0:	5b                   	pop    ebx
c00021c1:	5e                   	pop    esi
c00021c2:	5f                   	pop    edi
c00021c3:	5d                   	pop    ebp
c00021c4:	c3                   	ret    

c00021c5 <mount_volume>:
c00021c5:	55                   	push   ebp
c00021c6:	89 d5                	mov    ebp,edx
c00021c8:	57                   	push   edi
c00021c9:	89 cf                	mov    edi,ecx
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00021d2:	83 ec 2c             	sub    esp,0x2c
c00021d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00021db:	e8 9b fd ff ff       	call   c0001f7b <get_ldnumber>
c00021e0:	85 c0                	test   eax,eax
c00021e2:	0f 88 d6 02 00 00    	js     c00024be <mount_volume+0x2f9>
c00021e8:	8b 34 85 c0 f3 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0c40]
c00021ef:	89 c2                	mov    edx,eax
c00021f1:	bb 0c 00 00 00       	mov    ebx,0xc
c00021f6:	85 f6                	test   esi,esi
c00021f8:	0f 84 c0 02 00 00    	je     c00024be <mount_volume+0x2f9>
c00021fe:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002201:	83 e7 fe             	and    edi,0xfffffffe
c0002204:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002207:	74 3a                	je     c0002243 <mount_volume+0x7e>
c0002209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000220d:	83 ec 0c             	sub    esp,0xc
c0002210:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002214:	50                   	push   eax
c0002215:	e8 e1 f8 ff ff       	call   c0001afb <disk_status>
c000221a:	83 c4 10             	add    esp,0x10
c000221d:	a8 01                	test   al,0x1
c000221f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002223:	75 1e                	jne    c0002243 <mount_volume+0x7e>
c0002225:	31 db                	xor    ebx,ebx
c0002227:	89 f9                	mov    ecx,edi
c0002229:	84 c9                	test   cl,cl
c000222b:	0f 84 8d 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002231:	a8 04                	test   al,0x4
c0002233:	0f 84 85 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002239:	bb 0a 00 00 00       	mov    ebx,0xa
c000223e:	e9 7b 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002243:	83 ec 0c             	sub    esp,0xc
c0002246:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002249:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000224c:	0f b6 c2             	movzx  eax,dl
c000224f:	bb 03 00 00 00       	mov    ebx,0x3
c0002254:	50                   	push   eax
c0002255:	e8 a4 f8 ff ff       	call   c0001afe <disk_initialize>
c000225a:	83 c4 10             	add    esp,0x10
c000225d:	a8 01                	test   al,0x1
c000225f:	0f 85 59 02 00 00    	jne    c00024be <mount_volume+0x2f9>
c0002265:	89 f9                	mov    ecx,edi
c0002267:	84 c9                	test   cl,cl
c0002269:	74 04                	je     c000226f <mount_volume+0xaa>
c000226b:	a8 04                	test   al,0x4
c000226d:	75 ca                	jne    c0002239 <mount_volume+0x74>
c000226f:	31 d2                	xor    edx,edx
c0002271:	89 f0                	mov    eax,esi
c0002273:	bb 01 00 00 00       	mov    ebx,0x1
c0002278:	e8 c5 fe ff ff       	call   c0002142 <find_volume>
c000227d:	83 f8 04             	cmp    eax,0x4
c0002280:	0f 84 38 02 00 00    	je     c00024be <mount_volume+0x2f9>
c0002286:	83 f8 01             	cmp    eax,0x1
c0002289:	76 0a                	jbe    c0002295 <mount_volume+0xd0>
c000228b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002290:	e9 29 02 00 00       	jmp    c00024be <mount_volume+0x2f9>
c0002295:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002298:	e8 af f8 ff ff       	call   c0001b4c <ld_word>
c000229d:	66 3d 00 02          	cmp    ax,0x200
c00022a1:	75 e8                	jne    c000228b <mount_volume+0xc6>
c00022a3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00022a6:	e8 a1 f8 ff ff       	call   c0001b4c <ld_word>
c00022ab:	0f b7 c0             	movzx  eax,ax
c00022ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 0c                	jne    c00022c2 <mount_volume+0xfd>
c00022b6:	8d 46 58             	lea    eax,[esi+0x58]
c00022b9:	e8 9b f8 ff ff       	call   c0001b59 <ld_dword>
c00022be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00022c2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00022c5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00022c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00022cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00022d0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00022d3:	89 e8                	mov    eax,ebp
c00022d5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00022d8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00022db:	3c 01                	cmp    al,0x1
c00022dd:	77 ac                	ja     c000228b <mount_volume+0xc6>
c00022df:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00022e3:	89 c3                	mov    ebx,eax
c00022e5:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00022e9:	66 85 c0             	test   ax,ax
c00022ec:	74 9d                	je     c000228b <mount_volume+0xc6>
c00022ee:	8d 40 ff             	lea    eax,[eax-0x1]
c00022f1:	85 d8                	test   eax,ebx
c00022f3:	75 96                	jne    c000228b <mount_volume+0xc6>
c00022f5:	8d 46 45             	lea    eax,[esi+0x45]
c00022f8:	e8 4f f8 ff ff       	call   c0001b4c <ld_word>
c00022fd:	89 c7                	mov    edi,eax
c00022ff:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002303:	a8 0f                	test   al,0xf
c0002305:	75 84                	jne    c000228b <mount_volume+0xc6>
c0002307:	8d 46 47             	lea    eax,[esi+0x47]
c000230a:	e8 3d f8 ff ff       	call   c0001b4c <ld_word>
c000230f:	0f b7 d0             	movzx  edx,ax
c0002312:	85 d2                	test   edx,edx
c0002314:	75 0a                	jne    c0002320 <mount_volume+0x15b>
c0002316:	8d 46 54             	lea    eax,[esi+0x54]
c0002319:	e8 3b f8 ff ff       	call   c0001b59 <ld_dword>
c000231e:	89 c2                	mov    edx,eax
c0002320:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002324:	8d 46 42             	lea    eax,[esi+0x42]
c0002327:	e8 20 f8 ff ff       	call   c0001b4c <ld_word>
c000232c:	66 85 c0             	test   ax,ax
c000232f:	0f 84 56 ff ff ff    	je     c000228b <mount_volume+0xc6>
c0002335:	89 e9                	mov    ecx,ebp
c0002337:	0f b7 c0             	movzx  eax,ax
c000233a:	0f b6 e9             	movzx  ebp,cl
c000233d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002345:	89 f8                	mov    eax,edi
c0002347:	0f af cd             	imul   ecx,ebp
c000234a:	66 c1 e8 04          	shr    ax,0x4
c000234e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002352:	0f b7 c0             	movzx  eax,ax
c0002355:	01 c8                	add    eax,ecx
c0002357:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000235b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000235f:	39 c2                	cmp    edx,eax
c0002361:	0f 82 24 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002367:	29 c2                	sub    edx,eax
c0002369:	89 d5                	mov    ebp,edx
c000236b:	89 d0                	mov    eax,edx
c000236d:	31 d2                	xor    edx,edx
c000236f:	f7 f3                	div    ebx
c0002371:	39 dd                	cmp    ebp,ebx
c0002373:	0f 82 12 ff ff ff    	jb     c000228b <mount_volume+0xc6>
c0002379:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000237e:	0f 87 07 ff ff ff    	ja     c000228b <mount_volume+0xc6>
c0002384:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002389:	0f 86 1f 01 00 00    	jbe    c00024ae <mount_volume+0x2e9>
c000238f:	bb 03 00 00 00       	mov    ebx,0x3
c0002394:	8d 68 02             	lea    ebp,[eax+0x2]
c0002397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000239f:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00023a3:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00023a6:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00023a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00023ad:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00023b0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00023b4:	83 fb 03             	cmp    ebx,0x3
c00023b7:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00023ba:	75 21                	jne    c00023dd <mount_volume+0x218>
c00023bc:	8d 46 5e             	lea    eax,[esi+0x5e]
c00023bf:	e8 88 f7 ff ff       	call   c0001b4c <ld_word>
c00023c4:	66 09 c7             	or     di,ax
c00023c7:	0f 85 be fe ff ff    	jne    c000228b <mount_volume+0xc6>
c00023cd:	8d 46 60             	lea    eax,[esi+0x60]
c00023d0:	c1 e5 02             	shl    ebp,0x2
c00023d3:	e8 81 f7 ff ff       	call   c0001b59 <ld_dword>
c00023d8:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023db:	eb 22                	jmp    c00023ff <mount_volume+0x23a>
c00023dd:	66 85 ff             	test   di,di
c00023e0:	0f 84 a5 fe ff ff    	je     c000228b <mount_volume+0xc6>
c00023e6:	01 c8                	add    eax,ecx
c00023e8:	83 fb 02             	cmp    ebx,0x2
c00023eb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00023ee:	75 04                	jne    c00023f4 <mount_volume+0x22f>
c00023f0:	01 ed                	add    ebp,ebp
c00023f2:	eb 0b                	jmp    c00023ff <mount_volume+0x23a>
c00023f4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00023f8:	83 e5 01             	and    ebp,0x1
c00023fb:	d1 e8                	shr    eax,1
c00023fd:	01 c5                	add    ebp,eax
c00023ff:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002405:	c1 ed 09             	shr    ebp,0x9
c0002408:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000240c:	0f 87 79 fe ff ff    	ja     c000228b <mount_volume+0xc6>
c0002412:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002419:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002420:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002424:	83 fb 03             	cmp    ebx,0x3
c0002427:	75 6e                	jne    c0002497 <mount_volume+0x2d2>
c0002429:	8d 46 64             	lea    eax,[esi+0x64]
c000242c:	e8 1b f7 ff ff       	call   c0001b4c <ld_word>
c0002431:	66 48                	dec    ax
c0002433:	75 62                	jne    c0002497 <mount_volume+0x2d2>
c0002435:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002439:	89 f0                	mov    eax,esi
c000243b:	42                   	inc    edx
c000243c:	e8 31 fc ff ff       	call   c0002072 <move_window>
c0002441:	85 c0                	test   eax,eax
c0002443:	75 52                	jne    c0002497 <mount_volume+0x2d2>
c0002445:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002449:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000244f:	e8 f8 f6 ff ff       	call   c0001b4c <ld_word>
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 3d                	jne    c0002497 <mount_volume+0x2d2>
c000245a:	8d 46 34             	lea    eax,[esi+0x34]
c000245d:	e8 f7 f6 ff ff       	call   c0001b59 <ld_dword>
c0002462:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002467:	75 2e                	jne    c0002497 <mount_volume+0x2d2>
c0002469:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000246f:	e8 e5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002474:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002479:	75 1c                	jne    c0002497 <mount_volume+0x2d2>
c000247b:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002481:	e8 d3 f6 ff ff       	call   c0001b59 <ld_dword>
c0002486:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002489:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000248f:	e8 c5 f6 ff ff       	call   c0001b59 <ld_dword>
c0002494:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002497:	66 a1 a0 f3 01 c0    	mov    ax,ds:0xc001f3a0
c000249d:	88 1e                	mov    BYTE PTR [esi],bl
c000249f:	40                   	inc    eax
c00024a0:	31 db                	xor    ebx,ebx
c00024a2:	66 a3 a0 f3 01 c0    	mov    ds:0xc001f3a0,ax
c00024a8:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00024ac:	eb 10                	jmp    c00024be <mount_volume+0x2f9>
c00024ae:	31 db                	xor    ebx,ebx
c00024b0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00024b5:	0f 97 c3             	seta   bl
c00024b8:	43                   	inc    ebx
c00024b9:	e9 d6 fe ff ff       	jmp    c0002394 <mount_volume+0x1cf>
c00024be:	83 c4 2c             	add    esp,0x2c
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	5b                   	pop    ebx
c00024c4:	5e                   	pop    esi
c00024c5:	5f                   	pop    edi
c00024c6:	5d                   	pop    ebp
c00024c7:	c3                   	ret    

c00024c8 <put_fat>:
c00024c8:	55                   	push   ebp
c00024c9:	bd 02 00 00 00       	mov    ebp,0x2
c00024ce:	57                   	push   edi
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	83 ec 1c             	sub    esp,0x1c
c00024d4:	83 fa 01             	cmp    edx,0x1
c00024d7:	0f 86 31 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024dd:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00024e0:	0f 86 28 01 00 00    	jbe    c000260e <put_fat+0x146>
c00024e6:	89 c6                	mov    esi,eax
c00024e8:	89 cf                	mov    edi,ecx
c00024ea:	8a 00                	mov    al,BYTE PTR [eax]
c00024ec:	89 d3                	mov    ebx,edx
c00024ee:	3c 02                	cmp    al,0x2
c00024f0:	0f 84 ac 00 00 00    	je     c00025a2 <put_fat+0xda>
c00024f6:	3c 03                	cmp    al,0x3
c00024f8:	0f 84 d1 00 00 00    	je     c00025cf <put_fat+0x107>
c00024fe:	fe c8                	dec    al
c0002500:	0f 85 08 01 00 00    	jne    c000260e <put_fat+0x146>
c0002506:	89 d1                	mov    ecx,edx
c0002508:	89 f0                	mov    eax,esi
c000250a:	d1 e9                	shr    ecx,1
c000250c:	01 d1                	add    ecx,edx
c000250e:	89 ca                	mov    edx,ecx
c0002510:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002514:	c1 ea 09             	shr    edx,0x9
c0002517:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000251a:	e8 53 fb ff ff       	call   c0002072 <move_window>
c000251f:	89 c5                	mov    ebp,eax
c0002521:	85 c0                	test   eax,eax
c0002523:	0f 85 e5 00 00 00    	jne    c000260e <put_fat+0x146>
c0002529:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000252d:	8d 46 34             	lea    eax,[esi+0x34]
c0002530:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002534:	8d 41 01             	lea    eax,[ecx+0x1]
c0002537:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000253d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002541:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002545:	89 f8                	mov    eax,edi
c0002547:	83 e3 01             	and    ebx,0x1
c000254a:	74 0c                	je     c0002558 <put_fat+0x90>
c000254c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000254e:	89 f8                	mov    eax,edi
c0002550:	83 e2 0f             	and    edx,0xf
c0002553:	c1 e0 04             	shl    eax,0x4
c0002556:	09 d0                	or     eax,edx
c0002558:	88 01                	mov    BYTE PTR [ecx],al
c000255a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000255e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002562:	c1 ea 09             	shr    edx,0x9
c0002565:	89 f0                	mov    eax,esi
c0002567:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000256a:	e8 03 fb ff ff       	call   c0002072 <move_window>
c000256f:	89 c5                	mov    ebp,eax
c0002571:	85 c0                	test   eax,eax
c0002573:	0f 85 95 00 00 00    	jne    c000260e <put_fat+0x146>
c0002579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000257d:	25 ff 01 00 00       	and    eax,0x1ff
c0002582:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002586:	85 db                	test   ebx,ebx
c0002588:	74 07                	je     c0002591 <put_fat+0xc9>
c000258a:	c1 ef 04             	shr    edi,0x4
c000258d:	89 f9                	mov    ecx,edi
c000258f:	eb 0d                	jmp    c000259e <put_fat+0xd6>
c0002591:	8a 08                	mov    cl,BYTE PTR [eax]
c0002593:	c1 ef 08             	shr    edi,0x8
c0002596:	83 e1 f0             	and    ecx,0xfffffff0
c0002599:	83 e7 0f             	and    edi,0xf
c000259c:	09 f9                	or     ecx,edi
c000259e:	88 08                	mov    BYTE PTR [eax],cl
c00025a0:	eb 27                	jmp    c00025c9 <put_fat+0x101>
c00025a2:	c1 ea 08             	shr    edx,0x8
c00025a5:	89 f0                	mov    eax,esi
c00025a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025aa:	e8 c3 fa ff ff       	call   c0002072 <move_window>
c00025af:	89 c5                	mov    ebp,eax
c00025b1:	85 c0                	test   eax,eax
c00025b3:	75 59                	jne    c000260e <put_fat+0x146>
c00025b5:	01 db                	add    ebx,ebx
c00025b7:	0f b7 d7             	movzx  edx,di
c00025ba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00025c0:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00025c4:	e8 a8 f5 ff ff       	call   c0001b71 <st_word>
c00025c9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00025cd:	eb 3f                	jmp    c000260e <put_fat+0x146>
c00025cf:	c1 ea 07             	shr    edx,0x7
c00025d2:	89 f0                	mov    eax,esi
c00025d4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00025d7:	e8 96 fa ff ff       	call   c0002072 <move_window>
c00025dc:	89 c5                	mov    ebp,eax
c00025de:	85 c0                	test   eax,eax
c00025e0:	75 2c                	jne    c000260e <put_fat+0x146>
c00025e2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00025e8:	c1 e3 02             	shl    ebx,0x2
c00025eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00025f1:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00025f5:	89 d8                	mov    eax,ebx
c00025f7:	e8 5d f5 ff ff       	call   c0001b59 <ld_dword>
c00025fc:	25 00 00 00 f0       	and    eax,0xf0000000
c0002601:	09 f8                	or     eax,edi
c0002603:	89 c2                	mov    edx,eax
c0002605:	89 d8                	mov    eax,ebx
c0002607:	e8 69 f5 ff ff       	call   c0001b75 <st_dword>
c000260c:	eb bb                	jmp    c00025c9 <put_fat+0x101>
c000260e:	83 c4 1c             	add    esp,0x1c
c0002611:	89 e8                	mov    eax,ebp
c0002613:	5b                   	pop    ebx
c0002614:	5e                   	pop    esi
c0002615:	5f                   	pop    edi
c0002616:	5d                   	pop    ebp
c0002617:	c3                   	ret    

c0002618 <dir_clear>:
c0002618:	55                   	push   ebp
c0002619:	57                   	push   edi
c000261a:	56                   	push   esi
c000261b:	89 c6                	mov    esi,eax
c000261d:	53                   	push   ebx
c000261e:	83 ec 1c             	sub    esp,0x1c
c0002621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002625:	e8 e5 f9 ff ff       	call   c000200f <sync_window>
c000262a:	85 c0                	test   eax,eax
c000262c:	0f 85 c0 00 00 00    	jne    c00026f2 <dir_clear+0xda>
c0002632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002636:	89 f0                	mov    eax,esi
c0002638:	e8 55 f7 ff ff       	call   c0001d92 <clst2sect>
c000263d:	31 d2                	xor    edx,edx
c000263f:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002642:	89 c5                	mov    ebp,eax
c0002644:	b9 00 02 00 00       	mov    ecx,0x200
c0002649:	8d 46 34             	lea    eax,[esi+0x34]
c000264c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002650:	e8 38 f5 ff ff       	call   c0001b8d <mem_set>
c0002655:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002659:	c1 e3 09             	shl    ebx,0x9
c000265c:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002662:	76 1b                	jbe    c000267f <dir_clear+0x67>
c0002664:	bb 00 80 00 00       	mov    ebx,0x8000
c0002669:	eb 14                	jmp    c000267f <dir_clear+0x67>
c000266b:	83 ec 0c             	sub    esp,0xc
c000266e:	53                   	push   ebx
c000266f:	e8 24 32 00 00       	call   c0005898 <ff_memalloc>
c0002674:	83 c4 10             	add    esp,0x10
c0002677:	89 c7                	mov    edi,eax
c0002679:	85 c0                	test   eax,eax
c000267b:	75 7c                	jne    c00026f9 <dir_clear+0xe1>
c000267d:	d1 eb                	shr    ebx,1
c000267f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002685:	77 e4                	ja     c000266b <dir_clear+0x53>
c0002687:	31 db                	xor    ebx,ebx
c0002689:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000268d:	39 d8                	cmp    eax,ebx
c000268f:	76 53                	jbe    c00026e4 <dir_clear+0xcc>
c0002691:	6a 01                	push   0x1
c0002693:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002696:	50                   	push   eax
c0002697:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000269b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000269f:	50                   	push   eax
c00026a0:	e8 72 f4 ff ff       	call   c0001b17 <disk_write>
c00026a5:	83 c4 10             	add    esp,0x10
c00026a8:	85 c0                	test   eax,eax
c00026aa:	75 38                	jne    c00026e4 <dir_clear+0xcc>
c00026ac:	43                   	inc    ebx
c00026ad:	eb da                	jmp    c0002689 <dir_clear+0x71>
c00026af:	52                   	push   edx
c00026b0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00026b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00026b7:	50                   	push   eax
c00026b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026bc:	57                   	push   edi
c00026bd:	50                   	push   eax
c00026be:	e8 54 f4 ff ff       	call   c0001b17 <disk_write>
c00026c3:	83 c4 10             	add    esp,0x10
c00026c6:	85 c0                	test   eax,eax
c00026c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cc:	75 0a                	jne    c00026d8 <dir_clear+0xc0>
c00026ce:	01 d3                	add    ebx,edx
c00026d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026d4:	39 d8                	cmp    eax,ebx
c00026d6:	77 d7                	ja     c00026af <dir_clear+0x97>
c00026d8:	83 ec 0c             	sub    esp,0xc
c00026db:	57                   	push   edi
c00026dc:	e8 cf 31 00 00       	call   c00058b0 <ff_memfree>
c00026e1:	83 c4 10             	add    esp,0x10
c00026e4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00026e8:	39 d8                	cmp    eax,ebx
c00026ea:	0f 95 c0             	setne  al
c00026ed:	0f b6 c0             	movzx  eax,al
c00026f0:	eb 19                	jmp    c000270b <dir_clear+0xf3>
c00026f2:	b8 01 00 00 00       	mov    eax,0x1
c00026f7:	eb 12                	jmp    c000270b <dir_clear+0xf3>
c00026f9:	89 d9                	mov    ecx,ebx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	e8 8b f4 ff ff       	call   c0001b8d <mem_set>
c0002702:	89 da                	mov    edx,ebx
c0002704:	31 db                	xor    ebx,ebx
c0002706:	c1 ea 09             	shr    edx,0x9
c0002709:	eb c5                	jmp    c00026d0 <dir_clear+0xb8>
c000270b:	83 c4 1c             	add    esp,0x1c
c000270e:	5b                   	pop    ebx
c000270f:	5e                   	pop    esi
c0002710:	5f                   	pop    edi
c0002711:	5d                   	pop    ebp
c0002712:	c3                   	ret    

c0002713 <create_name>:
c0002713:	55                   	push   ebp
c0002714:	89 d5                	mov    ebp,edx
c0002716:	57                   	push   edi
c0002717:	89 c7                	mov    edi,eax
c0002719:	56                   	push   esi
c000271a:	31 f6                	xor    esi,esi
c000271c:	53                   	push   ebx
c000271d:	83 ec 3c             	sub    esp,0x3c
c0002720:	8b 02                	mov    eax,DWORD PTR [edx]
c0002722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002726:	8b 07                	mov    eax,DWORD PTR [edi]
c0002728:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000272b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000272f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002733:	e8 9b f4 ff ff       	call   c0001bd3 <tchar2uni>
c0002738:	89 c3                	mov    ebx,eax
c000273a:	83 f8 ff             	cmp    eax,0xffffffff
c000273d:	75 0a                	jne    c0002749 <create_name+0x36>
c000273f:	b8 06 00 00 00       	mov    eax,0x6
c0002744:	e9 9e 02 00 00       	jmp    c00029e7 <create_name+0x2d4>
c0002749:	3d ff ff 00 00       	cmp    eax,0xffff
c000274e:	76 0c                	jbe    c000275c <create_name+0x49>
c0002750:	c1 e8 10             	shr    eax,0x10
c0002753:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002757:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000275b:	46                   	inc    esi
c000275c:	66 83 fb 1f          	cmp    bx,0x1f
c0002760:	76 4f                	jbe    c00027b1 <create_name+0x9e>
c0002762:	66 83 fb 5c          	cmp    bx,0x5c
c0002766:	74 35                	je     c000279d <create_name+0x8a>
c0002768:	66 83 fb 2f          	cmp    bx,0x2f
c000276c:	74 2f                	je     c000279d <create_name+0x8a>
c000276e:	66 83 fb 7f          	cmp    bx,0x7f
c0002772:	77 11                	ja     c0002785 <create_name+0x72>
c0002774:	0f b7 d3             	movzx  edx,bx
c0002777:	b8 62 c4 01 c0       	mov    eax,0xc001c462
c000277c:	e8 3a f4 ff ff       	call   c0001bbb <chk_chr>
c0002781:	85 c0                	test   eax,eax
c0002783:	75 ba                	jne    c000273f <create_name+0x2c>
c0002785:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000278b:	77 b2                	ja     c000273f <create_name+0x2c>
c000278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002791:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002795:	46                   	inc    esi
c0002796:	eb 97                	jmp    c000272f <create_name+0x1c>
c0002798:	40                   	inc    eax
c0002799:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000279d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027a1:	8a 10                	mov    dl,BYTE PTR [eax]
c00027a3:	80 fa 2f             	cmp    dl,0x2f
c00027a6:	74 f0                	je     c0002798 <create_name+0x85>
c00027a8:	80 fa 5c             	cmp    dl,0x5c
c00027ab:	74 eb                	je     c0002798 <create_name+0x85>
c00027ad:	31 db                	xor    ebx,ebx
c00027af:	eb 02                	jmp    c00027b3 <create_name+0xa0>
c00027b1:	b3 04                	mov    bl,0x4
c00027b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00027b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00027ba:	85 f6                	test   esi,esi
c00027bc:	74 18                	je     c00027d6 <create_name+0xc3>
c00027be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027c2:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00027c7:	66 83 f8 20          	cmp    ax,0x20
c00027cb:	74 06                	je     c00027d3 <create_name+0xc0>
c00027cd:	66 83 f8 2e          	cmp    ax,0x2e
c00027d1:	75 03                	jne    c00027d6 <create_name+0xc3>
c00027d3:	4e                   	dec    esi
c00027d4:	eb e4                	jmp    c00027ba <create_name+0xa7>
c00027d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027da:	31 ed                	xor    ebp,ebp
c00027dc:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00027e2:	85 f6                	test   esi,esi
c00027e4:	0f 84 55 ff ff ff    	je     c000273f <create_name+0x2c>
c00027ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ee:	8d 55 01             	lea    edx,[ebp+0x1]
c00027f1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00027f5:	66 83 f8 20          	cmp    ax,0x20
c00027f9:	75 04                	jne    c00027ff <create_name+0xec>
c00027fb:	89 d5                	mov    ebp,edx
c00027fd:	eb eb                	jmp    c00027ea <create_name+0xd7>
c00027ff:	85 ed                	test   ebp,ebp
c0002801:	75 06                	jne    c0002809 <create_name+0xf6>
c0002803:	66 83 f8 2e          	cmp    ax,0x2e
c0002807:	75 08                	jne    c0002811 <create_name+0xfe>
c0002809:	83 cb 03             	or     ebx,0x3
c000280c:	eb 03                	jmp    c0002811 <create_name+0xfe>
c000280e:	4e                   	dec    esi
c000280f:	74 0c                	je     c000281d <create_name+0x10a>
c0002811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002815:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c000281b:	75 f1                	jne    c000280e <create_name+0xfb>
c000281d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002822:	8d 47 20             	lea    eax,[edi+0x20]
c0002825:	ba 20 00 00 00       	mov    edx,0x20
c000282a:	e8 5e f3 ff ff       	call   c0001b8d <mem_set>
c000282f:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002837:	31 c9                	xor    ecx,ecx
c0002839:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000283e:	8d 45 01             	lea    eax,[ebp+0x1]
c0002841:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002849:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c000284d:	66 85 ed             	test   bp,bp
c0002850:	0f 84 30 01 00 00    	je     c0002986 <create_name+0x273>
c0002856:	66 83 fd 20          	cmp    bp,0x20
c000285a:	74 10                	je     c000286c <create_name+0x159>
c000285c:	66 83 fd 2e          	cmp    bp,0x2e
c0002860:	75 13                	jne    c0002875 <create_name+0x162>
c0002862:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002866:	0f 84 6b 01 00 00    	je     c00029d7 <create_name+0x2c4>
c000286c:	83 cb 03             	or     ebx,0x3
c000286f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002873:	eb c9                	jmp    c000283e <create_name+0x12b>
c0002875:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002879:	73 0b                	jae    c0002886 <create_name+0x173>
c000287b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c000287f:	75 47                	jne    c00028c8 <create_name+0x1b5>
c0002881:	e9 51 01 00 00       	jmp    c00029d7 <create_name+0x2c4>
c0002886:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c000288b:	75 10                	jne    c000289d <create_name+0x18a>
c000288d:	83 cb 03             	or     ebx,0x3
c0002890:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002898:	e9 e9 00 00 00       	jmp    c0002986 <create_name+0x273>
c000289d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028a1:	74 0d                	je     c00028b0 <create_name+0x19d>
c00028a3:	83 cb 03             	or     ebx,0x3
c00028a6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c00028aa:	0f 87 d6 00 00 00    	ja     c0002986 <create_name+0x273>
c00028b0:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c00028b5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00028b9:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c00028c1:	b9 08 00 00 00       	mov    ecx,0x8
c00028c6:	eb a7                	jmp    c000286f <create_name+0x15c>
c00028c8:	66 83 fd 7f          	cmp    bp,0x7f
c00028cc:	76 68                	jbe    c0002936 <create_name+0x223>
c00028ce:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00028d2:	88 da                	mov    dl,bl
c00028d4:	83 ca 02             	or     edx,0x2
c00028d7:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00028db:	50                   	push   eax
c00028dc:	50                   	push   eax
c00028dd:	68 b5 01 00 00       	push   0x1b5
c00028e2:	55                   	push   ebp
c00028e3:	e8 e0 2f 00 00       	call   c00058c8 <ff_uni2oem>
c00028e8:	83 c4 10             	add    esp,0x10
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	a8 80                	test   al,0x80
c00028ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00028f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00028f7:	74 0c                	je     c0002905 <create_name+0x1f2>
c00028f9:	83 e5 7f             	and    ebp,0x7f
c00028fc:	0f b6 ad 20 c5 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3ae0]
c0002903:	eb 2a                	jmp    c000292f <create_name+0x21c>
c0002905:	66 3d ff 00          	cmp    ax,0xff
c0002909:	76 24                	jbe    c000292f <create_name+0x21c>
c000290b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000290f:	48                   	dec    eax
c0002910:	39 c8                	cmp    eax,ecx
c0002912:	77 0c                	ja     c0002920 <create_name+0x20d>
c0002914:	83 cb 03             	or     ebx,0x3
c0002917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000291b:	e9 4f ff ff ff       	jmp    c000286f <create_name+0x15c>
c0002920:	89 e8                	mov    eax,ebp
c0002922:	88 d3                	mov    bl,dl
c0002924:	66 c1 e8 08          	shr    ax,0x8
c0002928:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c000292c:	41                   	inc    ecx
c000292d:	eb 4b                	jmp    c000297a <create_name+0x267>
c000292f:	88 d3                	mov    bl,dl
c0002931:	66 85 ed             	test   bp,bp
c0002934:	74 19                	je     c000294f <create_name+0x23c>
c0002936:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000293a:	0f b7 d5             	movzx  edx,bp
c000293d:	b8 6b c4 01 c0       	mov    eax,0xc001c46b
c0002942:	e8 74 f2 ff ff       	call   c0001bbb <chk_chr>
c0002947:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000294b:	85 c0                	test   eax,eax
c000294d:	74 0a                	je     c0002959 <create_name+0x246>
c000294f:	83 cb 03             	or     ebx,0x3
c0002952:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002957:	eb 21                	jmp    c000297a <create_name+0x267>
c0002959:	8d 45 bf             	lea    eax,[ebp-0x41]
c000295c:	66 83 f8 19          	cmp    ax,0x19
c0002960:	77 07                	ja     c0002969 <create_name+0x256>
c0002962:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002967:	eb 11                	jmp    c000297a <create_name+0x267>
c0002969:	8d 45 9f             	lea    eax,[ebp-0x61]
c000296c:	66 83 f8 19          	cmp    ax,0x19
c0002970:	77 08                	ja     c000297a <create_name+0x267>
c0002972:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002977:	83 ed 20             	sub    ebp,0x20
c000297a:	89 e8                	mov    eax,ebp
c000297c:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002980:	41                   	inc    ecx
c0002981:	e9 e9 fe ff ff       	jmp    c000286f <create_name+0x15c>
c0002986:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c000298a:	75 04                	jne    c0002990 <create_name+0x27d>
c000298c:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002990:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002995:	75 05                	jne    c000299c <create_name+0x289>
c0002997:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c000299c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029a0:	83 e0 0c             	and    eax,0xc
c00029a3:	3c 0c                	cmp    al,0xc
c00029a5:	74 0b                	je     c00029b2 <create_name+0x29f>
c00029a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00029ab:	83 e0 03             	and    eax,0x3
c00029ae:	3c 03                	cmp    al,0x3
c00029b0:	75 05                	jne    c00029b7 <create_name+0x2a4>
c00029b2:	83 cb 02             	or     ebx,0x2
c00029b5:	eb 19                	jmp    c00029d0 <create_name+0x2bd>
c00029b7:	f6 c3 02             	test   bl,0x2
c00029ba:	75 14                	jne    c00029d0 <create_name+0x2bd>
c00029bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00029c1:	74 03                	je     c00029c6 <create_name+0x2b3>
c00029c3:	83 cb 10             	or     ebx,0x10
c00029c6:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c00029cb:	74 03                	je     c00029d0 <create_name+0x2bd>
c00029cd:	83 cb 08             	or     ebx,0x8
c00029d0:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c00029d3:	31 c0                	xor    eax,eax
c00029d5:	eb 10                	jmp    c00029e7 <create_name+0x2d4>
c00029d7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c00029dc:	0f 85 ce fe ff ff    	jne    c00028b0 <create_name+0x19d>
c00029e2:	e9 a6 fe ff ff       	jmp    c000288d <create_name+0x17a>
c00029e7:	83 c4 3c             	add    esp,0x3c
c00029ea:	5b                   	pop    ebx
c00029eb:	5e                   	pop    esi
c00029ec:	5f                   	pop    edi
c00029ed:	5d                   	pop    ebp
c00029ee:	c3                   	ret    

c00029ef <cmp_lfn>:
c00029ef:	55                   	push   ebp
c00029f0:	57                   	push   edi
c00029f1:	89 d7                	mov    edi,edx
c00029f3:	56                   	push   esi
c00029f4:	53                   	push   ebx
c00029f5:	83 ec 1c             	sub    esp,0x1c
c00029f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029fc:	8d 42 1a             	lea    eax,[edx+0x1a]
c00029ff:	e8 48 f1 ff ff       	call   c0001b4c <ld_word>
c0002a04:	66 85 c0             	test   ax,ax
c0002a07:	74 07                	je     c0002a10 <cmp_lfn+0x21>
c0002a09:	31 c0                	xor    eax,eax
c0002a0b:	e9 9a 00 00 00       	jmp    c0002aaa <cmp_lfn+0xbb>
c0002a10:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002a12:	bd 01 00 00 00       	mov    ebp,0x1
c0002a17:	83 e3 3f             	and    ebx,0x3f
c0002a1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002a22:	4b                   	dec    ebx
c0002a23:	6b db 0d             	imul   ebx,ebx,0xd
c0002a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a2a:	0f b6 80 a0 c5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3a60]
c0002a31:	01 f8                	add    eax,edi
c0002a33:	e8 14 f1 ff ff       	call   c0001b4c <ld_word>
c0002a38:	66 85 ed             	test   bp,bp
c0002a3b:	89 c6                	mov    esi,eax
c0002a3d:	74 3c                	je     c0002a7b <cmp_lfn+0x8c>
c0002a3f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002a45:	77 c2                	ja     c0002a09 <cmp_lfn+0x1a>
c0002a47:	83 ec 0c             	sub    esp,0xc
c0002a4a:	0f b7 c0             	movzx  eax,ax
c0002a4d:	50                   	push   eax
c0002a4e:	e8 8d 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a53:	89 c5                	mov    ebp,eax
c0002a55:	8d 43 01             	lea    eax,[ebx+0x1]
c0002a58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002a60:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0002a67:	e8 74 2f 00 00       	call   c00059e0 <ff_wtoupper>
c0002a6c:	83 c4 10             	add    esp,0x10
c0002a6f:	39 c5                	cmp    ebp,eax
c0002a71:	75 96                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a73:	89 f5                	mov    ebp,esi
c0002a75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002a79:	eb 04                	jmp    c0002a7f <cmp_lfn+0x90>
c0002a7b:	66 46                	inc    si
c0002a7d:	75 8a                	jne    c0002a09 <cmp_lfn+0x1a>
c0002a7f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002a83:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002a88:	75 9c                	jne    c0002a26 <cmp_lfn+0x37>
c0002a8a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002a8d:	74 16                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a8f:	66 85 ed             	test   bp,bp
c0002a92:	74 11                	je     c0002aa5 <cmp_lfn+0xb6>
c0002a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a98:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002a9d:	0f 94 c0             	sete   al
c0002aa0:	0f b6 c0             	movzx  eax,al
c0002aa3:	eb 05                	jmp    c0002aaa <cmp_lfn+0xbb>
c0002aa5:	b8 01 00 00 00       	mov    eax,0x1
c0002aaa:	83 c4 1c             	add    esp,0x1c
c0002aad:	5b                   	pop    ebx
c0002aae:	5e                   	pop    esi
c0002aaf:	5f                   	pop    edi
c0002ab0:	5d                   	pop    ebp
c0002ab1:	c3                   	ret    

c0002ab2 <sync_fs>:
c0002ab2:	56                   	push   esi
c0002ab3:	53                   	push   ebx
c0002ab4:	53                   	push   ebx
c0002ab5:	89 c3                	mov    ebx,eax
c0002ab7:	e8 53 f5 ff ff       	call   c000200f <sync_window>
c0002abc:	85 c0                	test   eax,eax
c0002abe:	0f 85 9a 00 00 00    	jne    c0002b5e <sync_fs+0xac>
c0002ac4:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ac7:	75 7b                	jne    c0002b44 <sync_fs+0x92>
c0002ac9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002acd:	75 75                	jne    c0002b44 <sync_fs+0x92>
c0002acf:	b9 00 02 00 00       	mov    ecx,0x200
c0002ad4:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ad7:	31 d2                	xor    edx,edx
c0002ad9:	89 f0                	mov    eax,esi
c0002adb:	e8 ad f0 ff ff       	call   c0001b8d <mem_set>
c0002ae0:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ae6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002aeb:	e8 81 f0 ff ff       	call   c0001b71 <st_word>
c0002af0:	ba 52 52 61 41       	mov    edx,0x41615252
c0002af5:	89 f0                	mov    eax,esi
c0002af7:	e8 79 f0 ff ff       	call   c0001b75 <st_dword>
c0002afc:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002b02:	ba 72 72 41 61       	mov    edx,0x61417272
c0002b07:	e8 69 f0 ff ff       	call   c0001b75 <st_dword>
c0002b0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002b0f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002b15:	e8 5b f0 ff ff       	call   c0001b75 <st_dword>
c0002b1a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002b1d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002b23:	e8 4d f0 ff ff       	call   c0001b75 <st_dword>
c0002b28:	6a 01                	push   0x1
c0002b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002b2d:	40                   	inc    eax
c0002b2e:	50                   	push   eax
c0002b2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002b32:	56                   	push   esi
c0002b33:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b37:	50                   	push   eax
c0002b38:	e8 da ef ff ff       	call   c0001b17 <disk_write>
c0002b3d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002b41:	83 c4 10             	add    esp,0x10
c0002b44:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002b48:	51                   	push   ecx
c0002b49:	6a 00                	push   0x0
c0002b4b:	6a 00                	push   0x0
c0002b4d:	50                   	push   eax
c0002b4e:	e8 da ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b53:	83 c4 10             	add    esp,0x10
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 95 c0             	setne  al
c0002b5b:	0f b6 c0             	movzx  eax,al
c0002b5e:	5a                   	pop    edx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	c3                   	ret    

c0002b62 <create_partition>:
c0002b62:	55                   	push   ebp
c0002b63:	0f b6 c0             	movzx  eax,al
c0002b66:	57                   	push   edi
c0002b67:	56                   	push   esi
c0002b68:	53                   	push   ebx
c0002b69:	83 ec 40             	sub    esp,0x40
c0002b6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b70:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002b74:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b78:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002b7c:	50                   	push   eax
c0002b7d:	6a 01                	push   0x1
c0002b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002b83:	e8 a5 ef ff ff       	call   c0001b2d <disk_ioctl>
c0002b88:	83 c4 10             	add    esp,0x10
c0002b8b:	85 c0                	test   eax,eax
c0002b8d:	0f 85 69 01 00 00    	jne    c0002cfc <create_partition+0x19a>
c0002b93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b97:	b9 05 00 00 00       	mov    ecx,0x5
c0002b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ba0:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bb0:	f7 f3                	div    ebx
c0002bb2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002bb7:	76 0c                	jbe    c0002bc5 <create_partition+0x63>
c0002bb9:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002bbd:	49                   	dec    ecx
c0002bbe:	75 e5                	jne    c0002ba5 <create_partition+0x43>
c0002bc0:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002bc5:	b9 00 02 00 00       	mov    ecx,0x200
c0002bca:	31 d2                	xor    edx,edx
c0002bcc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bd0:	e8 b8 ef ff ff       	call   c0001b8d <mem_set>
c0002bd5:	b9 64 00 00 00       	mov    ecx,0x64
c0002bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bde:	31 d2                	xor    edx,edx
c0002be0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002be8:	f7 f1                	div    ecx
c0002bea:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002bef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002bf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002bf7:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002bfd:	85 c9                	test   ecx,ecx
c0002bff:	75 34                	jne    c0002c35 <create_partition+0xd3>
c0002c01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002c05:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002c0a:	05 fe 01 00 00       	add    eax,0x1fe
c0002c0f:	e8 5d ef ff ff       	call   c0001b71 <st_word>
c0002c14:	6a 01                	push   0x1
c0002c16:	6a 00                	push   0x0
c0002c18:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002c20:	e8 f2 ee ff ff       	call   c0001b17 <disk_write>
c0002c25:	83 c4 10             	add    esp,0x10
c0002c28:	85 c0                	test   eax,eax
c0002c2a:	0f 95 c0             	setne  al
c0002c2d:	0f b6 c0             	movzx  eax,al
c0002c30:	e9 cc 00 00 00       	jmp    c0002d01 <create_partition+0x19f>
c0002c35:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002c39:	76 c6                	jbe    c0002c01 <create_partition+0x9f>
c0002c3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002c3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002c43:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002c46:	83 fe 64             	cmp    esi,0x64
c0002c49:	77 0d                	ja     c0002c58 <create_partition+0xf6>
c0002c4b:	74 07                	je     c0002c54 <create_partition+0xf2>
c0002c4d:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002c52:	eb 04                	jmp    c0002c58 <create_partition+0xf6>
c0002c54:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c58:	31 c0                	xor    eax,eax
c0002c5a:	89 f2                	mov    edx,esi
c0002c5c:	01 ca                	add    edx,ecx
c0002c5e:	0f 92 c0             	setb   al
c0002c61:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002c65:	77 04                	ja     c0002c6b <create_partition+0x109>
c0002c67:	85 c0                	test   eax,eax
c0002c69:	74 08                	je     c0002c73 <create_partition+0x111>
c0002c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002c6f:	29 ce                	sub    esi,ecx
c0002c71:	eb 04                	jmp    c0002c77 <create_partition+0x115>
c0002c73:	85 f6                	test   esi,esi
c0002c75:	74 8a                	je     c0002c01 <create_partition+0x9f>
c0002c77:	89 ca                	mov    edx,ecx
c0002c79:	89 d8                	mov    eax,ebx
c0002c7b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002c80:	e8 f0 ee ff ff       	call   c0001b75 <st_dword>
c0002c85:	8d 43 04             	lea    eax,[ebx+0x4]
c0002c88:	89 f2                	mov    edx,esi
c0002c8a:	83 c3 10             	add    ebx,0x10
c0002c8d:	e8 e3 ee ff ff       	call   c0001b75 <st_dword>
c0002c92:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002c97:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002c9b:	31 d2                	xor    edx,edx
c0002c9d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002ca4:	89 c8                	mov    eax,ecx
c0002ca6:	01 f1                	add    ecx,esi
c0002ca8:	f7 f5                	div    ebp
c0002caa:	89 d5                	mov    ebp,edx
c0002cac:	31 d2                	xor    edx,edx
c0002cae:	45                   	inc    ebp
c0002caf:	f7 f7                	div    edi
c0002cb1:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002cb4:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002cb7:	89 c2                	mov    edx,eax
c0002cb9:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002cbc:	c1 ea 02             	shr    edx,0x2
c0002cbf:	83 e2 c0             	and    edx,0xffffffc0
c0002cc2:	09 ea                	or     edx,ebp
c0002cc4:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002cc9:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ccc:	31 d2                	xor    edx,edx
c0002cce:	f7 f5                	div    ebp
c0002cd0:	89 d6                	mov    esi,edx
c0002cd2:	31 d2                	xor    edx,edx
c0002cd4:	46                   	inc    esi
c0002cd5:	f7 f7                	div    edi
c0002cd7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002cda:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002cdd:	89 c7                	mov    edi,eax
c0002cdf:	c1 ef 02             	shr    edi,0x2
c0002ce2:	83 e7 c0             	and    edi,0xffffffc0
c0002ce5:	09 fe                	or     esi,edi
c0002ce7:	89 f2                	mov    edx,esi
c0002ce9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002cec:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002cf1:	0f 85 06 ff ff ff    	jne    c0002bfd <create_partition+0x9b>
c0002cf7:	e9 05 ff ff ff       	jmp    c0002c01 <create_partition+0x9f>
c0002cfc:	b8 01 00 00 00       	mov    eax,0x1
c0002d01:	83 c4 3c             	add    esp,0x3c
c0002d04:	5b                   	pop    ebx
c0002d05:	5e                   	pop    esi
c0002d06:	5f                   	pop    edi
c0002d07:	5d                   	pop    ebp
c0002d08:	c3                   	ret    

c0002d09 <get_fileinfo>:
c0002d09:	55                   	push   ebp
c0002d0a:	57                   	push   edi
c0002d0b:	56                   	push   esi
c0002d0c:	53                   	push   ebx
c0002d0d:	83 ec 1c             	sub    esp,0x1c
c0002d10:	8b 30                	mov    esi,DWORD PTR [eax]
c0002d12:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002d16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002d1a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002d1e:	0f 84 c1 01 00 00    	je     c0002ee5 <get_fileinfo+0x1dc>
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	89 c6                	mov    esi,eax
c0002d28:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002d2c:	74 6a                	je     c0002d98 <get_fileinfo+0x8f>
c0002d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002d36:	31 ed                	xor    ebp,ebp
c0002d38:	31 ff                	xor    edi,edi
c0002d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d45:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002d49:	66 85 d2             	test   dx,dx
c0002d4c:	74 3e                	je     c0002d8c <get_fileinfo+0x83>
c0002d4e:	66 85 ed             	test   bp,bp
c0002d51:	75 0c                	jne    c0002d5f <get_fileinfo+0x56>
c0002d53:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002d59:	66 3d ff 07          	cmp    ax,0x7ff
c0002d5d:	76 22                	jbe    c0002d81 <get_fileinfo+0x78>
c0002d5f:	b9 ff 00 00 00       	mov    ecx,0xff
c0002d64:	89 e8                	mov    eax,ebp
c0002d66:	29 f9                	sub    ecx,edi
c0002d68:	c1 e0 10             	shl    eax,0x10
c0002d6b:	09 d0                	or     eax,edx
c0002d6d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002d71:	e8 23 ef ff ff       	call   c0001c99 <put_utf>
c0002d76:	84 c0                	test   al,al
c0002d78:	74 10                	je     c0002d8a <get_fileinfo+0x81>
c0002d7a:	0f b6 c0             	movzx  eax,al
c0002d7d:	31 d2                	xor    edx,edx
c0002d7f:	01 c7                	add    edi,eax
c0002d81:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002d86:	89 d5                	mov    ebp,edx
c0002d88:	eb b0                	jmp    c0002d3a <get_fileinfo+0x31>
c0002d8a:	31 ff                	xor    edi,edi
c0002d8c:	66 85 ed             	test   bp,bp
c0002d8f:	74 02                	je     c0002d93 <get_fileinfo+0x8a>
c0002d91:	31 ff                	xor    edi,edi
c0002d93:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002d98:	31 ff                	xor    edi,edi
c0002d9a:	31 c9                	xor    ecx,ecx
c0002d9c:	83 f9 0a             	cmp    ecx,0xa
c0002d9f:	0f 87 ad 00 00 00    	ja     c0002e52 <get_fileinfo+0x149>
c0002da5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002da8:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002dab:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002daf:	66 83 fa 20          	cmp    dx,0x20
c0002db3:	0f 84 92 00 00 00    	je     c0002e4b <get_fileinfo+0x142>
c0002db9:	66 83 fa 05          	cmp    dx,0x5
c0002dbd:	75 05                	jne    c0002dc4 <get_fileinfo+0xbb>
c0002dbf:	ba e5 00 00 00       	mov    edx,0xe5
c0002dc4:	83 ff 0b             	cmp    edi,0xb
c0002dc7:	77 0b                	ja     c0002dd4 <get_fileinfo+0xcb>
c0002dc9:	83 fd 09             	cmp    ebp,0x9
c0002dcc:	75 06                	jne    c0002dd4 <get_fileinfo+0xcb>
c0002dce:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002dd3:	47                   	inc    edi
c0002dd4:	0f b7 c2             	movzx  eax,dx
c0002dd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ddb:	e8 ed ed ff ff       	call   c0001bcd <dbc_1st>
c0002de0:	85 c0                	test   eax,eax
c0002de2:	74 2f                	je     c0002e13 <get_fileinfo+0x10a>
c0002de4:	83 fd 08             	cmp    ebp,0x8
c0002de7:	74 2a                	je     c0002e13 <get_fileinfo+0x10a>
c0002de9:	83 fd 0b             	cmp    ebp,0xb
c0002dec:	74 25                	je     c0002e13 <get_fileinfo+0x10a>
c0002dee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002df1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002df5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002df9:	e8 d2 ed ff ff       	call   c0001bd0 <dbc_2nd>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	74 11                	je     c0002e13 <get_fileinfo+0x10a>
c0002e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002e0b:	c1 e2 08             	shl    edx,0x8
c0002e0e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002e11:	09 c2                	or     edx,eax
c0002e13:	0f b7 d2             	movzx  edx,dx
c0002e16:	50                   	push   eax
c0002e17:	50                   	push   eax
c0002e18:	68 b5 01 00 00       	push   0x1b5
c0002e1d:	52                   	push   edx
c0002e1e:	e8 45 2b 00 00       	call   c0005968 <ff_oem2uni>
c0002e23:	83 c4 10             	add    esp,0x10
c0002e26:	66 85 c0             	test   ax,ax
c0002e29:	75 04                	jne    c0002e2f <get_fileinfo+0x126>
c0002e2b:	31 ff                	xor    edi,edi
c0002e2d:	eb 23                	jmp    c0002e52 <get_fileinfo+0x149>
c0002e2f:	b9 0c 00 00 00       	mov    ecx,0xc
c0002e34:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002e38:	29 f9                	sub    ecx,edi
c0002e3a:	0f b7 c0             	movzx  eax,ax
c0002e3d:	e8 57 ee ff ff       	call   c0001c99 <put_utf>
c0002e42:	84 c0                	test   al,al
c0002e44:	74 e5                	je     c0002e2b <get_fileinfo+0x122>
c0002e46:	0f b6 c0             	movzx  eax,al
c0002e49:	01 c7                	add    edi,eax
c0002e4b:	89 e9                	mov    ecx,ebp
c0002e4d:	e9 4a ff ff ff       	jmp    c0002d9c <get_fileinfo+0x93>
c0002e52:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0002e57:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0002e5b:	75 54                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002e5d:	85 ff                	test   edi,edi
c0002e5f:	75 0b                	jne    c0002e6c <get_fileinfo+0x163>
c0002e61:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0002e65:	ba 01 00 00 00       	mov    edx,0x1
c0002e6a:	eb 33                	jmp    c0002e9f <get_fileinfo+0x196>
c0002e6c:	b1 08                	mov    cl,0x8
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0002e76:	84 c0                	test   al,al
c0002e78:	74 25                	je     c0002e9f <get_fileinfo+0x196>
c0002e7a:	66 83 f8 2e          	cmp    ax,0x2e
c0002e7e:	74 16                	je     c0002e96 <get_fileinfo+0x18d>
c0002e80:	8d 78 bf             	lea    edi,[eax-0x41]
c0002e83:	66 83 ff 19          	cmp    di,0x19
c0002e87:	77 0f                	ja     c0002e98 <get_fileinfo+0x18f>
c0002e89:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0002e8c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0002e8f:	74 07                	je     c0002e98 <get_fileinfo+0x18f>
c0002e91:	83 c0 20             	add    eax,0x20
c0002e94:	eb 02                	jmp    c0002e98 <get_fileinfo+0x18f>
c0002e96:	b1 10                	mov    cl,0x10
c0002e98:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0002e9c:	42                   	inc    edx
c0002e9d:	eb d1                	jmp    c0002e70 <get_fileinfo+0x167>
c0002e9f:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0002ea4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ea7:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0002eab:	75 04                	jne    c0002eb1 <get_fileinfo+0x1a8>
c0002ead:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0002eb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eb4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0002eb7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0002eba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ebd:	83 c0 1c             	add    eax,0x1c
c0002ec0:	e8 94 ec ff ff       	call   c0001b59 <ld_dword>
c0002ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0002ec7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002eca:	83 c0 16             	add    eax,0x16
c0002ecd:	e8 7a ec ff ff       	call   c0001b4c <ld_word>
c0002ed2:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002ed6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002ed9:	83 c0 18             	add    eax,0x18
c0002edc:	e8 6b ec ff ff       	call   c0001b4c <ld_word>
c0002ee1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0002ee5:	83 c4 1c             	add    esp,0x1c
c0002ee8:	5b                   	pop    ebx
c0002ee9:	5e                   	pop    esi
c0002eea:	5f                   	pop    edi
c0002eeb:	5d                   	pop    ebp
c0002eec:	c3                   	ret    

c0002eed <ld_clust.isra.0>:
c0002eed:	56                   	push   esi
c0002eee:	89 c6                	mov    esi,eax
c0002ef0:	53                   	push   ebx
c0002ef1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ef4:	89 d3                	mov    ebx,edx
c0002ef6:	e8 51 ec ff ff       	call   c0001b4c <ld_word>
c0002efb:	0f b7 c8             	movzx  ecx,ax
c0002efe:	89 f0                	mov    eax,esi
c0002f00:	3c 03                	cmp    al,0x3
c0002f02:	75 0d                	jne    c0002f11 <ld_clust.isra.0+0x24>
c0002f04:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f07:	e8 40 ec ff ff       	call   c0001b4c <ld_word>
c0002f0c:	c1 e0 10             	shl    eax,0x10
c0002f0f:	09 c1                	or     ecx,eax
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	5b                   	pop    ebx
c0002f14:	5e                   	pop    esi
c0002f15:	c3                   	ret    

c0002f16 <st_clust.isra.1>:
c0002f16:	56                   	push   esi
c0002f17:	89 c6                	mov    esi,eax
c0002f19:	53                   	push   ebx
c0002f1a:	89 d3                	mov    ebx,edx
c0002f1c:	0f b7 d1             	movzx  edx,cx
c0002f1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0002f22:	e8 4a ec ff ff       	call   c0001b71 <st_word>
c0002f27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0002f2a:	75 0f                	jne    c0002f3b <st_clust.isra.1+0x25>
c0002f2c:	c1 e9 10             	shr    ecx,0x10
c0002f2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0002f32:	89 ca                	mov    edx,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	e9 36 ec ff ff       	jmp    c0001b71 <st_word>
c0002f3b:	5b                   	pop    ebx
c0002f3c:	5e                   	pop    esi
c0002f3d:	c3                   	ret    

c0002f3e <get_fat.isra.2>:
c0002f3e:	b9 01 00 00 00       	mov    ecx,0x1
c0002f43:	83 fa 01             	cmp    edx,0x1
c0002f46:	0f 86 f1 00 00 00    	jbe    c000303d <get_fat.isra.2+0xff>
c0002f4c:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0002f4f:	0f 83 e8 00 00 00    	jae    c000303d <get_fat.isra.2+0xff>
c0002f55:	55                   	push   ebp
c0002f56:	57                   	push   edi
c0002f57:	89 c7                	mov    edi,eax
c0002f59:	56                   	push   esi
c0002f5a:	89 d6                	mov    esi,edx
c0002f5c:	53                   	push   ebx
c0002f5d:	83 ec 0c             	sub    esp,0xc
c0002f60:	8a 00                	mov    al,BYTE PTR [eax]
c0002f62:	3c 02                	cmp    al,0x2
c0002f64:	74 78                	je     c0002fde <get_fat.isra.2+0xa0>
c0002f66:	3c 03                	cmp    al,0x3
c0002f68:	0f 84 97 00 00 00    	je     c0003005 <get_fat.isra.2+0xc7>
c0002f6e:	fe c8                	dec    al
c0002f70:	0f 85 bd 00 00 00    	jne    c0003033 <get_fat.isra.2+0xf5>
c0002f76:	89 d3                	mov    ebx,edx
c0002f78:	89 f8                	mov    eax,edi
c0002f7a:	d1 eb                	shr    ebx,1
c0002f7c:	01 d3                	add    ebx,edx
c0002f7e:	89 da                	mov    edx,ebx
c0002f80:	c1 ea 09             	shr    edx,0x9
c0002f83:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002f86:	e8 e7 f0 ff ff       	call   c0002072 <move_window>
c0002f8b:	85 c0                	test   eax,eax
c0002f8d:	74 08                	je     c0002f97 <get_fat.isra.2+0x59>
c0002f8f:	83 c9 ff             	or     ecx,0xffffffff
c0002f92:	e9 9c 00 00 00       	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002f97:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f9a:	89 f8                	mov    eax,edi
c0002f9c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002fa2:	89 ea                	mov    edx,ebp
c0002fa4:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0002fa8:	c1 ea 09             	shr    edx,0x9
c0002fab:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fae:	e8 bf f0 ff ff       	call   c0002072 <move_window>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	75 d8                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fb7:	0f b6 c3             	movzx  eax,bl
c0002fba:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002fc0:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0002fc5:	c1 e3 08             	shl    ebx,0x8
c0002fc8:	09 c3                	or     ebx,eax
c0002fca:	89 d9                	mov    ecx,ebx
c0002fcc:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002fd2:	83 e6 01             	and    esi,0x1
c0002fd5:	74 5c                	je     c0003033 <get_fat.isra.2+0xf5>
c0002fd7:	89 d9                	mov    ecx,ebx
c0002fd9:	c1 e9 04             	shr    ecx,0x4
c0002fdc:	eb 55                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0002fde:	c1 ea 08             	shr    edx,0x8
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002fe6:	e8 87 f0 ff ff       	call   c0002072 <move_window>
c0002feb:	85 c0                	test   eax,eax
c0002fed:	75 a0                	jne    c0002f8f <get_fat.isra.2+0x51>
c0002fef:	01 f6                	add    esi,esi
c0002ff1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ff7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002ffb:	e8 4c eb ff ff       	call   c0001b4c <ld_word>
c0003000:	0f b7 c8             	movzx  ecx,ax
c0003003:	eb 2e                	jmp    c0003033 <get_fat.isra.2+0xf5>
c0003005:	c1 ea 07             	shr    edx,0x7
c0003008:	89 f8                	mov    eax,edi
c000300a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000300d:	e8 60 f0 ff ff       	call   c0002072 <move_window>
c0003012:	85 c0                	test   eax,eax
c0003014:	0f 85 75 ff ff ff    	jne    c0002f8f <get_fat.isra.2+0x51>
c000301a:	c1 e6 02             	shl    esi,0x2
c000301d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003023:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003027:	e8 2d eb ff ff       	call   c0001b59 <ld_dword>
c000302c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003031:	89 c1                	mov    ecx,eax
c0003033:	83 c4 0c             	add    esp,0xc
c0003036:	89 c8                	mov    eax,ecx
c0003038:	5b                   	pop    ebx
c0003039:	5e                   	pop    esi
c000303a:	5f                   	pop    edi
c000303b:	5d                   	pop    ebp
c000303c:	c3                   	ret    
c000303d:	89 c8                	mov    eax,ecx
c000303f:	c3                   	ret    

c0003040 <dir_sdi>:
c0003040:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003046:	0f 87 b6 00 00 00    	ja     c0003102 <dir_sdi+0xc2>
c000304c:	55                   	push   ebp
c000304d:	57                   	push   edi
c000304e:	56                   	push   esi
c000304f:	53                   	push   ebx
c0003050:	89 d3                	mov    ebx,edx
c0003052:	83 ec 1c             	sub    esp,0x1c
c0003055:	f6 c2 1f             	test   dl,0x1f
c0003058:	74 0a                	je     c0003064 <dir_sdi+0x24>
c000305a:	b8 02 00 00 00       	mov    eax,0x2
c000305f:	e9 96 00 00 00       	jmp    c00030fa <dir_sdi+0xba>
c0003064:	89 c6                	mov    esi,eax
c0003066:	8b 38                	mov    edi,DWORD PTR [eax]
c0003068:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000306b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000306e:	85 c9                	test   ecx,ecx
c0003070:	75 23                	jne    c0003095 <dir_sdi+0x55>
c0003072:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003075:	76 07                	jbe    c000307e <dir_sdi+0x3e>
c0003077:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000307a:	85 c0                	test   eax,eax
c000307c:	75 15                	jne    c0003093 <dir_sdi+0x53>
c000307e:	89 da                	mov    edx,ebx
c0003080:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003084:	c1 ea 05             	shr    edx,0x5
c0003087:	39 c2                	cmp    edx,eax
c0003089:	73 cf                	jae    c000305a <dir_sdi+0x1a>
c000308b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000308e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003091:	eb 3d                	jmp    c00030d0 <dir_sdi+0x90>
c0003093:	89 c1                	mov    ecx,eax
c0003095:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003099:	c1 e5 09             	shl    ebp,0x9
c000309c:	89 ca                	mov    edx,ecx
c000309e:	39 eb                	cmp    ebx,ebp
c00030a0:	72 1c                	jb     c00030be <dir_sdi+0x7e>
c00030a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00030a4:	e8 95 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c00030a9:	89 c1                	mov    ecx,eax
c00030ab:	83 f8 ff             	cmp    eax,0xffffffff
c00030ae:	74 45                	je     c00030f5 <dir_sdi+0xb5>
c00030b0:	83 f8 01             	cmp    eax,0x1
c00030b3:	76 a5                	jbe    c000305a <dir_sdi+0x1a>
c00030b5:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00030b8:	76 a0                	jbe    c000305a <dir_sdi+0x1a>
c00030ba:	29 eb                	sub    ebx,ebp
c00030bc:	eb de                	jmp    c000309c <dir_sdi+0x5c>
c00030be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	e8 c9 ec ff ff       	call   c0001d92 <clst2sect>
c00030c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030cd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030d0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00030d3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00030d6:	85 d2                	test   edx,edx
c00030d8:	74 80                	je     c000305a <dir_sdi+0x1a>
c00030da:	89 d8                	mov    eax,ebx
c00030dc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00030e2:	c1 e8 09             	shr    eax,0x9
c00030e5:	01 d0                	add    eax,edx
c00030e7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00030ea:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00030ee:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00030f1:	31 c0                	xor    eax,eax
c00030f3:	eb 05                	jmp    c00030fa <dir_sdi+0xba>
c00030f5:	b8 01 00 00 00       	mov    eax,0x1
c00030fa:	83 c4 1c             	add    esp,0x1c
c00030fd:	5b                   	pop    ebx
c00030fe:	5e                   	pop    esi
c00030ff:	5f                   	pop    edi
c0003100:	5d                   	pop    ebp
c0003101:	c3                   	ret    
c0003102:	b8 02 00 00 00       	mov    eax,0x2
c0003107:	c3                   	ret    

c0003108 <create_chain>:
c0003108:	55                   	push   ebp
c0003109:	89 c5                	mov    ebp,eax
c000310b:	57                   	push   edi
c000310c:	89 d7                	mov    edi,edx
c000310e:	56                   	push   esi
c000310f:	53                   	push   ebx
c0003110:	83 ec 1c             	sub    esp,0x1c
c0003113:	85 d2                	test   edx,edx
c0003115:	8b 30                	mov    esi,DWORD PTR [eax]
c0003117:	75 0e                	jne    c0003127 <create_chain+0x1f>
c0003119:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000311c:	85 c9                	test   ecx,ecx
c000311e:	74 34                	je     c0003154 <create_chain+0x4c>
c0003120:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003123:	77 34                	ja     c0003159 <create_chain+0x51>
c0003125:	eb 2d                	jmp    c0003154 <create_chain+0x4c>
c0003127:	89 f0                	mov    eax,esi
c0003129:	e8 10 fe ff ff       	call   c0002f3e <get_fat.isra.2>
c000312e:	89 c3                	mov    ebx,eax
c0003130:	83 f8 01             	cmp    eax,0x1
c0003133:	77 0a                	ja     c000313f <create_chain+0x37>
c0003135:	bb 01 00 00 00       	mov    ebx,0x1
c000313a:	e9 f9 00 00 00       	jmp    c0003238 <create_chain+0x130>
c000313f:	83 f8 ff             	cmp    eax,0xffffffff
c0003142:	0f 84 ed 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003148:	89 f9                	mov    ecx,edi
c000314a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000314d:	76 0a                	jbe    c0003159 <create_chain+0x51>
c000314f:	e9 e4 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003154:	b9 01 00 00 00       	mov    ecx,0x1
c0003159:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000315d:	75 07                	jne    c0003166 <create_chain+0x5e>
c000315f:	31 db                	xor    ebx,ebx
c0003161:	e9 d2 00 00 00       	jmp    c0003238 <create_chain+0x130>
c0003166:	39 f9                	cmp    ecx,edi
c0003168:	75 46                	jne    c00031b0 <create_chain+0xa8>
c000316a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000316d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003170:	77 05                	ja     c0003177 <create_chain+0x6f>
c0003172:	bb 02 00 00 00       	mov    ebx,0x2
c0003177:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000317b:	89 da                	mov    edx,ebx
c000317d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003180:	e8 b9 fd ff ff       	call   c0002f3e <get_fat.isra.2>
c0003185:	83 f8 01             	cmp    eax,0x1
c0003188:	74 ab                	je     c0003135 <create_chain+0x2d>
c000318a:	83 f8 ff             	cmp    eax,0xffffffff
c000318d:	0f 84 a2 00 00 00    	je     c0003235 <create_chain+0x12d>
c0003193:	85 c0                	test   eax,eax
c0003195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003199:	74 11                	je     c00031ac <create_chain+0xa4>
c000319b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	76 0d                	jbe    c00031b0 <create_chain+0xa8>
c00031a3:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00031a6:	73 08                	jae    c00031b0 <create_chain+0xa8>
c00031a8:	89 c1                	mov    ecx,eax
c00031aa:	eb 04                	jmp    c00031b0 <create_chain+0xa8>
c00031ac:	85 db                	test   ebx,ebx
c00031ae:	75 3d                	jne    c00031ed <create_chain+0xe5>
c00031b0:	89 cb                	mov    ebx,ecx
c00031b2:	43                   	inc    ebx
c00031b3:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00031b6:	77 0a                	ja     c00031c2 <create_chain+0xba>
c00031b8:	83 f9 01             	cmp    ecx,0x1
c00031bb:	76 a2                	jbe    c000315f <create_chain+0x57>
c00031bd:	bb 02 00 00 00       	mov    ebx,0x2
c00031c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00031c6:	89 da                	mov    edx,ebx
c00031c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00031cb:	e8 6e fd ff ff       	call   c0002f3e <get_fat.isra.2>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 19                	je     c00031ed <create_chain+0xe5>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	0f 84 58 ff ff ff    	je     c0003135 <create_chain+0x2d>
c00031dd:	40                   	inc    eax
c00031de:	74 55                	je     c0003235 <create_chain+0x12d>
c00031e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00031e4:	39 cb                	cmp    ebx,ecx
c00031e6:	75 ca                	jne    c00031b2 <create_chain+0xaa>
c00031e8:	e9 72 ff ff ff       	jmp    c000315f <create_chain+0x57>
c00031ed:	83 c9 ff             	or     ecx,0xffffffff
c00031f0:	89 da                	mov    edx,ebx
c00031f2:	89 f0                	mov    eax,esi
c00031f4:	e8 cf f2 ff ff       	call   c00024c8 <put_fat>
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 31                	jne    c000322e <create_chain+0x126>
c00031fd:	85 ff                	test   edi,edi
c00031ff:	75 16                	jne    c0003217 <create_chain+0x10f>
c0003201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003204:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003207:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000320a:	8d 57 fe             	lea    edx,[edi-0x2]
c000320d:	39 d0                	cmp    eax,edx
c000320f:	77 17                	ja     c0003228 <create_chain+0x120>
c0003211:	48                   	dec    eax
c0003212:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003215:	eb 11                	jmp    c0003228 <create_chain+0x120>
c0003217:	89 d9                	mov    ecx,ebx
c0003219:	89 fa                	mov    edx,edi
c000321b:	89 f0                	mov    eax,esi
c000321d:	e8 a6 f2 ff ff       	call   c00024c8 <put_fat>
c0003222:	85 c0                	test   eax,eax
c0003224:	74 db                	je     c0003201 <create_chain+0xf9>
c0003226:	eb 06                	jmp    c000322e <create_chain+0x126>
c0003228:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322c:	eb 0a                	jmp    c0003238 <create_chain+0x130>
c000322e:	48                   	dec    eax
c000322f:	0f 85 00 ff ff ff    	jne    c0003135 <create_chain+0x2d>
c0003235:	83 cb ff             	or     ebx,0xffffffff
c0003238:	83 c4 1c             	add    esp,0x1c
c000323b:	89 d8                	mov    eax,ebx
c000323d:	5b                   	pop    ebx
c000323e:	5e                   	pop    esi
c000323f:	5f                   	pop    edi
c0003240:	5d                   	pop    ebp
c0003241:	c3                   	ret    

c0003242 <remove_chain>:
c0003242:	55                   	push   ebp
c0003243:	57                   	push   edi
c0003244:	56                   	push   esi
c0003245:	89 d6                	mov    esi,edx
c0003247:	53                   	push   ebx
c0003248:	83 ec 0c             	sub    esp,0xc
c000324b:	83 fa 01             	cmp    edx,0x1
c000324e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003250:	76 65                	jbe    c00032b7 <remove_chain+0x75>
c0003252:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003255:	76 60                	jbe    c00032b7 <remove_chain+0x75>
c0003257:	89 c5                	mov    ebp,eax
c0003259:	89 ca                	mov    edx,ecx
c000325b:	85 c9                	test   ecx,ecx
c000325d:	74 0e                	je     c000326d <remove_chain+0x2b>
c000325f:	83 c9 ff             	or     ecx,0xffffffff
c0003262:	89 d8                	mov    eax,ebx
c0003264:	e8 5f f2 ff ff       	call   c00024c8 <put_fat>
c0003269:	85 c0                	test   eax,eax
c000326b:	75 56                	jne    c00032c3 <remove_chain+0x81>
c000326d:	89 f2                	mov    edx,esi
c000326f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003272:	e8 c7 fc ff ff       	call   c0002f3e <get_fat.isra.2>
c0003277:	89 c7                	mov    edi,eax
c0003279:	85 c0                	test   eax,eax
c000327b:	75 04                	jne    c0003281 <remove_chain+0x3f>
c000327d:	31 c0                	xor    eax,eax
c000327f:	eb 42                	jmp    c00032c3 <remove_chain+0x81>
c0003281:	83 f8 01             	cmp    eax,0x1
c0003284:	74 31                	je     c00032b7 <remove_chain+0x75>
c0003286:	83 f8 ff             	cmp    eax,0xffffffff
c0003289:	74 33                	je     c00032be <remove_chain+0x7c>
c000328b:	31 c9                	xor    ecx,ecx
c000328d:	89 f2                	mov    edx,esi
c000328f:	89 d8                	mov    eax,ebx
c0003291:	e8 32 f2 ff ff       	call   c00024c8 <put_fat>
c0003296:	85 c0                	test   eax,eax
c0003298:	75 29                	jne    c00032c3 <remove_chain+0x81>
c000329a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000329d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00032a0:	8d 4a fe             	lea    ecx,[edx-0x2]
c00032a3:	39 c8                	cmp    eax,ecx
c00032a5:	73 08                	jae    c00032af <remove_chain+0x6d>
c00032a7:	40                   	inc    eax
c00032a8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00032af:	89 fe                	mov    esi,edi
c00032b1:	39 fa                	cmp    edx,edi
c00032b3:	77 b8                	ja     c000326d <remove_chain+0x2b>
c00032b5:	eb c6                	jmp    c000327d <remove_chain+0x3b>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	eb 05                	jmp    c00032c3 <remove_chain+0x81>
c00032be:	b8 01 00 00 00       	mov    eax,0x1
c00032c3:	83 c4 0c             	add    esp,0xc
c00032c6:	5b                   	pop    ebx
c00032c7:	5e                   	pop    esi
c00032c8:	5f                   	pop    edi
c00032c9:	5d                   	pop    ebp
c00032ca:	c3                   	ret    

c00032cb <dir_next>:
c00032cb:	55                   	push   ebp
c00032cc:	57                   	push   edi
c00032cd:	56                   	push   esi
c00032ce:	53                   	push   ebx
c00032cf:	83 ec 1c             	sub    esp,0x1c
c00032d2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00032d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032d7:	83 c7 20             	add    edi,0x20
c00032da:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00032e0:	76 07                	jbe    c00032e9 <dir_next+0x1e>
c00032e2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00032e9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00032ec:	b9 04 00 00 00       	mov    ecx,0x4
c00032f1:	85 f6                	test   esi,esi
c00032f3:	0f 84 cd 00 00 00    	je     c00033c6 <dir_next+0xfb>
c00032f9:	89 c3                	mov    ebx,eax
c00032fb:	89 d1                	mov    ecx,edx
c00032fd:	89 f8                	mov    eax,edi
c00032ff:	25 ff 01 00 00       	and    eax,0x1ff
c0003304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003308:	0f 85 a8 00 00 00    	jne    c00033b6 <dir_next+0xeb>
c000330e:	46                   	inc    esi
c000330f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003312:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003315:	85 d2                	test   edx,edx
c0003317:	75 22                	jne    c000333b <dir_next+0x70>
c0003319:	89 fa                	mov    edx,edi
c000331b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000331f:	c1 ea 05             	shr    edx,0x5
c0003322:	39 c2                	cmp    edx,eax
c0003324:	0f 82 8c 00 00 00    	jb     c00033b6 <dir_next+0xeb>
c000332a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003331:	b9 04 00 00 00       	mov    ecx,0x4
c0003336:	e9 8b 00 00 00       	jmp    c00033c6 <dir_next+0xfb>
c000333b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000333f:	89 fe                	mov    esi,edi
c0003341:	48                   	dec    eax
c0003342:	c1 ee 09             	shr    esi,0x9
c0003345:	85 f0                	test   eax,esi
c0003347:	75 6d                	jne    c00033b6 <dir_next+0xeb>
c0003349:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334d:	89 e8                	mov    eax,ebp
c000334f:	e8 ea fb ff ff       	call   c0002f3e <get_fat.isra.2>
c0003354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003358:	89 c6                	mov    esi,eax
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	77 07                	ja     c0003366 <dir_next+0x9b>
c000335f:	b9 02 00 00 00       	mov    ecx,0x2
c0003364:	eb 60                	jmp    c00033c6 <dir_next+0xfb>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 07                	jne    c0003372 <dir_next+0xa7>
c000336b:	b9 01 00 00 00       	mov    ecx,0x1
c0003370:	eb 54                	jmp    c00033c6 <dir_next+0xfb>
c0003372:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003375:	77 30                	ja     c00033a7 <dir_next+0xdc>
c0003377:	85 c9                	test   ecx,ecx
c0003379:	74 af                	je     c000332a <dir_next+0x5f>
c000337b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000337e:	89 d8                	mov    eax,ebx
c0003380:	e8 83 fd ff ff       	call   c0003108 <create_chain>
c0003385:	b9 07 00 00 00       	mov    ecx,0x7
c000338a:	89 c6                	mov    esi,eax
c000338c:	85 c0                	test   eax,eax
c000338e:	74 36                	je     c00033c6 <dir_next+0xfb>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	74 ca                	je     c000335f <dir_next+0x94>
c0003395:	83 f8 ff             	cmp    eax,0xffffffff
c0003398:	74 d1                	je     c000336b <dir_next+0xa0>
c000339a:	89 c2                	mov    edx,eax
c000339c:	89 e8                	mov    eax,ebp
c000339e:	e8 75 f2 ff ff       	call   c0002618 <dir_clear>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	75 c4                	jne    c000336b <dir_next+0xa0>
c00033a7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00033aa:	89 f2                	mov    edx,esi
c00033ac:	89 e8                	mov    eax,ebp
c00033ae:	e8 df e9 ff ff       	call   c0001d92 <clst2sect>
c00033b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00033b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00033ba:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00033bd:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00033c1:	31 c9                	xor    ecx,ecx
c00033c3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00033c6:	83 c4 1c             	add    esp,0x1c
c00033c9:	89 c8                	mov    eax,ecx
c00033cb:	5b                   	pop    ebx
c00033cc:	5e                   	pop    esi
c00033cd:	5f                   	pop    edi
c00033ce:	5d                   	pop    ebp
c00033cf:	c3                   	ret    

c00033d0 <dir_alloc>:
c00033d0:	55                   	push   ebp
c00033d1:	89 c5                	mov    ebp,eax
c00033d3:	57                   	push   edi
c00033d4:	89 d7                	mov    edi,edx
c00033d6:	56                   	push   esi
c00033d7:	31 d2                	xor    edx,edx
c00033d9:	53                   	push   ebx
c00033da:	83 ec 0c             	sub    esp,0xc
c00033dd:	8b 30                	mov    esi,DWORD PTR [eax]
c00033df:	e8 5c fc ff ff       	call   c0003040 <dir_sdi>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 37                	jne    c000341f <dir_alloc+0x4f>
c00033e8:	31 db                	xor    ebx,ebx
c00033ea:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00033ed:	89 f0                	mov    eax,esi
c00033ef:	e8 7e ec ff ff       	call   c0002072 <move_window>
c00033f4:	85 c0                	test   eax,eax
c00033f6:	75 27                	jne    c000341f <dir_alloc+0x4f>
c00033f8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00033fb:	8a 12                	mov    dl,BYTE PTR [edx]
c00033fd:	84 d2                	test   dl,dl
c00033ff:	74 05                	je     c0003406 <dir_alloc+0x36>
c0003401:	80 fa e5             	cmp    dl,0xe5
c0003404:	75 07                	jne    c000340d <dir_alloc+0x3d>
c0003406:	43                   	inc    ebx
c0003407:	39 fb                	cmp    ebx,edi
c0003409:	75 04                	jne    c000340f <dir_alloc+0x3f>
c000340b:	eb 1c                	jmp    c0003429 <dir_alloc+0x59>
c000340d:	31 db                	xor    ebx,ebx
c000340f:	ba 01 00 00 00       	mov    edx,0x1
c0003414:	89 e8                	mov    eax,ebp
c0003416:	e8 b0 fe ff ff       	call   c00032cb <dir_next>
c000341b:	85 c0                	test   eax,eax
c000341d:	74 cb                	je     c00033ea <dir_alloc+0x1a>
c000341f:	83 f8 04             	cmp    eax,0x4
c0003422:	75 05                	jne    c0003429 <dir_alloc+0x59>
c0003424:	b8 07 00 00 00       	mov    eax,0x7
c0003429:	83 c4 0c             	add    esp,0xc
c000342c:	5b                   	pop    ebx
c000342d:	5e                   	pop    esi
c000342e:	5f                   	pop    edi
c000342f:	5d                   	pop    ebp
c0003430:	c3                   	ret    

c0003431 <dir_read>:
c0003431:	55                   	push   ebp
c0003432:	57                   	push   edi
c0003433:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003438:	56                   	push   esi
c0003439:	be 04 00 00 00       	mov    esi,0x4
c000343e:	53                   	push   ebx
c000343f:	89 c3                	mov    ebx,eax
c0003441:	83 ec 1c             	sub    esp,0x1c
c0003444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003448:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000344f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003452:	85 d2                	test   edx,edx
c0003454:	0f 84 d8 00 00 00    	je     c0003532 <dir_read+0x101>
c000345a:	89 e8                	mov    eax,ebp
c000345c:	e8 11 ec ff ff       	call   c0002072 <move_window>
c0003461:	89 c6                	mov    esi,eax
c0003463:	85 c0                	test   eax,eax
c0003465:	0f 85 d2 00 00 00    	jne    c000353d <dir_read+0x10c>
c000346b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000346e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003470:	84 c9                	test   cl,cl
c0003472:	0f 84 c0 00 00 00    	je     c0003538 <dir_read+0x107>
c0003478:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000347b:	83 e0 3f             	and    eax,0x3f
c000347e:	80 f9 2e             	cmp    cl,0x2e
c0003481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003485:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003488:	0f 84 8a 00 00 00    	je     c0003518 <dir_read+0xe7>
c000348e:	80 f9 e5             	cmp    cl,0xe5
c0003491:	0f 84 81 00 00 00    	je     c0003518 <dir_read+0xe7>
c0003497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000349b:	83 e0 1f             	and    eax,0x1f
c000349e:	83 f8 08             	cmp    eax,0x8
c00034a1:	0f 94 c0             	sete   al
c00034a4:	0f b6 c0             	movzx  eax,al
c00034a7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00034ab:	75 6b                	jne    c0003518 <dir_read+0xe7>
c00034ad:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00034b2:	75 44                	jne    c00034f8 <dir_read+0xc7>
c00034b4:	f6 c1 40             	test   cl,0x40
c00034b7:	74 12                	je     c00034cb <dir_read+0x9a>
c00034b9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00034bc:	83 e1 bf             	and    ecx,0xffffffbf
c00034bf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00034c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00034c9:	eb 06                	jmp    c00034d1 <dir_read+0xa0>
c00034cb:	89 f8                	mov    eax,edi
c00034cd:	38 c8                	cmp    al,cl
c00034cf:	75 47                	jne    c0003518 <dir_read+0xe7>
c00034d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00034d5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00034da:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00034dd:	75 3e                	jne    c000351d <dir_read+0xec>
c00034df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00034e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00034e6:	e8 c4 e8 ff ff       	call   c0001daf <pick_lfn>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	74 2e                	je     c000351d <dir_read+0xec>
c00034ef:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00034f3:	8d 79 ff             	lea    edi,[ecx-0x1]
c00034f6:	eb 25                	jmp    c000351d <dir_read+0xec>
c00034f8:	89 f8                	mov    eax,edi
c00034fa:	84 c0                	test   al,al
c00034fc:	75 11                	jne    c000350f <dir_read+0xde>
c00034fe:	89 d0                	mov    eax,edx
c0003500:	e8 64 ea ff ff       	call   c0001f69 <sum_sfn>
c0003505:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003509:	75 04                	jne    c000350f <dir_read+0xde>
c000350b:	31 f6                	xor    esi,esi
c000350d:	eb 35                	jmp    c0003544 <dir_read+0x113>
c000350f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003516:	eb 2c                	jmp    c0003544 <dir_read+0x113>
c0003518:	bf ff ff ff ff       	mov    edi,0xffffffff
c000351d:	31 d2                	xor    edx,edx
c000351f:	89 d8                	mov    eax,ebx
c0003521:	e8 a5 fd ff ff       	call   c00032cb <dir_next>
c0003526:	89 c6                	mov    esi,eax
c0003528:	85 c0                	test   eax,eax
c000352a:	0f 84 1f ff ff ff    	je     c000344f <dir_read+0x1e>
c0003530:	eb 0b                	jmp    c000353d <dir_read+0x10c>
c0003532:	85 f6                	test   esi,esi
c0003534:	74 d5                	je     c000350b <dir_read+0xda>
c0003536:	eb 05                	jmp    c000353d <dir_read+0x10c>
c0003538:	be 04 00 00 00       	mov    esi,0x4
c000353d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003544:	83 c4 1c             	add    esp,0x1c
c0003547:	89 f0                	mov    eax,esi
c0003549:	5b                   	pop    ebx
c000354a:	5e                   	pop    esi
c000354b:	5f                   	pop    edi
c000354c:	5d                   	pop    ebp
c000354d:	c3                   	ret    

c000354e <dir_remove>:
c000354e:	57                   	push   edi
c000354f:	56                   	push   esi
c0003550:	53                   	push   ebx
c0003551:	89 c3                	mov    ebx,eax
c0003553:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003556:	8b 30                	mov    esi,DWORD PTR [eax]
c0003558:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000355b:	83 fa ff             	cmp    edx,0xffffffff
c000355e:	74 09                	je     c0003569 <dir_remove+0x1b>
c0003560:	e8 db fa ff ff       	call   c0003040 <dir_sdi>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 34                	jne    c000359d <dir_remove+0x4f>
c0003569:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356c:	89 f0                	mov    eax,esi
c000356e:	e8 ff ea ff ff       	call   c0002072 <move_window>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 1c                	jne    c0003593 <dir_remove+0x45>
c0003577:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000357a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000357d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003581:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003584:	73 17                	jae    c000359d <dir_remove+0x4f>
c0003586:	31 d2                	xor    edx,edx
c0003588:	89 d8                	mov    eax,ebx
c000358a:	e8 3c fd ff ff       	call   c00032cb <dir_next>
c000358f:	85 c0                	test   eax,eax
c0003591:	74 d6                	je     c0003569 <dir_remove+0x1b>
c0003593:	83 f8 04             	cmp    eax,0x4
c0003596:	75 05                	jne    c000359d <dir_remove+0x4f>
c0003598:	b8 02 00 00 00       	mov    eax,0x2
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	c3                   	ret    

c00035a1 <dir_find>:
c00035a1:	55                   	push   ebp
c00035a2:	31 d2                	xor    edx,edx
c00035a4:	57                   	push   edi
c00035a5:	56                   	push   esi
c00035a6:	53                   	push   ebx
c00035a7:	89 c3                	mov    ebx,eax
c00035a9:	83 ec 1c             	sub    esp,0x1c
c00035ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00035ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035b2:	89 d8                	mov    eax,ebx
c00035b4:	e8 87 fa ff ff       	call   c0003040 <dir_sdi>
c00035b9:	89 c6                	mov    esi,eax
c00035bb:	85 c0                	test   eax,eax
c00035bd:	0f 85 02 01 00 00    	jne    c00036c5 <dir_find+0x124>
c00035c3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00035ca:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00035cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035db:	e8 92 ea ff ff       	call   c0002072 <move_window>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	85 c0                	test   eax,eax
c00035e4:	0f 85 db 00 00 00    	jne    c00036c5 <dir_find+0x124>
c00035ea:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00035ed:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00035f0:	84 c9                	test   cl,cl
c00035f2:	0f 84 c8 00 00 00    	je     c00036c0 <dir_find+0x11f>
c00035f8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00035fb:	88 d0                	mov    al,dl
c00035fd:	83 e0 3f             	and    eax,0x3f
c0003600:	80 f9 e5             	cmp    cl,0xe5
c0003603:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003606:	0f 84 93 00 00 00    	je     c000369f <dir_find+0xfe>
c000360c:	80 e2 08             	and    dl,0x8
c000360f:	74 0a                	je     c000361b <dir_find+0x7a>
c0003611:	3c 0f                	cmp    al,0xf
c0003613:	0f 85 86 00 00 00    	jne    c000369f <dir_find+0xfe>
c0003619:	eb 04                	jmp    c000361f <dir_find+0x7e>
c000361b:	3c 0f                	cmp    al,0xf
c000361d:	75 54                	jne    c0003673 <dir_find+0xd2>
c000361f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003623:	0f 85 82 00 00 00    	jne    c00036ab <dir_find+0x10a>
c0003629:	f6 c1 40             	test   cl,0x40
c000362c:	74 12                	je     c0003640 <dir_find+0x9f>
c000362e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003631:	83 e1 bf             	and    ecx,0xffffffbf
c0003634:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003638:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000363b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000363e:	eb 06                	jmp    c0003646 <dir_find+0xa5>
c0003640:	89 f8                	mov    eax,edi
c0003642:	38 c8                	cmp    al,cl
c0003644:	75 60                	jne    c00036a6 <dir_find+0x105>
c0003646:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000364a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000364f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003652:	75 57                	jne    c00036ab <dir_find+0x10a>
c0003654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003658:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000365c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000365f:	89 ea                	mov    edx,ebp
c0003661:	e8 89 f3 ff ff       	call   c00029ef <cmp_lfn>
c0003666:	85 c0                	test   eax,eax
c0003668:	74 41                	je     c00036ab <dir_find+0x10a>
c000366a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000366e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003671:	eb 38                	jmp    c00036ab <dir_find+0x10a>
c0003673:	89 f8                	mov    eax,edi
c0003675:	84 c0                	test   al,al
c0003677:	75 0d                	jne    c0003686 <dir_find+0xe5>
c0003679:	89 e8                	mov    eax,ebp
c000367b:	e8 e9 e8 ff ff       	call   c0001f69 <sum_sfn>
c0003680:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003684:	74 3f                	je     c00036c5 <dir_find+0x124>
c0003686:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000368a:	75 13                	jne    c000369f <dir_find+0xfe>
c000368c:	8d 53 20             	lea    edx,[ebx+0x20]
c000368f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003694:	89 e8                	mov    eax,ebp
c0003696:	e8 fd e4 ff ff       	call   c0001b98 <mem_cmp>
c000369b:	85 c0                	test   eax,eax
c000369d:	74 26                	je     c00036c5 <dir_find+0x124>
c000369f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ab:	31 d2                	xor    edx,edx
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 17 fc ff ff       	call   c00032cb <dir_next>
c00036b4:	89 c6                	mov    esi,eax
c00036b6:	85 c0                	test   eax,eax
c00036b8:	0f 84 16 ff ff ff    	je     c00035d4 <dir_find+0x33>
c00036be:	eb 05                	jmp    c00036c5 <dir_find+0x124>
c00036c0:	be 04 00 00 00       	mov    esi,0x4
c00036c5:	83 c4 1c             	add    esp,0x1c
c00036c8:	89 f0                	mov    eax,esi
c00036ca:	5b                   	pop    ebx
c00036cb:	5e                   	pop    esi
c00036cc:	5f                   	pop    edi
c00036cd:	5d                   	pop    ebp
c00036ce:	c3                   	ret    

c00036cf <follow_path>:
c00036cf:	56                   	push   esi
c00036d0:	53                   	push   ebx
c00036d1:	89 c3                	mov    ebx,eax
c00036d3:	83 ec 14             	sub    esp,0x14
c00036d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036da:	8b 30                	mov    esi,DWORD PTR [eax]
c00036dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00036e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00036e2:	80 fa 5c             	cmp    dl,0x5c
c00036e5:	75 07                	jne    c00036ee <follow_path+0x1f>
c00036e7:	40                   	inc    eax
c00036e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00036ec:	eb ee                	jmp    c00036dc <follow_path+0xd>
c00036ee:	80 fa 2f             	cmp    dl,0x2f
c00036f1:	74 f4                	je     c00036e7 <follow_path+0x18>
c00036f3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00036fa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00036fd:	77 3e                	ja     c000373d <follow_path+0x6e>
c00036ff:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003703:	31 d2                	xor    edx,edx
c0003705:	89 d8                	mov    eax,ebx
c0003707:	e8 34 f9 ff ff       	call   c0003040 <dir_sdi>
c000370c:	eb 4f                	jmp    c000375d <follow_path+0x8e>
c000370e:	89 d8                	mov    eax,ebx
c0003710:	e8 8c fe ff ff       	call   c00035a1 <dir_find>
c0003715:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003718:	85 c0                	test   eax,eax
c000371a:	75 32                	jne    c000374e <follow_path+0x7f>
c000371c:	80 e2 04             	and    dl,0x4
c000371f:	75 3c                	jne    c000375d <follow_path+0x8e>
c0003721:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003725:	74 31                	je     c0003758 <follow_path+0x89>
c0003727:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000372a:	25 ff 01 00 00       	and    eax,0x1ff
c000372f:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003733:	8a 06                	mov    al,BYTE PTR [esi]
c0003735:	e8 b3 f7 ff ff       	call   c0002eed <ld_clust.isra.0>
c000373a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000373d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003741:	89 d8                	mov    eax,ebx
c0003743:	e8 cb ef ff ff       	call   c0002713 <create_name>
c0003748:	85 c0                	test   eax,eax
c000374a:	74 c2                	je     c000370e <follow_path+0x3f>
c000374c:	eb 0f                	jmp    c000375d <follow_path+0x8e>
c000374e:	83 f8 04             	cmp    eax,0x4
c0003751:	75 0a                	jne    c000375d <follow_path+0x8e>
c0003753:	80 e2 04             	and    dl,0x4
c0003756:	75 05                	jne    c000375d <follow_path+0x8e>
c0003758:	b8 05 00 00 00       	mov    eax,0x5
c000375d:	83 c4 14             	add    esp,0x14
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	c3                   	ret    

c0003763 <dir_register>:
c0003763:	55                   	push   ebp
c0003764:	57                   	push   edi
c0003765:	56                   	push   esi
c0003766:	be 06 00 00 00       	mov    esi,0x6
c000376b:	53                   	push   ebx
c000376c:	83 ec 2c             	sub    esp,0x2c
c000376f:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003773:	0f 85 65 01 00 00    	jne    c00038de <dir_register+0x17b>
c0003779:	8b 38                	mov    edi,DWORD PTR [eax]
c000377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003783:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000378a:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c000378f:	74 06                	je     c0003797 <dir_register+0x34>
c0003791:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003795:	eb ef                	jmp    c0003786 <dir_register+0x23>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	b9 0c 00 00 00       	mov    ecx,0xc
c000379e:	8d 40 20             	lea    eax,[eax+0x20]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 c2                	mov    edx,eax
c00037a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00037ab:	e8 c8 e3 ff ff       	call   c0001b78 <mem_cpy>
c00037b0:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00037b5:	74 48                	je     c00037ff <dir_register+0x9c>
c00037b7:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00037bb:	bd 01 00 00 00       	mov    ebp,0x1
c00037c0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00037c3:	55                   	push   ebp
c00037c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00037c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00037cc:	e8 dc e6 ff ff       	call   c0001ead <gen_numname>
c00037d1:	58                   	pop    eax
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 c8 fd ff ff       	call   c00035a1 <dir_find>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 10                	jne    c00037ef <dir_register+0x8c>
c00037df:	45                   	inc    ebp
c00037e0:	83 fd 64             	cmp    ebp,0x64
c00037e3:	75 db                	jne    c00037c0 <dir_register+0x5d>
c00037e5:	be 07 00 00 00       	mov    esi,0x7
c00037ea:	e9 ef 00 00 00       	jmp    c00038de <dir_register+0x17b>
c00037ef:	83 f8 04             	cmp    eax,0x4
c00037f2:	0f 85 e6 00 00 00    	jne    c00038de <dir_register+0x17b>
c00037f8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00037fc:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00037ff:	bd 01 00 00 00       	mov    ebp,0x1
c0003804:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003809:	74 13                	je     c000381e <dir_register+0xbb>
c000380b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000380f:	b9 0d 00 00 00       	mov    ecx,0xd
c0003814:	83 c0 0c             	add    eax,0xc
c0003817:	31 d2                	xor    edx,edx
c0003819:	f7 f1                	div    ecx
c000381b:	8d 68 01             	lea    ebp,[eax+0x1]
c000381e:	89 ea                	mov    edx,ebp
c0003820:	89 d8                	mov    eax,ebx
c0003822:	e8 a9 fb ff ff       	call   c00033d0 <dir_alloc>
c0003827:	89 c6                	mov    esi,eax
c0003829:	85 c0                	test   eax,eax
c000382b:	0f 85 ad 00 00 00    	jne    c00038de <dir_register+0x17b>
c0003831:	4d                   	dec    ebp
c0003832:	74 6a                	je     c000389e <dir_register+0x13b>
c0003834:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003837:	89 e8                	mov    eax,ebp
c0003839:	c1 e0 05             	shl    eax,0x5
c000383c:	29 c2                	sub    edx,eax
c000383e:	89 d8                	mov    eax,ebx
c0003840:	e8 fb f7 ff ff       	call   c0003040 <dir_sdi>
c0003845:	89 c6                	mov    esi,eax
c0003847:	85 c0                	test   eax,eax
c0003849:	0f 85 8f 00 00 00    	jne    c00038de <dir_register+0x17b>
c000384f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003853:	e8 11 e7 ff ff       	call   c0001f69 <sum_sfn>
c0003858:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000385c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385f:	89 f8                	mov    eax,edi
c0003861:	e8 0c e8 ff ff       	call   c0002072 <move_window>
c0003866:	89 c6                	mov    esi,eax
c0003868:	85 c0                	test   eax,eax
c000386a:	75 72                	jne    c00038de <dir_register+0x17b>
c000386c:	83 ec 0c             	sub    esp,0xc
c000386f:	89 e8                	mov    eax,ebp
c0003871:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003876:	0f b6 c8             	movzx  ecx,al
c0003879:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000387c:	52                   	push   edx
c000387d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003880:	e8 a4 e5 ff ff       	call   c0001e29 <put_lfn>
c0003885:	31 d2                	xor    edx,edx
c0003887:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 39 fa ff ff       	call   c00032cb <dir_next>
c0003892:	83 c4 10             	add    esp,0x10
c0003895:	89 c6                	mov    esi,eax
c0003897:	85 c0                	test   eax,eax
c0003899:	75 43                	jne    c00038de <dir_register+0x17b>
c000389b:	4d                   	dec    ebp
c000389c:	75 be                	jne    c000385c <dir_register+0xf9>
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 f8                	mov    eax,edi
c00038a3:	e8 ca e7 ff ff       	call   c0002072 <move_window>
c00038a8:	89 c6                	mov    esi,eax
c00038aa:	85 c0                	test   eax,eax
c00038ac:	75 30                	jne    c00038de <dir_register+0x17b>
c00038ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038b1:	b9 20 00 00 00       	mov    ecx,0x20
c00038b6:	31 d2                	xor    edx,edx
c00038b8:	e8 d0 e2 ff ff       	call   c0001b8d <mem_set>
c00038bd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00038c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00038c4:	b9 0b 00 00 00       	mov    ecx,0xb
c00038c9:	e8 aa e2 ff ff       	call   c0001b78 <mem_cpy>
c00038ce:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c00038d1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038d4:	83 e0 18             	and    eax,0x18
c00038d7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00038da:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00038de:	83 c4 2c             	add    esp,0x2c
c00038e1:	89 f0                	mov    eax,esi
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <f_mount>:
c00038e8:	53                   	push   ebx
c00038e9:	83 ec 18             	sub    esp,0x18
c00038ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00038f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00038f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00038fc:	e8 7a e6 ff ff       	call   c0001f7b <get_ldnumber>
c0003901:	89 c2                	mov    edx,eax
c0003903:	b8 0b 00 00 00       	mov    eax,0xb
c0003908:	85 d2                	test   edx,edx
c000390a:	78 39                	js     c0003945 <f_mount+0x5d>
c000390c:	8b 04 95 c0 f3 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0c40]
c0003913:	85 c0                	test   eax,eax
c0003915:	74 03                	je     c000391a <f_mount+0x32>
c0003917:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000391e:	85 c0                	test   eax,eax
c0003920:	74 03                	je     c0003925 <f_mount+0x3d>
c0003922:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003929:	89 04 95 c0 f3 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0c40],eax
c0003930:	31 c0                	xor    eax,eax
c0003932:	84 db                	test   bl,bl
c0003934:	74 0f                	je     c0003945 <f_mount+0x5d>
c0003936:	31 c9                	xor    ecx,ecx
c0003938:	8d 54 24 20          	lea    edx,[esp+0x20]
c000393c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003940:	e8 80 e8 ff ff       	call   c00021c5 <mount_volume>
c0003945:	83 c4 18             	add    esp,0x18
c0003948:	5b                   	pop    ebx
c0003949:	c3                   	ret    

c000394a <f_open>:
c000394a:	55                   	push   ebp
c000394b:	b8 09 00 00 00       	mov    eax,0x9
c0003950:	57                   	push   edi
c0003951:	56                   	push   esi
c0003952:	53                   	push   ebx
c0003953:	83 ec 5c             	sub    esp,0x5c
c0003956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000395a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000395e:	85 db                	test   ebx,ebx
c0003960:	0f 84 a7 02 00 00    	je     c0003c0d <f_open+0x2c3>
c0003966:	89 fe                	mov    esi,edi
c0003968:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000396c:	83 e6 3f             	and    esi,0x3f
c000396f:	89 f0                	mov    eax,esi
c0003971:	0f b6 c8             	movzx  ecx,al
c0003974:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003978:	e8 48 e8 ff ff       	call   c00021c5 <mount_volume>
c000397d:	85 c0                	test   eax,eax
c000397f:	0f 85 82 02 00 00    	jne    c0003c07 <f_open+0x2bd>
c0003985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003989:	83 ec 0c             	sub    esp,0xc
c000398c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003990:	68 00 02 00 00       	push   0x200
c0003995:	e8 fe 1e 00 00       	call   c0005898 <ff_memalloc>
c000399a:	83 c4 10             	add    esp,0x10
c000399d:	89 c5                	mov    ebp,eax
c000399f:	b8 11 00 00 00       	mov    eax,0x11
c00039a4:	85 ed                	test   ebp,ebp
c00039a6:	0f 84 61 02 00 00    	je     c0003c0d <f_open+0x2c3>
c00039ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00039b0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00039b4:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c00039b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039bb:	e8 0f fd ff ff       	call   c00036cf <follow_path>
c00039c0:	85 c0                	test   eax,eax
c00039c2:	75 0c                	jne    c00039d0 <f_open+0x86>
c00039c4:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00039c9:	79 05                	jns    c00039d0 <f_open+0x86>
c00039cb:	b8 06 00 00 00       	mov    eax,0x6
c00039d0:	f7 c7 1c 00 00 00    	test   edi,0x1c
c00039d6:	0f 84 de 00 00 00    	je     c0003aba <f_open+0x170>
c00039dc:	85 c0                	test   eax,eax
c00039de:	74 1e                	je     c00039fe <f_open+0xb4>
c00039e0:	83 f8 04             	cmp    eax,0x4
c00039e3:	0f 85 06 02 00 00    	jne    c0003bef <f_open+0x2a5>
c00039e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00039ed:	83 ce 08             	or     esi,0x8
c00039f0:	e8 6e fd ff ff       	call   c0003763 <dir_register>
c00039f5:	85 c0                	test   eax,eax
c00039f7:	74 2f                	je     c0003a28 <f_open+0xde>
c00039f9:	e9 f1 01 00 00       	jmp    c0003bef <f_open+0x2a5>
c00039fe:	b8 07 00 00 00       	mov    eax,0x7
c0003a03:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003a08:	0f 85 e1 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a0e:	b8 08 00 00 00       	mov    eax,0x8
c0003a13:	f7 c7 04 00 00 00    	test   edi,0x4
c0003a19:	0f 85 d0 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003a1f:	83 e7 08             	and    edi,0x8
c0003a22:	0f 84 bf 00 00 00    	je     c0003ae7 <f_open+0x19d>
c0003a28:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a30:	89 ca                	mov    edx,ecx
c0003a32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003a36:	8a 00                	mov    al,BYTE PTR [eax]
c0003a38:	e8 b0 f4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a41:	89 c7                	mov    edi,eax
c0003a43:	ba 00 00 21 50       	mov    edx,0x50210000
c0003a48:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003a4b:	e8 25 e1 ff ff       	call   c0001b75 <st_dword>
c0003a50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a54:	31 c9                	xor    ecx,ecx
c0003a56:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003a5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003a62:	e8 af f4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0003a67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003a6b:	31 d2                	xor    edx,edx
c0003a6d:	83 c0 1c             	add    eax,0x1c
c0003a70:	e8 00 e1 ff ff       	call   c0001b75 <st_dword>
c0003a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a79:	85 ff                	test   edi,edi
c0003a7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a7f:	74 66                	je     c0003ae7 <f_open+0x19d>
c0003a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003a85:	31 c9                	xor    ecx,ecx
c0003a87:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003a8a:	89 fa                	mov    edx,edi
c0003a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003a94:	e8 a9 f7 ff ff       	call   c0003242 <remove_chain>
c0003a99:	85 c0                	test   eax,eax
c0003a9b:	0f 85 4e 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003aa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003aa5:	4f                   	dec    edi
c0003aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003aaa:	e8 c3 e5 ff ff       	call   c0002072 <move_window>
c0003aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ab8:	eb 27                	jmp    c0003ae1 <f_open+0x197>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 85 2d 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ac2:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ac6:	b8 04 00 00 00       	mov    eax,0x4
c0003acb:	f6 c2 10             	test   dl,0x10
c0003ace:	0f 85 1b 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ad4:	83 e7 02             	and    edi,0x2
c0003ad7:	74 0e                	je     c0003ae7 <f_open+0x19d>
c0003ad9:	b8 07 00 00 00       	mov    eax,0x7
c0003ade:	80 e2 01             	and    dl,0x1
c0003ae1:	0f 85 08 01 00 00    	jne    c0003bef <f_open+0x2a5>
c0003ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0003aed:	74 03                	je     c0003af2 <f_open+0x1a8>
c0003aef:	83 ce 40             	or     esi,0x40
c0003af2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003af6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003afa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003afd:	89 fa                	mov    edx,edi
c0003aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003b03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003b06:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003b09:	8a 01                	mov    al,BYTE PTR [ecx]
c0003b0b:	e8 dd f3 ff ff       	call   c0002eed <ld_clust.isra.0>
c0003b10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b13:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003b16:	e8 3e e0 ff ff       	call   c0001b59 <ld_dword>
c0003b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003b22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003b24:	31 d2                	xor    edx,edx
c0003b26:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003b2a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003b2e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003b32:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003b39:	89 f0                	mov    eax,esi
c0003b3b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003b42:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003b45:	b9 00 02 00 00       	mov    ecx,0x200
c0003b4a:	8d 43 28             	lea    eax,[ebx+0x28]
c0003b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b51:	e8 37 e0 ff ff       	call   c0001b8d <mem_set>
c0003b56:	83 e6 20             	and    esi,0x20
c0003b59:	75 07                	jne    c0003b62 <f_open+0x218>
c0003b5b:	31 c0                	xor    eax,eax
c0003b5d:	e9 8d 00 00 00       	jmp    c0003bef <f_open+0x2a5>
c0003b62:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003b65:	85 ff                	test   edi,edi
c0003b67:	74 f2                	je     c0003b5b <f_open+0x211>
c0003b69:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b70:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003b73:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003b77:	c1 e6 09             	shl    esi,0x9
c0003b7a:	39 fe                	cmp    esi,edi
c0003b7c:	73 1c                	jae    c0003b9a <f_open+0x250>
c0003b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003b80:	29 f7                	sub    edi,esi
c0003b82:	e8 b7 f3 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003b87:	89 c2                	mov    edx,eax
c0003b89:	83 f8 01             	cmp    eax,0x1
c0003b8c:	76 10                	jbe    c0003b9e <f_open+0x254>
c0003b8e:	83 f8 ff             	cmp    eax,0xffffffff
c0003b91:	75 e7                	jne    c0003b7a <f_open+0x230>
c0003b93:	b8 01 00 00 00       	mov    eax,0x1
c0003b98:	eb 09                	jmp    c0003ba3 <f_open+0x259>
c0003b9a:	31 c0                	xor    eax,eax
c0003b9c:	eb 05                	jmp    c0003ba3 <f_open+0x259>
c0003b9e:	b8 02 00 00 00       	mov    eax,0x2
c0003ba3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ba6:	85 c0                	test   eax,eax
c0003ba8:	75 45                	jne    c0003bef <f_open+0x2a5>
c0003baa:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003bb0:	74 a9                	je     c0003b5b <f_open+0x211>
c0003bb2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003bb6:	89 f0                	mov    eax,esi
c0003bb8:	e8 d5 e1 ff ff       	call   c0001d92 <clst2sect>
c0003bbd:	89 c2                	mov    edx,eax
c0003bbf:	b8 02 00 00 00       	mov    eax,0x2
c0003bc4:	85 d2                	test   edx,edx
c0003bc6:	74 27                	je     c0003bef <f_open+0x2a5>
c0003bc8:	89 f9                	mov    ecx,edi
c0003bca:	c1 e9 09             	shr    ecx,0x9
c0003bcd:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003bd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003bd3:	6a 01                	push   0x1
c0003bd5:	50                   	push   eax
c0003bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003bda:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003bde:	50                   	push   eax
c0003bdf:	e8 1d df ff ff       	call   c0001b01 <disk_read>
c0003be4:	83 c4 10             	add    esp,0x10
c0003be7:	85 c0                	test   eax,eax
c0003be9:	0f 95 c0             	setne  al
c0003bec:	0f b6 c0             	movzx  eax,al
c0003bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bf3:	83 ec 0c             	sub    esp,0xc
c0003bf6:	55                   	push   ebp
c0003bf7:	e8 b4 1c 00 00       	call   c00058b0 <ff_memfree>
c0003bfc:	83 c4 10             	add    esp,0x10
c0003bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c03:	85 c0                	test   eax,eax
c0003c05:	74 06                	je     c0003c0d <f_open+0x2c3>
c0003c07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003c0d:	83 c4 5c             	add    esp,0x5c
c0003c10:	5b                   	pop    ebx
c0003c11:	5e                   	pop    esi
c0003c12:	5f                   	pop    edi
c0003c13:	5d                   	pop    ebp
c0003c14:	c3                   	ret    

c0003c15 <f_read>:
c0003c15:	55                   	push   ebp
c0003c16:	57                   	push   edi
c0003c17:	56                   	push   esi
c0003c18:	53                   	push   ebx
c0003c19:	83 ec 2c             	sub    esp,0x2c
c0003c1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003c20:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003c24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003c2a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003c2e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c32:	89 d8                	mov    eax,ebx
c0003c34:	e8 8f e3 ff ff       	call   c0001fc8 <validate>
c0003c39:	89 c5                	mov    ebp,eax
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	0f 85 c7 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c43:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003c47:	85 ed                	test   ebp,ebp
c0003c49:	0f 85 bb 01 00 00    	jne    c0003e0a <f_read+0x1f5>
c0003c4f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003c53:	0f 84 ac 01 00 00    	je     c0003e05 <f_read+0x1f0>
c0003c59:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003c5c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003c5f:	89 c7                	mov    edi,eax
c0003c61:	39 f0                	cmp    eax,esi
c0003c63:	0f 86 ad 00 00 00    	jbe    c0003d16 <f_read+0x101>
c0003c69:	89 f7                	mov    edi,esi
c0003c6b:	e9 a6 00 00 00       	jmp    c0003d16 <f_read+0x101>
c0003c70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003c73:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003c79:	0f 85 5b 01 00 00    	jne    c0003dda <f_read+0x1c5>
c0003c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c83:	89 d1                	mov    ecx,edx
c0003c85:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003c89:	c1 e9 09             	shr    ecx,0x9
c0003c8c:	48                   	dec    eax
c0003c8d:	21 c8                	and    eax,ecx
c0003c8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c93:	0f 84 8a 00 00 00    	je     c0003d23 <f_read+0x10e>
c0003c99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c9d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca0:	89 c8                	mov    eax,ecx
c0003ca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ca6:	e8 e7 e0 ff ff       	call   c0001d92 <clst2sect>
c0003cab:	85 c0                	test   eax,eax
c0003cad:	0f 84 88 00 00 00    	je     c0003d3b <f_read+0x126>
c0003cb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003cb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003cbf:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003cc5:	0f 86 bd 00 00 00    	jbe    c0003d88 <f_read+0x173>
c0003ccb:	89 fe                	mov    esi,edi
c0003ccd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003cd1:	c1 ee 09             	shr    esi,0x9
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	01 f2                	add    edx,esi
c0003cda:	39 c2                	cmp    edx,eax
c0003cdc:	76 06                	jbe    c0003ce4 <f_read+0xcf>
c0003cde:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ce2:	89 c6                	mov    esi,eax
c0003ce4:	56                   	push   esi
c0003ce5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ced:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003cf1:	50                   	push   eax
c0003cf2:	e8 0a de ff ff       	call   c0001b01 <disk_read>
c0003cf7:	83 c4 10             	add    esp,0x10
c0003cfa:	85 c0                	test   eax,eax
c0003cfc:	75 50                	jne    c0003d4e <f_read+0x139>
c0003cfe:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d02:	78 60                	js     c0003d64 <f_read+0x14f>
c0003d04:	c1 e6 09             	shl    esi,0x9
c0003d07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003d0b:	29 f7                	sub    edi,esi
c0003d0d:	01 30                	add    DWORD PTR [eax],esi
c0003d0f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003d13:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003d16:	85 ff                	test   edi,edi
c0003d18:	0f 85 52 ff ff ff    	jne    c0003c70 <f_read+0x5b>
c0003d1e:	e9 e7 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d23:	85 d2                	test   edx,edx
c0003d25:	75 05                	jne    c0003d2c <f_read+0x117>
c0003d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003d2a:	eb 0a                	jmp    c0003d36 <f_read+0x121>
c0003d2c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d31:	e8 08 f2 ff ff       	call   c0002f3e <get_fat.isra.2>
c0003d36:	83 f8 01             	cmp    eax,0x1
c0003d39:	77 0e                	ja     c0003d49 <f_read+0x134>
c0003d3b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003d3f:	bd 02 00 00 00       	mov    ebp,0x2
c0003d44:	e9 c1 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d49:	83 f8 ff             	cmp    eax,0xffffffff
c0003d4c:	75 0e                	jne    c0003d5c <f_read+0x147>
c0003d4e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003d52:	bd 01 00 00 00       	mov    ebp,0x1
c0003d57:	e9 ae 00 00 00       	jmp    c0003e0a <f_read+0x1f5>
c0003d5c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003d5f:	e9 35 ff ff ff       	jmp    c0003c99 <f_read+0x84>
c0003d64:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d67:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003d6b:	39 f0                	cmp    eax,esi
c0003d6d:	73 95                	jae    c0003d04 <f_read+0xef>
c0003d6f:	c1 e0 09             	shl    eax,0x9
c0003d72:	8d 53 28             	lea    edx,[ebx+0x28]
c0003d75:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003d79:	b9 00 02 00 00       	mov    ecx,0x200
c0003d7e:	e8 f5 dd ff ff       	call   c0001b78 <mem_cpy>
c0003d83:	e9 7c ff ff ff       	jmp    c0003d04 <f_read+0xef>
c0003d88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d8b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003d8f:	74 42                	je     c0003dd3 <f_read+0x1be>
c0003d91:	8d 73 28             	lea    esi,[ebx+0x28]
c0003d94:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003d98:	79 19                	jns    c0003db3 <f_read+0x19e>
c0003d9a:	6a 01                	push   0x1
c0003d9c:	50                   	push   eax
c0003d9d:	56                   	push   esi
c0003d9e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003da2:	50                   	push   eax
c0003da3:	e8 6f dd ff ff       	call   c0001b17 <disk_write>
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	85 c0                	test   eax,eax
c0003dad:	75 9f                	jne    c0003d4e <f_read+0x139>
c0003daf:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003db3:	6a 01                	push   0x1
c0003db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003db9:	56                   	push   esi
c0003dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003dbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003dc2:	50                   	push   eax
c0003dc3:	e8 39 dd ff ff       	call   c0001b01 <disk_read>
c0003dc8:	83 c4 10             	add    esp,0x10
c0003dcb:	85 c0                	test   eax,eax
c0003dcd:	0f 85 7b ff ff ff    	jne    c0003d4e <f_read+0x139>
c0003dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dd7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003ddd:	ba 00 02 00 00       	mov    edx,0x200
c0003de2:	25 ff 01 00 00       	and    eax,0x1ff
c0003de7:	89 fe                	mov    esi,edi
c0003de9:	29 c2                	sub    edx,eax
c0003deb:	39 d7                	cmp    edi,edx
c0003ded:	76 02                	jbe    c0003df1 <f_read+0x1dc>
c0003def:	89 d6                	mov    esi,edx
c0003df1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003df5:	89 f1                	mov    ecx,esi
c0003df7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003dfb:	e8 78 dd ff ff       	call   c0001b78 <mem_cpy>
c0003e00:	e9 02 ff ff ff       	jmp    c0003d07 <f_read+0xf2>
c0003e05:	bd 07 00 00 00       	mov    ebp,0x7
c0003e0a:	83 c4 2c             	add    esp,0x2c
c0003e0d:	89 e8                	mov    eax,ebp
c0003e0f:	5b                   	pop    ebx
c0003e10:	5e                   	pop    esi
c0003e11:	5f                   	pop    edi
c0003e12:	5d                   	pop    ebp
c0003e13:	c3                   	ret    

c0003e14 <f_write>:
c0003e14:	55                   	push   ebp
c0003e15:	57                   	push   edi
c0003e16:	56                   	push   esi
c0003e17:	53                   	push   ebx
c0003e18:	83 ec 2c             	sub    esp,0x2c
c0003e1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 94 e1 ff ff       	call   c0001fc8 <validate>
c0003e34:	89 c5                	mov    ebp,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	0f 85 00 02 00 00    	jne    c000403e <f_write+0x22a>
c0003e3e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e42:	85 ed                	test   ebp,ebp
c0003e44:	0f 85 f4 01 00 00    	jne    c000403e <f_write+0x22a>
c0003e4a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0003e4e:	0f 84 e5 01 00 00    	je     c0004039 <f_write+0x225>
c0003e54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003e57:	89 c7                	mov    edi,eax
c0003e59:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0003e5d:	0f 83 ea 00 00 00    	jae    c0003f4d <f_write+0x139>
c0003e63:	f7 d0                	not    eax
c0003e65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0003e69:	e9 df 00 00 00       	jmp    c0003f4d <f_write+0x139>
c0003e6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e71:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e77:	0f 85 8b 01 00 00    	jne    c0004008 <f_write+0x1f4>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 d1                	mov    ecx,edx
c0003e83:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e87:	c1 e9 09             	shr    ecx,0x9
c0003e8a:	48                   	dec    eax
c0003e8b:	21 c8                	and    eax,ecx
c0003e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e91:	0f 84 c3 00 00 00    	je     c0003f5a <f_write+0x146>
c0003e97:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003e9b:	0f 88 18 01 00 00    	js     c0003fb9 <f_write+0x1a5>
c0003ea1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ea5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ea8:	89 c8                	mov    eax,ecx
c0003eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003eae:	e8 df de ff ff       	call   c0001d92 <clst2sect>
c0003eb3:	85 c0                	test   eax,eax
c0003eb5:	0f 84 c8 00 00 00    	je     c0003f83 <f_write+0x16f>
c0003ebb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003ebf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ec3:	01 c7                	add    edi,eax
c0003ec5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0003ecd:	0f 86 0d 01 00 00    	jbe    c0003fe0 <f_write+0x1cc>
c0003ed3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ed7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003edb:	c1 ee 09             	shr    esi,0x9
c0003ede:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ee2:	01 f2                	add    edx,esi
c0003ee4:	39 c2                	cmp    edx,eax
c0003ee6:	76 06                	jbe    c0003eee <f_write+0xda>
c0003ee8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eec:	89 c6                	mov    esi,eax
c0003eee:	56                   	push   esi
c0003eef:	57                   	push   edi
c0003ef0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ef4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ef8:	50                   	push   eax
c0003ef9:	e8 19 dc ff ff       	call   c0001b17 <disk_write>
c0003efe:	83 c4 10             	add    esp,0x10
c0003f01:	85 c0                	test   eax,eax
c0003f03:	0f 85 8d 00 00 00    	jne    c0003f96 <f_write+0x182>
c0003f09:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f0c:	29 fa                	sub    edx,edi
c0003f0e:	39 f2                	cmp    edx,esi
c0003f10:	73 18                	jae    c0003f2a <f_write+0x116>
c0003f12:	c1 e2 09             	shl    edx,0x9
c0003f15:	8d 43 28             	lea    eax,[ebx+0x28]
c0003f18:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0003f1c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f21:	e8 52 dc ff ff       	call   c0001b78 <mem_cpy>
c0003f26:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f2a:	c1 e6 09             	shl    esi,0x9
c0003f2d:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0003f31:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f35:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f39:	01 30                	add    DWORD PTR [eax],esi
c0003f3b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0003f3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f41:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003f44:	39 f0                	cmp    eax,esi
c0003f46:	73 02                	jae    c0003f4a <f_write+0x136>
c0003f48:	89 f0                	mov    eax,esi
c0003f4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0003f52:	0f 85 16 ff ff ff    	jne    c0003e6e <f_write+0x5a>
c0003f58:	eb 1b                	jmp    c0003f75 <f_write+0x161>
c0003f5a:	85 d2                	test   edx,edx
c0003f5c:	75 09                	jne    c0003f67 <f_write+0x153>
c0003f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f61:	85 c0                	test   eax,eax
c0003f63:	75 19                	jne    c0003f7e <f_write+0x16a>
c0003f65:	eb 03                	jmp    c0003f6a <f_write+0x156>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	89 d8                	mov    eax,ebx
c0003f6c:	e8 97 f1 ff ff       	call   c0003108 <create_chain>
c0003f71:	85 c0                	test   eax,eax
c0003f73:	75 09                	jne    c0003f7e <f_write+0x16a>
c0003f75:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0003f79:	e9 c0 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f7e:	83 f8 01             	cmp    eax,0x1
c0003f81:	75 0e                	jne    c0003f91 <f_write+0x17d>
c0003f83:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f87:	bd 02 00 00 00       	mov    ebp,0x2
c0003f8c:	e9 ad 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 0e                	jne    c0003fa4 <f_write+0x190>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	bd 01 00 00 00       	mov    ebp,0x1
c0003f9f:	e9 9a 00 00 00       	jmp    c000403e <f_write+0x22a>
c0003fa4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003fa7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003fab:	0f 85 e6 fe ff ff    	jne    c0003e97 <f_write+0x83>
c0003fb1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fb4:	e9 de fe ff ff       	jmp    c0003e97 <f_write+0x83>
c0003fb9:	6a 01                	push   0x1
c0003fbb:	8d 43 28             	lea    eax,[ebx+0x28]
c0003fbe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0003fc1:	50                   	push   eax
c0003fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fc6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fca:	50                   	push   eax
c0003fcb:	e8 47 db ff ff       	call   c0001b17 <disk_write>
c0003fd0:	83 c4 10             	add    esp,0x10
c0003fd3:	85 c0                	test   eax,eax
c0003fd5:	75 bf                	jne    c0003f96 <f_write+0x182>
c0003fd7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fdb:	e9 c1 fe ff ff       	jmp    c0003ea1 <f_write+0x8d>
c0003fe0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0003fe3:	74 20                	je     c0004005 <f_write+0x1f1>
c0003fe5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fe8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0003feb:	76 18                	jbe    c0004005 <f_write+0x1f1>
c0003fed:	6a 01                	push   0x1
c0003fef:	8d 43 28             	lea    eax,[ebx+0x28]
c0003ff2:	57                   	push   edi
c0003ff3:	50                   	push   eax
c0003ff4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff8:	50                   	push   eax
c0003ff9:	e8 03 db ff ff       	call   c0001b01 <disk_read>
c0003ffe:	83 c4 10             	add    esp,0x10
c0004001:	85 c0                	test   eax,eax
c0004003:	75 91                	jne    c0003f96 <f_write+0x182>
c0004005:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004008:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000400b:	ba 00 02 00 00       	mov    edx,0x200
c0004010:	25 ff 01 00 00       	and    eax,0x1ff
c0004015:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004019:	29 c2                	sub    edx,eax
c000401b:	39 d6                	cmp    esi,edx
c000401d:	76 02                	jbe    c0004021 <f_write+0x20d>
c000401f:	89 d6                	mov    esi,edx
c0004021:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004025:	89 f1                	mov    ecx,esi
c0004027:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000402b:	e8 48 db ff ff       	call   c0001b78 <mem_cpy>
c0004030:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004034:	e9 f4 fe ff ff       	jmp    c0003f2d <f_write+0x119>
c0004039:	bd 07 00 00 00       	mov    ebp,0x7
c000403e:	83 c4 2c             	add    esp,0x2c
c0004041:	89 e8                	mov    eax,ebp
c0004043:	5b                   	pop    ebx
c0004044:	5e                   	pop    esi
c0004045:	5f                   	pop    edi
c0004046:	5d                   	pop    ebp
c0004047:	c3                   	ret    

c0004048 <f_sync>:
c0004048:	56                   	push   esi
c0004049:	53                   	push   ebx
c000404a:	83 ec 14             	sub    esp,0x14
c000404d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004051:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004055:	89 d8                	mov    eax,ebx
c0004057:	e8 6c df ff ff       	call   c0001fc8 <validate>
c000405c:	85 c0                	test   eax,eax
c000405e:	0f 85 93 00 00 00    	jne    c00040f7 <f_sync+0xaf>
c0004064:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004067:	f6 c2 40             	test   dl,0x40
c000406a:	0f 84 87 00 00 00    	je     c00040f7 <f_sync+0xaf>
c0004070:	84 d2                	test   dl,dl
c0004072:	79 29                	jns    c000409d <f_sync+0x55>
c0004074:	6a 01                	push   0x1
c0004076:	8d 43 28             	lea    eax,[ebx+0x28]
c0004079:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000407c:	50                   	push   eax
c000407d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004081:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004085:	50                   	push   eax
c0004086:	e8 8c da ff ff       	call   c0001b17 <disk_write>
c000408b:	83 c4 10             	add    esp,0x10
c000408e:	89 c2                	mov    edx,eax
c0004090:	b8 01 00 00 00       	mov    eax,0x1
c0004095:	85 d2                	test   edx,edx
c0004097:	75 5e                	jne    c00040f7 <f_sync+0xaf>
c0004099:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000409d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00040a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040a4:	e8 c9 df ff ff       	call   c0002072 <move_window>
c00040a9:	85 c0                	test   eax,eax
c00040ab:	75 4a                	jne    c00040f7 <f_sync+0xaf>
c00040ad:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00040b0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00040b4:	89 f2                	mov    edx,esi
c00040b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00040b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040bb:	e8 56 ee ff ff       	call   c0002f16 <st_clust.isra.1>
c00040c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00040c6:	e8 aa da ff ff       	call   c0001b75 <st_dword>
c00040cb:	8d 46 16             	lea    eax,[esi+0x16]
c00040ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00040d3:	e8 9d da ff ff       	call   c0001b75 <st_dword>
c00040d8:	8d 46 12             	lea    eax,[esi+0x12]
c00040db:	31 d2                	xor    edx,edx
c00040dd:	e8 8f da ff ff       	call   c0001b71 <st_word>
c00040e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040ee:	e8 bf e9 ff ff       	call   c0002ab2 <sync_fs>
c00040f3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00040f7:	83 c4 14             	add    esp,0x14
c00040fa:	5b                   	pop    ebx
c00040fb:	5e                   	pop    esi
c00040fc:	c3                   	ret    

c00040fd <f_close>:
c00040fd:	53                   	push   ebx
c00040fe:	83 ec 24             	sub    esp,0x24
c0004101:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004105:	53                   	push   ebx
c0004106:	e8 3d ff ff ff       	call   c0004048 <f_sync>
c000410b:	83 c4 10             	add    esp,0x10
c000410e:	85 c0                	test   eax,eax
c0004110:	75 15                	jne    c0004127 <f_close+0x2a>
c0004112:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 ab de ff ff       	call   c0001fc8 <validate>
c000411d:	85 c0                	test   eax,eax
c000411f:	75 06                	jne    c0004127 <f_close+0x2a>
c0004121:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004127:	83 c4 18             	add    esp,0x18
c000412a:	5b                   	pop    ebx
c000412b:	c3                   	ret    

c000412c <f_lseek>:
c000412c:	55                   	push   ebp
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	83 ec 2c             	sub    esp,0x2c
c0004133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004137:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000413b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 82 de ff ff       	call   c0001fc8 <validate>
c0004146:	89 c5                	mov    ebp,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 79 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c0004150:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004154:	85 ed                	test   ebp,ebp
c0004156:	0f 85 6d 01 00 00    	jne    c00042c9 <f_lseek+0x19d>
c000415c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000415f:	39 f0                	cmp    eax,esi
c0004161:	73 08                	jae    c000416b <f_lseek+0x3f>
c0004163:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004167:	75 02                	jne    c000416b <f_lseek+0x3f>
c0004169:	89 c6                	mov    esi,eax
c000416b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000416e:	85 f6                	test   esi,esi
c0004170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004177:	75 07                	jne    c0004180 <f_lseek+0x54>
c0004179:	31 f6                	xor    esi,esi
c000417b:	e9 e2 00 00 00       	jmp    c0004262 <f_lseek+0x136>
c0004180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004184:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004188:	c1 e7 09             	shl    edi,0x9
c000418b:	85 c9                	test   ecx,ecx
c000418d:	74 28                	je     c00041b7 <f_lseek+0x8b>
c000418f:	49                   	dec    ecx
c0004190:	31 d2                	xor    edx,edx
c0004192:	8d 46 ff             	lea    eax,[esi-0x1]
c0004195:	f7 f7                	div    edi
c0004197:	31 d2                	xor    edx,edx
c0004199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000419d:	89 c8                	mov    eax,ecx
c000419f:	f7 f7                	div    edi
c00041a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00041a5:	72 10                	jb     c00041b7 <f_lseek+0x8b>
c00041a7:	89 f8                	mov    eax,edi
c00041a9:	f7 d8                	neg    eax
c00041ab:	21 c1                	and    ecx,eax
c00041ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00041b0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00041b3:	29 ce                	sub    esi,ecx
c00041b5:	eb 3c                	jmp    c00041f3 <f_lseek+0xc7>
c00041b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ba:	85 c0                	test   eax,eax
c00041bc:	75 32                	jne    c00041f0 <f_lseek+0xc4>
c00041be:	31 d2                	xor    edx,edx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 41 ef ff ff       	call   c0003108 <create_chain>
c00041c7:	83 f8 01             	cmp    eax,0x1
c00041ca:	75 0e                	jne    c00041da <f_lseek+0xae>
c00041cc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041d0:	bd 02 00 00 00       	mov    ebp,0x2
c00041d5:	e9 ef 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041da:	83 f8 ff             	cmp    eax,0xffffffff
c00041dd:	75 0e                	jne    c00041ed <f_lseek+0xc1>
c00041df:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041e3:	bd 01 00 00 00       	mov    ebp,0x1
c00041e8:	e9 dc 00 00 00       	jmp    c00042c9 <f_lseek+0x19d>
c00041ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041f3:	85 c0                	test   eax,eax
c00041f5:	74 82                	je     c0004179 <f_lseek+0x4d>
c00041f7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00041fa:	39 fe                	cmp    esi,edi
c00041fc:	76 3d                	jbe    c000423b <f_lseek+0x10f>
c00041fe:	01 fa                	add    edx,edi
c0004200:	29 fe                	sub    esi,edi
c0004202:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004205:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004209:	89 c2                	mov    edx,eax
c000420b:	74 0d                	je     c000421a <f_lseek+0xee>
c000420d:	89 d8                	mov    eax,ebx
c000420f:	e8 f4 ee ff ff       	call   c0003108 <create_chain>
c0004214:	85 c0                	test   eax,eax
c0004216:	75 09                	jne    c0004221 <f_lseek+0xf5>
c0004218:	eb 1f                	jmp    c0004239 <f_lseek+0x10d>
c000421a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421c:	e8 1d ed ff ff       	call   c0002f3e <get_fat.isra.2>
c0004221:	83 f8 ff             	cmp    eax,0xffffffff
c0004224:	74 b9                	je     c00041df <f_lseek+0xb3>
c0004226:	83 f8 01             	cmp    eax,0x1
c0004229:	76 a1                	jbe    c00041cc <f_lseek+0xa0>
c000422b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000422f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004232:	76 98                	jbe    c00041cc <f_lseek+0xa0>
c0004234:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004237:	eb be                	jmp    c00041f7 <f_lseek+0xcb>
c0004239:	31 f6                	xor    esi,esi
c000423b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	0f 84 2f ff ff ff    	je     c0004179 <f_lseek+0x4d>
c000424a:	89 c2                	mov    edx,eax
c000424c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004250:	e8 3d db ff ff       	call   c0001d92 <clst2sect>
c0004255:	85 c0                	test   eax,eax
c0004257:	0f 84 6f ff ff ff    	je     c00041cc <f_lseek+0xa0>
c000425d:	c1 ee 09             	shr    esi,0x9
c0004260:	01 c6                	add    esi,eax
c0004262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004265:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004268:	76 07                	jbe    c0004271 <f_lseek+0x145>
c000426a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000426d:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004271:	a9 ff 01 00 00       	test   eax,0x1ff
c0004276:	74 51                	je     c00042c9 <f_lseek+0x19d>
c0004278:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000427b:	39 f0                	cmp    eax,esi
c000427d:	74 4a                	je     c00042c9 <f_lseek+0x19d>
c000427f:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004282:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004286:	79 21                	jns    c00042a9 <f_lseek+0x17d>
c0004288:	6a 01                	push   0x1
c000428a:	50                   	push   eax
c000428b:	57                   	push   edi
c000428c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004290:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004294:	50                   	push   eax
c0004295:	e8 7d d8 ff ff       	call   c0001b17 <disk_write>
c000429a:	83 c4 10             	add    esp,0x10
c000429d:	85 c0                	test   eax,eax
c000429f:	0f 85 3a ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042a5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00042a9:	6a 01                	push   0x1
c00042ab:	56                   	push   esi
c00042ac:	57                   	push   edi
c00042ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b5:	50                   	push   eax
c00042b6:	e8 46 d8 ff ff       	call   c0001b01 <disk_read>
c00042bb:	83 c4 10             	add    esp,0x10
c00042be:	85 c0                	test   eax,eax
c00042c0:	0f 85 19 ff ff ff    	jne    c00041df <f_lseek+0xb3>
c00042c6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00042c9:	83 c4 2c             	add    esp,0x2c
c00042cc:	89 e8                	mov    eax,ebp
c00042ce:	5b                   	pop    ebx
c00042cf:	5e                   	pop    esi
c00042d0:	5f                   	pop    edi
c00042d1:	5d                   	pop    ebp
c00042d2:	c3                   	ret    

c00042d3 <f_opendir>:
c00042d3:	56                   	push   esi
c00042d4:	b8 09 00 00 00       	mov    eax,0x9
c00042d9:	53                   	push   ebx
c00042da:	83 ec 24             	sub    esp,0x24
c00042dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00042e1:	85 db                	test   ebx,ebx
c00042e3:	0f 84 af 00 00 00    	je     c0004398 <f_opendir+0xc5>
c00042e9:	31 c9                	xor    ecx,ecx
c00042eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042ef:	8d 44 24 34          	lea    eax,[esp+0x34]
c00042f3:	e8 cd de ff ff       	call   c00021c5 <mount_volume>
c00042f8:	85 c0                	test   eax,eax
c00042fa:	0f 85 92 00 00 00    	jne    c0004392 <f_opendir+0xbf>
c0004300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004304:	83 ec 0c             	sub    esp,0xc
c0004307:	89 03                	mov    DWORD PTR [ebx],eax
c0004309:	68 00 02 00 00       	push   0x200
c000430e:	e8 85 15 00 00       	call   c0005898 <ff_memalloc>
c0004313:	83 c4 10             	add    esp,0x10
c0004316:	89 c6                	mov    esi,eax
c0004318:	b8 11 00 00 00       	mov    eax,0x11
c000431d:	85 f6                	test   esi,esi
c000431f:	74 77                	je     c0004398 <f_opendir+0xc5>
c0004321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004329:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000432c:	89 d8                	mov    eax,ebx
c000432e:	e8 9c f3 ff ff       	call   c00036cf <follow_path>
c0004333:	85 c0                	test   eax,eax
c0004335:	75 37                	jne    c000436e <f_opendir+0x9b>
c0004337:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000433b:	78 1c                	js     c0004359 <f_opendir+0x86>
c000433d:	b8 05 00 00 00       	mov    eax,0x5
c0004342:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004346:	74 26                	je     c000436e <f_opendir+0x9b>
c0004348:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000434b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000434f:	8a 00                	mov    al,BYTE PTR [eax]
c0004351:	e8 97 eb ff ff       	call   c0002eed <ld_clust.isra.0>
c0004356:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000435d:	31 d2                	xor    edx,edx
c000435f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004363:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004367:	89 d8                	mov    eax,ebx
c0004369:	e8 d2 ec ff ff       	call   c0003040 <dir_sdi>
c000436e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004372:	83 ec 0c             	sub    esp,0xc
c0004375:	56                   	push   esi
c0004376:	e8 35 15 00 00       	call   c00058b0 <ff_memfree>
c000437b:	83 c4 10             	add    esp,0x10
c000437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004382:	83 f8 04             	cmp    eax,0x4
c0004385:	74 06                	je     c000438d <f_opendir+0xba>
c0004387:	85 c0                	test   eax,eax
c0004389:	74 0d                	je     c0004398 <f_opendir+0xc5>
c000438b:	eb 05                	jmp    c0004392 <f_opendir+0xbf>
c000438d:	b8 05 00 00 00       	mov    eax,0x5
c0004392:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004398:	83 c4 24             	add    esp,0x24
c000439b:	5b                   	pop    ebx
c000439c:	5e                   	pop    esi
c000439d:	c3                   	ret    

c000439e <f_closedir>:
c000439e:	53                   	push   ebx
c000439f:	83 ec 18             	sub    esp,0x18
c00043a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00043a6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043aa:	89 d8                	mov    eax,ebx
c00043ac:	e8 17 dc ff ff       	call   c0001fc8 <validate>
c00043b1:	85 c0                	test   eax,eax
c00043b3:	75 06                	jne    c00043bb <f_closedir+0x1d>
c00043b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043bb:	83 c4 18             	add    esp,0x18
c00043be:	5b                   	pop    ebx
c00043bf:	c3                   	ret    

c00043c0 <f_readdir>:
c00043c0:	57                   	push   edi
c00043c1:	56                   	push   esi
c00043c2:	53                   	push   ebx
c00043c3:	83 ec 20             	sub    esp,0x20
c00043c6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00043ca:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00043ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043d2:	89 d8                	mov    eax,ebx
c00043d4:	e8 ef db ff ff       	call   c0001fc8 <validate>
c00043d9:	85 c0                	test   eax,eax
c00043db:	75 6e                	jne    c000444b <f_readdir+0x8b>
c00043dd:	85 ff                	test   edi,edi
c00043df:	75 0b                	jne    c00043ec <f_readdir+0x2c>
c00043e1:	31 d2                	xor    edx,edx
c00043e3:	89 d8                	mov    eax,ebx
c00043e5:	e8 56 ec ff ff       	call   c0003040 <dir_sdi>
c00043ea:	eb 5f                	jmp    c000444b <f_readdir+0x8b>
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	68 00 02 00 00       	push   0x200
c00043f4:	e8 9f 14 00 00       	call   c0005898 <ff_memalloc>
c00043f9:	83 c4 10             	add    esp,0x10
c00043fc:	89 c6                	mov    esi,eax
c00043fe:	b8 11 00 00 00       	mov    eax,0x11
c0004403:	85 f6                	test   esi,esi
c0004405:	74 44                	je     c000444b <f_readdir+0x8b>
c0004407:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000440b:	31 d2                	xor    edx,edx
c000440d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004410:	89 d8                	mov    eax,ebx
c0004412:	e8 1a f0 ff ff       	call   c0003431 <dir_read>
c0004417:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000441c:	75 19                	jne    c0004437 <f_readdir+0x77>
c000441e:	89 fa                	mov    edx,edi
c0004420:	89 d8                	mov    eax,ebx
c0004422:	e8 e2 e8 ff ff       	call   c0002d09 <get_fileinfo>
c0004427:	31 d2                	xor    edx,edx
c0004429:	89 d8                	mov    eax,ebx
c000442b:	e8 9b ee ff ff       	call   c00032cb <dir_next>
c0004430:	83 f8 04             	cmp    eax,0x4
c0004433:	75 02                	jne    c0004437 <f_readdir+0x77>
c0004435:	31 c0                	xor    eax,eax
c0004437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000443b:	83 ec 0c             	sub    esp,0xc
c000443e:	56                   	push   esi
c000443f:	e8 6c 14 00 00       	call   c00058b0 <ff_memfree>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000444b:	83 c4 20             	add    esp,0x20
c000444e:	5b                   	pop    ebx
c000444f:	5e                   	pop    esi
c0004450:	5f                   	pop    edi
c0004451:	c3                   	ret    

c0004452 <f_stat>:
c0004452:	57                   	push   edi
c0004453:	31 c9                	xor    ecx,ecx
c0004455:	56                   	push   esi
c0004456:	53                   	push   ebx
c0004457:	83 ec 30             	sub    esp,0x30
c000445a:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000445e:	89 e2                	mov    edx,esp
c0004460:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004464:	e8 5c dd ff ff       	call   c00021c5 <mount_volume>
c0004469:	89 c3                	mov    ebx,eax
c000446b:	85 c0                	test   eax,eax
c000446d:	75 59                	jne    c00044c8 <f_stat+0x76>
c000446f:	83 ec 0c             	sub    esp,0xc
c0004472:	bb 11 00 00 00       	mov    ebx,0x11
c0004477:	68 00 02 00 00       	push   0x200
c000447c:	e8 17 14 00 00       	call   c0005898 <ff_memalloc>
c0004481:	83 c4 10             	add    esp,0x10
c0004484:	89 c6                	mov    esi,eax
c0004486:	85 c0                	test   eax,eax
c0004488:	74 3e                	je     c00044c8 <f_stat+0x76>
c000448a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000448d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004491:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004494:	89 e0                	mov    eax,esp
c0004496:	e8 34 f2 ff ff       	call   c00036cf <follow_path>
c000449b:	89 c3                	mov    ebx,eax
c000449d:	85 c0                	test   eax,eax
c000449f:	75 1b                	jne    c00044bc <f_stat+0x6a>
c00044a1:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00044a6:	78 0f                	js     c00044b7 <f_stat+0x65>
c00044a8:	85 ff                	test   edi,edi
c00044aa:	74 10                	je     c00044bc <f_stat+0x6a>
c00044ac:	89 fa                	mov    edx,edi
c00044ae:	89 e0                	mov    eax,esp
c00044b0:	e8 54 e8 ff ff       	call   c0002d09 <get_fileinfo>
c00044b5:	eb 05                	jmp    c00044bc <f_stat+0x6a>
c00044b7:	bb 06 00 00 00       	mov    ebx,0x6
c00044bc:	83 ec 0c             	sub    esp,0xc
c00044bf:	56                   	push   esi
c00044c0:	e8 eb 13 00 00       	call   c00058b0 <ff_memfree>
c00044c5:	83 c4 10             	add    esp,0x10
c00044c8:	83 c4 30             	add    esp,0x30
c00044cb:	89 d8                	mov    eax,ebx
c00044cd:	5b                   	pop    ebx
c00044ce:	5e                   	pop    esi
c00044cf:	5f                   	pop    edi
c00044d0:	c3                   	ret    

c00044d1 <f_getfree>:
c00044d1:	55                   	push   ebp
c00044d2:	31 c9                	xor    ecx,ecx
c00044d4:	57                   	push   edi
c00044d5:	56                   	push   esi
c00044d6:	53                   	push   ebx
c00044d7:	83 ec 2c             	sub    esp,0x2c
c00044da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044de:	8d 44 24 40          	lea    eax,[esp+0x40]
c00044e2:	e8 de dc ff ff       	call   c00021c5 <mount_volume>
c00044e7:	89 c7                	mov    edi,eax
c00044e9:	85 c0                	test   eax,eax
c00044eb:	0f 85 d8 00 00 00    	jne    c00045c9 <f_getfree+0xf8>
c00044f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00044f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00044f9:	89 30                	mov    DWORD PTR [eax],esi
c00044fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00044fe:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004501:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004504:	39 d0                	cmp    eax,edx
c0004506:	77 0b                	ja     c0004513 <f_getfree+0x42>
c0004508:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000450c:	89 01                	mov    DWORD PTR [ecx],eax
c000450e:	e9 b6 00 00 00       	jmp    c00045c9 <f_getfree+0xf8>
c0004513:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004516:	75 29                	jne    c0004541 <f_getfree+0x70>
c0004518:	bd 02 00 00 00       	mov    ebp,0x2
c000451d:	31 db                	xor    ebx,ebx
c000451f:	89 ea                	mov    edx,ebp
c0004521:	89 f0                	mov    eax,esi
c0004523:	e8 16 ea ff ff       	call   c0002f3e <get_fat.isra.2>
c0004528:	83 f8 ff             	cmp    eax,0xffffffff
c000452b:	74 7b                	je     c00045a8 <f_getfree+0xd7>
c000452d:	83 f8 01             	cmp    eax,0x1
c0004530:	74 7d                	je     c00045af <f_getfree+0xde>
c0004532:	83 d3 00             	adc    ebx,0x0
c0004535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004539:	45                   	inc    ebp
c000453a:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000453d:	77 e0                	ja     c000451f <f_getfree+0x4e>
c000453f:	eb 77                	jmp    c00045b8 <f_getfree+0xe7>
c0004541:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004544:	31 db                	xor    ebx,ebx
c0004546:	31 f6                	xor    esi,esi
c0004548:	85 f6                	test   esi,esi
c000454a:	75 18                	jne    c0004564 <f_getfree+0x93>
c000454c:	8d 42 01             	lea    eax,[edx+0x1]
c000454f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004557:	e8 16 db ff ff       	call   c0002072 <move_window>
c000455c:	85 c0                	test   eax,eax
c000455e:	75 56                	jne    c00045b6 <f_getfree+0xe5>
c0004560:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004564:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004568:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000456c:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004570:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004573:	75 11                	jne    c0004586 <f_getfree+0xb5>
c0004575:	e8 d2 d5 ff ff       	call   c0001b4c <ld_word>
c000457a:	66 83 f8 01          	cmp    ax,0x1
c000457e:	83 d3 00             	adc    ebx,0x0
c0004581:	83 c6 02             	add    esi,0x2
c0004584:	eb 13                	jmp    c0004599 <f_getfree+0xc8>
c0004586:	e8 ce d5 ff ff       	call   c0001b59 <ld_dword>
c000458b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004590:	83 f8 01             	cmp    eax,0x1
c0004593:	83 d3 00             	adc    ebx,0x0
c0004596:	83 c6 04             	add    esi,0x4
c0004599:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000459f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00045a3:	4d                   	dec    ebp
c00045a4:	75 a2                	jne    c0004548 <f_getfree+0x77>
c00045a6:	eb 10                	jmp    c00045b8 <f_getfree+0xe7>
c00045a8:	bf 01 00 00 00       	mov    edi,0x1
c00045ad:	eb 09                	jmp    c00045b8 <f_getfree+0xe7>
c00045af:	bf 02 00 00 00       	mov    edi,0x2
c00045b4:	eb 02                	jmp    c00045b8 <f_getfree+0xe7>
c00045b6:	89 c7                	mov    edi,eax
c00045b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00045bc:	89 18                	mov    DWORD PTR [eax],ebx
c00045be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045c2:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00045c5:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00045c9:	83 c4 2c             	add    esp,0x2c
c00045cc:	89 f8                	mov    eax,edi
c00045ce:	5b                   	pop    ebx
c00045cf:	5e                   	pop    esi
c00045d0:	5f                   	pop    edi
c00045d1:	5d                   	pop    ebp
c00045d2:	c3                   	ret    

c00045d3 <f_truncate>:
c00045d3:	56                   	push   esi
c00045d4:	53                   	push   ebx
c00045d5:	83 ec 14             	sub    esp,0x14
c00045d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00045dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045e0:	89 d8                	mov    eax,ebx
c00045e2:	e8 e1 d9 ff ff       	call   c0001fc8 <validate>
c00045e7:	89 c6                	mov    esi,eax
c00045e9:	85 c0                	test   eax,eax
c00045eb:	0f 85 be 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045f1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00045f5:	85 f6                	test   esi,esi
c00045f7:	0f 85 b2 00 00 00    	jne    c00046af <f_truncate+0xdc>
c00045fd:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004601:	0f 84 a3 00 00 00    	je     c00046aa <f_truncate+0xd7>
c0004607:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000460a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000460d:	0f 83 9c 00 00 00    	jae    c00046af <f_truncate+0xdc>
c0004613:	85 c0                	test   eax,eax
c0004615:	75 15                	jne    c000462c <f_truncate+0x59>
c0004617:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000461a:	31 c9                	xor    ecx,ecx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 1f ec ff ff       	call   c0003242 <remove_chain>
c0004623:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000462a:	eb 35                	jmp    c0004661 <f_truncate+0x8e>
c000462c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004631:	e8 08 e9 ff ff       	call   c0002f3e <get_fat.isra.2>
c0004636:	89 c2                	mov    edx,eax
c0004638:	b8 01 00 00 00       	mov    eax,0x1
c000463d:	83 fa ff             	cmp    edx,0xffffffff
c0004640:	74 1f                	je     c0004661 <f_truncate+0x8e>
c0004642:	b8 02 00 00 00       	mov    eax,0x2
c0004647:	83 fa 01             	cmp    edx,0x1
c000464a:	74 15                	je     c0004661 <f_truncate+0x8e>
c000464c:	31 c0                	xor    eax,eax
c000464e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004652:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004655:	76 0a                	jbe    c0004661 <f_truncate+0x8e>
c0004657:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000465a:	89 d8                	mov    eax,ebx
c000465c:	e8 e1 eb ff ff       	call   c0003242 <remove_chain>
c0004661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004664:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004667:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000466a:	83 ca 40             	or     edx,0x40
c000466d:	85 c0                	test   eax,eax
c000466f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004672:	75 2f                	jne    c00046a3 <f_truncate+0xd0>
c0004674:	84 d2                	test   dl,dl
c0004676:	79 37                	jns    c00046af <f_truncate+0xdc>
c0004678:	6a 01                	push   0x1
c000467a:	8d 43 28             	lea    eax,[ebx+0x28]
c000467d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004680:	50                   	push   eax
c0004681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004685:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004689:	50                   	push   eax
c000468a:	e8 88 d4 ff ff       	call   c0001b17 <disk_write>
c000468f:	83 c4 10             	add    esp,0x10
c0004692:	85 c0                	test   eax,eax
c0004694:	75 08                	jne    c000469e <f_truncate+0xcb>
c0004696:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000469a:	31 f6                	xor    esi,esi
c000469c:	eb 11                	jmp    c00046af <f_truncate+0xdc>
c000469e:	b8 01 00 00 00       	mov    eax,0x1
c00046a3:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00046a6:	89 c6                	mov    esi,eax
c00046a8:	eb 05                	jmp    c00046af <f_truncate+0xdc>
c00046aa:	be 07 00 00 00       	mov    esi,0x7
c00046af:	89 f0                	mov    eax,esi
c00046b1:	83 c4 14             	add    esp,0x14
c00046b4:	5b                   	pop    ebx
c00046b5:	5e                   	pop    esi
c00046b6:	c3                   	ret    

c00046b7 <f_unlink>:
c00046b7:	55                   	push   ebp
c00046b8:	b9 02 00 00 00       	mov    ecx,0x2
c00046bd:	57                   	push   edi
c00046be:	56                   	push   esi
c00046bf:	53                   	push   ebx
c00046c0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00046c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046ca:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00046d1:	e8 ef da ff ff       	call   c00021c5 <mount_volume>
c00046d6:	85 c0                	test   eax,eax
c00046d8:	0f 85 f0 00 00 00    	jne    c00047ce <f_unlink+0x117>
c00046de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e2:	83 ec 0c             	sub    esp,0xc
c00046e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00046e9:	68 00 02 00 00       	push   0x200
c00046ee:	e8 a5 11 00 00       	call   c0005898 <ff_memalloc>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	89 c3                	mov    ebx,eax
c00046f8:	b8 11 00 00 00       	mov    eax,0x11
c00046fd:	85 db                	test   ebx,ebx
c00046ff:	0f 84 c9 00 00 00    	je     c00047ce <f_unlink+0x117>
c0004705:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004709:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004710:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004713:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004717:	e8 b3 ef ff ff       	call   c00036cf <follow_path>
c000471c:	85 c0                	test   eax,eax
c000471e:	0f 85 96 00 00 00    	jne    c00047ba <f_unlink+0x103>
c0004724:	b8 06 00 00 00       	mov    eax,0x6
c0004729:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000472e:	0f 88 86 00 00 00    	js     c00047ba <f_unlink+0x103>
c0004734:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004739:	f7 c5 01 00 00 00    	test   ebp,0x1
c000473f:	74 07                	je     c0004748 <f_unlink+0x91>
c0004741:	b8 07 00 00 00       	mov    eax,0x7
c0004746:	eb 72                	jmp    c00047ba <f_unlink+0x103>
c0004748:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000474c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004750:	8a 07                	mov    al,BYTE PTR [edi]
c0004752:	e8 96 e7 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004757:	83 e5 10             	and    ebp,0x10
c000475a:	89 c6                	mov    esi,eax
c000475c:	75 0f                	jne    c000476d <f_unlink+0xb6>
c000475e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004762:	e8 e7 ed ff ff       	call   c000354e <dir_remove>
c0004767:	85 c0                	test   eax,eax
c0004769:	74 2f                	je     c000479a <f_unlink+0xe3>
c000476b:	eb 4d                	jmp    c00047ba <f_unlink+0x103>
c000476d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004771:	31 d2                	xor    edx,edx
c0004773:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004777:	8d 44 24 50          	lea    eax,[esp+0x50]
c000477b:	e8 c0 e8 ff ff       	call   c0003040 <dir_sdi>
c0004780:	85 c0                	test   eax,eax
c0004782:	75 36                	jne    c00047ba <f_unlink+0x103>
c0004784:	31 d2                	xor    edx,edx
c0004786:	8d 44 24 50          	lea    eax,[esp+0x50]
c000478a:	e8 a2 ec ff ff       	call   c0003431 <dir_read>
c000478f:	85 c0                	test   eax,eax
c0004791:	74 ae                	je     c0004741 <f_unlink+0x8a>
c0004793:	83 f8 04             	cmp    eax,0x4
c0004796:	75 22                	jne    c00047ba <f_unlink+0x103>
c0004798:	eb c4                	jmp    c000475e <f_unlink+0xa7>
c000479a:	85 f6                	test   esi,esi
c000479c:	75 0b                	jne    c00047a9 <f_unlink+0xf2>
c000479e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a2:	e8 0b e3 ff ff       	call   c0002ab2 <sync_fs>
c00047a7:	eb 11                	jmp    c00047ba <f_unlink+0x103>
c00047a9:	31 c9                	xor    ecx,ecx
c00047ab:	89 f2                	mov    edx,esi
c00047ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00047b1:	e8 8c ea ff ff       	call   c0003242 <remove_chain>
c00047b6:	85 c0                	test   eax,eax
c00047b8:	74 e4                	je     c000479e <f_unlink+0xe7>
c00047ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047be:	83 ec 0c             	sub    esp,0xc
c00047c1:	53                   	push   ebx
c00047c2:	e8 e9 10 00 00       	call   c00058b0 <ff_memfree>
c00047c7:	83 c4 10             	add    esp,0x10
c00047ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ce:	81 c4 8c 00 00 00    	add    esp,0x8c
c00047d4:	5b                   	pop    ebx
c00047d5:	5e                   	pop    esi
c00047d6:	5f                   	pop    edi
c00047d7:	5d                   	pop    ebp
c00047d8:	c3                   	ret    

c00047d9 <f_mkdir>:
c00047d9:	57                   	push   edi
c00047da:	b9 02 00 00 00       	mov    ecx,0x2
c00047df:	56                   	push   esi
c00047e0:	53                   	push   ebx
c00047e1:	83 ec 50             	sub    esp,0x50
c00047e4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00047ec:	e8 d4 d9 ff ff       	call   c00021c5 <mount_volume>
c00047f1:	89 c3                	mov    ebx,eax
c00047f3:	85 c0                	test   eax,eax
c00047f5:	0f 85 70 01 00 00    	jne    c000496b <f_mkdir+0x192>
c00047fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047ff:	bb 11 00 00 00       	mov    ebx,0x11
c0004804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004808:	83 ec 0c             	sub    esp,0xc
c000480b:	68 00 02 00 00       	push   0x200
c0004810:	e8 83 10 00 00       	call   c0005898 <ff_memalloc>
c0004815:	83 c4 10             	add    esp,0x10
c0004818:	89 c7                	mov    edi,eax
c000481a:	85 c0                	test   eax,eax
c000481c:	0f 84 49 01 00 00    	je     c000496b <f_mkdir+0x192>
c0004822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004826:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000482a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000482d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004831:	e8 99 ee ff ff       	call   c00036cf <follow_path>
c0004836:	89 c3                	mov    ebx,eax
c0004838:	85 c0                	test   eax,eax
c000483a:	74 3e                	je     c000487a <f_mkdir+0xa1>
c000483c:	83 f8 04             	cmp    eax,0x4
c000483f:	75 3e                	jne    c000487f <f_mkdir+0xa6>
c0004841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000484b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000484f:	e8 b4 e8 ff ff       	call   c0003108 <create_chain>
c0004854:	89 c6                	mov    esi,eax
c0004856:	85 c0                	test   eax,eax
c0004858:	74 0c                	je     c0004866 <f_mkdir+0x8d>
c000485a:	bb 02 00 00 00       	mov    ebx,0x2
c000485f:	83 f8 01             	cmp    eax,0x1
c0004862:	74 07                	je     c000486b <f_mkdir+0x92>
c0004864:	eb 2a                	jmp    c0004890 <f_mkdir+0xb7>
c0004866:	bb 07 00 00 00       	mov    ebx,0x7
c000486b:	31 c9                	xor    ecx,ecx
c000486d:	89 f2                	mov    edx,esi
c000486f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004873:	e8 ca e9 ff ff       	call   c0003242 <remove_chain>
c0004878:	eb 05                	jmp    c000487f <f_mkdir+0xa6>
c000487a:	bb 08 00 00 00       	mov    ebx,0x8
c000487f:	83 ec 0c             	sub    esp,0xc
c0004882:	57                   	push   edi
c0004883:	e8 28 10 00 00       	call   c00058b0 <ff_memfree>
c0004888:	83 c4 10             	add    esp,0x10
c000488b:	e9 db 00 00 00       	jmp    c000496b <f_mkdir+0x192>
c0004890:	bb 01 00 00 00       	mov    ebx,0x1
c0004895:	83 f8 ff             	cmp    eax,0xffffffff
c0004898:	74 d1                	je     c000486b <f_mkdir+0x92>
c000489a:	89 f2                	mov    edx,esi
c000489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a0:	e8 73 dd ff ff       	call   c0002618 <dir_clear>
c00048a5:	89 c3                	mov    ebx,eax
c00048a7:	85 c0                	test   eax,eax
c00048a9:	75 c0                	jne    c000486b <f_mkdir+0x92>
c00048ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00048b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048b4:	ba 20 00 00 00       	mov    edx,0x20
c00048b9:	83 c0 34             	add    eax,0x34
c00048bc:	e8 cc d2 ff ff       	call   c0001b8d <mem_set>
c00048c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00048ca:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c00048ce:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c00048d2:	83 c0 4a             	add    eax,0x4a
c00048d5:	e8 9b d2 ff ff       	call   c0001b75 <st_dword>
c00048da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048de:	89 f1                	mov    ecx,esi
c00048e0:	8d 50 34             	lea    edx,[eax+0x34]
c00048e3:	e8 2e e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c00048e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048ec:	b9 20 00 00 00       	mov    ecx,0x20
c00048f1:	8d 50 34             	lea    edx,[eax+0x34]
c00048f4:	83 c0 54             	add    eax,0x54
c00048f7:	e8 7c d2 ff ff       	call   c0001b78 <mem_cpy>
c00048fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004900:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004904:	8d 50 54             	lea    edx,[eax+0x54]
c0004907:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c000490b:	e8 06 e6 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004914:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004918:	8d 44 24 20          	lea    eax,[esp+0x20]
c000491c:	e8 42 ee ff ff       	call   c0003763 <dir_register>
c0004921:	89 c3                	mov    ebx,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 40 ff ff ff    	jne    c000486b <f_mkdir+0x92>
c000492b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000492f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004934:	83 c0 16             	add    eax,0x16
c0004937:	e8 39 d2 ff ff       	call   c0001b75 <st_dword>
c000493c:	89 f1                	mov    ecx,esi
c000493e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004946:	e8 cb e5 ff ff       	call   c0002f16 <st_clust.isra.1>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004957:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	e8 4e e1 ff ff       	call   c0002ab2 <sync_fs>
c0004964:	89 c3                	mov    ebx,eax
c0004966:	e9 14 ff ff ff       	jmp    c000487f <f_mkdir+0xa6>
c000496b:	83 c4 50             	add    esp,0x50
c000496e:	89 d8                	mov    eax,ebx
c0004970:	5b                   	pop    ebx
c0004971:	5e                   	pop    esi
c0004972:	5f                   	pop    edi
c0004973:	c3                   	ret    

c0004974 <f_rename>:
c0004974:	57                   	push   edi
c0004975:	56                   	push   esi
c0004976:	53                   	push   ebx
c0004977:	81 ec a0 00 00 00    	sub    esp,0xa0
c000497d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004984:	e8 f2 d5 ff ff       	call   c0001f7b <get_ldnumber>
c0004989:	b9 02 00 00 00       	mov    ecx,0x2
c000498e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004992:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004999:	e8 27 d8 ff ff       	call   c00021c5 <mount_volume>
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 7a 01 00 00    	jne    c0004b20 <f_rename+0x1ac>
c00049a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049aa:	83 ec 0c             	sub    esp,0xc
c00049ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00049b1:	68 00 02 00 00       	push   0x200
c00049b6:	e8 dd 0e 00 00       	call   c0005898 <ff_memalloc>
c00049bb:	83 c4 10             	add    esp,0x10
c00049be:	89 c6                	mov    esi,eax
c00049c0:	b8 11 00 00 00       	mov    eax,0x11
c00049c5:	85 f6                	test   esi,esi
c00049c7:	0f 84 53 01 00 00    	je     c0004b20 <f_rename+0x1ac>
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c00049d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049db:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049df:	e8 eb ec ff ff       	call   c00036cf <follow_path>
c00049e4:	85 c0                	test   eax,eax
c00049e6:	0f 85 20 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049ec:	b8 06 00 00 00       	mov    eax,0x6
c00049f1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c00049f6:	0f 85 10 01 00 00    	jne    c0004b0c <f_rename+0x198>
c00049fc:	b9 20 00 00 00       	mov    ecx,0x20
c0004a01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a09:	e8 6a d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a0e:	b9 30 00 00 00       	mov    ecx,0x30
c0004a13:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004a17:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a1b:	e8 58 d1 ff ff       	call   c0001b78 <mem_cpy>
c0004a20:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004a27:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a2b:	e8 9f ec ff ff       	call   c00036cf <follow_path>
c0004a30:	85 c0                	test   eax,eax
c0004a32:	75 20                	jne    c0004a54 <f_rename+0xe0>
c0004a34:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004a38:	b8 08 00 00 00       	mov    eax,0x8
c0004a3d:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004a41:	0f 85 c5 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a47:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004a4b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004a52:	eb 03                	jmp    c0004a57 <f_rename+0xe3>
c0004a54:	83 f8 04             	cmp    eax,0x4
c0004a57:	0f 85 af 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004a61:	e8 fd ec ff ff       	call   c0003763 <dir_register>
c0004a66:	85 c0                	test   eax,eax
c0004a68:	0f 85 9e 00 00 00    	jne    c0004b0c <f_rename+0x198>
c0004a6e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004a75:	b9 13 00 00 00       	mov    ecx,0x13
c0004a7a:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004a7d:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004a81:	e8 f2 d0 ff ff       	call   c0001b78 <mem_cpy>
c0004a86:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004a8a:	a8 10                	test   al,0x10
c0004a8c:	75 03                	jne    c0004a91 <f_rename+0x11d>
c0004a8e:	83 c8 20             	or     eax,0x20
c0004a91:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004a9c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004aa0:	74 54                	je     c0004af6 <f_rename+0x182>
c0004aa2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004aa6:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004aaa:	74 4a                	je     c0004af6 <f_rename+0x182>
c0004aac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab0:	89 da                	mov    edx,ebx
c0004ab2:	8a 07                	mov    al,BYTE PTR [edi]
c0004ab4:	e8 34 e4 ff ff       	call   c0002eed <ld_clust.isra.0>
c0004ab9:	89 c2                	mov    edx,eax
c0004abb:	89 f8                	mov    eax,edi
c0004abd:	e8 d0 d2 ff ff       	call   c0001d92 <clst2sect>
c0004ac2:	89 c2                	mov    edx,eax
c0004ac4:	b8 02 00 00 00       	mov    eax,0x2
c0004ac9:	85 d2                	test   edx,edx
c0004acb:	74 3f                	je     c0004b0c <f_rename+0x198>
c0004acd:	89 f8                	mov    eax,edi
c0004acf:	e8 9e d5 ff ff       	call   c0002072 <move_window>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 34                	jne    c0004b0c <f_rename+0x198>
c0004ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004adc:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ae0:	75 14                	jne    c0004af6 <f_rename+0x182>
c0004ae2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ae5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ae9:	e8 28 e4 ff ff       	call   c0002f16 <st_clust.isra.1>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004af6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afa:	e8 4f ea ff ff       	call   c000354e <dir_remove>
c0004aff:	85 c0                	test   eax,eax
c0004b01:	75 09                	jne    c0004b0c <f_rename+0x198>
c0004b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b07:	e8 a6 df ff ff       	call   c0002ab2 <sync_fs>
c0004b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b10:	83 ec 0c             	sub    esp,0xc
c0004b13:	56                   	push   esi
c0004b14:	e8 97 0d 00 00       	call   c00058b0 <ff_memfree>
c0004b19:	83 c4 10             	add    esp,0x10
c0004b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b20:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004b26:	5b                   	pop    ebx
c0004b27:	5e                   	pop    esi
c0004b28:	5f                   	pop    edi
c0004b29:	c3                   	ret    

c0004b2a <f_chmod>:
c0004b2a:	57                   	push   edi
c0004b2b:	b9 02 00 00 00       	mov    ecx,0x2
c0004b30:	56                   	push   esi
c0004b31:	53                   	push   ebx
c0004b32:	83 ec 50             	sub    esp,0x50
c0004b35:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004b39:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004b3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b41:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b45:	e8 7b d6 ff ff       	call   c00021c5 <mount_volume>
c0004b4a:	85 c0                	test   eax,eax
c0004b4c:	75 7e                	jne    c0004bcc <f_chmod+0xa2>
c0004b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b52:	83 ec 0c             	sub    esp,0xc
c0004b55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b59:	68 00 02 00 00       	push   0x200
c0004b5e:	e8 35 0d 00 00       	call   c0005898 <ff_memalloc>
c0004b63:	83 c4 10             	add    esp,0x10
c0004b66:	89 c6                	mov    esi,eax
c0004b68:	b8 11 00 00 00       	mov    eax,0x11
c0004b6d:	85 f6                	test   esi,esi
c0004b6f:	74 5b                	je     c0004bcc <f_chmod+0xa2>
c0004b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b75:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b79:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b80:	e8 4a eb ff ff       	call   c00036cf <follow_path>
c0004b85:	85 c0                	test   eax,eax
c0004b87:	75 2f                	jne    c0004bb8 <f_chmod+0x8e>
c0004b89:	b8 06 00 00 00       	mov    eax,0x6
c0004b8e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004b93:	75 23                	jne    c0004bb8 <f_chmod+0x8e>
c0004b95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b99:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004b9c:	21 fb                	and    ebx,edi
c0004b9e:	83 e3 27             	and    ebx,0x27
c0004ba1:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004ba4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004baf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb3:	e8 fa de ff ff       	call   c0002ab2 <sync_fs>
c0004bb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	56                   	push   esi
c0004bc0:	e8 eb 0c 00 00       	call   c00058b0 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcc:	83 c4 50             	add    esp,0x50
c0004bcf:	5b                   	pop    ebx
c0004bd0:	5e                   	pop    esi
c0004bd1:	5f                   	pop    edi
c0004bd2:	c3                   	ret    

c0004bd3 <f_utime>:
c0004bd3:	56                   	push   esi
c0004bd4:	b9 02 00 00 00       	mov    ecx,0x2
c0004bd9:	53                   	push   ebx
c0004bda:	83 ec 54             	sub    esp,0x54
c0004bdd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004be1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004be5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004be9:	e8 d7 d5 ff ff       	call   c00021c5 <mount_volume>
c0004bee:	85 c0                	test   eax,eax
c0004bf0:	0f 85 85 00 00 00    	jne    c0004c7b <f_utime+0xa8>
c0004bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bfa:	83 ec 0c             	sub    esp,0xc
c0004bfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c01:	68 00 02 00 00       	push   0x200
c0004c06:	e8 8d 0c 00 00       	call   c0005898 <ff_memalloc>
c0004c0b:	83 c4 10             	add    esp,0x10
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	b8 11 00 00 00       	mov    eax,0x11
c0004c15:	85 db                	test   ebx,ebx
c0004c17:	74 62                	je     c0004c7b <f_utime+0xa8>
c0004c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c21:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c28:	e8 a2 ea ff ff       	call   c00036cf <follow_path>
c0004c2d:	85 c0                	test   eax,eax
c0004c2f:	75 36                	jne    c0004c67 <f_utime+0x94>
c0004c31:	b8 06 00 00 00       	mov    eax,0x6
c0004c36:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004c3b:	75 2a                	jne    c0004c67 <f_utime+0x94>
c0004c3d:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004c41:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004c45:	c1 e2 10             	shl    edx,0x10
c0004c48:	09 c2                	or     edx,eax
c0004c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c4e:	83 c0 16             	add    eax,0x16
c0004c51:	e8 1f cf ff ff       	call   c0001b75 <st_dword>
c0004c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c62:	e8 4b de ff ff       	call   c0002ab2 <sync_fs>
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	83 ec 0c             	sub    esp,0xc
c0004c6e:	53                   	push   ebx
c0004c6f:	e8 3c 0c 00 00       	call   c00058b0 <ff_memfree>
c0004c74:	83 c4 10             	add    esp,0x10
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	83 c4 54             	add    esp,0x54
c0004c7e:	5b                   	pop    ebx
c0004c7f:	5e                   	pop    esi
c0004c80:	c3                   	ret    

c0004c81 <f_getlabel>:
c0004c81:	55                   	push   ebp
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	57                   	push   edi
c0004c85:	56                   	push   esi
c0004c86:	53                   	push   ebx
c0004c87:	83 ec 5c             	sub    esp,0x5c
c0004c8a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c8e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c92:	e8 2e d5 ff ff       	call   c00021c5 <mount_volume>
c0004c97:	89 c6                	mov    esi,eax
c0004c99:	85 c0                	test   eax,eax
c0004c9b:	0f 85 27 01 00 00    	jne    c0004dc8 <f_getlabel+0x147>
c0004ca1:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ca6:	0f 84 d1 00 00 00    	je     c0004d7d <f_getlabel+0xfc>
c0004cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cb6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004cbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc2:	e8 79 e3 ff ff       	call   c0003040 <dir_sdi>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 a2 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ccf:	ba 01 00 00 00       	mov    edx,0x1
c0004cd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cd8:	e8 54 e7 ff ff       	call   c0003431 <dir_read>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	0f 85 8c 00 00 00    	jne    c0004d71 <f_getlabel+0xf0>
c0004ce5:	31 db                	xor    ebx,ebx
c0004ce7:	31 c9                	xor    ecx,ecx
c0004ce9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ced:	8d 79 01             	lea    edi,[ecx+0x1]
c0004cf0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004cf5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004cfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cfe:	e8 ca ce ff ff       	call   c0001bcd <dbc_1st>
c0004d03:	85 c0                	test   eax,eax
c0004d05:	74 16                	je     c0004d1d <f_getlabel+0x9c>
c0004d07:	83 ff 0b             	cmp    edi,0xb
c0004d0a:	74 11                	je     c0004d1d <f_getlabel+0x9c>
c0004d0c:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004d11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d15:	8d 79 02             	lea    edi,[ecx+0x2]
c0004d18:	c1 e0 08             	shl    eax,0x8
c0004d1b:	09 c2                	or     edx,eax
c0004d1d:	0f b7 d2             	movzx  edx,dx
c0004d20:	50                   	push   eax
c0004d21:	50                   	push   eax
c0004d22:	68 b5 01 00 00       	push   0x1b5
c0004d27:	52                   	push   edx
c0004d28:	e8 3b 0c 00 00       	call   c0005968 <ff_oem2uni>
c0004d2d:	83 c4 10             	add    esp,0x10
c0004d30:	66 85 c0             	test   ax,ax
c0004d33:	74 25                	je     c0004d5a <f_getlabel+0xd9>
c0004d35:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004d39:	0f b7 c0             	movzx  eax,ax
c0004d3c:	01 da                	add    edx,ebx
c0004d3e:	b9 04 00 00 00       	mov    ecx,0x4
c0004d43:	e8 51 cf ff ff       	call   c0001c99 <put_utf>
c0004d48:	84 c0                	test   al,al
c0004d4a:	74 0e                	je     c0004d5a <f_getlabel+0xd9>
c0004d4c:	0f b6 c0             	movzx  eax,al
c0004d4f:	01 c3                	add    ebx,eax
c0004d51:	83 ff 0b             	cmp    edi,0xb
c0004d54:	74 06                	je     c0004d5c <f_getlabel+0xdb>
c0004d56:	89 f9                	mov    ecx,edi
c0004d58:	eb 8f                	jmp    c0004ce9 <f_getlabel+0x68>
c0004d5a:	31 db                	xor    ebx,ebx
c0004d5c:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004d60:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004d63:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004d67:	74 14                	je     c0004d7d <f_getlabel+0xfc>
c0004d69:	4b                   	dec    ebx
c0004d6a:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004d6d:	74 f1                	je     c0004d60 <f_getlabel+0xdf>
c0004d6f:	eb 0c                	jmp    c0004d7d <f_getlabel+0xfc>
c0004d71:	83 f8 04             	cmp    eax,0x4
c0004d74:	75 50                	jne    c0004dc6 <f_getlabel+0x145>
c0004d76:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004d82:	74 44                	je     c0004dc8 <f_getlabel+0x147>
c0004d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004d8b:	e8 e2 d2 ff ff       	call   c0002072 <move_window>
c0004d90:	89 c6                	mov    esi,eax
c0004d92:	85 c0                	test   eax,eax
c0004d94:	75 32                	jne    c0004dc8 <f_getlabel+0x147>
c0004d96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004d9a:	b8 43 00 00 00       	mov    eax,0x43
c0004d9f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004da1:	80 f9 03             	cmp    cl,0x3
c0004da4:	74 0f                	je     c0004db5 <f_getlabel+0x134>
c0004da6:	31 c0                	xor    eax,eax
c0004da8:	80 f9 04             	cmp    cl,0x4
c0004dab:	0f 94 c0             	sete   al
c0004dae:	48                   	dec    eax
c0004daf:	83 e0 c3             	and    eax,0xffffffc3
c0004db2:	83 c0 64             	add    eax,0x64
c0004db5:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004db9:	e8 9b cd ff ff       	call   c0001b59 <ld_dword>
c0004dbe:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004dc2:	89 07                	mov    DWORD PTR [edi],eax
c0004dc4:	eb 02                	jmp    c0004dc8 <f_getlabel+0x147>
c0004dc6:	89 c6                	mov    esi,eax
c0004dc8:	83 c4 5c             	add    esp,0x5c
c0004dcb:	89 f0                	mov    eax,esi
c0004dcd:	5b                   	pop    ebx
c0004dce:	5e                   	pop    esi
c0004dcf:	5f                   	pop    edi
c0004dd0:	5d                   	pop    ebp
c0004dd1:	c3                   	ret    

c0004dd2 <f_setlabel>:
c0004dd2:	56                   	push   esi
c0004dd3:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd8:	53                   	push   ebx
c0004dd9:	83 ec 54             	sub    esp,0x54
c0004ddc:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004de0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004de4:	e8 dc d3 ff ff       	call   c00021c5 <mount_volume>
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	85 c0                	test   eax,eax
c0004ded:	0f 85 67 01 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0004df8:	ba 20 00 00 00       	mov    edx,0x20
c0004dfd:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004e01:	31 db                	xor    ebx,ebx
c0004e03:	e8 85 cd ff ff       	call   c0001b8d <mem_set>
c0004e08:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e0f:	76 5b                	jbe    c0004e6c <f_setlabel+0x9a>
c0004e11:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e15:	e8 b9 cd ff ff       	call   c0001bd3 <tchar2uni>
c0004e1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0004e1f:	76 0a                	jbe    c0004e2b <f_setlabel+0x59>
c0004e21:	be 06 00 00 00       	mov    esi,0x6
c0004e26:	e9 2f 01 00 00       	jmp    c0004f5a <f_setlabel+0x188>
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	50                   	push   eax
c0004e2f:	e8 ac 0b 00 00       	call   c00059e0 <ff_wtoupper>
c0004e34:	5a                   	pop    edx
c0004e35:	59                   	pop    ecx
c0004e36:	68 b5 01 00 00       	push   0x1b5
c0004e3b:	50                   	push   eax
c0004e3c:	e8 87 0a 00 00       	call   c00058c8 <ff_uni2oem>
c0004e41:	83 c4 10             	add    esp,0x10
c0004e44:	89 c6                	mov    esi,eax
c0004e46:	66 85 c0             	test   ax,ax
c0004e49:	74 d6                	je     c0004e21 <f_setlabel+0x4f>
c0004e4b:	0f b7 d0             	movzx  edx,ax
c0004e4e:	b8 f0 c4 01 c0       	mov    eax,0xc001c4f0
c0004e53:	e8 63 cd ff ff       	call   c0001bbb <chk_chr>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 c5                	jne    c0004e21 <f_setlabel+0x4f>
c0004e5c:	66 81 fe ff 00       	cmp    si,0xff
c0004e61:	0f 87 c9 00 00 00    	ja     c0004f30 <f_setlabel+0x15e>
c0004e67:	e9 e4 00 00 00       	jmp    c0004f50 <f_setlabel+0x17e>
c0004e6c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0004e71:	74 ae                	je     c0004e21 <f_setlabel+0x4f>
c0004e73:	85 db                	test   ebx,ebx
c0004e75:	74 0e                	je     c0004e85 <f_setlabel+0xb3>
c0004e77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0004e7a:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0004e7f:	75 04                	jne    c0004e85 <f_setlabel+0xb3>
c0004e81:	89 c3                	mov    ebx,eax
c0004e83:	eb ee                	jmp    c0004e73 <f_setlabel+0xa1>
c0004e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004e89:	31 d2                	xor    edx,edx
c0004e8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e8f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 a0 e1 ff ff       	call   c0003040 <dir_sdi>
c0004ea0:	89 c6                	mov    esi,eax
c0004ea2:	85 c0                	test   eax,eax
c0004ea4:	0f 85 b0 00 00 00    	jne    c0004f5a <f_setlabel+0x188>
c0004eaa:	ba 01 00 00 00       	mov    edx,0x1
c0004eaf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb3:	e8 79 e5 ff ff       	call   c0003431 <dir_read>
c0004eb8:	85 c0                	test   eax,eax
c0004eba:	75 18                	jne    c0004ed4 <f_setlabel+0x102>
c0004ebc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ec0:	85 db                	test   ebx,ebx
c0004ec2:	74 0b                	je     c0004ecf <f_setlabel+0xfd>
c0004ec4:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ec9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004ecd:	eb 47                	jmp    c0004f16 <f_setlabel+0x144>
c0004ecf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0004ed2:	eb 47                	jmp    c0004f1b <f_setlabel+0x149>
c0004ed4:	83 f8 04             	cmp    eax,0x4
c0004ed7:	75 53                	jne    c0004f2c <f_setlabel+0x15a>
c0004ed9:	85 db                	test   ebx,ebx
c0004edb:	74 7d                	je     c0004f5a <f_setlabel+0x188>
c0004edd:	ba 01 00 00 00       	mov    edx,0x1
c0004ee2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee6:	e8 e5 e4 ff ff       	call   c00033d0 <dir_alloc>
c0004eeb:	89 c6                	mov    esi,eax
c0004eed:	85 c0                	test   eax,eax
c0004eef:	75 69                	jne    c0004f5a <f_setlabel+0x188>
c0004ef1:	b9 20 00 00 00       	mov    ecx,0x20
c0004ef6:	31 d2                	xor    edx,edx
c0004ef8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004efc:	e8 8c cc ff ff       	call   c0001b8d <mem_set>
c0004f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f05:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f0a:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0004f0e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0004f12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f16:	e8 5d cc ff ff       	call   c0001b78 <mem_cpy>
c0004f1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004f27:	e8 86 db ff ff       	call   c0002ab2 <sync_fs>
c0004f2c:	89 c6                	mov    esi,eax
c0004f2e:	eb 2a                	jmp    c0004f5a <f_setlabel+0x188>
c0004f30:	83 fb 09             	cmp    ebx,0x9
c0004f33:	0f 87 e8 fe ff ff    	ja     c0004e21 <f_setlabel+0x4f>
c0004f39:	89 f0                	mov    eax,esi
c0004f3b:	66 c1 e8 08          	shr    ax,0x8
c0004f3f:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f43:	43                   	inc    ebx
c0004f44:	89 f0                	mov    eax,esi
c0004f46:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0004f4a:	43                   	inc    ebx
c0004f4b:	e9 b8 fe ff ff       	jmp    c0004e08 <f_setlabel+0x36>
c0004f50:	83 fb 0a             	cmp    ebx,0xa
c0004f53:	76 ef                	jbe    c0004f44 <f_setlabel+0x172>
c0004f55:	e9 c7 fe ff ff       	jmp    c0004e21 <f_setlabel+0x4f>
c0004f5a:	89 f0                	mov    eax,esi
c0004f5c:	83 c4 54             	add    esp,0x54
c0004f5f:	5b                   	pop    ebx
c0004f60:	5e                   	pop    esi
c0004f61:	c3                   	ret    

c0004f62 <f_expand>:
c0004f62:	55                   	push   ebp
c0004f63:	57                   	push   edi
c0004f64:	56                   	push   esi
c0004f65:	53                   	push   ebx
c0004f66:	83 ec 2c             	sub    esp,0x2c
c0004f69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f75:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f79:	89 d8                	mov    eax,ebx
c0004f7b:	e8 48 d0 ff ff       	call   c0001fc8 <validate>
c0004f80:	89 c6                	mov    esi,eax
c0004f82:	85 c0                	test   eax,eax
c0004f84:	0f 85 2e 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f8a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004f8e:	85 f6                	test   esi,esi
c0004f90:	0f 85 22 01 00 00    	jne    c00050b8 <f_expand+0x156>
c0004f96:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0004f9b:	75 0a                	jne    c0004fa7 <f_expand+0x45>
c0004f9d:	be 07 00 00 00       	mov    esi,0x7
c0004fa2:	e9 11 01 00 00       	jmp    c00050b8 <f_expand+0x156>
c0004fa7:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0004fab:	75 f0                	jne    c0004f9d <f_expand+0x3b>
c0004fad:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004fb1:	74 ea                	je     c0004f9d <f_expand+0x3b>
c0004fb3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004fb7:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0004fbb:	c1 e1 09             	shl    ecx,0x9
c0004fbe:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004fc1:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0004fc5:	0f 95 c0             	setne  al
c0004fc8:	31 d2                	xor    edx,edx
c0004fca:	0f b6 c0             	movzx  eax,al
c0004fcd:	89 c7                	mov    edi,eax
c0004fcf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004fd3:	f7 f1                	div    ecx
c0004fd5:	01 f8                	add    eax,edi
c0004fd7:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0004fda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004fde:	83 ff 01             	cmp    edi,0x1
c0004fe1:	76 05                	jbe    c0004fe8 <f_expand+0x86>
c0004fe3:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0004fe6:	77 05                	ja     c0004fed <f_expand+0x8b>
c0004fe8:	bf 02 00 00 00       	mov    edi,0x2
c0004fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0004ff0:	89 fd                	mov    ebp,edi
c0004ff2:	31 c9                	xor    ecx,ecx
c0004ff4:	89 ea                	mov    edx,ebp
c0004ff6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004ffa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004ffc:	45                   	inc    ebp
c0004ffd:	e8 3c df ff ff       	call   c0002f3e <get_fat.isra.2>
c0005002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000500a:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000500d:	77 05                	ja     c0005014 <f_expand+0xb2>
c000500f:	bd 02 00 00 00       	mov    ebp,0x2
c0005014:	83 f8 01             	cmp    eax,0x1
c0005017:	74 20                	je     c0005039 <f_expand+0xd7>
c0005019:	83 f8 ff             	cmp    eax,0xffffffff
c000501c:	74 22                	je     c0005040 <f_expand+0xde>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 09                	jne    c000502b <f_expand+0xc9>
c0005022:	41                   	inc    ecx
c0005023:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005027:	75 07                	jne    c0005030 <f_expand+0xce>
c0005029:	eb 1c                	jmp    c0005047 <f_expand+0xe5>
c000502b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000502e:	31 c9                	xor    ecx,ecx
c0005030:	39 fd                	cmp    ebp,edi
c0005032:	75 c0                	jne    c0004ff4 <f_expand+0x92>
c0005034:	e9 64 ff ff ff       	jmp    c0004f9d <f_expand+0x3b>
c0005039:	be 02 00 00 00       	mov    esi,0x2
c000503e:	eb 78                	jmp    c00050b8 <f_expand+0x156>
c0005040:	be 01 00 00 00       	mov    esi,0x1
c0005045:	eb 71                	jmp    c00050b8 <f_expand+0x156>
c0005047:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000504c:	74 2b                	je     c0005079 <f_expand+0x117>
c000504e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005051:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005055:	85 ed                	test   ebp,ebp
c0005057:	74 24                	je     c000507d <f_expand+0x11b>
c0005059:	83 c9 ff             	or     ecx,0xffffffff
c000505c:	83 fd 01             	cmp    ebp,0x1
c000505f:	74 03                	je     c0005064 <f_expand+0x102>
c0005061:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005064:	89 fa                	mov    edx,edi
c0005066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506a:	e8 59 d4 ff ff       	call   c00024c8 <put_fat>
c000506f:	85 c0                	test   eax,eax
c0005071:	75 43                	jne    c00050b6 <f_expand+0x154>
c0005073:	89 f8                	mov    eax,edi
c0005075:	4d                   	dec    ebp
c0005076:	47                   	inc    edi
c0005077:	eb dc                	jmp    c0005055 <f_expand+0xf3>
c0005079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000507c:	48                   	dec    eax
c000507d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005081:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005086:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005089:	74 2d                	je     c00050b8 <f_expand+0x156>
c000508b:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000508f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005092:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005095:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005099:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000509c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000509f:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00050a2:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00050a5:	39 c8                	cmp    eax,ecx
c00050a7:	77 0f                	ja     c00050b8 <f_expand+0x156>
c00050a9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00050ad:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00050b1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050b4:	eb 02                	jmp    c00050b8 <f_expand+0x156>
c00050b6:	89 c6                	mov    esi,eax
c00050b8:	83 c4 2c             	add    esp,0x2c
c00050bb:	89 f0                	mov    eax,esi
c00050bd:	5b                   	pop    ebx
c00050be:	5e                   	pop    esi
c00050bf:	5f                   	pop    edi
c00050c0:	5d                   	pop    ebp
c00050c1:	c3                   	ret    

c00050c2 <f_mkfs>:
c00050c2:	55                   	push   ebp
c00050c3:	57                   	push   edi
c00050c4:	bf 0b 00 00 00       	mov    edi,0xb
c00050c9:	56                   	push   esi
c00050ca:	53                   	push   ebx
c00050cb:	83 ec 4c             	sub    esp,0x4c
c00050ce:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00050d2:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00050d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050da:	e8 9c ce ff ff       	call   c0001f7b <get_ldnumber>
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 88 a6 07 00 00    	js     c000588d <f_mkfs+0x7cb>
c00050e7:	8b 14 85 c0 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0c40]
c00050ee:	85 d2                	test   edx,edx
c00050f0:	74 03                	je     c00050f5 <f_mkfs+0x33>
c00050f2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00050f5:	85 db                	test   ebx,ebx
c00050f7:	75 05                	jne    c00050fe <f_mkfs+0x3c>
c00050f9:	bb e0 c4 01 c0       	mov    ebx,0xc001c4e0
c00050fe:	83 ec 0c             	sub    esp,0xc
c0005101:	0f b6 c0             	movzx  eax,al
c0005104:	bf 03 00 00 00       	mov    edi,0x3
c0005109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000510d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005111:	e8 e8 c9 ff ff       	call   c0001afe <disk_initialize>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	a8 01                	test   al,0x1
c000511b:	0f 85 6c 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c0005121:	bf 0a 00 00 00       	mov    edi,0xa
c0005126:	a8 04                	test   al,0x4
c0005128:	0f 85 5f 07 00 00    	jne    c000588d <f_mkfs+0x7cb>
c000512e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005135:	85 c0                	test   eax,eax
c0005137:	75 20                	jne    c0005159 <f_mkfs+0x97>
c0005139:	51                   	push   ecx
c000513a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000513e:	50                   	push   eax
c000513f:	6a 03                	push   0x3
c0005141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005145:	e8 e3 c9 ff ff       	call   c0001b2d <disk_ioctl>
c000514a:	83 c4 10             	add    esp,0x10
c000514d:	85 c0                	test   eax,eax
c000514f:	74 08                	je     c0005159 <f_mkfs+0x97>
c0005151:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005159:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000515d:	8d 42 ff             	lea    eax,[edx-0x1]
c0005160:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005165:	77 04                	ja     c000516b <f_mkfs+0xa9>
c0005167:	85 c2                	test   edx,eax
c0005169:	74 08                	je     c0005173 <f_mkfs+0xb1>
c000516b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005173:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005176:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000517a:	48                   	dec    eax
c000517b:	3c 01                	cmp    al,0x1
c000517d:	76 05                	jbe    c0005184 <f_mkfs+0xc2>
c000517f:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518b:	48                   	dec    eax
c000518c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005191:	77 07                	ja     c000519a <f_mkfs+0xd8>
c0005193:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005198:	74 08                	je     c00051a2 <f_mkfs+0xe0>
c000519a:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00051a2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00051a5:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00051ab:	77 07                	ja     c00051b4 <f_mkfs+0xf2>
c00051ad:	8d 47 ff             	lea    eax,[edi-0x1]
c00051b0:	85 f8                	test   eax,edi
c00051b2:	74 02                	je     c00051b6 <f_mkfs+0xf4>
c00051b4:	31 ff                	xor    edi,edi
c00051b6:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00051be:	77 0a                	ja     c00051ca <f_mkfs+0x108>
c00051c0:	bf 11 00 00 00       	mov    edi,0x11
c00051c5:	e9 c3 06 00 00       	jmp    c000588d <f_mkfs+0x7cb>
c00051ca:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00051cc:	89 ee                	mov    esi,ebp
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	75 1b                	jne    c00051ed <f_mkfs+0x12b>
c00051d2:	83 ec 0c             	sub    esp,0xc
c00051d5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00051d9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00051de:	50                   	push   eax
c00051df:	e8 b4 06 00 00       	call   c0005898 <ff_memalloc>
c00051e4:	83 c4 10             	add    esp,0x10
c00051e7:	89 c6                	mov    esi,eax
c00051e9:	85 c0                	test   eax,eax
c00051eb:	74 d3                	je     c00051c0 <f_mkfs+0xfe>
c00051ed:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00051f5:	52                   	push   edx
c00051f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00051fa:	50                   	push   eax
c00051fb:	6a 01                	push   0x1
c00051fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005201:	e8 27 c9 ff ff       	call   c0001b2d <disk_ioctl>
c0005206:	83 c4 10             	add    esp,0x10
c0005209:	85 c0                	test   eax,eax
c000520b:	0f 85 25 06 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005211:	88 d8                	mov    al,bl
c0005213:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000521b:	24 08                	and    al,0x8
c000521d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005221:	75 18                	jne    c000523b <f_mkfs+0x179>
c0005223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005227:	83 f8 3f             	cmp    eax,0x3f
c000522a:	76 0f                	jbe    c000523b <f_mkfs+0x179>
c000522c:	83 e8 3f             	sub    eax,0x3f
c000522f:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c0005237:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000523b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000523f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005243:	83 f8 7f             	cmp    eax,0x7f
c0005246:	0f 86 52 02 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c000524c:	b9 80 00 00 00       	mov    ecx,0x80
c0005251:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005257:	77 05                	ja     c000525e <f_mkfs+0x19c>
c0005259:	89 f9                	mov    ecx,edi
c000525b:	c1 e9 09             	shr    ecx,0x9
c000525e:	88 d8                	mov    al,bl
c0005260:	83 e0 01             	and    eax,0x1
c0005263:	80 e3 02             	and    bl,0x2
c0005266:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000526a:	74 0a                	je     c0005276 <f_mkfs+0x1b4>
c000526c:	84 c0                	test   al,al
c000526e:	0f 84 4c 01 00 00    	je     c00053c0 <f_mkfs+0x2fe>
c0005274:	eb 38                	jmp    c00052ae <f_mkfs+0x1ec>
c0005276:	bf 13 00 00 00       	mov    edi,0x13
c000527b:	84 c0                	test   al,al
c000527d:	75 2f                	jne    c00052ae <f_mkfs+0x1ec>
c000527f:	e9 c9 05 00 00       	jmp    c000584d <f_mkfs+0x78b>
c0005284:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005289:	0f 85 08 02 00 00    	jne    c0005497 <f_mkfs+0x3d5>
c000528f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005294:	0f 86 e1 01 00 00    	jbe    c000547b <f_mkfs+0x3b9>
c000529a:	85 c9                	test   ecx,ecx
c000529c:	0f 85 bd 05 00 00    	jne    c000585f <f_mkfs+0x79d>
c00052a2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00052a5:	83 f9 40             	cmp    ecx,0x40
c00052a8:	0f 87 c1 05 00 00    	ja     c000586f <f_mkfs+0x7ad>
c00052ae:	89 cf                	mov    edi,ecx
c00052b0:	85 c9                	test   ecx,ecx
c00052b2:	75 1d                	jne    c00052d1 <f_mkfs+0x20f>
c00052b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00052b8:	ba c0 c4 01 c0       	mov    edx,0xc001c4c0
c00052bd:	c1 eb 0c             	shr    ebx,0xc
c00052c0:	bf 01 00 00 00       	mov    edi,0x1
c00052c5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00052c8:	66 85 c0             	test   ax,ax
c00052cb:	0f 85 5f 01 00 00    	jne    c0005430 <f_mkfs+0x36e>
c00052d1:	31 d2                	xor    edx,edx
c00052d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00052d7:	f7 f7                	div    edi
c00052d9:	3d f5 0f 00 00       	cmp    eax,0xff5
c00052de:	0f 86 5e 01 00 00    	jbe    c0005442 <f_mkfs+0x380>
c00052e4:	83 c0 02             	add    eax,0x2
c00052e7:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00052ec:	01 c0                	add    eax,eax
c00052ee:	05 ff 01 00 00       	add    eax,0x1ff
c00052f3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00052fb:	c1 e8 09             	shr    eax,0x9
c00052fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005306:	c1 e0 05             	shl    eax,0x5
c0005309:	c1 e8 09             	shr    eax,0x9
c000530c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005310:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531d:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005321:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005329:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c000532e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005332:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000533a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000533e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005342:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005346:	f7 d8                	neg    eax
c0005348:	21 c3                	and    ebx,eax
c000534a:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c000534e:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005353:	0f 85 fc 00 00 00    	jne    c0005455 <f_mkfs+0x393>
c0005359:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c000535d:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005361:	89 f8                	mov    eax,edi
c0005363:	c1 e0 04             	shl    eax,0x4
c0005366:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000536a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000536e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005372:	0f 82 26 01 00 00    	jb     c000549e <f_mkfs+0x3dc>
c0005378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000537c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005380:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005384:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c0005389:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000538d:	29 d0                	sub    eax,edx
c000538f:	31 d2                	xor    edx,edx
c0005391:	f7 f7                	div    edi
c0005393:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 e4 fe ff ff    	jne    c0005284 <f_mkfs+0x1c2>
c00053a0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00053a5:	0f 87 02 01 00 00    	ja     c00054ad <f_mkfs+0x3eb>
c00053ab:	85 c9                	test   ecx,ecx
c00053ad:	0f 85 eb 00 00 00    	jne    c000549e <f_mkfs+0x3dc>
c00053b3:	83 ff 01             	cmp    edi,0x1
c00053b6:	0f 86 e2 00 00 00    	jbe    c000549e <f_mkfs+0x3dc>
c00053bc:	89 f9                	mov    ecx,edi
c00053be:	d1 e9                	shr    ecx,1
c00053c0:	89 cb                	mov    ebx,ecx
c00053c2:	85 c9                	test   ecx,ecx
c00053c4:	75 26                	jne    c00053ec <f_mkfs+0x32a>
c00053c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00053ca:	ba d0 c4 01 c0       	mov    edx,0xc001c4d0
c00053cf:	c1 eb 11             	shr    ebx,0x11
c00053d2:	b9 01 00 00 00       	mov    ecx,0x1
c00053d7:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00053da:	66 85 c0             	test   ax,ax
c00053dd:	74 0b                	je     c00053ea <f_mkfs+0x328>
c00053df:	83 c2 02             	add    edx,0x2
c00053e2:	39 d8                	cmp    eax,ebx
c00053e4:	77 04                	ja     c00053ea <f_mkfs+0x328>
c00053e6:	01 c9                	add    ecx,ecx
c00053e8:	eb ed                	jmp    c00053d7 <f_mkfs+0x315>
c00053ea:	31 db                	xor    ebx,ebx
c00053ec:	31 d2                	xor    edx,edx
c00053ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00053f2:	f7 f1                	div    ecx
c00053f4:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00053fb:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005400:	c1 ea 09             	shr    edx,0x9
c0005403:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000540c:	0f 87 8c 00 00 00    	ja     c000549e <f_mkfs+0x3dc>
c0005412:	89 cf                	mov    edi,ecx
c0005414:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000541c:	89 d9                	mov    ecx,ebx
c000541e:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005426:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000542b:	e9 e0 fe ff ff       	jmp    c0005310 <f_mkfs+0x24e>
c0005430:	83 c2 02             	add    edx,0x2
c0005433:	39 d8                	cmp    eax,ebx
c0005435:	0f 87 96 fe ff ff    	ja     c00052d1 <f_mkfs+0x20f>
c000543b:	01 ff                	add    edi,edi
c000543d:	e9 83 fe ff ff       	jmp    c00052c5 <f_mkfs+0x203>
c0005442:	8d 04 40             	lea    eax,[eax+eax*2]
c0005445:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000544a:	40                   	inc    eax
c000544b:	d1 e8                	shr    eax,1
c000544d:	83 c0 03             	add    eax,0x3
c0005450:	e9 99 fe ff ff       	jmp    c00052ee <f_mkfs+0x22c>
c0005455:	31 d2                	xor    edx,edx
c0005457:	89 d8                	mov    eax,ebx
c0005459:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000545d:	85 d2                	test   edx,edx
c000545f:	74 09                	je     c000546a <f_mkfs+0x3a8>
c0005461:	4b                   	dec    ebx
c0005462:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005466:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000546a:	89 d8                	mov    eax,ebx
c000546c:	31 d2                	xor    edx,edx
c000546e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005472:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005476:	e9 e6 fe ff ff       	jmp    c0005361 <f_mkfs+0x29f>
c000547b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005480:	77 2b                	ja     c00054ad <f_mkfs+0x3eb>
c0005482:	85 c9                	test   ecx,ecx
c0005484:	75 18                	jne    c000549e <f_mkfs+0x3dc>
c0005486:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005489:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000548f:	0f 86 19 fe ff ff    	jbe    c00052ae <f_mkfs+0x1ec>
c0005495:	eb 07                	jmp    c000549e <f_mkfs+0x3dc>
c0005497:	3d f5 0f 00 00       	cmp    eax,0xff5
c000549c:	76 0a                	jbe    c00054a8 <f_mkfs+0x3e6>
c000549e:	bf 0e 00 00 00       	mov    edi,0xe
c00054a3:	e9 a5 03 00 00       	jmp    c000584d <f_mkfs+0x78b>
c00054a8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054ad:	31 d2                	xor    edx,edx
c00054af:	b9 00 02 00 00       	mov    ecx,0x200
c00054b4:	89 f0                	mov    eax,esi
c00054b6:	e8 d2 c6 ff ff       	call   c0001b8d <mem_set>
c00054bb:	b9 0b 00 00 00       	mov    ecx,0xb
c00054c0:	ba 72 c4 01 c0       	mov    edx,0xc001c472
c00054c5:	89 f0                	mov    eax,esi
c00054c7:	e8 ac c6 ff ff       	call   c0001b78 <mem_cpy>
c00054cc:	8d 46 0b             	lea    eax,[esi+0xb]
c00054cf:	ba 00 02 00 00       	mov    edx,0x200
c00054d4:	e8 98 c6 ff ff       	call   c0001b71 <st_word>
c00054d9:	89 f8                	mov    eax,edi
c00054db:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00054e0:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00054e3:	8d 46 0e             	lea    eax,[esi+0xe]
c00054e6:	e8 86 c6 ff ff       	call   c0001b71 <st_word>
c00054eb:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00054ef:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00054f4:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00054f7:	75 08                	jne    c0005501 <f_mkfs+0x43f>
c00054f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005501:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005505:	8d 46 11             	lea    eax,[esi+0x11]
c0005508:	e8 64 c6 ff ff       	call   c0001b71 <st_word>
c000550d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005511:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005517:	77 0a                	ja     c0005523 <f_mkfs+0x461>
c0005519:	8d 46 13             	lea    eax,[esi+0x13]
c000551c:	e8 50 c6 ff ff       	call   c0001b71 <st_word>
c0005521:	eb 08                	jmp    c000552b <f_mkfs+0x469>
c0005523:	8d 46 20             	lea    eax,[esi+0x20]
c0005526:	e8 4a c6 ff ff       	call   c0001b75 <st_dword>
c000552b:	8d 46 18             	lea    eax,[esi+0x18]
c000552e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005533:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005537:	e8 35 c6 ff ff       	call   c0001b71 <st_word>
c000553c:	8d 46 1a             	lea    eax,[esi+0x1a]
c000553f:	ba ff 00 00 00       	mov    edx,0xff
c0005544:	e8 28 c6 ff ff       	call   c0001b71 <st_word>
c0005549:	8d 46 1c             	lea    eax,[esi+0x1c]
c000554c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005550:	e8 20 c6 ff ff       	call   c0001b75 <st_dword>
c0005555:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555a:	75 57                	jne    c00055b3 <f_mkfs+0x4f1>
c000555c:	8d 46 43             	lea    eax,[esi+0x43]
c000555f:	ba 00 00 21 50       	mov    edx,0x50210000
c0005564:	e8 0c c6 ff ff       	call   c0001b75 <st_dword>
c0005569:	8d 46 24             	lea    eax,[esi+0x24]
c000556c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005570:	e8 00 c6 ff ff       	call   c0001b75 <st_dword>
c0005575:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005578:	ba 02 00 00 00       	mov    edx,0x2
c000557d:	e8 f3 c5 ff ff       	call   c0001b75 <st_dword>
c0005582:	8d 46 30             	lea    eax,[esi+0x30]
c0005585:	ba 01 00 00 00       	mov    edx,0x1
c000558a:	e8 e2 c5 ff ff       	call   c0001b71 <st_word>
c000558f:	8d 46 32             	lea    eax,[esi+0x32]
c0005592:	ba 06 00 00 00       	mov    edx,0x6
c0005597:	e8 d5 c5 ff ff       	call   c0001b71 <st_word>
c000559c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c00055a0:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c00055a4:	8d 46 47             	lea    eax,[esi+0x47]
c00055a7:	b9 13 00 00 00       	mov    ecx,0x13
c00055ac:	ba 7e c4 01 c0       	mov    edx,0xc001c47e
c00055b1:	eb 2f                	jmp    c00055e2 <f_mkfs+0x520>
c00055b3:	8d 46 27             	lea    eax,[esi+0x27]
c00055b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00055bb:	e8 b5 c5 ff ff       	call   c0001b75 <st_dword>
c00055c0:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00055c5:	8d 46 16             	lea    eax,[esi+0x16]
c00055c8:	e8 a4 c5 ff ff       	call   c0001b71 <st_word>
c00055cd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00055d1:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00055d5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00055d8:	b9 13 00 00 00       	mov    ecx,0x13
c00055dd:	ba 92 c4 01 c0       	mov    edx,0xc001c492
c00055e2:	e8 91 c5 ff ff       	call   c0001b78 <mem_cpy>
c00055e7:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00055ed:	ba 55 aa 00 00       	mov    edx,0xaa55
c00055f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055f6:	e8 76 c5 ff ff       	call   c0001b71 <st_word>
c00055fb:	6a 01                	push   0x1
c00055fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005601:	56                   	push   esi
c0005602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005606:	e8 0c c5 ff ff       	call   c0001b17 <disk_write>
c000560b:	83 c4 10             	add    esp,0x10
c000560e:	85 c0                	test   eax,eax
c0005610:	0f 85 20 02 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005616:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000561b:	0f 85 98 00 00 00    	jne    c00056b9 <f_mkfs+0x5f7>
c0005621:	6a 01                	push   0x1
c0005623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005627:	83 c0 06             	add    eax,0x6
c000562a:	50                   	push   eax
c000562b:	56                   	push   esi
c000562c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005630:	e8 e2 c4 ff ff       	call   c0001b17 <disk_write>
c0005635:	b9 00 02 00 00       	mov    ecx,0x200
c000563a:	31 d2                	xor    edx,edx
c000563c:	89 f0                	mov    eax,esi
c000563e:	e8 4a c5 ff ff       	call   c0001b8d <mem_set>
c0005643:	ba 52 52 61 41       	mov    edx,0x41615252
c0005648:	89 f0                	mov    eax,esi
c000564a:	e8 26 c5 ff ff       	call   c0001b75 <st_dword>
c000564f:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005655:	ba 72 72 41 61       	mov    edx,0x61417272
c000565a:	e8 16 c5 ff ff       	call   c0001b75 <st_dword>
c000565f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005662:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c0005668:	e8 08 c5 ff ff       	call   c0001b75 <st_dword>
c000566d:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005673:	ba 02 00 00 00       	mov    edx,0x2
c0005678:	e8 f8 c4 ff ff       	call   c0001b75 <st_dword>
c000567d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005682:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c0005688:	e8 e4 c4 ff ff       	call   c0001b71 <st_word>
c000568d:	6a 01                	push   0x1
c000568f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005693:	83 c0 07             	add    eax,0x7
c0005696:	50                   	push   eax
c0005697:	56                   	push   esi
c0005698:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000569c:	e8 76 c4 ff ff       	call   c0001b17 <disk_write>
c00056a1:	83 c4 20             	add    esp,0x20
c00056a4:	6a 01                	push   0x1
c00056a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00056aa:	40                   	inc    eax
c00056ab:	50                   	push   eax
c00056ac:	56                   	push   esi
c00056ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00056b1:	e8 61 c4 ff ff       	call   c0001b17 <disk_write>
c00056b6:	83 c4 10             	add    esp,0x10
c00056b9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00056bd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00056c1:	c1 e8 09             	shr    eax,0x9
c00056c4:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00056ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056ce:	31 d2                	xor    edx,edx
c00056d0:	31 db                	xor    ebx,ebx
c00056d2:	89 f0                	mov    eax,esi
c00056d4:	e8 b4 c4 ff ff       	call   c0001b8d <mem_set>
c00056d9:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00056de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00056e6:	0f 94 c3             	sete   bl
c00056e9:	4b                   	dec    ebx
c00056ea:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00056f0:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00056f6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056fb:	75 21                	jne    c000571e <f_mkfs+0x65c>
c00056fd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005702:	89 f0                	mov    eax,esi
c0005704:	e8 6c c4 ff ff       	call   c0001b75 <st_dword>
c0005709:	8d 46 04             	lea    eax,[esi+0x4]
c000570c:	83 ca ff             	or     edx,0xffffffff
c000570f:	e8 61 c4 ff ff       	call   c0001b75 <st_dword>
c0005714:	8d 46 08             	lea    eax,[esi+0x8]
c0005717:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000571c:	eb 04                	jmp    c0005722 <f_mkfs+0x660>
c000571e:	89 da                	mov    edx,ebx
c0005720:	89 f0                	mov    eax,esi
c0005722:	e8 4e c4 ff ff       	call   c0001b75 <st_dword>
c0005727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000572f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005737:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573b:	76 08                	jbe    c0005745 <f_mkfs+0x683>
c000573d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005745:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000574d:	56                   	push   esi
c000574e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005752:	e8 c0 c3 ff ff       	call   c0001b17 <disk_write>
c0005757:	83 c4 10             	add    esp,0x10
c000575a:	85 c0                	test   eax,eax
c000575c:	0f 85 d4 00 00 00    	jne    c0005836 <f_mkfs+0x774>
c0005762:	b9 00 02 00 00       	mov    ecx,0x200
c0005767:	31 d2                	xor    edx,edx
c0005769:	89 f0                	mov    eax,esi
c000576b:	e8 1d c4 ff ff       	call   c0001b8d <mem_set>
c0005770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005774:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c0005778:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000577c:	75 b1                	jne    c000572f <f_mkfs+0x66d>
c000577e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005782:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000578a:	40                   	inc    eax
c000578b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000578f:	0f 87 61 ff ff ff    	ja     c00056f6 <f_mkfs+0x634>
c0005795:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000579a:	74 04                	je     c00057a0 <f_mkfs+0x6de>
c000579c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00057a0:	89 fb                	mov    ebx,edi
c00057a2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00057a6:	76 04                	jbe    c00057ac <f_mkfs+0x6ea>
c00057a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00057ac:	53                   	push   ebx
c00057ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00057b1:	56                   	push   esi
c00057b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057b6:	e8 5c c3 ff ff       	call   c0001b17 <disk_write>
c00057bb:	83 c4 10             	add    esp,0x10
c00057be:	85 c0                	test   eax,eax
c00057c0:	75 74                	jne    c0005836 <f_mkfs+0x774>
c00057c2:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00057c6:	29 df                	sub    edi,ebx
c00057c8:	75 d6                	jne    c00057a0 <f_mkfs+0x6de>
c00057ca:	b1 0c                	mov    cl,0xc
c00057cc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d1:	74 18                	je     c00057eb <f_mkfs+0x729>
c00057d3:	b1 06                	mov    cl,0x6
c00057d5:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00057dd:	77 0c                	ja     c00057eb <f_mkfs+0x729>
c00057df:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00057e4:	0f 94 c1             	sete   cl
c00057e7:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00057eb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00057f0:	75 2d                	jne    c000581f <f_mkfs+0x75d>
c00057f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00057f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00057fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0005802:	0f b6 c9             	movzx  ecx,cl
c0005805:	83 ec 0c             	sub    esp,0xc
c0005808:	56                   	push   esi
c0005809:	8d 54 24 48          	lea    edx,[esp+0x48]
c000580d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005811:	e8 4c d3 ff ff       	call   c0002b62 <create_partition>
c0005816:	83 c4 10             	add    esp,0x10
c0005819:	89 c7                	mov    edi,eax
c000581b:	85 c0                	test   eax,eax
c000581d:	75 2e                	jne    c000584d <f_mkfs+0x78b>
c000581f:	31 ff                	xor    edi,edi
c0005821:	50                   	push   eax
c0005822:	6a 00                	push   0x0
c0005824:	6a 00                	push   0x0
c0005826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000582a:	e8 fe c2 ff ff       	call   c0001b2d <disk_ioctl>
c000582f:	83 c4 10             	add    esp,0x10
c0005832:	85 c0                	test   eax,eax
c0005834:	74 17                	je     c000584d <f_mkfs+0x78b>
c0005836:	85 ed                	test   ebp,ebp
c0005838:	75 0c                	jne    c0005846 <f_mkfs+0x784>
c000583a:	83 ec 0c             	sub    esp,0xc
c000583d:	56                   	push   esi
c000583e:	e8 6d 00 00 00       	call   c00058b0 <ff_memfree>
c0005843:	83 c4 10             	add    esp,0x10
c0005846:	bf 01 00 00 00       	mov    edi,0x1
c000584b:	eb 40                	jmp    c000588d <f_mkfs+0x7cb>
c000584d:	85 ed                	test   ebp,ebp
c000584f:	75 3c                	jne    c000588d <f_mkfs+0x7cb>
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 56 00 00 00       	call   c00058b0 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	eb 2e                	jmp    c000588d <f_mkfs+0x7cb>
c000585f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005864:	0f 85 56 fb ff ff    	jne    c00053c0 <f_mkfs+0x2fe>
c000586a:	e9 2f fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000586f:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005874:	0f 85 4c fb ff ff    	jne    c00053c6 <f_mkfs+0x304>
c000587a:	89 cf                	mov    edi,ecx
c000587c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005882:	0f 86 49 fa ff ff    	jbe    c00052d1 <f_mkfs+0x20f>
c0005888:	e9 11 fc ff ff       	jmp    c000549e <f_mkfs+0x3dc>
c000588d:	83 c4 4c             	add    esp,0x4c
c0005890:	89 f8                	mov    eax,edi
c0005892:	5b                   	pop    ebx
c0005893:	5e                   	pop    esi
c0005894:	5f                   	pop    edi
c0005895:	5d                   	pop    ebp
c0005896:	c3                   	ret    
c0005897:	90                   	nop

c0005898 <ff_memalloc>:
c0005898:	83 ec 0c             	sub    esp,0xc
c000589b:	83 ec 0c             	sub    esp,0xc
c000589e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058a2:	e8 ba 12 00 00       	call   c0006b61 <malloc>
c00058a7:	83 c4 10             	add    esp,0x10
c00058aa:	83 c4 0c             	add    esp,0xc
c00058ad:	c3                   	ret    
c00058ae:	66 90                	xchg   ax,ax

c00058b0 <ff_memfree>:
c00058b0:	83 ec 0c             	sub    esp,0xc
c00058b3:	83 ec 0c             	sub    esp,0xc
c00058b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00058ba:	e8 b2 12 00 00       	call   c0006b71 <free>
c00058bf:	83 c4 10             	add    esp,0x10
c00058c2:	90                   	nop
c00058c3:	83 c4 0c             	add    esp,0xc
c00058c6:	c3                   	ret    
c00058c7:	90                   	nop

c00058c8 <ff_uni2oem>:
c00058c8:	83 ec 14             	sub    esp,0x14
c00058cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cf:	66 89 04 24          	mov    WORD PTR [esp],ax
c00058d3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00058da:	c7 44 24 0c c0 c8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001c8c0
c00058e2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00058e7:	77 0b                	ja     c00058f4 <ff_uni2oem+0x2c>
c00058e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00058f2:	eb 68                	jmp    c000595c <ff_uni2oem+0x94>
c00058f4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00058fc:	77 5e                	ja     c000595c <ff_uni2oem+0x94>
c00058fe:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005904:	75 56                	jne    c000595c <ff_uni2oem+0x94>
c0005906:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000590d:	eb 0d                	jmp    c000591c <ff_uni2oem+0x54>
c000590f:	90                   	nop
c0005910:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005915:	40                   	inc    eax
c0005916:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000591b:	90                   	nop
c000591c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005922:	77 24                	ja     c0005948 <ff_uni2oem+0x80>
c0005924:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005929:	25 ff ff 00 00       	and    eax,0xffff
c000592e:	01 c0                	add    eax,eax
c0005930:	89 c2                	mov    edx,eax
c0005932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005936:	01 d0                	add    eax,edx
c0005938:	66 8b 00             	mov    ax,WORD PTR [eax]
c000593b:	25 ff ff 00 00       	and    eax,0xffff
c0005940:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005944:	75 ca                	jne    c0005910 <ff_uni2oem+0x48>
c0005946:	66 90                	xchg   ax,ax
c0005948:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000594d:	83 e8 80             	sub    eax,0xffffff80
c0005950:	25 ff 00 00 00       	and    eax,0xff
c0005955:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000595a:	66 90                	xchg   ax,ax
c000595c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005961:	83 c4 14             	add    esp,0x14
c0005964:	c3                   	ret    
c0005965:	8d 76 00             	lea    esi,[esi+0x0]

c0005968 <ff_oem2uni>:
c0005968:	83 ec 18             	sub    esp,0x18
c000596b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000596f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005973:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005978:	66 89 04 24          	mov    WORD PTR [esp],ax
c000597c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005983:	c7 44 24 10 c0 c8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001c8c0
c000598b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005991:	77 0d                	ja     c00059a0 <ff_oem2uni+0x38>
c0005993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005997:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000599c:	eb 36                	jmp    c00059d4 <ff_oem2uni+0x6c>
c000599e:	66 90                	xchg   ax,ax
c00059a0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00059a6:	75 2c                	jne    c00059d4 <ff_oem2uni+0x6c>
c00059a8:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00059af:	77 23                	ja     c00059d4 <ff_oem2uni+0x6c>
c00059b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059b5:	25 ff ff 00 00       	and    eax,0xffff
c00059ba:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00059bf:	01 c0                	add    eax,eax
c00059c1:	89 c2                	mov    edx,eax
c00059c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c7:	01 d0                	add    eax,edx
c00059c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00059cc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00059d1:	8d 76 00             	lea    esi,[esi+0x0]
c00059d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00059d9:	83 c4 18             	add    esp,0x18
c00059dc:	c3                   	ret    
c00059dd:	8d 76 00             	lea    esi,[esi+0x0]

c00059e0 <ff_wtoupper>:
c00059e0:	83 ec 10             	sub    esp,0x10
c00059e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00059eb:	0f 87 77 01 00 00    	ja     c0005b68 <ff_wtoupper+0x188>
c00059f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00059fa:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005a01:	77 09                	ja     c0005a0c <ff_wtoupper+0x2c>
c0005a03:	b8 c0 c6 01 c0       	mov    eax,0xc001c6c0
c0005a08:	eb 0a                	jmp    c0005a14 <ff_wtoupper+0x34>
c0005a0a:	66 90                	xchg   ax,ax
c0005a0c:	b8 00 c6 01 c0       	mov    eax,0xc001c600
c0005a11:	8d 76 00             	lea    esi,[esi+0x0]
c0005a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1c:	8d 50 02             	lea    edx,[eax+0x2]
c0005a1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a26:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005a2b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005a31:	0f 84 21 01 00 00    	je     c0005b58 <ff_wtoupper+0x178>
c0005a37:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a3c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005a41:	0f 82 11 01 00 00    	jb     c0005b58 <ff_wtoupper+0x178>
c0005a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a4b:	8d 50 02             	lea    edx,[eax+0x2]
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005a55:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005a5a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a5f:	66 c1 e8 08          	shr    ax,0x8
c0005a63:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005a68:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005a6f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005a74:	31 d2                	xor    edx,edx
c0005a76:	66 89 c2             	mov    dx,ax
c0005a79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7d:	31 c9                	xor    ecx,ecx
c0005a7f:	66 89 c1             	mov    cx,ax
c0005a82:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005a87:	25 ff ff 00 00       	and    eax,0xffff
c0005a8c:	01 c8                	add    eax,ecx
c0005a8e:	39 c2                	cmp    edx,eax
c0005a90:	0f 8d 9a 00 00 00    	jge    c0005b30 <ff_wtoupper+0x150>
c0005a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a9a:	25 ff ff 00 00       	and    eax,0xffff
c0005a9f:	83 f8 08             	cmp    eax,0x8
c0005aa2:	0f 87 ac 00 00 00    	ja     c0005b54 <ff_wtoupper+0x174>
c0005aa8:	8b 04 85 c0 c5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3a40]
c0005aaf:	ff e0                	jmp    eax
c0005ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ab4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ab9:	31 d2                	xor    edx,edx
c0005abb:	66 89 c2             	mov    dx,ax
c0005abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ac2:	25 ff ff 00 00       	and    eax,0xffff
c0005ac7:	29 c2                	sub    edx,eax
c0005ac9:	89 d0                	mov    eax,edx
c0005acb:	01 c0                	add    eax,eax
c0005acd:	89 c2                	mov    edx,eax
c0005acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ad3:	01 d0                	add    eax,edx
c0005ad5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ad8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005add:	eb 4d                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005adf:	90                   	nop
c0005ae0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ae5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ae9:	83 e0 01             	and    eax,0x1
c0005aec:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005af1:	eb 39                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005af3:	90                   	nop
c0005af4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005afa:	eb 30                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005afc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005b02:	eb 28                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b04:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005b0a:	eb 20                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b0c:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005b12:	eb 18                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b14:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005b1a:	eb 10                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b1c:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005b22:	eb 08                	jmp    c0005b2c <ff_wtoupper+0x14c>
c0005b24:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005b2b:	90                   	nop
c0005b2c:	eb 26                	jmp    c0005b54 <ff_wtoupper+0x174>
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005b36:	0f 85 dc fe ff ff    	jne    c0005a18 <ff_wtoupper+0x38>
c0005b3c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005b41:	25 ff ff 00 00       	and    eax,0xffff
c0005b46:	01 c0                	add    eax,eax
c0005b48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005b4c:	e9 c7 fe ff ff       	jmp    c0005a18 <ff_wtoupper+0x38>
c0005b51:	8d 76 00             	lea    esi,[esi+0x0]
c0005b54:	90                   	nop
c0005b55:	8d 76 00             	lea    esi,[esi+0x0]
c0005b58:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005b5d:	25 ff ff 00 00       	and    eax,0xffff
c0005b62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b6c:	83 c4 10             	add    esp,0x10
c0005b6f:	c3                   	ret    

c0005b70 <CPU::current()>:
c0005b70:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0005b75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0005b7b:	c3                   	ret    

c0005b7c <operator new(unsigned long)>:
c0005b7c:	e9 e0 0f 00 00       	jmp    c0006b61 <malloc>

c0005b81 <operator delete(void*)>:
c0005b81:	e9 fb 0f 00 00       	jmp    c0006b81 <rfree>

c0005b86 <disableIRQs()>:
c0005b86:	fa                   	cli    
c0005b87:	c3                   	ret    

c0005b88 <enableIRQs()>:
c0005b88:	fb                   	sti    
c0005b89:	c3                   	ret    

c0005b8a <lockScheduler()>:
c0005b8a:	fa                   	cli    
c0005b8b:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0005b91:	c3                   	ret    

c0005b92 <unlockScheduler()>:
c0005b92:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0005b97:	48                   	dec    eax
c0005b98:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0005b9d:	75 01                	jne    c0005ba0 <unlockScheduler()+0xe>
c0005b9f:	fb                   	sti    
c0005ba0:	c3                   	ret    

c0005ba1 <lockStuff()>:
c0005ba1:	fa                   	cli    
c0005ba2:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0005ba8:	ff 05 04 29 02 c0    	inc    DWORD PTR ds:0xc0022904
c0005bae:	c3                   	ret    

c0005baf <unlockStuff()>:
c0005baf:	83 ec 0c             	sub    esp,0xc
c0005bb2:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c0005bb7:	48                   	dec    eax
c0005bb8:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c0005bbd:	75 18                	jne    c0005bd7 <unlockStuff()+0x28>
c0005bbf:	83 3d 00 29 02 c0 00 	cmp    DWORD PTR ds:0xc0022900,0x0
c0005bc6:	74 0f                	je     c0005bd7 <unlockStuff()+0x28>
c0005bc8:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c0005bd2:	e8 11 cd 00 00       	call   c00128e8 <schedule()>
c0005bd7:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0005bdc:	48                   	dec    eax
c0005bdd:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0005be2:	75 01                	jne    c0005be5 <unlockStuff()+0x36>
c0005be4:	fb                   	sti    
c0005be5:	83 c4 0c             	add    esp,0xc
c0005be8:	c3                   	ret    

c0005be9 <Virt::getAKernelVAS()>:
c0005be9:	a1 14 f5 01 c0       	mov    eax,ds:0xc001f514
c0005bee:	c3                   	ret    

c0005bef <__not_memcpy>:
c0005bef:	57                   	push   edi
c0005bf0:	56                   	push   esi
c0005bf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005bfd:	89 c7                	mov    edi,eax
c0005bff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0005c01:	5e                   	pop    esi
c0005c02:	5f                   	pop    edi
c0005c03:	c3                   	ret    

c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>:
c0005c04:	83 ec 0c             	sub    esp,0xc
c0005c07:	83 ec 08             	sub    esp,0x8
c0005c0a:	68 c0 c9 01 c0       	push   0xc001c9c0
c0005c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c13:	e8 e8 aa ff ff       	call   c0000700 <strcmp>
c0005c18:	83 c4 10             	add    esp,0x10
c0005c1b:	85 c0                	test   eax,eax
c0005c1d:	0f 94 c0             	sete   al
c0005c20:	84 c0                	test   al,al
c0005c22:	74 0c                	je     c0005c30 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0005c24:	b8 28 f4 01 c0       	mov    eax,0xc001f428
c0005c29:	e9 ea 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c2e:	66 90                	xchg   ax,ax
c0005c30:	83 ec 08             	sub    esp,0x8
c0005c33:	68 c9 c9 01 c0       	push   0xc001c9c9
c0005c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c3c:	e8 bf aa ff ff       	call   c0000700 <strcmp>
c0005c41:	83 c4 10             	add    esp,0x10
c0005c44:	85 c0                	test   eax,eax
c0005c46:	0f 94 c0             	sete   al
c0005c49:	84 c0                	test   al,al
c0005c4b:	74 0b                	je     c0005c58 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0005c4d:	b8 60 b6 01 c0       	mov    eax,0xc001b660
c0005c52:	e9 c1 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c57:	90                   	nop
c0005c58:	83 ec 08             	sub    esp,0x8
c0005c5b:	68 d3 c9 01 c0       	push   0xc001c9d3
c0005c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c64:	e8 97 aa ff ff       	call   c0000700 <strcmp>
c0005c69:	83 c4 10             	add    esp,0x10
c0005c6c:	85 c0                	test   eax,eax
c0005c6e:	0f 94 c0             	sete   al
c0005c71:	84 c0                	test   al,al
c0005c73:	74 0b                	je     c0005c80 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0005c75:	b8 94 b3 01 c0       	mov    eax,0xc001b394
c0005c7a:	e9 99 00 00 00       	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005c7f:	90                   	nop
c0005c80:	83 ec 08             	sub    esp,0x8
c0005c83:	68 dc c9 01 c0       	push   0xc001c9dc
c0005c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c8c:	e8 6f aa ff ff       	call   c0000700 <strcmp>
c0005c91:	83 c4 10             	add    esp,0x10
c0005c94:	85 c0                	test   eax,eax
c0005c96:	0f 94 c0             	sete   al
c0005c99:	84 c0                	test   al,al
c0005c9b:	74 07                	je     c0005ca4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0005c9d:	b8 60 b7 01 c0       	mov    eax,0xc001b760
c0005ca2:	eb 74                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005ca4:	83 ec 08             	sub    esp,0x8
c0005ca7:	68 e6 c9 01 c0       	push   0xc001c9e6
c0005cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cb0:	e8 4b aa ff ff       	call   c0000700 <strcmp>
c0005cb5:	83 c4 10             	add    esp,0x10
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	0f 94 c0             	sete   al
c0005cbd:	84 c0                	test   al,al
c0005cbf:	74 07                	je     c0005cc8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0005cc1:	b8 e0 b4 01 c0       	mov    eax,0xc001b4e0
c0005cc6:	eb 50                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cc8:	83 ec 08             	sub    esp,0x8
c0005ccb:	68 ef c9 01 c0       	push   0xc001c9ef
c0005cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cd4:	e8 27 aa ff ff       	call   c0000700 <strcmp>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	85 c0                	test   eax,eax
c0005cde:	0f 94 c0             	sete   al
c0005ce1:	84 c0                	test   al,al
c0005ce3:	74 07                	je     c0005cec <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0005ce5:	b8 2c f4 01 c0       	mov    eax,0xc001f42c
c0005cea:	eb 2c                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005cec:	83 ec 08             	sub    esp,0x8
c0005cef:	68 fc c9 01 c0       	push   0xc001c9fc
c0005cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005cf8:	e8 03 aa ff ff       	call   c0000700 <strcmp>
c0005cfd:	83 c4 10             	add    esp,0x10
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 94 c0             	sete   al
c0005d05:	84 c0                	test   al,al
c0005d07:	74 07                	je     c0005d10 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0005d09:	b8 2d f4 01 c0       	mov    eax,0xc001f42d
c0005d0e:	eb 08                	jmp    c0005d18 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0005d10:	b8 00 00 00 00       	mov    eax,0x0
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	83 c4 0c             	add    esp,0xc
c0005d1b:	c3                   	ret    

c0005d1c <Computer::close(int, int, void*)>:
c0005d1c:	57                   	push   edi
c0005d1d:	56                   	push   esi
c0005d1e:	53                   	push   ebx
c0005d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0005d23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0005d27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005d2b:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d31:	83 ec 0c             	sub    esp,0xc
c0005d34:	50                   	push   eax
c0005d35:	e8 48 51 00 00       	call   c000ae82 <Device::closeAll()>
c0005d3a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0005d45:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0005d49:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0005d51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0005d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d59:	5b                   	pop    ebx
c0005d5a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0005d5d:	5e                   	pop    esi
c0005d5e:	5f                   	pop    edi
c0005d5f:	ff e0                	jmp    eax

c0005d61 <Krnl::firstTask()>:
c0005d61:	53                   	push   ebx
c0005d62:	83 ec 14             	sub    esp,0x14
c0005d65:	fb                   	sti    
c0005d66:	68 09 ca 01 c0       	push   0xc001ca09
c0005d6b:	e8 4b 0e 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005d70:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0005d77:	e8 e5 0d 00 00       	call   c0006b61 <malloc>
c0005d7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005d83:	89 c3                	mov    ebx,eax
c0005d85:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0005d8a:	50                   	push   eax
c0005d8b:	68 22 ca 01 c0       	push   0xc001ca22
c0005d90:	6a 01                	push   0x1
c0005d92:	53                   	push   ebx
c0005d93:	e8 24 c7 00 00       	call   c00124bc <Process::Process(bool, char const*, Process*, char**)>
c0005d98:	83 c4 20             	add    esp,0x20
c0005d9b:	68 ff 00 00 00       	push   0xff
c0005da0:	6a 00                	push   0x0
c0005da2:	68 b9 65 00 c0       	push   0xc00065b9
c0005da7:	53                   	push   ebx
c0005da8:	e8 1b c9 00 00       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c0005dad:	8b 15 30 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022930
c0005db3:	6a 7a                	push   0x7a
c0005db5:	6a 00                	push   0x0
c0005db7:	68 1c 31 01 c0       	push   0xc001311c
c0005dbc:	52                   	push   edx
c0005dbd:	e8 06 c9 00 00       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c0005dc2:	83 c4 14             	add    esp,0x14
c0005dc5:	a3 e8 28 02 c0       	mov    ds:0xc00228e8,eax
c0005dca:	68 20 cb 01 c0       	push   0xc001cb20
c0005dcf:	c6 05 2d f4 01 c0 01 	mov    BYTE PTR ds:0xc001f42d,0x1
c0005dd6:	e8 e0 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005ddb:	e8 1b d7 00 00       	call   c00134fb <Vm::initialise8086()>
c0005de0:	e8 e1 3e 00 00       	call   c0009cc6 <Fs::initVFS()>
c0005de5:	c7 04 24 2f ca 01 c0 	mov    DWORD PTR [esp],0xc001ca2f
c0005dec:	e8 ca 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005df1:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0005df6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0005dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0005dfe:	6a 00                	push   0x0
c0005e00:	6a 00                	push   0x0
c0005e02:	6a 00                	push   0x0
c0005e04:	50                   	push   eax
c0005e05:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0005e08:	83 c4 14             	add    esp,0x14
c0005e0b:	68 20 cb 01 c0       	push   0xc001cb20
c0005e10:	e8 a6 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e15:	e8 31 af 00 00       	call   c0010d4b <Sys::loadSyscalls()>
c0005e1a:	e8 4b 95 00 00       	call   c000f36a <Krnl::loadSystemEnv()>
c0005e1f:	e8 2d 99 00 00       	call   c000f751 <Krnl::setupPowerManager()>
c0005e24:	83 c4 0c             	add    esp,0xc
c0005e27:	6a 3a                	push   0x3a
c0005e29:	68 49 ca 01 c0       	push   0xc001ca49
c0005e2e:	68 52 ca 01 c0       	push   0xc001ca52
c0005e33:	e8 43 9e 00 00       	call   c000fc7b <Reg::readIntWithDefault(char*, char*, int)>
c0005e38:	89 04 24             	mov    DWORD PTR [esp],eax
c0005e3b:	e8 94 49 00 00       	call   c000a7d4 <User::loadClockSettings(int)>
c0005e40:	c7 04 24 44 cb 01 c0 	mov    DWORD PTR [esp],0xc001cb44
c0005e47:	e8 6f 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e4c:	59                   	pop    ecx
c0005e4d:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0005e52:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0005e58:	53                   	push   ebx
c0005e59:	e8 22 50 00 00       	call   c000ae80 <Device::loadDriversForAll()>
c0005e5e:	c7 04 24 5a ca 01 c0 	mov    DWORD PTR [esp],0xc001ca5a
c0005e65:	e8 51 0d 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0005e6a:	58                   	pop    eax
c0005e6b:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c0005e71:	5a                   	pop    edx
c0005e72:	6a 01                	push   0x1
c0005e74:	68 6b ca 01 c0       	push   0xc001ca6b
c0005e79:	e8 75 c0 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c0005e7e:	59                   	pop    ecx
c0005e7f:	5a                   	pop    edx
c0005e80:	53                   	push   ebx
c0005e81:	50                   	push   eax
c0005e82:	e8 9d c2 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c0005e87:	83 c4 10             	add    esp,0x10
c0005e8a:	83 ec 0c             	sub    esp,0xc
c0005e8d:	6a 02                	push   0x2
c0005e8f:	e8 50 cc 00 00       	call   c0012ae4 <blockTask(TaskState)>
c0005e94:	83 c4 10             	add    esp,0x10
c0005e97:	eb f1                	jmp    c0005e8a <Krnl::firstTask()+0x129>
c0005e99:	90                   	nop

c0005e9a <Computer::Computer()>:
c0005e9a:	83 ec 0c             	sub    esp,0xc
c0005e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ea1:	83 ec 08             	sub    esp,0x8
c0005ea4:	68 87 ca 01 c0       	push   0xc001ca87
c0005ea9:	50                   	push   eax
c0005eaa:	e8 4d 50 00 00       	call   c000aefc <Device::Device(char const*)>
c0005eaf:	83 c4 10             	add    esp,0x10
c0005eb2:	ba 90 cb 01 c0       	mov    edx,0xc001cb90
c0005eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ebb:	89 10                	mov    DWORD PTR [eax],edx
c0005ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ec1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0005ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ecf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0005ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005edd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0005ee3:	83 ca 04             	or     edx,0x4
c0005ee6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0005eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005ef6:	31 d2                	xor    edx,edx
c0005ef8:	88 c2                	mov    dl,al
c0005efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005efe:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0005f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f0f:	31 d2                	xor    edx,edx
c0005f11:	88 c2                	mov    dl,al
c0005f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0005f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0005f26:	8d 50 01             	lea    edx,[eax+0x1]
c0005f29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005f2d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0005f33:	31 d2                	xor    edx,edx
c0005f35:	88 c2                	mov    dl,al
c0005f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f3b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0005f3f:	83 e1 3f             	and    ecx,0x3f
c0005f42:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0005f46:	90                   	nop
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    
c0005f4b:	90                   	nop

c0005f4c <Computer::setBootMessage(char const*)>:
c0005f4c:	c3                   	ret    
c0005f4d:	90                   	nop

c0005f4e <Computer::detectFeatures()>:
c0005f4e:	55                   	push   ebp
c0005f4f:	57                   	push   edi
c0005f50:	56                   	push   esi
c0005f51:	53                   	push   ebx
c0005f52:	83 ec 1c             	sub    esp,0x1c
c0005f55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f59:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0005f63:	e8 b1 a2 ff ff       	call   c0000219 <detectCPUID>
c0005f68:	85 c0                	test   eax,eax
c0005f6a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005f70:	0f 95 c2             	setne  dl
c0005f73:	83 e0 fd             	and    eax,0xfffffffd
c0005f76:	01 d2                	add    edx,edx
c0005f78:	09 d0                	or     eax,edx
c0005f7a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005f80:	a8 02                	test   al,0x2
c0005f82:	75 46                	jne    c0005fca <Computer::detectFeatures()+0x7c>
c0005f84:	f6 05 41 f4 01 c0 04 	test   BYTE PTR ds:0xc001f441,0x4
c0005f8b:	74 07                	je     c0005f94 <Computer::detectFeatures()+0x46>
c0005f8d:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0005f94:	e8 8d 53 01 00       	call   c001b326 <x87Detect>
c0005f99:	83 e0 01             	and    eax,0x1
c0005f9c:	c1 e0 04             	shl    eax,0x4
c0005f9f:	88 c2                	mov    dl,al
c0005fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fa7:	83 e0 ef             	and    eax,0xffffffef
c0005faa:	09 d0                	or     eax,edx
c0005fac:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fb2:	a8 10                	test   al,0x10
c0005fb4:	0f 85 2a 01 00 00    	jne    c00060e4 <Computer::detectFeatures()+0x196>
c0005fba:	84 c0                	test   al,al
c0005fbc:	0f 88 45 01 00 00    	js     c0006107 <Computer::detectFeatures()+0x1b9>
c0005fc2:	83 c4 1c             	add    esp,0x1c
c0005fc5:	5b                   	pop    ebx
c0005fc6:	5e                   	pop    esi
c0005fc7:	5f                   	pop    edi
c0005fc8:	5d                   	pop    ebp
c0005fc9:	c3                   	ret    
c0005fca:	83 ec 0c             	sub    esp,0xc
c0005fcd:	6a 20                	push   0x20
c0005fcf:	e8 b8 84 00 00       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c0005fd4:	83 e0 01             	and    eax,0x1
c0005fd7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0005fde:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0005fe4:	83 e0 f7             	and    eax,0xfffffff7
c0005fe7:	09 d0                	or     eax,edx
c0005fe9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0005fef:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0005ff6:	e8 91 84 00 00       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c0005ffb:	83 e0 01             	and    eax,0x1
c0005ffe:	88 c2                	mov    dl,al
c0006000:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006006:	83 e0 fe             	and    eax,0xfffffffe
c0006009:	09 d0                	or     eax,edx
c000600b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006011:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006018:	e8 6f 84 00 00       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000601d:	c1 e0 07             	shl    eax,0x7
c0006020:	88 c2                	mov    dl,al
c0006022:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006028:	83 e0 7f             	and    eax,0x7f
c000602b:	09 d0                	or     eax,edx
c000602d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006033:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000603a:	e8 4d 84 00 00       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000603f:	83 c4 10             	add    esp,0x10
c0006042:	83 e0 01             	and    eax,0x1
c0006045:	c1 e0 05             	shl    eax,0x5
c0006048:	88 c2                	mov    dl,al
c000604a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006050:	83 e0 df             	and    eax,0xffffffdf
c0006053:	09 d0                	or     eax,edx
c0006055:	f7 05 40 f4 01 c0 01 04 00 00 	test   DWORD PTR ds:0xc001f440,0x401
c000605f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006065:	0f 84 c2 00 00 00    	je     c000612d <Computer::detectFeatures()+0x1df>
c000606b:	83 e0 fe             	and    eax,0xfffffffe
c000606e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006074:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000607a:	88 c2                	mov    dl,al
c000607c:	83 e2 09             	and    edx,0x9
c000607f:	fe ca                	dec    dl
c0006081:	75 09                	jne    c000608c <Computer::detectFeatures()+0x13e>
c0006083:	83 e0 fe             	and    eax,0xfffffffe
c0006086:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006093:	50                   	push   eax
c0006094:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006098:	55                   	push   ebp
c0006099:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000609d:	57                   	push   edi
c000609e:	8d 74 24 18          	lea    esi,[esp+0x18]
c00060a2:	56                   	push   esi
c00060a3:	68 00 00 00 80       	push   0x80000000
c00060a8:	e8 5b 83 00 00       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060ad:	83 c4 20             	add    esp,0x20
c00060b0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00060b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00060bb:	0f 86 c3 fe ff ff    	jbe    c0005f84 <Computer::detectFeatures()+0x36>
c00060c1:	83 ec 0c             	sub    esp,0xc
c00060c4:	50                   	push   eax
c00060c5:	55                   	push   ebp
c00060c6:	57                   	push   edi
c00060c7:	56                   	push   esi
c00060c8:	68 01 00 00 80       	push   0x80000001
c00060cd:	e8 36 83 00 00       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00060d2:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c00060dc:	83 c4 20             	add    esp,0x20
c00060df:	e9 a0 fe ff ff       	jmp    c0005f84 <Computer::detectFeatures()+0x36>
c00060e4:	e8 f7 51 01 00       	call   c001b2e0 <absolutelyNoChanceInHell>
c00060e9:	88 c2                	mov    dl,al
c00060eb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00060f1:	c1 e2 07             	shl    edx,0x7
c00060f4:	83 e0 7f             	and    eax,0x7f
c00060f7:	09 d0                	or     eax,edx
c00060f9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00060ff:	84 c0                	test   al,al
c0006101:	0f 89 bb fe ff ff    	jns    c0005fc2 <Computer::detectFeatures()+0x74>
c0006107:	e8 54 4f 01 00       	call   c001b060 <avxDetect>
c000610c:	83 e0 01             	and    eax,0x1
c000610f:	c1 e0 05             	shl    eax,0x5
c0006112:	88 c2                	mov    dl,al
c0006114:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000611a:	83 e0 df             	and    eax,0xffffffdf
c000611d:	09 d0                	or     eax,edx
c000611f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006125:	83 c4 1c             	add    esp,0x1c
c0006128:	5b                   	pop    ebx
c0006129:	5e                   	pop    esi
c000612a:	5f                   	pop    edi
c000612b:	5d                   	pop    ebp
c000612c:	c3                   	ret    
c000612d:	83 ec 0c             	sub    esp,0xc
c0006130:	68 00 02 00 00       	push   0x200
c0006135:	e8 52 83 00 00       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000613a:	83 c4 10             	add    esp,0x10
c000613d:	83 e0 01             	and    eax,0x1
c0006140:	88 c2                	mov    dl,al
c0006142:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006148:	83 e0 fe             	and    eax,0xfffffffe
c000614b:	09 d0                	or     eax,edx
c000614d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006153:	e9 1c ff ff ff       	jmp    c0006074 <Computer::detectFeatures()+0x126>

c0006158 <Computer::displayFeatures()>:
c0006158:	c3                   	ret    
c0006159:	90                   	nop

c000615a <Computer::rdmsr(unsigned int)>:
c000615a:	83 ec 0c             	sub    esp,0xc
c000615d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006161:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006168:	74 0a                	je     c0006174 <Computer::rdmsr(unsigned int)+0x1a>
c000616a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000616e:	0f 32                	rdmsr  
c0006170:	83 c4 0c             	add    esp,0xc
c0006173:	c3                   	ret    
c0006174:	83 ec 0c             	sub    esp,0xc
c0006177:	68 90 ca 01 c0       	push   0xc001ca90
c000617c:	e8 f2 92 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0006181:	83 c4 10             	add    esp,0x10
c0006184:	eb e4                	jmp    c000616a <Computer::rdmsr(unsigned int)+0x10>

c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006186:	57                   	push   edi
c0006187:	56                   	push   esi
c0006188:	52                   	push   edx
c0006189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000618d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006191:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006195:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000619c:	74 0e                	je     c00061ac <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000619e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061a2:	89 f0                	mov    eax,esi
c00061a4:	89 fa                	mov    edx,edi
c00061a6:	0f 30                	wrmsr  
c00061a8:	58                   	pop    eax
c00061a9:	5e                   	pop    esi
c00061aa:	5f                   	pop    edi
c00061ab:	c3                   	ret    
c00061ac:	83 ec 0c             	sub    esp,0xc
c00061af:	68 96 ca 01 c0       	push   0xc001ca96
c00061b4:	e8 ba 92 00 00       	call   c000f473 <Krnl::panic(char const*)>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	eb e0                	jmp    c000619e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00061be <Computer::shutdown()>:
c00061be:	83 ec 0c             	sub    esp,0xc
c00061c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00061c7:	6a 00                	push   0x0
c00061c9:	6a 00                	push   0x0
c00061cb:	6a 00                	push   0x0
c00061cd:	50                   	push   eax
c00061ce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061d1:	83 c4 1c             	add    esp,0x1c
c00061d4:	c3                   	ret    
c00061d5:	90                   	nop

c00061d6 <Computer::restart()>:
c00061d6:	83 ec 0c             	sub    esp,0xc
c00061d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00061df:	6a 00                	push   0x0
c00061e1:	6a 00                	push   0x0
c00061e3:	6a 01                	push   0x1
c00061e5:	50                   	push   eax
c00061e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00061e9:	83 c4 1c             	add    esp,0x1c
c00061ec:	c3                   	ret    
c00061ed:	90                   	nop

c00061ee <Computer::sleep()>:
c00061ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00061f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00061fc:	e9 03 7d 00 00       	jmp    c000df04 <ACPI::sleep()>
c0006201:	90                   	nop

c0006202 <Computer::nmiEnabled()>:
c0006202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006206:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000620c:	c3                   	ret    
c000620d:	90                   	nop

c000620e <Computer::readCMOS(unsigned char)>:
c000620e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006212:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006219:	19 c0                	sbb    eax,eax
c000621b:	83 e0 80             	and    eax,0xffffff80
c000621e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006222:	e6 70                	out    0x70,al
c0006224:	e4 71                	in     al,0x71
c0006226:	c3                   	ret    
c0006227:	90                   	nop

c0006228 <Computer::enableNMI(bool)>:
c0006228:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000622c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006230:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006236:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000623e:	eb ce                	jmp    c000620e <Computer::readCMOS(unsigned char)>

c0006240 <Computer::open(int, int, void*)>:
c0006240:	56                   	push   esi
c0006241:	53                   	push   ebx
c0006242:	83 ec 10             	sub    esp,0x10
c0006245:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006249:	f6 05 40 f4 01 c0 04 	test   BYTE PTR ds:0xc001f440,0x4
c0006250:	68 9c ca 01 c0       	push   0xc001ca9c
c0006255:	0f 94 05 60 ed 01 c0 	sete   BYTE PTR ds:0xc001ed60
c000625c:	e8 5a 09 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c0006261:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006268:	e8 f4 08 00 00       	call   c0006b61 <malloc>
c000626d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006270:	89 c6                	mov    esi,eax
c0006272:	e8 25 78 00 00       	call   c000da9c <ACPI::ACPI()>
c0006277:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000627d:	58                   	pop    eax
c000627e:	5a                   	pop    edx
c000627f:	56                   	push   esi
c0006280:	53                   	push   ebx
c0006281:	e8 de 4a 00 00       	call   c000ad64 <Device::addChild(Device*)>
c0006286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006289:	e8 c0 fc ff ff       	call   c0005f4e <Computer::detectFeatures()>
c000628e:	59                   	pop    ecx
c000628f:	5e                   	pop    esi
c0006290:	6a 01                	push   0x1
c0006292:	53                   	push   ebx
c0006293:	e8 90 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006298:	c7 04 24 b4 ca 01 c0 	mov    DWORD PTR [esp],0xc001cab4
c000629f:	e8 17 09 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062a4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00062ab:	e8 b1 08 00 00       	call   c0006b61 <malloc>
c00062b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00062b3:	89 c6                	mov    esi,eax
c00062b5:	e8 8a 82 00 00       	call   c000e544 <CPU::CPU()>
c00062ba:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00062c0:	58                   	pop    eax
c00062c1:	5a                   	pop    edx
c00062c2:	56                   	push   esi
c00062c3:	53                   	push   ebx
c00062c4:	e8 9b 4a 00 00       	call   c000ad64 <Device::addChild(Device*)>
c00062c9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00062cf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00062d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00062d5:	51                   	push   ecx
c00062d6:	6a 00                	push   0x0
c00062d8:	6a 00                	push   0x0
c00062da:	50                   	push   eax
c00062db:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00062de:	83 c4 14             	add    esp,0x14
c00062e1:	68 64 cb 01 c0       	push   0xc001cb64
c00062e6:	e8 d0 08 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062eb:	e8 cc e2 00 00       	call   c00145bc <HalInitialiseCoprocessor()>
c00062f0:	c7 04 24 ce ca 01 c0 	mov    DWORD PTR [esp],0xc001cace
c00062f7:	e8 bf 08 00 00       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c00062fc:	c7 04 24 61 5d 00 c0 	mov    DWORD PTR [esp],0xc0005d61
c0006303:	e8 d8 c4 00 00       	call   c00127e0 <setupMultitasking(void (*)())>
c0006308:	83 c4 14             	add    esp,0x14
c000630b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006310:	5b                   	pop    ebx
c0006311:	5e                   	pop    esi
c0006312:	c3                   	ret    
c0006313:	90                   	nop

c0006314 <Computer::disableNMI()>:
c0006314:	6a 00                	push   0x0
c0006316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000631a:	50                   	push   eax
c000631b:	e8 08 ff ff ff       	call   c0006228 <Computer::enableNMI(bool)>
c0006320:	5a                   	pop    edx
c0006321:	59                   	pop    ecx
c0006322:	c3                   	ret    
c0006323:	90                   	nop

c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006328:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000632f:	19 c0                	sbb    eax,eax
c0006331:	83 e0 80             	and    eax,0xffffff80
c0006334:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006338:	e6 70                	out    0x70,al
c000633a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000633e:	e6 71                	out    0x71,al
c0006340:	c3                   	ret    
c0006341:	90                   	nop

c0006342 <Computer::handleNMI()>:
c0006342:	56                   	push   esi
c0006343:	53                   	push   ebx
c0006344:	83 ec 10             	sub    esp,0x10
c0006347:	e4 92                	in     al,0x92
c0006349:	89 c6                	mov    esi,eax
c000634b:	e4 61                	in     al,0x61
c000634d:	68 e9 ca 01 c0       	push   0xc001cae9
c0006352:	88 c3                	mov    bl,al
c0006354:	e8 cb 35 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0006359:	83 c4 10             	add    esp,0x10
c000635c:	83 e6 10             	and    esi,0x10
c000635f:	75 0d                	jne    c000636e <Computer::handleNMI()+0x2c>
c0006361:	f6 c3 40             	test   bl,0x40
c0006364:	75 1d                	jne    c0006383 <Computer::handleNMI()+0x41>
c0006366:	84 db                	test   bl,bl
c0006368:	78 2d                	js     c0006397 <Computer::handleNMI()+0x55>
c000636a:	58                   	pop    eax
c000636b:	5b                   	pop    ebx
c000636c:	5e                   	pop    esi
c000636d:	c3                   	ret    
c000636e:	83 ec 0c             	sub    esp,0xc
c0006371:	68 fa ca 01 c0       	push   0xc001cafa
c0006376:	e8 f8 90 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000637b:	83 c4 10             	add    esp,0x10
c000637e:	f6 c3 40             	test   bl,0x40
c0006381:	74 e3                	je     c0006366 <Computer::handleNMI()+0x24>
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	68 07 cb 01 c0       	push   0xc001cb07
c000638b:	e8 e3 90 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0006390:	83 c4 10             	add    esp,0x10
c0006393:	84 db                	test   bl,bl
c0006395:	79 d3                	jns    c000636a <Computer::handleNMI()+0x28>
c0006397:	c7 44 24 10 11 cb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cb11
c000639f:	5a                   	pop    edx
c00063a0:	5b                   	pop    ebx
c00063a1:	5e                   	pop    esi
c00063a2:	e9 cc 90 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c00063a7:	90                   	nop

c00063a8 <GDTEntry::setBase(unsigned int)>:
c00063a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00063b0:	89 c1                	mov    ecx,eax
c00063b2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00063b6:	c1 e9 10             	shr    ecx,0x10
c00063b9:	c1 e8 18             	shr    eax,0x18
c00063bc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00063bf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00063c2:	c3                   	ret    
c00063c3:	90                   	nop

c00063c4 <GDTEntry::setLimit(unsigned int)>:
c00063c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00063c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00063cf:	66 89 01             	mov    WORD PTR [ecx],ax
c00063d2:	83 e2 f0             	and    edx,0xfffffff0
c00063d5:	c1 e8 10             	shr    eax,0x10
c00063d8:	83 e0 0f             	and    eax,0xf
c00063db:	09 d0                	or     eax,edx
c00063dd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00063e0:	c3                   	ret    
c00063e1:	90                   	nop

c00063e2 <GDT::GDT()>:
c00063e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00063f6:	90                   	nop
c00063f7:	c3                   	ret    

c00063f8 <GDT::addEntry(GDTEntry)>:
c00063f8:	53                   	push   ebx
c00063f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006401:	8b 02                	mov    eax,DWORD PTR [edx]
c0006403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006407:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000640b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000640f:	8d 48 01             	lea    ecx,[eax+0x1]
c0006412:	c1 e0 03             	shl    eax,0x3
c0006415:	89 0a                	mov    DWORD PTR [edx],ecx
c0006417:	5b                   	pop    ebx
c0006418:	c3                   	ret    
c0006419:	90                   	nop

c000641a <GDT::getNumberOfEntries()>:
c000641a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000641e:	8b 00                	mov    eax,DWORD PTR [eax]
c0006420:	c3                   	ret    
c0006421:	90                   	nop

c0006422 <GDT::flush()>:
c0006422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006426:	8b 10                	mov    edx,DWORD PTR [eax]
c0006428:	83 c0 04             	add    eax,0x4
c000642b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0006432:	a3 32 f4 01 c0       	mov    ds:0xc001f432,eax
c0006437:	66 89 15 30 f4 01 c0 	mov    WORD PTR ds:0xc001f430,dx
c000643e:	e9 3a 9f ff ff       	jmp    c000037d <loadGDT>
c0006443:	90                   	nop

c0006444 <GDT::setup()>:
c0006444:	57                   	push   edi
c0006445:	56                   	push   esi
c0006446:	53                   	push   ebx
c0006447:	83 ec 40             	sub    esp,0x40
c000644a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000644e:	6a 00                	push   0x0
c0006450:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0006454:	56                   	push   esi
c0006455:	e8 4e ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c000645a:	6a 00                	push   0x0
c000645c:	56                   	push   esi
c000645d:	e8 62 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006462:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000646a:	6a 00                	push   0x0
c000646c:	8d 74 24 44          	lea    esi,[esp+0x44]
c0006470:	56                   	push   esi
c0006471:	e8 32 ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c0006476:	68 ff ff ff 00       	push   0xffffff
c000647b:	56                   	push   esi
c000647c:	e8 43 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c0006481:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006485:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000648a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000648f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006493:	83 c4 20             	add    esp,0x20
c0006496:	6a 00                	push   0x0
c0006498:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000649c:	56                   	push   esi
c000649d:	e8 06 ff ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c00064a2:	68 ff ff ff 00       	push   0xffffff
c00064a7:	56                   	push   esi
c00064a8:	e8 17 ff ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c00064ad:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00064b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00064b5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00064b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00064bd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00064c1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00064c6:	0d 00 92 c0 00       	or     eax,0xc09200
c00064cb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00064cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00064d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00064d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00064db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00064df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00064e3:	89 fa                	mov    edx,edi
c00064e5:	80 cc 60             	or     ah,0x60
c00064e8:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00064ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00064f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00064f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00064fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064fe:	80 cc 60             	or     ah,0x60
c0006501:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0006505:	89 f8                	mov    eax,edi
c0006507:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000650c:	09 d0                	or     eax,edx
c000650e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006512:	89 c7                	mov    edi,eax
c0006514:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006518:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000651c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006520:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006524:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000652a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0006533:	09 d0                	or     eax,edx
c0006535:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006539:	83 c4 0c             	add    esp,0xc
c000653c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006540:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0006544:	53                   	push   ebx
c0006545:	e8 ae fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000654a:	83 c4 0c             	add    esp,0xc
c000654d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006551:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0006555:	53                   	push   ebx
c0006556:	e8 9d fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000655b:	83 c4 0c             	add    esp,0xc
c000655e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006562:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006566:	53                   	push   ebx
c0006567:	e8 8c fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000656c:	83 c4 0c             	add    esp,0xc
c000656f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006573:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006577:	53                   	push   ebx
c0006578:	e8 7b fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000657d:	83 c4 0c             	add    esp,0xc
c0006580:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006584:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006588:	53                   	push   ebx
c0006589:	e8 6a fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c000658e:	83 c4 0c             	add    esp,0xc
c0006591:	57                   	push   edi
c0006592:	56                   	push   esi
c0006593:	53                   	push   ebx
c0006594:	e8 5f fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0006599:	83 c4 0c             	add    esp,0xc
c000659c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00065a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00065a4:	53                   	push   ebx
c00065a5:	e8 4e fe ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c00065aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00065ad:	e8 70 fe ff ff       	call   c0006422 <GDT::flush()>
c00065b2:	83 c4 50             	add    esp,0x50
c00065b5:	5b                   	pop    ebx
c00065b6:	5e                   	pop    esi
c00065b7:	5f                   	pop    edi
c00065b8:	c3                   	ret    

c00065b9 <idleFunction(void*)>:
c00065b9:	83 ec 0c             	sub    esp,0xc
c00065bc:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00065c1:	48                   	dec    eax
c00065c2:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00065c7:	75 01                	jne    c00065ca <idleFunction(void*)+0x11>
c00065c9:	fb                   	sti    
c00065ca:	f4                   	hlt    
c00065cb:	e8 12 53 01 00       	call   c001b8e2 <idleCommon()>
c00065d0:	eb f8                	jmp    c00065ca <idleFunction(void*)+0x11>
c00065d2:	66 90                	xchg   ax,ax

c00065d4 <IDTEntry::IDTEntry(bool)>:
c00065d4:	83 ec 04             	sub    esp,0x4
c00065d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00065db:	88 04 24             	mov    BYTE PTR [esp],al
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00065e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ec:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00065f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00065f7:	83 e2 f0             	and    edx,0xfffffff0
c00065fa:	83 ca 0e             	or     edx,0xe
c00065fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006604:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0006607:	83 e2 ef             	and    edx,0xffffffef
c000660a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000660d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0006611:	74 05                	je     c0006618 <IDTEntry::IDTEntry(bool)+0x44>
c0006613:	b2 03                	mov    dl,0x3
c0006615:	eb 05                	jmp    c000661c <IDTEntry::IDTEntry(bool)+0x48>
c0006617:	90                   	nop
c0006618:	b2 00                	mov    dl,0x0
c000661a:	66 90                	xchg   ax,ax
c000661c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006620:	83 e2 03             	and    edx,0x3
c0006623:	88 d1                	mov    cl,dl
c0006625:	c1 e1 05             	shl    ecx,0x5
c0006628:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000662b:	83 e2 9f             	and    edx,0xffffff9f
c000662e:	09 ca                	or     edx,ecx
c0006630:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006637:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000663a:	83 ca 80             	or     edx,0xffffff80
c000663d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0006640:	90                   	nop
c0006641:	83 c4 04             	add    esp,0x4
c0006644:	c3                   	ret    
c0006645:	90                   	nop

c0006646 <IDTEntry::setOffset(unsigned int)>:
c0006646:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000664a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664e:	66 89 02             	mov    WORD PTR [edx],ax
c0006651:	c1 e8 10             	shr    eax,0x10
c0006654:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0006658:	c3                   	ret    
c0006659:	90                   	nop
c000665a:	66 90                	xchg   ax,ax

c000665c <IDT::IDT()>:
c000665c:	90                   	nop
c000665d:	c3                   	ret    

c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000665e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006662:	83 c0 30             	add    eax,0x30
c0006665:	c3                   	ret    

c0006666 <IDT::addEntry(IDTEntry, int)>:
c0006666:	53                   	push   ebx
c0006667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000666b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000666f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006677:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000667a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000667e:	5b                   	pop    ebx
c000667f:	c3                   	ret    

c0006680 <IDT::addEntry(int, void (*)(), bool)>:
c0006680:	53                   	push   ebx
c0006681:	83 ec 10             	sub    esp,0x10
c0006684:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0006689:	50                   	push   eax
c000668a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000668e:	53                   	push   ebx
c000668f:	e8 40 ff ff ff       	call   c00065d4 <IDTEntry::IDTEntry(bool)>
c0006694:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0006698:	53                   	push   ebx
c0006699:	e8 a8 ff ff ff       	call   c0006646 <IDTEntry::setOffset(unsigned int)>
c000669e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00066a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00066a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00066aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00066ae:	e8 b3 ff ff ff       	call   c0006666 <IDT::addEntry(IDTEntry, int)>
c00066b3:	83 c4 30             	add    esp,0x30
c00066b6:	5b                   	pop    ebx
c00066b7:	c3                   	ret    

c00066b8 <IDT::flush()>:
c00066b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00066bc:	66 c7 05 38 f4 01 c0 ff 07 	mov    WORD PTR ds:0xc001f438,0x7ff
c00066c5:	a3 3a f4 01 c0       	mov    ds:0xc001f43a,eax
c00066ca:	0f 01 1d 38 f4 01 c0 	lidtd  ds:0xc001f438
c00066d1:	c3                   	ret    

c00066d2 <IDT::setup()>:
c00066d2:	57                   	push   edi
c00066d3:	56                   	push   esi
c00066d4:	53                   	push   ebx
c00066d5:	83 ec 10             	sub    esp,0x10
c00066d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066dc:	6a 00                	push   0x0
c00066de:	68 f0 b0 01 c0       	push   0xc001b0f0
c00066e3:	6a 00                	push   0x0
c00066e5:	53                   	push   ebx
c00066e6:	e8 95 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00066eb:	6a 00                	push   0x0
c00066ed:	68 00 b1 01 c0       	push   0xc001b100
c00066f2:	6a 01                	push   0x1
c00066f4:	53                   	push   ebx
c00066f5:	e8 86 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00066fa:	83 c4 20             	add    esp,0x20
c00066fd:	6a 00                	push   0x0
c00066ff:	68 0a b1 01 c0       	push   0xc001b10a
c0006704:	6a 02                	push   0x2
c0006706:	53                   	push   ebx
c0006707:	e8 74 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000670c:	6a 00                	push   0x0
c000670e:	68 14 b1 01 c0       	push   0xc001b114
c0006713:	6a 03                	push   0x3
c0006715:	53                   	push   ebx
c0006716:	e8 65 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000671b:	83 c4 20             	add    esp,0x20
c000671e:	6a 00                	push   0x0
c0006720:	68 1e b1 01 c0       	push   0xc001b11e
c0006725:	6a 04                	push   0x4
c0006727:	53                   	push   ebx
c0006728:	e8 53 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000672d:	6a 00                	push   0x0
c000672f:	68 28 b1 01 c0       	push   0xc001b128
c0006734:	6a 05                	push   0x5
c0006736:	53                   	push   ebx
c0006737:	e8 44 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000673c:	83 c4 20             	add    esp,0x20
c000673f:	6a 00                	push   0x0
c0006741:	68 32 b1 01 c0       	push   0xc001b132
c0006746:	6a 06                	push   0x6
c0006748:	53                   	push   ebx
c0006749:	e8 32 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000674e:	6a 00                	push   0x0
c0006750:	68 3c b1 01 c0       	push   0xc001b13c
c0006755:	6a 07                	push   0x7
c0006757:	53                   	push   ebx
c0006758:	e8 23 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000675d:	83 c4 20             	add    esp,0x20
c0006760:	6a 00                	push   0x0
c0006762:	68 46 b1 01 c0       	push   0xc001b146
c0006767:	6a 08                	push   0x8
c0006769:	53                   	push   ebx
c000676a:	e8 11 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000676f:	6a 00                	push   0x0
c0006771:	68 4e b1 01 c0       	push   0xc001b14e
c0006776:	6a 09                	push   0x9
c0006778:	53                   	push   ebx
c0006779:	e8 02 ff ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000677e:	83 c4 20             	add    esp,0x20
c0006781:	6a 00                	push   0x0
c0006783:	68 58 b1 01 c0       	push   0xc001b158
c0006788:	6a 0a                	push   0xa
c000678a:	53                   	push   ebx
c000678b:	e8 f0 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006790:	6a 00                	push   0x0
c0006792:	68 60 b1 01 c0       	push   0xc001b160
c0006797:	6a 0b                	push   0xb
c0006799:	53                   	push   ebx
c000679a:	e8 e1 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000679f:	83 c4 20             	add    esp,0x20
c00067a2:	6a 00                	push   0x0
c00067a4:	68 68 b1 01 c0       	push   0xc001b168
c00067a9:	6a 0c                	push   0xc
c00067ab:	53                   	push   ebx
c00067ac:	e8 cf fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067b1:	6a 00                	push   0x0
c00067b3:	68 70 b1 01 c0       	push   0xc001b170
c00067b8:	6a 0d                	push   0xd
c00067ba:	53                   	push   ebx
c00067bb:	e8 c0 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067c0:	83 c4 20             	add    esp,0x20
c00067c3:	6a 00                	push   0x0
c00067c5:	68 78 b1 01 c0       	push   0xc001b178
c00067ca:	6a 0e                	push   0xe
c00067cc:	53                   	push   ebx
c00067cd:	e8 ae fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067d2:	6a 00                	push   0x0
c00067d4:	68 80 b1 01 c0       	push   0xc001b180
c00067d9:	6a 0f                	push   0xf
c00067db:	53                   	push   ebx
c00067dc:	e8 9f fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067e1:	83 c4 20             	add    esp,0x20
c00067e4:	6a 00                	push   0x0
c00067e6:	68 8a b1 01 c0       	push   0xc001b18a
c00067eb:	6a 10                	push   0x10
c00067ed:	53                   	push   ebx
c00067ee:	e8 8d fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00067f3:	6a 00                	push   0x0
c00067f5:	68 94 b1 01 c0       	push   0xc001b194
c00067fa:	6a 11                	push   0x11
c00067fc:	53                   	push   ebx
c00067fd:	e8 7e fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006802:	83 c4 20             	add    esp,0x20
c0006805:	6a 00                	push   0x0
c0006807:	68 9e b1 01 c0       	push   0xc001b19e
c000680c:	6a 12                	push   0x12
c000680e:	53                   	push   ebx
c000680f:	e8 6c fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006814:	6a 01                	push   0x1
c0006816:	68 38 b2 01 c0       	push   0xc001b238
c000681b:	6a 60                	push   0x60
c000681d:	53                   	push   ebx
c000681e:	e8 5d fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006823:	83 c4 20             	add    esp,0x20
c0006826:	6a 00                	push   0x0
c0006828:	68 3f b2 01 c0       	push   0xc001b23f
c000682d:	6a 20                	push   0x20
c000682f:	53                   	push   ebx
c0006830:	e8 4b fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006835:	6a 00                	push   0x0
c0006837:	68 2a b2 01 c0       	push   0xc001b22a
c000683c:	6a 21                	push   0x21
c000683e:	53                   	push   ebx
c000683f:	e8 3c fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006844:	83 c4 20             	add    esp,0x20
c0006847:	6a 00                	push   0x0
c0006849:	68 31 b2 01 c0       	push   0xc001b231
c000684e:	6a 22                	push   0x22
c0006850:	53                   	push   ebx
c0006851:	e8 2a fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006856:	6a 00                	push   0x0
c0006858:	68 a8 b1 01 c0       	push   0xc001b1a8
c000685d:	6a 23                	push   0x23
c000685f:	53                   	push   ebx
c0006860:	e8 1b fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006865:	83 c4 20             	add    esp,0x20
c0006868:	6a 00                	push   0x0
c000686a:	68 b2 b1 01 c0       	push   0xc001b1b2
c000686f:	6a 24                	push   0x24
c0006871:	53                   	push   ebx
c0006872:	e8 09 fe ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006877:	6a 00                	push   0x0
c0006879:	68 bc b1 01 c0       	push   0xc001b1bc
c000687e:	6a 25                	push   0x25
c0006880:	53                   	push   ebx
c0006881:	e8 fa fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006886:	83 c4 20             	add    esp,0x20
c0006889:	6a 00                	push   0x0
c000688b:	68 c6 b1 01 c0       	push   0xc001b1c6
c0006890:	6a 26                	push   0x26
c0006892:	53                   	push   ebx
c0006893:	e8 e8 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c0006898:	6a 00                	push   0x0
c000689a:	68 d0 b1 01 c0       	push   0xc001b1d0
c000689f:	6a 27                	push   0x27
c00068a1:	53                   	push   ebx
c00068a2:	e8 d9 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068a7:	83 c4 20             	add    esp,0x20
c00068aa:	6a 00                	push   0x0
c00068ac:	68 da b1 01 c0       	push   0xc001b1da
c00068b1:	6a 28                	push   0x28
c00068b3:	53                   	push   ebx
c00068b4:	e8 c7 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068b9:	6a 00                	push   0x0
c00068bb:	68 e4 b1 01 c0       	push   0xc001b1e4
c00068c0:	6a 29                	push   0x29
c00068c2:	53                   	push   ebx
c00068c3:	e8 b8 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068c8:	83 c4 20             	add    esp,0x20
c00068cb:	6a 00                	push   0x0
c00068cd:	68 ee b1 01 c0       	push   0xc001b1ee
c00068d2:	6a 2a                	push   0x2a
c00068d4:	53                   	push   ebx
c00068d5:	e8 a6 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068da:	6a 00                	push   0x0
c00068dc:	68 f8 b1 01 c0       	push   0xc001b1f8
c00068e1:	6a 2b                	push   0x2b
c00068e3:	53                   	push   ebx
c00068e4:	e8 97 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068e9:	83 c4 20             	add    esp,0x20
c00068ec:	6a 00                	push   0x0
c00068ee:	68 02 b2 01 c0       	push   0xc001b202
c00068f3:	6a 2c                	push   0x2c
c00068f5:	53                   	push   ebx
c00068f6:	e8 85 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00068fb:	6a 00                	push   0x0
c00068fd:	68 0c b2 01 c0       	push   0xc001b20c
c0006902:	6a 2d                	push   0x2d
c0006904:	53                   	push   ebx
c0006905:	e8 76 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000690a:	83 c4 20             	add    esp,0x20
c000690d:	6a 00                	push   0x0
c000690f:	68 16 b2 01 c0       	push   0xc001b216
c0006914:	6a 2e                	push   0x2e
c0006916:	53                   	push   ebx
c0006917:	e8 64 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000691c:	6a 00                	push   0x0
c000691e:	68 20 b2 01 c0       	push   0xc001b220
c0006923:	6a 2f                	push   0x2f
c0006925:	53                   	push   ebx
c0006926:	e8 55 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000692b:	83 c4 20             	add    esp,0x20
c000692e:	6a 00                	push   0x0
c0006930:	68 76 b2 01 c0       	push   0xc001b276
c0006935:	6a 30                	push   0x30
c0006937:	53                   	push   ebx
c0006938:	e8 43 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000693d:	6a 00                	push   0x0
c000693f:	68 80 b2 01 c0       	push   0xc001b280
c0006944:	6a 31                	push   0x31
c0006946:	53                   	push   ebx
c0006947:	e8 34 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000694c:	83 c4 20             	add    esp,0x20
c000694f:	6a 00                	push   0x0
c0006951:	68 8a b2 01 c0       	push   0xc001b28a
c0006956:	6a 32                	push   0x32
c0006958:	53                   	push   ebx
c0006959:	e8 22 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000695e:	6a 00                	push   0x0
c0006960:	68 94 b2 01 c0       	push   0xc001b294
c0006965:	6a 33                	push   0x33
c0006967:	53                   	push   ebx
c0006968:	e8 13 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000696d:	83 c4 20             	add    esp,0x20
c0006970:	6a 00                	push   0x0
c0006972:	68 9e b2 01 c0       	push   0xc001b29e
c0006977:	6a 34                	push   0x34
c0006979:	53                   	push   ebx
c000697a:	e8 01 fd ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000697f:	6a 00                	push   0x0
c0006981:	68 a8 b2 01 c0       	push   0xc001b2a8
c0006986:	6a 35                	push   0x35
c0006988:	53                   	push   ebx
c0006989:	e8 f2 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c000698e:	83 c4 20             	add    esp,0x20
c0006991:	6a 00                	push   0x0
c0006993:	68 b2 b2 01 c0       	push   0xc001b2b2
c0006998:	6a 36                	push   0x36
c000699a:	53                   	push   ebx
c000699b:	e8 e0 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00069a0:	6a 00                	push   0x0
c00069a2:	68 bc b2 01 c0       	push   0xc001b2bc
c00069a7:	6a 37                	push   0x37
c00069a9:	53                   	push   ebx
c00069aa:	e8 d1 fc ff ff       	call   c0006680 <IDT::addEntry(int, void (*)(), bool)>
c00069af:	83 c4 1c             	add    esp,0x1c
c00069b2:	6a 03                	push   0x3
c00069b4:	6a 02                	push   0x2
c00069b6:	ff 35 14 f5 01 c0    	push   DWORD PTR ds:0xc001f514
c00069bc:	e8 39 24 00 00       	call   c0008dfa <VAS::allocatePages(int, int)>
c00069c1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00069c8:	89 c6                	mov    esi,eax
c00069ca:	e8 92 01 00 00       	call   c0006b61 <malloc>
c00069cf:	81 c6 00 20 00 00    	add    esi,0x2000
c00069d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00069d8:	89 c7                	mov    edi,eax
c00069da:	e8 01 16 00 00       	call   c0007fe0 <TSS::TSS()>
c00069df:	83 c4 0c             	add    esp,0xc
c00069e2:	68 46 b1 01 c0       	push   0xc001b146
c00069e7:	56                   	push   esi
c00069e8:	57                   	push   edi
c00069e9:	e8 36 16 00 00       	call   c0008024 <TSS::setup(unsigned long, unsigned long)>
c00069ee:	89 c6                	mov    esi,eax
c00069f0:	58                   	pop    eax
c00069f1:	5a                   	pop    edx
c00069f2:	6a 00                	push   0x0
c00069f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f8:	50                   	push   eax
c00069f9:	e8 d6 fb ff ff       	call   c00065d4 <IDTEntry::IDTEntry(bool)>
c00069fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006a02:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0006a07:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0006a0e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0006a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006a18:	80 ce 05             	or     dh,0x5
c0006a1b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0006a1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006a22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006a26:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0006a29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a2c:	e8 87 fc ff ff       	call   c00066b8 <IDT::flush()>
c0006a31:	83 c4 20             	add    esp,0x20
c0006a34:	5b                   	pop    ebx
c0006a35:	5e                   	pop    esi
c0006a36:	5f                   	pop    edi
c0006a37:	c3                   	ret    

c0006a38 <sbrk>:
c0006a38:	55                   	push   ebp
c0006a39:	57                   	push   edi
c0006a3a:	56                   	push   esi
c0006a3b:	53                   	push   ebx
c0006a3c:	83 ec 1c             	sub    esp,0x1c
c0006a3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006a43:	85 c0                	test   eax,eax
c0006a45:	74 5f                	je     c0006aa6 <sbrk+0x6e>
c0006a47:	78 64                	js     c0006aad <sbrk+0x75>
c0006a49:	8b 15 f0 eb 01 c0    	mov    edx,DWORD PTR ds:0xc001ebf0
c0006a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006a53:	05 ff 0f 00 00       	add    eax,0xfff
c0006a58:	89 c5                	mov    ebp,eax
c0006a5a:	78 69                	js     c0006ac5 <sbrk+0x8d>
c0006a5c:	c1 fd 0c             	sar    ebp,0xc
c0006a5f:	bb 00 00 00 00       	mov    ebx,0x0
c0006a64:	8b 35 14 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f514
c0006a6a:	8b 3d f0 eb 01 c0    	mov    edi,DWORD PTR ds:0xc001ebf0
c0006a70:	e8 b9 04 00 00       	call   c0006f2e <Phys::allocatePage()>
c0006a75:	68 01 04 00 00       	push   0x401
c0006a7a:	57                   	push   edi
c0006a7b:	50                   	push   eax
c0006a7c:	56                   	push   esi
c0006a7d:	e8 74 22 00 00       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0006a82:	81 05 f0 eb 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001ebf0,0x1000
c0006a8c:	43                   	inc    ebx
c0006a8d:	83 c4 10             	add    esp,0x10
c0006a90:	39 dd                	cmp    ebp,ebx
c0006a92:	75 d0                	jne    c0006a64 <sbrk+0x2c>
c0006a94:	0f 20 d8             	mov    eax,cr3
c0006a97:	0f 22 d8             	mov    cr3,eax
c0006a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a9e:	83 c4 1c             	add    esp,0x1c
c0006aa1:	5b                   	pop    ebx
c0006aa2:	5e                   	pop    esi
c0006aa3:	5f                   	pop    edi
c0006aa4:	5d                   	pop    ebp
c0006aa5:	c3                   	ret    
c0006aa6:	a1 f0 eb 01 c0       	mov    eax,ds:0xc001ebf0
c0006aab:	eb f1                	jmp    c0006a9e <sbrk+0x66>
c0006aad:	83 ec 08             	sub    esp,0x8
c0006ab0:	50                   	push   eax
c0006ab1:	68 b4 cb 01 c0       	push   0xc001cbb4
c0006ab6:	e8 69 2e 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0006abb:	83 c4 10             	add    esp,0x10
c0006abe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006ac3:	eb d9                	jmp    c0006a9e <sbrk+0x66>
c0006ac5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0006acb:	eb 8f                	jmp    c0006a5c <sbrk+0x24>

c0006acd <mmap>:
c0006acd:	83 ec 18             	sub    esp,0x18
c0006ad0:	68 e4 cb 01 c0       	push   0xc001cbe4
c0006ad5:	e8 99 89 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0006ada:	b8 00 00 00 00       	mov    eax,0x0
c0006adf:	83 c4 1c             	add    esp,0x1c
c0006ae2:	c3                   	ret    

c0006ae3 <munmap>:
c0006ae3:	83 ec 18             	sub    esp,0x18
c0006ae6:	68 e9 cb 01 c0       	push   0xc001cbe9
c0006aeb:	e8 83 89 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0006af0:	b8 00 00 00 00       	mov    eax,0x0
c0006af5:	83 c4 1c             	add    esp,0x1c
c0006af8:	c3                   	ret    

c0006af9 <liballoc_lock()>:
c0006af9:	fa                   	cli    
c0006afa:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0006b00:	b8 00 00 00 00       	mov    eax,0x0
c0006b05:	c3                   	ret    

c0006b06 <liballoc_unlock()>:
c0006b06:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0006b0b:	48                   	dec    eax
c0006b0c:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0006b11:	75 01                	jne    c0006b14 <liballoc_unlock()+0xe>
c0006b13:	fb                   	sti    
c0006b14:	b8 00 00 00 00       	mov    eax,0x0
c0006b19:	c3                   	ret    

c0006b1a <liballoc_alloc(int)>:
c0006b1a:	83 ec 10             	sub    esp,0x10
c0006b1d:	6a 01                	push   0x1
c0006b1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006b23:	ff 35 14 f5 01 c0    	push   DWORD PTR ds:0xc001f514
c0006b29:	e8 cc 22 00 00       	call   c0008dfa <VAS::allocatePages(int, int)>
c0006b2e:	83 c4 1c             	add    esp,0x1c
c0006b31:	c3                   	ret    

c0006b32 <liballoc_free(void*, int)>:
c0006b32:	83 ec 14             	sub    esp,0x14
c0006b35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0006b39:	ff 35 14 f5 01 c0    	push   DWORD PTR ds:0xc001f514
c0006b3f:	e8 72 1f 00 00       	call   c0008ab6 <VAS::freeAllocatedPages(unsigned long)>
c0006b44:	b8 00 00 00 00       	mov    eax,0x0
c0006b49:	83 c4 1c             	add    esp,0x1c
c0006b4c:	c3                   	ret    

c0006b4d <realloc>:
c0006b4d:	83 ec 14             	sub    esp,0x14
c0006b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b58:	e8 f4 a9 ff ff       	call   c0001551 <dlrealloc>
c0006b5d:	83 c4 1c             	add    esp,0x1c
c0006b60:	c3                   	ret    

c0006b61 <malloc>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b68:	e8 a7 a4 ff ff       	call   c0001014 <dlmalloc>
c0006b6d:	83 c4 1c             	add    esp,0x1c
c0006b70:	c3                   	ret    

c0006b71 <free>:
c0006b71:	83 ec 18             	sub    esp,0x18
c0006b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b78:	e8 3c a1 ff ff       	call   c0000cb9 <dlfree>
c0006b7d:	83 c4 1c             	add    esp,0x1c
c0006b80:	c3                   	ret    

c0006b81 <rfree>:
c0006b81:	83 ec 18             	sub    esp,0x18
c0006b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b88:	e8 2c a1 ff ff       	call   c0000cb9 <dlfree>
c0006b8d:	83 c4 1c             	add    esp,0x1c
c0006b90:	c3                   	ret    

c0006b91 <calloc>:
c0006b91:	56                   	push   esi
c0006b92:	53                   	push   ebx
c0006b93:	83 ec 10             	sub    esp,0x10
c0006b96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006b9a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0006b9f:	53                   	push   ebx
c0006ba0:	e8 bc ff ff ff       	call   c0006b61 <malloc>
c0006ba5:	89 c6                	mov    esi,eax
c0006ba7:	83 c4 0c             	add    esp,0xc
c0006baa:	53                   	push   ebx
c0006bab:	6a 00                	push   0x0
c0006bad:	50                   	push   eax
c0006bae:	e8 3d 99 ff ff       	call   c00004f0 <memset>
c0006bb3:	89 f0                	mov    eax,esi
c0006bb5:	83 c4 14             	add    esp,0x14
c0006bb8:	5b                   	pop    ebx
c0006bb9:	5e                   	pop    esi
c0006bba:	c3                   	ret    

c0006bbb <Krnl::setBootMessage(char const*)>:
c0006bbb:	57                   	push   edi
c0006bbc:	56                   	push   esi
c0006bbd:	53                   	push   ebx
c0006bbe:	81 ec a4 00 00 00    	sub    esp,0xa4
c0006bc4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0006bcb:	68 9e 00 00 00       	push   0x9e
c0006bd0:	6a 00                	push   0x0
c0006bd2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0006bd6:	56                   	push   esi
c0006bd7:	e8 14 99 ff ff       	call   c00004f0 <memset>
c0006bdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006bdf:	e8 7c 99 ff ff       	call   c0000560 <strlen>
c0006be4:	ba 50 00 00 00       	mov    edx,0x50
c0006be9:	83 c4 10             	add    esp,0x10
c0006bec:	29 c2                	sub    edx,eax
c0006bee:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0006bf2:	d1 ea                	shr    edx,1
c0006bf4:	84 c0                	test   al,al
c0006bf6:	74 19                	je     c0006c11 <Krnl::setBootMessage(char const*)+0x56>
c0006bf8:	01 d2                	add    edx,edx
c0006bfa:	43                   	inc    ebx
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	80 cc 0f             	or     ah,0xf
c0006c00:	83 c2 02             	add    edx,0x2
c0006c03:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0006c07:	43                   	inc    ebx
c0006c08:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0006c0d:	84 c0                	test   al,al
c0006c0f:	75 ec                	jne    c0006bfd <Krnl::setBootMessage(char const*)+0x42>
c0006c11:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0006c16:	b9 9e 00 00 00       	mov    ecx,0x9e
c0006c1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006c1d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0006c23:	5b                   	pop    ebx
c0006c24:	5e                   	pop    esi
c0006c25:	5f                   	pop    edi
c0006c26:	c3                   	ret    

c0006c27 <kernel_main>:
c0006c27:	55                   	push   ebp
c0006c28:	57                   	push   edi
c0006c29:	bf f9 03 00 00       	mov    edi,0x3f9
c0006c2e:	56                   	push   esi
c0006c2f:	89 fa                	mov    edx,edi
c0006c31:	53                   	push   ebx
c0006c32:	31 f6                	xor    esi,esi
c0006c34:	83 ec 38             	sub    esp,0x38
c0006c37:	a1 00 05 00 00       	mov    eax,ds:0x500
c0006c3c:	a3 40 f4 01 c0       	mov    ds:0xc001f440,eax
c0006c41:	89 f0                	mov    eax,esi
c0006c43:	ee                   	out    dx,al
c0006c44:	bb fb 03 00 00       	mov    ebx,0x3fb
c0006c49:	b0 80                	mov    al,0x80
c0006c4b:	89 da                	mov    edx,ebx
c0006c4d:	ee                   	out    dx,al
c0006c4e:	b1 03                	mov    cl,0x3
c0006c50:	ba f8 03 00 00       	mov    edx,0x3f8
c0006c55:	88 c8                	mov    al,cl
c0006c57:	ee                   	out    dx,al
c0006c58:	89 f0                	mov    eax,esi
c0006c5a:	89 fa                	mov    edx,edi
c0006c5c:	ee                   	out    dx,al
c0006c5d:	88 c8                	mov    al,cl
c0006c5f:	89 da                	mov    edx,ebx
c0006c61:	ee                   	out    dx,al
c0006c62:	b0 c7                	mov    al,0xc7
c0006c64:	ba fa 03 00 00       	mov    edx,0x3fa
c0006c69:	ee                   	out    dx,al
c0006c6a:	b0 0b                	mov    al,0xb
c0006c6c:	ba fc 03 00 00       	mov    edx,0x3fc
c0006c71:	ee                   	out    dx,al
c0006c72:	68 f0 cb 01 c0       	push   0xc001cbf0
c0006c77:	e8 a8 2c 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0006c7c:	0f be 05 00 ec 01 c0 	movsx  eax,BYTE PTR ds:0xc001ec00
c0006c83:	83 c4 10             	add    esp,0x10
c0006c86:	84 c0                	test   al,al
c0006c88:	74 5c                	je     c0006ce6 <kernel_main+0xbf>
c0006c8a:	31 db                	xor    ebx,ebx
c0006c8c:	bd 0a 00 00 00       	mov    ebp,0xa
c0006c91:	bf 05 00 00 00       	mov    edi,0x5
c0006c96:	31 f6                	xor    esi,esi
c0006c98:	eb 14                	jmp    c0006cae <kernel_main+0x87>
c0006c9a:	47                   	inc    edi
c0006c9b:	bd 0a 00 00 00       	mov    ebp,0xa
c0006ca0:	31 f6                	xor    esi,esi
c0006ca2:	43                   	inc    ebx
c0006ca3:	0f be 83 00 ec 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1400]
c0006caa:	84 c0                	test   al,al
c0006cac:	74 38                	je     c0006ce6 <kernel_main+0xbf>
c0006cae:	80 be 36 ec 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe13ca],0xdb
c0006cb5:	0f 84 97 00 00 00    	je     c0006d52 <kernel_main+0x12b>
c0006cbb:	3c 0d                	cmp    al,0xd
c0006cbd:	74 e3                	je     c0006ca2 <kernel_main+0x7b>
c0006cbf:	3c 0a                	cmp    al,0xa
c0006cc1:	74 d7                	je     c0006c9a <kernel_main+0x73>
c0006cc3:	83 ec 0c             	sub    esp,0xc
c0006cc6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0006cca:	57                   	push   edi
c0006ccb:	43                   	inc    ebx
c0006ccc:	52                   	push   edx
c0006ccd:	46                   	inc    esi
c0006cce:	6a 00                	push   0x0
c0006cd0:	6a 0e                	push   0xe
c0006cd2:	50                   	push   eax
c0006cd3:	e8 18 e6 00 00       	call   c00152f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0006cd8:	83 c4 20             	add    esp,0x20
c0006cdb:	0f be 83 00 ec 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe1400]
c0006ce2:	84 c0                	test   al,al
c0006ce4:	75 c8                	jne    c0006cae <kernel_main+0x87>
c0006ce6:	83 ec 0c             	sub    esp,0xc
c0006ce9:	a1 24 05 00 00       	mov    eax,ds:0x524
c0006cee:	05 ff 0f 00 00       	add    eax,0xfff
c0006cf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0006cf8:	50                   	push   eax
c0006cf9:	e8 82 03 00 00       	call   c0007080 <Phys::physicalMemorySetup(unsigned int)>
c0006cfe:	e8 59 1b 00 00       	call   c000885c <Virt::virtualMemorySetup()>
c0006d03:	58                   	pop    eax
c0006d04:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0006d08:	53                   	push   ebx
c0006d09:	e8 16 27 00 00       	call   c0009424 <VAS::VAS()>
c0006d0e:	89 1d 14 f5 01 c0    	mov    DWORD PTR ds:0xc001f514,ebx
c0006d14:	e8 07 93 ff ff       	call   c0000020 <callGlobalConstructors>
c0006d19:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0006d20:	e8 3c fe ff ff       	call   c0006b61 <malloc>
c0006d25:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d28:	89 c6                	mov    esi,eax
c0006d2a:	e8 6b f1 ff ff       	call   c0005e9a <Computer::Computer()>
c0006d2f:	6a 00                	push   0x0
c0006d31:	89 35 28 f4 01 c0    	mov    DWORD PTR ds:0xc001f428,esi
c0006d37:	6a 00                	push   0x0
c0006d39:	6a 00                	push   0x0
c0006d3b:	56                   	push   esi
c0006d3c:	e8 ff f4 ff ff       	call   c0006240 <Computer::open(int, int, void*)>
c0006d41:	83 c4 14             	add    esp,0x14
c0006d44:	53                   	push   ebx
c0006d45:	e8 48 1e 00 00       	call   c0008b92 <VAS::~VAS()>
c0006d4a:	83 c4 3c             	add    esp,0x3c
c0006d4d:	5b                   	pop    ebx
c0006d4e:	5e                   	pop    esi
c0006d4f:	5f                   	pop    edi
c0006d50:	5d                   	pop    ebp
c0006d51:	c3                   	ret    
c0006d52:	31 d2                	xor    edx,edx
c0006d54:	8a 96 35 ec 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe13cb]
c0006d5a:	83 e2 fe             	and    edx,0xfffffffe
c0006d5d:	81 fa ba 00 00 00    	cmp    edx,0xba
c0006d63:	0f 85 52 ff ff ff    	jne    c0006cbb <kernel_main+0x94>
c0006d69:	45                   	inc    ebp
c0006d6a:	e9 4c ff ff ff       	jmp    c0006cbb <kernel_main+0x94>

c0006d6f <Phys::allocateDMA(unsigned long)>:
c0006d6f:	55                   	push   ebp
c0006d70:	31 ed                	xor    ebp,ebp
c0006d72:	57                   	push   edi
c0006d73:	56                   	push   esi
c0006d74:	53                   	push   ebx
c0006d75:	31 db                	xor    ebx,ebx
c0006d77:	83 ec 1c             	sub    esp,0x1c
c0006d7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006d7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006d86:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	c1 ef 0c             	shr    edi,0xc
c0006d91:	eb 19                	jmp    c0006dac <Phys::allocateDMA(unsigned long)+0x3d>
c0006d93:	85 c0                	test   eax,eax
c0006d95:	75 06                	jne    c0006d9d <Phys::allocateDMA(unsigned long)+0x2e>
c0006d97:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d9b:	89 dd                	mov    ebp,ebx
c0006d9d:	8d 70 01             	lea    esi,[eax+0x1]
c0006da0:	39 f7                	cmp    edi,esi
c0006da2:	74 33                	je     c0006dd7 <Phys::allocateDMA(unsigned long)+0x68>
c0006da4:	89 f0                	mov    eax,esi
c0006da6:	43                   	inc    ebx
c0006da7:	83 fb 0f             	cmp    ebx,0xf
c0006daa:	7f 11                	jg     c0006dbd <Phys::allocateDMA(unsigned long)+0x4e>
c0006dac:	80 bb 5c f4 01 c0 00 	cmp    BYTE PTR [ebx-0x3ffe0ba4],0x0
c0006db3:	74 de                	je     c0006d93 <Phys::allocateDMA(unsigned long)+0x24>
c0006db5:	31 c0                	xor    eax,eax
c0006db7:	43                   	inc    ebx
c0006db8:	83 fb 0f             	cmp    ebx,0xf
c0006dbb:	7e ef                	jle    c0006dac <Phys::allocateDMA(unsigned long)+0x3d>
c0006dbd:	83 ec 0c             	sub    esp,0xc
c0006dc0:	68 08 cc 01 c0       	push   0xc001cc08
c0006dc5:	e8 a9 86 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0006dca:	83 c4 10             	add    esp,0x10
c0006dcd:	31 c0                	xor    eax,eax
c0006dcf:	83 c4 1c             	add    esp,0x1c
c0006dd2:	5b                   	pop    ebx
c0006dd3:	5e                   	pop    esi
c0006dd4:	5f                   	pop    edi
c0006dd5:	5d                   	pop    ebp
c0006dd6:	c3                   	ret    
c0006dd7:	89 e9                	mov    ecx,ebp
c0006dd9:	c1 f9 04             	sar    ecx,0x4
c0006ddc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006de0:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0006de4:	89 ca                	mov    edx,ecx
c0006de6:	4a                   	dec    edx
c0006de7:	79 03                	jns    c0006dec <Phys::allocateDMA(unsigned long)+0x7d>
c0006de9:	8d 51 0e             	lea    edx,[ecx+0xe]
c0006dec:	c1 fa 04             	sar    edx,0x4
c0006def:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0006df3:	74 08                	je     c0006dfd <Phys::allocateDMA(unsigned long)+0x8e>
c0006df5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006df9:	31 c0                	xor    eax,eax
c0006dfb:	eb ba                	jmp    c0006db7 <Phys::allocateDMA(unsigned long)+0x48>
c0006dfd:	85 f6                	test   esi,esi
c0006dff:	74 15                	je     c0006e16 <Phys::allocateDMA(unsigned long)+0xa7>
c0006e01:	8d 95 5c f4 01 c0    	lea    edx,[ebp-0x3ffe0ba4]
c0006e07:	8d 84 05 5d f4 01 c0 	lea    eax,[ebp+eax*1-0x3ffe0ba3]
c0006e0e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0006e11:	42                   	inc    edx
c0006e12:	39 d0                	cmp    eax,edx
c0006e14:	75 f8                	jne    c0006e0e <Phys::allocateDMA(unsigned long)+0x9f>
c0006e16:	01 3d 54 f4 01 c0    	add    DWORD PTR ds:0xc001f454,edi
c0006e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e20:	85 c0                	test   eax,eax
c0006e22:	74 17                	je     c0006e3b <Phys::allocateDMA(unsigned long)+0xcc>
c0006e24:	83 ec 0c             	sub    esp,0xc
c0006e27:	68 08 cc 01 c0       	push   0xc001cc08
c0006e2c:	e8 42 86 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0006e31:	83 c4 10             	add    esp,0x10
c0006e34:	89 f0                	mov    eax,esi
c0006e36:	e9 6b ff ff ff       	jmp    c0006da6 <Phys::allocateDMA(unsigned long)+0x37>
c0006e3b:	c1 e5 0c             	shl    ebp,0xc
c0006e3e:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0006e44:	eb 89                	jmp    c0006dcf <Phys::allocateDMA(unsigned long)+0x60>

c0006e46 <Phys::freeDMA(unsigned long, unsigned long)>:
c0006e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e4a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0006e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e54:	c1 ea 0c             	shr    edx,0xc
c0006e57:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0006e5c:	29 15 54 f4 01 c0    	sub    DWORD PTR ds:0xc001f454,edx
c0006e62:	c1 e8 0c             	shr    eax,0xc
c0006e65:	85 d2                	test   edx,edx
c0006e67:	74 0f                	je     c0006e78 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0006e69:	05 5c f4 01 c0       	add    eax,0xc001f45c
c0006e6e:	01 c2                	add    edx,eax
c0006e70:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e73:	40                   	inc    eax
c0006e74:	39 d0                	cmp    eax,edx
c0006e76:	75 f8                	jne    c0006e70 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0006e78:	c3                   	ret    

c0006e79 <Phys::setPageState(unsigned long, bool)>:
c0006e79:	56                   	push   esi
c0006e7a:	ba 01 00 00 00       	mov    edx,0x1
c0006e7f:	53                   	push   ebx
c0006e80:	8b 35 44 ed 01 c0    	mov    esi,DWORD PTR ds:0xc001ed44
c0006e86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006e8e:	89 c8                	mov    eax,ecx
c0006e90:	83 e1 07             	and    ecx,0x7
c0006e93:	c1 e8 03             	shr    eax,0x3
c0006e96:	d3 e3                	shl    ebx,cl
c0006e98:	01 c6                	add    esi,eax
c0006e9a:	d3 e2                	shl    edx,cl
c0006e9c:	f7 d2                	not    edx
c0006e9e:	20 16                	and    BYTE PTR [esi],dl
c0006ea0:	03 05 44 ed 01 c0    	add    eax,DWORD PTR ds:0xc001ed44
c0006ea6:	08 18                	or     BYTE PTR [eax],bl
c0006ea8:	5b                   	pop    ebx
c0006ea9:	5e                   	pop    esi
c0006eaa:	c3                   	ret    

c0006eab <Phys::getPageState(unsigned long)>:
c0006eab:	53                   	push   ebx
c0006eac:	8b 15 44 ed 01 c0    	mov    edx,DWORD PTR ds:0xc001ed44
c0006eb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006eb6:	31 db                	xor    ebx,ebx
c0006eb8:	89 c8                	mov    eax,ecx
c0006eba:	83 e1 07             	and    ecx,0x7
c0006ebd:	c1 e8 03             	shr    eax,0x3
c0006ec0:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0006ec3:	89 d8                	mov    eax,ebx
c0006ec5:	5b                   	pop    ebx
c0006ec6:	d3 f8                	sar    eax,cl
c0006ec8:	83 e0 01             	and    eax,0x1
c0006ecb:	c3                   	ret    

c0006ecc <Phys::freePage(unsigned long)>:
c0006ecc:	53                   	push   ebx
c0006ecd:	83 ec 08             	sub    esp,0x8
c0006ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed4:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0006eda:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0006ee0:	76 3a                	jbe    c0006f1c <Phys::freePage(unsigned long)+0x50>
c0006ee2:	c1 e8 0c             	shr    eax,0xc
c0006ee5:	50                   	push   eax
c0006ee6:	89 c3                	mov    ebx,eax
c0006ee8:	e8 be ff ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006eed:	5a                   	pop    edx
c0006eee:	84 c0                	test   al,al
c0006ef0:	74 19                	je     c0006f0b <Phys::freePage(unsigned long)+0x3f>
c0006ef2:	83 ec 08             	sub    esp,0x8
c0006ef5:	ff 0d 54 f4 01 c0    	dec    DWORD PTR ds:0xc001f454
c0006efb:	6a 00                	push   0x0
c0006efd:	53                   	push   ebx
c0006efe:	e8 76 ff ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006f03:	83 c4 10             	add    esp,0x10
c0006f06:	83 c4 08             	add    esp,0x8
c0006f09:	5b                   	pop    ebx
c0006f0a:	c3                   	ret    
c0006f0b:	c7 44 24 10 ad cc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ccad
c0006f13:	83 c4 08             	add    esp,0x8
c0006f16:	5b                   	pop    ebx
c0006f17:	e9 57 85 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c0006f1c:	68 00 10 00 00       	push   0x1000
c0006f21:	50                   	push   eax
c0006f22:	e8 1f ff ff ff       	call   c0006e46 <Phys::freeDMA(unsigned long, unsigned long)>
c0006f27:	59                   	pop    ecx
c0006f28:	5b                   	pop    ebx
c0006f29:	83 c4 08             	add    esp,0x8
c0006f2c:	5b                   	pop    ebx
c0006f2d:	c3                   	ret    

c0006f2e <Phys::allocatePage()>:
c0006f2e:	56                   	push   esi
c0006f2f:	53                   	push   ebx
c0006f30:	83 ec 14             	sub    esp,0x14
c0006f33:	8b 35 48 f4 01 c0    	mov    esi,DWORD PTR ds:0xc001f448
c0006f39:	89 f3                	mov    ebx,esi
c0006f3b:	eb 0a                	jmp    c0006f47 <Phys::allocatePage()+0x19>
c0006f3d:	89 1d 48 f4 01 c0    	mov    DWORD PTR ds:0xc001f448,ebx
c0006f43:	39 de                	cmp    esi,ebx
c0006f45:	74 24                	je     c0006f6b <Phys::allocatePage()+0x3d>
c0006f47:	53                   	push   ebx
c0006f48:	e8 5e ff ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006f4d:	5a                   	pop    edx
c0006f4e:	84 c0                	test   al,al
c0006f50:	74 5f                	je     c0006fb1 <Phys::allocatePage()+0x83>
c0006f52:	43                   	inc    ebx
c0006f53:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0006f59:	75 e2                	jne    c0006f3d <Phys::allocatePage()+0xf>
c0006f5b:	31 db                	xor    ebx,ebx
c0006f5d:	c7 05 48 f4 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f448,0x0
c0006f67:	39 de                	cmp    esi,ebx
c0006f69:	75 dc                	jne    c0006f47 <Phys::allocatePage()+0x19>
c0006f6b:	83 ec 0c             	sub    esp,0xc
c0006f6e:	80 35 6c f4 01 c0 01 	xor    BYTE PTR ds:0xc001f46c,0x1
c0006f75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0006f7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006f7d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0006f83:	50                   	push   eax
c0006f84:	e8 bb 26 00 00       	call   c0009644 <VAS::scanForEviction()>
c0006f89:	83 c4 10             	add    esp,0x10
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	75 3f                	jne    c0006fcf <Phys::allocatePage()+0xa1>
c0006f90:	83 ec 0c             	sub    esp,0xc
c0006f93:	68 30 cc 01 c0       	push   0xc001cc30
c0006f98:	e8 d6 84 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0006f9d:	83 c4 10             	add    esp,0x10
c0006fa0:	8b 1d 48 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f448
c0006fa6:	53                   	push   ebx
c0006fa7:	e8 ff fe ff ff       	call   c0006eab <Phys::getPageState(unsigned long)>
c0006fac:	5a                   	pop    edx
c0006fad:	84 c0                	test   al,al
c0006faf:	75 a1                	jne    c0006f52 <Phys::allocatePage()+0x24>
c0006fb1:	6a 01                	push   0x1
c0006fb3:	53                   	push   ebx
c0006fb4:	e8 c0 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006fb9:	a1 48 f4 01 c0       	mov    eax,ds:0xc001f448
c0006fbe:	5a                   	pop    edx
c0006fbf:	ff 05 54 f4 01 c0    	inc    DWORD PTR ds:0xc001f454
c0006fc5:	c1 e0 0c             	shl    eax,0xc
c0006fc8:	59                   	pop    ecx
c0006fc9:	83 c4 14             	add    esp,0x14
c0006fcc:	5b                   	pop    ebx
c0006fcd:	5e                   	pop    esi
c0006fce:	c3                   	ret    
c0006fcf:	83 ec 08             	sub    esp,0x8
c0006fd2:	89 c2                	mov    edx,eax
c0006fd4:	6a 01                	push   0x1
c0006fd6:	c1 ea 0c             	shr    edx,0xc
c0006fd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006fdd:	52                   	push   edx
c0006fde:	e8 96 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0006fe3:	83 c4 10             	add    esp,0x10
c0006fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fea:	eb dd                	jmp    c0006fc9 <Phys::allocatePage()+0x9b>

c0006fec <Phys::allocateContiguousPages(int)>:
c0006fec:	57                   	push   edi
c0006fed:	56                   	push   esi
c0006fee:	53                   	push   ebx
c0006fef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006ff3:	fa                   	cli    
c0006ff4:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0006ffa:	31 db                	xor    ebx,ebx
c0006ffc:	85 db                	test   ebx,ebx
c0006ffe:	75 11                	jne    c0007011 <Phys::allocateContiguousPages(int)+0x25>
c0007000:	e8 29 ff ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007005:	83 fe 01             	cmp    esi,0x1
c0007008:	89 c7                	mov    edi,eax
c000700a:	74 21                	je     c000702d <Phys::allocateContiguousPages(int)+0x41>
c000700c:	bb 01 00 00 00       	mov    ebx,0x1
c0007011:	e8 18 ff ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007016:	89 da                	mov    edx,ebx
c0007018:	c1 e2 0c             	shl    edx,0xc
c000701b:	01 fa                	add    edx,edi
c000701d:	39 c2                	cmp    edx,eax
c000701f:	74 20                	je     c0007041 <Phys::allocateContiguousPages(int)+0x55>
c0007021:	bb 01 00 00 00       	mov    ebx,0x1
c0007026:	89 c7                	mov    edi,eax
c0007028:	83 fe 01             	cmp    esi,0x1
c000702b:	75 e4                	jne    c0007011 <Phys::allocateContiguousPages(int)+0x25>
c000702d:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0007032:	48                   	dec    eax
c0007033:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0007038:	75 01                	jne    c000703b <Phys::allocateContiguousPages(int)+0x4f>
c000703a:	fb                   	sti    
c000703b:	89 f8                	mov    eax,edi
c000703d:	5b                   	pop    ebx
c000703e:	5e                   	pop    esi
c000703f:	5f                   	pop    edi
c0007040:	c3                   	ret    
c0007041:	43                   	inc    ebx
c0007042:	39 f3                	cmp    ebx,esi
c0007044:	75 b6                	jne    c0006ffc <Phys::allocateContiguousPages(int)+0x10>
c0007046:	eb e5                	jmp    c000702d <Phys::allocateContiguousPages(int)+0x41>

c0007048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007048:	56                   	push   esi
c0007049:	53                   	push   ebx
c000704a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000704e:	39 1d 4c f4 01 c0    	cmp    DWORD PTR ds:0xc001f44c,ebx
c0007054:	73 06                	jae    c000705c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007056:	89 1d 4c f4 01 c0    	mov    DWORD PTR ds:0xc001f44c,ebx
c000705c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007060:	c1 eb 0c             	shr    ebx,0xc
c0007063:	c1 e8 0c             	shr    eax,0xc
c0007066:	39 d8                	cmp    eax,ebx
c0007068:	73 13                	jae    c000707d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000706a:	6a 00                	push   0x0
c000706c:	8d 70 01             	lea    esi,[eax+0x1]
c000706f:	50                   	push   eax
c0007070:	e8 04 fe ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007075:	5a                   	pop    edx
c0007076:	89 f0                	mov    eax,esi
c0007078:	59                   	pop    ecx
c0007079:	39 f3                	cmp    ebx,esi
c000707b:	75 ed                	jne    c000706a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000707d:	5b                   	pop    ebx
c000707e:	5e                   	pop    esi
c000707f:	c3                   	ret    

c0007080 <Phys::physicalMemorySetup(unsigned int)>:
c0007080:	55                   	push   ebp
c0007081:	57                   	push   edi
c0007082:	56                   	push   esi
c0007083:	53                   	push   ebx
c0007084:	31 db                	xor    ebx,ebx
c0007086:	83 ec 40             	sub    esp,0x40
c0007089:	6a 10                	push   0x10
c000708b:	6a 00                	push   0x0
c000708d:	68 5c f4 01 c0       	push   0xc001f45c
c0007092:	e8 59 94 ff ff       	call   c00004f0 <memset>
c0007097:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000709b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00070a0:	05 00 10 00 00       	add    eax,0x1000
c00070a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00070a9:	5a                   	pop    edx
c00070aa:	59                   	pop    ecx
c00070ab:	50                   	push   eax
c00070ac:	68 c3 cc 01 c0       	push   0xc001ccc3
c00070b1:	e8 6e 28 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00070b6:	83 c4 10             	add    esp,0x10
c00070b9:	83 ec 08             	sub    esp,0x8
c00070bc:	6a 01                	push   0x1
c00070be:	53                   	push   ebx
c00070bf:	43                   	inc    ebx
c00070c0:	e8 b4 fd ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00070c5:	83 c4 10             	add    esp,0x10
c00070c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00070ce:	75 e9                	jne    c00070b9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00070d0:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c00070d6:	66 85 c0             	test   ax,ax
c00070d9:	0f 84 97 01 00 00    	je     c0007276 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00070df:	89 c7                	mov    edi,eax
c00070e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00070e9:	81 e7 ff ff 00 00    	and    edi,0xffff
c00070ef:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00070f4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00070f8:	eb 15                	jmp    c000710f <Phys::physicalMemorySetup(unsigned int)+0x8f>
c00070fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00070fe:	83 c3 18             	add    ebx,0x18
c0007101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007105:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007109:	0f 84 77 01 00 00    	je     c0007286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000710f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007112:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007115:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007118:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000711c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007120:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007122:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007125:	01 f0                	add    eax,esi
c0007127:	55                   	push   ebp
c0007128:	11 fa                	adc    edx,edi
c000712a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000712e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007136:	50                   	push   eax
c0007137:	56                   	push   esi
c0007138:	68 60 cc 01 c0       	push   0xc001cc60
c000713d:	e8 e2 27 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0007142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007146:	83 c4 10             	add    esp,0x10
c0007149:	09 f8                	or     eax,edi
c000714b:	0f 85 35 01 00 00    	jne    c0007286 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007151:	4d                   	dec    ebp
c0007152:	75 a6                	jne    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007154:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007158:	ba 00 00 08 00       	mov    edx,0x80000
c000715d:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007161:	39 f2                	cmp    edx,esi
c0007163:	89 c1                	mov    ecx,eax
c0007165:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000716d:	19 f9                	sbb    ecx,edi
c000716f:	0f 82 a7 00 00 00    	jb     c000721c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007175:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007179:	89 c1                	mov    ecx,eax
c000717b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000717f:	0f 83 97 00 00 00    	jae    c000721c <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007185:	ba 00 00 0a 00       	mov    edx,0xa0000
c000718a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000718e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007192:	39 fa                	cmp    edx,edi
c0007194:	19 e8                	sbb    eax,ebp
c0007196:	0f 82 9a 01 00 00    	jb     c0007336 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c000719c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00071a0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00071a4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00071aa:	ba ff 1f 00 00       	mov    edx,0x1fff
c00071af:	83 d5 ff             	adc    ebp,0xffffffff
c00071b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00071b6:	31 c0                	xor    eax,eax
c00071b8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00071bc:	39 fa                	cmp    edx,edi
c00071be:	89 c1                	mov    ecx,eax
c00071c0:	19 e9                	sbb    ecx,ebp
c00071c2:	0f 83 32 ff ff ff    	jae    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c00071c8:	be 00 00 08 00       	mov    esi,0x80000
c00071cd:	51                   	push   ecx
c00071ce:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00071d2:	57                   	push   edi
c00071d3:	56                   	push   esi
c00071d4:	68 84 cc 01 c0       	push   0xc001cc84
c00071d9:	e8 46 27 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00071de:	5d                   	pop    ebp
c00071df:	58                   	pop    eax
c00071e0:	57                   	push   edi
c00071e1:	56                   	push   esi
c00071e2:	e8 61 fe ff ff       	call   c0007048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00071e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00071eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00071f6:	03 05 58 f4 01 c0    	add    eax,DWORD PTR ds:0xc001f458
c00071fc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007203:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c0007208:	52                   	push   edx
c0007209:	50                   	push   eax
c000720a:	68 e9 cc 01 c0       	push   0xc001cce9
c000720f:	e8 10 27 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0007214:	83 c4 10             	add    esp,0x10
c0007217:	e9 de fe ff ff       	jmp    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000721c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007224:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007228:	39 ea                	cmp    edx,ebp
c000722a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000722e:	0f 82 c6 fe ff ff    	jb     c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007234:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007239:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000723d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007241:	0f 83 b3 fe ff ff    	jae    c00070fa <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007247:	39 ee                	cmp    esi,ebp
c0007249:	89 f8                	mov    eax,edi
c000724b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000724f:	0f 83 78 ff ff ff    	jae    c00071cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007255:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007259:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000725d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007261:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007265:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007269:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000726d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007271:	e9 57 ff ff ff       	jmp    c00071cd <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007276:	83 ec 0c             	sub    esp,0xc
c0007279:	68 db cc 01 c0       	push   0xc001ccdb
c000727e:	e8 f0 81 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0007283:	83 c4 10             	add    esp,0x10
c0007286:	83 ec 08             	sub    esp,0x8
c0007289:	bb 60 00 00 00       	mov    ebx,0x60
c000728e:	6a 00                	push   0x0
c0007290:	6a 06                	push   0x6
c0007292:	e8 e2 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007297:	58                   	pop    eax
c0007298:	5a                   	pop    edx
c0007299:	6a 00                	push   0x0
c000729b:	6a 07                	push   0x7
c000729d:	e8 d7 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072a2:	83 05 58 f4 01 c0 02 	add    DWORD PTR ds:0xc001f458,0x2
c00072a9:	83 c4 10             	add    esp,0x10
c00072ac:	83 ec 08             	sub    esp,0x8
c00072af:	6a 00                	push   0x0
c00072b1:	53                   	push   ebx
c00072b2:	43                   	inc    ebx
c00072b3:	e8 c1 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00072c1:	75 e9                	jne    c00072ac <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00072c3:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c00072c8:	bb 40 01 00 00       	mov    ebx,0x140
c00072cd:	83 c0 20             	add    eax,0x20
c00072d0:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c00072d5:	eb 22                	jmp    c00072f9 <Phys::physicalMemorySetup(unsigned int)+0x279>
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	6a 00                	push   0x0
c00072dc:	53                   	push   ebx
c00072dd:	43                   	inc    ebx
c00072de:	e8 96 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c00072e3:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	40                   	inc    eax
c00072ec:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00072f2:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c00072f7:	74 07                	je     c0007300 <Phys::physicalMemorySetup(unsigned int)+0x280>
c00072f9:	3d ff 03 00 00       	cmp    eax,0x3ff
c00072fe:	7e d7                	jle    c00072d7 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007300:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007305:	3d ff 07 00 00       	cmp    eax,0x7ff
c000730a:	7f 22                	jg     c000732e <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000730c:	83 ec 08             	sub    esp,0x8
c000730f:	6a 00                	push   0x0
c0007311:	53                   	push   ebx
c0007312:	43                   	inc    ebx
c0007313:	e8 61 fb ff ff       	call   c0006e79 <Phys::setPageState(unsigned long, bool)>
c0007318:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c000731d:	83 c4 10             	add    esp,0x10
c0007320:	40                   	inc    eax
c0007321:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007327:	a3 58 f4 01 c0       	mov    ds:0xc001f458,eax
c000732c:	75 d7                	jne    c0007305 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000732e:	83 c4 3c             	add    esp,0x3c
c0007331:	5b                   	pop    ebx
c0007332:	5e                   	pop    esi
c0007333:	5f                   	pop    edi
c0007334:	5d                   	pop    ebp
c0007335:	c3                   	ret    
c0007336:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000733e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007346:	e9 51 fe ff ff       	jmp    c000719c <Phys::physicalMemorySetup(unsigned int)+0x11c>
c000734b:	90                   	nop

c000734c <Pipe::isAtty()>:
c000734c:	31 c0                	xor    eax,eax
c000734e:	c3                   	ret    
c000734f:	90                   	nop

c0007350 <Pipe::~Pipe()>:
c0007350:	83 ec 0c             	sub    esp,0xc
c0007353:	ba 48 cd 01 c0       	mov    edx,0xc001cd48
c0007358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000735c:	89 10                	mov    DWORD PTR [eax],edx
c000735e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007362:	83 ec 0c             	sub    esp,0xc
c0007365:	50                   	push   eax
c0007366:	e8 d1 10 00 00       	call   c000843c <UnixFile::~UnixFile()>
c000736b:	83 c4 10             	add    esp,0x10
c000736e:	90                   	nop
c000736f:	83 c4 0c             	add    esp,0xc
c0007372:	c3                   	ret    
c0007373:	90                   	nop

c0007374 <Pipe::~Pipe()>:
c0007374:	83 ec 0c             	sub    esp,0xc
c0007377:	83 ec 0c             	sub    esp,0xc
c000737a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000737e:	e8 cd ff ff ff       	call   c0007350 <Pipe::~Pipe()>
c0007383:	83 c4 10             	add    esp,0x10
c0007386:	83 ec 08             	sub    esp,0x8
c0007389:	6a 20                	push   0x20
c000738b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000738f:	e8 9a 24 00 00       	call   c000982e <operator delete(void*, unsigned long)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	83 c4 0c             	add    esp,0xc
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <Pipe::write(unsigned long long, void*, int*)>:
c000739c:	55                   	push   ebp
c000739d:	57                   	push   edi
c000739e:	56                   	push   esi
c000739f:	53                   	push   ebx
c00073a0:	83 ec 1c             	sub    esp,0x1c
c00073a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00073a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00073ab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00073ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00073b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00073b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00073b9:	89 d8                	mov    eax,ebx
c00073bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00073be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00073c2:	89 d6                	mov    esi,edx
c00073c4:	89 d7                	mov    edi,edx
c00073c6:	c1 ff 1f             	sar    edi,0x1f
c00073c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00073cc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00073d0:	c1 f8 1f             	sar    eax,0x1f
c00073d3:	39 f3                	cmp    ebx,esi
c00073d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00073d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073dd:	19 f8                	sbb    eax,edi
c00073df:	b8 01 00 00 00       	mov    eax,0x1
c00073e4:	72 6e                	jb     c0007454 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00073e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00073e9:	01 d0                	add    eax,edx
c00073eb:	99                   	cdq    
c00073ec:	f7 fb                	idiv   ebx
c00073ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073f2:	29 d3                	sub    ebx,edx
c00073f4:	89 d7                	mov    edi,edx
c00073f6:	89 de                	mov    esi,ebx
c00073f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00073fb:	c1 fb 1f             	sar    ebx,0x1f
c00073fe:	39 f2                	cmp    edx,esi
c0007400:	19 d8                	sbb    eax,ebx
c0007402:	b8 00 00 00 00       	mov    eax,0x0
c0007407:	72 04                	jb     c000740d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007409:	89 d0                	mov    eax,edx
c000740b:	29 f0                	sub    eax,esi
c000740d:	89 d3                	mov    ebx,edx
c000740f:	29 c3                	sub    ebx,eax
c0007411:	74 0b                	je     c000741e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007413:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007416:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000741a:	89 d9                	mov    ecx,ebx
c000741c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000741e:	85 c0                	test   eax,eax
c0007420:	74 0d                	je     c000742f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007422:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007426:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007429:	89 de                	mov    esi,ebx
c000742b:	89 c1                	mov    ecx,eax
c000742d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000742f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007432:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007437:	75 10                	jne    c0007449 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007439:	83 ec 0c             	sub    esp,0xc
c000743c:	68 05 cd 01 c0       	push   0xc001cd05
c0007441:	e8 2d 80 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0007446:	83 c4 10             	add    esp,0x10
c0007449:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000744d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007450:	89 08                	mov    DWORD PTR [eax],ecx
c0007452:	31 c0                	xor    eax,eax
c0007454:	83 c4 1c             	add    esp,0x1c
c0007457:	5b                   	pop    ebx
c0007458:	5e                   	pop    esi
c0007459:	5f                   	pop    edi
c000745a:	5d                   	pop    ebp
c000745b:	c3                   	ret    

c000745c <Pipe::read(unsigned long long, void*, int*)>:
c000745c:	55                   	push   ebp
c000745d:	57                   	push   edi
c000745e:	56                   	push   esi
c000745f:	53                   	push   ebx
c0007460:	83 ec 1c             	sub    esp,0x1c
c0007463:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007467:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000746b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000746f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007472:	89 c8                	mov    eax,ecx
c0007474:	99                   	cdq    
c0007475:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007479:	74 24                	je     c000749f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000747b:	39 f9                	cmp    ecx,edi
c000747d:	89 d1                	mov    ecx,edx
c000747f:	19 f1                	sbb    ecx,esi
c0007481:	73 1c                	jae    c000749f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007483:	fa                   	cli    
c0007484:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c000748a:	e8 59 b4 00 00       	call   c00128e8 <schedule()>
c000748f:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0007494:	48                   	dec    eax
c0007495:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000749a:	75 d3                	jne    c000746f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000749c:	fb                   	sti    
c000749d:	eb d0                	jmp    c000746f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000749f:	39 f8                	cmp    eax,edi
c00074a1:	89 d1                	mov    ecx,edx
c00074a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00074a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00074aa:	19 f1                	sbb    ecx,esi
c00074ac:	73 07                	jae    c00074b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00074ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00074b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00074b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00074bb:	29 f7                	sub    edi,esi
c00074bd:	89 f8                	mov    eax,edi
c00074bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00074c3:	99                   	cdq    
c00074c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00074c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074cb:	19 d0                	sbb    eax,edx
c00074cd:	73 07                	jae    c00074d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00074cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00074d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00074d9:	89 ea                	mov    edx,ebp
c00074db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00074df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00074e4:	74 0d                	je     c00074f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00074e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00074e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00074ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00074f3:	85 d2                	test   edx,edx
c00074f5:	74 11                	je     c0007508 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00074f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00074fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0007502:	89 d1                	mov    ecx,edx
c0007504:	89 c7                	mov    edi,eax
c0007506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007508:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000750b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000750e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0007511:	99                   	cdq    
c0007512:	89 f7                	mov    edi,esi
c0007514:	03 04 24             	add    eax,DWORD PTR [esp]
c0007517:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000751b:	c1 ff 1f             	sar    edi,0x1f
c000751e:	57                   	push   edi
c000751f:	56                   	push   esi
c0007520:	52                   	push   edx
c0007521:	50                   	push   eax
c0007522:	e8 39 42 01 00       	call   c001b760 <__umoddi3>
c0007527:	83 c4 10             	add    esp,0x10
c000752a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000752d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007532:	75 10                	jne    c0007544 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0007534:	83 ec 0c             	sub    esp,0xc
c0007537:	68 22 cd 01 c0       	push   0xc001cd22
c000753c:	e8 32 7f 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0007541:	83 c4 10             	add    esp,0x10
c0007544:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007548:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000754b:	89 10                	mov    DWORD PTR [eax],edx
c000754d:	83 c4 1c             	add    esp,0x1c
c0007550:	31 c0                	xor    eax,eax
c0007552:	5b                   	pop    ebx
c0007553:	5e                   	pop    esi
c0007554:	5f                   	pop    edi
c0007555:	5d                   	pop    ebp
c0007556:	c3                   	ret    
c0007557:	90                   	nop

c0007558 <Pipe::Pipe(int)>:
c0007558:	83 ec 0c             	sub    esp,0xc
c000755b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000755f:	83 ec 08             	sub    esp,0x8
c0007562:	6a 00                	push   0x0
c0007564:	50                   	push   eax
c0007565:	e8 f0 0c 00 00       	call   c000825a <UnixFile::UnixFile(int)>
c000756a:	83 c4 10             	add    esp,0x10
c000756d:	ba 48 cd 01 c0       	mov    edx,0xc001cd48
c0007572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007576:	89 10                	mov    DWORD PTR [eax],edx
c0007578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000757c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007580:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007587:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000758e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007592:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0007599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000759d:	83 ec 0c             	sub    esp,0xc
c00075a0:	50                   	push   eax
c00075a1:	e8 bb f5 ff ff       	call   c0006b61 <malloc>
c00075a6:	83 c4 10             	add    esp,0x10
c00075a9:	89 c2                	mov    edx,eax
c00075ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00075b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00075ba:	90                   	nop
c00075bb:	83 c4 0c             	add    esp,0xc
c00075be:	c3                   	ret    
c00075bf:	90                   	nop

c00075c0 <VgaText::isAtty()>:
c00075c0:	b0 01                	mov    al,0x1
c00075c2:	c3                   	ret    
c00075c3:	90                   	nop

c00075c4 <VgaText::~VgaText()>:
c00075c4:	83 ec 0c             	sub    esp,0xc
c00075c7:	ba d0 cd 01 c0       	mov    edx,0xc001cdd0
c00075cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075d0:	89 10                	mov    DWORD PTR [eax],edx
c00075d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075d6:	83 ec 0c             	sub    esp,0xc
c00075d9:	50                   	push   eax
c00075da:	e8 5d 0e 00 00       	call   c000843c <UnixFile::~UnixFile()>
c00075df:	83 c4 10             	add    esp,0x10
c00075e2:	90                   	nop
c00075e3:	83 c4 0c             	add    esp,0xc
c00075e6:	c3                   	ret    
c00075e7:	90                   	nop

c00075e8 <VgaText::~VgaText()>:
c00075e8:	83 ec 0c             	sub    esp,0xc
c00075eb:	83 ec 0c             	sub    esp,0xc
c00075ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00075f2:	e8 cd ff ff ff       	call   c00075c4 <VgaText::~VgaText()>
c00075f7:	83 c4 10             	add    esp,0x10
c00075fa:	83 ec 08             	sub    esp,0x8
c00075fd:	68 34 01 00 00       	push   0x134
c0007602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007606:	e8 23 22 00 00       	call   c000982e <operator delete(void*, unsigned long)>
c000760b:	83 c4 10             	add    esp,0x10
c000760e:	83 c4 0c             	add    esp,0xc
c0007611:	c3                   	ret    

c0007612 <VgaText::read(unsigned long long, void*, int*)>:
c0007612:	83 ec 10             	sub    esp,0x10
c0007615:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007619:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000761d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007621:	e8 58 45 00 00       	call   c000bb7e <readKeyboard(VgaText*, char*, unsigned long)>
c0007626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000762a:	89 02                	mov    DWORD PTR [edx],eax
c000762c:	31 c0                	xor    eax,eax
c000762e:	83 c4 1c             	add    esp,0x1c
c0007631:	c3                   	ret    

c0007632 <setTerminalScrollLock(bool)>:
c0007632:	c3                   	ret    

c0007633 <doTerminalCycle()>:
c0007633:	c3                   	ret    

c0007634 <addToTerminalCycle(VgaText*)>:
c0007634:	c3                   	ret    

c0007635 <scrollTerminalScrollLock(int)>:
c0007635:	c3                   	ret    

c0007636 <VgaText::updateTitle()>:
c0007636:	c3                   	ret    
c0007637:	90                   	nop

c0007638 <VgaText::load()>:
c0007638:	c3                   	ret    
c0007639:	90                   	nop

c000763a <VgaText::updateCursor()>:
c000763a:	83 ec 14             	sub    esp,0x14
c000763d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007641:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007644:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007647:	e8 10 dd 00 00       	call   c001535c <HalConsoleCursorUpdate(int, int)>
c000764c:	83 c4 1c             	add    esp,0x1c
c000764f:	c3                   	ret    

c0007650 <VgaText::doANSI_SGR(int)>:
c0007650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007658:	85 d2                	test   edx,edx
c000765a:	75 0b                	jne    c0007667 <VgaText::doANSI_SGR(int)+0x17>
c000765c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000765f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0007662:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0007665:	eb 59                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c0007667:	83 fa 07             	cmp    edx,0x7
c000766a:	75 0b                	jne    c0007677 <VgaText::doANSI_SGR(int)+0x27>
c000766c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000766f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0007672:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0007675:	eb 49                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c0007677:	83 fa 1b             	cmp    edx,0x1b
c000767a:	74 e0                	je     c000765c <VgaText::doANSI_SGR(int)+0xc>
c000767c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000767f:	83 f9 07             	cmp    ecx,0x7
c0007682:	77 09                	ja     c000768d <VgaText::doANSI_SGR(int)+0x3d>
c0007684:	8b 14 8d 80 ed 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1280]
c000768b:	eb 20                	jmp    c00076ad <VgaText::doANSI_SGR(int)+0x5d>
c000768d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0007690:	83 f9 07             	cmp    ecx,0x7
c0007693:	77 09                	ja     c000769e <VgaText::doANSI_SGR(int)+0x4e>
c0007695:	8b 14 8d 80 ed 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe1280]
c000769c:	eb 22                	jmp    c00076c0 <VgaText::doANSI_SGR(int)+0x70>
c000769e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00076a1:	83 f9 07             	cmp    ecx,0x7
c00076a4:	77 0b                	ja     c00076b1 <VgaText::doANSI_SGR(int)+0x61>
c00076a6:	8b 14 95 38 ec 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe13c8]
c00076ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00076b0:	c3                   	ret    
c00076b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00076b4:	83 f9 07             	cmp    ecx,0x7
c00076b7:	77 0a                	ja     c00076c3 <VgaText::doANSI_SGR(int)+0x73>
c00076b9:	8b 14 95 10 ec 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe13f0]
c00076c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00076c3:	c3                   	ret    

c00076c4 <VgaText::setDefaultBgColour(VgaColour)>:
c00076c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00076cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00076d2:	c3                   	ret    
c00076d3:	90                   	nop

c00076d4 <VgaText::setDefaultFgColour(VgaColour)>:
c00076d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00076d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00076dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00076df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00076e2:	c3                   	ret    
c00076e3:	90                   	nop

c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00076e4:	53                   	push   ebx
c00076e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00076e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00076ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00076f1:	51                   	push   ecx
c00076f2:	e8 cd ff ff ff       	call   c00076c4 <VgaText::setDefaultBgColour(VgaColour)>
c00076f7:	58                   	pop    eax
c00076f8:	5a                   	pop    edx
c00076f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00076fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007701:	5b                   	pop    ebx
c0007702:	eb d0                	jmp    c00076d4 <VgaText::setDefaultFgColour(VgaColour)>

c0007704 <VgaText::setTitleTextColour(VgaColour)>:
c0007704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000770c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000770f:	c3                   	ret    

c0007710 <VgaText::setTitleColour(VgaColour)>:
c0007710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007718:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000771b:	c3                   	ret    

c000771c <VgaText::setTitle(char*)>:
c000771c:	c3                   	ret    
c000771d:	90                   	nop

c000771e <VgaText::combineColours(unsigned char, unsigned char)>:
c000771e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0007722:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007727:	83 e0 0f             	and    eax,0xf
c000772a:	c1 e2 04             	shl    edx,0x4
c000772d:	09 d0                	or     eax,edx
c000772f:	c3                   	ret    

c0007730 <VgaText::scrollScreen()>:
c0007730:	55                   	push   ebp
c0007731:	b9 01 00 00 00       	mov    ecx,0x1
c0007736:	57                   	push   edi
c0007737:	56                   	push   esi
c0007738:	53                   	push   ebx
c0007739:	83 ec 0c             	sub    esp,0xc
c000773c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007740:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0007746:	31 ff                	xor    edi,edi
c0007748:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000774b:	83 f9 18             	cmp    ecx,0x18
c000774e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0007751:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0007758:	75 27                	jne    c0007781 <VgaText::scrollScreen()+0x51>
c000775a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000775d:	01 f5                	add    ebp,esi
c000775f:	f7 c7 01 00 00 00    	test   edi,0x1
c0007765:	74 16                	je     c000777d <VgaText::scrollScreen()+0x4d>
c0007767:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000776b:	50                   	push   eax
c000776c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0007770:	50                   	push   eax
c0007771:	e8 a8 ff ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007776:	5a                   	pop    edx
c0007777:	5a                   	pop    edx
c0007778:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000777b:	eb 04                	jmp    c0007781 <VgaText::scrollScreen()+0x51>
c000777d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0007781:	47                   	inc    edi
c0007782:	46                   	inc    esi
c0007783:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0007789:	75 bd                	jne    c0007748 <VgaText::scrollScreen()+0x18>
c000778b:	41                   	inc    ecx
c000778c:	83 f9 19             	cmp    ecx,0x19
c000778f:	75 af                	jne    c0007740 <VgaText::scrollScreen()+0x10>
c0007791:	39 1d 74 f4 01 c0    	cmp    DWORD PTR ds:0xc001f474,ebx
c0007797:	75 1f                	jne    c00077b8 <VgaText::scrollScreen()+0x88>
c0007799:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000779d:	74 05                	je     c00077a4 <VgaText::scrollScreen()+0x74>
c000779f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00077a2:	eb 14                	jmp    c00077b8 <VgaText::scrollScreen()+0x88>
c00077a4:	50                   	push   eax
c00077a5:	50                   	push   eax
c00077a6:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00077aa:	50                   	push   eax
c00077ab:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00077af:	50                   	push   eax
c00077b0:	e8 33 da 00 00       	call   c00151e8 <HalConsoleScroll(int, int)>
c00077b5:	83 c4 10             	add    esp,0x10
c00077b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00077bc:	83 c4 0c             	add    esp,0xc
c00077bf:	5b                   	pop    ebx
c00077c0:	5e                   	pop    esi
c00077c1:	5f                   	pop    edi
c00077c2:	5d                   	pop    ebp
c00077c3:	e9 72 fe ff ff       	jmp    c000763a <VgaText::updateCursor()>

c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00077c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00077cd:	c1 e0 08             	shl    eax,0x8
c00077d0:	89 c2                	mov    edx,eax
c00077d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00077d7:	09 d0                	or     eax,edx
c00077d9:	c3                   	ret    

c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00077da:	55                   	push   ebp
c00077db:	57                   	push   edi
c00077dc:	56                   	push   esi
c00077dd:	53                   	push   ebx
c00077de:	83 ec 1c             	sub    esp,0x1c
c00077e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00077e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00077e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00077ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00077f1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00077f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00077f9:	0f b6 c3             	movzx  eax,bl
c00077fc:	50                   	push   eax
c00077fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0007802:	50                   	push   eax
c0007803:	e8 16 ff ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007808:	5a                   	pop    edx
c0007809:	0f b6 c0             	movzx  eax,al
c000780c:	59                   	pop    ecx
c000780d:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0007812:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007816:	50                   	push   eax
c0007817:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000781b:	e8 a8 ff ff ff       	call   c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007820:	5a                   	pop    edx
c0007821:	66 6b d7 50          	imul   dx,di,0x50
c0007825:	59                   	pop    ecx
c0007826:	01 f2                	add    edx,esi
c0007828:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000782b:	0f b7 d2             	movzx  edx,dx
c000782e:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0007832:	39 2d 74 f4 01 c0    	cmp    DWORD PTR ds:0xc001f474,ebp
c0007838:	75 28                	jne    c0007862 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000783a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000783e:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0007842:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0007846:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000784a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000784e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007852:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007856:	83 c4 1c             	add    esp,0x1c
c0007859:	5b                   	pop    ebx
c000785a:	5e                   	pop    esi
c000785b:	5f                   	pop    edi
c000785c:	5d                   	pop    ebp
c000785d:	e9 8e da 00 00       	jmp    c00152f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007862:	83 c4 1c             	add    esp,0x1c
c0007865:	5b                   	pop    ebx
c0007866:	5e                   	pop    esi
c0007867:	5f                   	pop    edi
c0007868:	5d                   	pop    ebp
c0007869:	c3                   	ret    

c000786a <VgaText::getCursorX()>:
c000786a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000786e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0007871:	c3                   	ret    

c0007872 <VgaText::getCursorY()>:
c0007872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007876:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0007879:	c3                   	ret    

c000787a <VgaText::setCursor(int, int)>:
c000787a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000787e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007882:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007885:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007889:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000788c:	e9 a9 fd ff ff       	jmp    c000763a <VgaText::updateCursor()>

c0007891 <setActiveTerminal(VgaText*)>:
c0007891:	53                   	push   ebx
c0007892:	83 ec 08             	sub    esp,0x8
c0007895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007899:	85 db                	test   ebx,ebx
c000789b:	75 11                	jne    c00078ae <setActiveTerminal(VgaText*)+0x1d>
c000789d:	c7 44 24 10 5c cd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cd5c
c00078a5:	83 c4 08             	add    esp,0x8
c00078a8:	5b                   	pop    ebx
c00078a9:	e9 c5 7b 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c00078ae:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c00078b3:	85 c0                	test   eax,eax
c00078b5:	74 0c                	je     c00078c3 <setActiveTerminal(VgaText*)+0x32>
c00078b7:	83 ec 0c             	sub    esp,0xc
c00078ba:	50                   	push   eax
c00078bb:	e8 7a fd ff ff       	call   c000763a <VgaText::updateCursor()>
c00078c0:	83 c4 10             	add    esp,0x10
c00078c3:	89 1d 74 f4 01 c0    	mov    DWORD PTR ds:0xc001f474,ebx
c00078c9:	50                   	push   eax
c00078ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00078cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00078d0:	53                   	push   ebx
c00078d1:	e8 a4 ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c00078d6:	83 c4 18             	add    esp,0x18
c00078d9:	5b                   	pop    ebx
c00078da:	c3                   	ret    
c00078db:	90                   	nop

c00078dc <VgaText::clearScreen()>:
c00078dc:	57                   	push   edi
c00078dd:	56                   	push   esi
c00078de:	31 f6                	xor    esi,esi
c00078e0:	53                   	push   ebx
c00078e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00078e5:	52                   	push   edx
c00078e6:	6a 00                	push   0x0
c00078e8:	6a 00                	push   0x0
c00078ea:	53                   	push   ebx
c00078eb:	e8 8a ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c00078f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00078f7:	83 c4 10             	add    esp,0x10
c00078fa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00078fd:	7e 20                	jle    c000791f <VgaText::clearScreen()+0x43>
c00078ff:	31 ff                	xor    edi,edi
c0007901:	50                   	push   eax
c0007902:	50                   	push   eax
c0007903:	56                   	push   esi
c0007904:	57                   	push   edi
c0007905:	47                   	inc    edi
c0007906:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007909:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000790c:	6a 20                	push   0x20
c000790e:	53                   	push   ebx
c000790f:	e8 c6 fe ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007914:	83 c4 20             	add    esp,0x20
c0007917:	83 ff 50             	cmp    edi,0x50
c000791a:	75 e5                	jne    c0007901 <VgaText::clearScreen()+0x25>
c000791c:	46                   	inc    esi
c000791d:	eb db                	jmp    c00078fa <VgaText::clearScreen()+0x1e>
c000791f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007926:	5b                   	pop    ebx
c0007927:	5e                   	pop    esi
c0007928:	5f                   	pop    edi
c0007929:	c3                   	ret    

c000792a <VgaText::setCursorX(int)>:
c000792a:	83 ec 10             	sub    esp,0x10
c000792d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007931:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0007934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007938:	50                   	push   eax
c0007939:	e8 3c ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c000793e:	83 c4 1c             	add    esp,0x1c
c0007941:	c3                   	ret    

c0007942 <VgaText::setCursorY(int)>:
c0007942:	83 ec 10             	sub    esp,0x10
c0007945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000794d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0007950:	50                   	push   eax
c0007951:	e8 24 ff ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007956:	83 c4 1c             	add    esp,0x1c
c0007959:	c3                   	ret    

c000795a <VgaText::incrementCursor(bool)>:
c000795a:	56                   	push   esi
c000795b:	53                   	push   ebx
c000795c:	51                   	push   ecx
c000795d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007961:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007965:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0007968:	40                   	inc    eax
c0007969:	83 f8 50             	cmp    eax,0x50
c000796c:	74 05                	je     c0007973 <VgaText::incrementCursor(bool)+0x19>
c000796e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0007971:	eb 24                	jmp    c0007997 <VgaText::incrementCursor(bool)+0x3d>
c0007973:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007976:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000797d:	8d 50 01             	lea    edx,[eax+0x1]
c0007980:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007983:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007986:	75 0f                	jne    c0007997 <VgaText::incrementCursor(bool)+0x3d>
c0007988:	83 ec 0c             	sub    esp,0xc
c000798b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000798e:	53                   	push   ebx
c000798f:	e8 9c fd ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007994:	83 c4 10             	add    esp,0x10
c0007997:	89 f0                	mov    eax,esi
c0007999:	84 c0                	test   al,al
c000799b:	74 0c                	je     c00079a9 <VgaText::incrementCursor(bool)+0x4f>
c000799d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00079a1:	5a                   	pop    edx
c00079a2:	5b                   	pop    ebx
c00079a3:	5e                   	pop    esi
c00079a4:	e9 91 fc ff ff       	jmp    c000763a <VgaText::updateCursor()>
c00079a9:	58                   	pop    eax
c00079aa:	5b                   	pop    ebx
c00079ab:	5e                   	pop    esi
c00079ac:	c3                   	ret    
c00079ad:	90                   	nop

c00079ae <VgaText::decrementCursor(bool)>:
c00079ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00079b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00079b6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00079b9:	85 c0                	test   eax,eax
c00079bb:	74 04                	je     c00079c1 <VgaText::decrementCursor(bool)+0x13>
c00079bd:	48                   	dec    eax
c00079be:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00079c1:	84 c9                	test   cl,cl
c00079c3:	74 09                	je     c00079ce <VgaText::decrementCursor(bool)+0x20>
c00079c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079c9:	e9 6c fc ff ff       	jmp    c000763a <VgaText::updateCursor()>
c00079ce:	c3                   	ret    
c00079cf:	90                   	nop

c00079d0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00079d0:	53                   	push   ebx
c00079d1:	83 ec 08             	sub    esp,0x8
c00079d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00079d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00079e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00079e4:	3c 07                	cmp    al,0x7
c00079e6:	75 21                	jne    c0007a09 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00079e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079f0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00079f8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0007a00:	83 c4 08             	add    esp,0x8
c0007a03:	5b                   	pop    ebx
c0007a04:	e9 72 2d 00 00       	jmp    c000a77b <Krnl::beep(int, int, bool)>
c0007a09:	3c 0d                	cmp    al,0xd
c0007a0b:	75 09                	jne    c0007a16 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0007a0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a14:	eb 2c                	jmp    c0007a42 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0007a16:	3c 0a                	cmp    al,0xa
c0007a18:	75 31                	jne    c0007a4b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0007a1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007a1d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007a24:	8d 50 01             	lea    edx,[eax+0x1]
c0007a27:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0007a2a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0007a2d:	75 0f                	jne    c0007a3e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0007a2f:	83 ec 0c             	sub    esp,0xc
c0007a32:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007a35:	53                   	push   ebx
c0007a36:	e8 f5 fc ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007a3b:	83 c4 10             	add    esp,0x10
c0007a3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007a42:	83 c4 08             	add    esp,0x8
c0007a45:	5b                   	pop    ebx
c0007a46:	e9 ef fb ff ff       	jmp    c000763a <VgaText::updateCursor()>
c0007a4b:	3c 08                	cmp    al,0x8
c0007a4d:	75 25                	jne    c0007a74 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0007a4f:	50                   	push   eax
c0007a50:	50                   	push   eax
c0007a51:	6a 01                	push   0x1
c0007a53:	53                   	push   ebx
c0007a54:	e8 55 ff ff ff       	call   c00079ae <VgaText::decrementCursor(bool)>
c0007a59:	5a                   	pop    edx
c0007a5a:	59                   	pop    ecx
c0007a5b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a5e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007a64:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007a67:	6a 20                	push   0x20
c0007a69:	53                   	push   ebx
c0007a6a:	e8 6b fd ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a6f:	83 c4 28             	add    esp,0x28
c0007a72:	5b                   	pop    ebx
c0007a73:	c3                   	ret    
c0007a74:	83 ec 08             	sub    esp,0x8
c0007a77:	0f be c0             	movsx  eax,al
c0007a7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007a7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007a80:	51                   	push   ecx
c0007a81:	52                   	push   edx
c0007a82:	50                   	push   eax
c0007a83:	53                   	push   ebx
c0007a84:	e8 51 fd ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007a89:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0007a8d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0007a95:	83 c4 28             	add    esp,0x28
c0007a98:	5b                   	pop    ebx
c0007a99:	e9 bc fe ff ff       	jmp    c000795a <VgaText::incrementCursor(bool)>

c0007a9e <VgaText::putchar(char)>:
c0007a9e:	56                   	push   esi
c0007a9f:	53                   	push   ebx
c0007aa0:	83 ec 14             	sub    esp,0x14
c0007aa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007aa7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aab:	3c 5b                	cmp    al,0x5b
c0007aad:	75 18                	jne    c0007ac7 <VgaText::putchar(char)+0x29>
c0007aaf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0007ab3:	74 1f                	je     c0007ad4 <VgaText::putchar(char)+0x36>
c0007ab5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0007abb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0007ac2:	e9 bd 00 00 00       	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007ac7:	3c 1b                	cmp    al,0x1b
c0007ac9:	75 09                	jne    c0007ad4 <VgaText::putchar(char)+0x36>
c0007acb:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0007acf:	e9 b0 00 00 00       	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007ad4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0007ad7:	84 c9                	test   cl,cl
c0007ad9:	0f 84 92 00 00 00    	je     c0007b71 <VgaText::putchar(char)+0xd3>
c0007adf:	8d 50 c0             	lea    edx,[eax-0x40]
c0007ae2:	80 fa 3e             	cmp    dl,0x3e
c0007ae5:	77 76                	ja     c0007b5d <VgaText::putchar(char)+0xbf>
c0007ae7:	3c 6d                	cmp    al,0x6d
c0007ae9:	75 47                	jne    c0007b32 <VgaText::putchar(char)+0x94>
c0007aeb:	31 f6                	xor    esi,esi
c0007aed:	31 d2                	xor    edx,edx
c0007aef:	31 c0                	xor    eax,eax
c0007af1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0007af4:	7e 2d                	jle    c0007b23 <VgaText::putchar(char)+0x85>
c0007af6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0007afb:	80 fa 3b             	cmp    dl,0x3b
c0007afe:	75 17                	jne    c0007b17 <VgaText::putchar(char)+0x79>
c0007b00:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	e8 45 fb ff ff       	call   c0007650 <VgaText::doANSI_SGR(int)>
c0007b0b:	59                   	pop    ecx
c0007b0c:	31 d2                	xor    edx,edx
c0007b0e:	58                   	pop    eax
c0007b0f:	31 c0                	xor    eax,eax
c0007b11:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0007b15:	eb 09                	jmp    c0007b20 <VgaText::putchar(char)+0x82>
c0007b17:	6b c0 0a             	imul   eax,eax,0xa
c0007b1a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0007b1e:	88 ca                	mov    dl,cl
c0007b20:	46                   	inc    esi
c0007b21:	eb ce                	jmp    c0007af1 <VgaText::putchar(char)+0x53>
c0007b23:	84 d2                	test   dl,dl
c0007b25:	74 2e                	je     c0007b55 <VgaText::putchar(char)+0xb7>
c0007b27:	50                   	push   eax
c0007b28:	53                   	push   ebx
c0007b29:	e8 22 fb ff ff       	call   c0007650 <VgaText::doANSI_SGR(int)>
c0007b2e:	58                   	pop    eax
c0007b2f:	5a                   	pop    edx
c0007b30:	eb 23                	jmp    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b32:	3c 4a                	cmp    al,0x4a
c0007b34:	75 1f                	jne    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b36:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0007b3a:	75 19                	jne    c0007b55 <VgaText::putchar(char)+0xb7>
c0007b3c:	83 ec 0c             	sub    esp,0xc
c0007b3f:	53                   	push   ebx
c0007b40:	e8 97 fd ff ff       	call   c00078dc <VgaText::clearScreen()>
c0007b45:	83 c4 0c             	add    esp,0xc
c0007b48:	6a 00                	push   0x0
c0007b4a:	6a 00                	push   0x0
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 28 fd ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007b52:	83 c4 10             	add    esp,0x10
c0007b55:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0007b5b:	eb 27                	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007b5d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0007b60:	83 fa 0e             	cmp    edx,0xe
c0007b63:	7f 1f                	jg     c0007b84 <VgaText::putchar(char)+0xe6>
c0007b65:	8d 4a 01             	lea    ecx,[edx+0x1]
c0007b68:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0007b6b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0007b6f:	eb 13                	jmp    c0007b84 <VgaText::putchar(char)+0xe6>
c0007b71:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007b74:	0f be c0             	movsx  eax,al
c0007b77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007b7a:	50                   	push   eax
c0007b7b:	53                   	push   ebx
c0007b7c:	e8 4f fe ff ff       	call   c00079d0 <VgaText::putchar(char, VgaColour, VgaColour)>
c0007b81:	83 c4 10             	add    esp,0x10
c0007b84:	83 c4 14             	add    esp,0x14
c0007b87:	5b                   	pop    ebx
c0007b88:	5e                   	pop    esi
c0007b89:	c3                   	ret    

c0007b8a <VgaText::putx(unsigned int)>:
c0007b8a:	57                   	push   edi
c0007b8b:	b9 11 00 00 00       	mov    ecx,0x11
c0007b90:	56                   	push   esi
c0007b91:	be 6a cd 01 c0       	mov    esi,0xc001cd6a
c0007b96:	53                   	push   ebx
c0007b97:	83 ec 20             	sub    esp,0x20
c0007b9a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0007b9e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0007ba2:	fc                   	cld    
c0007ba3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ba5:	be 08 00 00 00       	mov    esi,0x8
c0007baa:	50                   	push   eax
c0007bab:	50                   	push   eax
c0007bac:	89 d8                	mov    eax,ebx
c0007bae:	c1 e3 04             	shl    ebx,0x4
c0007bb1:	c1 e8 1c             	shr    eax,0x1c
c0007bb4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0007bb9:	50                   	push   eax
c0007bba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007bbe:	e8 db fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007bc3:	83 c4 10             	add    esp,0x10
c0007bc6:	4e                   	dec    esi
c0007bc7:	75 e1                	jne    c0007baa <VgaText::putx(unsigned int)+0x20>
c0007bc9:	83 c4 20             	add    esp,0x20
c0007bcc:	5b                   	pop    ebx
c0007bcd:	5e                   	pop    esi
c0007bce:	5f                   	pop    edi
c0007bcf:	c3                   	ret    

c0007bd0 <VgaText::puts(char const*)>:
c0007bd0:	53                   	push   ebx
c0007bd1:	83 ec 08             	sub    esp,0x8
c0007bd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007bd8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0007bdb:	84 c0                	test   al,al
c0007bdd:	74 12                	je     c0007bf1 <VgaText::puts(char const*)+0x21>
c0007bdf:	43                   	inc    ebx
c0007be0:	51                   	push   ecx
c0007be1:	51                   	push   ecx
c0007be2:	50                   	push   eax
c0007be3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007be7:	e8 b2 fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007bec:	83 c4 10             	add    esp,0x10
c0007bef:	eb e7                	jmp    c0007bd8 <VgaText::puts(char const*)+0x8>
c0007bf1:	83 c4 08             	add    esp,0x8
c0007bf4:	5b                   	pop    ebx
c0007bf5:	c3                   	ret    

c0007bf6 <VgaText::write(unsigned long long, void*, int*)>:
c0007bf6:	55                   	push   ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	53                   	push   ebx
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007c01:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007c05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007c09:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0007c10:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0007c13:	39 eb                	cmp    ebx,ebp
c0007c15:	74 13                	je     c0007c2a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0007c17:	43                   	inc    ebx
c0007c18:	50                   	push   eax
c0007c19:	50                   	push   eax
c0007c1a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0007c1e:	50                   	push   eax
c0007c1f:	56                   	push   esi
c0007c20:	e8 79 fe ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007c25:	83 c4 10             	add    esp,0x10
c0007c28:	eb e9                	jmp    c0007c13 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0007c2a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0007c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c35:	89 38                	mov    DWORD PTR [eax],edi
c0007c37:	83 c4 0c             	add    esp,0xc
c0007c3a:	31 c0                	xor    eax,eax
c0007c3c:	5b                   	pop    ebx
c0007c3d:	5e                   	pop    esi
c0007c3e:	5f                   	pop    edi
c0007c3f:	5d                   	pop    ebp
c0007c40:	c3                   	ret    
c0007c41:	90                   	nop

c0007c42 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0007c42:	55                   	push   ebp
c0007c43:	57                   	push   edi
c0007c44:	56                   	push   esi
c0007c45:	53                   	push   ebx
c0007c46:	83 ec 0c             	sub    esp,0xc
c0007c49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007c4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c52:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0007c59:	50                   	push   eax
c0007c5a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0007c5f:	50                   	push   eax
c0007c60:	e8 b9 fa ff ff       	call   c000771e <VgaText::combineColours(unsigned char, unsigned char)>
c0007c65:	5a                   	pop    edx
c0007c66:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007c6b:	59                   	pop    ecx
c0007c6c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007c6f:	89 c5                	mov    ebp,eax
c0007c71:	0f b7 f6             	movzx  esi,si
c0007c74:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0007c78:	01 f6                	add    esi,esi
c0007c7a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007c7d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007c80:	84 c0                	test   al,al
c0007c82:	0f 84 f4 00 00 00    	je     c0007d7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0007c88:	3c 0d                	cmp    al,0xd
c0007c8a:	75 0c                	jne    c0007c98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0007c8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007c93:	e9 de 00 00 00       	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007c98:	3c 0a                	cmp    al,0xa
c0007c9a:	75 45                	jne    c0007ce1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0007c9c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0007c9f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0007ca6:	8d 48 01             	lea    ecx,[eax+0x1]
c0007ca9:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0007cac:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0007caf:	75 0f                	jne    c0007cc0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0007cb1:	83 ec 0c             	sub    esp,0xc
c0007cb4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0007cb7:	53                   	push   ebx
c0007cb8:	e8 73 fa ff ff       	call   c0007730 <VgaText::scrollScreen()>
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	83 ec 0c             	sub    esp,0xc
c0007cc3:	53                   	push   ebx
c0007cc4:	e8 71 f9 ff ff       	call   c000763a <VgaText::updateCursor()>
c0007cc9:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007cce:	83 c4 10             	add    esp,0x10
c0007cd1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007cd4:	0f b7 f6             	movzx  esi,si
c0007cd7:	01 f6                	add    esi,esi
c0007cd9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007cdc:	e9 95 00 00 00       	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007ce1:	3c 08                	cmp    al,0x8
c0007ce3:	75 35                	jne    c0007d1a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0007ce5:	51                   	push   ecx
c0007ce6:	51                   	push   ecx
c0007ce7:	6a 01                	push   0x1
c0007ce9:	53                   	push   ebx
c0007cea:	e8 bf fc ff ff       	call   c00079ae <VgaText::decrementCursor(bool)>
c0007cef:	5e                   	pop    esi
c0007cf0:	58                   	pop    eax
c0007cf1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007cf4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007cf7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0007cfa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0007cfd:	6a 20                	push   0x20
c0007cff:	53                   	push   ebx
c0007d00:	e8 d5 fa ff ff       	call   c00077da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0007d05:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d0a:	83 c4 20             	add    esp,0x20
c0007d0d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0007d10:	0f b7 f6             	movzx  esi,si
c0007d13:	01 f6                	add    esi,esi
c0007d15:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d18:	eb 5c                	jmp    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d1a:	52                   	push   edx
c0007d1b:	52                   	push   edx
c0007d1c:	89 ea                	mov    edx,ebp
c0007d1e:	0f b6 ca             	movzx  ecx,dl
c0007d21:	51                   	push   ecx
c0007d22:	50                   	push   eax
c0007d23:	e8 a0 fa ff ff       	call   c00077c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0007d28:	83 c4 10             	add    esp,0x10
c0007d2b:	66 89 06             	mov    WORD PTR [esi],ax
c0007d2e:	39 1d 74 f4 01 c0    	cmp    DWORD PTR ds:0xc001f474,ebx
c0007d34:	75 1d                	jne    c0007d53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0007d36:	83 ec 0c             	sub    esp,0xc
c0007d39:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0007d3c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0007d3f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007d43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007d47:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0007d4a:	50                   	push   eax
c0007d4b:	e8 a0 d5 00 00       	call   c00152f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007d50:	83 c4 20             	add    esp,0x20
c0007d53:	83 c6 02             	add    esi,0x2
c0007d56:	50                   	push   eax
c0007d57:	50                   	push   eax
c0007d58:	6a 00                	push   0x0
c0007d5a:	53                   	push   ebx
c0007d5b:	e8 fa fb ff ff       	call   c000795a <VgaText::incrementCursor(bool)>
c0007d60:	83 c4 10             	add    esp,0x10
c0007d63:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0007d67:	75 0d                	jne    c0007d76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0007d69:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0007d6e:	0f b7 f6             	movzx  esi,si
c0007d71:	01 f6                	add    esi,esi
c0007d73:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0007d76:	47                   	inc    edi
c0007d77:	e9 01 ff ff ff       	jmp    c0007c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0007d7c:	83 ec 0c             	sub    esp,0xc
c0007d7f:	53                   	push   ebx
c0007d80:	e8 b5 f8 ff ff       	call   c000763a <VgaText::updateCursor()>
c0007d85:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0007d8c:	83 c4 1c             	add    esp,0x1c
c0007d8f:	5b                   	pop    ebx
c0007d90:	5e                   	pop    esi
c0007d91:	5f                   	pop    edi
c0007d92:	5d                   	pop    ebp
c0007d93:	c3                   	ret    

c0007d94 <VgaText::VgaText(char const*)>:
c0007d94:	56                   	push   esi
c0007d95:	53                   	push   ebx
c0007d96:	83 ec 04             	sub    esp,0x4
c0007d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9d:	83 ec 08             	sub    esp,0x8
c0007da0:	6a 00                	push   0x0
c0007da2:	50                   	push   eax
c0007da3:	e8 b2 04 00 00       	call   c000825a <UnixFile::UnixFile(int)>
c0007da8:	83 c4 10             	add    esp,0x10
c0007dab:	ba d0 cd 01 c0       	mov    edx,0xc001cdd0
c0007db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007db4:	89 10                	mov    DWORD PTR [eax],edx
c0007db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dba:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0007dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dc5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0007dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dd0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0007dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dd8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0007ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007de0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0007de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007deb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0007df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007df6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0007dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e01:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0007e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e0c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0007e13:	83 ec 0c             	sub    esp,0xc
c0007e16:	6a 01                	push   0x1
c0007e18:	e8 80 08 00 00       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0007e1d:	83 c4 10             	add    esp,0x10
c0007e20:	89 c2                	mov    edx,eax
c0007e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0007e29:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c0007e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e36:	89 c6                	mov    esi,eax
c0007e38:	e8 f1 f0 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0007e3d:	68 05 0c 00 00       	push   0xc05
c0007e42:	56                   	push   esi
c0007e43:	50                   	push   eax
c0007e44:	53                   	push   ebx
c0007e45:	e8 ac 0e 00 00       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007e4a:	83 c4 10             	add    esp,0x10
c0007e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e54:	83 ec 04             	sub    esp,0x4
c0007e57:	68 a0 0f 00 00       	push   0xfa0
c0007e5c:	6a 00                	push   0x0
c0007e5e:	50                   	push   eax
c0007e5f:	e8 8c 86 ff ff       	call   c00004f0 <memset>
c0007e64:	83 c4 10             	add    esp,0x10
c0007e67:	83 ec 04             	sub    esp,0x4
c0007e6a:	6a 00                	push   0x0
c0007e6c:	6a 07                	push   0x7
c0007e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e72:	e8 6d f8 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0007e77:	83 c4 10             	add    esp,0x10
c0007e7a:	83 ec 04             	sub    esp,0x4
c0007e7d:	6a 00                	push   0x0
c0007e7f:	6a 00                	push   0x0
c0007e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e85:	e8 f0 f9 ff ff       	call   c000787a <VgaText::setCursor(int, int)>
c0007e8a:	83 c4 10             	add    esp,0x10
c0007e8d:	83 ec 0c             	sub    esp,0xc
c0007e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e94:	e8 43 fa ff ff       	call   c00078dc <VgaText::clearScreen()>
c0007e99:	83 c4 10             	add    esp,0x10
c0007e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0007ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea8:	05 82 00 00 00       	add    eax,0x82
c0007ead:	83 ec 04             	sub    esp,0x4
c0007eb0:	6a 30                	push   0x30
c0007eb2:	6a 00                	push   0x0
c0007eb4:	50                   	push   eax
c0007eb5:	e8 36 86 ff ff       	call   c00004f0 <memset>
c0007eba:	83 c4 10             	add    esp,0x10
c0007ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec1:	05 b2 00 00 00       	add    eax,0xb2
c0007ec6:	83 ec 04             	sub    esp,0x4
c0007ec9:	68 80 00 00 00       	push   0x80
c0007ece:	6a 00                	push   0x0
c0007ed0:	50                   	push   eax
c0007ed1:	e8 1a 86 ff ff       	call   c00004f0 <memset>
c0007ed6:	83 c4 10             	add    esp,0x10
c0007ed9:	90                   	nop
c0007eda:	83 c4 04             	add    esp,0x4
c0007edd:	5b                   	pop    ebx
c0007ede:	5e                   	pop    esi
c0007edf:	c3                   	ret    

c0007ee0 <VgaText::receiveKey(unsigned char)>:
c0007ee0:	57                   	push   edi
c0007ee1:	56                   	push   esi
c0007ee2:	53                   	push   ebx
c0007ee3:	83 ec 10             	sub    esp,0x10
c0007ee6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007eea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0007eee:	84 db                	test   bl,bl
c0007ef0:	0f 84 ba 00 00 00    	je     c0007fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0007ef6:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0007efc:	80 fb 08             	cmp    bl,0x8
c0007eff:	75 2c                	jne    c0007f2d <VgaText::receiveKey(unsigned char)+0x4d>
c0007f01:	83 ec 0c             	sub    esp,0xc
c0007f04:	57                   	push   edi
c0007f05:	e8 56 86 ff ff       	call   c0000560 <strlen>
c0007f0a:	83 c4 10             	add    esp,0x10
c0007f0d:	85 c0                	test   eax,eax
c0007f0f:	74 41                	je     c0007f52 <VgaText::receiveKey(unsigned char)+0x72>
c0007f11:	50                   	push   eax
c0007f12:	50                   	push   eax
c0007f13:	6a 08                	push   0x8
c0007f15:	56                   	push   esi
c0007f16:	e8 83 fb ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007f1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007f1e:	e8 3d 86 ff ff       	call   c0000560 <strlen>
c0007f23:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0007f2b:	eb 22                	jmp    c0007f4f <VgaText::receiveKey(unsigned char)+0x6f>
c0007f2d:	0f be c3             	movsx  eax,bl
c0007f30:	52                   	push   edx
c0007f31:	52                   	push   edx
c0007f32:	50                   	push   eax
c0007f33:	56                   	push   esi
c0007f34:	e8 65 fb ff ff       	call   c0007a9e <VgaText::putchar(char)>
c0007f39:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0007f3d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0007f42:	59                   	pop    ecx
c0007f43:	58                   	pop    eax
c0007f44:	8d 44 24 16          	lea    eax,[esp+0x16]
c0007f48:	50                   	push   eax
c0007f49:	57                   	push   edi
c0007f4a:	e8 91 88 ff ff       	call   c00007e0 <strcat>
c0007f4f:	83 c4 10             	add    esp,0x10
c0007f52:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0007f59:	75 05                	jne    c0007f60 <VgaText::receiveKey(unsigned char)+0x80>
c0007f5b:	80 fb 0a             	cmp    bl,0xa
c0007f5e:	75 50                	jne    c0007fb0 <VgaText::receiveKey(unsigned char)+0xd0>
c0007f60:	83 ec 0c             	sub    esp,0xc
c0007f63:	81 c6 b2 00 00 00    	add    esi,0xb2
c0007f69:	56                   	push   esi
c0007f6a:	e8 f1 85 ff ff       	call   c0000560 <strlen>
c0007f6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007f72:	89 c3                	mov    ebx,eax
c0007f74:	e8 e7 85 ff ff       	call   c0000560 <strlen>
c0007f79:	83 c4 10             	add    esp,0x10
c0007f7c:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0007f80:	3d 80 00 00 00       	cmp    eax,0x80
c0007f85:	76 10                	jbe    c0007f97 <VgaText::receiveKey(unsigned char)+0xb7>
c0007f87:	83 ec 0c             	sub    esp,0xc
c0007f8a:	68 7b cd 01 c0       	push   0xc001cd7b
c0007f8f:	e8 df 74 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0007f94:	83 c4 10             	add    esp,0x10
c0007f97:	50                   	push   eax
c0007f98:	50                   	push   eax
c0007f99:	57                   	push   edi
c0007f9a:	56                   	push   esi
c0007f9b:	e8 40 88 ff ff       	call   c00007e0 <strcat>
c0007fa0:	83 c4 0c             	add    esp,0xc
c0007fa3:	6a 30                	push   0x30
c0007fa5:	6a 00                	push   0x0
c0007fa7:	57                   	push   edi
c0007fa8:	e8 43 85 ff ff       	call   c00004f0 <memset>
c0007fad:	83 c4 10             	add    esp,0x10
c0007fb0:	83 c4 10             	add    esp,0x10
c0007fb3:	5b                   	pop    ebx
c0007fb4:	5e                   	pop    esi
c0007fb5:	5f                   	pop    edi
c0007fb6:	c3                   	ret    
c0007fb7:	90                   	nop

c0007fb8 <VgaText::doUpdate()>:
c0007fb8:	c3                   	ret    

c0007fb9 <newTerminal(char*)>:
c0007fb9:	83 ec 28             	sub    esp,0x28
c0007fbc:	68 34 01 00 00       	push   0x134
c0007fc1:	e8 9b eb ff ff       	call   c0006b61 <malloc>
c0007fc6:	5a                   	pop    edx
c0007fc7:	59                   	pop    ecx
c0007fc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fcc:	50                   	push   eax
c0007fcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007fd1:	e8 be fd ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c0007fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007fda:	83 c4 2c             	add    esp,0x2c
c0007fdd:	c3                   	ret    
c0007fde:	66 90                	xchg   ax,ax

c0007fe0 <TSS::TSS()>:
c0007fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fe4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007feb:	90                   	nop
c0007fec:	c3                   	ret    
c0007fed:	90                   	nop
c0007fee:	66 90                	xchg   ax,ax

c0007ff0 <TSS::setESP(unsigned long)>:
c0007ff0:	55                   	push   ebp
c0007ff1:	89 e5                	mov    ebp,esp
c0007ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0007ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007ff9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0007ffc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007fff:	90                   	nop
c0008000:	5d                   	pop    ebp
c0008001:	c3                   	ret    
c0008002:	66 90                	xchg   ax,ax

c0008004 <TSS::flush()>:
c0008004:	55                   	push   ebp
c0008005:	89 e5                	mov    ebp,esp
c0008007:	83 ec 10             	sub    esp,0x10
c000800a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000800d:	8b 00                	mov    eax,DWORD PTR [eax]
c000800f:	83 c8 03             	or     eax,0x3
c0008012:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008016:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000801a:	66 89 d0             	mov    ax,dx
c000801d:	0f 00 d8             	ltr    ax
c0008020:	90                   	nop
c0008021:	c9                   	leave  
c0008022:	c3                   	ret    
c0008023:	90                   	nop

c0008024 <TSS::setup(unsigned long, unsigned long)>:
c0008024:	55                   	push   ebp
c0008025:	89 e5                	mov    ebp,esp
c0008027:	83 ec 18             	sub    esp,0x18
c000802a:	83 ec 0c             	sub    esp,0xc
c000802d:	6a 68                	push   0x68
c000802f:	e8 2d eb ff ff       	call   c0006b61 <malloc>
c0008034:	83 c4 10             	add    esp,0x10
c0008037:	89 c2                	mov    edx,eax
c0008039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000803c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000803f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008045:	83 ec 04             	sub    esp,0x4
c0008048:	6a 68                	push   0x68
c000804a:	6a 00                	push   0x0
c000804c:	50                   	push   eax
c000804d:	e8 9e 84 ff ff       	call   c00004f0 <memset>
c0008052:	83 c4 10             	add    esp,0x10
c0008055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000805b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008067:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000806d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008073:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008076:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000807c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000807f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000808b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008097:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000809d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00080a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080af:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00080b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080bb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00080c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00080ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00080cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00080d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00080d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080df:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00080e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080ec:	0f 20 da             	mov    edx,cr3
c00080ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00080f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00080f5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00080f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00080fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080fe:	83 ec 08             	sub    esp,0x8
c0008101:	50                   	push   eax
c0008102:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008105:	50                   	push   eax
c0008106:	e8 9d e2 ff ff       	call   c00063a8 <GDTEntry::setBase(unsigned int)>
c000810b:	83 c4 10             	add    esp,0x10
c000810e:	83 ec 08             	sub    esp,0x8
c0008111:	6a 68                	push   0x68
c0008113:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008116:	50                   	push   eax
c0008117:	e8 a8 e2 ff ff       	call   c00063c4 <GDTEntry::setLimit(unsigned int)>
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008123:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008126:	83 e0 0f             	and    eax,0xf
c0008129:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000812c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000812f:	83 c8 40             	or     eax,0x40
c0008132:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008135:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000813a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008140:	05 78 01 00 00       	add    eax,0x178
c0008145:	83 ec 04             	sub    esp,0x4
c0008148:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000814b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000814e:	50                   	push   eax
c000814f:	e8 a4 e2 ff ff       	call   c00063f8 <GDT::addEntry(GDTEntry)>
c0008154:	83 c4 10             	add    esp,0x10
c0008157:	89 c2                	mov    edx,eax
c0008159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000815c:	89 10                	mov    DWORD PTR [eax],edx
c000815e:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008163:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008169:	05 78 01 00 00       	add    eax,0x178
c000816e:	83 ec 0c             	sub    esp,0xc
c0008171:	50                   	push   eax
c0008172:	e8 ab e2 ff ff       	call   c0006422 <GDT::flush()>
c0008177:	83 c4 10             	add    esp,0x10
c000817a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000817d:	8b 00                	mov    eax,DWORD PTR [eax]
c000817f:	c9                   	leave  
c0008180:	c3                   	ret    
c0008181:	90                   	nop

c0008182 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000818a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000818d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008192:	75 08                	jne    c000819c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008194:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000819a:	eb 38                	jmp    c00081d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000819c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00081a1:	75 17                	jne    c00081ba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00081a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00081a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00081ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00081b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00081b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081b7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00081ba:	89 c1                	mov    ecx,eax
c00081bc:	83 e1 fd             	and    ecx,0xfffffffd
c00081bf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00081c5:	74 cd                	je     c0008194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00081c7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00081cc:	83 e0 ef             	and    eax,0xffffffef
c00081cf:	83 f8 08             	cmp    eax,0x8
c00081d2:	76 c0                	jbe    c0008194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00081d4:	31 c0                	xor    eax,eax
c00081d6:	c3                   	ret    
c00081d7:	90                   	nop

c00081d8 <ReservedFilename::isAtty()>:
c00081d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00081df:	31 c0                	xor    eax,eax
c00081e1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00081e7:	74 09                	je     c00081f2 <ReservedFilename::isAtty()+0x1a>
c00081e9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00081ef:	0f 94 c0             	sete   al
c00081f2:	c3                   	ret    
c00081f3:	90                   	nop

c00081f4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00081f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00081fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008203:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008208:	75 08                	jne    c0008212 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000820a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008210:	eb 3d                	jmp    c000824f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008212:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008217:	75 17                	jne    c0008230 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000821e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008221:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008227:	8b 10                	mov    edx,DWORD PTR [eax]
c0008229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000822d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008230:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008235:	75 04                	jne    c000823b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008237:	89 0a                	mov    DWORD PTR [edx],ecx
c0008239:	eb 14                	jmp    c000824f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000823b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008240:	74 c8                	je     c000820a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008242:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008247:	83 e0 ef             	and    eax,0xffffffef
c000824a:	83 f8 08             	cmp    eax,0x8
c000824d:	76 bb                	jbe    c000820a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000824f:	31 c0                	xor    eax,eax
c0008251:	c3                   	ret    

c0008252 <UnixFile::getFileDescriptor()>:
c0008252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008259:	c3                   	ret    

c000825a <UnixFile::UnixFile(int)>:
c000825a:	53                   	push   ebx
c000825b:	83 ec 28             	sub    esp,0x28
c000825e:	ba 98 ce 01 c0       	mov    edx,0xc001ce98
c0008263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008267:	89 10                	mov    DWORD PTR [eax],edx
c0008269:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008271:	0f 8f 8c 01 00 00    	jg     c0008403 <UnixFile::UnixFile(int)+0x1a9>
c0008277:	a1 c0 ed 01 c0       	mov    eax,ds:0xc001edc0
c000827c:	8d 50 01             	lea    edx,[eax+0x1]
c000827f:	89 15 c0 ed 01 c0    	mov    DWORD PTR ds:0xc001edc0,edx
c0008285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008289:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000828c:	83 ec 08             	sub    esp,0x8
c000828f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008293:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008298:	e8 ab 36 01 00       	call   c001b948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000829d:	83 c4 10             	add    esp,0x10
c00082a0:	a0 f4 f4 01 c0       	mov    al,ds:0xc001f4f4
c00082a5:	83 f0 01             	xor    eax,0x1
c00082a8:	84 c0                	test   al,al
c00082aa:	0f 84 54 01 00 00    	je     c0008404 <UnixFile::UnixFile(int)+0x1aa>
c00082b0:	c6 05 f4 f4 01 c0 01 	mov    BYTE PTR ds:0xc001f4f4,0x1
c00082b7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00082bf:	83 ec 0c             	sub    esp,0xc
c00082c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082c6:	e8 96 e8 ff ff       	call   c0006b61 <malloc>
c00082cb:	83 c4 10             	add    esp,0x10
c00082ce:	89 c3                	mov    ebx,eax
c00082d0:	83 ec 08             	sub    esp,0x8
c00082d3:	68 03 ff ff 0f       	push   0xfffff03
c00082d8:	53                   	push   ebx
c00082d9:	e8 2c 01 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00082de:	83 c4 10             	add    esp,0x10
c00082e1:	89 1d ec f4 01 c0    	mov    DWORD PTR ds:0xc001f4ec,ebx
c00082e7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00082ef:	83 ec 0c             	sub    esp,0xc
c00082f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f6:	e8 66 e8 ff ff       	call   c0006b61 <malloc>
c00082fb:	83 c4 10             	add    esp,0x10
c00082fe:	89 c3                	mov    ebx,eax
c0008300:	83 ec 08             	sub    esp,0x8
c0008303:	68 01 ff ff 0f       	push   0xfffff01
c0008308:	53                   	push   ebx
c0008309:	e8 fc 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000830e:	83 c4 10             	add    esp,0x10
c0008311:	89 1d f0 f4 01 c0    	mov    DWORD PTR ds:0xc001f4f0,ebx
c0008317:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000831f:	83 ec 0c             	sub    esp,0xc
c0008322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008326:	e8 36 e8 ff ff       	call   c0006b61 <malloc>
c000832b:	83 c4 10             	add    esp,0x10
c000832e:	89 c3                	mov    ebx,eax
c0008330:	83 ec 08             	sub    esp,0x8
c0008333:	68 00 ff ff 0f       	push   0xfffff00
c0008338:	53                   	push   ebx
c0008339:	e8 cc 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000833e:	83 c4 10             	add    esp,0x10
c0008341:	89 1d e4 f4 01 c0    	mov    DWORD PTR ds:0xc001f4e4,ebx
c0008347:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000834f:	83 ec 0c             	sub    esp,0xc
c0008352:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008356:	e8 06 e8 ff ff       	call   c0006b61 <malloc>
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	89 c3                	mov    ebx,eax
c0008360:	83 ec 08             	sub    esp,0x8
c0008363:	68 02 ff ff 0f       	push   0xfffff02
c0008368:	53                   	push   ebx
c0008369:	e8 9c 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c000836e:	83 c4 10             	add    esp,0x10
c0008371:	89 1d e8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4e8,ebx
c0008377:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000837f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008384:	7f 7e                	jg     c0008404 <UnixFile::UnixFile(int)+0x1aa>
c0008386:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000838e:	83 ec 0c             	sub    esp,0xc
c0008391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008395:	e8 c7 e7 ff ff       	call   c0006b61 <malloc>
c000839a:	83 c4 10             	add    esp,0x10
c000839d:	89 c3                	mov    ebx,eax
c000839f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083a3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00083a8:	83 ec 08             	sub    esp,0x8
c00083ab:	50                   	push   eax
c00083ac:	53                   	push   ebx
c00083ad:	e8 58 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00083b2:	83 c4 10             	add    esp,0x10
c00083b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083b9:	89 1c 85 c0 f4 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0b40],ebx
c00083c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00083c8:	83 ec 0c             	sub    esp,0xc
c00083cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00083cf:	e8 8d e7 ff ff       	call   c0006b61 <malloc>
c00083d4:	83 c4 10             	add    esp,0x10
c00083d7:	89 c3                	mov    ebx,eax
c00083d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083dd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00083e2:	83 ec 08             	sub    esp,0x8
c00083e5:	50                   	push   eax
c00083e6:	53                   	push   ebx
c00083e7:	e8 1e 00 00 00       	call   c000840a <ReservedFilename::ReservedFilename(int)>
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083f3:	89 1c 85 80 f4 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0b80],ebx
c00083fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00083fe:	e9 7c ff ff ff       	jmp    c000837f <UnixFile::UnixFile(int)+0x125>
c0008403:	90                   	nop
c0008404:	83 c4 28             	add    esp,0x28
c0008407:	5b                   	pop    ebx
c0008408:	c3                   	ret    
c0008409:	90                   	nop

c000840a <ReservedFilename::ReservedFilename(int)>:
c000840a:	83 ec 0c             	sub    esp,0xc
c000840d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008411:	83 ec 08             	sub    esp,0x8
c0008414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008418:	50                   	push   eax
c0008419:	e8 3c fe ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c000841e:	83 c4 10             	add    esp,0x10
c0008421:	ba b4 ce 01 c0       	mov    edx,0xc001ceb4
c0008426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842a:	89 10                	mov    DWORD PTR [eax],edx
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008434:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008437:	90                   	nop
c0008438:	83 c4 0c             	add    esp,0xc
c000843b:	c3                   	ret    

c000843c <UnixFile::~UnixFile()>:
c000843c:	83 ec 1c             	sub    esp,0x1c
c000843f:	ba 98 ce 01 c0       	mov    edx,0xc001ce98
c0008444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008448:	89 10                	mov    DWORD PTR [eax],edx
c000844a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008451:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008456:	7f 73                	jg     c00084cb <UnixFile::~UnixFile()+0x8f>
c0008458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008460:	83 ec 0c             	sub    esp,0xc
c0008463:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008468:	e8 af 35 01 00       	call   c001ba1c <LinkedList<UnixFile>::getFirstElement()>
c000846d:	83 c4 10             	add    esp,0x10
c0008470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008474:	83 ec 0c             	sub    esp,0xc
c0008477:	68 f8 f4 01 c0       	push   0xc001f4f8
c000847c:	e8 a3 35 01 00       	call   c001ba24 <LinkedList<UnixFile>::removeFirst()>
c0008481:	83 c4 10             	add    esp,0x10
c0008484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008488:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000848c:	74 40                	je     c00084ce <UnixFile::~UnixFile()+0x92>
c000848e:	83 ec 08             	sub    esp,0x8
c0008491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008495:	68 f8 f4 01 c0       	push   0xc001f4f8
c000849a:	e8 a9 34 01 00       	call   c001b948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000849f:	83 c4 10             	add    esp,0x10
c00084a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084a6:	8d 50 01             	lea    edx,[eax+0x1]
c00084a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00084ad:	3d 88 13 00 00       	cmp    eax,0x1388
c00084b2:	0f 94 c0             	sete   al
c00084b5:	84 c0                	test   al,al
c00084b7:	74 a7                	je     c0008460 <UnixFile::~UnixFile()+0x24>
c00084b9:	83 ec 0c             	sub    esp,0xc
c00084bc:	68 70 ce 01 c0       	push   0xc001ce70
c00084c1:	e8 ad 6f 00 00       	call   c000f473 <Krnl::panic(char const*)>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	eb 95                	jmp    c0008460 <UnixFile::~UnixFile()+0x24>
c00084cb:	90                   	nop
c00084cc:	eb 01                	jmp    c00084cf <UnixFile::~UnixFile()+0x93>
c00084ce:	90                   	nop
c00084cf:	90                   	nop
c00084d0:	83 c4 1c             	add    esp,0x1c
c00084d3:	c3                   	ret    

c00084d4 <UnixFile::~UnixFile()>:
c00084d4:	83 ec 0c             	sub    esp,0xc
c00084d7:	83 ec 0c             	sub    esp,0xc
c00084da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084de:	e8 59 ff ff ff       	call   c000843c <UnixFile::~UnixFile()>
c00084e3:	83 c4 10             	add    esp,0x10
c00084e6:	83 ec 08             	sub    esp,0x8
c00084e9:	6a 0c                	push   0xc
c00084eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ef:	e8 3a 13 00 00       	call   c000982e <operator delete(void*, unsigned long)>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	83 c4 0c             	add    esp,0xc
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <ReservedFilename::~ReservedFilename()>:
c00084fc:	83 ec 0c             	sub    esp,0xc
c00084ff:	ba b4 ce 01 c0       	mov    edx,0xc001ceb4
c0008504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008508:	89 10                	mov    DWORD PTR [eax],edx
c000850a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850e:	83 ec 0c             	sub    esp,0xc
c0008511:	50                   	push   eax
c0008512:	e8 25 ff ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	90                   	nop
c000851b:	83 c4 0c             	add    esp,0xc
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <ReservedFilename::~ReservedFilename()>:
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	83 ec 0c             	sub    esp,0xc
c0008526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000852a:	e8 cd ff ff ff       	call   c00084fc <ReservedFilename::~ReservedFilename()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	83 ec 08             	sub    esp,0x8
c0008535:	6a 0c                	push   0xc
c0008537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000853b:	e8 ee 12 00 00       	call   c000982e <operator delete(void*, unsigned long)>
c0008540:	83 c4 10             	add    esp,0x10
c0008543:	83 c4 0c             	add    esp,0xc
c0008546:	c3                   	ret    

c0008547 <getFromFileDescriptor(int)>:
c0008547:	53                   	push   ebx
c0008548:	83 ec 08             	sub    esp,0x8
c000854b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000854f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0008555:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000855b:	7f 2c                	jg     c0008589 <getFromFileDescriptor(int)+0x42>
c000855d:	83 ec 0c             	sub    esp,0xc
c0008560:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008565:	e8 b2 34 01 00       	call   c001ba1c <LinkedList<UnixFile>::getFirstElement()>
c000856a:	83 c4 10             	add    esp,0x10
c000856d:	85 c0                	test   eax,eax
c000856f:	75 04                	jne    c0008575 <getFromFileDescriptor(int)+0x2e>
c0008571:	31 c0                	xor    eax,eax
c0008573:	eb 6e                	jmp    c00085e3 <getFromFileDescriptor(int)+0x9c>
c0008575:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0008578:	74 69                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c000857a:	52                   	push   edx
c000857b:	52                   	push   edx
c000857c:	50                   	push   eax
c000857d:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008582:	e8 3f 35 01 00       	call   c001bac6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0008587:	eb e1                	jmp    c000856a <getFromFileDescriptor(int)+0x23>
c0008589:	a1 ec f4 01 c0       	mov    eax,ds:0xc001f4ec
c000858e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0008594:	74 4d                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c0008596:	a1 f0 f4 01 c0       	mov    eax,ds:0xc001f4f0
c000859b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00085a1:	74 40                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085a3:	a1 e8 f4 01 c0       	mov    eax,ds:0xc001f4e8
c00085a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00085ae:	74 33                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085b0:	a1 e4 f4 01 c0       	mov    eax,ds:0xc001f4e4
c00085b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00085bb:	74 26                	je     c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00085c3:	83 f8 08             	cmp    eax,0x8
c00085c6:	77 09                	ja     c00085d1 <getFromFileDescriptor(int)+0x8a>
c00085c8:	8b 04 85 c0 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0b40]
c00085cf:	eb 12                	jmp    c00085e3 <getFromFileDescriptor(int)+0x9c>
c00085d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00085d7:	83 fb 08             	cmp    ebx,0x8
c00085da:	77 95                	ja     c0008571 <getFromFileDescriptor(int)+0x2a>
c00085dc:	8b 04 9d 80 f4 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe0b80]
c00085e3:	83 c4 08             	add    esp,0x8
c00085e6:	5b                   	pop    ebx
c00085e7:	c3                   	ret    

c00085e8 <__static_initialization_and_destruction_0(int, int)>:
c00085e8:	83 ec 0c             	sub    esp,0xc
c00085eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00085f0:	75 34                	jne    c0008626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085fa:	75 2a                	jne    c0008626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00085fc:	83 ec 0c             	sub    esp,0xc
c00085ff:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008604:	e8 fd 32 01 00       	call   c001b906 <LinkedList<UnixFile>::LinkedList()>
c0008609:	83 c4 10             	add    esp,0x10
c000860c:	83 ec 04             	sub    esp,0x4
c000860f:	68 ec eb 01 c0       	push   0xc001ebec
c0008614:	68 f8 f4 01 c0       	push   0xc001f4f8
c0008619:	68 04 b9 01 c0       	push   0xc001b904
c000861e:	e8 bb 11 00 00       	call   c00097de <__cxa_atexit>
c0008623:	83 c4 10             	add    esp,0x10
c0008626:	90                   	nop
c0008627:	83 c4 0c             	add    esp,0xc
c000862a:	c3                   	ret    

c000862b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000862b:	83 ec 0c             	sub    esp,0xc
c000862e:	83 ec 08             	sub    esp,0x8
c0008631:	68 ff ff 00 00       	push   0xffff
c0008636:	6a 01                	push   0x1
c0008638:	e8 ab ff ff ff       	call   c00085e8 <__static_initialization_and_destruction_0(int, int)>
c000863d:	83 c4 10             	add    esp,0x10
c0008640:	83 c4 0c             	add    esp,0xc
c0008643:	c3                   	ret    

c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0008644:	53                   	push   ebx
c0008645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000864d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0008653:	89 c8                	mov    eax,ecx
c0008655:	d1 e8                	shr    eax,1
c0008657:	03 05 c8 ed 01 c0    	add    eax,DWORD PTR ds:0xc001edc8
c000865d:	83 e1 01             	and    ecx,0x1
c0008660:	8a 10                	mov    dl,BYTE PTR [eax]
c0008662:	75 09                	jne    c000866d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0008664:	83 e2 f0             	and    edx,0xfffffff0
c0008667:	09 da                	or     edx,ebx
c0008669:	88 10                	mov    BYTE PTR [eax],dl
c000866b:	5b                   	pop    ebx
c000866c:	c3                   	ret    
c000866d:	c1 e3 04             	shl    ebx,0x4
c0008670:	83 e2 0f             	and    edx,0xf
c0008673:	09 da                	or     edx,ebx
c0008675:	88 10                	mov    BYTE PTR [eax],dl
c0008677:	5b                   	pop    ebx
c0008678:	c3                   	ret    

c0008679 <Virt::getPageState(unsigned long)>:
c0008679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000867d:	8b 0d c8 ed 01 c0    	mov    ecx,DWORD PTR ds:0xc001edc8
c0008683:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0008689:	89 d0                	mov    eax,edx
c000868b:	d1 e8                	shr    eax,1
c000868d:	83 e2 01             	and    edx,0x1
c0008690:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0008693:	75 04                	jne    c0008699 <Virt::getPageState(unsigned long)+0x20>
c0008695:	83 e0 0f             	and    eax,0xf
c0008698:	c3                   	ret    
c0008699:	c0 e8 04             	shr    al,0x4
c000869c:	c3                   	ret    

c000869d <Virt::allocateKernelVirtualPages(int)>:
c000869d:	55                   	push   ebp
c000869e:	31 ed                	xor    ebp,ebp
c00086a0:	57                   	push   edi
c00086a1:	56                   	push   esi
c00086a2:	53                   	push   ebx
c00086a3:	31 db                	xor    ebx,ebx
c00086a5:	83 ec 1c             	sub    esp,0x1c
c00086a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00086ac:	8b 3d c4 ed 01 c0    	mov    edi,DWORD PTR ds:0xc001edc4
c00086b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00086b7:	57                   	push   edi
c00086b8:	e8 bc ff ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c00086bd:	5a                   	pop    edx
c00086be:	84 c0                	test   al,al
c00086c0:	75 3a                	jne    c00086fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00086c2:	85 db                	test   ebx,ebx
c00086c4:	75 02                	jne    c00086c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00086c6:	89 fd                	mov    ebp,edi
c00086c8:	43                   	inc    ebx
c00086c9:	39 f3                	cmp    ebx,esi
c00086cb:	74 5a                	je     c0008727 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00086cd:	47                   	inc    edi
c00086ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00086d4:	76 31                	jbe    c0008707 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00086d6:	c7 05 c4 ed 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001edc4,0xc8000
c00086e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00086e5:	75 28                	jne    c000870f <Virt::allocateKernelVirtualPages(int)+0x72>
c00086e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00086ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00086f1:	57                   	push   edi
c00086f2:	e8 82 ff ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c00086f7:	5a                   	pop    edx
c00086f8:	84 c0                	test   al,al
c00086fa:	74 c6                	je     c00086c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00086fc:	31 db                	xor    ebx,ebx
c00086fe:	47                   	inc    edi
c00086ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0008705:	77 cf                	ja     c00086d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0008707:	89 3d c4 ed 01 c0    	mov    DWORD PTR ds:0xc001edc4,edi
c000870d:	eb a8                	jmp    c00086b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000870f:	83 ec 0c             	sub    esp,0xc
c0008712:	68 c8 ce 01 c0       	push   0xc001cec8
c0008717:	e8 57 6d 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000871c:	8b 3d c4 ed 01 c0    	mov    edi,DWORD PTR ds:0xc001edc4
c0008722:	83 c4 10             	add    esp,0x10
c0008725:	eb 90                	jmp    c00086b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0008727:	89 2d c4 ed 01 c0    	mov    DWORD PTR ds:0xc001edc4,ebp
c000872d:	4b                   	dec    ebx
c000872e:	74 5f                	je     c000878f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0008730:	85 f6                	test   esi,esi
c0008732:	74 3d                	je     c0008771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0008734:	89 e8                	mov    eax,ebp
c0008736:	31 db                	xor    ebx,ebx
c0008738:	8d 7e ff             	lea    edi,[esi-0x1]
c000873b:	eb 14                	jmp    c0008751 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000873d:	6a 01                	push   0x1
c000873f:	43                   	inc    ebx
c0008740:	50                   	push   eax
c0008741:	e8 fe fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008746:	58                   	pop    eax
c0008747:	39 f3                	cmp    ebx,esi
c0008749:	5a                   	pop    edx
c000874a:	74 25                	je     c0008771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000874c:	a1 c4 ed 01 c0       	mov    eax,ds:0xc001edc4
c0008751:	8d 50 01             	lea    edx,[eax+0x1]
c0008754:	85 db                	test   ebx,ebx
c0008756:	89 15 c4 ed 01 c0    	mov    DWORD PTR ds:0xc001edc4,edx
c000875c:	74 20                	je     c000877e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000875e:	39 df                	cmp    edi,ebx
c0008760:	75 db                	jne    c000873d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0008762:	6a 03                	push   0x3
c0008764:	43                   	inc    ebx
c0008765:	50                   	push   eax
c0008766:	e8 d9 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000876b:	59                   	pop    ecx
c000876c:	39 f3                	cmp    ebx,esi
c000876e:	58                   	pop    eax
c000876f:	75 db                	jne    c000874c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0008771:	83 c4 1c             	add    esp,0x1c
c0008774:	89 e8                	mov    eax,ebp
c0008776:	5b                   	pop    ebx
c0008777:	c1 e0 0c             	shl    eax,0xc
c000877a:	5e                   	pop    esi
c000877b:	5f                   	pop    edi
c000877c:	5d                   	pop    ebp
c000877d:	c3                   	ret    
c000877e:	6a 02                	push   0x2
c0008780:	bb 01 00 00 00       	mov    ebx,0x1
c0008785:	50                   	push   eax
c0008786:	e8 b9 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000878b:	58                   	pop    eax
c000878c:	5a                   	pop    edx
c000878d:	eb bd                	jmp    c000874c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000878f:	6a 04                	push   0x4
c0008791:	8d 45 01             	lea    eax,[ebp+0x1]
c0008794:	55                   	push   ebp
c0008795:	a3 c4 ed 01 c0       	mov    ds:0xc001edc4,eax
c000879a:	e8 a5 fe ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000879f:	59                   	pop    ecx
c00087a0:	89 e8                	mov    eax,ebp
c00087a2:	5b                   	pop    ebx
c00087a3:	c1 e0 0c             	shl    eax,0xc
c00087a6:	83 c4 1c             	add    esp,0x1c
c00087a9:	5b                   	pop    ebx
c00087aa:	5e                   	pop    esi
c00087ab:	5f                   	pop    edi
c00087ac:	5d                   	pop    ebp
c00087ad:	c3                   	ret    

c00087ae <Virt::freeSwapfilePage(unsigned long)>:
c00087ae:	53                   	push   ebx
c00087af:	8b 15 10 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f510
c00087b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00087b9:	b8 01 00 00 00       	mov    eax,0x1
c00087be:	89 cb                	mov    ebx,ecx
c00087c0:	d3 e0                	shl    eax,cl
c00087c2:	c1 eb 05             	shr    ebx,0x5
c00087c5:	f7 d0                	not    eax
c00087c7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00087ca:	5b                   	pop    ebx
c00087cb:	c3                   	ret    

c00087cc <Virt::swapIDToSector(unsigned long)>:
c00087cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087d0:	0f af 05 cc ed 01 c0 	imul   eax,DWORD PTR ds:0xc001edcc
c00087d7:	03 05 d4 ed 01 c0    	add    eax,DWORD PTR ds:0xc001edd4
c00087dd:	c3                   	ret    

c00087de <Virt::allocateSwapfilePage()>:
c00087de:	55                   	push   ebp
c00087df:	31 d2                	xor    edx,edx
c00087e1:	57                   	push   edi
c00087e2:	56                   	push   esi
c00087e3:	53                   	push   ebx
c00087e4:	83 ec 0c             	sub    esp,0xc
c00087e7:	8b 0d cc ed 01 c0    	mov    ecx,DWORD PTR ds:0xc001edcc
c00087ed:	a1 d0 ed 01 c0       	mov    eax,ds:0xc001edd0
c00087f2:	f7 f1                	div    ecx
c00087f4:	39 0d d0 ed 01 c0    	cmp    DWORD PTR ds:0xc001edd0,ecx
c00087fa:	72 2d                	jb     c0008829 <Virt::allocateSwapfilePage()+0x4b>
c00087fc:	8b 35 10 f5 01 c0    	mov    esi,DWORD PTR ds:0xc001f510
c0008802:	8b 16                	mov    edx,DWORD PTR [esi]
c0008804:	f6 c2 01             	test   dl,0x1
c0008807:	74 3c                	je     c0008845 <Virt::allocateSwapfilePage()+0x67>
c0008809:	31 c9                	xor    ecx,ecx
c000880b:	bf 01 00 00 00       	mov    edi,0x1
c0008810:	eb 12                	jmp    c0008824 <Virt::allocateSwapfilePage()+0x46>
c0008812:	89 fd                	mov    ebp,edi
c0008814:	89 ca                	mov    edx,ecx
c0008816:	d3 e5                	shl    ebp,cl
c0008818:	c1 ea 05             	shr    edx,0x5
c000881b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000881e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008820:	85 ea                	test   edx,ebp
c0008822:	74 2a                	je     c000884e <Virt::allocateSwapfilePage()+0x70>
c0008824:	41                   	inc    ecx
c0008825:	39 c8                	cmp    eax,ecx
c0008827:	77 e9                	ja     c0008812 <Virt::allocateSwapfilePage()+0x34>
c0008829:	83 ec 0c             	sub    esp,0xc
c000882c:	68 2f d0 01 c0       	push   0xc001d02f
c0008831:	e8 3d 6c 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	31 c9                	xor    ecx,ecx
c000883b:	83 c4 0c             	add    esp,0xc
c000883e:	89 c8                	mov    eax,ecx
c0008840:	5b                   	pop    ebx
c0008841:	5e                   	pop    esi
c0008842:	5f                   	pop    edi
c0008843:	5d                   	pop    ebp
c0008844:	c3                   	ret    
c0008845:	89 f3                	mov    ebx,esi
c0008847:	bd 01 00 00 00       	mov    ebp,0x1
c000884c:	31 c9                	xor    ecx,ecx
c000884e:	09 ea                	or     edx,ebp
c0008850:	89 c8                	mov    eax,ecx
c0008852:	89 13                	mov    DWORD PTR [ebx],edx
c0008854:	83 c4 0c             	add    esp,0xc
c0008857:	5b                   	pop    ebx
c0008858:	5e                   	pop    esi
c0008859:	5f                   	pop    edi
c000885a:	5d                   	pop    ebp
c000885b:	c3                   	ret    

c000885c <Virt::virtualMemorySetup()>:
c000885c:	53                   	push   ebx
c000885d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0008862:	6a 0f                	push   0xf
c0008864:	53                   	push   ebx
c0008865:	43                   	inc    ebx
c0008866:	e8 d9 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000886b:	58                   	pop    eax
c000886c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0008872:	5a                   	pop    edx
c0008873:	75 ed                	jne    c0008862 <Virt::virtualMemorySetup()+0x6>
c0008875:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000887a:	6a 00                	push   0x0
c000887c:	53                   	push   ebx
c000887d:	43                   	inc    ebx
c000887e:	e8 c1 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008883:	59                   	pop    ecx
c0008884:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000888a:	58                   	pop    eax
c000888b:	75 ed                	jne    c000887a <Virt::virtualMemorySetup()+0x1e>
c000888d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0008892:	6a 0f                	push   0xf
c0008894:	53                   	push   ebx
c0008895:	43                   	inc    ebx
c0008896:	e8 a9 fd ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000889b:	58                   	pop    eax
c000889c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00088a2:	5a                   	pop    edx
c00088a3:	75 ed                	jne    c0008892 <Virt::virtualMemorySetup()+0x36>
c00088a5:	5b                   	pop    ebx
c00088a6:	c3                   	ret    

c00088a7 <Virt::setupPageSwapping(int)>:
c00088a7:	53                   	push   ebx
c00088a8:	83 ec 0c             	sub    esp,0xc
c00088ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00088af:	a1 a8 19 02 c0       	mov    eax,ds:0xc00219a8
c00088b4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00088ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00088bc:	53                   	push   ebx
c00088bd:	c1 e3 0b             	shl    ebx,0xb
c00088c0:	68 46 d0 01 c0       	push   0xc001d046
c00088c5:	50                   	push   eax
c00088c6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00088c9:	89 1d d0 ed 01 c0    	mov    DWORD PTR ds:0xc001edd0,ebx
c00088cf:	c6 05 d8 ed 01 c0 43 	mov    BYTE PTR ds:0xc001edd8,0x43
c00088d6:	c1 eb 08             	shr    ebx,0x8
c00088d9:	a3 d4 ed 01 c0       	mov    ds:0xc001edd4,eax
c00088de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00088e1:	c7 05 cc ed 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001edcc,0x8
c00088eb:	e8 71 e2 ff ff       	call   c0006b61 <malloc>
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	89 c1                	mov    ecx,eax
c00088f5:	a3 10 f5 01 c0       	mov    ds:0xc001f510,eax
c00088fa:	31 d2                	xor    edx,edx
c00088fc:	a1 d0 ed 01 c0       	mov    eax,ds:0xc001edd0
c0008901:	f7 35 cc ed 01 c0    	div    DWORD PTR ds:0xc001edcc
c0008907:	c1 e8 05             	shr    eax,0x5
c000890a:	50                   	push   eax
c000890b:	6a 00                	push   0x0
c000890d:	51                   	push   ecx
c000890e:	e8 dd 7b ff ff       	call   c00004f0 <memset>
c0008913:	83 c4 18             	add    esp,0x18
c0008916:	5b                   	pop    ebx
c0008917:	c3                   	ret    

c0008918 <VAS::VAS(VAS*)>:
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0008931:	83 ec 0c             	sub    esp,0xc
c0008934:	68 e8 ce 01 c0       	push   0xc001cee8
c0008939:	e8 35 6b 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000893e:	83 c4 10             	add    esp,0x10
c0008941:	90                   	nop
c0008942:	83 c4 0c             	add    esp,0xc
c0008945:	c3                   	ret    

c0008946 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0008946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000894a:	89 c2                	mov    edx,eax
c000894c:	c1 e8 0a             	shr    eax,0xa
c000894f:	c1 ea 16             	shr    edx,0x16
c0008952:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008957:	19 c9                	sbb    ecx,ecx
c0008959:	c1 e2 0c             	shl    edx,0xc
c000895c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0008962:	25 fc 0f 00 00       	and    eax,0xffc
c0008967:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000896e:	01 d0                	add    eax,edx
c0008970:	c3                   	ret    
c0008971:	90                   	nop

c0008972 <VAS::getPageTableEntry(unsigned long)>:
c0008972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008976:	89 ca                	mov    edx,ecx
c0008978:	c1 e9 0a             	shr    ecx,0xa
c000897b:	c1 ea 16             	shr    edx,0x16
c000897e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0008984:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000898a:	c1 e0 0c             	shl    eax,0xc
c000898d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0008990:	c3                   	ret    

c0008991 <Virt::freeKernelVirtualPages(unsigned long)>:
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	be 01 00 00 00       	mov    esi,0x1
c0008998:	53                   	push   ebx
c0008999:	83 ec 10             	sub    esp,0x10
c000899c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089a0:	c1 eb 0c             	shr    ebx,0xc
c00089a3:	eb 3f                	jmp    c00089e4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00089a5:	83 ec 08             	sub    esp,0x8
c00089a8:	a1 14 f5 01 c0       	mov    eax,ds:0xc001f514
c00089ad:	57                   	push   edi
c00089ae:	50                   	push   eax
c00089af:	e8 be ff ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00089b9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00089bd:	f6 c4 04             	test   ah,0x4
c00089c0:	75 60                	jne    c0008a22 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00089c2:	80 fa 04             	cmp    dl,0x4
c00089c5:	74 79                	je     c0008a40 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00089c7:	80 fa 02             	cmp    dl,0x2
c00089ca:	0f 84 89 00 00 00    	je     c0008a59 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00089d0:	80 fa 03             	cmp    dl,0x3
c00089d3:	0f 84 ae 00 00 00    	je     c0008a87 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00089d9:	fe ca                	dec    dl
c00089db:	0f 84 93 00 00 00    	je     c0008a74 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00089e1:	43                   	inc    ebx
c00089e2:	31 f6                	xor    esi,esi
c00089e4:	53                   	push   ebx
c00089e5:	89 df                	mov    edi,ebx
c00089e7:	e8 8d fc ff ff       	call   c0008679 <Virt::getPageState(unsigned long)>
c00089ec:	c1 e7 0c             	shl    edi,0xc
c00089ef:	5a                   	pop    edx
c00089f0:	84 c0                	test   al,al
c00089f2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00089f6:	75 ad                	jne    c00089a5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00089f8:	83 ec 0c             	sub    esp,0xc
c00089fb:	68 5d d0 01 c0       	push   0xc001d05d
c0008a00:	e8 6e 6a 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0008a05:	5a                   	pop    edx
c0008a06:	59                   	pop    ecx
c0008a07:	57                   	push   edi
c0008a08:	8b 3d 14 f5 01 c0    	mov    edi,DWORD PTR ds:0xc001f514
c0008a0e:	57                   	push   edi
c0008a0f:	e8 5e ff ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c0008a14:	83 c4 10             	add    esp,0x10
c0008a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a19:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a1d:	f6 c4 04             	test   ah,0x4
c0008a20:	74 bf                	je     c00089e1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a22:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008a26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008a2b:	83 ec 0c             	sub    esp,0xc
c0008a2e:	50                   	push   eax
c0008a2f:	e8 98 e4 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a3b:	80 fa 04             	cmp    dl,0x4
c0008a3e:	75 87                	jne    c00089c7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0008a40:	89 f0                	mov    eax,esi
c0008a42:	84 c0                	test   al,al
c0008a44:	75 47                	jne    c0008a8d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0008a46:	c7 44 24 20 0c cf 01 c0 	mov    DWORD PTR [esp+0x20],0xc001cf0c
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	5b                   	pop    ebx
c0008a52:	5e                   	pop    esi
c0008a53:	5f                   	pop    edi
c0008a54:	e9 1a 6a 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c0008a59:	89 f0                	mov    eax,esi
c0008a5b:	84 c0                	test   al,al
c0008a5d:	75 15                	jne    c0008a74 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0008a5f:	83 ec 0c             	sub    esp,0xc
c0008a62:	68 79 d0 01 c0       	push   0xc001d079
c0008a67:	e8 07 6a 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0008a6c:	83 c4 10             	add    esp,0x10
c0008a6f:	e9 6d ff ff ff       	jmp    c00089e1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a74:	83 ec 08             	sub    esp,0x8
c0008a77:	6a 00                	push   0x0
c0008a79:	53                   	push   ebx
c0008a7a:	e8 c5 fb ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008a7f:	83 c4 10             	add    esp,0x10
c0008a82:	e9 5a ff ff ff       	jmp    c00089e1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0008a87:	89 f0                	mov    eax,esi
c0008a89:	84 c0                	test   al,al
c0008a8b:	75 15                	jne    c0008aa2 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0008a8d:	83 ec 08             	sub    esp,0x8
c0008a90:	6a 00                	push   0x0
c0008a92:	53                   	push   ebx
c0008a93:	e8 ac fb ff ff       	call   c0008644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0008a98:	83 c4 10             	add    esp,0x10
c0008a9b:	83 c4 10             	add    esp,0x10
c0008a9e:	5b                   	pop    ebx
c0008a9f:	5e                   	pop    esi
c0008aa0:	5f                   	pop    edi
c0008aa1:	c3                   	ret    
c0008aa2:	c7 44 24 20 95 d0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d095
c0008aaa:	83 c4 10             	add    esp,0x10
c0008aad:	5b                   	pop    ebx
c0008aae:	5e                   	pop    esi
c0008aaf:	5f                   	pop    edi
c0008ab0:	e9 be 69 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c0008ab5:	90                   	nop

c0008ab6 <VAS::freeAllocatedPages(unsigned long)>:
c0008ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008aba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008abe:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0008ac2:	74 09                	je     c0008acd <VAS::freeAllocatedPages(unsigned long)+0x17>
c0008ac4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ac8:	e9 c4 fe ff ff       	jmp    c0008991 <Virt::freeKernelVirtualPages(unsigned long)>
c0008acd:	c7 44 24 04 30 cf 01 c0 	mov    DWORD PTR [esp+0x4],0xc001cf30
c0008ad5:	e9 4a 0e 00 00       	jmp    c0009924 <Dbg::kprintf(char const*, ...)>

c0008ada <VAS::virtualToPhysical(unsigned long)>:
c0008ada:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008ade:	50                   	push   eax
c0008adf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ae3:	52                   	push   edx
c0008ae4:	e8 89 fe ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c0008ae9:	59                   	pop    ecx
c0008aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0008aec:	5a                   	pop    edx
c0008aed:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008af2:	c3                   	ret    
c0008af3:	90                   	nop

c0008af4 <VAS::reflagRange(unsigned long, int, int, int)>:
c0008af4:	55                   	push   ebp
c0008af5:	57                   	push   edi
c0008af6:	56                   	push   esi
c0008af7:	53                   	push   ebx
c0008af8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008afc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0008b00:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b04:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008b08:	85 db                	test   ebx,ebx
c0008b0a:	7e 22                	jle    c0008b2e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0008b0c:	c1 e3 0c             	shl    ebx,0xc
c0008b0f:	01 f3                	add    ebx,esi
c0008b11:	56                   	push   esi
c0008b12:	81 c6 00 10 00 00    	add    esi,0x1000
c0008b18:	55                   	push   ebp
c0008b19:	e8 54 fe ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c0008b1e:	5a                   	pop    edx
c0008b1f:	59                   	pop    ecx
c0008b20:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b22:	21 f9                	and    ecx,edi
c0008b24:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0008b28:	39 f3                	cmp    ebx,esi
c0008b2a:	89 08                	mov    DWORD PTR [eax],ecx
c0008b2c:	75 e3                	jne    c0008b11 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0008b2e:	5b                   	pop    ebx
c0008b2f:	5e                   	pop    esi
c0008b30:	5f                   	pop    edi
c0008b31:	5d                   	pop    ebp
c0008b32:	c3                   	ret    
c0008b33:	90                   	nop

c0008b34 <VAS::setToWriteCombining(unsigned long, int)>:
c0008b34:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008b39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008b3f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0008b46:	75 01                	jne    c0008b49 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0008b48:	c3                   	ret    
c0008b49:	68 80 00 00 00       	push   0x80
c0008b4e:	6a ff                	push   0xffffffff
c0008b50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b54:	50                   	push   eax
c0008b55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008b59:	52                   	push   edx
c0008b5a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b5e:	51                   	push   ecx
c0008b5f:	e8 90 ff ff ff       	call   c0008af4 <VAS::reflagRange(unsigned long, int, int, int)>
c0008b64:	83 c4 14             	add    esp,0x14
c0008b67:	c3                   	ret    

c0008b68 <VAS::mapOtherVASIn(bool, VAS*)>:
c0008b68:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0008b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b71:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0008b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b78:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0008b7b:	19 c0                	sbb    eax,eax
c0008b7d:	83 ca 03             	or     edx,0x3
c0008b80:	83 e0 fc             	and    eax,0xfffffffc
c0008b83:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0008b8a:	0f 20 d8             	mov    eax,cr3
c0008b8d:	0f 22 d8             	mov    cr3,eax
c0008b90:	c3                   	ret    
c0008b91:	90                   	nop

c0008b92 <VAS::~VAS()>:
c0008b92:	83 ec 2c             	sub    esp,0x2c
c0008b95:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008b9d:	fa                   	cli    
c0008b9e:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0008ba3:	40                   	inc    eax
c0008ba4:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0008ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008bbd:	6a 01                	push   0x1
c0008bbf:	50                   	push   eax
c0008bc0:	e8 a3 ff ff ff       	call   c0008b68 <VAS::mapOtherVASIn(bool, VAS*)>
c0008bc5:	83 c4 0c             	add    esp,0xc
c0008bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0008bd8:	0f 8f d4 00 00 00    	jg     c0008cb2 <VAS::~VAS()+0x120>
c0008bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008be9:	c1 e2 02             	shl    edx,0x2
c0008bec:	01 d0                	add    eax,edx
c0008bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf8:	83 e0 01             	and    eax,0x1
c0008bfb:	0f 84 a8 00 00 00    	je     c0008ca9 <VAS::~VAS()+0x117>
c0008c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0008c11:	7f 72                	jg     c0008c85 <VAS::~VAS()+0xf3>
c0008c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008c17:	c1 e0 0a             	shl    eax,0xa
c0008c1a:	89 c2                	mov    edx,eax
c0008c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c20:	01 d0                	add    eax,edx
c0008c22:	c1 e0 0c             	shl    eax,0xc
c0008c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0008c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0008c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008c3d:	6a 01                	push   0x1
c0008c3f:	50                   	push   eax
c0008c40:	e8 01 fd ff ff       	call   c0008946 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0008c45:	83 c4 0c             	add    esp,0xc
c0008c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c5a:	25 01 04 00 00       	and    eax,0x401
c0008c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0008c64:	75 19                	jne    c0008c7f <VAS::~VAS()+0xed>
c0008c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008c6f:	83 ec 0c             	sub    esp,0xc
c0008c72:	50                   	push   eax
c0008c73:	e8 54 e2 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008c78:	83 c4 10             	add    esp,0x10
c0008c7b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008c7f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0008c83:	eb 84                	jmp    c0008c09 <VAS::~VAS()+0x77>
c0008c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c89:	25 00 04 00 00       	and    eax,0x400
c0008c8e:	74 19                	je     c0008ca9 <VAS::~VAS()+0x117>
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008c99:	83 ec 0c             	sub    esp,0xc
c0008c9c:	50                   	push   eax
c0008c9d:	e8 2a e2 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ca9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0008cad:	e9 1e ff ff ff       	jmp    c0008bd0 <VAS::~VAS()+0x3e>
c0008cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008cb6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cb9:	83 ec 0c             	sub    esp,0xc
c0008cbc:	50                   	push   eax
c0008cbd:	e8 cf fc ff ff       	call   c0008991 <Virt::freeKernelVirtualPages(unsigned long)>
c0008cc2:	83 c4 10             	add    esp,0x10
c0008cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008cc9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008ccc:	83 ec 0c             	sub    esp,0xc
c0008ccf:	50                   	push   eax
c0008cd0:	e8 f7 e1 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0008cd5:	83 c4 10             	add    esp,0x10
c0008cd8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008cdc:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0008ce1:	48                   	dec    eax
c0008ce2:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0008ce7:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0008cec:	85 c0                	test   eax,eax
c0008cee:	75 01                	jne    c0008cf1 <VAS::~VAS()+0x15f>
c0008cf0:	fb                   	sti    
c0008cf1:	90                   	nop
c0008cf2:	83 c4 2c             	add    esp,0x2c
c0008cf5:	c3                   	ret    

c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0008cf6:	55                   	push   ebp
c0008cf7:	57                   	push   edi
c0008cf8:	56                   	push   esi
c0008cf9:	53                   	push   ebx
c0008cfa:	83 ec 1c             	sub    esp,0x1c
c0008cfd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0008d01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008d05:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0008d0b:	77 0b                	ja     c0008d18 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0008d0d:	0f 20 d8             	mov    eax,cr3
c0008d10:	0f 20 d8             	mov    eax,cr3
c0008d13:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0008d16:	75 47                	jne    c0008d5f <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0008d18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d1c:	09 d8                	or     eax,ebx
c0008d1e:	a9 ff 0f 00 00       	test   eax,0xfff
c0008d23:	75 57                	jne    c0008d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0008d25:	89 de                	mov    esi,ebx
c0008d27:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008d2a:	c1 ee 16             	shr    esi,0x16
c0008d2d:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0008d34:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0008d38:	74 54                	je     c0008d8e <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0008d3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008d3e:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0008d44:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0008d48:	c1 e6 0c             	shl    esi,0xc
c0008d4b:	c1 eb 0a             	shr    ebx,0xa
c0008d4e:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0008d54:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0008d57:	83 c4 1c             	add    esp,0x1c
c0008d5a:	5b                   	pop    ebx
c0008d5b:	5e                   	pop    esi
c0008d5c:	5f                   	pop    edi
c0008d5d:	5d                   	pop    ebp
c0008d5e:	c3                   	ret    
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	68 54 cf 01 c0       	push   0xc001cf54
c0008d67:	e8 b8 0b 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0008d6c:	83 c4 10             	add    esp,0x10
c0008d6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008d73:	09 d8                	or     eax,ebx
c0008d75:	a9 ff 0f 00 00       	test   eax,0xfff
c0008d7a:	74 a9                	je     c0008d25 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008d7c:	83 ec 0c             	sub    esp,0xc
c0008d7f:	68 bc cf 01 c0       	push   0xc001cfbc
c0008d84:	e8 ea 66 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0008d89:	83 c4 10             	add    esp,0x10
c0008d8c:	eb 97                	jmp    c0008d25 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0008d8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d92:	e8 97 e1 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008d97:	83 ec 0c             	sub    esp,0xc
c0008d9a:	89 c5                	mov    ebp,eax
c0008d9c:	8b 0d 14 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f514
c0008da2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0008da6:	6a 01                	push   0x1
c0008da8:	e8 f0 f8 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0008dad:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0008db4:	6a 01                	push   0x1
c0008db6:	50                   	push   eax
c0008db7:	55                   	push   ebp
c0008db8:	81 cd 07 04 00 00    	or     ebp,0x407
c0008dbe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008dc2:	51                   	push   ecx
c0008dc3:	e8 28 02 00 00       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0008dc8:	83 c4 1c             	add    esp,0x1c
c0008dcb:	68 00 10 00 00       	push   0x1000
c0008dd0:	6a 00                	push   0x0
c0008dd2:	50                   	push   eax
c0008dd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008dd7:	e8 14 77 ff ff       	call   c00004f0 <memset>
c0008ddc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0008de0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0008de3:	e8 a9 fb ff ff       	call   c0008991 <Virt::freeKernelVirtualPages(unsigned long)>
c0008de8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008dec:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0008def:	83 c4 10             	add    esp,0x10
c0008df2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0008df5:	e9 40 ff ff ff       	jmp    c0008d3a <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0008dfa <VAS::allocatePages(int, int)>:
c0008dfa:	55                   	push   ebp
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 1c             	sub    esp,0x1c
c0008e01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0008e05:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008e0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e10:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0008e16:	83 e0 01             	and    eax,0x1
c0008e19:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0008e1d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0008e21:	0f 85 cc 00 00 00    	jne    c0008ef3 <VAS::allocatePages(int, int)+0xf9>
c0008e27:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008e2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e2e:	85 c0                	test   eax,eax
c0008e30:	0f 84 a1 00 00 00    	je     c0008ed7 <VAS::allocatePages(int, int)+0xdd>
c0008e36:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008e3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e3e:	c1 e6 0c             	shl    esi,0xc
c0008e41:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0008e45:	85 c0                	test   eax,eax
c0008e47:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0008e4a:	7e 33                	jle    c0008e7f <VAS::allocatePages(int, int)+0x85>
c0008e4c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e50:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008e54:	81 cd 00 04 00 00    	or     ebp,0x400
c0008e5a:	e8 cf e0 ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008e5f:	55                   	push   ebp
c0008e60:	53                   	push   ebx
c0008e61:	50                   	push   eax
c0008e62:	57                   	push   edi
c0008e63:	e8 8e fe ff ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e70:	74 03                	je     c0008e75 <VAS::allocatePages(int, int)+0x7b>
c0008e72:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008e75:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008e7b:	39 de                	cmp    esi,ebx
c0008e7d:	75 db                	jne    c0008e5a <VAS::allocatePages(int, int)+0x60>
c0008e7f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008e84:	75 12                	jne    c0008e98 <VAS::allocatePages(int, int)+0x9e>
c0008e86:	0f 20 d8             	mov    eax,cr3
c0008e89:	0f 22 d8             	mov    cr3,eax
c0008e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e90:	83 c4 1c             	add    esp,0x1c
c0008e93:	5b                   	pop    ebx
c0008e94:	5e                   	pop    esi
c0008e95:	5f                   	pop    edi
c0008e96:	5d                   	pop    ebp
c0008e97:	c3                   	ret    
c0008e98:	c1 ee 0a             	shr    esi,0xa
c0008e9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008e9f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0008ea5:	c1 eb 0a             	shr    ebx,0xa
c0008ea8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0008eae:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008eb4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008eba:	39 c3                	cmp    ebx,eax
c0008ebc:	77 ce                	ja     c0008e8c <VAS::allocatePages(int, int)+0x92>
c0008ebe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008ec1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008ec7:	39 d8                	cmp    eax,ebx
c0008ec9:	73 f3                	jae    c0008ebe <VAS::allocatePages(int, int)+0xc4>
c0008ecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ecf:	83 c4 1c             	add    esp,0x1c
c0008ed2:	5b                   	pop    ebx
c0008ed3:	5e                   	pop    esi
c0008ed4:	5f                   	pop    edi
c0008ed5:	5d                   	pop    ebp
c0008ed6:	c3                   	ret    
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	68 e0 cf 01 c0       	push   0xc001cfe0
c0008edf:	e8 8f 65 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0008ee4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0008ee7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008eeb:	83 c4 10             	add    esp,0x10
c0008eee:	e9 43 ff ff ff       	jmp    c0008e36 <VAS::allocatePages(int, int)+0x3c>
c0008ef3:	83 ec 0c             	sub    esp,0xc
c0008ef6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0008efa:	51                   	push   ecx
c0008efb:	e8 9d f7 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0008f00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0008f0c:	0f 87 9b 00 00 00    	ja     c0008fad <VAS::allocatePages(int, int)+0x1b3>
c0008f12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008f16:	85 d2                	test   edx,edx
c0008f18:	7e 3c                	jle    c0008f56 <VAS::allocatePages(int, int)+0x15c>
c0008f1a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008f1e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0008f22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008f26:	c1 e5 0c             	shl    ebp,0xc
c0008f29:	81 ce 00 04 00 00    	or     esi,0x400
c0008f2f:	01 dd                	add    ebp,ebx
c0008f31:	e8 f8 df ff ff       	call   c0006f2e <Phys::allocatePage()>
c0008f36:	56                   	push   esi
c0008f37:	53                   	push   ebx
c0008f38:	50                   	push   eax
c0008f39:	57                   	push   edi
c0008f3a:	e8 b7 fd ff ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f47:	74 03                	je     c0008f4c <VAS::allocatePages(int, int)+0x152>
c0008f49:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f4c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f52:	39 dd                	cmp    ebp,ebx
c0008f54:	75 db                	jne    c0008f31 <VAS::allocatePages(int, int)+0x137>
c0008f56:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0008f5b:	0f 84 25 ff ff ff    	je     c0008e86 <VAS::allocatePages(int, int)+0x8c>
c0008f61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008f65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008f69:	89 d3                	mov    ebx,edx
c0008f6b:	c1 e0 0c             	shl    eax,0xc
c0008f6e:	c1 eb 0a             	shr    ebx,0xa
c0008f71:	01 d0                	add    eax,edx
c0008f73:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0008f79:	c1 e8 0a             	shr    eax,0xa
c0008f7c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0008f82:	25 00 f0 ff ff       	and    eax,0xfffff000
c0008f87:	2d 00 00 40 00       	sub    eax,0x400000
c0008f8c:	39 c3                	cmp    ebx,eax
c0008f8e:	0f 87 f8 fe ff ff    	ja     c0008e8c <VAS::allocatePages(int, int)+0x92>
c0008f94:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0008f97:	81 c3 00 10 00 00    	add    ebx,0x1000
c0008f9d:	39 d8                	cmp    eax,ebx
c0008f9f:	73 f3                	jae    c0008f94 <VAS::allocatePages(int, int)+0x19a>
c0008fa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fa5:	83 c4 1c             	add    esp,0x1c
c0008fa8:	5b                   	pop    ebx
c0008fa9:	5e                   	pop    esi
c0008faa:	5f                   	pop    edi
c0008fab:	5d                   	pop    ebp
c0008fac:	c3                   	ret    
c0008fad:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008fb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008fb8:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0008fbf:	0f 84 4d ff ff ff    	je     c0008f12 <VAS::allocatePages(int, int)+0x118>
c0008fc5:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0008fcd:	e9 40 ff ff ff       	jmp    c0008f12 <VAS::allocatePages(int, int)+0x118>

c0008fd2 <VAS::setCPUSpecific(unsigned long)>:
c0008fd2:	83 ec 0c             	sub    esp,0xc
c0008fd5:	6a 05                	push   0x5
c0008fd7:	68 00 00 40 c2       	push   0xc2400000
c0008fdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fe0:	50                   	push   eax
c0008fe1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008fe5:	52                   	push   edx
c0008fe6:	e8 0b fd ff ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008feb:	83 c4 1c             	add    esp,0x1c
c0008fee:	c3                   	ret    
c0008fef:	90                   	nop

c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0008ff0:	55                   	push   ebp
c0008ff1:	57                   	push   edi
c0008ff2:	56                   	push   esi
c0008ff3:	53                   	push   ebx
c0008ff4:	83 ec 1c             	sub    esp,0x1c
c0008ff7:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0008ffc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009000:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009006:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000900a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009010:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009014:	83 e0 01             	and    eax,0x1
c0009017:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000901b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000901f:	85 c0                	test   eax,eax
c0009021:	7e 39                	jle    c000905c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009023:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009027:	89 f3                	mov    ebx,esi
c0009029:	c1 e0 0c             	shl    eax,0xc
c000902c:	01 f0                	add    eax,esi
c000902e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009032:	55                   	push   ebp
c0009033:	53                   	push   ebx
c0009034:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009038:	29 f0                	sub    eax,esi
c000903a:	01 d8                	add    eax,ebx
c000903c:	50                   	push   eax
c000903d:	57                   	push   edi
c000903e:	e8 b3 fc ff ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009043:	83 c4 10             	add    esp,0x10
c0009046:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000904b:	74 03                	je     c0009050 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000904d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009050:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009056:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000905a:	75 d6                	jne    c0009032 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000905c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009061:	75 10                	jne    c0009073 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009063:	0f 20 d8             	mov    eax,cr3
c0009066:	0f 22 d8             	mov    cr3,eax
c0009069:	83 c4 1c             	add    esp,0x1c
c000906c:	89 f0                	mov    eax,esi
c000906e:	5b                   	pop    ebx
c000906f:	5e                   	pop    esi
c0009070:	5f                   	pop    edi
c0009071:	5d                   	pop    ebp
c0009072:	c3                   	ret    
c0009073:	89 f3                	mov    ebx,esi
c0009075:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009079:	c1 eb 0a             	shr    ebx,0xa
c000907c:	c1 e0 0c             	shl    eax,0xc
c000907f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009085:	01 f0                	add    eax,esi
c0009087:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000908d:	c1 e8 0a             	shr    eax,0xa
c0009090:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009095:	2d 00 00 40 00       	sub    eax,0x400000
c000909a:	39 c3                	cmp    ebx,eax
c000909c:	77 cb                	ja     c0009069 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000909e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00090a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00090a7:	39 d8                	cmp    eax,ebx
c00090a9:	73 f3                	jae    c000909e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00090ab:	83 c4 1c             	add    esp,0x1c
c00090ae:	89 f0                	mov    eax,esi
c00090b0:	5b                   	pop    ebx
c00090b1:	5e                   	pop    esi
c00090b2:	5f                   	pop    edi
c00090b3:	5d                   	pop    ebp
c00090b4:	c3                   	ret    
c00090b5:	90                   	nop

c00090b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00090b6:	55                   	push   ebp
c00090b7:	57                   	push   edi
c00090b8:	56                   	push   esi
c00090b9:	53                   	push   ebx
c00090ba:	83 ec 1c             	sub    esp,0x1c
c00090bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090c1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00090c5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00090c9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00090cd:	a9 ff 0f 00 00       	test   eax,0xfff
c00090d2:	75 4a                	jne    c000911e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00090d4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00090d8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00090db:	c1 eb 16             	shr    ebx,0x16
c00090de:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00090e5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00090e9:	74 4d                	je     c0009138 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00090eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090ef:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00090f3:	c1 e8 0a             	shr    eax,0xa
c00090f6:	80 fa 01             	cmp    dl,0x1
c00090f9:	19 d2                	sbb    edx,edx
c00090fb:	c1 e3 0c             	shl    ebx,0xc
c00090fe:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009102:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009108:	25 fc 0f 00 00       	and    eax,0xffc
c000910d:	01 d8                	add    eax,ebx
c000910f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009116:	83 c4 1c             	add    esp,0x1c
c0009119:	5b                   	pop    ebx
c000911a:	5e                   	pop    esi
c000911b:	5f                   	pop    edi
c000911c:	5d                   	pop    ebp
c000911d:	c3                   	ret    
c000911e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009122:	83 ec 0c             	sub    esp,0xc
c0009125:	68 0c d0 01 c0       	push   0xc001d00c
c000912a:	e8 44 63 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000912f:	83 c4 10             	add    esp,0x10
c0009132:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009136:	eb 9c                	jmp    c00090d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009138:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000913c:	e8 ed dd ff ff       	call   c0006f2e <Phys::allocatePage()>
c0009141:	83 ec 0c             	sub    esp,0xc
c0009144:	89 c5                	mov    ebp,eax
c0009146:	8b 0d 14 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f514
c000914c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009150:	6a 01                	push   0x1
c0009152:	e8 46 f5 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0009157:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000915e:	6a 01                	push   0x1
c0009160:	50                   	push   eax
c0009161:	55                   	push   ebp
c0009162:	81 cd 07 04 00 00    	or     ebp,0x407
c0009168:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000916c:	51                   	push   ecx
c000916d:	e8 7e fe ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009172:	83 c4 1c             	add    esp,0x1c
c0009175:	68 00 10 00 00       	push   0x1000
c000917a:	6a 00                	push   0x0
c000917c:	50                   	push   eax
c000917d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009181:	e8 6a 73 ff ff       	call   c00004f0 <memset>
c0009186:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000918a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000918d:	e8 ff f7 ff ff       	call   c0008991 <Virt::freeKernelVirtualPages(unsigned long)>
c0009192:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009195:	83 c4 10             	add    esp,0x10
c0009198:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000919b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000919f:	e9 47 ff ff ff       	jmp    c00090eb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00091a4 <VAS::VAS(bool)>:
c00091a4:	53                   	push   ebx
c00091a5:	83 ec 28             	sub    esp,0x28
c00091a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00091ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00091b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00091bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00091c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00091ce:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00091d1:	e8 58 dd ff ff       	call   c0006f2e <Phys::allocatePage()>
c00091d6:	89 c2                	mov    edx,eax
c00091d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00091df:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c00091e5:	83 ec 0c             	sub    esp,0xc
c00091e8:	6a 01                	push   0x1
c00091ea:	e8 ae f4 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	89 c2                	mov    edx,eax
c00091f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00091fb:	83 ec 0c             	sub    esp,0xc
c00091fe:	6a 03                	push   0x3
c0009200:	6a 01                	push   0x1
c0009202:	52                   	push   edx
c0009203:	50                   	push   eax
c0009204:	53                   	push   ebx
c0009205:	e8 e6 fd ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000920a:	83 c4 20             	add    esp,0x20
c000920d:	89 c2                	mov    edx,eax
c000920f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009213:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009216:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000921e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009226:	7f 1c                	jg     c0009244 <VAS::VAS(bool)+0xa0>
c0009228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000922c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000922f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009233:	c1 e2 02             	shl    edx,0x2
c0009236:	01 d0                	add    eax,edx
c0009238:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000923e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009242:	eb da                	jmp    c000921e <VAS::VAS(bool)+0x7a>
c0009244:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000924c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009254:	7f 7a                	jg     c00092d0 <VAS::VAS(bool)+0x12c>
c0009256:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000925a:	2d 00 02 00 00       	sub    eax,0x200
c000925f:	c1 e0 0c             	shl    eax,0xc
c0009262:	83 c8 03             	or     eax,0x3
c0009265:	89 c2                	mov    edx,eax
c0009267:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000926c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009272:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009278:	83 e0 10             	and    eax,0x10
c000927b:	84 c0                	test   al,al
c000927d:	74 07                	je     c0009286 <VAS::VAS(bool)+0xe2>
c000927f:	b8 00 01 00 00       	mov    eax,0x100
c0009284:	eb 05                	jmp    c000928b <VAS::VAS(bool)+0xe7>
c0009286:	b8 00 00 00 00       	mov    eax,0x0
c000928b:	09 d0                	or     eax,edx
c000928d:	89 c1                	mov    ecx,eax
c000928f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009293:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009296:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000929a:	c1 e2 02             	shl    edx,0x2
c000929d:	01 d0                	add    eax,edx
c000929f:	89 ca                	mov    edx,ecx
c00092a1:	89 10                	mov    DWORD PTR [eax],edx
c00092a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092a7:	2d 40 03 00 00       	sub    eax,0x340
c00092ac:	83 f8 7f             	cmp    eax,0x7f
c00092af:	77 16                	ja     c00092c7 <VAS::VAS(bool)+0x123>
c00092b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00092b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092bc:	c1 e2 02             	shl    edx,0x2
c00092bf:	01 d0                	add    eax,edx
c00092c1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00092c7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00092cb:	e9 7c ff ff ff       	jmp    c000924c <VAS::VAS(bool)+0xa8>
c00092d0:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00092d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00092db:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00092e1:	83 e0 10             	and    eax,0x10
c00092e4:	84 c0                	test   al,al
c00092e6:	74 07                	je     c00092ef <VAS::VAS(bool)+0x14b>
c00092e8:	b8 03 41 00 00       	mov    eax,0x4103
c00092ed:	eb 05                	jmp    c00092f4 <VAS::VAS(bool)+0x150>
c00092ef:	b8 03 40 00 00       	mov    eax,0x4003
c00092f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00092f8:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00092fb:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009301:	89 02                	mov    DWORD PTR [edx],eax
c0009303:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0009308:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000930e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009314:	83 ec 08             	sub    esp,0x8
c0009317:	50                   	push   eax
c0009318:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000931c:	e8 b1 fc ff ff       	call   c0008fd2 <VAS::setCPUSpecific(unsigned long)>
c0009321:	83 c4 10             	add    esp,0x10
c0009324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009328:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000932b:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0009330:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009336:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000933c:	83 e0 10             	and    eax,0x10
c000933f:	84 c0                	test   al,al
c0009341:	74 07                	je     c000934a <VAS::VAS(bool)+0x1a6>
c0009343:	b8 00 01 00 00       	mov    eax,0x100
c0009348:	eb 05                	jmp    c000934f <VAS::VAS(bool)+0x1ab>
c000934a:	b8 00 00 00 00       	mov    eax,0x0
c000934f:	09 c2                	or     edx,eax
c0009351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009355:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009358:	05 fc 0f 00 00       	add    eax,0xffc
c000935d:	83 ca 03             	or     edx,0x3
c0009360:	89 10                	mov    DWORD PTR [eax],edx
c0009362:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0009367:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000936d:	83 ec 0c             	sub    esp,0xc
c0009370:	50                   	push   eax
c0009371:	e8 82 1c 00 00       	call   c000aff8 <Device::getName()>
c0009376:	83 c4 10             	add    esp,0x10
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	68 af d0 01 c0       	push   0xc001d0af
c0009381:	50                   	push   eax
c0009382:	e8 79 73 ff ff       	call   c0000700 <strcmp>
c0009387:	83 c4 10             	add    esp,0x10
c000938a:	85 c0                	test   eax,eax
c000938c:	0f 94 c0             	sete   al
c000938f:	84 c0                	test   al,al
c0009391:	0f 84 87 00 00 00    	je     c000941e <VAS::VAS(bool)+0x27a>
c0009397:	fa                   	cli    
c0009398:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000939d:	40                   	inc    eax
c000939e:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00093a3:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00093a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093ae:	05 7c 09 00 00       	add    eax,0x97c
c00093b3:	83 ec 0c             	sub    esp,0xc
c00093b6:	50                   	push   eax
c00093b7:	e8 a2 d2 ff ff       	call   c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00093c4:	89 c3                	mov    ebx,eax
c00093c6:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00093cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00093d1:	05 7c 09 00 00       	add    eax,0x97c
c00093d6:	83 ec 0c             	sub    esp,0xc
c00093d9:	50                   	push   eax
c00093da:	e8 7f d2 ff ff       	call   c000665e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00093df:	83 c4 10             	add    esp,0x10
c00093e2:	83 ec 08             	sub    esp,0x8
c00093e5:	50                   	push   eax
c00093e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00093ea:	e8 83 f5 ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00093f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00093f9:	6a 11                	push   0x11
c00093fb:	53                   	push   ebx
c00093fc:	50                   	push   eax
c00093fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009401:	e8 f0 f8 ff ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009406:	83 c4 10             	add    esp,0x10
c0009409:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000940e:	48                   	dec    eax
c000940f:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0009414:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0009419:	85 c0                	test   eax,eax
c000941b:	75 01                	jne    c000941e <VAS::VAS(bool)+0x27a>
c000941d:	fb                   	sti    
c000941e:	90                   	nop
c000941f:	83 c4 28             	add    esp,0x28
c0009422:	5b                   	pop    ebx
c0009423:	c3                   	ret    

c0009424 <VAS::VAS()>:
c0009424:	53                   	push   ebx
c0009425:	83 ec 18             	sub    esp,0x18
c0009428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000942c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009437:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000943e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009442:	a3 14 f5 01 c0       	mov    ds:0xc001f514,eax
c0009447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000944b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000944f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009453:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000945a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009461:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c0009469:	83 ec 0c             	sub    esp,0xc
c000946c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009470:	e8 ec d6 ff ff       	call   c0006b61 <malloc>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	89 c3                	mov    ebx,eax
c000947a:	83 ec 08             	sub    esp,0x8
c000947d:	6a 01                	push   0x1
c000947f:	53                   	push   ebx
c0009480:	e8 1f fd ff ff       	call   c00091a4 <VAS::VAS(bool)>
c0009485:	83 c4 10             	add    esp,0x10
c0009488:	89 1d 0c f5 01 c0    	mov    DWORD PTR ds:0xc001f50c,ebx
c000948e:	90                   	nop
c000948f:	83 c4 18             	add    esp,0x18
c0009492:	5b                   	pop    ebx
c0009493:	c3                   	ret    

c0009494 <VAS::evict(unsigned long)>:
c0009494:	55                   	push   ebp
c0009495:	57                   	push   edi
c0009496:	56                   	push   esi
c0009497:	53                   	push   ebx
c0009498:	83 ec 1c             	sub    esp,0x1c
c000949b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000949f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00094a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00094a7:	e8 32 f3 ff ff       	call   c00087de <Virt::allocateSwapfilePage()>
c00094ac:	8b 0d cc ed 01 c0    	mov    ecx,DWORD PTR ds:0xc001edcc
c00094b2:	89 c7                	mov    edi,eax
c00094b4:	85 c9                	test   ecx,ecx
c00094b6:	7e 3e                	jle    c00094f6 <VAS::evict(unsigned long)+0x62>
c00094b8:	89 ee                	mov    esi,ebp
c00094ba:	31 db                	xor    ebx,ebx
c00094bc:	83 ec 0c             	sub    esp,0xc
c00094bf:	57                   	push   edi
c00094c0:	e8 07 f3 ff ff       	call   c00087cc <Virt::swapIDToSector(unsigned long)>
c00094c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00094c8:	01 d8                	add    eax,ebx
c00094ca:	6a 01                	push   0x1
c00094cc:	31 d2                	xor    edx,edx
c00094ce:	43                   	inc    ebx
c00094cf:	52                   	push   edx
c00094d0:	81 c6 00 02 00 00    	add    esi,0x200
c00094d6:	50                   	push   eax
c00094d7:	0f be 05 d8 ed 01 c0 	movsx  eax,BYTE PTR ds:0xc001edd8
c00094de:	8b 14 85 9c 18 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde764]
c00094e5:	52                   	push   edx
c00094e6:	e8 8d 2b 00 00       	call   c000c078 <LogicalDisk::write(unsigned long long, int, void*)>
c00094eb:	83 c4 20             	add    esp,0x20
c00094ee:	39 1d cc ed 01 c0    	cmp    DWORD PTR ds:0xc001edcc,ebx
c00094f4:	7f c6                	jg     c00094bc <VAS::evict(unsigned long)+0x28>
c00094f6:	83 ec 08             	sub    esp,0x8
c00094f9:	c1 e7 0b             	shl    edi,0xb
c00094fc:	55                   	push   ebp
c00094fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009501:	50                   	push   eax
c0009502:	e8 6b f4 ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c0009507:	8b 10                	mov    edx,DWORD PTR [eax]
c0009509:	89 d1                	mov    ecx,edx
c000950b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009511:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0009517:	09 cf                	or     edi,ecx
c0009519:	89 38                	mov    DWORD PTR [eax],edi
c000951b:	89 14 24             	mov    DWORD PTR [esp],edx
c000951e:	ff 05 08 f5 01 c0    	inc    DWORD PTR ds:0xc001f508
c0009524:	e8 a3 d9 ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c0009529:	0f 20 d8             	mov    eax,cr3
c000952c:	0f 22 d8             	mov    cr3,eax
c000952f:	a1 04 f5 01 c0       	mov    eax,ds:0xc001f504
c0009534:	c7 44 24 40 bd d0 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d0bd
c000953c:	8d 50 01             	lea    edx,[eax+0x1]
c000953f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009543:	89 15 04 f5 01 c0    	mov    DWORD PTR ds:0xc001f504,edx
c0009549:	83 c4 2c             	add    esp,0x2c
c000954c:	5b                   	pop    ebx
c000954d:	5e                   	pop    esi
c000954e:	5f                   	pop    edi
c000954f:	5d                   	pop    ebp
c0009550:	e9 cf 03 00 00       	jmp    c0009924 <Dbg::kprintf(char const*, ...)>
c0009555:	90                   	nop

c0009556 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0009556:	55                   	push   ebp
c0009557:	57                   	push   edi
c0009558:	56                   	push   esi
c0009559:	53                   	push   ebx
c000955a:	83 ec 14             	sub    esp,0x14
c000955d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009561:	53                   	push   ebx
c0009562:	68 ce d0 01 c0       	push   0xc001d0ce
c0009567:	e8 b8 03 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000956c:	83 c4 10             	add    esp,0x10
c000956f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009575:	74 21                	je     c0009598 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0009577:	83 ec 08             	sub    esp,0x8
c000957a:	53                   	push   ebx
c000957b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000957f:	57                   	push   edi
c0009580:	e8 ed f3 ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	89 c6                	mov    esi,eax
c000958a:	85 c0                	test   eax,eax
c000958c:	74 0a                	je     c0009598 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000958e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0009590:	f7 c5 01 00 00 00    	test   ebp,0x1
c0009596:	74 0a                	je     c00095a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c0009598:	31 c0                	xor    eax,eax
c000959a:	83 c4 0c             	add    esp,0xc
c000959d:	5b                   	pop    ebx
c000959e:	5e                   	pop    esi
c000959f:	5f                   	pop    edi
c00095a0:	5d                   	pop    ebp
c00095a1:	c3                   	ret    
c00095a2:	e8 87 d9 ff ff       	call   c0006f2e <Phys::allocatePage()>
c00095a7:	c1 ed 0b             	shr    ebp,0xb
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00095b2:	09 c2                	or     edx,eax
c00095b4:	81 ca 01 08 00 00    	or     edx,0x801
c00095ba:	89 16                	mov    DWORD PTR [esi],edx
c00095bc:	8b 35 cc ed 01 c0    	mov    esi,DWORD PTR ds:0xc001edcc
c00095c2:	85 f6                	test   esi,esi
c00095c4:	7e 3e                	jle    c0009604 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c00095c6:	89 df                	mov    edi,ebx
c00095c8:	31 f6                	xor    esi,esi
c00095ca:	83 ec 0c             	sub    esp,0xc
c00095cd:	55                   	push   ebp
c00095ce:	e8 f9 f1 ff ff       	call   c00087cc <Virt::swapIDToSector(unsigned long)>
c00095d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00095d6:	01 f0                	add    eax,esi
c00095d8:	6a 01                	push   0x1
c00095da:	31 d2                	xor    edx,edx
c00095dc:	46                   	inc    esi
c00095dd:	52                   	push   edx
c00095de:	81 c7 00 02 00 00    	add    edi,0x200
c00095e4:	50                   	push   eax
c00095e5:	0f be 05 d8 ed 01 c0 	movsx  eax,BYTE PTR ds:0xc001edd8
c00095ec:	8b 0c 85 9c 18 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde764]
c00095f3:	51                   	push   ecx
c00095f4:	e8 13 2a 00 00       	call   c000c00c <LogicalDisk::read(unsigned long long, int, void*)>
c00095f9:	83 c4 20             	add    esp,0x20
c00095fc:	39 35 cc ed 01 c0    	cmp    DWORD PTR ds:0xc001edcc,esi
c0009602:	7f c6                	jg     c00095ca <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c0009604:	a1 08 f5 01 c0       	mov    eax,ds:0xc001f508
c0009609:	48                   	dec    eax
c000960a:	52                   	push   edx
c000960b:	a3 08 f5 01 c0       	mov    ds:0xc001f508,eax
c0009610:	50                   	push   eax
c0009611:	53                   	push   ebx
c0009612:	68 e1 d0 01 c0       	push   0xc001d0e1
c0009617:	e8 08 03 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000961c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961f:	e8 8a f1 ff ff       	call   c00087ae <Virt::freeSwapfilePage(unsigned long)>
c0009624:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	48                   	dec    eax
c000962d:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0009632:	85 c0                	test   eax,eax
c0009634:	75 01                	jne    c0009637 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c0009636:	fb                   	sti    
c0009637:	0f 20 d8             	mov    eax,cr3
c000963a:	0f 22 d8             	mov    cr3,eax
c000963d:	b0 01                	mov    al,0x1
c000963f:	e9 56 ff ff ff       	jmp    c000959a <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0009644 <VAS::scanForEviction()>:
c0009644:	57                   	push   edi
c0009645:	31 ff                	xor    edi,edi
c0009647:	56                   	push   esi
c0009648:	53                   	push   ebx
c0009649:	83 ec 10             	sub    esp,0x10
c000964c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009650:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0009653:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0009659:	75 0e                	jne    c0009669 <VAS::scanForEviction()+0x25>
c000965b:	89 da                	mov    edx,ebx
c000965d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009660:	c1 ea 16             	shr    edx,0x16
c0009663:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009667:	74 4e                	je     c00096b7 <VAS::scanForEviction()+0x73>
c0009669:	53                   	push   ebx
c000966a:	56                   	push   esi
c000966b:	e8 02 f3 ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c0009670:	5a                   	pop    edx
c0009671:	8b 10                	mov    edx,DWORD PTR [eax]
c0009673:	59                   	pop    ecx
c0009674:	89 d1                	mov    ecx,edx
c0009676:	81 e1 01 08 00 00    	and    ecx,0x801
c000967c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0009682:	74 3e                	je     c00096c2 <VAS::scanForEviction()+0x7e>
c0009684:	81 c3 00 10 00 00    	add    ebx,0x1000
c000968a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0009690:	76 2b                	jbe    c00096bd <VAS::scanForEviction()+0x79>
c0009692:	47                   	inc    edi
c0009693:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000969a:	83 ff 03             	cmp    edi,0x3
c000969d:	74 32                	je     c00096d1 <VAS::scanForEviction()+0x8d>
c000969f:	31 db                	xor    ebx,ebx
c00096a1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00096a7:	75 c0                	jne    c0009669 <VAS::scanForEviction()+0x25>
c00096a9:	89 da                	mov    edx,ebx
c00096ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00096ae:	c1 ea 16             	shr    edx,0x16
c00096b1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00096b5:	75 b2                	jne    c0009669 <VAS::scanForEviction()+0x25>
c00096b7:	81 c3 00 00 40 00    	add    ebx,0x400000
c00096bd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00096c0:	eb 91                	jmp    c0009653 <VAS::scanForEviction()+0xf>
c00096c2:	f6 c2 20             	test   dl,0x20
c00096c5:	74 13                	je     c00096da <VAS::scanForEviction()+0x96>
c00096c7:	83 e2 df             	and    edx,0xffffffdf
c00096ca:	89 10                	mov    DWORD PTR [eax],edx
c00096cc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00096cf:	eb b3                	jmp    c0009684 <VAS::scanForEviction()+0x40>
c00096d1:	83 c4 10             	add    esp,0x10
c00096d4:	31 c0                	xor    eax,eax
c00096d6:	5b                   	pop    ebx
c00096d7:	5e                   	pop    esi
c00096d8:	5f                   	pop    edi
c00096d9:	c3                   	ret    
c00096da:	83 ec 08             	sub    esp,0x8
c00096dd:	89 d0                	mov    eax,edx
c00096df:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00096e8:	53                   	push   ebx
c00096e9:	68 f6 d0 01 c0       	push   0xc001d0f6
c00096ee:	e8 31 02 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00096f3:	58                   	pop    eax
c00096f4:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c00096f7:	5a                   	pop    edx
c00096f8:	51                   	push   ecx
c00096f9:	56                   	push   esi
c00096fa:	e8 95 fd ff ff       	call   c0009494 <VAS::evict(unsigned long)>
c00096ff:	5b                   	pop    ebx
c0009700:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0009703:	5f                   	pop    edi
c0009704:	50                   	push   eax
c0009705:	68 0a d1 01 c0       	push   0xc001d10a
c000970a:	e8 15 02 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000970f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0009716:	83 c4 10             	add    esp,0x10
c0009719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000971d:	83 c4 10             	add    esp,0x10
c0009720:	5b                   	pop    ebx
c0009721:	5e                   	pop    esi
c0009722:	5f                   	pop    edi
c0009723:	c3                   	ret    

c0009724 <mapVASFirstTime>:
c0009724:	55                   	push   ebp
c0009725:	57                   	push   edi
c0009726:	56                   	push   esi
c0009727:	53                   	push   ebx
c0009728:	83 ec 0c             	sub    esp,0xc
c000972b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009730:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009733:	4a                   	dec    edx
c0009734:	0f 84 8c 00 00 00    	je     c00097c6 <mapVASFirstTime+0xa2>
c000973a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000973d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0009740:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0009745:	c1 e5 15             	shl    ebp,0x15
c0009748:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000974d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0009753:	29 eb                	sub    ebx,ebp
c0009755:	29 ef                	sub    edi,ebp
c0009757:	e8 d2 d7 ff ff       	call   c0006f2e <Phys::allocatePage()>
c000975c:	83 ec 0c             	sub    esp,0xc
c000975f:	68 03 04 00 00       	push   0x403
c0009764:	6a 01                	push   0x1
c0009766:	53                   	push   ebx
c0009767:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000976d:	50                   	push   eax
c000976e:	56                   	push   esi
c000976f:	e8 7c f8 ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009774:	83 c4 20             	add    esp,0x20
c0009777:	39 fb                	cmp    ebx,edi
c0009779:	75 dc                	jne    c0009757 <mapVASFirstTime+0x33>
c000977b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0009780:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0009785:	29 eb                	sub    ebx,ebp
c0009787:	29 ef                	sub    edi,ebp
c0009789:	e8 a0 d7 ff ff       	call   c0006f2e <Phys::allocatePage()>
c000978e:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0009792:	19 d2                	sbb    edx,edx
c0009794:	83 ec 0c             	sub    esp,0xc
c0009797:	83 e2 04             	and    edx,0x4
c000979a:	81 c2 03 04 00 00    	add    edx,0x403
c00097a0:	52                   	push   edx
c00097a1:	6a 01                	push   0x1
c00097a3:	53                   	push   ebx
c00097a4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00097aa:	50                   	push   eax
c00097ab:	56                   	push   esi
c00097ac:	e8 3f f8 ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00097b1:	83 c4 20             	add    esp,0x20
c00097b4:	39 df                	cmp    edi,ebx
c00097b6:	75 d1                	jne    c0009789 <mapVASFirstTime+0x65>
c00097b8:	0f 20 d8             	mov    eax,cr3
c00097bb:	0f 22 d8             	mov    cr3,eax
c00097be:	83 c4 0c             	add    esp,0xc
c00097c1:	5b                   	pop    ebx
c00097c2:	5e                   	pop    esi
c00097c3:	5f                   	pop    edi
c00097c4:	5d                   	pop    ebp
c00097c5:	c3                   	ret    
c00097c6:	83 ec 0c             	sub    esp,0xc
c00097c9:	68 1d d1 01 c0       	push   0xc001d11d
c00097ce:	e8 51 01 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00097d3:	83 c4 10             	add    esp,0x10
c00097d6:	83 c4 0c             	add    esp,0xc
c00097d9:	5b                   	pop    ebx
c00097da:	5e                   	pop    esi
c00097db:	5f                   	pop    edi
c00097dc:	5d                   	pop    ebp
c00097dd:	c3                   	ret    

c00097de <__cxa_atexit>:
c00097de:	31 c0                	xor    eax,eax
c00097e0:	c3                   	ret    

c00097e1 <__cxa_finalize>:
c00097e1:	c3                   	ret    

c00097e2 <__stack_chk_fail>:
c00097e2:	55                   	push   ebp
c00097e3:	89 e5                	mov    ebp,esp
c00097e5:	83 ec 10             	sub    esp,0x10
c00097e8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00097eb:	68 36 d1 01 c0       	push   0xc001d136
c00097f0:	e8 2f 01 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00097f5:	58                   	pop    eax
c00097f6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00097f9:	5a                   	pop    edx
c00097fa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00097fd:	68 36 d1 01 c0       	push   0xc001d136
c0009802:	e8 1d 01 00 00       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0009807:	c7 04 24 3e d1 01 c0 	mov    DWORD PTR [esp],0xc001d13e
c000980e:	e8 60 5c 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0009813:	83 c4 10             	add    esp,0x10
c0009816:	c9                   	leave  
c0009817:	c3                   	ret    

c0009818 <__cxa_pure_virtual>:
c0009818:	83 ec 18             	sub    esp,0x18
c000981b:	68 56 d1 01 c0       	push   0xc001d156
c0009820:	e8 4e 5c 00 00       	call   c000f473 <Krnl::panic(char const*)>
c0009825:	83 c4 1c             	add    esp,0x1c
c0009828:	c3                   	ret    

c0009829 <operator new[](unsigned long)>:
c0009829:	e9 33 d3 ff ff       	jmp    c0006b61 <malloc>

c000982e <operator delete(void*, unsigned long)>:
c000982e:	e9 4e d3 ff ff       	jmp    c0006b81 <rfree>

c0009833 <operator delete[](void*)>:
c0009833:	e9 49 d3 ff ff       	jmp    c0006b81 <rfree>

c0009838 <operator delete[](void*, unsigned long)>:
c0009838:	e9 44 d3 ff ff       	jmp    c0006b81 <rfree>

c000983d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000983d:	55                   	push   ebp
c000983e:	b9 04 00 00 00       	mov    ecx,0x4
c0009843:	57                   	push   edi
c0009844:	56                   	push   esi
c0009845:	be 6b cd 01 c0       	mov    esi,0xc001cd6b
c000984a:	53                   	push   ebx
c000984b:	83 ec 20             	sub    esp,0x20
c000984e:	a1 6a cd 01 c0       	mov    eax,ds:0xc001cd6a
c0009853:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009857:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000985b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000985f:	a1 77 cd 01 c0       	mov    eax,ds:0xc001cd77
c0009864:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0009868:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000986c:	fc                   	cld    
c000986d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000986f:	89 ee                	mov    esi,ebp
c0009871:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009875:	eb 02                	jmp    c0009879 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0009877:	89 c6                	mov    esi,eax
c0009879:	31 d2                	xor    edx,edx
c000987b:	41                   	inc    ecx
c000987c:	89 f0                	mov    eax,esi
c000987e:	f7 f3                	div    ebx
c0009880:	39 de                	cmp    esi,ebx
c0009882:	73 f3                	jae    c0009877 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0009884:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009887:	eb 02                	jmp    c000988b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c0009889:	89 c5                	mov    ebp,eax
c000988b:	31 d2                	xor    edx,edx
c000988d:	49                   	dec    ecx
c000988e:	89 e8                	mov    eax,ebp
c0009890:	f7 f3                	div    ebx
c0009892:	39 dd                	cmp    ebp,ebx
c0009894:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0009898:	88 11                	mov    BYTE PTR [ecx],dl
c000989a:	73 ed                	jae    c0009889 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000989c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00098a0:	83 c4 20             	add    esp,0x20
c00098a3:	5b                   	pop    ebx
c00098a4:	5e                   	pop    esi
c00098a5:	5f                   	pop    edi
c00098a6:	5d                   	pop    ebp
c00098a7:	c3                   	ret    

c00098a8 <Dbg::logc(char)>:
c00098a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00098ac:	f6 05 40 f4 01 c0 10 	test   BYTE PTR ds:0xc001f440,0x10
c00098b3:	75 12                	jne    c00098c7 <Dbg::logc(char)+0x1f>
c00098b5:	ba fd 03 00 00       	mov    edx,0x3fd
c00098ba:	ec                   	in     al,dx
c00098bb:	a8 20                	test   al,0x20
c00098bd:	74 fb                	je     c00098ba <Dbg::logc(char)+0x12>
c00098bf:	ba f8 03 00 00       	mov    edx,0x3f8
c00098c4:	88 c8                	mov    al,cl
c00098c6:	ee                   	out    dx,al
c00098c7:	c3                   	ret    

c00098c8 <Dbg::logs(char*)>:
c00098c8:	53                   	push   ebx
c00098c9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00098cd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00098d0:	84 c0                	test   al,al
c00098d2:	74 0f                	je     c00098e3 <Dbg::logs(char*)+0x1b>
c00098d4:	50                   	push   eax
c00098d5:	43                   	inc    ebx
c00098d6:	e8 cd ff ff ff       	call   c00098a8 <Dbg::logc(char)>
c00098db:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00098de:	5a                   	pop    edx
c00098df:	84 c0                	test   al,al
c00098e1:	75 f1                	jne    c00098d4 <Dbg::logs(char*)+0xc>
c00098e3:	5b                   	pop    ebx
c00098e4:	c3                   	ret    

c00098e5 <Dbg::logWriteInt(unsigned int)>:
c00098e5:	83 ec 10             	sub    esp,0x10
c00098e8:	6a 0a                	push   0xa
c00098ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00098ee:	50                   	push   eax
c00098ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098f3:	50                   	push   eax
c00098f4:	e8 44 ff ff ff       	call   c000983d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00098f9:	50                   	push   eax
c00098fa:	e8 c9 ff ff ff       	call   c00098c8 <Dbg::logs(char*)>
c00098ff:	83 c4 20             	add    esp,0x20
c0009902:	c3                   	ret    

c0009903 <Dbg::logWriteIntBase(unsigned int, int)>:
c0009903:	83 ec 10             	sub    esp,0x10
c0009906:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000990a:	50                   	push   eax
c000990b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000990f:	50                   	push   eax
c0009910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009914:	52                   	push   edx
c0009915:	e8 23 ff ff ff       	call   c000983d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000991a:	50                   	push   eax
c000991b:	e8 a8 ff ff ff       	call   c00098c8 <Dbg::logs(char*)>
c0009920:	83 c4 20             	add    esp,0x20
c0009923:	c3                   	ret    

c0009924 <Dbg::kprintf(char const*, ...)>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	53                   	push   ebx
c0009928:	83 ec 0c             	sub    esp,0xc
c000992b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000992f:	f6 05 40 f4 01 c0 10 	test   BYTE PTR ds:0xc001f440,0x10
c0009936:	74 08                	je     c0009940 <Dbg::kprintf(char const*, ...)+0x1c>
c0009938:	83 c4 0c             	add    esp,0xc
c000993b:	5b                   	pop    ebx
c000993c:	5e                   	pop    esi
c000993d:	5f                   	pop    edi
c000993e:	5d                   	pop    ebp
c000993f:	c3                   	ret    
c0009940:	8d 44 24 24          	lea    eax,[esp+0x24]
c0009944:	31 ff                	xor    edi,edi
c0009946:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000994a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000994d:	84 c0                	test   al,al
c000994f:	74 e7                	je     c0009938 <Dbg::kprintf(char const*, ...)+0x14>
c0009951:	8d 77 01             	lea    esi,[edi+0x1]
c0009954:	3c 25                	cmp    al,0x25
c0009956:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0009959:	75 47                	jne    c00099a2 <Dbg::kprintf(char const*, ...)+0x7e>
c000995b:	83 c7 02             	add    edi,0x2
c000995e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009961:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0009964:	83 e8 25             	sub    eax,0x25
c0009967:	3c 53                	cmp    al,0x53
c0009969:	0f 87 d2 00 00 00    	ja     c0009a41 <Dbg::kprintf(char const*, ...)+0x11d>
c000996f:	25 ff 00 00 00       	and    eax,0xff
c0009974:	ff 24 85 6c d1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2e94]
c000997b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000997f:	89 c8                	mov    eax,ecx
c0009981:	83 c1 04             	add    ecx,0x4
c0009984:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009988:	8b 28                	mov    ebp,DWORD PTR [eax]
c000998a:	55                   	push   ebp
c000998b:	e8 55 ff ff ff       	call   c00098e5 <Dbg::logWriteInt(unsigned int)>
c0009990:	58                   	pop    eax
c0009991:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0009994:	84 c0                	test   al,al
c0009996:	74 a0                	je     c0009938 <Dbg::kprintf(char const*, ...)+0x14>
c0009998:	8d 77 01             	lea    esi,[edi+0x1]
c000999b:	3c 25                	cmp    al,0x25
c000999d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00099a0:	74 b9                	je     c000995b <Dbg::kprintf(char const*, ...)+0x37>
c00099a2:	50                   	push   eax
c00099a3:	89 f7                	mov    edi,esi
c00099a5:	e8 fe fe ff ff       	call   c00098a8 <Dbg::logc(char)>
c00099aa:	89 ee                	mov    esi,ebp
c00099ac:	58                   	pop    eax
c00099ad:	eb e2                	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c00099af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00099b3:	89 c8                	mov    eax,ecx
c00099b5:	83 c1 04             	add    ecx,0x4
c00099b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00099ba:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00099be:	50                   	push   eax
c00099bf:	e8 04 ff ff ff       	call   c00098c8 <Dbg::logs(char*)>
c00099c4:	58                   	pop    eax
c00099c5:	eb ca                	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c00099c7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099cb:	89 d0                	mov    eax,edx
c00099cd:	83 c2 04             	add    edx,0x4
c00099d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00099d6:	50                   	push   eax
c00099d7:	e8 09 ff ff ff       	call   c00098e5 <Dbg::logWriteInt(unsigned int)>
c00099dc:	58                   	pop    eax
c00099dd:	eb b2                	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c00099df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099e3:	89 d0                	mov    eax,edx
c00099e5:	83 c2 04             	add    edx,0x4
c00099e8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00099eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099ef:	50                   	push   eax
c00099f0:	e8 b3 fe ff ff       	call   c00098a8 <Dbg::logc(char)>
c00099f5:	58                   	pop    eax
c00099f6:	eb 99                	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c00099f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00099fc:	89 c8                	mov    eax,ecx
c00099fe:	83 c1 04             	add    ecx,0x4
c0009a01:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009a05:	6a 10                	push   0x10
c0009a07:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a09:	51                   	push   ecx
c0009a0a:	e8 f4 fe ff ff       	call   c0009903 <Dbg::logWriteIntBase(unsigned int, int)>
c0009a0f:	5d                   	pop    ebp
c0009a10:	58                   	pop    eax
c0009a11:	e9 7b ff ff ff       	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009a1a:	89 d0                	mov    eax,edx
c0009a1c:	83 c2 08             	add    edx,0x8
c0009a1f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a23:	6a 10                	push   0x10
c0009a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a27:	50                   	push   eax
c0009a28:	e8 d6 fe ff ff       	call   c0009903 <Dbg::logWriteIntBase(unsigned int, int)>
c0009a2d:	58                   	pop    eax
c0009a2e:	5a                   	pop    edx
c0009a2f:	e9 5d ff ff ff       	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a34:	6a 25                	push   0x25
c0009a36:	e8 6d fe ff ff       	call   c00098a8 <Dbg::logc(char)>
c0009a3b:	5a                   	pop    edx
c0009a3c:	e9 50 ff ff ff       	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a41:	6a 25                	push   0x25
c0009a43:	e8 60 fe ff ff       	call   c00098a8 <Dbg::logc(char)>
c0009a48:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0009a4c:	50                   	push   eax
c0009a4d:	e8 56 fe ff ff       	call   c00098a8 <Dbg::logc(char)>
c0009a52:	5a                   	pop    edx
c0009a53:	59                   	pop    ecx
c0009a54:	e9 38 ff ff ff       	jmp    c0009991 <Dbg::kprintf(char const*, ...)+0x6d>
c0009a59:	90                   	nop

c0009a5a <File::read(unsigned long long, void*, int*)>:
c0009a5a:	53                   	push   ebx
c0009a5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a5f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a63:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009a6a:	3c 19                	cmp    al,0x19
c0009a6c:	77 35                	ja     c0009aa3 <File::read(unsigned long long, void*, int*)+0x49>
c0009a6e:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0009a75:	85 c0                	test   eax,eax
c0009a77:	74 2a                	je     c0009aa3 <File::read(unsigned long long, void*, int*)+0x49>
c0009a79:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009a7f:	85 c0                	test   eax,eax
c0009a81:	74 20                	je     c0009aa3 <File::read(unsigned long long, void*, int*)+0x49>
c0009a83:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009a87:	74 21                	je     c0009aaa <File::read(unsigned long long, void*, int*)+0x50>
c0009a89:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009a8f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009a95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a9d:	5b                   	pop    ebx
c0009a9e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0009aa1:	ff e0                	jmp    eax
c0009aa3:	b8 0b 00 00 00       	mov    eax,0xb
c0009aa8:	eb 05                	jmp    c0009aaf <File::read(unsigned long long, void*, int*)+0x55>
c0009aaa:	b8 05 00 00 00       	mov    eax,0x5
c0009aaf:	5b                   	pop    ebx
c0009ab0:	c3                   	ret    
c0009ab1:	90                   	nop

c0009ab2 <File::write(unsigned long long, void*, int*)>:
c0009ab2:	53                   	push   ebx
c0009ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ab7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009abb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009ac2:	3c 19                	cmp    al,0x19
c0009ac4:	77 35                	ja     c0009afb <File::write(unsigned long long, void*, int*)+0x49>
c0009ac6:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0009acd:	85 c0                	test   eax,eax
c0009acf:	74 2a                	je     c0009afb <File::write(unsigned long long, void*, int*)+0x49>
c0009ad1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009ad7:	85 c0                	test   eax,eax
c0009ad9:	74 20                	je     c0009afb <File::write(unsigned long long, void*, int*)+0x49>
c0009adb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009adf:	74 21                	je     c0009b02 <File::write(unsigned long long, void*, int*)+0x50>
c0009ae1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ae3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009ae7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009aed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009af1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009af5:	5b                   	pop    ebx
c0009af6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0009af9:	ff e0                	jmp    eax
c0009afb:	b8 0b 00 00 00       	mov    eax,0xb
c0009b00:	eb 05                	jmp    c0009b07 <File::write(unsigned long long, void*, int*)+0x55>
c0009b02:	b8 05 00 00 00       	mov    eax,0x5
c0009b07:	5b                   	pop    ebx
c0009b08:	c3                   	ret    
c0009b09:	90                   	nop

c0009b0a <Directory::read(unsigned long long, void*, int*)>:
c0009b0a:	53                   	push   ebx
c0009b0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b13:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0009b1a:	3c 19                	cmp    al,0x19
c0009b1c:	77 35                	ja     c0009b53 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009b1e:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0009b25:	85 c0                	test   eax,eax
c0009b27:	74 2a                	je     c0009b53 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009b29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009b2f:	85 c0                	test   eax,eax
c0009b31:	74 20                	je     c0009b53 <Directory::read(unsigned long long, void*, int*)+0x49>
c0009b33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009b37:	74 21                	je     c0009b5a <Directory::read(unsigned long long, void*, int*)+0x50>
c0009b39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0009b3f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0009b45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b4d:	5b                   	pop    ebx
c0009b4e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0009b51:	ff e0                	jmp    eax
c0009b53:	b8 0b 00 00 00       	mov    eax,0xb
c0009b58:	eb 05                	jmp    c0009b5f <Directory::read(unsigned long long, void*, int*)+0x55>
c0009b5a:	b8 05 00 00 00       	mov    eax,0x5
c0009b5f:	5b                   	pop    ebx
c0009b60:	c3                   	ret    
c0009b61:	90                   	nop

c0009b62 <Directory::write(unsigned long long, void*, int*)>:
c0009b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b66:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0009b6d:	b8 0b 00 00 00       	mov    eax,0xb
c0009b72:	80 fa 19             	cmp    dl,0x19
c0009b75:	77 18                	ja     c0009b8f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009b77:	8b 14 95 a0 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde660]
c0009b7e:	85 d2                	test   edx,edx
c0009b80:	74 0d                	je     c0009b8f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0009b82:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0009b89:	19 c0                	sbb    eax,eax
c0009b8b:	83 e0 0a             	and    eax,0xa
c0009b8e:	40                   	inc    eax
c0009b8f:	c3                   	ret    

c0009b90 <File::isAtty()>:
c0009b90:	31 c0                	xor    eax,eax
c0009b92:	c3                   	ret    
c0009b93:	90                   	nop

c0009b94 <Directory::isAtty()>:
c0009b94:	31 c0                	xor    eax,eax
c0009b96:	c3                   	ret    
c0009b97:	90                   	nop

c0009b98 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0009b98:	b8 0a 00 00 00       	mov    eax,0xa
c0009b9d:	c3                   	ret    

c0009b9e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0009b9e:	b8 0a 00 00 00       	mov    eax,0xa
c0009ba3:	c3                   	ret    

c0009ba4 <Filesystem::allocateSwapfile(char const*, int)>:
c0009ba4:	31 c0                	xor    eax,eax
c0009ba6:	31 d2                	xor    edx,edx
c0009ba8:	c3                   	ret    
c0009ba9:	90                   	nop

c0009baa <File::~File()>:
c0009baa:	83 ec 0c             	sub    esp,0xc
c0009bad:	ba 2c d3 01 c0       	mov    edx,0xc001d32c
c0009bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bb6:	89 10                	mov    DWORD PTR [eax],edx
c0009bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bbc:	83 ec 0c             	sub    esp,0xc
c0009bbf:	50                   	push   eax
c0009bc0:	e8 77 e8 ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0009bc5:	83 c4 10             	add    esp,0x10
c0009bc8:	90                   	nop
c0009bc9:	83 c4 0c             	add    esp,0xc
c0009bcc:	c3                   	ret    
c0009bcd:	90                   	nop

c0009bce <File::~File()>:
c0009bce:	83 ec 0c             	sub    esp,0xc
c0009bd1:	83 ec 0c             	sub    esp,0xc
c0009bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bd8:	e8 cd ff ff ff       	call   c0009baa <File::~File()>
c0009bdd:	83 c4 10             	add    esp,0x10
c0009be0:	83 ec 08             	sub    esp,0x8
c0009be3:	68 14 01 00 00       	push   0x114
c0009be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009bec:	e8 3d fc ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c0009bf1:	83 c4 10             	add    esp,0x10
c0009bf4:	83 c4 0c             	add    esp,0xc
c0009bf7:	c3                   	ret    

c0009bf8 <Directory::~Directory()>:
c0009bf8:	83 ec 0c             	sub    esp,0xc
c0009bfb:	ba 48 d3 01 c0       	mov    edx,0xc001d348
c0009c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c04:	89 10                	mov    DWORD PTR [eax],edx
c0009c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c0a:	83 ec 0c             	sub    esp,0xc
c0009c0d:	50                   	push   eax
c0009c0e:	e8 29 e8 ff ff       	call   c000843c <UnixFile::~UnixFile()>
c0009c13:	83 c4 10             	add    esp,0x10
c0009c16:	90                   	nop
c0009c17:	83 c4 0c             	add    esp,0xc
c0009c1a:	c3                   	ret    
c0009c1b:	90                   	nop

c0009c1c <Directory::~Directory()>:
c0009c1c:	83 ec 0c             	sub    esp,0xc
c0009c1f:	83 ec 0c             	sub    esp,0xc
c0009c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c26:	e8 cd ff ff ff       	call   c0009bf8 <Directory::~Directory()>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	83 ec 08             	sub    esp,0x8
c0009c31:	68 14 01 00 00       	push   0x114
c0009c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c3a:	e8 ef fb ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c0009c3f:	83 c4 10             	add    esp,0x10
c0009c42:	83 c4 0c             	add    esp,0xc
c0009c45:	c3                   	ret    

c0009c46 <Filesystem::Filesystem()>:
c0009c46:	ba c4 d2 01 c0       	mov    edx,0xc001d2c4
c0009c4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c4f:	89 10                	mov    DWORD PTR [eax],edx
c0009c51:	8b 15 18 f5 01 c0    	mov    edx,DWORD PTR ds:0xc001f518
c0009c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c62:	a3 18 f5 01 c0       	mov    ds:0xc001f518,eax
c0009c67:	90                   	nop
c0009c68:	c3                   	ret    
c0009c69:	90                   	nop

c0009c6a <Filesystem::~Filesystem()>:
c0009c6a:	ba c4 d2 01 c0       	mov    edx,0xc001d2c4
c0009c6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c73:	89 10                	mov    DWORD PTR [eax],edx
c0009c75:	90                   	nop
c0009c76:	c3                   	ret    
c0009c77:	90                   	nop

c0009c78 <Filesystem::~Filesystem()>:
c0009c78:	83 ec 0c             	sub    esp,0xc
c0009c7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009c7f:	e8 e6 ff ff ff       	call   c0009c6a <Filesystem::~Filesystem()>
c0009c84:	83 c4 04             	add    esp,0x4
c0009c87:	83 ec 08             	sub    esp,0x8
c0009c8a:	6a 08                	push   0x8
c0009c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c90:	e8 99 fb ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c0009c95:	83 c4 10             	add    esp,0x10
c0009c98:	83 c4 0c             	add    esp,0xc
c0009c9b:	c3                   	ret    

c0009c9c <Fs::getcwd(Process*, char*, int)>:
c0009c9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ca0:	31 c0                	xor    eax,eax
c0009ca2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0009ca5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0009ca9:	7d 15                	jge    c0009cc0 <Fs::getcwd(Process*, char*, int)+0x24>
c0009cab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009caf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0009cb6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0009cb9:	84 c9                	test   cl,cl
c0009cbb:	74 06                	je     c0009cc3 <Fs::getcwd(Process*, char*, int)+0x27>
c0009cbd:	40                   	inc    eax
c0009cbe:	eb e2                	jmp    c0009ca2 <Fs::getcwd(Process*, char*, int)+0x6>
c0009cc0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0009cc3:	31 c0                	xor    eax,eax
c0009cc5:	c3                   	ret    

c0009cc6 <Fs::initVFS()>:
c0009cc6:	83 ec 18             	sub    esp,0x18
c0009cc9:	6a 08                	push   0x8
c0009ccb:	e8 91 ce ff ff       	call   c0006b61 <malloc>
c0009cd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cd3:	e8 c4 c3 00 00       	call   c001609c <FAT::FAT()>
c0009cd8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009cdf:	e8 7d ce ff ff       	call   c0006b61 <malloc>
c0009ce4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ce7:	e8 6a d6 00 00       	call   c0017356 <ISO9660::ISO9660()>
c0009cec:	83 c4 1c             	add    esp,0x1c
c0009cef:	c3                   	ret    

c0009cf0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0009cf0:	55                   	push   ebp
c0009cf1:	57                   	push   edi
c0009cf2:	56                   	push   esi
c0009cf3:	53                   	push   ebx
c0009cf4:	81 ec 10 04 00 00    	sub    esp,0x410
c0009cfa:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0009d01:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0009d08:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0009d0f:	68 00 04 00 00       	push   0x400
c0009d14:	6a 00                	push   0x0
c0009d16:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0009d1a:	56                   	push   esi
c0009d1b:	e8 d0 67 ff ff       	call   c00004f0 <memset>
c0009d20:	83 c4 10             	add    esp,0x10
c0009d23:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0009d27:	75 0b                	jne    c0009d34 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0009d29:	50                   	push   eax
c0009d2a:	50                   	push   eax
c0009d2b:	57                   	push   edi
c0009d2c:	56                   	push   esi
c0009d2d:	e8 ee 68 ff ff       	call   c0000620 <strcpy>
c0009d32:	eb 41                	jmp    c0009d75 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0009d34:	8a 07                	mov    al,BYTE PTR [edi]
c0009d36:	3c 5c                	cmp    al,0x5c
c0009d38:	74 04                	je     c0009d3e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0009d3a:	3c 2f                	cmp    al,0x2f
c0009d3c:	75 18                	jne    c0009d56 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0009d3e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0009d41:	3c 60                	cmp    al,0x60
c0009d43:	7e 03                	jle    c0009d48 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0009d45:	83 e8 20             	sub    eax,0x20
c0009d48:	88 04 24             	mov    BYTE PTR [esp],al
c0009d4b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009d52:	50                   	push   eax
c0009d53:	50                   	push   eax
c0009d54:	eb 18                	jmp    c0009d6e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0009d56:	50                   	push   eax
c0009d57:	50                   	push   eax
c0009d58:	55                   	push   ebp
c0009d59:	56                   	push   esi
c0009d5a:	e8 c1 68 ff ff       	call   c0000620 <strcpy>
c0009d5f:	5a                   	pop    edx
c0009d60:	59                   	pop    ecx
c0009d61:	68 70 e0 01 c0       	push   0xc001e070
c0009d66:	56                   	push   esi
c0009d67:	e8 74 6a ff ff       	call   c00007e0 <strcat>
c0009d6c:	5d                   	pop    ebp
c0009d6d:	58                   	pop    eax
c0009d6e:	57                   	push   edi
c0009d6f:	56                   	push   esi
c0009d70:	e8 6b 6a ff ff       	call   c00007e0 <strcat>
c0009d75:	83 c4 10             	add    esp,0x10
c0009d78:	8a 04 24             	mov    al,BYTE PTR [esp]
c0009d7b:	3c 60                	cmp    al,0x60
c0009d7d:	7e 03                	jle    c0009d82 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0009d7f:	83 e8 20             	sub    eax,0x20
c0009d82:	88 04 24             	mov    BYTE PTR [esp],al
c0009d85:	88 03                	mov    BYTE PTR [ebx],al
c0009d87:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0009d8e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0009d94:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0009d98:	bf 03 00 00 00       	mov    edi,0x3
c0009d9d:	b8 03 00 00 00       	mov    eax,0x3
c0009da2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0009da5:	84 d2                	test   dl,dl
c0009da7:	0f 84 91 00 00 00    	je     c0009e3e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0009dad:	8d 4f 01             	lea    ecx,[edi+0x1]
c0009db0:	80 fa 5c             	cmp    dl,0x5c
c0009db3:	74 05                	je     c0009dba <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0009db5:	80 fa 2f             	cmp    dl,0x2f
c0009db8:	75 12                	jne    c0009dcc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009dba:	89 c5                	mov    ebp,eax
c0009dbc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009dc1:	74 09                	je     c0009dcc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0009dc3:	40                   	inc    eax
c0009dc4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0009dc8:	89 cf                	mov    edi,ecx
c0009dca:	eb d6                	jmp    c0009da2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0009dcc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0009dd1:	75 5b                	jne    c0009e2e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009dd3:	80 fa 2e             	cmp    dl,0x2e
c0009dd6:	75 56                	jne    c0009e2e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0009dd8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0009ddc:	74 19                	je     c0009df7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0009dde:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009de3:	74 53                	je     c0009e38 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009de5:	89 f9                	mov    ecx,edi
c0009de7:	41                   	inc    ecx
c0009de8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009deb:	80 fa 2f             	cmp    dl,0x2f
c0009dee:	74 f7                	je     c0009de7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009df0:	80 fa 5c             	cmp    dl,0x5c
c0009df3:	74 f2                	je     c0009de7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0009df5:	eb d1                	jmp    c0009dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009df7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0009dfc:	74 3a                	je     c0009e38 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0009dfe:	83 f8 03             	cmp    eax,0x3
c0009e01:	74 c5                	je     c0009dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e03:	41                   	inc    ecx
c0009e04:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0009e07:	80 fa 2f             	cmp    dl,0x2f
c0009e0a:	74 f7                	je     c0009e03 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009e0c:	80 fa 5c             	cmp    dl,0x5c
c0009e0f:	74 f2                	je     c0009e03 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0009e11:	48                   	dec    eax
c0009e12:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009e16:	75 06                	jne    c0009e1e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009e18:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009e1c:	eb f3                	jmp    c0009e11 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0009e1e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0009e22:	74 07                	je     c0009e2b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0009e24:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009e28:	48                   	dec    eax
c0009e29:	eb f3                	jmp    c0009e1e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0009e2b:	40                   	inc    eax
c0009e2c:	eb 9a                	jmp    c0009dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e2e:	80 fa 2f             	cmp    dl,0x2f
c0009e31:	74 95                	je     c0009dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e33:	80 fa 5c             	cmp    dl,0x5c
c0009e36:	74 90                	je     c0009dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e38:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0009e3b:	40                   	inc    eax
c0009e3c:	eb 8a                	jmp    c0009dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0009e3e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0009e42:	83 ec 0c             	sub    esp,0xc
c0009e45:	53                   	push   ebx
c0009e46:	e8 15 67 ff ff       	call   c0000560 <strlen>
c0009e4b:	83 c4 10             	add    esp,0x10
c0009e4e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0009e53:	75 26                	jne    c0009e7b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0009e55:	83 ec 0c             	sub    esp,0xc
c0009e58:	53                   	push   ebx
c0009e59:	e8 02 67 ff ff       	call   c0000560 <strlen>
c0009e5e:	83 c4 10             	add    esp,0x10
c0009e61:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0009e66:	74 26                	je     c0009e8e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	53                   	push   ebx
c0009e6c:	e8 ef 66 ff ff       	call   c0000560 <strlen>
c0009e71:	83 c4 10             	add    esp,0x10
c0009e74:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0009e79:	eb c7                	jmp    c0009e42 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0009e7b:	83 ec 0c             	sub    esp,0xc
c0009e7e:	53                   	push   ebx
c0009e7f:	e8 dc 66 ff ff       	call   c0000560 <strlen>
c0009e84:	83 c4 10             	add    esp,0x10
c0009e87:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0009e8c:	74 c7                	je     c0009e55 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0009e8e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0009e94:	5b                   	pop    ebx
c0009e95:	5e                   	pop    esi
c0009e96:	5f                   	pop    edi
c0009e97:	5d                   	pop    ebp
c0009e98:	c3                   	ret    
c0009e99:	90                   	nop

c0009e9a <File::File(char const*, Process*)>:
c0009e9a:	83 ec 0c             	sub    esp,0xc
c0009e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ea1:	83 ec 08             	sub    esp,0x8
c0009ea4:	6a 00                	push   0x0
c0009ea6:	50                   	push   eax
c0009ea7:	e8 ae e3 ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c0009eac:	83 c4 10             	add    esp,0x10
c0009eaf:	ba 2c d3 01 c0       	mov    edx,0xc001d32c
c0009eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eb8:	89 10                	mov    DWORD PTR [eax],edx
c0009eba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ebe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0009ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ec8:	83 c0 0d             	add    eax,0xd
c0009ecb:	83 ec 04             	sub    esp,0x4
c0009ece:	52                   	push   edx
c0009ecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed3:	50                   	push   eax
c0009ed4:	e8 17 fe ff ff       	call   c0009cf0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0009ed9:	83 c4 10             	add    esp,0x10
c0009edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ee0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0009ee3:	8d 50 bf             	lea    edx,[eax-0x41]
c0009ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eea:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0009ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ef4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009efc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009f02:	25 ff 00 00 00       	and    eax,0xff
c0009f07:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0009f0e:	85 c0                	test   eax,eax
c0009f10:	74 42                	je     c0009f54 <File::File(char const*, Process*)+0xba>
c0009f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f16:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009f1c:	25 ff 00 00 00       	and    eax,0xff
c0009f21:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0009f28:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009f2e:	85 c0                	test   eax,eax
c0009f30:	75 22                	jne    c0009f54 <File::File(char const*, Process*)+0xba>
c0009f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f36:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009f3c:	25 ff 00 00 00       	and    eax,0xff
c0009f41:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0009f48:	83 ec 0c             	sub    esp,0xc
c0009f4b:	50                   	push   eax
c0009f4c:	e8 f9 1f 00 00       	call   c000bf4a <LogicalDisk::mount()>
c0009f51:	83 c4 10             	add    esp,0x10
c0009f54:	90                   	nop
c0009f55:	83 c4 0c             	add    esp,0xc
c0009f58:	c3                   	ret    
c0009f59:	90                   	nop

c0009f5a <File::open(FileOpenMode)>:
c0009f5a:	53                   	push   ebx
c0009f5b:	b8 0b 00 00 00       	mov    eax,0xb
c0009f60:	83 ec 08             	sub    esp,0x8
c0009f63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f67:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009f6e:	80 fa 19             	cmp    dl,0x19
c0009f71:	77 40                	ja     c0009fb3 <File::open(FileOpenMode)+0x59>
c0009f73:	8b 14 95 a0 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde660]
c0009f7a:	85 d2                	test   edx,edx
c0009f7c:	74 35                	je     c0009fb3 <File::open(FileOpenMode)+0x59>
c0009f7e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0009f84:	85 d2                	test   edx,edx
c0009f86:	74 2b                	je     c0009fb3 <File::open(FileOpenMode)+0x59>
c0009f88:	b8 06 00 00 00       	mov    eax,0x6
c0009f8d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0009f91:	75 20                	jne    c0009fb3 <File::open(FileOpenMode)+0x59>
c0009f93:	8b 02                	mov    eax,DWORD PTR [edx]
c0009f95:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0009f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f9f:	51                   	push   ecx
c0009fa0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0009fa3:	51                   	push   ecx
c0009fa4:	52                   	push   edx
c0009fa5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009fa8:	83 c4 10             	add    esp,0x10
c0009fab:	85 c0                	test   eax,eax
c0009fad:	75 04                	jne    c0009fb3 <File::open(FileOpenMode)+0x59>
c0009faf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0009fb3:	83 c4 08             	add    esp,0x8
c0009fb6:	5b                   	pop    ebx
c0009fb7:	c3                   	ret    

c0009fb8 <File::close()>:
c0009fb8:	53                   	push   ebx
c0009fb9:	b8 0b 00 00 00       	mov    eax,0xb
c0009fbe:	83 ec 08             	sub    esp,0x8
c0009fc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009fc5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0009fcc:	80 fa 19             	cmp    dl,0x19
c0009fcf:	77 41                	ja     c000a012 <File::close()+0x5a>
c0009fd1:	8b 1c 95 a0 19 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde660]
c0009fd8:	85 db                	test   ebx,ebx
c0009fda:	74 36                	je     c000a012 <File::close()+0x5a>
c0009fdc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0009fe3:	74 2d                	je     c000a012 <File::close()+0x5a>
c0009fe5:	b8 05 00 00 00       	mov    eax,0x5
c0009fea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0009fee:	74 22                	je     c000a012 <File::close()+0x5a>
c0009ff0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0009ff4:	8b 04 95 a0 19 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde660]
c0009ffb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a001:	53                   	push   ebx
c000a002:	53                   	push   ebx
c000a003:	8b 10                	mov    edx,DWORD PTR [eax]
c000a005:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a00b:	50                   	push   eax
c000a00c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000a00f:	83 c4 10             	add    esp,0x10
c000a012:	83 c4 08             	add    esp,0x8
c000a015:	5b                   	pop    ebx
c000a016:	c3                   	ret    
c000a017:	90                   	nop

c000a018 <File::seek(unsigned long long)>:
c000a018:	56                   	push   esi
c000a019:	53                   	push   ebx
c000a01a:	b8 0b 00 00 00       	mov    eax,0xb
c000a01f:	51                   	push   ecx
c000a020:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a024:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a028:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000a02f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a033:	80 fa 19             	cmp    dl,0x19
c000a036:	77 31                	ja     c000a069 <File::seek(unsigned long long)+0x51>
c000a038:	8b 14 95 a0 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde660]
c000a03f:	85 d2                	test   edx,edx
c000a041:	74 26                	je     c000a069 <File::seek(unsigned long long)+0x51>
c000a043:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a049:	85 d2                	test   edx,edx
c000a04b:	74 1c                	je     c000a069 <File::seek(unsigned long long)+0x51>
c000a04d:	b8 05 00 00 00       	mov    eax,0x5
c000a052:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000a056:	74 11                	je     c000a069 <File::seek(unsigned long long)+0x51>
c000a058:	8b 02                	mov    eax,DWORD PTR [edx]
c000a05a:	53                   	push   ebx
c000a05b:	51                   	push   ecx
c000a05c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000a062:	52                   	push   edx
c000a063:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	5a                   	pop    edx
c000a06a:	5b                   	pop    ebx
c000a06b:	5e                   	pop    esi
c000a06c:	c3                   	ret    
c000a06d:	90                   	nop

c000a06e <File::tell(unsigned long long*)>:
c000a06e:	83 ec 0c             	sub    esp,0xc
c000a071:	b8 0b 00 00 00       	mov    eax,0xb
c000a076:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a07a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a081:	80 fa 19             	cmp    dl,0x19
c000a084:	77 34                	ja     c000a0ba <File::tell(unsigned long long*)+0x4c>
c000a086:	8b 14 95 a0 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde660]
c000a08d:	85 d2                	test   edx,edx
c000a08f:	74 29                	je     c000a0ba <File::tell(unsigned long long*)+0x4c>
c000a091:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a097:	85 d2                	test   edx,edx
c000a099:	74 1f                	je     c000a0ba <File::tell(unsigned long long*)+0x4c>
c000a09b:	b8 05 00 00 00       	mov    eax,0x5
c000a0a0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a0a4:	74 14                	je     c000a0ba <File::tell(unsigned long long*)+0x4c>
c000a0a6:	50                   	push   eax
c000a0a7:	8b 02                	mov    eax,DWORD PTR [edx]
c000a0a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a0ad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a0b3:	52                   	push   edx
c000a0b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a0b7:	83 c4 10             	add    esp,0x10
c000a0ba:	83 c4 0c             	add    esp,0xc
c000a0bd:	c3                   	ret    

c000a0be <File::rewind()>:
c000a0be:	83 ec 10             	sub    esp,0x10
c000a0c1:	6a 00                	push   0x0
c000a0c3:	6a 00                	push   0x0
c000a0c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c9:	e8 4a ff ff ff       	call   c000a018 <File::seek(unsigned long long)>
c000a0ce:	83 c4 1c             	add    esp,0x1c
c000a0d1:	c3                   	ret    

c000a0d2 <File::unlink()>:
c000a0d2:	83 ec 0c             	sub    esp,0xc
c000a0d5:	b8 0b 00 00 00       	mov    eax,0xb
c000a0da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a0de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a0e5:	80 f9 19             	cmp    cl,0x19
c000a0e8:	77 2f                	ja     c000a119 <File::unlink()+0x47>
c000a0ea:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a0f1:	85 c9                	test   ecx,ecx
c000a0f3:	74 24                	je     c000a119 <File::unlink()+0x47>
c000a0f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a0fb:	85 c9                	test   ecx,ecx
c000a0fd:	74 1a                	je     c000a119 <File::unlink()+0x47>
c000a0ff:	b8 06 00 00 00       	mov    eax,0x6
c000a104:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a108:	75 0f                	jne    c000a119 <File::unlink()+0x47>
c000a10a:	83 c2 0d             	add    edx,0xd
c000a10d:	50                   	push   eax
c000a10e:	50                   	push   eax
c000a10f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a111:	52                   	push   edx
c000a112:	51                   	push   ecx
c000a113:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a116:	83 c4 10             	add    esp,0x10
c000a119:	83 c4 0c             	add    esp,0xc
c000a11c:	c3                   	ret    
c000a11d:	90                   	nop

c000a11e <File::rename(char const*)>:
c000a11e:	83 ec 0c             	sub    esp,0xc
c000a121:	b8 0b 00 00 00       	mov    eax,0xb
c000a126:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a12a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a131:	80 f9 19             	cmp    cl,0x19
c000a134:	77 32                	ja     c000a168 <File::rename(char const*)+0x4a>
c000a136:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a13d:	85 c9                	test   ecx,ecx
c000a13f:	74 27                	je     c000a168 <File::rename(char const*)+0x4a>
c000a141:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a147:	85 c9                	test   ecx,ecx
c000a149:	74 1d                	je     c000a168 <File::rename(char const*)+0x4a>
c000a14b:	b8 06 00 00 00       	mov    eax,0x6
c000a150:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a154:	75 12                	jne    c000a168 <File::rename(char const*)+0x4a>
c000a156:	83 c2 0d             	add    edx,0xd
c000a159:	50                   	push   eax
c000a15a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a15c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a160:	52                   	push   edx
c000a161:	51                   	push   ecx
c000a162:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a165:	83 c4 10             	add    esp,0x10
c000a168:	83 c4 0c             	add    esp,0xc
c000a16b:	c3                   	ret    

c000a16c <File::chfatattr(unsigned char, unsigned char)>:
c000a16c:	57                   	push   edi
c000a16d:	b8 0b 00 00 00       	mov    eax,0xb
c000a172:	56                   	push   esi
c000a173:	53                   	push   ebx
c000a174:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a178:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a17c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a183:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a187:	80 f9 19             	cmp    cl,0x19
c000a18a:	77 37                	ja     c000a1c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a18c:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a193:	85 c9                	test   ecx,ecx
c000a195:	74 2c                	je     c000a1c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a197:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a19d:	85 c9                	test   ecx,ecx
c000a19f:	74 22                	je     c000a1c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a1a1:	b8 06 00 00 00       	mov    eax,0x6
c000a1a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a1aa:	75 17                	jne    c000a1c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000a1ac:	8b 39                	mov    edi,DWORD PTR [ecx]
c000a1ae:	89 f0                	mov    eax,esi
c000a1b0:	83 c2 0d             	add    edx,0xd
c000a1b3:	0f b6 f0             	movzx  esi,al
c000a1b6:	0f b6 db             	movzx  ebx,bl
c000a1b9:	56                   	push   esi
c000a1ba:	53                   	push   ebx
c000a1bb:	52                   	push   edx
c000a1bc:	51                   	push   ecx
c000a1bd:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000a1c0:	83 c4 10             	add    esp,0x10
c000a1c3:	5b                   	pop    ebx
c000a1c4:	5e                   	pop    esi
c000a1c5:	5f                   	pop    edi
c000a1c6:	c3                   	ret    
c000a1c7:	90                   	nop

c000a1c8 <File::exists()>:
c000a1c8:	83 ec 0c             	sub    esp,0xc
c000a1cb:	31 c0                	xor    eax,eax
c000a1cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a1d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a1d8:	80 f9 19             	cmp    cl,0x19
c000a1db:	77 24                	ja     c000a201 <File::exists()+0x39>
c000a1dd:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a1e4:	85 c9                	test   ecx,ecx
c000a1e6:	74 19                	je     c000a201 <File::exists()+0x39>
c000a1e8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a1ee:	85 c9                	test   ecx,ecx
c000a1f0:	74 0f                	je     c000a201 <File::exists()+0x39>
c000a1f2:	83 c2 0d             	add    edx,0xd
c000a1f5:	50                   	push   eax
c000a1f6:	50                   	push   eax
c000a1f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a1f9:	52                   	push   edx
c000a1fa:	51                   	push   ecx
c000a1fb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	83 c4 0c             	add    esp,0xc
c000a204:	c3                   	ret    
c000a205:	90                   	nop

c000a206 <File::stat(unsigned long long*, bool*)>:
c000a206:	56                   	push   esi
c000a207:	53                   	push   ebx
c000a208:	50                   	push   eax
c000a209:	b8 0b 00 00 00       	mov    eax,0xb
c000a20e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a212:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a216:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a21d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a221:	80 f9 19             	cmp    cl,0x19
c000a224:	77 3d                	ja     c000a263 <File::stat(unsigned long long*, bool*)+0x5d>
c000a226:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a22d:	85 c9                	test   ecx,ecx
c000a22f:	74 32                	je     c000a263 <File::stat(unsigned long long*, bool*)+0x5d>
c000a231:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a237:	85 c9                	test   ecx,ecx
c000a239:	74 28                	je     c000a263 <File::stat(unsigned long long*, bool*)+0x5d>
c000a23b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a23d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a241:	74 13                	je     c000a256 <File::stat(unsigned long long*, bool*)+0x50>
c000a243:	83 ec 04             	sub    esp,0x4
c000a246:	56                   	push   esi
c000a247:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000a24d:	51                   	push   ecx
c000a24e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000a251:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a254:	eb 0a                	jmp    c000a260 <File::stat(unsigned long long*, bool*)+0x5a>
c000a256:	53                   	push   ebx
c000a257:	83 c2 0d             	add    edx,0xd
c000a25a:	56                   	push   esi
c000a25b:	52                   	push   edx
c000a25c:	51                   	push   ecx
c000a25d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000a260:	83 c4 10             	add    esp,0x10
c000a263:	5a                   	pop    edx
c000a264:	5b                   	pop    ebx
c000a265:	5e                   	pop    esi
c000a266:	c3                   	ret    

c000a267 <Fs::setcwd(Process*, char*)>:
c000a267:	55                   	push   ebp
c000a268:	57                   	push   edi
c000a269:	56                   	push   esi
c000a26a:	53                   	push   ebx
c000a26b:	81 ec 20 02 00 00    	sub    esp,0x220
c000a271:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000a278:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000a27e:	57                   	push   edi
c000a27f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000a286:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000a28a:	56                   	push   esi
c000a28b:	e8 60 fa ff ff       	call   c0009cf0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a290:	89 34 24             	mov    DWORD PTR [esp],esi
c000a293:	e8 c8 62 ff ff       	call   c0000560 <strlen>
c000a298:	83 c4 10             	add    esp,0x10
c000a29b:	83 f8 02             	cmp    eax,0x2
c000a29e:	77 15                	ja     c000a2b5 <Fs::setcwd(Process*, char*)+0x4e>
c000a2a0:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000a2a5:	83 eb 41             	sub    ebx,0x41
c000a2a8:	8b 04 9d a0 19 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde660]
c000a2af:	85 c0                	test   eax,eax
c000a2b1:	75 1c                	jne    c000a2cf <Fs::setcwd(Process*, char*)+0x68>
c000a2b3:	eb 2f                	jmp    c000a2e4 <Fs::setcwd(Process*, char*)+0x7d>
c000a2b5:	83 ec 0c             	sub    esp,0xc
c000a2b8:	56                   	push   esi
c000a2b9:	e8 a2 62 ff ff       	call   c0000560 <strlen>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	83 f8 03             	cmp    eax,0x3
c000a2c4:	75 57                	jne    c000a31d <Fs::setcwd(Process*, char*)+0xb6>
c000a2c6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000a2cb:	75 50                	jne    c000a31d <Fs::setcwd(Process*, char*)+0xb6>
c000a2cd:	eb d1                	jmp    c000a2a0 <Fs::setcwd(Process*, char*)+0x39>
c000a2cf:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000a2d6:	75 0c                	jne    c000a2e4 <Fs::setcwd(Process*, char*)+0x7d>
c000a2d8:	83 ec 0c             	sub    esp,0xc
c000a2db:	50                   	push   eax
c000a2dc:	e8 69 1c 00 00       	call   c000bf4a <LogicalDisk::mount()>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	b8 03 00 00 00       	mov    eax,0x3
c000a2e9:	83 fb 19             	cmp    ebx,0x19
c000a2ec:	0f 87 c6 00 00 00    	ja     c000a3b8 <Fs::setcwd(Process*, char*)+0x151>
c000a2f2:	8b 14 9d a0 19 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffde660]
c000a2f9:	b8 05 00 00 00       	mov    eax,0x5
c000a2fe:	85 d2                	test   edx,edx
c000a300:	0f 84 b2 00 00 00    	je     c000a3b8 <Fs::setcwd(Process*, char*)+0x151>
c000a306:	b8 06 00 00 00       	mov    eax,0x6
c000a30b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a312:	0f 85 92 00 00 00    	jne    c000a3aa <Fs::setcwd(Process*, char*)+0x143>
c000a318:	e9 9b 00 00 00       	jmp    c000a3b8 <Fs::setcwd(Process*, char*)+0x151>
c000a31d:	83 ec 0c             	sub    esp,0xc
c000a320:	68 14 01 00 00       	push   0x114
c000a325:	e8 37 c8 ff ff       	call   c0006b61 <malloc>
c000a32a:	83 c4 0c             	add    esp,0xc
c000a32d:	89 c3                	mov    ebx,eax
c000a32f:	55                   	push   ebp
c000a330:	56                   	push   esi
c000a331:	50                   	push   eax
c000a332:	e8 63 fb ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000a337:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a33c:	83 c4 0c             	add    esp,0xc
c000a33f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000a343:	50                   	push   eax
c000a344:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a348:	50                   	push   eax
c000a349:	53                   	push   ebx
c000a34a:	e8 b7 fe ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c000a34f:	83 c4 10             	add    esp,0x10
c000a352:	83 f8 02             	cmp    eax,0x2
c000a355:	74 04                	je     c000a35b <Fs::setcwd(Process*, char*)+0xf4>
c000a357:	85 c0                	test   eax,eax
c000a359:	74 1c                	je     c000a377 <Fs::setcwd(Process*, char*)+0x110>
c000a35b:	b8 01 00 00 00       	mov    eax,0x1
c000a360:	85 db                	test   ebx,ebx
c000a362:	74 54                	je     c000a3b8 <Fs::setcwd(Process*, char*)+0x151>
c000a364:	83 ec 0c             	sub    esp,0xc
c000a367:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a369:	53                   	push   ebx
c000a36a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a36d:	83 c4 10             	add    esp,0x10
c000a370:	b8 01 00 00 00       	mov    eax,0x1
c000a375:	eb 41                	jmp    c000a3b8 <Fs::setcwd(Process*, char*)+0x151>
c000a377:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000a37c:	75 1c                	jne    c000a39a <Fs::setcwd(Process*, char*)+0x133>
c000a37e:	b8 02 00 00 00       	mov    eax,0x2
c000a383:	85 db                	test   ebx,ebx
c000a385:	74 31                	je     c000a3b8 <Fs::setcwd(Process*, char*)+0x151>
c000a387:	83 ec 0c             	sub    esp,0xc
c000a38a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a38c:	53                   	push   ebx
c000a38d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a390:	83 c4 10             	add    esp,0x10
c000a393:	b8 02 00 00 00       	mov    eax,0x2
c000a398:	eb 1e                	jmp    c000a3b8 <Fs::setcwd(Process*, char*)+0x151>
c000a39a:	85 db                	test   ebx,ebx
c000a39c:	74 0c                	je     c000a3aa <Fs::setcwd(Process*, char*)+0x143>
c000a39e:	83 ec 0c             	sub    esp,0xc
c000a3a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3a3:	53                   	push   ebx
c000a3a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a3a7:	83 c4 10             	add    esp,0x10
c000a3aa:	50                   	push   eax
c000a3ab:	50                   	push   eax
c000a3ac:	56                   	push   esi
c000a3ad:	57                   	push   edi
c000a3ae:	e8 6d 62 ff ff       	call   c0000620 <strcpy>
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	31 c0                	xor    eax,eax
c000a3b8:	81 c4 1c 02 00 00    	add    esp,0x21c
c000a3be:	5b                   	pop    ebx
c000a3bf:	5e                   	pop    esi
c000a3c0:	5f                   	pop    edi
c000a3c1:	5d                   	pop    ebp
c000a3c2:	c3                   	ret    
c000a3c3:	90                   	nop

c000a3c4 <Directory::Directory(char const*, Process*)>:
c000a3c4:	83 ec 0c             	sub    esp,0xc
c000a3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3cb:	83 ec 08             	sub    esp,0x8
c000a3ce:	6a 00                	push   0x0
c000a3d0:	50                   	push   eax
c000a3d1:	e8 84 de ff ff       	call   c000825a <UnixFile::UnixFile(int)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	ba 48 d3 01 c0       	mov    edx,0xc001d348
c000a3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3e2:	89 10                	mov    DWORD PTR [eax],edx
c000a3e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a3e8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3f2:	83 c0 0d             	add    eax,0xd
c000a3f5:	83 ec 04             	sub    esp,0x4
c000a3f8:	52                   	push   edx
c000a3f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3fd:	50                   	push   eax
c000a3fe:	e8 ed f8 ff ff       	call   c0009cf0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000a403:	83 c4 10             	add    esp,0x10
c000a406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a40a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000a40d:	8d 50 bf             	lea    edx,[eax-0x41]
c000a410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a414:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000a41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a41e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000a422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a426:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a42c:	25 ff 00 00 00       	and    eax,0xff
c000a431:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c000a438:	85 c0                	test   eax,eax
c000a43a:	74 42                	je     c000a47e <Directory::Directory(char const*, Process*)+0xba>
c000a43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a440:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a446:	25 ff 00 00 00       	and    eax,0xff
c000a44b:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c000a452:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a458:	85 c0                	test   eax,eax
c000a45a:	75 22                	jne    c000a47e <Directory::Directory(char const*, Process*)+0xba>
c000a45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a460:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000a466:	25 ff 00 00 00       	and    eax,0xff
c000a46b:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c000a472:	83 ec 0c             	sub    esp,0xc
c000a475:	50                   	push   eax
c000a476:	e8 cf 1a 00 00       	call   c000bf4a <LogicalDisk::mount()>
c000a47b:	83 c4 10             	add    esp,0x10
c000a47e:	90                   	nop
c000a47f:	83 c4 0c             	add    esp,0xc
c000a482:	c3                   	ret    
c000a483:	90                   	nop

c000a484 <Directory::open()>:
c000a484:	53                   	push   ebx
c000a485:	b8 0b 00 00 00       	mov    eax,0xb
c000a48a:	83 ec 08             	sub    esp,0x8
c000a48d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a491:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000a498:	80 fa 19             	cmp    dl,0x19
c000a49b:	77 3d                	ja     c000a4da <Directory::open()+0x56>
c000a49d:	8b 14 95 a0 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde660]
c000a4a4:	85 d2                	test   edx,edx
c000a4a6:	74 32                	je     c000a4da <Directory::open()+0x56>
c000a4a8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000a4ae:	85 d2                	test   edx,edx
c000a4b0:	74 28                	je     c000a4da <Directory::open()+0x56>
c000a4b2:	b8 06 00 00 00       	mov    eax,0x6
c000a4b7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000a4bb:	75 1d                	jne    c000a4da <Directory::open()+0x56>
c000a4bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000a4c3:	50                   	push   eax
c000a4c4:	8b 02                	mov    eax,DWORD PTR [edx]
c000a4c6:	51                   	push   ecx
c000a4c7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000a4ca:	51                   	push   ecx
c000a4cb:	52                   	push   edx
c000a4cc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	85 c0                	test   eax,eax
c000a4d4:	75 04                	jne    c000a4da <Directory::open()+0x56>
c000a4d6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000a4da:	83 c4 08             	add    esp,0x8
c000a4dd:	5b                   	pop    ebx
c000a4de:	c3                   	ret    
c000a4df:	90                   	nop

c000a4e0 <Directory::close()>:
c000a4e0:	53                   	push   ebx
c000a4e1:	b8 0b 00 00 00       	mov    eax,0xb
c000a4e6:	83 ec 08             	sub    esp,0x8
c000a4e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a4ed:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a4f4:	80 fa 19             	cmp    dl,0x19
c000a4f7:	77 41                	ja     c000a53a <Directory::close()+0x5a>
c000a4f9:	8b 1c 95 a0 19 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffde660]
c000a500:	85 db                	test   ebx,ebx
c000a502:	74 36                	je     c000a53a <Directory::close()+0x5a>
c000a504:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000a50b:	74 2d                	je     c000a53a <Directory::close()+0x5a>
c000a50d:	b8 05 00 00 00       	mov    eax,0x5
c000a512:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000a516:	74 22                	je     c000a53a <Directory::close()+0x5a>
c000a518:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000a51c:	8b 04 95 a0 19 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde660]
c000a523:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a529:	53                   	push   ebx
c000a52a:	53                   	push   ebx
c000a52b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a52d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000a533:	50                   	push   eax
c000a534:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000a537:	83 c4 10             	add    esp,0x10
c000a53a:	83 c4 08             	add    esp,0x8
c000a53d:	5b                   	pop    ebx
c000a53e:	c3                   	ret    
c000a53f:	90                   	nop

c000a540 <Directory::unlink()>:
c000a540:	83 ec 0c             	sub    esp,0xc
c000a543:	b8 0b 00 00 00       	mov    eax,0xb
c000a548:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a54c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a553:	80 f9 19             	cmp    cl,0x19
c000a556:	77 2f                	ja     c000a587 <Directory::unlink()+0x47>
c000a558:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a55f:	85 c9                	test   ecx,ecx
c000a561:	74 24                	je     c000a587 <Directory::unlink()+0x47>
c000a563:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a569:	85 c9                	test   ecx,ecx
c000a56b:	74 1a                	je     c000a587 <Directory::unlink()+0x47>
c000a56d:	b8 06 00 00 00       	mov    eax,0x6
c000a572:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a576:	75 0f                	jne    c000a587 <Directory::unlink()+0x47>
c000a578:	83 c2 0d             	add    edx,0xd
c000a57b:	50                   	push   eax
c000a57c:	50                   	push   eax
c000a57d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a57f:	52                   	push   edx
c000a580:	51                   	push   ecx
c000a581:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000a584:	83 c4 10             	add    esp,0x10
c000a587:	83 c4 0c             	add    esp,0xc
c000a58a:	c3                   	ret    
c000a58b:	90                   	nop

c000a58c <Directory::rename(char const*)>:
c000a58c:	83 ec 0c             	sub    esp,0xc
c000a58f:	b8 0b 00 00 00       	mov    eax,0xb
c000a594:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a598:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a59f:	80 f9 19             	cmp    cl,0x19
c000a5a2:	77 32                	ja     c000a5d6 <Directory::rename(char const*)+0x4a>
c000a5a4:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a5ab:	85 c9                	test   ecx,ecx
c000a5ad:	74 27                	je     c000a5d6 <Directory::rename(char const*)+0x4a>
c000a5af:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a5b5:	85 c9                	test   ecx,ecx
c000a5b7:	74 1d                	je     c000a5d6 <Directory::rename(char const*)+0x4a>
c000a5b9:	b8 06 00 00 00       	mov    eax,0x6
c000a5be:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a5c2:	75 12                	jne    c000a5d6 <Directory::rename(char const*)+0x4a>
c000a5c4:	83 c2 0d             	add    edx,0xd
c000a5c7:	50                   	push   eax
c000a5c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a5ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a5ce:	52                   	push   edx
c000a5cf:	51                   	push   ecx
c000a5d0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000a5d3:	83 c4 10             	add    esp,0x10
c000a5d6:	83 c4 0c             	add    esp,0xc
c000a5d9:	c3                   	ret    

c000a5da <Directory::exists()>:
c000a5da:	83 ec 0c             	sub    esp,0xc
c000a5dd:	31 c0                	xor    eax,eax
c000a5df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a5e3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a5ea:	80 f9 19             	cmp    cl,0x19
c000a5ed:	77 24                	ja     c000a613 <Directory::exists()+0x39>
c000a5ef:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a5f6:	85 c9                	test   ecx,ecx
c000a5f8:	74 19                	je     c000a613 <Directory::exists()+0x39>
c000a5fa:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a600:	85 c9                	test   ecx,ecx
c000a602:	74 0f                	je     c000a613 <Directory::exists()+0x39>
c000a604:	83 c2 0d             	add    edx,0xd
c000a607:	50                   	push   eax
c000a608:	50                   	push   eax
c000a609:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a60b:	52                   	push   edx
c000a60c:	51                   	push   ecx
c000a60d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	83 c4 0c             	add    esp,0xc
c000a616:	c3                   	ret    
c000a617:	90                   	nop

c000a618 <Directory::read(dirent*)>:
c000a618:	83 ec 1c             	sub    esp,0x1c
c000a61b:	b8 0b 00 00 00       	mov    eax,0xb
c000a620:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a624:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000a62b:	80 fa 19             	cmp    dl,0x19
c000a62e:	77 30                	ja     c000a660 <Directory::read(dirent*)+0x48>
c000a630:	8b 14 95 a0 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde660]
c000a637:	85 d2                	test   edx,edx
c000a639:	74 25                	je     c000a660 <Directory::read(dirent*)+0x48>
c000a63b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000a642:	74 1c                	je     c000a660 <Directory::read(dirent*)+0x48>
c000a644:	83 ec 0c             	sub    esp,0xc
c000a647:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a649:	8d 54 24 18          	lea    edx,[esp+0x18]
c000a64d:	52                   	push   edx
c000a64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a652:	6a 00                	push   0x0
c000a654:	68 10 01 00 00       	push   0x110
c000a659:	51                   	push   ecx
c000a65a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a65d:	83 c4 20             	add    esp,0x20
c000a660:	83 c4 1c             	add    esp,0x1c
c000a663:	c3                   	ret    

c000a664 <Directory::create()>:
c000a664:	83 ec 0c             	sub    esp,0xc
c000a667:	b8 0b 00 00 00       	mov    eax,0xb
c000a66c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a670:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000a677:	80 f9 19             	cmp    cl,0x19
c000a67a:	77 2f                	ja     c000a6ab <Directory::create()+0x47>
c000a67c:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000a683:	85 c9                	test   ecx,ecx
c000a685:	74 24                	je     c000a6ab <Directory::create()+0x47>
c000a687:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000a68d:	85 c9                	test   ecx,ecx
c000a68f:	74 1a                	je     c000a6ab <Directory::create()+0x47>
c000a691:	b8 06 00 00 00       	mov    eax,0x6
c000a696:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a69a:	75 0f                	jne    c000a6ab <Directory::create()+0x47>
c000a69c:	83 c2 0d             	add    edx,0xd
c000a69f:	50                   	push   eax
c000a6a0:	50                   	push   eax
c000a6a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a6a3:	52                   	push   edx
c000a6a4:	51                   	push   ecx
c000a6a5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	83 c4 0c             	add    esp,0xc
c000a6ae:	c3                   	ret    
c000a6af:	90                   	nop

c000a6b0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000a6b0:	b8 0a 00 00 00       	mov    eax,0xa
c000a6b5:	c3                   	ret    
c000a6b6:	66 90                	xchg   ax,ax

c000a6b8 <Bus::Bus(char const*)>:
c000a6b8:	83 ec 0c             	sub    esp,0xc
c000a6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6bf:	83 ec 08             	sub    esp,0x8
c000a6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c6:	50                   	push   eax
c000a6c7:	e8 30 08 00 00       	call   c000aefc <Device::Device(char const*)>
c000a6cc:	83 c4 10             	add    esp,0x10
c000a6cf:	ba 64 d3 01 c0       	mov    edx,0xc001d364
c000a6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6d8:	89 10                	mov    DWORD PTR [eax],edx
c000a6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6de:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000a6e8:	90                   	nop
c000a6e9:	83 c4 0c             	add    esp,0xc
c000a6ec:	c3                   	ret    
c000a6ed:	90                   	nop
c000a6ee:	66 90                	xchg   ax,ax

c000a6f0 <Bus::~Bus()>:
c000a6f0:	83 ec 0c             	sub    esp,0xc
c000a6f3:	ba 64 d3 01 c0       	mov    edx,0xc001d364
c000a6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6fc:	89 10                	mov    DWORD PTR [eax],edx
c000a6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a702:	83 ec 0c             	sub    esp,0xc
c000a705:	50                   	push   eax
c000a706:	e8 5b 05 00 00       	call   c000ac66 <Device::~Device()>
c000a70b:	83 c4 10             	add    esp,0x10
c000a70e:	90                   	nop
c000a70f:	83 c4 0c             	add    esp,0xc
c000a712:	c3                   	ret    
c000a713:	90                   	nop

c000a714 <Bus::~Bus()>:
c000a714:	83 ec 0c             	sub    esp,0xc
c000a717:	83 ec 0c             	sub    esp,0xc
c000a71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a71e:	e8 cd ff ff ff       	call   c000a6f0 <Bus::~Bus()>
c000a723:	83 c4 10             	add    esp,0x10
c000a726:	83 ec 08             	sub    esp,0x8
c000a729:	68 58 01 00 00       	push   0x158
c000a72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a732:	e8 f7 f0 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000a737:	83 c4 10             	add    esp,0x10
c000a73a:	83 c4 0c             	add    esp,0xc
c000a73d:	c3                   	ret    

c000a73e <beepThread(void*)>:
c000a73e:	83 ec 0c             	sub    esp,0xc
c000a741:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000a746:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a74a:	48                   	dec    eax
c000a74b:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000a750:	75 01                	jne    c000a753 <beepThread(void*)+0x15>
c000a752:	fb                   	sti    
c000a753:	83 ec 0c             	sub    esp,0xc
c000a756:	6b c2 0a             	imul   eax,edx,0xa
c000a759:	50                   	push   eax
c000a75a:	e8 89 84 00 00       	call   c0012be8 <milliTenthSleep(unsigned int)>
c000a75f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000a766:	e8 c5 a0 00 00       	call   c0014830 <HalMakeBeep(int)>
c000a76b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000a773:	83 c4 1c             	add    esp,0x1c
c000a776:	e9 69 83 00 00       	jmp    c0012ae4 <blockTask(TaskState)>

c000a77b <Krnl::beep(int, int, bool)>:
c000a77b:	56                   	push   esi
c000a77c:	53                   	push   ebx
c000a77d:	83 ec 10             	sub    esp,0x10
c000a780:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a784:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a78c:	e8 9f a0 00 00       	call   c0014830 <HalMakeBeep(int)>
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	89 f0                	mov    eax,esi
c000a796:	84 c0                	test   al,al
c000a798:	74 1e                	je     c000a7b8 <Krnl::beep(int, int, bool)+0x3d>
c000a79a:	83 ec 0c             	sub    esp,0xc
c000a79d:	6b db 0a             	imul   ebx,ebx,0xa
c000a7a0:	53                   	push   ebx
c000a7a1:	e8 42 84 00 00       	call   c0012be8 <milliTenthSleep(unsigned int)>
c000a7a6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000a7ae:	83 c4 14             	add    esp,0x14
c000a7b1:	5b                   	pop    ebx
c000a7b2:	5e                   	pop    esi
c000a7b3:	e9 78 a0 00 00       	jmp    c0014830 <HalMakeBeep(int)>
c000a7b8:	68 e6 00 00 00       	push   0xe6
c000a7bd:	53                   	push   ebx
c000a7be:	68 3e a7 00 c0       	push   0xc000a73e
c000a7c3:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c000a7c9:	e8 fa 7e 00 00       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c000a7ce:	83 c4 14             	add    esp,0x14
c000a7d1:	5b                   	pop    ebx
c000a7d2:	5e                   	pop    esi
c000a7d3:	c3                   	ret    

c000a7d4 <User::loadClockSettings(int)>:
c000a7d4:	53                   	push   ebx
c000a7d5:	83 ec 14             	sub    esp,0x14
c000a7d8:	68 14 01 00 00       	push   0x114
c000a7dd:	e8 7f c3 ff ff       	call   c0006b61 <malloc>
c000a7e2:	83 c4 0c             	add    esp,0xc
c000a7e5:	89 c3                	mov    ebx,eax
c000a7e7:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c000a7ed:	68 88 d3 01 c0       	push   0xc001d388
c000a7f2:	50                   	push   eax
c000a7f3:	e8 a2 f6 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000a7f8:	58                   	pop    eax
c000a7f9:	5a                   	pop    edx
c000a7fa:	6a 01                	push   0x1
c000a7fc:	53                   	push   ebx
c000a7fd:	e8 58 f7 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c000a802:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a805:	e8 ae f7 ff ff       	call   c0009fb8 <File::close()>
c000a80a:	83 c4 10             	add    esp,0x10
c000a80d:	85 db                	test   ebx,ebx
c000a80f:	74 0f                	je     c000a820 <User::loadClockSettings(int)+0x4c>
c000a811:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a813:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a817:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000a81a:	83 c4 08             	add    esp,0x8
c000a81d:	5b                   	pop    ebx
c000a81e:	ff e0                	jmp    eax
c000a820:	83 c4 08             	add    esp,0x8
c000a823:	5b                   	pop    ebx
c000a824:	c3                   	ret    
c000a825:	90                   	nop

c000a826 <Clock::Clock(char const*)>:
c000a826:	83 ec 0c             	sub    esp,0xc
c000a829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a82d:	83 ec 08             	sub    esp,0x8
c000a830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a834:	50                   	push   eax
c000a835:	e8 c2 06 00 00       	call   c000aefc <Device::Device(char const*)>
c000a83a:	83 c4 10             	add    esp,0x10
c000a83d:	ba b0 d3 01 c0       	mov    edx,0xc001d3b0
c000a842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a846:	89 10                	mov    DWORD PTR [eax],edx
c000a848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a84c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000a856:	90                   	nop
c000a857:	83 c4 0c             	add    esp,0xc
c000a85a:	c3                   	ret    
c000a85b:	90                   	nop

c000a85c <Clock::~Clock()>:
c000a85c:	83 ec 0c             	sub    esp,0xc
c000a85f:	ba b0 d3 01 c0       	mov    edx,0xc001d3b0
c000a864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a868:	89 10                	mov    DWORD PTR [eax],edx
c000a86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a86e:	83 ec 0c             	sub    esp,0xc
c000a871:	50                   	push   eax
c000a872:	e8 ef 03 00 00       	call   c000ac66 <Device::~Device()>
c000a877:	83 c4 10             	add    esp,0x10
c000a87a:	90                   	nop
c000a87b:	83 c4 0c             	add    esp,0xc
c000a87e:	c3                   	ret    
c000a87f:	90                   	nop

c000a880 <Clock::~Clock()>:
c000a880:	83 ec 0c             	sub    esp,0xc
c000a883:	83 ec 0c             	sub    esp,0xc
c000a886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88a:	e8 cd ff ff ff       	call   c000a85c <Clock::~Clock()>
c000a88f:	83 c4 10             	add    esp,0x10
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	68 58 01 00 00       	push   0x158
c000a89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89e:	e8 8b ef ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000a8a3:	83 c4 10             	add    esp,0x10
c000a8a6:	83 c4 0c             	add    esp,0xc
c000a8a9:	c3                   	ret    

c000a8aa <Clock::timeInSecondsLocal()>:
c000a8aa:	53                   	push   ebx
c000a8ab:	83 ec 14             	sub    esp,0x14
c000a8ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000a8b4:	50                   	push   eax
c000a8b5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000a8b8:	0f b6 0d 1c f5 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f51c
c000a8bf:	03 0d 20 f5 01 c0    	add    ecx,DWORD PTR ds:0xc001f520
c000a8c5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a8cb:	89 cb                	mov    ebx,ecx
c000a8cd:	c1 fb 1f             	sar    ebx,0x1f
c000a8d0:	01 c8                	add    eax,ecx
c000a8d2:	11 da                	adc    edx,ebx
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	31 c9                	xor    ecx,ecx
c000a8d9:	80 3d 1d f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f51d,0x0
c000a8e0:	74 05                	je     c000a8e7 <Clock::timeInSecondsLocal()+0x3d>
c000a8e2:	b9 08 07 00 00       	mov    ecx,0x708
c000a8e7:	31 db                	xor    ebx,ebx
c000a8e9:	01 c8                	add    eax,ecx
c000a8eb:	11 da                	adc    edx,ebx
c000a8ed:	83 c4 08             	add    esp,0x8
c000a8f0:	5b                   	pop    ebx
c000a8f1:	c3                   	ret    

c000a8f2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000a8f2:	57                   	push   edi
c000a8f3:	56                   	push   esi
c000a8f4:	53                   	push   ebx
c000a8f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a8f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a8fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000a8ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a903:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000a906:	0f b6 05 1c f5 01 c0 	movzx  eax,BYTE PTR ds:0xc001f51c
c000a90d:	03 05 20 f5 01 c0    	add    eax,DWORD PTR ds:0xc001f520
c000a913:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000a919:	99                   	cdq    
c000a91a:	29 c6                	sub    esi,eax
c000a91c:	19 d7                	sbb    edi,edx
c000a91e:	89 f0                	mov    eax,esi
c000a920:	89 fa                	mov    edx,edi
c000a922:	31 f6                	xor    esi,esi
c000a924:	80 3d 1d f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f51d,0x0
c000a92b:	74 05                	je     c000a932 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000a92d:	be 08 07 00 00       	mov    esi,0x708
c000a932:	31 ff                	xor    edi,edi
c000a934:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a938:	29 f0                	sub    eax,esi
c000a93a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a93e:	19 fa                	sbb    edx,edi
c000a940:	89 d8                	mov    eax,ebx
c000a942:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a946:	5b                   	pop    ebx
c000a947:	5e                   	pop    esi
c000a948:	5f                   	pop    edi
c000a949:	ff e0                	jmp    eax

c000a94b <datetimeToSeconds(datetime_t)>:
c000a94b:	55                   	push   ebp
c000a94c:	57                   	push   edi
c000a94d:	56                   	push   esi
c000a94e:	53                   	push   ebx
c000a94f:	83 ec 14             	sub    esp,0x14
c000a952:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a956:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a95a:	89 d3                	mov    ebx,edx
c000a95c:	0f b6 c6             	movzx  eax,dh
c000a95f:	c1 eb 10             	shr    ebx,0x10
c000a962:	48                   	dec    eax
c000a963:	66 81 eb 6c 07       	sub    bx,0x76c
c000a968:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000a96c:	0f b6 f5             	movzx  esi,ch
c000a96f:	89 cf                	mov    edi,ecx
c000a971:	6b f6 3c             	imul   esi,esi,0x3c
c000a974:	c1 ef 10             	shr    edi,0x10
c000a977:	0f b6 c9             	movzx  ecx,cl
c000a97a:	89 f8                	mov    eax,edi
c000a97c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000a982:	0f b6 f8             	movzx  edi,al
c000a985:	0f b6 d2             	movzx  edx,dl
c000a988:	01 fe                	add    esi,edi
c000a98a:	01 f1                	add    ecx,esi
c000a98c:	0f b7 f3             	movzx  esi,bx
c000a98f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a993:	c1 f9 1f             	sar    ecx,0x1f
c000a996:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000a99b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a99f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000a9a4:	8b 0c 8d 00 d4 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2c00]
c000a9ab:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000a9af:	76 29                	jbe    c000a9da <datetimeToSeconds(datetime_t)+0x8f>
c000a9b1:	f6 c3 03             	test   bl,0x3
c000a9b4:	75 24                	jne    c000a9da <datetimeToSeconds(datetime_t)+0x8f>
c000a9b6:	31 d2                	xor    edx,edx
c000a9b8:	bf 64 00 00 00       	mov    edi,0x64
c000a9bd:	89 d8                	mov    eax,ebx
c000a9bf:	66 f7 f7             	div    di
c000a9c2:	66 85 d2             	test   dx,dx
c000a9c5:	75 12                	jne    c000a9d9 <datetimeToSeconds(datetime_t)+0x8e>
c000a9c7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000a9cd:	bf 90 01 00 00       	mov    edi,0x190
c000a9d2:	99                   	cdq    
c000a9d3:	f7 ff                	idiv   edi
c000a9d5:	85 d2                	test   edx,edx
c000a9d7:	75 01                	jne    c000a9da <datetimeToSeconds(datetime_t)+0x8f>
c000a9d9:	41                   	inc    ecx
c000a9da:	66 83 fb 46          	cmp    bx,0x46
c000a9de:	76 45                	jbe    c000aa25 <datetimeToSeconds(datetime_t)+0xda>
c000a9e0:	bb 46 00 00 00       	mov    ebx,0x46
c000a9e5:	bf 64 00 00 00       	mov    edi,0x64
c000a9ea:	bd 90 01 00 00       	mov    ebp,0x190
c000a9ef:	b8 6d 01 00 00       	mov    eax,0x16d
c000a9f4:	f6 c3 03             	test   bl,0x3
c000a9f7:	75 23                	jne    c000aa1c <datetimeToSeconds(datetime_t)+0xd1>
c000a9f9:	89 d8                	mov    eax,ebx
c000a9fb:	99                   	cdq    
c000a9fc:	f7 ff                	idiv   edi
c000a9fe:	b8 6e 01 00 00       	mov    eax,0x16e
c000aa03:	85 d2                	test   edx,edx
c000aa05:	75 15                	jne    c000aa1c <datetimeToSeconds(datetime_t)+0xd1>
c000aa07:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000aa0d:	99                   	cdq    
c000aa0e:	f7 fd                	idiv   ebp
c000aa10:	31 c0                	xor    eax,eax
c000aa12:	85 d2                	test   edx,edx
c000aa14:	0f 94 c0             	sete   al
c000aa17:	05 6d 01 00 00       	add    eax,0x16d
c000aa1c:	01 c1                	add    ecx,eax
c000aa1e:	43                   	inc    ebx
c000aa1f:	39 f3                	cmp    ebx,esi
c000aa21:	7c cc                	jl     c000a9ef <datetimeToSeconds(datetime_t)+0xa4>
c000aa23:	eb 3b                	jmp    c000aa60 <datetimeToSeconds(datetime_t)+0x115>
c000aa25:	74 39                	je     c000aa60 <datetimeToSeconds(datetime_t)+0x115>
c000aa27:	b8 45 00 00 00       	mov    eax,0x45
c000aa2c:	89 c2                	mov    edx,eax
c000aa2e:	83 e2 03             	and    edx,0x3
c000aa31:	39 f0                	cmp    eax,esi
c000aa33:	7e 13                	jle    c000aa48 <datetimeToSeconds(datetime_t)+0xfd>
c000aa35:	85 d2                	test   edx,edx
c000aa37:	0f 94 c2             	sete   dl
c000aa3a:	48                   	dec    eax
c000aa3b:	0f b6 d2             	movzx  edx,dl
c000aa3e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000aa44:	29 d1                	sub    ecx,edx
c000aa46:	eb e4                	jmp    c000aa2c <datetimeToSeconds(datetime_t)+0xe1>
c000aa48:	b8 6d 01 00 00       	mov    eax,0x16d
c000aa4d:	85 d2                	test   edx,edx
c000aa4f:	75 0d                	jne    c000aa5e <datetimeToSeconds(datetime_t)+0x113>
c000aa51:	31 c0                	xor    eax,eax
c000aa53:	66 85 db             	test   bx,bx
c000aa56:	0f 95 c0             	setne  al
c000aa59:	05 6d 01 00 00       	add    eax,0x16d
c000aa5e:	29 c1                	sub    ecx,eax
c000aa60:	b8 80 51 01 00       	mov    eax,0x15180
c000aa65:	f7 e9                	imul   ecx
c000aa67:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000aa6b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000aa6f:	83 c4 14             	add    esp,0x14
c000aa72:	5b                   	pop    ebx
c000aa73:	5e                   	pop    esi
c000aa74:	5f                   	pop    edi
c000aa75:	5d                   	pop    ebp
c000aa76:	c3                   	ret    
c000aa77:	90                   	nop

c000aa78 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000aa78:	57                   	push   edi
c000aa79:	56                   	push   esi
c000aa7a:	53                   	push   ebx
c000aa7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa7f:	8b 06                	mov    eax,DWORD PTR [esi]
c000aa81:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000aa84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa8c:	e8 ba fe ff ff       	call   c000a94b <datetimeToSeconds(datetime_t)>
c000aa91:	59                   	pop    ecx
c000aa92:	0f b6 0d 1c f5 01 c0 	movzx  ecx,BYTE PTR ds:0xc001f51c
c000aa99:	5b                   	pop    ebx
c000aa9a:	03 0d 20 f5 01 c0    	add    ecx,DWORD PTR ds:0xc001f520
c000aaa0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000aaa6:	89 cb                	mov    ebx,ecx
c000aaa8:	c1 fb 1f             	sar    ebx,0x1f
c000aaab:	29 c8                	sub    eax,ecx
c000aaad:	19 da                	sbb    edx,ebx
c000aaaf:	31 c9                	xor    ecx,ecx
c000aab1:	80 3d 1d f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f51d,0x0
c000aab8:	74 05                	je     c000aabf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000aaba:	b9 08 07 00 00       	mov    ecx,0x708
c000aabf:	31 db                	xor    ebx,ebx
c000aac1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000aac5:	29 c8                	sub    eax,ecx
c000aac7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aacb:	19 da                	sbb    edx,ebx
c000aacd:	89 f8                	mov    eax,edi
c000aacf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000aad3:	5b                   	pop    ebx
c000aad4:	5e                   	pop    esi
c000aad5:	5f                   	pop    edi
c000aad6:	ff e0                	jmp    eax

c000aad8 <secondsToDatetime(unsigned long long)>:
c000aad8:	55                   	push   ebp
c000aad9:	57                   	push   edi
c000aada:	56                   	push   esi
c000aadb:	53                   	push   ebx
c000aadc:	83 ec 1c             	sub    esp,0x1c
c000aadf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aae3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aae7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000aaeb:	6a 00                	push   0x0
c000aaed:	68 80 51 01 00       	push   0x15180
c000aaf2:	55                   	push   ebp
c000aaf3:	57                   	push   edi
c000aaf4:	e8 67 0b 01 00       	call   c001b660 <__udivdi3>
c000aaf9:	83 c4 10             	add    esp,0x10
c000aafc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000ab02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab06:	6a 00                	push   0x0
c000ab08:	68 80 51 01 00       	push   0x15180
c000ab0d:	55                   	push   ebp
c000ab0e:	57                   	push   edi
c000ab0f:	bf 10 0e 00 00       	mov    edi,0xe10
c000ab14:	e8 47 0c 01 00       	call   c001b760 <__umoddi3>
c000ab19:	83 c4 10             	add    esp,0x10
c000ab1c:	99                   	cdq    
c000ab1d:	f7 ff                	idiv   edi
c000ab1f:	bf 3c 00 00 00       	mov    edi,0x3c
c000ab24:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000ab27:	89 d0                	mov    eax,edx
c000ab29:	99                   	cdq    
c000ab2a:	f7 ff                	idiv   edi
c000ab2c:	85 db                	test   ebx,ebx
c000ab2e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000ab31:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ab34:	79 11                	jns    c000ab47 <secondsToDatetime(unsigned long long)+0x6f>
c000ab36:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ab3a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ab40:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ab45:	eb 07                	jmp    c000ab4e <secondsToDatetime(unsigned long long)+0x76>
c000ab47:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ab4c:	89 d8                	mov    eax,ebx
c000ab4e:	bf b4 05 00 00       	mov    edi,0x5b4
c000ab53:	99                   	cdq    
c000ab54:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ab59:	f7 f9                	idiv   ecx
c000ab5b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ab60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab64:	31 d2                	xor    edx,edx
c000ab66:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ab6e:	01 c3                	add    ebx,eax
c000ab70:	89 d8                	mov    eax,ebx
c000ab72:	f7 f1                	div    ecx
c000ab74:	31 d2                	xor    edx,edx
c000ab76:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ab79:	89 d8                	mov    eax,ebx
c000ab7b:	f7 f7                	div    edi
c000ab7d:	31 d2                	xor    edx,edx
c000ab7f:	29 c1                	sub    ecx,eax
c000ab81:	89 d8                	mov    eax,ebx
c000ab83:	f7 f5                	div    ebp
c000ab85:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ab8a:	29 c1                	sub    ecx,eax
c000ab8c:	31 d2                	xor    edx,edx
c000ab8e:	89 c8                	mov    eax,ecx
c000ab90:	f7 f5                	div    ebp
c000ab92:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ab97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab9b:	31 d2                	xor    edx,edx
c000ab9d:	89 c8                	mov    eax,ecx
c000ab9f:	f7 f5                	div    ebp
c000aba1:	31 d2                	xor    edx,edx
c000aba3:	01 c3                	add    ebx,eax
c000aba5:	89 c8                	mov    eax,ecx
c000aba7:	f7 f7                	div    edi
c000aba9:	bf 99 00 00 00       	mov    edi,0x99
c000abae:	29 c3                	sub    ebx,eax
c000abb0:	31 d2                	xor    edx,edx
c000abb2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000abba:	29 c3                	sub    ebx,eax
c000abbc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000abbf:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000abc2:	bb 05 00 00 00       	mov    ebx,0x5
c000abc7:	83 c1 02             	add    ecx,0x2
c000abca:	89 c8                	mov    eax,ecx
c000abcc:	f7 f7                	div    edi
c000abce:	31 d2                	xor    edx,edx
c000abd0:	89 c7                	mov    edi,eax
c000abd2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000abd8:	83 c0 02             	add    eax,0x2
c000abdb:	f7 f3                	div    ebx
c000abdd:	89 eb                	mov    ebx,ebp
c000abdf:	29 c3                	sub    ebx,eax
c000abe1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000abe7:	88 1e                	mov    BYTE PTR [esi],bl
c000abe9:	19 c0                	sbb    eax,eax
c000abeb:	31 d2                	xor    edx,edx
c000abed:	83 e0 0c             	and    eax,0xc
c000abf0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000abf4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000abfc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ac00:	83 f9 01             	cmp    ecx,0x1
c000ac03:	0f 96 c2             	setbe  dl
c000ac06:	41                   	inc    ecx
c000ac07:	01 d0                	add    eax,edx
c000ac09:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ac0c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ac10:	83 c4 1c             	add    esp,0x1c
c000ac13:	89 f0                	mov    eax,esi
c000ac15:	5b                   	pop    ebx
c000ac16:	5e                   	pop    esi
c000ac17:	5f                   	pop    edi
c000ac18:	5d                   	pop    ebp
c000ac19:	c2 04 00             	ret    0x4

c000ac1c <Clock::timeInDatetimeLocal()>:
c000ac1c:	53                   	push   ebx
c000ac1d:	83 ec 14             	sub    esp,0x14
c000ac20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ac24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ac28:	e8 7d fc ff ff       	call   c000a8aa <Clock::timeInSecondsLocal()>
c000ac2d:	83 c4 0c             	add    esp,0xc
c000ac30:	52                   	push   edx
c000ac31:	50                   	push   eax
c000ac32:	53                   	push   ebx
c000ac33:	e8 a0 fe ff ff       	call   c000aad8 <secondsToDatetime(unsigned long long)>
c000ac38:	89 d8                	mov    eax,ebx
c000ac3a:	83 c4 14             	add    esp,0x14
c000ac3d:	5b                   	pop    ebx
c000ac3e:	c2 04 00             	ret    0x4
c000ac41:	90                   	nop

c000ac42 <Device::hibernate()>:
c000ac42:	c3                   	ret    
c000ac43:	90                   	nop

c000ac44 <Device::wake()>:
c000ac44:	c3                   	ret    
c000ac45:	90                   	nop

c000ac46 <Device::detect()>:
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <Device::disableLegacy()>:
c000ac48:	c3                   	ret    
c000ac49:	90                   	nop

c000ac4a <Device::powerSaving(PowerSavingLevel)>:
c000ac4a:	c3                   	ret    
c000ac4b:	90                   	nop

c000ac4c <DriverlessDevice::close(int, int, void*)>:
c000ac4c:	31 c0                	xor    eax,eax
c000ac4e:	c3                   	ret    
c000ac4f:	90                   	nop

c000ac50 <DriverlessDevice::detect()>:
c000ac50:	c3                   	ret    
c000ac51:	90                   	nop

c000ac52 <DriverlessDevice::open(int, int, void*)>:
c000ac52:	83 ec 18             	sub    esp,0x18
c000ac55:	68 30 d4 01 c0       	push   0xc001d430
c000ac5a:	e8 14 48 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000ac5f:	83 c8 ff             	or     eax,0xffffffff
c000ac62:	83 c4 1c             	add    esp,0x1c
c000ac65:	c3                   	ret    

c000ac66 <Device::~Device()>:
c000ac66:	ba 90 d4 01 c0       	mov    edx,0xc001d490
c000ac6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac6f:	89 10                	mov    DWORD PTR [eax],edx
c000ac71:	90                   	nop
c000ac72:	c3                   	ret    
c000ac73:	90                   	nop

c000ac74 <Device::~Device()>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac7b:	e8 e6 ff ff ff       	call   c000ac66 <Device::~Device()>
c000ac80:	83 c4 04             	add    esp,0x4
c000ac83:	83 ec 08             	sub    esp,0x8
c000ac86:	68 58 01 00 00       	push   0x158
c000ac8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8f:	e8 9a eb ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000ac94:	83 c4 10             	add    esp,0x10
c000ac97:	83 c4 0c             	add    esp,0xc
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <Device::findAndLoadDriver()>:
c000ac9c:	c7 44 24 04 4e d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d44e
c000aca4:	e9 7b ec ff ff       	jmp    c0009924 <Dbg::kprintf(char const*, ...)>
c000aca9:	90                   	nop

c000acaa <Device::preOpenPCI(PCIDeviceInfo)>:
c000acaa:	57                   	push   edi
c000acab:	b9 09 00 00 00       	mov    ecx,0x9
c000acb0:	56                   	push   esi
c000acb1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000acb5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000acb9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000acc3:	81 c7 18 01 00 00    	add    edi,0x118
c000acc9:	fc                   	cld    
c000acca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000accc:	5e                   	pop    esi
c000accd:	5f                   	pop    edi
c000acce:	c3                   	ret    
c000accf:	90                   	nop

c000acd0 <Device::preOpenACPI(void*, char*, char*)>:
c000acd0:	57                   	push   edi
c000acd1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000acd6:	56                   	push   esi
c000acd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000acdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acdf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ace9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000acef:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000acf5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000acf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acfb:	b9 0e 00 00 00       	mov    ecx,0xe
c000ad00:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ad06:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad0c:	5e                   	pop    esi
c000ad0d:	5f                   	pop    edi
c000ad0e:	c3                   	ret    
c000ad0f:	90                   	nop

c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ad10:	53                   	push   ebx
c000ad11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad21:	0f b6 c0             	movzx  eax,al
c000ad24:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ad28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ad30:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ad34:	5b                   	pop    ebx
c000ad35:	e9 a6 05 00 00       	jmp    c000b2e0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ad3a <Device::getParent()>:
c000ad3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad3e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ad44:	c3                   	ret    
c000ad45:	90                   	nop

c000ad46 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ad46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad4e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ad53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ad57:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ad5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad5f:	e9 e8 06 00 00       	jmp    c000b44c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ad64 <Device::addChild(Device*)>:
c000ad64:	53                   	push   ebx
c000ad65:	83 ec 08             	sub    esp,0x8
c000ad68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad70:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ad76:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ad7c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ad7e:	85 d2                	test   edx,edx
c000ad80:	74 04                	je     c000ad86 <Device::addChild(Device*)+0x22>
c000ad82:	89 d3                	mov    ebx,edx
c000ad84:	eb f6                	jmp    c000ad7c <Device::addChild(Device*)+0x18>
c000ad86:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ad89:	83 ec 0c             	sub    esp,0xc
c000ad8c:	6a 08                	push   0x8
c000ad8e:	e8 ce bd ff ff       	call   c0006b61 <malloc>
c000ad93:	89 03                	mov    DWORD PTR [ebx],eax
c000ad95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ad9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ada2:	83 c4 18             	add    esp,0x18
c000ada5:	5b                   	pop    ebx
c000ada6:	c3                   	ret    
c000ada7:	90                   	nop

c000ada8 <Device::removeAllChildren()>:
c000ada8:	56                   	push   esi
c000ada9:	53                   	push   ebx
c000adaa:	52                   	push   edx
c000adab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000adaf:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000adb5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000adb8:	74 17                	je     c000add1 <Device::removeAllChildren()+0x29>
c000adba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000adbd:	85 c0                	test   eax,eax
c000adbf:	74 0c                	je     c000adcd <Device::removeAllChildren()+0x25>
c000adc1:	83 ec 0c             	sub    esp,0xc
c000adc4:	8b 10                	mov    edx,DWORD PTR [eax]
c000adc6:	50                   	push   eax
c000adc7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000adca:	83 c4 10             	add    esp,0x10
c000adcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000adcf:	eb e4                	jmp    c000adb5 <Device::removeAllChildren()+0xd>
c000add1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000add7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000addd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ade3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000adea:	58                   	pop    eax
c000adeb:	5b                   	pop    ebx
c000adec:	5e                   	pop    esi
c000aded:	c3                   	ret    

c000adee <Device::hibernateAll()>:
c000adee:	53                   	push   ebx
c000adef:	83 ec 14             	sub    esp,0x14
c000adf2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000adf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000adf8:	53                   	push   ebx
c000adf9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000adfc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae02:	83 c4 10             	add    esp,0x10
c000ae05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae08:	74 0f                	je     c000ae19 <Device::hibernateAll()+0x2b>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae10:	e8 d9 ff ff ff       	call   c000adee <Device::hibernateAll()>
c000ae15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae17:	eb e9                	jmp    c000ae02 <Device::hibernateAll()+0x14>
c000ae19:	83 c4 08             	add    esp,0x8
c000ae1c:	5b                   	pop    ebx
c000ae1d:	c3                   	ret    

c000ae1e <Device::wakeAll()>:
c000ae1e:	53                   	push   ebx
c000ae1f:	83 ec 14             	sub    esp,0x14
c000ae22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ae26:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae28:	53                   	push   ebx
c000ae29:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ae2c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae32:	83 c4 10             	add    esp,0x10
c000ae35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae38:	74 0f                	je     c000ae49 <Device::wakeAll()+0x2b>
c000ae3a:	83 ec 0c             	sub    esp,0xc
c000ae3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae40:	e8 d9 ff ff ff       	call   c000ae1e <Device::wakeAll()>
c000ae45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae47:	eb e9                	jmp    c000ae32 <Device::wakeAll()+0x14>
c000ae49:	83 c4 08             	add    esp,0x8
c000ae4c:	5b                   	pop    ebx
c000ae4d:	c3                   	ret    

c000ae4e <Device::detectAll()>:
c000ae4e:	53                   	push   ebx
c000ae4f:	83 ec 14             	sub    esp,0x14
c000ae52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ae56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae58:	53                   	push   ebx
c000ae59:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ae5c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae62:	83 c4 10             	add    esp,0x10
c000ae65:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ae68:	74 0f                	je     c000ae79 <Device::detectAll()+0x2b>
c000ae6a:	83 ec 0c             	sub    esp,0xc
c000ae6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ae70:	e8 d9 ff ff ff       	call   c000ae4e <Device::detectAll()>
c000ae75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ae77:	eb e9                	jmp    c000ae62 <Device::detectAll()+0x14>
c000ae79:	83 c4 08             	add    esp,0x8
c000ae7c:	5b                   	pop    ebx
c000ae7d:	c3                   	ret    

c000ae7e <Device::disableLegacyAll()>:
c000ae7e:	c3                   	ret    
c000ae7f:	90                   	nop

c000ae80 <Device::loadDriversForAll()>:
c000ae80:	c3                   	ret    
c000ae81:	90                   	nop

c000ae82 <Device::closeAll()>:
c000ae82:	53                   	push   ebx
c000ae83:	83 ec 08             	sub    esp,0x8
c000ae86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae8c:	6a 00                	push   0x0
c000ae8e:	6a 00                	push   0x0
c000ae90:	6a 00                	push   0x0
c000ae92:	53                   	push   ebx
c000ae93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ae96:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aea2:	74 0f                	je     c000aeb3 <Device::closeAll()+0x31>
c000aea4:	83 ec 0c             	sub    esp,0xc
c000aea7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aeaa:	e8 d3 ff ff ff       	call   c000ae82 <Device::closeAll()>
c000aeaf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aeb1:	eb e9                	jmp    c000ae9c <Device::closeAll()+0x1a>
c000aeb3:	83 c4 08             	add    esp,0x8
c000aeb6:	5b                   	pop    ebx
c000aeb7:	c3                   	ret    

c000aeb8 <Device::powerSavingAll(PowerSavingLevel)>:
c000aeb8:	56                   	push   esi
c000aeb9:	53                   	push   ebx
c000aeba:	83 ec 0c             	sub    esp,0xc
c000aebd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aec1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000aec5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000aecc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000aed8:	74 0f                	je     c000aee9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000aeda:	52                   	push   edx
c000aedb:	52                   	push   edx
c000aedc:	56                   	push   esi
c000aedd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000aee0:	e8 d3 ff ff ff       	call   c000aeb8 <Device::powerSavingAll(PowerSavingLevel)>
c000aee5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000aee7:	eb e9                	jmp    c000aed2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000aee9:	58                   	pop    eax
c000aeea:	5b                   	pop    ebx
c000aeeb:	5e                   	pop    esi
c000aeec:	c3                   	ret    
c000aeed:	90                   	nop

c000aeee <Device::setName(char const*)>:
c000aeee:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000aef6:	e9 25 57 ff ff       	jmp    c0000620 <strcpy>
c000aefb:	90                   	nop

c000aefc <Device::Device(char const*)>:
c000aefc:	83 ec 1c             	sub    esp,0x1c
c000aeff:	ba 90 d4 01 c0       	mov    edx,0xc001d490
c000af04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af08:	89 10                	mov    DWORD PTR [eax],edx
c000af0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af0e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000af18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af1c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000af26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af2a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000af34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af38:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000af42:	83 ec 08             	sub    esp,0x8
c000af45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000af49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000af4d:	e8 9c ff ff ff       	call   c000aeee <Device::setName(char const*)>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000af5d:	83 ec 0c             	sub    esp,0xc
c000af60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af64:	e8 f8 bb ff ff       	call   c0006b61 <malloc>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000af79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af7d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000af83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af87:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000af93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af97:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000af9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000afa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afa8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000afaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afb3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000afba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afbe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000afc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afcc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000afd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afda:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000afe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afe8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000aff2:	90                   	nop
c000aff3:	83 c4 1c             	add    esp,0x1c
c000aff6:	c3                   	ret    
c000aff7:	90                   	nop

c000aff8 <Device::getName()>:
c000aff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000affc:	05 d0 00 00 00       	add    eax,0xd0
c000b001:	c3                   	ret    

c000b002 <DriverlessDevice::DriverlessDevice(char const*)>:
c000b002:	83 ec 0c             	sub    esp,0xc
c000b005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b009:	83 ec 08             	sub    esp,0x8
c000b00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b010:	50                   	push   eax
c000b011:	e8 e6 fe ff ff       	call   c000aefc <Device::Device(char const*)>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	ba bc d4 01 c0       	mov    edx,0xc001d4bc
c000b01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b022:	89 10                	mov    DWORD PTR [eax],edx
c000b024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b028:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000b032:	90                   	nop
c000b033:	83 c4 0c             	add    esp,0xc
c000b036:	c3                   	ret    
c000b037:	90                   	nop

c000b038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000b038:	57                   	push   edi
c000b039:	56                   	push   esi
c000b03a:	53                   	push   ebx
c000b03b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b03f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b043:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b047:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000b04d:	75 0c                	jne    c000b05b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000b04f:	52                   	push   edx
c000b050:	52                   	push   edx
c000b051:	53                   	push   ebx
c000b052:	56                   	push   esi
c000b053:	e8 ba 0a 01 00       	call   c001bb12 <LinkedList<Device>::addElement(Device*)>
c000b058:	83 c4 10             	add    esp,0x10
c000b05b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b061:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b064:	74 12                	je     c000b078 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000b066:	50                   	push   eax
c000b067:	57                   	push   edi
c000b068:	56                   	push   esi
c000b069:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b06c:	e8 c7 ff ff ff       	call   c000b038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b071:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	eb e9                	jmp    c000b061 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000b078:	5b                   	pop    ebx
c000b079:	5e                   	pop    esi
c000b07a:	5f                   	pop    edi
c000b07b:	c3                   	ret    

c000b07c <getDevicesOfType(DeviceType)>:
c000b07c:	53                   	push   ebx
c000b07d:	83 ec 14             	sub    esp,0x14
c000b080:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b084:	53                   	push   ebx
c000b085:	e8 64 0b 01 00       	call   c001bbee <LinkedList<Device>::LinkedList()>
c000b08a:	83 c4 0c             	add    esp,0xc
c000b08d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b091:	53                   	push   ebx
c000b092:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000b098:	e8 9b ff ff ff       	call   c000b038 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000b09d:	89 d8                	mov    eax,ebx
c000b09f:	83 c4 18             	add    esp,0x18
c000b0a2:	5b                   	pop    ebx
c000b0a3:	c2 04 00             	ret    0x4
c000b0a6:	66 90                	xchg   ax,ax

c000b0a8 <HardDiskController::HardDiskController(char const*)>:
c000b0a8:	83 ec 0c             	sub    esp,0xc
c000b0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0af:	83 ec 08             	sub    esp,0x8
c000b0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b6:	50                   	push   eax
c000b0b7:	e8 40 fe ff ff       	call   c000aefc <Device::Device(char const*)>
c000b0bc:	83 c4 10             	add    esp,0x10
c000b0bf:	ba e8 d4 01 c0       	mov    edx,0xc001d4e8
c000b0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ce:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000b0d8:	90                   	nop
c000b0d9:	83 c4 0c             	add    esp,0xc
c000b0dc:	c3                   	ret    
c000b0dd:	90                   	nop
c000b0de:	66 90                	xchg   ax,ax

c000b0e0 <HardDiskController::~HardDiskController()>:
c000b0e0:	83 ec 0c             	sub    esp,0xc
c000b0e3:	ba e8 d4 01 c0       	mov    edx,0xc001d4e8
c000b0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ec:	89 10                	mov    DWORD PTR [eax],edx
c000b0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f2:	83 ec 0c             	sub    esp,0xc
c000b0f5:	50                   	push   eax
c000b0f6:	e8 6b fb ff ff       	call   c000ac66 <Device::~Device()>
c000b0fb:	83 c4 10             	add    esp,0x10
c000b0fe:	90                   	nop
c000b0ff:	83 c4 0c             	add    esp,0xc
c000b102:	c3                   	ret    
c000b103:	90                   	nop

c000b104 <HardDiskController::~HardDiskController()>:
c000b104:	83 ec 0c             	sub    esp,0xc
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b10e:	e8 cd ff ff ff       	call   c000b0e0 <HardDiskController::~HardDiskController()>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	83 ec 08             	sub    esp,0x8
c000b119:	68 58 01 00 00       	push   0x158
c000b11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b122:	e8 07 e7 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000b127:	83 c4 10             	add    esp,0x10
c000b12a:	83 c4 0c             	add    esp,0xc
c000b12d:	c3                   	ret    

c000b12e <PhysicalDisk::eject()>:
c000b12e:	83 c8 ff             	or     eax,0xffffffff
c000b131:	c3                   	ret    

c000b132 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b139:	83 ec 08             	sub    esp,0x8
c000b13c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b140:	50                   	push   eax
c000b141:	e8 b6 fd ff ff       	call   c000aefc <Device::Device(char const*)>
c000b146:	83 c4 10             	add    esp,0x10
c000b149:	ba 14 d5 01 c0       	mov    edx,0xc001d514
c000b14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b152:	89 10                	mov    DWORD PTR [eax],edx
c000b154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b158:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b163:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000b16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b16e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000b178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b17c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b180:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000b186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b18a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000b194:	90                   	nop
c000b195:	83 c4 0c             	add    esp,0xc
c000b198:	c3                   	ret    
c000b199:	90                   	nop

c000b19a <PhysicalDisk::startCache()>:
c000b19a:	56                   	push   esi
c000b19b:	53                   	push   ebx
c000b19c:	83 ec 10             	sub    esp,0x10
c000b19f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b1a3:	6a 44                	push   0x44
c000b1a5:	e8 b7 b9 ff ff       	call   c0006b61 <malloc>
c000b1aa:	89 c6                	mov    esi,eax
c000b1ac:	58                   	pop    eax
c000b1ad:	5a                   	pop    edx
c000b1ae:	53                   	push   ebx
c000b1af:	56                   	push   esi
c000b1b0:	e8 ab 15 00 00       	call   c000c760 <VCache::VCache(PhysicalDisk*)>
c000b1b5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000b1bb:	83 c4 14             	add    esp,0x14
c000b1be:	5b                   	pop    ebx
c000b1bf:	5e                   	pop    esi
c000b1c0:	c3                   	ret    
c000b1c1:	90                   	nop

c000b1c2 <PhysicalDisk::~PhysicalDisk()>:
c000b1c2:	83 ec 0c             	sub    esp,0xc
c000b1c5:	ba 14 d5 01 c0       	mov    edx,0xc001d514
c000b1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ce:	89 10                	mov    DWORD PTR [eax],edx
c000b1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	50                   	push   eax
c000b1d8:	e8 89 fa ff ff       	call   c000ac66 <Device::~Device()>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	90                   	nop
c000b1e1:	83 c4 0c             	add    esp,0xc
c000b1e4:	c3                   	ret    
c000b1e5:	90                   	nop

c000b1e6 <PhysicalDisk::~PhysicalDisk()>:
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	83 ec 0c             	sub    esp,0xc
c000b1ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1f0:	e8 cd ff ff ff       	call   c000b1c2 <PhysicalDisk::~PhysicalDisk()>
c000b1f5:	83 c4 10             	add    esp,0x10
c000b1f8:	83 ec 08             	sub    esp,0x8
c000b1fb:	68 6c 01 00 00       	push   0x16c
c000b200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b204:	e8 25 e6 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000b209:	83 c4 10             	add    esp,0x10
c000b20c:	83 c4 0c             	add    esp,0xc
c000b20f:	c3                   	ret    

c000b210 <int_handler>:
c000b210:	55                   	push   ebp
c000b211:	57                   	push   edi
c000b212:	56                   	push   esi
c000b213:	53                   	push   ebx
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b21b:	80 3d c0 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ec0,0x0
c000b222:	74 0b                	je     c000b22f <int_handler+0x1f>
c000b224:	fa                   	cli    
c000b225:	f4                   	hlt    
c000b226:	80 3d c0 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ec0,0x0
c000b22d:	75 f5                	jne    c000b224 <int_handler+0x14>
c000b22f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000b232:	8d 46 e0             	lea    eax,[esi-0x20]
c000b235:	83 f8 17             	cmp    eax,0x17
c000b238:	76 3e                	jbe    c000b278 <int_handler+0x68>
c000b23a:	c1 e6 04             	shl    esi,0x4
c000b23d:	31 db                	xor    ebx,ebx
c000b23f:	8d ae 40 05 02 c0    	lea    ebp,[esi-0x3ffdfac0]
c000b245:	81 c6 40 f5 01 c0    	add    esi,0xc001f540
c000b24b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000b24f:	85 c0                	test   eax,eax
c000b251:	74 13                	je     c000b266 <int_handler+0x56>
c000b253:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000b256:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000b25a:	74 2a                	je     c000b286 <int_handler+0x76>
c000b25c:	83 ec 08             	sub    esp,0x8
c000b25f:	52                   	push   edx
c000b260:	57                   	push   edi
c000b261:	ff d0                	call   eax
c000b263:	83 c4 10             	add    esp,0x10
c000b266:	43                   	inc    ebx
c000b267:	83 fb 04             	cmp    ebx,0x4
c000b26a:	75 df                	jne    c000b24b <int_handler+0x3b>
c000b26c:	83 c4 0c             	add    esp,0xc
c000b26f:	31 c0                	xor    eax,eax
c000b271:	5b                   	pop    ebx
c000b272:	31 d2                	xor    edx,edx
c000b274:	5e                   	pop    esi
c000b275:	5f                   	pop    edi
c000b276:	5d                   	pop    ebp
c000b277:	c3                   	ret    
c000b278:	83 ec 0c             	sub    esp,0xc
c000b27b:	50                   	push   eax
c000b27c:	e8 ec 95 00 00       	call   c001486d <HalEndOfInterrupt(int)>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	eb b4                	jmp    c000b23a <int_handler+0x2a>
c000b286:	83 ec 08             	sub    esp,0x8
c000b289:	52                   	push   edx
c000b28a:	57                   	push   edi
c000b28b:	ff d0                	call   eax
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	83 c4 0c             	add    esp,0xc
c000b293:	5b                   	pop    ebx
c000b294:	5e                   	pop    esi
c000b295:	5f                   	pop    edi
c000b296:	5d                   	pop    ebp
c000b297:	c3                   	ret    

c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000b298:	56                   	push   esi
c000b299:	31 c0                	xor    eax,eax
c000b29b:	53                   	push   ebx
c000b29c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b2a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b2a4:	89 ca                	mov    edx,ecx
c000b2a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2aa:	c1 e2 04             	shl    edx,0x4
c000b2ad:	83 bc 82 40 05 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdfac0],0x0
c000b2b5:	74 15                	je     c000b2cc <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000b2b7:	40                   	inc    eax
c000b2b8:	83 f8 04             	cmp    eax,0x4
c000b2bb:	75 f0                	jne    c000b2ad <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000b2bd:	c7 44 24 0c 44 d5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d544
c000b2c5:	5b                   	pop    ebx
c000b2c6:	5e                   	pop    esi
c000b2c7:	e9 a7 41 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c000b2cc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000b2cf:	89 1c 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],ebx
c000b2d6:	89 34 85 40 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0ac0],esi
c000b2dd:	5b                   	pop    ebx
c000b2de:	5e                   	pop    esi
c000b2df:	c3                   	ret    

c000b2e0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b2e0:	57                   	push   edi
c000b2e1:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000b2e7:	56                   	push   esi
c000b2e8:	53                   	push   ebx
c000b2e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2f1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b2f8:	74 5b                	je     c000b355 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b2fa:	89 c7                	mov    edi,eax
c000b2fc:	84 c0                	test   al,al
c000b2fe:	74 24                	je     c000b324 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b300:	83 fe 0f             	cmp    esi,0xf
c000b303:	0f 8f d9 00 00 00    	jg     c000b3e2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000b309:	8a 86 e0 ed 01 c0    	mov    al,BYTE PTR [esi-0x3ffe1220]
c000b30f:	25 ff 00 00 00       	and    eax,0xff
c000b314:	66 8b bc 00 e0 1c 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffde320]
c000b31c:	89 c6                	mov    esi,eax
c000b31e:	66 d1 ef             	shr    di,1
c000b321:	83 e7 01             	and    edi,0x1
c000b324:	83 ec 08             	sub    esp,0x8
c000b327:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c000b32c:	31 db                	xor    ebx,ebx
c000b32e:	50                   	push   eax
c000b32f:	68 51 d5 01 c0       	push   0xc001d551
c000b334:	e8 eb e5 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c000b341:	85 c0                	test   eax,eax
c000b343:	7f 51                	jg     c000b396 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000b345:	83 ec 0c             	sub    esp,0xc
c000b348:	68 68 d5 01 c0       	push   0xc001d568
c000b34d:	e8 21 41 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000b352:	83 c4 10             	add    esp,0x10
c000b355:	8d 4e 20             	lea    ecx,[esi+0x20]
c000b358:	31 d2                	xor    edx,edx
c000b35a:	89 c8                	mov    eax,ecx
c000b35c:	c1 e0 04             	shl    eax,0x4
c000b35f:	8b 9c 90 40 05 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdfac0]
c000b366:	85 db                	test   ebx,ebx
c000b368:	0f 84 8b 00 00 00    	je     c000b3f9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000b36e:	42                   	inc    edx
c000b36f:	83 fa 04             	cmp    edx,0x4
c000b372:	75 eb                	jne    c000b35f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000b374:	83 ec 0c             	sub    esp,0xc
c000b377:	68 bc d5 01 c0       	push   0xc001d5bc
c000b37c:	e8 f2 40 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b389:	5b                   	pop    ebx
c000b38a:	5e                   	pop    esi
c000b38b:	5f                   	pop    edi
c000b38c:	c3                   	ret    
c000b38d:	43                   	inc    ebx
c000b38e:	39 1d 00 33 02 c0    	cmp    DWORD PTR ds:0xc0023300,ebx
c000b394:	7e af                	jle    c000b345 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000b396:	83 ec 08             	sub    esp,0x8
c000b399:	8b 04 9d 20 33 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcce0]
c000b3a0:	56                   	push   esi
c000b3a1:	50                   	push   eax
c000b3a2:	e8 95 f7 00 00       	call   c001ab3c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	84 c0                	test   al,al
c000b3ac:	74 df                	je     c000b38d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000b3ae:	81 e7 ff 00 00 00    	and    edi,0xff
c000b3b4:	50                   	push   eax
c000b3b5:	8d 46 20             	lea    eax,[esi+0x20]
c000b3b8:	57                   	push   edi
c000b3b9:	25 ff 00 00 00       	and    eax,0xff
c000b3be:	6a 00                	push   0x0
c000b3c0:	50                   	push   eax
c000b3c1:	89 f0                	mov    eax,esi
c000b3c3:	6a 00                	push   0x0
c000b3c5:	25 ff 00 00 00       	and    eax,0xff
c000b3ca:	6a 00                	push   0x0
c000b3cc:	50                   	push   eax
c000b3cd:	8b 04 9d 20 33 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcce0]
c000b3d4:	50                   	push   eax
c000b3d5:	e8 dc f8 00 00       	call   c001acb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000b3da:	83 c4 20             	add    esp,0x20
c000b3dd:	e9 73 ff ff ff       	jmp    c000b355 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	31 ff                	xor    edi,edi
c000b3e7:	68 84 d5 01 c0       	push   0xc001d584
c000b3ec:	e8 82 40 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000b3f1:	83 c4 10             	add    esp,0x10
c000b3f4:	e9 2b ff ff ff       	jmp    c000b324 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000b3f9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b3fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b400:	89 14 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],edx
c000b407:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b40b:	5b                   	pop    ebx
c000b40c:	89 14 85 40 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0ac0],edx
c000b413:	89 f0                	mov    eax,esi
c000b415:	5e                   	pop    esi
c000b416:	5f                   	pop    edi
c000b417:	c3                   	ret    

c000b418 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000b418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b41c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b420:	c1 e0 04             	shl    eax,0x4
c000b423:	8d 50 10             	lea    edx,[eax+0x10]
c000b426:	39 88 40 05 02 c0    	cmp    DWORD PTR [eax-0x3ffdfac0],ecx
c000b42c:	74 08                	je     c000b436 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000b42e:	83 c0 04             	add    eax,0x4
c000b431:	39 d0                	cmp    eax,edx
c000b433:	75 f1                	jne    c000b426 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000b435:	c3                   	ret    
c000b436:	c7 80 40 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfac0],0x0
c000b440:	c7 80 40 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ac0],0x0
c000b44a:	eb e2                	jmp    c000b42e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000b44c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b44c:	53                   	push   ebx
c000b44d:	83 ec 08             	sub    esp,0x8
c000b450:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b454:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000b459:	74 0e                	je     c000b469 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b45b:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000b460:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000b467:	75 37                	jne    c000b4a0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000b469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46d:	83 c0 20             	add    eax,0x20
c000b470:	c1 e0 04             	shl    eax,0x4
c000b473:	8d 50 10             	lea    edx,[eax+0x10]
c000b476:	39 98 40 05 02 c0    	cmp    DWORD PTR [eax-0x3ffdfac0],ebx
c000b47c:	74 0c                	je     c000b48a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000b47e:	83 c0 04             	add    eax,0x4
c000b481:	39 d0                	cmp    eax,edx
c000b483:	75 f1                	jne    c000b476 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000b485:	83 c4 08             	add    esp,0x8
c000b488:	5b                   	pop    ebx
c000b489:	c3                   	ret    
c000b48a:	c7 80 40 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfac0],0x0
c000b494:	c7 80 40 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ac0],0x0
c000b49e:	eb de                	jmp    c000b47e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000b4a0:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000b4a5:	7f 12                	jg     c000b4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000b4a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4ab:	31 c0                	xor    eax,eax
c000b4ad:	8a 81 e0 ed 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe1220]
c000b4b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4b7:	eb b0                	jmp    c000b469 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000b4b9:	83 ec 0c             	sub    esp,0xc
c000b4bc:	68 75 d5 01 c0       	push   0xc001d575
c000b4c1:	e8 ad 3f 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	eb 9e                	jmp    c000b469 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000b4cb <setupINTS()>:
c000b4cb:	31 c0                	xor    eax,eax
c000b4cd:	c7 80 40 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfac0],0x0
c000b4d7:	c7 80 40 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ac0],0x0
c000b4e1:	c7 80 44 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfabc],0x0
c000b4eb:	c7 80 44 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0abc],0x0
c000b4f5:	c7 80 48 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfab8],0x0
c000b4ff:	c7 80 48 f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ab8],0x0
c000b509:	c7 80 4c 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfab4],0x0
c000b513:	c7 80 4c f5 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0ab4],0x0
c000b51d:	83 c0 10             	add    eax,0x10
c000b520:	3d 00 10 00 00       	cmp    eax,0x1000
c000b525:	75 a6                	jne    c000b4cd <setupINTS()+0x2>
c000b527:	c3                   	ret    

c000b528 <convertLegacyIRQNumber(int)>:
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000b531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b535:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000b53c:	74 0f                	je     c000b54d <convertLegacyIRQNumber(int)+0x25>
c000b53e:	83 f8 0f             	cmp    eax,0xf
c000b541:	7f 0e                	jg     c000b551 <convertLegacyIRQNumber(int)+0x29>
c000b543:	31 c9                	xor    ecx,ecx
c000b545:	8a 88 e0 ed 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe1220]
c000b54b:	89 c8                	mov    eax,ecx
c000b54d:	83 c4 0c             	add    esp,0xc
c000b550:	c3                   	ret    
c000b551:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b555:	83 ec 0c             	sub    esp,0xc
c000b558:	68 84 d5 01 c0       	push   0xc001d584
c000b55d:	e8 11 3f 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b569:	83 c4 0c             	add    esp,0xc
c000b56c:	c3                   	ret    
c000b56d:	90                   	nop

c000b56e <startGUI(void*)>:
c000b56e:	55                   	push   ebp
c000b56f:	89 e5                	mov    ebp,esp
c000b571:	53                   	push   ebx
c000b572:	83 ec 04             	sub    esp,0x4
c000b575:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000b57a:	48                   	dec    eax
c000b57b:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000b580:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000b585:	85 c0                	test   eax,eax
c000b587:	75 01                	jne    c000b58a <startGUI(void*)+0x1c>
c000b589:	fb                   	sti    
c000b58a:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b590:	83 ec 08             	sub    esp,0x8
c000b593:	6a 01                	push   0x1
c000b595:	68 e1 d5 01 c0       	push   0xc001d5e1
c000b59a:	e8 54 69 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000b59f:	83 c4 10             	add    esp,0x10
c000b5a2:	83 ec 08             	sub    esp,0x8
c000b5a5:	53                   	push   ebx
c000b5a6:	50                   	push   eax
c000b5a7:	e8 78 6b 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000b5ac:	83 c4 10             	add    esp,0x10
c000b5af:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b5b5:	83 ec 08             	sub    esp,0x8
c000b5b8:	6a 01                	push   0x1
c000b5ba:	68 fb d5 01 c0       	push   0xc001d5fb
c000b5bf:	e8 2f 69 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000b5c4:	83 c4 10             	add    esp,0x10
c000b5c7:	83 ec 08             	sub    esp,0x8
c000b5ca:	53                   	push   ebx
c000b5cb:	50                   	push   eax
c000b5cc:	e8 53 6b 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	90                   	nop
c000b5d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b5d8:	c9                   	leave  
c000b5d9:	c3                   	ret    

c000b5da <startGUIVESA(void*)>:
c000b5da:	55                   	push   ebp
c000b5db:	89 e5                	mov    ebp,esp
c000b5dd:	53                   	push   ebx
c000b5de:	83 ec 04             	sub    esp,0x4
c000b5e1:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000b5e6:	48                   	dec    eax
c000b5e7:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000b5ec:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000b5f1:	85 c0                	test   eax,eax
c000b5f3:	75 01                	jne    c000b5f6 <startGUIVESA(void*)+0x1c>
c000b5f5:	fb                   	sti    
c000b5f6:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b5fc:	83 ec 08             	sub    esp,0x8
c000b5ff:	6a 01                	push   0x1
c000b601:	68 19 d6 01 c0       	push   0xc001d619
c000b606:	e8 e8 68 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000b60b:	83 c4 10             	add    esp,0x10
c000b60e:	83 ec 08             	sub    esp,0x8
c000b611:	53                   	push   ebx
c000b612:	50                   	push   eax
c000b613:	e8 0c 6b 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000b618:	83 c4 10             	add    esp,0x10
c000b61b:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000b621:	83 ec 08             	sub    esp,0x8
c000b624:	6a 01                	push   0x1
c000b626:	68 fb d5 01 c0       	push   0xc001d5fb
c000b62b:	e8 c3 68 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000b630:	83 c4 10             	add    esp,0x10
c000b633:	83 ec 08             	sub    esp,0x8
c000b636:	53                   	push   ebx
c000b637:	50                   	push   eax
c000b638:	e8 e7 6a 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000b63d:	83 c4 10             	add    esp,0x10
c000b640:	90                   	nop
c000b641:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000b644:	c9                   	leave  
c000b645:	c3                   	ret    

c000b646 <sendKeyToTerminal(unsigned char)>:
c000b646:	55                   	push   ebp
c000b647:	89 e5                	mov    ebp,esp
c000b649:	83 ec 28             	sub    esp,0x28
c000b64c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b64f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000b652:	8b 15 74 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f474
c000b658:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000b65b:	25 ff 00 00 00       	and    eax,0xff
c000b660:	83 ec 08             	sub    esp,0x8
c000b663:	50                   	push   eax
c000b664:	52                   	push   edx
c000b665:	e8 76 c8 ff ff       	call   c0007ee0 <VgaText::receiveKey(unsigned char)>
c000b66a:	83 c4 10             	add    esp,0x10
c000b66d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000b671:	0f 85 8f 00 00 00    	jne    c000b706 <sendKeyToTerminal(unsigned char)+0xc0>
c000b677:	fa                   	cli    
c000b678:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000b67d:	40                   	inc    eax
c000b67e:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000b683:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c000b688:	40                   	inc    eax
c000b689:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c000b68e:	a1 40 15 02 c0       	mov    eax,ds:0xc0021540
c000b693:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b696:	c7 05 40 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021540,0x0
c000b6a0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000b6a4:	74 1f                	je     c000b6c5 <sendKeyToTerminal(unsigned char)+0x7f>
c000b6a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b6a9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000b6ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000b6af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b6b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000b6b5:	83 ec 0c             	sub    esp,0xc
c000b6b8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b6bb:	e8 ec 76 00 00       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c000b6c0:	83 c4 10             	add    esp,0x10
c000b6c3:	eb db                	jmp    c000b6a0 <sendKeyToTerminal(unsigned char)+0x5a>
c000b6c5:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c000b6ca:	48                   	dec    eax
c000b6cb:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c000b6d0:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c000b6d5:	85 c0                	test   eax,eax
c000b6d7:	75 18                	jne    c000b6f1 <sendKeyToTerminal(unsigned char)+0xab>
c000b6d9:	a1 00 29 02 c0       	mov    eax,ds:0xc0022900
c000b6de:	85 c0                	test   eax,eax
c000b6e0:	74 0f                	je     c000b6f1 <sendKeyToTerminal(unsigned char)+0xab>
c000b6e2:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c000b6ec:	e8 f7 71 00 00       	call   c00128e8 <schedule()>
c000b6f1:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000b6f6:	48                   	dec    eax
c000b6f7:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000b6fc:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000b701:	85 c0                	test   eax,eax
c000b703:	75 01                	jne    c000b706 <sendKeyToTerminal(unsigned char)+0xc0>
c000b705:	fb                   	sti    
c000b706:	90                   	nop
c000b707:	c9                   	leave  
c000b708:	c3                   	ret    

c000b709 <sendKeyboardToken(KeyboardToken)>:
c000b709:	55                   	push   ebp
c000b70a:	89 e5                	mov    ebp,esp
c000b70c:	83 ec 18             	sub    esp,0x18
c000b70f:	e8 c8 3f 00 00       	call   c000f6dc <Krnl::userIOReceived()>
c000b714:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000b717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b71a:	25 ff ff 00 00       	and    eax,0xffff
c000b71f:	83 f2 01             	xor    edx,0x1
c000b722:	88 90 60 15 02 c0    	mov    BYTE PTR [eax-0x3ffdeaa0],dl
c000b728:	a1 48 15 02 c0       	mov    eax,ds:0xc0021548
c000b72d:	85 c0                	test   eax,eax
c000b72f:	74 24                	je     c000b755 <sendKeyboardToken(KeyboardToken)+0x4c>
c000b731:	8b 0d 48 15 02 c0    	mov    ecx,DWORD PTR ds:0xc0021548
c000b737:	83 ec 04             	sub    esp,0x4
c000b73a:	68 60 15 02 c0       	push   0xc0021560
c000b73f:	83 ec 08             	sub    esp,0x8
c000b742:	89 e2                	mov    edx,esp
c000b744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b747:	89 02                	mov    DWORD PTR [edx],eax
c000b749:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b74c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000b750:	ff d1                	call   ecx
c000b752:	83 c4 10             	add    esp,0x10
c000b755:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000b759:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000b75c:	a0 68 19 02 c0       	mov    al,ds:0xc0021968
c000b761:	38 c2                	cmp    dl,al
c000b763:	74 1e                	je     c000b783 <sendKeyboardToken(KeyboardToken)+0x7a>
c000b765:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000b768:	a2 68 19 02 c0       	mov    ds:0xc0021968,al
c000b76d:	a0 68 19 02 c0       	mov    al,ds:0xc0021968
c000b772:	25 ff 00 00 00       	and    eax,0xff
c000b777:	83 ec 0c             	sub    esp,0xc
c000b77a:	50                   	push   eax
c000b77b:	e8 b2 be ff ff       	call   c0007632 <setTerminalScrollLock(bool)>
c000b780:	83 c4 10             	add    esp,0x10
c000b783:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000b786:	84 c0                	test   al,al
c000b788:	0f 84 ae 00 00 00    	je     c000b83c <sendKeyboardToken(KeyboardToken)+0x133>
c000b78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b791:	66 3d 10 03          	cmp    ax,0x310
c000b795:	75 06                	jne    c000b79d <sendKeyboardToken(KeyboardToken)+0x94>
c000b797:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000b79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a0:	66 3d 11 03          	cmp    ax,0x311
c000b7a4:	75 06                	jne    c000b7ac <sendKeyboardToken(KeyboardToken)+0xa3>
c000b7a6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000b7ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7af:	66 3d 12 03          	cmp    ax,0x312
c000b7b3:	75 06                	jne    c000b7bb <sendKeyboardToken(KeyboardToken)+0xb2>
c000b7b5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000b7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7be:	66 3d 13 03          	cmp    ax,0x313
c000b7c2:	75 06                	jne    c000b7ca <sendKeyboardToken(KeyboardToken)+0xc1>
c000b7c4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000b7ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7cd:	66 3d 14 03          	cmp    ax,0x314
c000b7d1:	75 06                	jne    c000b7d9 <sendKeyboardToken(KeyboardToken)+0xd0>
c000b7d3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000b7d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7dc:	66 3d 15 03          	cmp    ax,0x315
c000b7e0:	75 06                	jne    c000b7e8 <sendKeyboardToken(KeyboardToken)+0xdf>
c000b7e2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b7e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7eb:	66 3d 16 03          	cmp    ax,0x316
c000b7ef:	75 06                	jne    c000b7f7 <sendKeyboardToken(KeyboardToken)+0xee>
c000b7f1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000b7f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7fa:	66 3d 17 03          	cmp    ax,0x317
c000b7fe:	75 06                	jne    c000b806 <sendKeyboardToken(KeyboardToken)+0xfd>
c000b800:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000b806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b809:	66 3d 18 03          	cmp    ax,0x318
c000b80d:	75 06                	jne    c000b815 <sendKeyboardToken(KeyboardToken)+0x10c>
c000b80f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000b815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b818:	66 3d 19 03          	cmp    ax,0x319
c000b81c:	75 06                	jne    c000b824 <sendKeyboardToken(KeyboardToken)+0x11b>
c000b81e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000b824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b827:	66 3d 1a 03          	cmp    ax,0x31a
c000b82b:	0f 85 c9 00 00 00    	jne    c000b8fa <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b831:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000b837:	e9 be 00 00 00       	jmp    c000b8fa <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b83f:	66 3d 10 03          	cmp    ax,0x310
c000b843:	75 0a                	jne    c000b84f <sendKeyboardToken(KeyboardToken)+0x146>
c000b845:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000b84b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b84f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b852:	66 3d 11 03          	cmp    ax,0x311
c000b856:	75 0a                	jne    c000b862 <sendKeyboardToken(KeyboardToken)+0x159>
c000b858:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000b85e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b865:	66 3d 12 03          	cmp    ax,0x312
c000b869:	75 0a                	jne    c000b875 <sendKeyboardToken(KeyboardToken)+0x16c>
c000b86b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000b871:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b878:	66 3d 13 03          	cmp    ax,0x313
c000b87c:	75 0a                	jne    c000b888 <sendKeyboardToken(KeyboardToken)+0x17f>
c000b87e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000b884:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b88b:	66 3d 14 03          	cmp    ax,0x314
c000b88f:	75 0a                	jne    c000b89b <sendKeyboardToken(KeyboardToken)+0x192>
c000b891:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000b897:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b89b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b89e:	66 3d 15 03          	cmp    ax,0x315
c000b8a2:	75 0a                	jne    c000b8ae <sendKeyboardToken(KeyboardToken)+0x1a5>
c000b8a4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000b8aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8b1:	66 3d 16 03          	cmp    ax,0x316
c000b8b5:	75 0a                	jne    c000b8c1 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000b8b7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000b8bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8c4:	66 3d 17 03          	cmp    ax,0x317
c000b8c8:	75 0a                	jne    c000b8d4 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000b8ca:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000b8d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8d7:	66 3d 18 03          	cmp    ax,0x318
c000b8db:	75 0a                	jne    c000b8e7 <sendKeyboardToken(KeyboardToken)+0x1de>
c000b8dd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000b8e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8ea:	66 3d 19 03          	cmp    ax,0x319
c000b8ee:	75 0a                	jne    c000b8fa <sendKeyboardToken(KeyboardToken)+0x1f1>
c000b8f0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000b8f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000b8fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b8fd:	66 3d 00 02          	cmp    ax,0x200
c000b901:	75 2c                	jne    c000b92f <sendKeyboardToken(KeyboardToken)+0x226>
c000b903:	a0 60 19 02 c0       	mov    al,ds:0xc0021960
c000b908:	83 f0 01             	xor    eax,0x1
c000b90b:	84 c0                	test   al,al
c000b90d:	74 20                	je     c000b92f <sendKeyboardToken(KeyboardToken)+0x226>
c000b90f:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c000b914:	6a 01                	push   0x1
c000b916:	6a 00                	push   0x0
c000b918:	68 6e b5 00 c0       	push   0xc000b56e
c000b91d:	50                   	push   eax
c000b91e:	e8 a5 6d 00 00       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c000b923:	83 c4 10             	add    esp,0x10
c000b926:	c6 05 60 19 02 c0 01 	mov    BYTE PTR ds:0xc0021960,0x1
c000b92d:	eb 33                	jmp    c000b962 <sendKeyboardToken(KeyboardToken)+0x259>
c000b92f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b932:	66 3d 01 02          	cmp    ax,0x201
c000b936:	75 2a                	jne    c000b962 <sendKeyboardToken(KeyboardToken)+0x259>
c000b938:	a0 60 19 02 c0       	mov    al,ds:0xc0021960
c000b93d:	83 f0 01             	xor    eax,0x1
c000b940:	84 c0                	test   al,al
c000b942:	74 1e                	je     c000b962 <sendKeyboardToken(KeyboardToken)+0x259>
c000b944:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c000b949:	6a 01                	push   0x1
c000b94b:	6a 00                	push   0x0
c000b94d:	68 da b5 00 c0       	push   0xc000b5da
c000b952:	50                   	push   eax
c000b953:	e8 70 6d 00 00       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c000b958:	83 c4 10             	add    esp,0x10
c000b95b:	c6 05 60 19 02 c0 01 	mov    BYTE PTR ds:0xc0021960,0x1
c000b962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b965:	66 3d 1d 03          	cmp    ax,0x31d
c000b969:	75 06                	jne    c000b971 <sendKeyboardToken(KeyboardToken)+0x268>
c000b96b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000b971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b974:	66 3d 1c 03          	cmp    ax,0x31c
c000b978:	75 06                	jne    c000b980 <sendKeyboardToken(KeyboardToken)+0x277>
c000b97a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000b980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b983:	66 3d 1b 03          	cmp    ax,0x31b
c000b987:	75 06                	jne    c000b98f <sendKeyboardToken(KeyboardToken)+0x286>
c000b989:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000b98f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b992:	66 3d 1e 03          	cmp    ax,0x31e
c000b996:	75 06                	jne    c000b99e <sendKeyboardToken(KeyboardToken)+0x295>
c000b998:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000b99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9a1:	66 3d 1f 03          	cmp    ax,0x31f
c000b9a5:	75 06                	jne    c000b9ad <sendKeyboardToken(KeyboardToken)+0x2a4>
c000b9a7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000b9ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9b0:	66 3d 1a 03          	cmp    ax,0x31a
c000b9b4:	75 06                	jne    c000b9bc <sendKeyboardToken(KeyboardToken)+0x2b3>
c000b9b6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000b9bc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000b9c0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000b9c3:	83 f0 01             	xor    eax,0x1
c000b9c6:	84 c0                	test   al,al
c000b9c8:	74 7b                	je     c000ba45 <sendKeyboardToken(KeyboardToken)+0x33c>
c000b9ca:	a0 61 16 02 c0       	mov    al,ds:0xc0021661
c000b9cf:	84 c0                	test   al,al
c000b9d1:	74 43                	je     c000ba16 <sendKeyboardToken(KeyboardToken)+0x30d>
c000b9d3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000b9d7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000b9db:	74 2d                	je     c000ba0a <sendKeyboardToken(KeyboardToken)+0x301>
c000b9dd:	8b 15 64 19 02 c0    	mov    edx,DWORD PTR ds:0xc0021964
c000b9e3:	89 d0                	mov    eax,edx
c000b9e5:	c1 e0 02             	shl    eax,0x2
c000b9e8:	01 d0                	add    eax,edx
c000b9ea:	01 c0                	add    eax,eax
c000b9ec:	a3 64 19 02 c0       	mov    ds:0xc0021964,eax
c000b9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b9f4:	25 ff ff 00 00       	and    eax,0xffff
c000b9f9:	8d 50 d0             	lea    edx,[eax-0x30]
c000b9fc:	a1 64 19 02 c0       	mov    eax,ds:0xc0021964
c000ba01:	01 d0                	add    eax,edx
c000ba03:	a3 64 19 02 c0       	mov    ds:0xc0021964,eax
c000ba08:	eb 71                	jmp    c000ba7b <sendKeyboardToken(KeyboardToken)+0x372>
c000ba0a:	c7 05 64 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021964,0x0
c000ba14:	eb 65                	jmp    c000ba7b <sendKeyboardToken(KeyboardToken)+0x372>
c000ba16:	a1 64 19 02 c0       	mov    eax,ds:0xc0021964
c000ba1b:	85 c0                	test   eax,eax
c000ba1d:	74 1a                	je     c000ba39 <sendKeyboardToken(KeyboardToken)+0x330>
c000ba1f:	a1 64 19 02 c0       	mov    eax,ds:0xc0021964
c000ba24:	25 ff 00 00 00       	and    eax,0xff
c000ba29:	83 ec 0c             	sub    esp,0xc
c000ba2c:	50                   	push   eax
c000ba2d:	e8 14 fc ff ff       	call   c000b646 <sendKeyToTerminal(unsigned char)>
c000ba32:	83 c4 10             	add    esp,0x10
c000ba35:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ba39:	c7 05 64 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021964,0x0
c000ba43:	eb 36                	jmp    c000ba7b <sendKeyboardToken(KeyboardToken)+0x372>
c000ba45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba48:	66 3d 01 01          	cmp    ax,0x101
c000ba4c:	75 2d                	jne    c000ba7b <sendKeyboardToken(KeyboardToken)+0x372>
c000ba4e:	a1 64 19 02 c0       	mov    eax,ds:0xc0021964
c000ba53:	85 c0                	test   eax,eax
c000ba55:	74 1a                	je     c000ba71 <sendKeyboardToken(KeyboardToken)+0x368>
c000ba57:	a1 64 19 02 c0       	mov    eax,ds:0xc0021964
c000ba5c:	25 ff 00 00 00       	and    eax,0xff
c000ba61:	83 ec 0c             	sub    esp,0xc
c000ba64:	50                   	push   eax
c000ba65:	e8 dc fb ff ff       	call   c000b646 <sendKeyToTerminal(unsigned char)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ba71:	c7 05 64 19 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021964,0x0
c000ba7b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ba7e:	83 f0 01             	xor    eax,0x1
c000ba81:	84 c0                	test   al,al
c000ba83:	74 4e                	je     c000bad3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ba88:	83 f0 01             	xor    eax,0x1
c000ba8b:	84 c0                	test   al,al
c000ba8d:	74 44                	je     c000bad3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba8f:	a0 60 16 02 c0       	mov    al,ds:0xc0021660
c000ba94:	83 f0 01             	xor    eax,0x1
c000ba97:	84 c0                	test   al,al
c000ba99:	74 38                	je     c000bad3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ba9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ba9e:	66 83 f8 1f          	cmp    ax,0x1f
c000baa2:	76 09                	jbe    c000baad <sendKeyboardToken(KeyboardToken)+0x3a4>
c000baa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000baa7:	66 83 f8 7e          	cmp    ax,0x7e
c000baab:	76 12                	jbe    c000babf <sendKeyboardToken(KeyboardToken)+0x3b6>
c000baad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bab0:	66 83 f8 0a          	cmp    ax,0xa
c000bab4:	74 09                	je     c000babf <sendKeyboardToken(KeyboardToken)+0x3b6>
c000bab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bab9:	66 83 f8 08          	cmp    ax,0x8
c000babd:	75 14                	jne    c000bad3 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000babf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bac2:	25 ff 00 00 00       	and    eax,0xff
c000bac7:	83 ec 0c             	sub    esp,0xc
c000baca:	50                   	push   eax
c000bacb:	e8 76 fb ff ff       	call   c000b646 <sendKeyToTerminal(unsigned char)>
c000bad0:	83 c4 10             	add    esp,0x10
c000bad3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000bad6:	83 f0 01             	xor    eax,0x1
c000bad9:	84 c0                	test   al,al
c000badb:	74 51                	je     c000bb2e <sendKeyboardToken(KeyboardToken)+0x425>
c000badd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bae0:	83 f0 01             	xor    eax,0x1
c000bae3:	84 c0                	test   al,al
c000bae5:	74 47                	je     c000bb2e <sendKeyboardToken(KeyboardToken)+0x425>
c000bae7:	a0 60 16 02 c0       	mov    al,ds:0xc0021660
c000baec:	84 c0                	test   al,al
c000baee:	74 3e                	je     c000bb2e <sendKeyboardToken(KeyboardToken)+0x425>
c000baf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000baf3:	66 83 f8 3f          	cmp    ax,0x3f
c000baf7:	76 35                	jbe    c000bb2e <sendKeyboardToken(KeyboardToken)+0x425>
c000baf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bafc:	66 83 f8 7f          	cmp    ax,0x7f
c000bb00:	77 2c                	ja     c000bb2e <sendKeyboardToken(KeyboardToken)+0x425>
c000bb02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb05:	88 c2                	mov    dl,al
c000bb07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb0a:	66 83 f8 5f          	cmp    ax,0x5f
c000bb0e:	76 04                	jbe    c000bb14 <sendKeyboardToken(KeyboardToken)+0x40b>
c000bb10:	b0 20                	mov    al,0x20
c000bb12:	eb 02                	jmp    c000bb16 <sendKeyboardToken(KeyboardToken)+0x40d>
c000bb14:	b0 00                	mov    al,0x0
c000bb16:	29 c2                	sub    edx,eax
c000bb18:	88 d0                	mov    al,dl
c000bb1a:	83 e8 40             	sub    eax,0x40
c000bb1d:	25 ff 00 00 00       	and    eax,0xff
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	50                   	push   eax
c000bb26:	e8 1b fb ff ff       	call   c000b646 <sendKeyToTerminal(unsigned char)>
c000bb2b:	83 c4 10             	add    esp,0x10
c000bb2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb31:	66 3d 00 03          	cmp    ax,0x300
c000bb35:	75 0f                	jne    c000bb46 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bb37:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000bb3a:	83 f0 01             	xor    eax,0x1
c000bb3d:	84 c0                	test   al,al
c000bb3f:	74 05                	je     c000bb46 <sendKeyboardToken(KeyboardToken)+0x43d>
c000bb41:	e8 ed ba ff ff       	call   c0007633 <doTerminalCycle()>
c000bb46:	90                   	nop
c000bb47:	c9                   	leave  
c000bb48:	c3                   	ret    

c000bb49 <clearInternalKeybuffer(VgaText*)>:
c000bb49:	55                   	push   ebp
c000bb4a:	89 e5                	mov    ebp,esp
c000bb4c:	83 ec 08             	sub    esp,0x8
c000bb4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bb52:	05 b2 00 00 00       	add    eax,0xb2
c000bb57:	83 ec 0c             	sub    esp,0xc
c000bb5a:	50                   	push   eax
c000bb5b:	e8 00 4a ff ff       	call   c0000560 <strlen>
c000bb60:	83 c4 10             	add    esp,0x10
c000bb63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bb66:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bb6c:	83 ec 04             	sub    esp,0x4
c000bb6f:	50                   	push   eax
c000bb70:	6a 00                	push   0x0
c000bb72:	52                   	push   edx
c000bb73:	e8 78 49 ff ff       	call   c00004f0 <memset>
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	90                   	nop
c000bb7c:	c9                   	leave  
c000bb7d:	c3                   	ret    

c000bb7e <readKeyboard(VgaText*, char*, unsigned long)>:
c000bb7e:	55                   	push   ebp
c000bb7f:	89 e5                	mov    ebp,esp
c000bb81:	83 ec 18             	sub    esp,0x18
c000bb84:	a1 48 15 02 c0       	mov    eax,ds:0xc0021548
c000bb89:	85 c0                	test   eax,eax
c000bb8b:	74 2a                	je     c000bbb7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000bb8d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000bb93:	8b 0d 48 15 02 c0    	mov    ecx,DWORD PTR ds:0xc0021548
c000bb99:	83 ec 04             	sub    esp,0x4
c000bb9c:	68 60 15 02 c0       	push   0xc0021560
c000bba1:	83 ec 08             	sub    esp,0x8
c000bba4:	89 e2                	mov    edx,esp
c000bba6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000bba9:	89 02                	mov    DWORD PTR [edx],eax
c000bbab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000bbae:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000bbb2:	ff d1                	call   ecx
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	fb                   	sti    
c000bbb8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000bbbf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000bbc3:	0f 84 a1 00 00 00    	je     c000bc6a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000bbc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bbcc:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bbd2:	84 c0                	test   al,al
c000bbd4:	75 28                	jne    c000bbfe <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000bbd6:	fa                   	cli    
c000bbd7:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000bbdc:	40                   	inc    eax
c000bbdd:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000bbe2:	e8 01 6d 00 00       	call   c00128e8 <schedule()>
c000bbe7:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000bbec:	48                   	dec    eax
c000bbed:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000bbf2:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000bbf7:	85 c0                	test   eax,eax
c000bbf9:	75 ce                	jne    c000bbc9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bbfb:	fb                   	sti    
c000bbfc:	eb cb                	jmp    c000bbc9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000bbfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bc01:	8d 50 01             	lea    edx,[eax+0x1]
c000bc04:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000bc07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc0a:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000bc10:	88 10                	mov    BYTE PTR [eax],dl
c000bc12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc15:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000bc1b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000bc1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bc21:	05 b2 00 00 00       	add    eax,0xb2
c000bc26:	83 ec 0c             	sub    esp,0xc
c000bc29:	50                   	push   eax
c000bc2a:	e8 31 49 ff ff       	call   c0000560 <strlen>
c000bc2f:	83 c4 10             	add    esp,0x10
c000bc32:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc35:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc3b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bc3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000bc41:	81 c2 b2 00 00 00    	add    edx,0xb2
c000bc47:	83 ec 04             	sub    esp,0x4
c000bc4a:	50                   	push   eax
c000bc4b:	51                   	push   ecx
c000bc4c:	52                   	push   edx
c000bc4d:	e8 ae 47 ff ff       	call   c0000400 <memmove>
c000bc52:	83 c4 10             	add    esp,0x10
c000bc55:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000bc58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000bc5b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000bc5f:	0f 85 5a ff ff ff    	jne    c000bbbf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000bc65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bc68:	eb 03                	jmp    c000bc6d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000bc6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000bc6d:	c9                   	leave  
c000bc6e:	c3                   	ret    
c000bc6f:	90                   	nop

c000bc70 <Keyboard::Keyboard(char const*)>:
c000bc70:	83 ec 0c             	sub    esp,0xc
c000bc73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc77:	83 ec 08             	sub    esp,0x8
c000bc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc7e:	50                   	push   eax
c000bc7f:	e8 78 f2 ff ff       	call   c000aefc <Device::Device(char const*)>
c000bc84:	83 c4 10             	add    esp,0x10
c000bc87:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c000bc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc90:	89 10                	mov    DWORD PTR [eax],edx
c000bc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc96:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000bca0:	c6 05 44 15 02 c0 01 	mov    BYTE PTR ds:0xc0021544,0x1
c000bca7:	90                   	nop
c000bca8:	83 c4 0c             	add    esp,0xc
c000bcab:	c3                   	ret    

c000bcac <Keyboard::~Keyboard()>:
c000bcac:	83 ec 0c             	sub    esp,0xc
c000bcaf:	ba 3c d6 01 c0       	mov    edx,0xc001d63c
c000bcb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb8:	89 10                	mov    DWORD PTR [eax],edx
c000bcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbe:	83 ec 0c             	sub    esp,0xc
c000bcc1:	50                   	push   eax
c000bcc2:	e8 9f ef ff ff       	call   c000ac66 <Device::~Device()>
c000bcc7:	83 c4 10             	add    esp,0x10
c000bcca:	90                   	nop
c000bccb:	83 c4 0c             	add    esp,0xc
c000bcce:	c3                   	ret    
c000bccf:	90                   	nop

c000bcd0 <Keyboard::~Keyboard()>:
c000bcd0:	83 ec 0c             	sub    esp,0xc
c000bcd3:	83 ec 0c             	sub    esp,0xc
c000bcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcda:	e8 cd ff ff ff       	call   c000bcac <Keyboard::~Keyboard()>
c000bcdf:	83 c4 10             	add    esp,0x10
c000bce2:	83 ec 08             	sub    esp,0x8
c000bce5:	68 5c 01 00 00       	push   0x15c
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 3b db ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	83 c4 0c             	add    esp,0xc
c000bcf9:	c3                   	ret    

c000bcfa <LogicalDisk::close(int, int, void*)>:
c000bcfa:	83 c8 ff             	or     eax,0xffffffff
c000bcfd:	c3                   	ret    

c000bcfe <LogicalDisk::~LogicalDisk()>:
c000bcfe:	83 ec 0c             	sub    esp,0xc
c000bd01:	ba b4 d6 01 c0       	mov    edx,0xc001d6b4
c000bd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0a:	89 10                	mov    DWORD PTR [eax],edx
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	83 ec 0c             	sub    esp,0xc
c000bd13:	50                   	push   eax
c000bd14:	e8 4d ef ff ff       	call   c000ac66 <Device::~Device()>
c000bd19:	83 c4 10             	add    esp,0x10
c000bd1c:	90                   	nop
c000bd1d:	83 c4 0c             	add    esp,0xc
c000bd20:	c3                   	ret    
c000bd21:	90                   	nop

c000bd22 <LogicalDisk::~LogicalDisk()>:
c000bd22:	83 ec 0c             	sub    esp,0xc
c000bd25:	83 ec 0c             	sub    esp,0xc
c000bd28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2c:	e8 cd ff ff ff       	call   c000bcfe <LogicalDisk::~LogicalDisk()>
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	83 ec 08             	sub    esp,0x8
c000bd37:	68 74 01 00 00       	push   0x174
c000bd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd40:	e8 e9 da ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000bd45:	83 c4 10             	add    esp,0x10
c000bd48:	83 c4 0c             	add    esp,0xc
c000bd4b:	c3                   	ret    

c000bd4c <LogicalDisk::open(int, int, void*)>:
c000bd4c:	83 ec 18             	sub    esp,0x18
c000bd4f:	68 68 d6 01 c0       	push   0xc001d668
c000bd54:	e8 1a 37 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000bd59:	83 c8 ff             	or     eax,0xffffffff
c000bd5c:	83 c4 1c             	add    esp,0x1c
c000bd5f:	c3                   	ret    

c000bd60 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000bd60:	53                   	push   ebx
c000bd61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd6d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000bd73:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000bd79:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000bd7f:	77 10                	ja     c000bd91 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000bd81:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000bd87:	89 d3                	mov    ebx,edx
c000bd89:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000bd8f:	72 05                	jb     c000bd96 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000bd91:	83 c8 ff             	or     eax,0xffffffff
c000bd94:	89 c2                	mov    edx,eax
c000bd96:	5b                   	pop    ebx
c000bd97:	c3                   	ret    

c000bd98 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000bd98:	56                   	push   esi
c000bd99:	83 c8 ff             	or     eax,0xffffffff
c000bd9c:	53                   	push   ebx
c000bd9d:	89 c2                	mov    edx,eax
c000bd9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bda3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bda7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000bdb1:	77 27                	ja     c000bdda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bdb3:	89 d8                	mov    eax,ebx
c000bdb5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000bdbb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000bdc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bdc6:	89 c2                	mov    edx,eax
c000bdc8:	73 10                	jae    c000bdda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000bdca:	89 c8                	mov    eax,ecx
c000bdcc:	89 da                	mov    edx,ebx
c000bdce:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000bdd4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000bdda:	5b                   	pop    ebx
c000bddb:	5e                   	pop    esi
c000bddc:	c3                   	ret    
c000bddd:	90                   	nop

c000bdde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000bdde:	83 ec 1c             	sub    esp,0x1c
c000bde1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bde5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bde9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bdf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bdfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be04:	83 ec 08             	sub    esp,0x8
c000be07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be0b:	50                   	push   eax
c000be0c:	e8 eb f0 ff ff       	call   c000aefc <Device::Device(char const*)>
c000be11:	83 c4 10             	add    esp,0x10
c000be14:	ba b4 d6 01 c0       	mov    edx,0xc001d6b4
c000be19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1d:	89 10                	mov    DWORD PTR [eax],edx
c000be1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be23:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be2e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be39:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000be43:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be4f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000be55:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000be5b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000be62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000be66:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000be6c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000be72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be76:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000be7a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000be80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be84:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000be8e:	90                   	nop
c000be8f:	83 c4 1c             	add    esp,0x1c
c000be92:	c3                   	ret    
c000be93:	90                   	nop

c000be94 <LogicalDisk::assignDriveLetter()>:
c000be94:	55                   	push   ebp
c000be95:	57                   	push   edi
c000be96:	56                   	push   esi
c000be97:	53                   	push   ebx
c000be98:	83 ec 14             	sub    esp,0x14
c000be9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be9f:	8b 3d 80 19 02 c0    	mov    edi,DWORD PTR ds:0xc0021980
c000bea5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000beab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000beaf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000beb5:	8b 3d 84 19 02 c0    	mov    edi,DWORD PTR ds:0xc0021984
c000bebb:	3c 01                	cmp    al,0x1
c000bebd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000bec1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bec5:	19 c0                	sbb    eax,eax
c000bec7:	83 e0 02             	and    eax,0x2
c000beca:	83 c0 41             	add    eax,0x41
c000becd:	0f be e8             	movsx  ebp,al
c000bed0:	3c 43                	cmp    al,0x43
c000bed2:	75 10                	jne    c000bee4 <LogicalDisk::assignDriveLetter()+0x50>
c000bed4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000bedb:	75 5d                	jne    c000bf3a <LogicalDisk::assignDriveLetter()+0xa6>
c000bedd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000bee2:	75 56                	jne    c000bf3a <LogicalDisk::assignDriveLetter()+0xa6>
c000bee4:	8d 75 bf             	lea    esi,[ebp-0x41]
c000bee7:	ba 01 00 00 00       	mov    edx,0x1
c000beec:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000bef0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000bef4:	d3 e2                	shl    edx,cl
c000bef6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000befa:	89 d7                	mov    edi,edx
c000befc:	89 d6                	mov    esi,edx
c000befe:	c1 ff 1f             	sar    edi,0x1f
c000bf01:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000bf05:	21 f9                	and    ecx,edi
c000bf07:	09 d1                	or     ecx,edx
c000bf09:	75 2f                	jne    c000bf3a <LogicalDisk::assignDriveLetter()+0xa6>
c000bf0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000bf0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf13:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000bf19:	09 f2                	or     edx,esi
c000bf1b:	89 15 80 19 02 c0    	mov    DWORD PTR ds:0xc0021980,edx
c000bf21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf25:	09 fa                	or     edx,edi
c000bf27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000bf2b:	89 15 84 19 02 c0    	mov    DWORD PTR ds:0xc0021984,edx
c000bf31:	89 1c bd a0 19 02 c0 	mov    DWORD PTR [edi*4-0x3ffde660],ebx
c000bf38:	eb 08                	jmp    c000bf42 <LogicalDisk::assignDriveLetter()+0xae>
c000bf3a:	45                   	inc    ebp
c000bf3b:	40                   	inc    eax
c000bf3c:	3c 5b                	cmp    al,0x5b
c000bf3e:	75 90                	jne    c000bed0 <LogicalDisk::assignDriveLetter()+0x3c>
c000bf40:	31 c0                	xor    eax,eax
c000bf42:	83 c4 14             	add    esp,0x14
c000bf45:	5b                   	pop    ebx
c000bf46:	5e                   	pop    esi
c000bf47:	5f                   	pop    edi
c000bf48:	5d                   	pop    ebp
c000bf49:	c3                   	ret    

c000bf4a <LogicalDisk::mount()>:
c000bf4a:	56                   	push   esi
c000bf4b:	53                   	push   ebx
c000bf4c:	53                   	push   ebx
c000bf4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf51:	8b 1d 18 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f518
c000bf57:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000bf61:	85 db                	test   ebx,ebx
c000bf63:	74 27                	je     c000bf8c <LogicalDisk::mount()+0x42>
c000bf65:	51                   	push   ecx
c000bf66:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000bf6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf6f:	83 e8 41             	sub    eax,0x41
c000bf72:	50                   	push   eax
c000bf73:	56                   	push   esi
c000bf74:	53                   	push   ebx
c000bf75:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	84 c0                	test   al,al
c000bf7d:	74 08                	je     c000bf87 <LogicalDisk::mount()+0x3d>
c000bf7f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000bf85:	eb 07                	jmp    c000bf8e <LogicalDisk::mount()+0x44>
c000bf87:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000bf8a:	eb d5                	jmp    c000bf61 <LogicalDisk::mount()+0x17>
c000bf8c:	31 c0                	xor    eax,eax
c000bf8e:	5a                   	pop    edx
c000bf8f:	5b                   	pop    ebx
c000bf90:	5e                   	pop    esi
c000bf91:	c3                   	ret    

c000bf92 <LogicalDisk::unmount()>:
c000bf92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf96:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000bfa0:	c3                   	ret    
c000bfa1:	90                   	nop

c000bfa2 <LogicalDisk::eject()>:
c000bfa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfa6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000bfac:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfb2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000bfb5:	90                   	nop

c000bfb6 <LogicalDisk::unassignDriveLetter()>:
c000bfb6:	57                   	push   edi
c000bfb7:	56                   	push   esi
c000bfb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bfbc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000bfc3:	84 c9                	test   cl,cl
c000bfc5:	75 0f                	jne    c000bfd6 <LogicalDisk::unassignDriveLetter()+0x20>
c000bfc7:	c7 44 24 0c 8c d6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d68c
c000bfcf:	5e                   	pop    esi
c000bfd0:	5f                   	pop    edi
c000bfd1:	e9 9d 34 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c000bfd6:	83 e9 41             	sub    ecx,0x41
c000bfd9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000bfe0:	b8 01 00 00 00       	mov    eax,0x1
c000bfe5:	c7 04 8d a0 19 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffde660],0x0
c000bff0:	d3 e0                	shl    eax,cl
c000bff2:	89 c7                	mov    edi,eax
c000bff4:	f7 d0                	not    eax
c000bff6:	c1 ff 1f             	sar    edi,0x1f
c000bff9:	21 05 80 19 02 c0    	and    DWORD PTR ds:0xc0021980,eax
c000bfff:	89 fe                	mov    esi,edi
c000c001:	f7 d6                	not    esi
c000c003:	21 35 84 19 02 c0    	and    DWORD PTR ds:0xc0021984,esi
c000c009:	5e                   	pop    esi
c000c00a:	5f                   	pop    edi
c000c00b:	c3                   	ret    

c000c00c <LogicalDisk::read(unsigned long long, int, void*)>:
c000c00c:	57                   	push   edi
c000c00d:	56                   	push   esi
c000c00e:	53                   	push   ebx
c000c00f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c013:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c017:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c01b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c01f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c025:	77 41                	ja     c000c068 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000c027:	99                   	cdq    
c000c028:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c02e:	01 c8                	add    eax,ecx
c000c030:	11 da                	adc    edx,ebx
c000c032:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c038:	19 d7                	sbb    edi,edx
c000c03a:	72 33                	jb     c000c06f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000c03c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c042:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c048:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c04c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c050:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c056:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c05c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c060:	5b                   	pop    ebx
c000c061:	5e                   	pop    esi
c000c062:	5f                   	pop    edi
c000c063:	e9 32 0a 00 00       	jmp    c000ca9a <VCache::read(unsigned long long, int, void*)>
c000c068:	b8 05 00 00 00       	mov    eax,0x5
c000c06d:	eb 05                	jmp    c000c074 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000c06f:	b8 07 00 00 00       	mov    eax,0x7
c000c074:	5b                   	pop    ebx
c000c075:	5e                   	pop    esi
c000c076:	5f                   	pop    edi
c000c077:	c3                   	ret    

c000c078 <LogicalDisk::write(unsigned long long, int, void*)>:
c000c078:	57                   	push   edi
c000c079:	56                   	push   esi
c000c07a:	53                   	push   ebx
c000c07b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c07f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c083:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c087:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c08b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c091:	77 41                	ja     c000c0d4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000c093:	99                   	cdq    
c000c094:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000c09a:	01 c8                	add    eax,ecx
c000c09c:	11 da                	adc    edx,ebx
c000c09e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000c0a4:	19 d7                	sbb    edi,edx
c000c0a6:	72 33                	jb     c000c0db <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000c0a8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000c0ae:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000c0b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c0b8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c0bc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000c0c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c0c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0cc:	5b                   	pop    ebx
c000c0cd:	5e                   	pop    esi
c000c0ce:	5f                   	pop    edi
c000c0cf:	e9 cc 08 00 00       	jmp    c000c9a0 <VCache::write(unsigned long long, int, void*)>
c000c0d4:	b8 05 00 00 00       	mov    eax,0x5
c000c0d9:	eb 05                	jmp    c000c0e0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000c0db:	b8 07 00 00 00       	mov    eax,0x7
c000c0e0:	5b                   	pop    ebx
c000c0e1:	5e                   	pop    esi
c000c0e2:	5f                   	pop    edi
c000c0e3:	c3                   	ret    

c000c0e4 <Mouse::Mouse(char const*)>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0eb:	83 ec 08             	sub    esp,0x8
c000c0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f2:	50                   	push   eax
c000c0f3:	e8 04 ee ff ff       	call   c000aefc <Device::Device(char const*)>
c000c0f8:	83 c4 10             	add    esp,0x10
c000c0fb:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c000c100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c104:	89 10                	mov    DWORD PTR [eax],edx
c000c106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000c114:	90                   	nop
c000c115:	83 c4 0c             	add    esp,0xc
c000c118:	c3                   	ret    
c000c119:	90                   	nop
c000c11a:	66 90                	xchg   ax,ax

c000c11c <Mouse::~Mouse()>:
c000c11c:	83 ec 0c             	sub    esp,0xc
c000c11f:	ba e0 d6 01 c0       	mov    edx,0xc001d6e0
c000c124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c128:	89 10                	mov    DWORD PTR [eax],edx
c000c12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12e:	83 ec 0c             	sub    esp,0xc
c000c131:	50                   	push   eax
c000c132:	e8 2f eb ff ff       	call   c000ac66 <Device::~Device()>
c000c137:	83 c4 10             	add    esp,0x10
c000c13a:	90                   	nop
c000c13b:	83 c4 0c             	add    esp,0xc
c000c13e:	c3                   	ret    
c000c13f:	90                   	nop

c000c140 <Mouse::~Mouse()>:
c000c140:	83 ec 0c             	sub    esp,0xc
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	e8 cd ff ff ff       	call   c000c11c <Mouse::~Mouse()>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	83 ec 08             	sub    esp,0x8
c000c155:	68 58 01 00 00       	push   0x158
c000c15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15e:	e8 cb d6 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	83 c4 0c             	add    esp,0xc
c000c169:	c3                   	ret    

c000c16a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c16a:	55                   	push   ebp
c000c16b:	57                   	push   edi
c000c16c:	56                   	push   esi
c000c16d:	53                   	push   ebx
c000c16e:	81 ec 28 01 00 00    	sub    esp,0x128
c000c174:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000c17b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000c182:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000c189:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000c190:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c194:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c198:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c19f:	e8 54 ee ff ff       	call   c000aff8 <Device::getName()>
c000c1a4:	5a                   	pop    edx
c000c1a5:	59                   	pop    ecx
c000c1a6:	50                   	push   eax
c000c1a7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000c1ab:	55                   	push   ebp
c000c1ac:	e8 6f 44 ff ff       	call   c0000620 <strcpy>
c000c1b1:	5b                   	pop    ebx
c000c1b2:	58                   	pop    eax
c000c1b3:	68 04 d7 01 c0       	push   0xc001d704
c000c1b8:	55                   	push   ebp
c000c1b9:	e8 22 46 ff ff       	call   c00007e0 <strcat>
c000c1be:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000c1c5:	e8 97 a9 ff ff       	call   c0006b61 <malloc>
c000c1ca:	83 c4 0c             	add    esp,0xc
c000c1cd:	89 c3                	mov    ebx,eax
c000c1cf:	57                   	push   edi
c000c1d0:	56                   	push   esi
c000c1d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1d9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000c1e0:	55                   	push   ebp
c000c1e1:	50                   	push   eax
c000c1e2:	e8 f7 fb ff ff       	call   c000bdde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000c1e7:	83 c4 14             	add    esp,0x14
c000c1ea:	53                   	push   ebx
c000c1eb:	e8 a4 fc ff ff       	call   c000be94 <LogicalDisk::assignDriveLetter()>
c000c1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1f3:	e8 52 fd ff ff       	call   c000bf4a <LogicalDisk::mount()>
c000c1f8:	58                   	pop    eax
c000c1f9:	5a                   	pop    edx
c000c1fa:	53                   	push   ebx
c000c1fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000c202:	e8 5d eb ff ff       	call   c000ad64 <Device::addChild(Device*)>
c000c207:	81 c4 2c 01 00 00    	add    esp,0x12c
c000c20d:	5b                   	pop    ebx
c000c20e:	5e                   	pop    esi
c000c20f:	5f                   	pop    edi
c000c210:	5d                   	pop    ebp
c000c211:	c3                   	ret    

c000c212 <createPartitionsForDisk(PhysicalDisk*)>:
c000c212:	55                   	push   ebp
c000c213:	57                   	push   edi
c000c214:	56                   	push   esi
c000c215:	53                   	push   ebx
c000c216:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000c21c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000c223:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000c229:	3d 00 02 00 00       	cmp    eax,0x200
c000c22e:	74 27                	je     c000c257 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000c230:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000c236:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000c23c:	83 ec 10             	sub    esp,0x10
c000c23f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000c243:	99                   	cdq    
c000c244:	c1 e6 0a             	shl    esi,0xa
c000c247:	52                   	push   edx
c000c248:	89 fd                	mov    ebp,edi
c000c24a:	50                   	push   eax
c000c24b:	55                   	push   ebp
c000c24c:	56                   	push   esi
c000c24d:	e8 0e f4 00 00       	call   c001b660 <__udivdi3>
c000c252:	e9 b1 00 00 00       	jmp    c000c308 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c257:	83 ec 0c             	sub    esp,0xc
c000c25a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c25c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000c260:	56                   	push   esi
c000c261:	6a 01                	push   0x1
c000c263:	6a 00                	push   0x0
c000c265:	6a 00                	push   0x0
c000c267:	53                   	push   ebx
c000c268:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000c26b:	83 c4 20             	add    esp,0x20
c000c26e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000c276:	75 0a                	jne    c000c282 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000c278:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000c280:	74 2c                	je     c000c2ae <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000c282:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c288:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c28e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c294:	83 ec 10             	sub    esp,0x10
c000c297:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c29b:	89 f7                	mov    edi,esi
c000c29d:	c1 e0 0a             	shl    eax,0xa
c000c2a0:	c1 ff 1f             	sar    edi,0x1f
c000c2a3:	57                   	push   edi
c000c2a4:	56                   	push   esi
c000c2a5:	52                   	push   edx
c000c2a6:	50                   	push   eax
c000c2a7:	e8 b4 f3 00 00       	call   c001b660 <__udivdi3>
c000c2ac:	eb 5a                	jmp    c000c308 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000c2ae:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000c2b5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000c2bc:	83 e1 7f             	and    ecx,0x7f
c000c2bf:	83 e0 7f             	and    eax,0x7f
c000c2c2:	01 c1                	add    ecx,eax
c000c2c4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000c2cb:	83 e0 7f             	and    eax,0x7f
c000c2ce:	01 c1                	add    ecx,eax
c000c2d0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000c2d7:	83 e0 7f             	and    eax,0x7f
c000c2da:	00 c1                	add    cl,al
c000c2dc:	74 41                	je     c000c31f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000c2de:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c2e4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c2ea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c2f0:	83 ec 10             	sub    esp,0x10
c000c2f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c2f7:	89 f7                	mov    edi,esi
c000c2f9:	c1 e0 0a             	shl    eax,0xa
c000c2fc:	c1 ff 1f             	sar    edi,0x1f
c000c2ff:	57                   	push   edi
c000c300:	56                   	push   esi
c000c301:	52                   	push   edx
c000c302:	50                   	push   eax
c000c303:	e8 58 f3 00 00       	call   c001b660 <__udivdi3>
c000c308:	83 c4 14             	add    esp,0x14
c000c30b:	52                   	push   edx
c000c30c:	50                   	push   eax
c000c30d:	6a 00                	push   0x0
c000c30f:	6a 00                	push   0x0
c000c311:	53                   	push   ebx
c000c312:	e8 53 fe ff ff       	call   c000c16a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c317:	83 c4 20             	add    esp,0x20
c000c31a:	e9 79 01 00 00       	jmp    c000c498 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000c31f:	89 f0                	mov    eax,esi
c000c321:	31 f6                	xor    esi,esi
c000c323:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000c32a:	75 02                	jne    c000c32e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000c32c:	89 f1                	mov    ecx,esi
c000c32e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000c335:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000c33c:	c1 e2 08             	shl    edx,0x8
c000c33f:	c1 e7 10             	shl    edi,0x10
c000c342:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000c34a:	09 fa                	or     edx,edi
c000c34c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000c354:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000c35b:	83 c0 10             	add    eax,0x10
c000c35e:	09 fa                	or     edx,edi
c000c360:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000c367:	c1 e7 18             	shl    edi,0x18
c000c36a:	09 fa                	or     edx,edi
c000c36c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000c373:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000c377:	c1 e7 10             	shl    edi,0x10
c000c37a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000c381:	c1 e2 08             	shl    edx,0x8
c000c384:	09 fa                	or     edx,edi
c000c386:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000c38d:	09 fa                	or     edx,edi
c000c38f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000c396:	c1 e7 18             	shl    edi,0x18
c000c399:	09 fa                	or     edx,edi
c000c39b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000c39f:	46                   	inc    esi
c000c3a0:	83 fe 04             	cmp    esi,0x4
c000c3a3:	0f 85 7a ff ff ff    	jne    c000c323 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000c3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ad:	83 f0 01             	xor    eax,0x1
c000c3b0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c3b4:	75 57                	jne    c000c40d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c3b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3ba:	83 f0 01             	xor    eax,0x1
c000c3bd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c3c1:	75 4a                	jne    c000c40d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000c3c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000c3c7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c3cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c3d7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000c3dd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000c3e3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000c3e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000c3ed:	89 f7                	mov    edi,esi
c000c3ef:	c1 e0 0a             	shl    eax,0xa
c000c3f2:	c1 ff 1f             	sar    edi,0x1f
c000c3f5:	57                   	push   edi
c000c3f6:	56                   	push   esi
c000c3f7:	52                   	push   edx
c000c3f8:	50                   	push   eax
c000c3f9:	e8 62 f2 00 00       	call   c001b660 <__udivdi3>
c000c3fe:	83 c4 10             	add    esp,0x10
c000c401:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c405:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c409:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000c40d:	84 c9                	test   cl,cl
c000c40f:	74 53                	je     c000c464 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000c411:	0f b6 c9             	movzx  ecx,cl
c000c414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c418:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c41c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c420:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c428:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c42c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000c430:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000c434:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c438:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c43c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c440:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c444:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000c448:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000c44c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000c450:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000c454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c458:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c45c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000c460:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000c464:	31 ed                	xor    ebp,ebp
c000c466:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000c46a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000c46e:	89 f8                	mov    eax,edi
c000c470:	09 f0                	or     eax,esi
c000c472:	74 1e                	je     c000c492 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c474:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000c478:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000c47c:	89 d1                	mov    ecx,edx
c000c47e:	09 c1                	or     ecx,eax
c000c480:	74 10                	je     c000c492 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000c482:	83 ec 0c             	sub    esp,0xc
c000c485:	57                   	push   edi
c000c486:	56                   	push   esi
c000c487:	52                   	push   edx
c000c488:	50                   	push   eax
c000c489:	53                   	push   ebx
c000c48a:	e8 db fc ff ff       	call   c000c16a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000c48f:	83 c4 20             	add    esp,0x20
c000c492:	45                   	inc    ebp
c000c493:	83 fd 04             	cmp    ebp,0x4
c000c496:	75 ce                	jne    c000c466 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000c498:	81 c4 5c 02 00 00    	add    esp,0x25c
c000c49e:	5b                   	pop    ebx
c000c49f:	5e                   	pop    esi
c000c4a0:	5f                   	pop    edi
c000c4a1:	5d                   	pop    ebp
c000c4a2:	c3                   	ret    
c000c4a3:	90                   	nop

c000c4a4 <Serial::Serial(char const*)>:
c000c4a4:	83 ec 0c             	sub    esp,0xc
c000c4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ab:	83 ec 08             	sub    esp,0x8
c000c4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b2:	50                   	push   eax
c000c4b3:	e8 44 ea ff ff       	call   c000aefc <Device::Device(char const*)>
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	ba 18 d7 01 c0       	mov    edx,0xc001d718
c000c4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c4:	89 10                	mov    DWORD PTR [eax],edx
c000c4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ca:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000c4d4:	90                   	nop
c000c4d5:	83 c4 0c             	add    esp,0xc
c000c4d8:	c3                   	ret    
c000c4d9:	90                   	nop
c000c4da:	66 90                	xchg   ax,ax

c000c4dc <Serial::~Serial()>:
c000c4dc:	83 ec 0c             	sub    esp,0xc
c000c4df:	ba 18 d7 01 c0       	mov    edx,0xc001d718
c000c4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e8:	89 10                	mov    DWORD PTR [eax],edx
c000c4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 6f e7 ff ff       	call   c000ac66 <Device::~Device()>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	90                   	nop
c000c4fb:	83 c4 0c             	add    esp,0xc
c000c4fe:	c3                   	ret    
c000c4ff:	90                   	nop

c000c500 <Serial::~Serial()>:
c000c500:	83 ec 0c             	sub    esp,0xc
c000c503:	83 ec 0c             	sub    esp,0xc
c000c506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c50a:	e8 cd ff ff ff       	call   c000c4dc <Serial::~Serial()>
c000c50f:	83 c4 10             	add    esp,0x10
c000c512:	83 ec 08             	sub    esp,0x8
c000c515:	68 58 01 00 00       	push   0x158
c000c51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51e:	e8 0b d3 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000c523:	83 c4 10             	add    esp,0x10
c000c526:	83 c4 0c             	add    esp,0xc
c000c529:	c3                   	ret    
c000c52a:	66 90                	xchg   ax,ax

c000c52c <Timer::Timer(char const*)>:
c000c52c:	83 ec 0c             	sub    esp,0xc
c000c52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c533:	83 ec 08             	sub    esp,0x8
c000c536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53a:	50                   	push   eax
c000c53b:	e8 bc e9 ff ff       	call   c000aefc <Device::Device(char const*)>
c000c540:	83 c4 10             	add    esp,0x10
c000c543:	ba 5c d7 01 c0       	mov    edx,0xc001d75c
c000c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c54c:	89 10                	mov    DWORD PTR [eax],edx
c000c54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c552:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000c55c:	90                   	nop
c000c55d:	83 c4 0c             	add    esp,0xc
c000c560:	c3                   	ret    
c000c561:	90                   	nop
c000c562:	66 90                	xchg   ax,ax

c000c564 <Timer::~Timer()>:
c000c564:	83 ec 0c             	sub    esp,0xc
c000c567:	ba 5c d7 01 c0       	mov    edx,0xc001d75c
c000c56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c570:	89 10                	mov    DWORD PTR [eax],edx
c000c572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c576:	83 ec 0c             	sub    esp,0xc
c000c579:	50                   	push   eax
c000c57a:	e8 e7 e6 ff ff       	call   c000ac66 <Device::~Device()>
c000c57f:	83 c4 10             	add    esp,0x10
c000c582:	90                   	nop
c000c583:	83 c4 0c             	add    esp,0xc
c000c586:	c3                   	ret    
c000c587:	90                   	nop

c000c588 <Timer::~Timer()>:
c000c588:	83 ec 0c             	sub    esp,0xc
c000c58b:	83 ec 0c             	sub    esp,0xc
c000c58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c592:	e8 cd ff ff ff       	call   c000c564 <Timer::~Timer()>
c000c597:	83 c4 10             	add    esp,0x10
c000c59a:	83 ec 08             	sub    esp,0x8
c000c59d:	68 5c 01 00 00       	push   0x15c
c000c5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a6:	e8 83 d2 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	83 c4 0c             	add    esp,0xc
c000c5b1:	c3                   	ret    

c000c5b2 <Timer::read()>:
c000c5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c5bc:	c3                   	ret    

c000c5bd <setupTimer(int)>:
c000c5bd:	53                   	push   ebx
c000c5be:	83 ec 14             	sub    esp,0x14
c000c5c1:	68 5c 01 00 00       	push   0x15c
c000c5c6:	e8 96 a5 ff ff       	call   c0006b61 <malloc>
c000c5cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5ce:	89 c3                	mov    ebx,eax
c000c5d0:	e8 ff e9 00 00       	call   c001afd4 <PIT::PIT()>
c000c5d5:	58                   	pop    eax
c000c5d6:	5a                   	pop    edx
c000c5d7:	53                   	push   ebx
c000c5d8:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000c5de:	e8 81 e7 ff ff       	call   c000ad64 <Device::addChild(Device*)>
c000c5e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c5e5:	6a 00                	push   0x0
c000c5e7:	6a 00                	push   0x0
c000c5e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c5ed:	53                   	push   ebx
c000c5ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c5f1:	89 d8                	mov    eax,ebx
c000c5f3:	83 c4 28             	add    esp,0x28
c000c5f6:	5b                   	pop    ebx
c000c5f7:	c3                   	ret    

c000c5f8 <timerHandler(unsigned int)>:
c000c5f8:	56                   	push   esi
c000c5f9:	53                   	push   ebx
c000c5fa:	51                   	push   ecx
c000c5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5ff:	01 05 0c 1a 02 c0    	add    DWORD PTR ds:0xc0021a0c,eax
c000c605:	80 3d 2d f4 01 c0 00 	cmp    BYTE PTR ds:0xc001f42d,0x0
c000c60c:	0f 84 4a 01 00 00    	je     c000c75c <timerHandler(unsigned int)+0x164>
c000c612:	fa                   	cli    
c000c613:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c000c619:	83 ec 0c             	sub    esp,0xc
c000c61c:	ff 05 04 29 02 c0    	inc    DWORD PTR ds:0xc0022904
c000c622:	68 18 29 02 c0       	push   0xc0022918
c000c627:	e8 04 f6 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c62c:	83 c4 10             	add    esp,0x10
c000c62f:	84 c0                	test   al,al
c000c631:	0f 85 a1 00 00 00    	jne    c000c6d8 <timerHandler(unsigned int)+0xe0>
c000c637:	83 ec 0c             	sub    esp,0xc
c000c63a:	68 18 29 02 c0       	push   0xc0022918
c000c63f:	e8 08 f6 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	89 c6                	mov    esi,eax
c000c649:	8d 76 00             	lea    esi,[esi+0x0]
c000c64c:	83 ec 0c             	sub    esp,0xc
c000c64f:	68 18 29 02 c0       	push   0xc0022918
c000c654:	e8 f3 f5 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c659:	c7 04 24 18 29 02 c0 	mov    DWORD PTR [esp],0xc0022918
c000c660:	89 c3                	mov    ebx,eax
c000c662:	e8 ed f5 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000c667:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	3b 05 0c 1a 02 c0    	cmp    eax,DWORD PTR ds:0xc0021a0c
c000c673:	77 23                	ja     c000c698 <timerHandler(unsigned int)+0xa0>
c000c675:	83 ec 0c             	sub    esp,0xc
c000c678:	53                   	push   ebx
c000c679:	e8 2e 67 00 00       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c000c67e:	83 c4 10             	add    esp,0x10
c000c681:	39 de                	cmp    esi,ebx
c000c683:	75 27                	jne    c000c6ac <timerHandler(unsigned int)+0xb4>
c000c685:	83 ec 0c             	sub    esp,0xc
c000c688:	68 18 29 02 c0       	push   0xc0022918
c000c68d:	e8 ba f5 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c692:	89 c6                	mov    esi,eax
c000c694:	eb 12                	jmp    c000c6a8 <timerHandler(unsigned int)+0xb0>
c000c696:	66 90                	xchg   ax,ax
c000c698:	52                   	push   edx
c000c699:	52                   	push   edx
c000c69a:	53                   	push   ebx
c000c69b:	68 18 29 02 c0       	push   0xc0022918
c000c6a0:	e8 67 f6 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000c6a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c6a8:	83 c4 10             	add    esp,0x10
c000c6ab:	90                   	nop
c000c6ac:	83 ec 0c             	sub    esp,0xc
c000c6af:	68 18 29 02 c0       	push   0xc0022918
c000c6b4:	e8 77 f5 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000c6b9:	83 c4 10             	add    esp,0x10
c000c6bc:	84 c0                	test   al,al
c000c6be:	75 18                	jne    c000c6d8 <timerHandler(unsigned int)+0xe0>
c000c6c0:	83 ec 0c             	sub    esp,0xc
c000c6c3:	68 18 29 02 c0       	push   0xc0022918
c000c6c8:	e8 7f f5 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000c6cd:	83 c4 10             	add    esp,0x10
c000c6d0:	39 f0                	cmp    eax,esi
c000c6d2:	0f 85 74 ff ff ff    	jne    c000c64c <timerHandler(unsigned int)+0x54>
c000c6d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c6dd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000c6e1:	74 41                	je     c000c724 <timerHandler(unsigned int)+0x12c>
c000c6e3:	80 3d 2c f4 01 c0 00 	cmp    BYTE PTR ds:0xc001f42c,0x0
c000c6ea:	74 38                	je     c000c724 <timerHandler(unsigned int)+0x12c>
c000c6ec:	fa                   	cli    
c000c6ed:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c000c6f3:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c000c6f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c6fe:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000c701:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000c707:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000c70a:	72 08                	jb     c000c714 <timerHandler(unsigned int)+0x11c>
c000c70c:	e8 d7 61 00 00       	call   c00128e8 <schedule()>
c000c711:	8d 76 00             	lea    esi,[esi+0x0]
c000c714:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000c719:	48                   	dec    eax
c000c71a:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000c71f:	75 03                	jne    c000c724 <timerHandler(unsigned int)+0x12c>
c000c721:	fb                   	sti    
c000c722:	66 90                	xchg   ax,ax
c000c724:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c000c729:	48                   	dec    eax
c000c72a:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c000c72f:	75 1b                	jne    c000c74c <timerHandler(unsigned int)+0x154>
c000c731:	83 3d 00 29 02 c0 00 	cmp    DWORD PTR ds:0xc0022900,0x0
c000c738:	74 12                	je     c000c74c <timerHandler(unsigned int)+0x154>
c000c73a:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c000c744:	e8 9f 61 00 00       	call   c00128e8 <schedule()>
c000c749:	8d 76 00             	lea    esi,[esi+0x0]
c000c74c:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000c751:	48                   	dec    eax
c000c752:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000c757:	75 03                	jne    c000c75c <timerHandler(unsigned int)+0x164>
c000c759:	fb                   	sti    
c000c75a:	66 90                	xchg   ax,ax
c000c75c:	58                   	pop    eax
c000c75d:	5b                   	pop    ebx
c000c75e:	5e                   	pop    esi
c000c75f:	c3                   	ret    

c000c760 <VCache::VCache(PhysicalDisk*)>:
c000c760:	53                   	push   ebx
c000c761:	83 ec 18             	sub    esp,0x18
c000c764:	ba 8c d7 01 c0       	mov    edx,0xc001d78c
c000c769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c76d:	89 10                	mov    DWORD PTR [eax],edx
c000c76f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c773:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000c77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c77e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000c785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c789:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000c790:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000c797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000c7a2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000c7a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ad:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000c7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7c0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000c7c7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000c7ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7d2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7da:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000c7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7e2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ea:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c7f1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000c7f9:	83 ec 0c             	sub    esp,0xc
c000c7fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c800:	e8 5c a3 ff ff       	call   c0006b61 <malloc>
c000c805:	83 c4 10             	add    esp,0x10
c000c808:	89 c3                	mov    ebx,eax
c000c80a:	83 ec 0c             	sub    esp,0xc
c000c80d:	53                   	push   ebx
c000c80e:	e8 a1 5e 00 00       	call   c00126b4 <Mutex::Mutex()>
c000c813:	83 c4 10             	add    esp,0x10
c000c816:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c81a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000c81d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c821:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c825:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000c828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c82c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000c833:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c837:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000c83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c841:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c844:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c848:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000c84e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c854:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c858:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000c85b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000c85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c862:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000c866:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c86a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c870:	05 00 01 00 00       	add    eax,0x100
c000c875:	c1 e0 04             	shl    eax,0x4
c000c878:	83 ec 0c             	sub    esp,0xc
c000c87b:	50                   	push   eax
c000c87c:	e8 e0 a2 ff ff       	call   c0006b61 <malloc>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	89 c2                	mov    edx,eax
c000c886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000c88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c891:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000c898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c89c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000c8a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c8a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c8aa:	c1 e0 06             	shl    eax,0x6
c000c8ad:	83 ec 0c             	sub    esp,0xc
c000c8b0:	50                   	push   eax
c000c8b1:	e8 ab a2 ff ff       	call   c0006b61 <malloc>
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	89 c2                	mov    edx,eax
c000c8bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8bf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c8c2:	90                   	nop
c000c8c3:	83 c4 18             	add    esp,0x18
c000c8c6:	5b                   	pop    ebx
c000c8c7:	c3                   	ret    

c000c8c8 <VCache::invalidateReadBuffer()>:
c000c8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8cc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000c8d2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000c8d6:	c3                   	ret    
c000c8d7:	90                   	nop

c000c8d8 <VCache::writeWriteBuffer()>:
c000c8d8:	53                   	push   ebx
c000c8d9:	83 ec 08             	sub    esp,0x8
c000c8dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c8e4:	74 1e                	je     c000c904 <VCache::writeWriteBuffer()+0x2c>
c000c8e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c8e9:	83 ec 0c             	sub    esp,0xc
c000c8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000c8f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000c8f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000c8f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8fa:	50                   	push   eax
c000c8fb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c8fe:	83 c4 20             	add    esp,0x20
c000c901:	8d 76 00             	lea    esi,[esi+0x0]
c000c904:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000c90b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000c912:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000c916:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000c91d:	83 c4 08             	add    esp,0x8
c000c920:	5b                   	pop    ebx
c000c921:	c3                   	ret    
c000c922:	66 90                	xchg   ax,ax

c000c924 <VCache::~VCache()>:
c000c924:	83 ec 0c             	sub    esp,0xc
c000c927:	ba 8c d7 01 c0       	mov    edx,0xc001d78c
c000c92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c930:	89 10                	mov    DWORD PTR [eax],edx
c000c932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c936:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000c939:	84 c0                	test   al,al
c000c93b:	74 0f                	je     c000c94c <VCache::~VCache()+0x28>
c000c93d:	83 ec 0c             	sub    esp,0xc
c000c940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c944:	e8 8f ff ff ff       	call   c000c8d8 <VCache::writeWriteBuffer()>
c000c949:	83 c4 10             	add    esp,0x10
c000c94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c950:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c953:	83 ec 0c             	sub    esp,0xc
c000c956:	50                   	push   eax
c000c957:	e8 15 a2 ff ff       	call   c0006b71 <free>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c963:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000c966:	83 ec 0c             	sub    esp,0xc
c000c969:	50                   	push   eax
c000c96a:	e8 02 a2 ff ff       	call   c0006b71 <free>
c000c96f:	83 c4 10             	add    esp,0x10
c000c972:	90                   	nop
c000c973:	83 c4 0c             	add    esp,0xc
c000c976:	c3                   	ret    
c000c977:	90                   	nop

c000c978 <VCache::~VCache()>:
c000c978:	83 ec 0c             	sub    esp,0xc
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c982:	e8 9d ff ff ff       	call   c000c924 <VCache::~VCache()>
c000c987:	83 c4 10             	add    esp,0x10
c000c98a:	83 ec 08             	sub    esp,0x8
c000c98d:	6a 44                	push   0x44
c000c98f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c993:	e8 96 ce ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	83 c4 0c             	add    esp,0xc
c000c99e:	c3                   	ret    
c000c99f:	90                   	nop

c000c9a0 <VCache::write(unsigned long long, int, void*)>:
c000c9a0:	55                   	push   ebp
c000c9a1:	31 c0                	xor    eax,eax
c000c9a3:	57                   	push   edi
c000c9a4:	56                   	push   esi
c000c9a5:	53                   	push   ebx
c000c9a6:	83 ec 0c             	sub    esp,0xc
c000c9a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c9ad:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c9b1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c9b8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000c9bc:	7d 1a                	jge    c000c9d8 <VCache::write(unsigned long long, int, void*)+0x38>
c000c9be:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000c9c1:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000c9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9cb:	0f af c8             	imul   ecx,eax
c000c9ce:	01 ca                	add    edx,ecx
c000c9d0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c9d2:	40                   	inc    eax
c000c9d3:	eb e3                	jmp    c000c9b8 <VCache::write(unsigned long long, int, void*)+0x18>
c000c9d5:	8d 76 00             	lea    esi,[esi+0x0]
c000c9d8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c9dc:	74 0a                	je     c000c9e8 <VCache::write(unsigned long long, int, void*)+0x48>
c000c9de:	53                   	push   ebx
c000c9df:	e8 e4 fe ff ff       	call   c000c8c8 <VCache::invalidateReadBuffer()>
c000c9e4:	58                   	pop    eax
c000c9e5:	8d 76 00             	lea    esi,[esi+0x0]
c000c9e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c9ec:	74 5e                	je     c000ca4c <VCache::write(unsigned long long, int, void*)+0xac>
c000c9ee:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000c9f1:	89 e8                	mov    eax,ebp
c000c9f3:	99                   	cdq    
c000c9f4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000c9f7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000c9fa:	89 c1                	mov    ecx,eax
c000c9fc:	89 d0                	mov    eax,edx
c000c9fe:	31 f1                	xor    ecx,esi
c000ca00:	31 f8                	xor    eax,edi
c000ca02:	09 c1                	or     ecx,eax
c000ca04:	75 3a                	jne    c000ca40 <VCache::write(unsigned long long, int, void*)+0xa0>
c000ca06:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000ca0b:	75 33                	jne    c000ca40 <VCache::write(unsigned long long, int, void*)+0xa0>
c000ca0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ca10:	89 ef                	mov    edi,ebp
c000ca12:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ca18:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ca1c:	0f af f9             	imul   edi,ecx
c000ca1f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ca22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca24:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ca27:	40                   	inc    eax
c000ca28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ca2b:	83 f8 40             	cmp    eax,0x40
c000ca2e:	75 60                	jne    c000ca90 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca30:	83 ec 0c             	sub    esp,0xc
c000ca33:	53                   	push   ebx
c000ca34:	e8 9f fe ff ff       	call   c000c8d8 <VCache::writeWriteBuffer()>
c000ca39:	83 c4 10             	add    esp,0x10
c000ca3c:	eb 52                	jmp    c000ca90 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca3e:	66 90                	xchg   ax,ax
c000ca40:	83 ec 0c             	sub    esp,0xc
c000ca43:	53                   	push   ebx
c000ca44:	e8 8f fe ff ff       	call   c000c8d8 <VCache::writeWriteBuffer()>
c000ca49:	83 c4 10             	add    esp,0x10
c000ca4c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ca4f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000ca54:	7f 22                	jg     c000ca78 <VCache::write(unsigned long long, int, void*)+0xd8>
c000ca56:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000ca59:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000ca5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ca60:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000ca64:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ca67:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000ca6a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ca70:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ca74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca76:	eb 18                	jmp    c000ca90 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ca78:	83 ec 0c             	sub    esp,0xc
c000ca7b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca85:	57                   	push   edi
c000ca86:	56                   	push   esi
c000ca87:	50                   	push   eax
c000ca88:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ca8b:	83 c4 20             	add    esp,0x20
c000ca8e:	66 90                	xchg   ax,ax
c000ca90:	83 c4 0c             	add    esp,0xc
c000ca93:	31 c0                	xor    eax,eax
c000ca95:	5b                   	pop    ebx
c000ca96:	5e                   	pop    esi
c000ca97:	5f                   	pop    edi
c000ca98:	5d                   	pop    ebp
c000ca99:	c3                   	ret    

c000ca9a <VCache::read(unsigned long long, int, void*)>:
c000ca9a:	55                   	push   ebp
c000ca9b:	31 c0                	xor    eax,eax
c000ca9d:	57                   	push   edi
c000ca9e:	56                   	push   esi
c000ca9f:	53                   	push   ebx
c000caa0:	83 ec 1c             	sub    esp,0x1c
c000caa3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000caa7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000caab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000caaf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000cab3:	90                   	nop
c000cab4:	39 e8                	cmp    eax,ebp
c000cab6:	7d 18                	jge    c000cad0 <VCache::read(unsigned long long, int, void*)+0x36>
c000cab8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000cabb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000cac1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cac5:	0f af c8             	imul   ecx,eax
c000cac8:	01 ca                	add    edx,ecx
c000caca:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000cacc:	40                   	inc    eax
c000cacd:	eb e5                	jmp    c000cab4 <VCache::read(unsigned long long, int, void*)+0x1a>
c000cacf:	90                   	nop
c000cad0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000cad4:	74 0e                	je     c000cae4 <VCache::read(unsigned long long, int, void*)+0x4a>
c000cad6:	83 ec 0c             	sub    esp,0xc
c000cad9:	53                   	push   ebx
c000cada:	e8 f9 fd ff ff       	call   c000c8d8 <VCache::writeWriteBuffer()>
c000cadf:	83 c4 10             	add    esp,0x10
c000cae2:	66 90                	xchg   ax,ax
c000cae4:	83 fd 01             	cmp    ebp,0x1
c000cae7:	0f 85 87 00 00 00    	jne    c000cb74 <VCache::read(unsigned long long, int, void*)+0xda>
c000caed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000caf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000caf4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000cafb:	75 77                	jne    c000cb74 <VCache::read(unsigned long long, int, void*)+0xda>
c000cafd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000cb00:	89 e9                	mov    ecx,ebp
c000cb02:	f7 d9                	neg    ecx
c000cb04:	89 c8                	mov    eax,ecx
c000cb06:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cb0a:	c1 f8 1f             	sar    eax,0x1f
c000cb0d:	21 f1                	and    ecx,esi
c000cb0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb13:	89 c8                	mov    eax,ecx
c000cb15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb19:	21 f9                	and    ecx,edi
c000cb1b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000cb1f:	89 ca                	mov    edx,ecx
c000cb21:	74 0d                	je     c000cb30 <VCache::read(unsigned long long, int, void*)+0x96>
c000cb23:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000cb26:	75 08                	jne    c000cb30 <VCache::read(unsigned long long, int, void*)+0x96>
c000cb28:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000cb2b:	74 27                	je     c000cb54 <VCache::read(unsigned long long, int, void*)+0xba>
c000cb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb30:	83 ec 0c             	sub    esp,0xc
c000cb33:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000cb37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb3b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000cb3e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cb41:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000cb43:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000cb46:	55                   	push   ebp
c000cb47:	52                   	push   edx
c000cb48:	50                   	push   eax
c000cb49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cb4d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000cb50:	83 c4 20             	add    esp,0x20
c000cb53:	90                   	nop
c000cb54:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cb5b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000cb61:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000cb64:	48                   	dec    eax
c000cb65:	21 c6                	and    esi,eax
c000cb67:	0f af f1             	imul   esi,ecx
c000cb6a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000cb6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb6f:	eb 23                	jmp    c000cb94 <VCache::read(unsigned long long, int, void*)+0xfa>
c000cb71:	8d 76 00             	lea    esi,[esi+0x0]
c000cb74:	83 ec 0c             	sub    esp,0xc
c000cb77:	53                   	push   ebx
c000cb78:	e8 4b fd ff ff       	call   c000c8c8 <VCache::invalidateReadBuffer()>
c000cb7d:	5a                   	pop    edx
c000cb7e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000cb81:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb87:	55                   	push   ebp
c000cb88:	57                   	push   edi
c000cb89:	56                   	push   esi
c000cb8a:	50                   	push   eax
c000cb8b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000cb8e:	83 c4 20             	add    esp,0x20
c000cb91:	8d 76 00             	lea    esi,[esi+0x0]
c000cb94:	83 c4 1c             	add    esp,0x1c
c000cb97:	31 c0                	xor    eax,eax
c000cb99:	5b                   	pop    ebx
c000cb9a:	5e                   	pop    esi
c000cb9b:	5f                   	pop    edi
c000cb9c:	5d                   	pop    ebp
c000cb9d:	c3                   	ret    

c000cb9e <Video::putrect(int, int, int, int, unsigned int)>:
c000cb9e:	55                   	push   ebp
c000cb9f:	57                   	push   edi
c000cba0:	56                   	push   esi
c000cba1:	53                   	push   ebx
c000cba2:	83 ec 1c             	sub    esp,0x1c
c000cba5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000cba9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cbad:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000cbb1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000cbb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cbb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cbbd:	01 df                	add    edi,ebx
c000cbbf:	39 fb                	cmp    ebx,edi
c000cbc1:	7d 1f                	jge    c000cbe2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000cbc3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cbc7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000cbcb:	7d 12                	jge    c000cbdf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000cbcd:	8b 16                	mov    edx,DWORD PTR [esi]
c000cbcf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cbd3:	53                   	push   ebx
c000cbd4:	55                   	push   ebp
c000cbd5:	45                   	inc    ebp
c000cbd6:	56                   	push   esi
c000cbd7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000cbda:	83 c4 10             	add    esp,0x10
c000cbdd:	eb e8                	jmp    c000cbc7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000cbdf:	43                   	inc    ebx
c000cbe0:	eb dd                	jmp    c000cbbf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000cbe2:	83 c4 1c             	add    esp,0x1c
c000cbe5:	5b                   	pop    ebx
c000cbe6:	5e                   	pop    esi
c000cbe7:	5f                   	pop    edi
c000cbe8:	5d                   	pop    ebp
c000cbe9:	c3                   	ret    

c000cbea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000cbea:	55                   	push   ebp
c000cbeb:	57                   	push   edi
c000cbec:	31 ff                	xor    edi,edi
c000cbee:	56                   	push   esi
c000cbef:	53                   	push   ebx
c000cbf0:	83 ec 1c             	sub    esp,0x1c
c000cbf3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000cbf7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cbfb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000cc02:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000cc07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc0b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000cc0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cc13:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000cc16:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc1a:	01 f9                	add    ecx,edi
c000cc1c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000cc20:	7d 2f                	jge    c000cc51 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000cc22:	31 f6                	xor    esi,esi
c000cc24:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cc28:	01 f2                	add    edx,esi
c000cc2a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cc2e:	7d 1a                	jge    c000cc4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000cc30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc33:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000cc36:	46                   	inc    esi
c000cc37:	51                   	push   ecx
c000cc38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc3c:	52                   	push   edx
c000cc3d:	55                   	push   ebp
c000cc3e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cc41:	83 c4 10             	add    esp,0x10
c000cc44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc48:	eb da                	jmp    c000cc24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000cc4a:	47                   	inc    edi
c000cc4b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000cc4f:	eb c5                	jmp    c000cc16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000cc51:	83 c4 1c             	add    esp,0x1c
c000cc54:	5b                   	pop    ebx
c000cc55:	5e                   	pop    esi
c000cc56:	5f                   	pop    edi
c000cc57:	5d                   	pop    ebp
c000cc58:	c3                   	ret    
c000cc59:	90                   	nop

c000cc5a <Video::blit(unsigned int*, int, int, int, int)>:
c000cc5a:	55                   	push   ebp
c000cc5b:	57                   	push   edi
c000cc5c:	56                   	push   esi
c000cc5d:	53                   	push   ebx
c000cc5e:	83 ec 1c             	sub    esp,0x1c
c000cc61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cc69:	85 c0                	test   eax,eax
c000cc6b:	79 02                	jns    c000cc6f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000cc6d:	31 c0                	xor    eax,eax
c000cc6f:	c1 e0 02             	shl    eax,0x2
c000cc72:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cc7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cc7e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000cc82:	39 d8                	cmp    eax,ebx
c000cc84:	7e 49                	jle    c000cccf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc86:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cc8c:	7c 41                	jl     c000cccf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000cc8e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000cc92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc96:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc9a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000cc9e:	39 f9                	cmp    ecx,edi
c000cca0:	7e 22                	jle    c000ccc4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000cca2:	83 c5 04             	add    ebp,0x4
c000cca5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ccab:	7c 14                	jl     c000ccc1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ccad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ccaf:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ccb2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ccb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ccba:	56                   	push   esi
c000ccbb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ccbe:	83 c4 10             	add    esp,0x10
c000ccc1:	47                   	inc    edi
c000ccc2:	eb d2                	jmp    c000cc96 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ccc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ccc8:	43                   	inc    ebx
c000ccc9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cccd:	eb ab                	jmp    c000cc7a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000cccf:	83 c4 1c             	add    esp,0x1c
c000ccd2:	5b                   	pop    ebx
c000ccd3:	5e                   	pop    esi
c000ccd4:	5f                   	pop    edi
c000ccd5:	5d                   	pop    ebp
c000ccd6:	c3                   	ret    
c000ccd7:	90                   	nop

c000ccd8 <Video::clearScreen(unsigned int)>:
c000ccd8:	57                   	push   edi
c000ccd9:	56                   	push   esi
c000ccda:	53                   	push   ebx
c000ccdb:	31 db                	xor    ebx,ebx
c000ccdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cce1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000cce7:	7e 1f                	jle    c000cd08 <Video::clearScreen(unsigned int)+0x30>
c000cce9:	31 ff                	xor    edi,edi
c000cceb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ccf1:	7e 12                	jle    c000cd05 <Video::clearScreen(unsigned int)+0x2d>
c000ccf3:	8b 06                	mov    eax,DWORD PTR [esi]
c000ccf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccf9:	53                   	push   ebx
c000ccfa:	57                   	push   edi
c000ccfb:	47                   	inc    edi
c000ccfc:	56                   	push   esi
c000ccfd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000cd00:	83 c4 10             	add    esp,0x10
c000cd03:	eb e6                	jmp    c000cceb <Video::clearScreen(unsigned int)+0x13>
c000cd05:	43                   	inc    ebx
c000cd06:	eb d9                	jmp    c000cce1 <Video::clearScreen(unsigned int)+0x9>
c000cd08:	5b                   	pop    ebx
c000cd09:	5e                   	pop    esi
c000cd0a:	5f                   	pop    edi
c000cd0b:	c3                   	ret    

c000cd0c <Video::putpixel(int, int, unsigned int)>:
c000cd0c:	c7 44 24 04 94 d7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d794
c000cd14:	e9 5a 27 00 00       	jmp    c000f473 <Krnl::panic(char const*)>
c000cd19:	90                   	nop

c000cd1a <Video::Video(char const*)>:
c000cd1a:	83 ec 0c             	sub    esp,0xc
c000cd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd21:	83 ec 08             	sub    esp,0x8
c000cd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd28:	50                   	push   eax
c000cd29:	e8 ce e1 ff ff       	call   c000aefc <Device::Device(char const*)>
c000cd2e:	83 c4 10             	add    esp,0x10
c000cd31:	ba 04 d8 01 c0       	mov    edx,0xc001d804
c000cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3a:	89 10                	mov    DWORD PTR [eax],edx
c000cd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd40:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000cd4a:	90                   	nop
c000cd4b:	83 c4 0c             	add    esp,0xc
c000cd4e:	c3                   	ret    
c000cd4f:	90                   	nop

c000cd50 <Video::~Video()>:
c000cd50:	83 ec 0c             	sub    esp,0xc
c000cd53:	ba 04 d8 01 c0       	mov    edx,0xc001d804
c000cd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5c:	89 10                	mov    DWORD PTR [eax],edx
c000cd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd62:	83 ec 0c             	sub    esp,0xc
c000cd65:	50                   	push   eax
c000cd66:	e8 fb de ff ff       	call   c000ac66 <Device::~Device()>
c000cd6b:	83 c4 10             	add    esp,0x10
c000cd6e:	90                   	nop
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	c3                   	ret    
c000cd73:	90                   	nop

c000cd74 <Video::~Video()>:
c000cd74:	83 ec 0c             	sub    esp,0xc
c000cd77:	83 ec 0c             	sub    esp,0xc
c000cd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7e:	e8 cd ff ff ff       	call   c000cd50 <Video::~Video()>
c000cd83:	83 c4 10             	add    esp,0x10
c000cd86:	83 ec 08             	sub    esp,0x8
c000cd89:	68 64 01 00 00       	push   0x164
c000cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd92:	e8 97 ca ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	83 c4 0c             	add    esp,0xc
c000cd9d:	c3                   	ret    

c000cd9e <Video::isMonochrome()>:
c000cd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cda2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000cda8:	c3                   	ret    
c000cda9:	90                   	nop

c000cdaa <Video::getWidth()>:
c000cdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cdb4:	c3                   	ret    
c000cdb5:	90                   	nop

c000cdb6 <Video::getHeight()>:
c000cdb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000cdc0:	c3                   	ret    
c000cdc1:	90                   	nop

c000cdc2 <Video::drawCursor(int, int, unsigned char*, int)>:
c000cdc2:	55                   	push   ebp
c000cdc3:	57                   	push   edi
c000cdc4:	56                   	push   esi
c000cdc5:	53                   	push   ebx
c000cdc6:	83 ec 2c             	sub    esp,0x2c
c000cdc9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000cdcd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000cdd1:	83 f8 01             	cmp    eax,0x1
c000cdd4:	19 c9                	sbb    ecx,ecx
c000cdd6:	31 db                	xor    ebx,ebx
c000cdd8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000cddc:	89 cd                	mov    ebp,ecx
c000cdde:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000cde6:	f7 d5                	not    ebp
c000cde8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000cdee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cdf2:	01 d8                	add    eax,ebx
c000cdf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cdf8:	56                   	push   esi
c000cdf9:	e8 b8 ff ff ff       	call   c000cdb6 <Video::getHeight()>
c000cdfe:	59                   	pop    ecx
c000cdff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ce03:	7e 70                	jle    c000ce75 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000ce05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ce09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ce0d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ce10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ce14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ce18:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 f8                	mov    eax,edi
c000ce25:	83 c0 20             	add    eax,0x20
c000ce28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ce2c:	56                   	push   esi
c000ce2d:	e8 78 ff ff ff       	call   c000cdaa <Video::getWidth()>
c000ce32:	5a                   	pop    edx
c000ce33:	39 c7                	cmp    edi,eax
c000ce35:	7d 34                	jge    c000ce6b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000ce37:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ce3c:	74 05                	je     c000ce43 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000ce3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000ce40:	55                   	push   ebp
c000ce41:	eb 0d                	jmp    c000ce50 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000ce43:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ce48:	74 12                	je     c000ce5c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000ce4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000ce4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce54:	57                   	push   edi
c000ce55:	56                   	push   esi
c000ce56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce59:	83 c4 10             	add    esp,0x10
c000ce5c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ce60:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ce64:	47                   	inc    edi
c000ce65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ce69:	75 c1                	jne    c000ce2c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000ce6b:	43                   	inc    ebx
c000ce6c:	83 fb 20             	cmp    ebx,0x20
c000ce6f:	0f 85 79 ff ff ff    	jne    c000cdee <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000ce75:	83 c4 2c             	add    esp,0x2c
c000ce78:	5b                   	pop    ebx
c000ce79:	5e                   	pop    esi
c000ce7a:	5f                   	pop    edi
c000ce7b:	5d                   	pop    ebp
c000ce7c:	c3                   	ret    
c000ce7d:	90                   	nop

c000ce7e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ce7e:	55                   	push   ebp
c000ce7f:	57                   	push   edi
c000ce80:	56                   	push   esi
c000ce81:	53                   	push   ebx
c000ce82:	83 ec 28             	sub    esp,0x28
c000ce85:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ce89:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ce8d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ce91:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ce95:	c1 e6 08             	shl    esi,0x8
c000ce98:	01 c6                	add    esi,eax
c000ce9a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ce9e:	c1 e0 08             	shl    eax,0x8
c000cea1:	01 d0                	add    eax,edx
c000cea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceab:	0f af c6             	imul   eax,esi
c000ceae:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ceb5:	50                   	push   eax
c000ceb6:	e8 a6 9c ff ff       	call   c0006b61 <malloc>
c000cebb:	83 c4 10             	add    esp,0x10
c000cebe:	89 c7                	mov    edi,eax
c000cec0:	85 c0                	test   eax,eax
c000cec2:	75 10                	jne    c000ced4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	68 b5 d7 01 c0       	push   0xc001d7b5
c000cecc:	e8 a2 25 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000ced1:	83 c4 10             	add    esp,0x10
c000ced4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000ced7:	ba 12 00 00 00       	mov    edx,0x12
c000cedc:	84 c0                	test   al,al
c000cede:	74 11                	je     c000cef1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000cee0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000cee4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000cee8:	c1 fa 03             	sar    edx,0x3
c000ceeb:	0f af d1             	imul   edx,ecx
c000ceee:	83 c2 12             	add    edx,0x12
c000cef1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000cef5:	74 04                	je     c000cefb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000cef7:	85 f6                	test   esi,esi
c000cef9:	75 12                	jne    c000cf0d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000cefb:	83 ec 0c             	sub    esp,0xc
c000cefe:	68 c5 d7 01 c0       	push   0xc001d7c5
c000cf03:	e8 1c ca ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000cf08:	e9 b8 00 00 00       	jmp    c000cfc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000cf0d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000cf11:	80 f9 02             	cmp    cl,0x2
c000cf14:	0f 85 96 00 00 00    	jne    c000cfb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000cf1a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000cf1f:	75 0e                	jne    c000cf2f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cf21:	84 c0                	test   al,al
c000cf23:	75 0a                	jne    c000cf2f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000cf25:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000cf28:	83 e8 18             	sub    eax,0x18
c000cf2b:	a8 f7                	test   al,0xf7
c000cf2d:	74 0a                	je     c000cf39 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000cf2f:	83 ec 0c             	sub    esp,0xc
c000cf32:	68 da d7 01 c0       	push   0xc001d7da
c000cf37:	eb 7f                	jmp    c000cfb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000cf39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cf41:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cf49:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000cf4d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000cf55:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000cf59:	75 0c                	jne    c000cf67 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000cf5b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000cf60:	c1 e0 18             	shl    eax,0x18
c000cf63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf67:	45                   	inc    ebp
c000cf68:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000cf6d:	c1 e1 10             	shl    ecx,0x10
c000cf70:	89 c8                	mov    eax,ecx
c000cf72:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000cf77:	c1 e1 08             	shl    ecx,0x8
c000cf7a:	09 c1                	or     ecx,eax
c000cf7c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000cf80:	09 c1                	or     ecx,eax
c000cf82:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000cf86:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000cf8a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000cf8e:	c1 f8 03             	sar    eax,0x3
c000cf91:	01 c2                	add    edx,eax
c000cf93:	89 e8                	mov    eax,ebp
c000cf95:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000cf99:	39 c6                	cmp    esi,eax
c000cf9b:	7f b0                	jg     c000cf4d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000cf9d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000cfa1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cfa5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000cfa8:	7e 22                	jle    c000cfcc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000cfaa:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000cfae:	eb 99                	jmp    c000cf49 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000cfb0:	50                   	push   eax
c000cfb1:	50                   	push   eax
c000cfb2:	51                   	push   ecx
c000cfb3:	68 e8 d7 01 c0       	push   0xc001d7e8
c000cfb8:	e8 67 c9 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000cfbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cfc0:	e8 ac 9b ff ff       	call   c0006b71 <free>
c000cfc5:	83 c4 10             	add    esp,0x10
c000cfc8:	31 ff                	xor    edi,edi
c000cfca:	eb 0f                	jmp    c000cfdb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000cfcc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cfd0:	89 30                	mov    DWORD PTR [eax],esi
c000cfd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfd6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000cfd9:	89 30                	mov    DWORD PTR [eax],esi
c000cfdb:	83 c4 1c             	add    esp,0x1c
c000cfde:	89 f8                	mov    eax,edi
c000cfe0:	5b                   	pop    ebx
c000cfe1:	5e                   	pop    esi
c000cfe2:	5f                   	pop    edi
c000cfe3:	5d                   	pop    ebp
c000cfe4:	c3                   	ret    
c000cfe5:	90                   	nop

c000cfe6 <Video::putTGA(int, int, unsigned char*, int)>:
c000cfe6:	55                   	push   ebp
c000cfe7:	57                   	push   edi
c000cfe8:	56                   	push   esi
c000cfe9:	53                   	push   ebx
c000cfea:	83 ec 28             	sub    esp,0x28
c000cfed:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000cff1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cff5:	50                   	push   eax
c000cff6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000cffa:	50                   	push   eax
c000cffb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000cfff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d003:	56                   	push   esi
c000d004:	e8 75 fe ff ff       	call   c000ce7e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000d009:	83 c4 20             	add    esp,0x20
c000d00c:	85 c0                	test   eax,eax
c000d00e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d012:	74 35                	je     c000d049 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d014:	89 c7                	mov    edi,eax
c000d016:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d01a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d01e:	39 d8                	cmp    eax,ebx
c000d020:	7e 27                	jle    c000d049 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000d022:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d026:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d02a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d02e:	39 e8                	cmp    eax,ebp
c000d030:	7e 14                	jle    c000d046 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000d032:	8b 06                	mov    eax,DWORD PTR [esi]
c000d034:	83 c7 04             	add    edi,0x4
c000d037:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000d03a:	53                   	push   ebx
c000d03b:	55                   	push   ebp
c000d03c:	45                   	inc    ebp
c000d03d:	56                   	push   esi
c000d03e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d041:	83 c4 10             	add    esp,0x10
c000d044:	eb e0                	jmp    c000d026 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000d046:	43                   	inc    ebx
c000d047:	eb cd                	jmp    c000d016 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000d049:	83 c4 1c             	add    esp,0x1c
c000d04c:	5b                   	pop    ebx
c000d04d:	5e                   	pop    esi
c000d04e:	5f                   	pop    edi
c000d04f:	5d                   	pop    ebp
c000d050:	c3                   	ret    
c000d051:	66 90                	xchg   ax,ax
c000d053:	90                   	nop

c000d054 <ACPI::close(int, int, void*)>:
c000d054:	83 ec 1c             	sub    esp,0x1c
c000d057:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000d05f:	74 0b                	je     c000d06c <ACPI::close(int, int, void*)+0x18>
c000d061:	b8 00 00 00 00       	mov    eax,0x0
c000d066:	e9 9d 00 00 00       	jmp    c000d108 <ACPI::close(int, int, void*)+0xb4>
c000d06b:	90                   	nop
c000d06c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000d071:	75 29                	jne    c000d09c <ACPI::close(int, int, void*)+0x48>
c000d073:	a1 28 1a 02 c0       	mov    eax,ds:0xc0021a28
c000d078:	85 c0                	test   eax,eax
c000d07a:	74 08                	je     c000d084 <ACPI::close(int, int, void*)+0x30>
c000d07c:	a1 28 1a 02 c0       	mov    eax,ds:0xc0021a28
c000d081:	ff d0                	call   eax
c000d083:	90                   	nop
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	68 44 d8 01 c0       	push   0xc001d844
c000d08c:	e8 e2 23 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000d091:	83 c4 10             	add    esp,0x10
c000d094:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d099:	eb 6d                	jmp    c000d108 <ACPI::close(int, int, void*)+0xb4>
c000d09b:	90                   	nop
c000d09c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000d0a1:	75 5d                	jne    c000d100 <ACPI::close(int, int, void*)+0xac>
c000d0a3:	a1 24 1a 02 c0       	mov    eax,ds:0xc0021a24
c000d0a8:	85 c0                	test   eax,eax
c000d0aa:	74 08                	je     c000d0b4 <ACPI::close(int, int, void*)+0x60>
c000d0ac:	a1 24 1a 02 c0       	mov    eax,ds:0xc0021a24
c000d0b1:	ff d0                	call   eax
c000d0b3:	90                   	nop
c000d0b4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000d0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0bc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d0c0:	25 ff 00 00 00       	and    eax,0xff
c000d0c5:	83 e0 02             	and    eax,0x2
c000d0c8:	74 1e                	je     c000d0e8 <ACPI::close(int, int, void*)+0x94>
c000d0ca:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000d0d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d0d5:	89 c2                	mov    edx,eax
c000d0d7:	ec                   	in     al,dx
c000d0d8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d0dc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d0e0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d0e4:	eb d6                	jmp    c000d0bc <ACPI::close(int, int, void*)+0x68>
c000d0e6:	66 90                	xchg   ax,ax
c000d0e8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000d0ef:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000d0f4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000d0f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0fc:	ee                   	out    dx,al
c000d0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d100:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d105:	8d 76 00             	lea    esi,[esi+0x0]
c000d108:	83 c4 1c             	add    esp,0x1c
c000d10b:	c3                   	ret    

c000d10c <findRSDP()>:
c000d10c:	83 ec 1c             	sub    esp,0x1c
c000d10f:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d114:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d11a:	83 e0 04             	and    eax,0x4
c000d11d:	84 c0                	test   al,al
c000d11f:	75 07                	jne    c000d128 <findRSDP()+0x1c>
c000d121:	b8 00 00 00 00       	mov    eax,0x0
c000d126:	eb 70                	jmp    c000d198 <findRSDP()+0x8c>
c000d128:	a1 58 f4 01 c0       	mov    eax,ds:0xc001f458
c000d12d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000d132:	7f 1c                	jg     c000d150 <findRSDP()+0x44>
c000d134:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d139:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d13f:	83 e2 fb             	and    edx,0xfffffffb
c000d142:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d148:	b8 00 00 00 00       	mov    eax,0x0
c000d14d:	eb 49                	jmp    c000d198 <findRSDP()+0x8c>
c000d14f:	90                   	nop
c000d150:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000d158:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000d160:	77 2e                	ja     c000d190 <findRSDP()+0x84>
c000d162:	83 ec 04             	sub    esp,0x4
c000d165:	6a 08                	push   0x8
c000d167:	68 df d8 01 c0       	push   0xc001d8df
c000d16c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d170:	e8 3b 32 ff ff       	call   c00003b0 <memcmp>
c000d175:	83 c4 10             	add    esp,0x10
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 94 c0             	sete   al
c000d17d:	84 c0                	test   al,al
c000d17f:	74 07                	je     c000d188 <findRSDP()+0x7c>
c000d181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d185:	eb 11                	jmp    c000d198 <findRSDP()+0x8c>
c000d187:	90                   	nop
c000d188:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000d18d:	eb c9                	jmp    c000d158 <findRSDP()+0x4c>
c000d18f:	90                   	nop
c000d190:	b8 00 00 00 00       	mov    eax,0x0
c000d195:	8d 76 00             	lea    esi,[esi+0x0]
c000d198:	83 c4 1c             	add    esp,0x1c
c000d19b:	c3                   	ret    

c000d19c <loadACPITables(unsigned char*)>:
c000d19c:	57                   	push   edi
c000d19d:	56                   	push   esi
c000d19e:	53                   	push   ebx
c000d19f:	83 ec 60             	sub    esp,0x60
c000d1a2:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d1a7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d1ad:	83 e0 04             	and    eax,0x4
c000d1b0:	84 c0                	test   al,al
c000d1b2:	0f 84 3c 02 00 00    	je     c000d3f4 <loadACPITables(unsigned char*)+0x258>
c000d1b8:	a0 40 1c 02 c0       	mov    al,ds:0xc0021c40
c000d1bd:	84 c0                	test   al,al
c000d1bf:	74 77                	je     c000d238 <loadACPITables(unsigned char*)+0x9c>
c000d1c1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d1c5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d1c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d1cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d1d0:	83 e8 24             	sub    eax,0x24
c000d1d3:	c1 e8 03             	shr    eax,0x3
c000d1d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1da:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000d1e2:	66 90                	xchg   ax,ax
c000d1e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d1e8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000d1ec:	0f 8d b6 00 00 00    	jge    c000d2a8 <loadACPITables(unsigned char*)+0x10c>
c000d1f2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d1f6:	83 c0 24             	add    eax,0x24
c000d1f9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d1fd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d201:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d205:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000d209:	c1 e0 03             	shl    eax,0x3
c000d20c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000d210:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d217:	8b 00                	mov    eax,DWORD PTR [eax]
c000d219:	89 c1                	mov    ecx,eax
c000d21b:	a1 2c 1a 02 c0       	mov    eax,ds:0xc0021a2c
c000d220:	8d 50 01             	lea    edx,[eax+0x1]
c000d223:	89 15 2c 1a 02 c0    	mov    DWORD PTR ds:0xc0021a2c,edx
c000d229:	89 ca                	mov    edx,ecx
c000d22b:	89 14 c5 44 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde5bc],edx
c000d232:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000d236:	eb ac                	jmp    c000d1e4 <loadACPITables(unsigned char*)+0x48>
c000d238:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d23c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d240:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d247:	83 e8 24             	sub    eax,0x24
c000d24a:	c1 e8 02             	shr    eax,0x2
c000d24d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d251:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000d259:	8d 76 00             	lea    esi,[esi+0x0]
c000d25c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d260:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000d264:	7d 42                	jge    c000d2a8 <loadACPITables(unsigned char*)+0x10c>
c000d266:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d26a:	83 c0 24             	add    eax,0x24
c000d26d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d271:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d275:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d279:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d27d:	c1 e0 02             	shl    eax,0x2
c000d280:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d284:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d288:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d28a:	a1 2c 1a 02 c0       	mov    eax,ds:0xc0021a2c
c000d28f:	8d 50 01             	lea    edx,[eax+0x1]
c000d292:	89 15 2c 1a 02 c0    	mov    DWORD PTR ds:0xc0021a2c,edx
c000d298:	89 ca                	mov    edx,ecx
c000d29a:	89 14 c5 44 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde5bc],edx
c000d2a1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000d2a5:	eb b5                	jmp    c000d25c <loadACPITables(unsigned char*)+0xc0>
c000d2a7:	90                   	nop
c000d2a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000d2b0:	a1 2c 1a 02 c0       	mov    eax,ds:0xc0021a2c
c000d2b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000d2b9:	0f 8d 39 01 00 00    	jge    c000d3f8 <loadACPITables(unsigned char*)+0x25c>
c000d2bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d2c3:	8b 04 c5 44 1a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde5bc]
c000d2ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d2da:	25 ff 0f 00 00       	and    eax,0xfff
c000d2df:	89 c6                	mov    esi,eax
c000d2e1:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c000d2e7:	83 ec 0c             	sub    esp,0xc
c000d2ea:	6a 01                	push   0x1
c000d2ec:	e8 ac b3 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d2f1:	83 c4 10             	add    esp,0x10
c000d2f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d2f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d2fe:	83 ec 0c             	sub    esp,0xc
c000d301:	6a 01                	push   0x1
c000d303:	6a 01                	push   0x1
c000d305:	50                   	push   eax
c000d306:	52                   	push   edx
c000d307:	53                   	push   ebx
c000d308:	e8 e3 bc ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d30d:	83 c4 20             	add    esp,0x20
c000d310:	09 f0                	or     eax,esi
c000d312:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d316:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d31a:	c1 e0 03             	shl    eax,0x3
c000d31d:	05 40 1a 02 c0       	add    eax,0xc0021a40
c000d322:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d32a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d32e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000d336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d33a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d33e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d342:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d346:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d34a:	89 c6                	mov    esi,eax
c000d34c:	89 d7                	mov    edi,edx
c000d34e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d350:	89 c8                	mov    eax,ecx
c000d352:	89 fa                	mov    edx,edi
c000d354:	89 f3                	mov    ebx,esi
c000d356:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d35a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000d35e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d362:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d36d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d371:	05 00 10 00 00       	add    eax,0x1000
c000d376:	c1 e8 0c             	shr    eax,0xc
c000d379:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d37d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d381:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d385:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d389:	25 ff 0f 00 00       	and    eax,0xfff
c000d38e:	89 c6                	mov    esi,eax
c000d390:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c000d396:	83 ec 0c             	sub    esp,0xc
c000d399:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000d39d:	e8 fb b2 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d3a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d3af:	83 ec 0c             	sub    esp,0xc
c000d3b2:	6a 01                	push   0x1
c000d3b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3b8:	50                   	push   eax
c000d3b9:	52                   	push   edx
c000d3ba:	53                   	push   ebx
c000d3bb:	e8 30 bc ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d3c0:	83 c4 20             	add    esp,0x20
c000d3c3:	09 f0                	or     eax,esi
c000d3c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3cd:	83 ec 0c             	sub    esp,0xc
c000d3d0:	50                   	push   eax
c000d3d1:	e8 bb b5 ff ff       	call   c0008991 <Virt::freeKernelVirtualPages(unsigned long)>
c000d3d6:	83 c4 10             	add    esp,0x10
c000d3d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d3dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d3e1:	89 14 c5 44 1a 02 c0 	mov    DWORD PTR [eax*8-0x3ffde5bc],edx
c000d3e8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000d3ec:	e9 bf fe ff ff       	jmp    c000d2b0 <loadACPITables(unsigned char*)+0x114>
c000d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f4:	90                   	nop
c000d3f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f8:	83 c4 60             	add    esp,0x60
c000d3fb:	5b                   	pop    ebx
c000d3fc:	5e                   	pop    esi
c000d3fd:	5f                   	pop    edi
c000d3fe:	c3                   	ret    
c000d3ff:	90                   	nop

c000d400 <findRSDT(unsigned char*)>:
c000d400:	57                   	push   edi
c000d401:	56                   	push   esi
c000d402:	53                   	push   ebx
c000d403:	83 ec 50             	sub    esp,0x50
c000d406:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d40b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d411:	83 e0 04             	and    eax,0x4
c000d414:	84 c0                	test   al,al
c000d416:	75 0c                	jne    c000d424 <findRSDT(unsigned char*)+0x24>
c000d418:	b8 00 00 00 00       	mov    eax,0x0
c000d41d:	e9 26 01 00 00       	jmp    c000d548 <findRSDT(unsigned char*)+0x148>
c000d422:	66 90                	xchg   ax,ax
c000d424:	89 e0                	mov    eax,esp
c000d426:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000d42a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d42e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d432:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000d43a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d43e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d442:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d446:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000d44a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000d44e:	89 c6                	mov    esi,eax
c000d450:	89 d7                	mov    edi,edx
c000d452:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d454:	89 c8                	mov    eax,ecx
c000d456:	89 fa                	mov    edx,edi
c000d458:	89 f3                	mov    ebx,esi
c000d45a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000d45e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d462:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d466:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d46a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000d46e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000d476:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d47a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d47e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d486:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d48a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d48e:	25 ff 0f 00 00       	and    eax,0xfff
c000d493:	89 c6                	mov    esi,eax
c000d495:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c000d49b:	83 ec 0c             	sub    esp,0xc
c000d49e:	6a 02                	push   0x2
c000d4a0:	e8 f8 b1 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d4ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d4b2:	83 ec 0c             	sub    esp,0xc
c000d4b5:	6a 01                	push   0x1
c000d4b7:	6a 02                	push   0x2
c000d4b9:	50                   	push   eax
c000d4ba:	52                   	push   edx
c000d4bb:	53                   	push   ebx
c000d4bc:	e8 2f bb ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d4c1:	83 c4 20             	add    esp,0x20
c000d4c4:	09 f0                	or     eax,esi
c000d4c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000d4ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d4ce:	25 ff 0f 00 00       	and    eax,0xfff
c000d4d3:	89 c6                	mov    esi,eax
c000d4d5:	8b 1d 14 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f514
c000d4db:	83 ec 0c             	sub    esp,0xc
c000d4de:	6a 02                	push   0x2
c000d4e0:	e8 b8 b1 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c000d4e5:	83 c4 10             	add    esp,0x10
c000d4e8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d4ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000d4f2:	83 ec 0c             	sub    esp,0xc
c000d4f5:	6a 01                	push   0x1
c000d4f7:	6a 02                	push   0x2
c000d4f9:	50                   	push   eax
c000d4fa:	52                   	push   edx
c000d4fb:	53                   	push   ebx
c000d4fc:	e8 ef ba ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000d501:	83 c4 20             	add    esp,0x20
c000d504:	09 f0                	or     eax,esi
c000d506:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d50a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000d50f:	75 13                	jne    c000d524 <findRSDT(unsigned char*)+0x124>
c000d511:	c6 05 40 1c 02 c0 00 	mov    BYTE PTR ds:0xc0021c40,0x0
c000d518:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d51c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d520:	eb 22                	jmp    c000d544 <findRSDT(unsigned char*)+0x144>
c000d522:	66 90                	xchg   ax,ax
c000d524:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000d529:	75 11                	jne    c000d53c <findRSDT(unsigned char*)+0x13c>
c000d52b:	c6 05 40 1c 02 c0 01 	mov    BYTE PTR ds:0xc0021c40,0x1
c000d532:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000d536:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d53a:	eb 08                	jmp    c000d544 <findRSDT(unsigned char*)+0x144>
c000d53c:	b8 00 00 00 00       	mov    eax,0x0
c000d541:	eb 05                	jmp    c000d548 <findRSDT(unsigned char*)+0x148>
c000d543:	90                   	nop
c000d544:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d548:	83 c4 50             	add    esp,0x50
c000d54b:	5b                   	pop    ebx
c000d54c:	5e                   	pop    esi
c000d54d:	5f                   	pop    edi
c000d54e:	c3                   	ret    
c000d54f:	90                   	nop

c000d550 <findDataTable(unsigned char*, char*)>:
c000d550:	83 ec 1c             	sub    esp,0x1c
c000d553:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d558:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d55e:	83 e0 04             	and    eax,0x4
c000d561:	84 c0                	test   al,al
c000d563:	75 07                	jne    c000d56c <findDataTable(unsigned char*, char*)+0x1c>
c000d565:	b8 00 00 00 00       	mov    eax,0x0
c000d56a:	eb 58                	jmp    c000d5c4 <findDataTable(unsigned char*, char*)+0x74>
c000d56c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d574:	a1 2c 1a 02 c0       	mov    eax,ds:0xc0021a2c
c000d579:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000d57d:	7d 3d                	jge    c000d5bc <findDataTable(unsigned char*, char*)+0x6c>
c000d57f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d583:	c1 e0 03             	shl    eax,0x3
c000d586:	05 40 1a 02 c0       	add    eax,0xc0021a40
c000d58b:	83 ec 04             	sub    esp,0x4
c000d58e:	6a 04                	push   0x4
c000d590:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d594:	50                   	push   eax
c000d595:	e8 16 2e ff ff       	call   c00003b0 <memcmp>
c000d59a:	83 c4 10             	add    esp,0x10
c000d59d:	85 c0                	test   eax,eax
c000d59f:	0f 94 c0             	sete   al
c000d5a2:	84 c0                	test   al,al
c000d5a4:	74 0e                	je     c000d5b4 <findDataTable(unsigned char*, char*)+0x64>
c000d5a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5aa:	8b 04 c5 44 1a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffde5bc]
c000d5b1:	eb 11                	jmp    c000d5c4 <findDataTable(unsigned char*, char*)+0x74>
c000d5b3:	90                   	nop
c000d5b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000d5b8:	eb ba                	jmp    c000d574 <findDataTable(unsigned char*, char*)+0x24>
c000d5ba:	66 90                	xchg   ax,ax
c000d5bc:	b8 00 00 00 00       	mov    eax,0x0
c000d5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c4:	83 c4 1c             	add    esp,0x1c
c000d5c7:	c3                   	ret    

c000d5c8 <scanMADT()>:
c000d5c8:	53                   	push   ebx
c000d5c9:	83 ec 38             	sub    esp,0x38
c000d5cc:	a1 40 f4 01 c0       	mov    eax,ds:0xc001f440
c000d5d1:	25 00 04 00 00       	and    eax,0x400
c000d5d6:	74 14                	je     c000d5ec <scanMADT()+0x24>
c000d5d8:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d5dd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d5e3:	83 e2 fb             	and    edx,0xfffffffb
c000d5e6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d5ec:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d5f1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000d5f7:	83 e0 04             	and    eax,0x4
c000d5fa:	84 c0                	test   al,al
c000d5fc:	0f 84 8a 04 00 00    	je     c000da8c <scanMADT()+0x4c4>
c000d602:	e8 05 fb ff ff       	call   c000d10c <findRSDP()>
c000d607:	a3 4c 1c 02 c0       	mov    ds:0xc0021c4c,eax
c000d60c:	a1 4c 1c 02 c0       	mov    eax,ds:0xc0021c4c
c000d611:	85 c0                	test   eax,eax
c000d613:	75 1b                	jne    c000d630 <scanMADT()+0x68>
c000d615:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d61a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d620:	83 e2 fb             	and    edx,0xfffffffb
c000d623:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d629:	e9 66 04 00 00       	jmp    c000da94 <scanMADT()+0x4cc>
c000d62e:	66 90                	xchg   ax,ax
c000d630:	a1 4c 1c 02 c0       	mov    eax,ds:0xc0021c4c
c000d635:	83 ec 0c             	sub    esp,0xc
c000d638:	50                   	push   eax
c000d639:	e8 c2 fd ff ff       	call   c000d400 <findRSDT(unsigned char*)>
c000d63e:	83 c4 10             	add    esp,0x10
c000d641:	a3 48 1c 02 c0       	mov    ds:0xc0021c48,eax
c000d646:	a1 48 1c 02 c0       	mov    eax,ds:0xc0021c48
c000d64b:	85 c0                	test   eax,eax
c000d64d:	75 19                	jne    c000d668 <scanMADT()+0xa0>
c000d64f:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d654:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d65a:	83 e2 fb             	and    edx,0xfffffffb
c000d65d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d663:	e9 2c 04 00 00       	jmp    c000da94 <scanMADT()+0x4cc>
c000d668:	a1 48 1c 02 c0       	mov    eax,ds:0xc0021c48
c000d66d:	83 ec 0c             	sub    esp,0xc
c000d670:	50                   	push   eax
c000d671:	e8 26 fb ff ff       	call   c000d19c <loadACPITables(unsigned char*)>
c000d676:	83 c4 10             	add    esp,0x10
c000d679:	a1 48 1c 02 c0       	mov    eax,ds:0xc0021c48
c000d67e:	83 ec 08             	sub    esp,0x8
c000d681:	68 e8 d8 01 c0       	push   0xc001d8e8
c000d686:	50                   	push   eax
c000d687:	e8 c4 fe ff ff       	call   c000d550 <findDataTable(unsigned char*, char*)>
c000d68c:	83 c4 10             	add    esp,0x10
c000d68f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d693:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d698:	75 1a                	jne    c000d6b4 <scanMADT()+0xec>
c000d69a:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000d69f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000d6a5:	83 e2 fe             	and    edx,0xfffffffe
c000d6a8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000d6ae:	e9 e1 03 00 00       	jmp    c000da94 <scanMADT()+0x4cc>
c000d6b3:	90                   	nop
c000d6b4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000d6bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d6c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000d6c7:	0f 87 c7 03 00 00    	ja     c000da94 <scanMADT()+0x4cc>
c000d6cd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000d6d5:	0f 87 b9 03 00 00    	ja     c000da94 <scanMADT()+0x4cc>
c000d6db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d6e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6e7:	8d 50 01             	lea    edx,[eax+0x1]
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d6f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d6f6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000d6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d6fe:	8d 50 01             	lea    edx,[eax+0x1]
c000d701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d709:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d70d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000d711:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000d716:	0f 86 74 03 00 00    	jbe    c000da90 <scanMADT()+0x4c8>
c000d71c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000d721:	75 5d                	jne    c000d780 <scanMADT()+0x1b8>
c000d723:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d727:	8d 50 01             	lea    edx,[eax+0x1]
c000d72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d72e:	8a 15 40 1e 02 c0    	mov    dl,BYTE PTR ds:0xc0021e40
c000d734:	81 e2 ff 00 00 00    	and    edx,0xff
c000d73a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d73e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d742:	88 82 80 1e 02 c0    	mov    BYTE PTR [edx-0x3ffde180],al
c000d748:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d74c:	8d 42 01             	lea    eax,[edx+0x1]
c000d74f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d753:	a0 40 1e 02 c0       	mov    al,ds:0xc0021e40
c000d758:	8d 48 01             	lea    ecx,[eax+0x1]
c000d75b:	88 0d 40 1e 02 c0    	mov    BYTE PTR ds:0xc0021e40,cl
c000d761:	25 ff 00 00 00       	and    eax,0xff
c000d766:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d76a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000d76e:	88 90 60 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde1a0],dl
c000d774:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d779:	e9 f6 02 00 00       	jmp    c000da74 <scanMADT()+0x4ac>
c000d77e:	66 90                	xchg   ax,ax
c000d780:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000d785:	0f 85 29 01 00 00    	jne    c000d8b4 <scanMADT()+0x2ec>
c000d78b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d78f:	8d 50 01             	lea    edx,[eax+0x1]
c000d792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d796:	8a 15 00 1d 02 c0    	mov    dl,BYTE PTR ds:0xc0021d00
c000d79c:	81 e2 ff 00 00 00    	and    edx,0xff
c000d7a2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000d7a6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000d7aa:	88 82 20 1d 02 c0    	mov    BYTE PTR [edx-0x3ffde2e0],al
c000d7b0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000d7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7bc:	01 d0                	add    eax,edx
c000d7be:	83 c0 2c             	add    eax,0x2c
c000d7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000d7c3:	31 d2                	xor    edx,edx
c000d7c5:	88 c2                	mov    dl,al
c000d7c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7cb:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7d2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d7d6:	25 ff 00 00 00       	and    eax,0xff
c000d7db:	c1 e0 08             	shl    eax,0x8
c000d7de:	89 d1                	mov    ecx,edx
c000d7e0:	09 c1                	or     ecx,eax
c000d7e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7e6:	8d 50 02             	lea    edx,[eax+0x2]
c000d7e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d7ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d7f1:	25 ff 00 00 00       	and    eax,0xff
c000d7f6:	c1 e0 10             	shl    eax,0x10
c000d7f9:	09 c1                	or     ecx,eax
c000d7fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7ff:	8d 50 03             	lea    edx,[eax+0x3]
c000d802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d806:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d80a:	25 ff 00 00 00       	and    eax,0xff
c000d80f:	c1 e0 18             	shl    eax,0x18
c000d812:	09 c1                	or     ecx,eax
c000d814:	89 ca                	mov    edx,ecx
c000d816:	a0 00 1d 02 c0       	mov    al,ds:0xc0021d00
c000d81b:	25 ff 00 00 00       	and    eax,0xff
c000d820:	89 14 85 40 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde2c0],edx
c000d827:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d82c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d834:	01 d0                	add    eax,edx
c000d836:	83 c0 2c             	add    eax,0x2c
c000d839:	8a 00                	mov    al,BYTE PTR [eax]
c000d83b:	31 d2                	xor    edx,edx
c000d83d:	88 c2                	mov    dl,al
c000d83f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d843:	8d 48 01             	lea    ecx,[eax+0x1]
c000d846:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d84a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d84e:	25 ff 00 00 00       	and    eax,0xff
c000d853:	c1 e0 08             	shl    eax,0x8
c000d856:	89 d1                	mov    ecx,edx
c000d858:	09 c1                	or     ecx,eax
c000d85a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d85e:	8d 50 02             	lea    edx,[eax+0x2]
c000d861:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d865:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d869:	25 ff 00 00 00       	and    eax,0xff
c000d86e:	c1 e0 10             	shl    eax,0x10
c000d871:	09 c1                	or     ecx,eax
c000d873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d877:	8d 50 03             	lea    edx,[eax+0x3]
c000d87a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d87e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d882:	25 ff 00 00 00       	and    eax,0xff
c000d887:	c1 e0 18             	shl    eax,0x18
c000d88a:	09 c1                	or     ecx,eax
c000d88c:	89 ca                	mov    edx,ecx
c000d88e:	a0 00 1d 02 c0       	mov    al,ds:0xc0021d00
c000d893:	25 ff 00 00 00       	and    eax,0xff
c000d898:	89 14 85 c0 1d 02 c0 	mov    DWORD PTR [eax*4-0x3ffde240],edx
c000d89f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d8a4:	a0 00 1d 02 c0       	mov    al,ds:0xc0021d00
c000d8a9:	40                   	inc    eax
c000d8aa:	a2 00 1d 02 c0       	mov    ds:0xc0021d00,al
c000d8af:	e9 c0 01 00 00       	jmp    c000da74 <scanMADT()+0x4ac>
c000d8b4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000d8b9:	0f 85 fd 00 00 00    	jne    c000d9bc <scanMADT()+0x3f4>
c000d8bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8c3:	8d 50 01             	lea    edx,[eax+0x1]
c000d8c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d8d2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d8d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8da:	8d 50 01             	lea    edx,[eax+0x1]
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d8e9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d8ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d8f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8f5:	01 d0                	add    eax,edx
c000d8f7:	83 c0 2c             	add    eax,0x2c
c000d8fa:	8a 00                	mov    al,BYTE PTR [eax]
c000d8fc:	31 d2                	xor    edx,edx
c000d8fe:	88 c2                	mov    dl,al
c000d900:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d904:	8d 48 01             	lea    ecx,[eax+0x1]
c000d907:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d90b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d90f:	25 ff 00 00 00       	and    eax,0xff
c000d914:	c1 e0 08             	shl    eax,0x8
c000d917:	89 d1                	mov    ecx,edx
c000d919:	09 c1                	or     ecx,eax
c000d91b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d91f:	8d 50 02             	lea    edx,[eax+0x2]
c000d922:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d926:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d92a:	25 ff 00 00 00       	and    eax,0xff
c000d92f:	c1 e0 10             	shl    eax,0x10
c000d932:	09 c1                	or     ecx,eax
c000d934:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d938:	8d 50 03             	lea    edx,[eax+0x3]
c000d93b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d93f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d943:	25 ff 00 00 00       	and    eax,0xff
c000d948:	c1 e0 18             	shl    eax,0x18
c000d94b:	09 c8                	or     eax,ecx
c000d94d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d951:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d956:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d95e:	01 d0                	add    eax,edx
c000d960:	83 c0 2c             	add    eax,0x2c
c000d963:	8a 00                	mov    al,BYTE PTR [eax]
c000d965:	25 ff 00 00 00       	and    eax,0xff
c000d96a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d96e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d971:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d975:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d979:	81 e2 ff 00 00 00    	and    edx,0xff
c000d97f:	c1 e2 08             	shl    edx,0x8
c000d982:	09 d0                	or     eax,edx
c000d984:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d989:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d98e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d992:	25 ff 00 00 00       	and    eax,0xff
c000d997:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d99b:	88 90 e0 ed 01 c0    	mov    BYTE PTR [eax-0x3ffe1220],dl
c000d9a1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000d9a5:	31 d2                	xor    edx,edx
c000d9a7:	88 c2                	mov    dl,al
c000d9a9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d9ae:	66 89 84 12 e0 1c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffde320],ax
c000d9b6:	e9 b9 00 00 00       	jmp    c000da74 <scanMADT()+0x4ac>
c000d9bb:	90                   	nop
c000d9bc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000d9c1:	0f 85 a1 00 00 00    	jne    c000da68 <scanMADT()+0x4a0>
c000d9c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9cb:	8d 50 01             	lea    edx,[eax+0x1]
c000d9ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9d6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d9da:	25 ff 00 00 00       	and    eax,0xff
c000d9df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9eb:	01 d0                	add    eax,edx
c000d9ed:	83 c0 2c             	add    eax,0x2c
c000d9f0:	8a 00                	mov    al,BYTE PTR [eax]
c000d9f2:	31 d2                	xor    edx,edx
c000d9f4:	88 c2                	mov    dl,al
c000d9f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d9fa:	8d 48 01             	lea    ecx,[eax+0x1]
c000d9fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000da01:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000da05:	25 ff 00 00 00       	and    eax,0xff
c000da0a:	c1 e0 08             	shl    eax,0x8
c000da0d:	09 d0                	or     eax,edx
c000da0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da13:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000da18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000da1c:	8d 50 01             	lea    edx,[eax+0x1]
c000da1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da27:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000da2b:	25 ff 00 00 00       	and    eax,0xff
c000da30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da38:	c1 e0 08             	shl    eax,0x8
c000da3b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000da3f:	89 c1                	mov    ecx,eax
c000da41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da45:	c1 e0 18             	shl    eax,0x18
c000da48:	89 c3                	mov    ebx,eax
c000da4a:	a1 50 1c 02 c0       	mov    eax,ds:0xc0021c50
c000da4f:	8d 50 01             	lea    edx,[eax+0x1]
c000da52:	89 15 50 1c 02 c0    	mov    DWORD PTR ds:0xc0021c50,edx
c000da58:	09 d9                	or     ecx,ebx
c000da5a:	89 ca                	mov    edx,ecx
c000da5c:	89 14 85 60 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde3a0],edx
c000da63:	eb 0f                	jmp    c000da74 <scanMADT()+0x4ac>
c000da65:	8d 76 00             	lea    esi,[esi+0x0]
c000da68:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000da6d:	75 05                	jne    c000da74 <scanMADT()+0x4ac>
c000da6f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000da74:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000da78:	31 d2                	xor    edx,edx
c000da7a:	88 c2                	mov    dl,al
c000da7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da80:	01 d0                	add    eax,edx
c000da82:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000da86:	e9 31 fc ff ff       	jmp    c000d6bc <scanMADT()+0xf4>
c000da8b:	90                   	nop
c000da8c:	90                   	nop
c000da8d:	eb 05                	jmp    c000da94 <scanMADT()+0x4cc>
c000da8f:	90                   	nop
c000da90:	90                   	nop
c000da91:	8d 76 00             	lea    esi,[esi+0x0]
c000da94:	83 c4 38             	add    esp,0x38
c000da97:	5b                   	pop    ebx
c000da98:	c3                   	ret    
c000da99:	90                   	nop
c000da9a:	66 90                	xchg   ax,ax

c000da9c <ACPI::ACPI()>:
c000da9c:	83 ec 0c             	sub    esp,0xc
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	83 ec 08             	sub    esp,0x8
c000daa6:	68 ed d8 01 c0       	push   0xc001d8ed
c000daab:	50                   	push   eax
c000daac:	e8 4b d4 ff ff       	call   c000aefc <Device::Device(char const*)>
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	ba 24 da 01 c0       	mov    edx,0xc001da24
c000dab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabd:	89 10                	mov    DWORD PTR [eax],edx
c000dabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000daca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dace:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000dad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000dae6:	e8 dd fa ff ff       	call   c000d5c8 <scanMADT()>
c000daeb:	90                   	nop
c000daec:	83 c4 0c             	add    esp,0xc
c000daef:	c3                   	ret    

c000daf0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000daf0:	83 ec 2c             	sub    esp,0x2c
c000daf3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000daf7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dafb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000daff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000db03:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000db08:	88 d0                	mov    al,dl
c000db0a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000db0e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000db13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db1b:	90                   	nop
c000db1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db20:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000db26:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000db2a:	0f 8d 9c 00 00 00    	jge    c000dbcc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000db30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db38:	83 c2 2a             	add    edx,0x2a
c000db3b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000db3f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000db44:	75 7a                	jne    c000dbc0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000db46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db4e:	83 c2 2a             	add    edx,0x2a
c000db51:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000db55:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000db59:	75 65                	jne    c000dbc0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000db5b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000db60:	74 3a                	je     c000db9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000db62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000db6a:	83 c2 2a             	add    edx,0x2a
c000db6d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000db71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db78:	39 c2                	cmp    edx,eax
c000db7a:	74 10                	je     c000db8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000db7c:	83 ec 0c             	sub    esp,0xc
c000db7f:	68 68 d8 01 c0       	push   0xc001d868
c000db84:	e8 ea 18 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000db89:	83 c4 10             	add    esp,0x10
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	68 f2 d8 01 c0       	push   0xc001d8f2
c000db94:	e8 da 18 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000db99:	83 c4 10             	add    esp,0x10
c000db9c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000dba0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dba4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dba8:	83 c2 2a             	add    edx,0x2a
c000dbab:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000dbaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000dbb1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dbb4:	89 01                	mov    DWORD PTR [ecx],eax
c000dbb6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000dbb9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dbbe:	66 90                	xchg   ax,ax
c000dbc0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000dbc4:	e9 53 ff ff ff       	jmp    c000db1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000dbc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dbcc:	90                   	nop
c000dbcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbd1:	83 c4 2c             	add    esp,0x2c
c000dbd4:	c2 04 00             	ret    0x4
c000dbd7:	90                   	nop

c000dbd8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000dbd8:	83 ec 1c             	sub    esp,0x1c
c000dbdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbdf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dbe3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dbe7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000dbec:	88 c8                	mov    al,cl
c000dbee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000dbf2:	88 d0                	mov    al,dl
c000dbf4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000dbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc06:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dc09:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000dc0d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000dc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc15:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc1f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000dc22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc26:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000dc2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dc35:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000dc39:	8d 48 01             	lea    ecx,[eax+0x1]
c000dc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc40:	83 c2 2a             	add    edx,0x2a
c000dc43:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000dc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc4b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000dc51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc55:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000dc58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dc5c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000dc60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc64:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc6a:	8d 50 01             	lea    edx,[eax+0x1]
c000dc6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc71:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000dc77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000dc81:	3d 00 02 00 00       	cmp    eax,0x200
c000dc86:	75 10                	jne    c000dc98 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000dc88:	83 ec 0c             	sub    esp,0xc
c000dc8b:	68 01 d9 01 c0       	push   0xc001d901
c000dc90:	e8 de 17 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000dc95:	83 c4 10             	add    esp,0x10
c000dc98:	90                   	nop
c000dc99:	83 c4 1c             	add    esp,0x1c
c000dc9c:	c3                   	ret    
c000dc9d:	90                   	nop
c000dc9e:	66 90                	xchg   ax,ax

c000dca0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000dca0:	b8 00 00 00 00       	mov    eax,0x0
c000dca5:	c3                   	ret    
c000dca6:	66 90                	xchg   ax,ax

c000dca8 <ACPI::detectPCI()>:
c000dca8:	53                   	push   ebx
c000dca9:	83 ec 28             	sub    esp,0x28
c000dcac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000dcb1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000dcb6:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000dcbb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcc1:	83 e0 04             	and    eax,0x4
c000dcc4:	84 c0                	test   al,al
c000dcc6:	74 2c                	je     c000dcf4 <ACPI::detectPCI()+0x4c>
c000dcc8:	a1 48 1c 02 c0       	mov    eax,ds:0xc0021c48
c000dccd:	83 ec 08             	sub    esp,0x8
c000dcd0:	68 1e d9 01 c0       	push   0xc001d91e
c000dcd5:	50                   	push   eax
c000dcd6:	e8 75 f8 ff ff       	call   c000d550 <findDataTable(unsigned char*, char*)>
c000dcdb:	83 c4 10             	add    esp,0x10
c000dcde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dce2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000dce7:	74 0b                	je     c000dcf4 <ACPI::detectPCI()+0x4c>
c000dce9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dcee:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dcf3:	90                   	nop
c000dcf4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000dcfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dd00:	8a 00                	mov    al,BYTE PTR [eax]
c000dd02:	3c 01                	cmp    al,0x1
c000dd04:	75 0e                	jne    c000dd14 <ACPI::detectPCI()+0x6c>
c000dd06:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd0b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dd10:	eb 2a                	jmp    c000dd3c <ACPI::detectPCI()+0x94>
c000dd12:	66 90                	xchg   ax,ax
c000dd14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dd18:	8a 00                	mov    al,BYTE PTR [eax]
c000dd1a:	3c 02                	cmp    al,0x2
c000dd1c:	75 1e                	jne    c000dd3c <ACPI::detectPCI()+0x94>
c000dd1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd23:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dd28:	74 12                	je     c000dd3c <ACPI::detectPCI()+0x94>
c000dd2a:	83 ec 0c             	sub    esp,0xc
c000dd2d:	68 98 d8 01 c0       	push   0xc001d898
c000dd32:	e8 3c 17 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000dd37:	83 c4 10             	add    esp,0x10
c000dd3a:	66 90                	xchg   ax,ax
c000dd3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000dd40:	83 f0 01             	xor    eax,0x1
c000dd43:	84 c0                	test   al,al
c000dd45:	74 41                	je     c000dd88 <ACPI::detectPCI()+0xe0>
c000dd47:	e8 04 24 ff ff       	call   c0000150 <manualPCIProbe>
c000dd4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd50:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dd55:	75 0d                	jne    c000dd64 <ACPI::detectPCI()+0xbc>
c000dd57:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd5c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000dd61:	eb 25                	jmp    c000dd88 <ACPI::detectPCI()+0xe0>
c000dd63:	90                   	nop
c000dd64:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000dd69:	75 1d                	jne    c000dd88 <ACPI::detectPCI()+0xe0>
c000dd6b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000dd70:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000dd75:	74 11                	je     c000dd88 <ACPI::detectPCI()+0xe0>
c000dd77:	83 ec 0c             	sub    esp,0xc
c000dd7a:	68 98 d8 01 c0       	push   0xc001d898
c000dd7f:	e8 ef 16 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000dd84:	83 c4 10             	add    esp,0x10
c000dd87:	90                   	nop
c000dd88:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000dd8d:	0f 84 85 00 00 00    	je     c000de18 <ACPI::detectPCI()+0x170>
c000dd93:	83 ec 0c             	sub    esp,0xc
c000dd96:	68 23 d9 01 c0       	push   0xc001d923
c000dd9b:	e8 1b 8e ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000dda0:	83 c4 10             	add    esp,0x10
c000dda3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ddab:	83 ec 0c             	sub    esp,0xc
c000ddae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ddb2:	e8 aa 8d ff ff       	call   c0006b61 <malloc>
c000ddb7:	83 c4 10             	add    esp,0x10
c000ddba:	89 c3                	mov    ebx,eax
c000ddbc:	83 ec 0c             	sub    esp,0xc
c000ddbf:	53                   	push   ebx
c000ddc0:	e8 bd 9b 00 00       	call   c0017982 <PCI::PCI()>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ddcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddd0:	83 ec 08             	sub    esp,0x8
c000ddd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd7:	50                   	push   eax
c000ddd8:	e8 87 cf ff ff       	call   c000ad64 <Device::addChild(Device*)>
c000dddd:	83 c4 10             	add    esp,0x10
c000dde0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dde4:	8b 00                	mov    eax,DWORD PTR [eax]
c000dde6:	83 c0 08             	add    eax,0x8
c000dde9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddeb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ddf0:	74 0a                	je     c000ddfc <ACPI::detectPCI()+0x154>
c000ddf2:	ba 01 00 00 00       	mov    edx,0x1
c000ddf7:	eb 0b                	jmp    c000de04 <ACPI::detectPCI()+0x15c>
c000ddf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddfc:	ba 02 00 00 00       	mov    edx,0x2
c000de01:	8d 76 00             	lea    esi,[esi+0x0]
c000de04:	6a 00                	push   0x0
c000de06:	6a 00                	push   0x0
c000de08:	52                   	push   edx
c000de09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de0d:	ff d0                	call   eax
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	e9 91 00 00 00       	jmp    c000dea8 <ACPI::detectPCI()+0x200>
c000de17:	90                   	nop
c000de18:	83 ec 0c             	sub    esp,0xc
c000de1b:	68 3b d9 01 c0       	push   0xc001d93b
c000de20:	e8 96 8d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000de25:	83 c4 10             	add    esp,0x10
c000de28:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000de2f:	83 ec 0c             	sub    esp,0xc
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	e8 26 8d ff ff       	call   c0006b61 <malloc>
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	89 c3                	mov    ebx,eax
c000de40:	83 ec 0c             	sub    esp,0xc
c000de43:	53                   	push   ebx
c000de44:	e8 65 a6 00 00       	call   c00184ae <IDE::IDE()>
c000de49:	83 c4 10             	add    esp,0x10
c000de4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000de50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de54:	83 ec 08             	sub    esp,0x8
c000de57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000de5b:	50                   	push   eax
c000de5c:	e8 03 cf ff ff       	call   c000ad64 <Device::addChild(Device*)>
c000de61:	83 c4 10             	add    esp,0x10
c000de64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de68:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000de72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de76:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000de7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de83:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000de8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de90:	8b 00                	mov    eax,DWORD PTR [eax]
c000de92:	83 c0 08             	add    eax,0x8
c000de95:	8b 00                	mov    eax,DWORD PTR [eax]
c000de97:	6a 00                	push   0x0
c000de99:	6a 00                	push   0x0
c000de9b:	6a 00                	push   0x0
c000de9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dea1:	ff d0                	call   eax
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	66 90                	xchg   ax,ax
c000dea8:	90                   	nop
c000dea9:	83 c4 28             	add    esp,0x28
c000deac:	5b                   	pop    ebx
c000dead:	c3                   	ret    
c000deae:	66 90                	xchg   ax,ax

c000deb0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000deb0:	83 ec 1c             	sub    esp,0x1c
c000deb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000deb7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000deba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000debe:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000dec4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dec8:	25 ff 00 00 00       	and    eax,0xff
c000decd:	83 ec 08             	sub    esp,0x8
c000ded0:	50                   	push   eax
c000ded1:	52                   	push   edx
c000ded2:	e8 37 83 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dede:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c000dee4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dee8:	25 ff 00 00 00       	and    eax,0xff
c000deed:	83 ec 04             	sub    esp,0x4
c000def0:	6a 01                	push   0x1
c000def2:	50                   	push   eax
c000def3:	52                   	push   edx
c000def4:	e8 2b 84 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c000def9:	83 c4 10             	add    esp,0x10
c000defc:	90                   	nop
c000defd:	83 c4 1c             	add    esp,0x1c
c000df00:	c3                   	ret    
c000df01:	90                   	nop
c000df02:	66 90                	xchg   ax,ax

c000df04 <ACPI::sleep()>:
c000df04:	83 ec 0c             	sub    esp,0xc
c000df07:	a1 20 1a 02 c0       	mov    eax,ds:0xc0021a20
c000df0c:	85 c0                	test   eax,eax
c000df0e:	74 08                	je     c000df18 <ACPI::sleep()+0x14>
c000df10:	a1 20 1a 02 c0       	mov    eax,ds:0xc0021a20
c000df15:	ff d0                	call   eax
c000df17:	90                   	nop
c000df18:	90                   	nop
c000df19:	83 c4 0c             	add    esp,0xc
c000df1c:	c3                   	ret    
c000df1d:	90                   	nop
c000df1e:	66 90                	xchg   ax,ax

c000df20 <ACPI::open(int, int, void*)>:
c000df20:	57                   	push   edi
c000df21:	56                   	push   esi
c000df22:	53                   	push   ebx
c000df23:	81 ec 70 01 00 00    	sub    esp,0x170
c000df29:	83 ec 0c             	sub    esp,0xc
c000df2c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000df33:	e8 70 fd ff ff       	call   c000dca8 <ACPI::detectPCI()>
c000df38:	83 c4 10             	add    esp,0x10
c000df3b:	83 ec 0c             	sub    esp,0xc
c000df3e:	68 c0 d8 01 c0       	push   0xc001d8c0
c000df43:	e8 73 8c ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	83 ec 0c             	sub    esp,0xc
c000df4e:	68 50 d9 01 c0       	push   0xc001d950
c000df53:	e8 24 35 00 00       	call   c001147c <Thr::loadKernelSymbolTable(char const*)>
c000df58:	83 c4 10             	add    esp,0x10
c000df5b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000df63:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000df6e:	83 ec 0c             	sub    esp,0xc
c000df71:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000df78:	e8 e4 8b ff ff       	call   c0006b61 <malloc>
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	89 c3                	mov    ebx,eax
c000df82:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c000df87:	83 ec 04             	sub    esp,0x4
c000df8a:	50                   	push   eax
c000df8b:	68 6e d9 01 c0       	push   0xc001d96e
c000df90:	53                   	push   ebx
c000df91:	e8 04 bf ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000dfa0:	83 ec 08             	sub    esp,0x8
c000dfa3:	6a 01                	push   0x1
c000dfa5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dfac:	e8 a9 bf ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c000dfb1:	83 c4 10             	add    esp,0x10
c000dfb4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000dfbb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000dfc3:	75 17                	jne    c000dfdc <ACPI::open(int, int, void*)+0xbc>
c000dfc5:	83 ec 0c             	sub    esp,0xc
c000dfc8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000dfcf:	e8 e4 bf ff ff       	call   c0009fb8 <File::close()>
c000dfd4:	83 c4 10             	add    esp,0x10
c000dfd7:	eb 0b                	jmp    c000dfe4 <ACPI::open(int, int, void*)+0xc4>
c000dfd9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfdc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000dfe4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000dfec:	74 1e                	je     c000e00c <ACPI::open(int, int, void*)+0xec>
c000dfee:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000dff5:	8b 00                	mov    eax,DWORD PTR [eax]
c000dff7:	83 c0 08             	add    eax,0x8
c000dffa:	8b 00                	mov    eax,DWORD PTR [eax]
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000e006:	ff d0                	call   eax
c000e008:	83 c4 10             	add    esp,0x10
c000e00b:	90                   	nop
c000e00c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000e013:	83 f0 01             	xor    eax,0x1
c000e016:	84 c0                	test   al,al
c000e018:	74 42                	je     c000e05c <ACPI::open(int, int, void*)+0x13c>
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	68 8c d9 01 c0       	push   0xc001d98c
c000e022:	e8 94 8b ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000e027:	83 c4 10             	add    esp,0x10
c000e02a:	83 ec 04             	sub    esp,0x4
c000e02d:	6a 0c                	push   0xc
c000e02f:	68 a7 d9 01 c0       	push   0xc001d9a7
c000e034:	68 b8 d9 01 c0       	push   0xc001d9b8
c000e039:	e8 3d 1c 00 00       	call   c000fc7b <Reg::readIntWithDefault(char*, char*, int)>
c000e03e:	83 c4 10             	add    esp,0x10
c000e041:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000e048:	83 ec 0c             	sub    esp,0xc
c000e04b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000e052:	e8 50 a8 ff ff       	call   c00088a7 <Virt::setupPageSwapping(int)>
c000e057:	83 c4 10             	add    esp,0x10
c000e05a:	66 90                	xchg   ax,ax
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	68 2f ca 01 c0       	push   0xc001ca2f
c000e064:	e8 52 8b ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000e069:	83 c4 10             	add    esp,0x10
c000e06c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000e073:	83 ec 08             	sub    esp,0x8
c000e076:	6a 12                	push   0x12
c000e078:	50                   	push   eax
c000e079:	e8 fe cf ff ff       	call   c000b07c <getDevicesOfType(DeviceType)>
c000e07e:	83 c4 0c             	add    esp,0xc
c000e081:	8d 76 00             	lea    esi,[esi+0x0]
c000e084:	83 ec 0c             	sub    esp,0xc
c000e087:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e08e:	50                   	push   eax
c000e08f:	e8 a8 dd 00 00       	call   c001be3c <LinkedList<Device>::isEmpty()>
c000e094:	83 c4 10             	add    esp,0x10
c000e097:	83 f0 01             	xor    eax,0x1
c000e09a:	84 c0                	test   al,al
c000e09c:	0f 84 46 01 00 00    	je     c000e1e8 <ACPI::open(int, int, void*)+0x2c8>
c000e0a2:	83 ec 0c             	sub    esp,0xc
c000e0a5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e0ac:	50                   	push   eax
c000e0ad:	e8 a6 dd 00 00       	call   c001be58 <LinkedList<Device>::getFirstElement()>
c000e0b2:	83 c4 10             	add    esp,0x10
c000e0b5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000e0bc:	83 ec 0c             	sub    esp,0xc
c000e0bf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e0c6:	50                   	push   eax
c000e0c7:	e8 94 dd 00 00       	call   c001be60 <LinkedList<Device>::removeFirst()>
c000e0cc:	83 c4 10             	add    esp,0x10
c000e0cf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000e0d6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000e0dd:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000e0e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e0e8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000e0ee:	ba 09 00 00 00       	mov    edx,0x9
c000e0f3:	fc                   	cld    
c000e0f4:	89 c7                	mov    edi,eax
c000e0f6:	89 de                	mov    esi,ebx
c000e0f8:	89 d1                	mov    ecx,edx
c000e0fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0fc:	83 ec 08             	sub    esp,0x8
c000e0ff:	8d 44 24 38          	lea    eax,[esp+0x38]
c000e103:	50                   	push   eax
c000e104:	83 ec 24             	sub    esp,0x24
c000e107:	89 e0                	mov    eax,esp
c000e109:	89 c3                	mov    ebx,eax
c000e10b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000e10f:	ba 09 00 00 00       	mov    edx,0x9
c000e114:	89 df                	mov    edi,ebx
c000e116:	89 c6                	mov    esi,eax
c000e118:	89 d1                	mov    ecx,edx
c000e11a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e11c:	e8 43 9d 00 00       	call   c0017e64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000e121:	83 c4 30             	add    esp,0x30
c000e124:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000e12b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000e133:	0f 84 4b ff ff ff    	je     c000e084 <ACPI::open(int, int, void*)+0x164>
c000e139:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000e144:	83 ec 0c             	sub    esp,0xc
c000e147:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e14e:	e8 0e 8a ff ff       	call   c0006b61 <malloc>
c000e153:	83 c4 10             	add    esp,0x10
c000e156:	89 c3                	mov    ebx,eax
c000e158:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c000e15d:	83 ec 04             	sub    esp,0x4
c000e160:	50                   	push   eax
c000e161:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e168:	53                   	push   ebx
c000e169:	e8 2c bd ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e182:	e8 41 c0 ff ff       	call   c000a1c8 <File::exists()>
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	84 c0                	test   al,al
c000e18c:	74 2a                	je     c000e1b8 <ACPI::open(int, int, void*)+0x298>
c000e18e:	83 ec 08             	sub    esp,0x8
c000e191:	6a 01                	push   0x1
c000e193:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e19a:	e8 54 3d 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	83 ec 08             	sub    esp,0x8
c000e1a5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000e1ac:	50                   	push   eax
c000e1ad:	e8 72 3f 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000e1b2:	83 c4 10             	add    esp,0x10
c000e1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000e1c0:	0f 84 be fe ff ff    	je     c000e084 <ACPI::open(int, int, void*)+0x164>
c000e1c6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000e1cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1cf:	83 c0 08             	add    eax,0x8
c000e1d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1d4:	83 ec 0c             	sub    esp,0xc
c000e1d7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000e1de:	ff d0                	call   eax
c000e1e0:	83 c4 10             	add    esp,0x10
c000e1e3:	e9 9c fe ff ff       	jmp    c000e084 <ACPI::open(int, int, void*)+0x164>
c000e1e8:	83 ec 0c             	sub    esp,0xc
c000e1eb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000e1f2:	50                   	push   eax
c000e1f3:	e8 40 dc 00 00       	call   c001be38 <LinkedList<Device>::~LinkedList()>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	8b 1d 28 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f428
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	6a 01                	push   0x1
c000e206:	68 bf d9 01 c0       	push   0xc001d9bf
c000e20b:	e8 e3 3c 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000e210:	83 c4 10             	add    esp,0x10
c000e213:	83 ec 08             	sub    esp,0x8
c000e216:	53                   	push   ebx
c000e217:	50                   	push   eax
c000e218:	e8 07 3f 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000e21d:	83 c4 10             	add    esp,0x10
c000e220:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000e225:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e22b:	83 e0 04             	and    eax,0x4
c000e22e:	84 c0                	test   al,al
c000e230:	0f 84 16 01 00 00    	je     c000e34c <ACPI::open(int, int, void*)+0x42c>
c000e236:	83 ec 0c             	sub    esp,0xc
c000e239:	68 dc d9 01 c0       	push   0xc001d9dc
c000e23e:	e8 78 89 ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000e243:	83 c4 10             	add    esp,0x10
c000e246:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000e25b:	e8 01 89 ff ff       	call   c0006b61 <malloc>
c000e260:	83 c4 10             	add    esp,0x10
c000e263:	89 c3                	mov    ebx,eax
c000e265:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c000e26a:	83 ec 04             	sub    esp,0x4
c000e26d:	50                   	push   eax
c000e26e:	68 f9 d9 01 c0       	push   0xc001d9f9
c000e273:	53                   	push   ebx
c000e274:	e8 21 bc ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000e279:	83 c4 10             	add    esp,0x10
c000e27c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000e283:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e28b:	74 1b                	je     c000e2a8 <ACPI::open(int, int, void*)+0x388>
c000e28d:	83 ec 0c             	sub    esp,0xc
c000e290:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e297:	e8 2c bf ff ff       	call   c000a1c8 <File::exists()>
c000e29c:	83 c4 10             	add    esp,0x10
c000e29f:	84 c0                	test   al,al
c000e2a1:	74 05                	je     c000e2a8 <ACPI::open(int, int, void*)+0x388>
c000e2a3:	b0 01                	mov    al,0x1
c000e2a5:	eb 05                	jmp    c000e2ac <ACPI::open(int, int, void*)+0x38c>
c000e2a7:	90                   	nop
c000e2a8:	b0 00                	mov    al,0x0
c000e2aa:	66 90                	xchg   ax,ax
c000e2ac:	84 c0                	test   al,al
c000e2ae:	74 28                	je     c000e2d8 <ACPI::open(int, int, void*)+0x3b8>
c000e2b0:	83 ec 08             	sub    esp,0x8
c000e2b3:	6a 01                	push   0x1
c000e2b5:	68 f9 d9 01 c0       	push   0xc001d9f9
c000e2ba:	e8 34 3c 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000e2bf:	83 c4 10             	add    esp,0x10
c000e2c2:	83 ec 08             	sub    esp,0x8
c000e2c5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000e2cc:	50                   	push   eax
c000e2cd:	e8 52 3e 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000e2d2:	83 c4 10             	add    esp,0x10
c000e2d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e2e0:	74 2a                	je     c000e30c <ACPI::open(int, int, void*)+0x3ec>
c000e2e2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000e2ea:	74 20                	je     c000e30c <ACPI::open(int, int, void*)+0x3ec>
c000e2ec:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000e2f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2f5:	83 c0 08             	add    eax,0x8
c000e2f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2fa:	83 ec 0c             	sub    esp,0xc
c000e2fd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000e304:	ff d0                	call   eax
c000e306:	83 c4 10             	add    esp,0x10
c000e309:	8d 76 00             	lea    esi,[esi+0x0]
c000e30c:	a1 48 1c 02 c0       	mov    eax,ds:0xc0021c48
c000e311:	83 ec 08             	sub    esp,0x8
c000e314:	68 16 da 01 c0       	push   0xc001da16
c000e319:	50                   	push   eax
c000e31a:	e8 31 f2 ff ff       	call   c000d550 <findDataTable(unsigned char*, char*)>
c000e31f:	83 c4 10             	add    esp,0x10
c000e322:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000e329:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000e331:	74 19                	je     c000e34c <ACPI::open(int, int, void*)+0x42c>
c000e333:	83 ec 08             	sub    esp,0x8
c000e336:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000e33d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000e344:	e8 67 fb ff ff       	call   c000deb0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000e349:	83 c4 10             	add    esp,0x10
c000e34c:	b8 00 00 00 00       	mov    eax,0x0
c000e351:	81 c4 70 01 00 00    	add    esp,0x170
c000e357:	5b                   	pop    ebx
c000e358:	5e                   	pop    esi
c000e359:	5f                   	pop    edi
c000e35a:	c3                   	ret    
c000e35b:	90                   	nop

c000e35c <CPU::close(int, int, void*)>:
c000e35c:	31 c0                	xor    eax,eax
c000e35e:	c3                   	ret    
c000e35f:	90                   	nop

c000e360 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000e360:	60                   	pusha  
c000e361:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e369:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e36d:	9c                   	pushf  
c000e36e:	fa                   	cli    
c000e36f:	0f 09                	wbinvd 
c000e371:	0f 30                	wrmsr  
c000e373:	9d                   	popf   
c000e374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e378:	89 02                	mov    DWORD PTR [edx],eax
c000e37a:	61                   	popa   
c000e37b:	c3                   	ret    

c000e37c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000e37c:	60                   	pusha  
c000e37d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e381:	9c                   	pushf  
c000e382:	fa                   	cli    
c000e383:	0f 09                	wbinvd 
c000e385:	31 c0                	xor    eax,eax
c000e387:	31 d2                	xor    edx,edx
c000e389:	0f 32                	rdmsr  
c000e38b:	9d                   	popf   
c000e38c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e390:	89 02                	mov    DWORD PTR [edx],eax
c000e392:	61                   	popa   
c000e393:	c3                   	ret    

c000e394 <CPU::AMD_K6_writeback(int, int, int)>:
c000e394:	56                   	push   esi
c000e395:	53                   	push   ebx
c000e396:	83 ec 10             	sub    esp,0x10
c000e399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000e3a2:	75 5d                	jne    c000e401 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e3a4:	83 f8 08             	cmp    eax,0x8
c000e3a7:	75 09                	jne    c000e3b2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000e3a9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000e3ae:	7e 13                	jle    c000e3c3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e3b0:	eb 30                	jmp    c000e3e2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e3b2:	83 f8 06             	cmp    eax,0x6
c000e3b5:	7c 4a                	jl     c000e401 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e3b7:	83 f8 07             	cmp    eax,0x7
c000e3ba:	7e 07                	jle    c000e3c3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000e3bc:	83 f8 09             	cmp    eax,0x9
c000e3bf:	74 21                	je     c000e3e2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000e3c1:	eb 3e                	jmp    c000e401 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000e3c3:	89 e6                	mov    esi,esp
c000e3c5:	8b 1d 4c f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f44c
c000e3cb:	56                   	push   esi
c000e3cc:	c1 eb 15             	shr    ebx,0x15
c000e3cf:	68 82 00 00 c0       	push   0xc0000082
c000e3d4:	83 e3 7e             	and    ebx,0x7e
c000e3d7:	e8 a0 ff ff ff       	call   c000e37c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e3dc:	56                   	push   esi
c000e3dd:	6a 00                	push   0x0
c000e3df:	53                   	push   ebx
c000e3e0:	eb 12                	jmp    c000e3f4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000e3e2:	89 e3                	mov    ebx,esp
c000e3e4:	53                   	push   ebx
c000e3e5:	68 82 00 00 c0       	push   0xc0000082
c000e3ea:	e8 8d ff ff ff       	call   c000e37c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000e3ef:	53                   	push   ebx
c000e3f0:	6a 00                	push   0x0
c000e3f2:	6a 00                	push   0x0
c000e3f4:	68 82 00 00 c0       	push   0xc0000082
c000e3f9:	e8 62 ff ff ff       	call   c000e360 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000e3fe:	83 c4 18             	add    esp,0x18
c000e401:	83 c4 10             	add    esp,0x10
c000e404:	5b                   	pop    ebx
c000e405:	5e                   	pop    esi
c000e406:	c3                   	ret    
c000e407:	90                   	nop

c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000e408:	55                   	push   ebp
c000e409:	57                   	push   edi
c000e40a:	56                   	push   esi
c000e40b:	53                   	push   ebx
c000e40c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e410:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e414:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e418:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000e41c:	39 05 f0 ed 01 c0    	cmp    DWORD PTR ds:0xc001edf0,eax
c000e422:	75 23                	jne    c000e447 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000e424:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c000e429:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e42d:	89 06                	mov    DWORD PTR [esi],eax
c000e42f:	a1 a8 1e 02 c0       	mov    eax,ds:0xc0021ea8
c000e434:	89 07                	mov    DWORD PTR [edi],eax
c000e436:	a1 a4 1e 02 c0       	mov    eax,ds:0xc0021ea4
c000e43b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e43e:	a1 a0 1e 02 c0       	mov    eax,ds:0xc0021ea0
c000e443:	89 02                	mov    DWORD PTR [edx],eax
c000e445:	eb 3f                	jmp    c000e486 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000e447:	31 c9                	xor    ecx,ecx
c000e449:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e44d:	0f a2                	cpuid  
c000e44f:	89 06                	mov    DWORD PTR [esi],eax
c000e451:	89 1f                	mov    DWORD PTR [edi],ebx
c000e453:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e457:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000e45a:	89 10                	mov    DWORD PTR [eax],edx
c000e45c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e460:	a3 f0 ed 01 c0       	mov    ds:0xc001edf0,eax
c000e465:	8b 06                	mov    eax,DWORD PTR [esi]
c000e467:	a3 ac 1e 02 c0       	mov    ds:0xc0021eac,eax
c000e46c:	8b 07                	mov    eax,DWORD PTR [edi]
c000e46e:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c000e473:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e476:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c000e47b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e47f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e481:	a3 a0 1e 02 c0       	mov    ds:0xc0021ea0,eax
c000e486:	5b                   	pop    ebx
c000e487:	5e                   	pop    esi
c000e488:	5f                   	pop    edi
c000e489:	5d                   	pop    ebp
c000e48a:	c3                   	ret    
c000e48b:	90                   	nop

c000e48c <CPU::cpuidCheckEDX(unsigned int)>:
c000e48c:	83 ec 10             	sub    esp,0x10
c000e48f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e493:	50                   	push   eax
c000e494:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e498:	50                   	push   eax
c000e499:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e49d:	50                   	push   eax
c000e49e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4a2:	50                   	push   eax
c000e4a3:	6a 01                	push   0x1
c000e4a5:	e8 5e ff ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e4aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ae:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000e4b2:	0f 95 c0             	setne  al
c000e4b5:	83 c4 24             	add    esp,0x24
c000e4b8:	c3                   	ret    
c000e4b9:	90                   	nop

c000e4ba <CPU::cpuidCheckECX(unsigned int)>:
c000e4ba:	83 ec 10             	sub    esp,0x10
c000e4bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4c1:	50                   	push   eax
c000e4c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4c6:	50                   	push   eax
c000e4c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4cb:	50                   	push   eax
c000e4cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4d0:	50                   	push   eax
c000e4d1:	6a 01                	push   0x1
c000e4d3:	e8 30 ff ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e4d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4dc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e4e0:	0f 95 c0             	setne  al
c000e4e3:	83 c4 24             	add    esp,0x24
c000e4e6:	c3                   	ret    
c000e4e7:	90                   	nop

c000e4e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000e4e8:	83 ec 10             	sub    esp,0x10
c000e4eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4ef:	50                   	push   eax
c000e4f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4f4:	50                   	push   eax
c000e4f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4f9:	50                   	push   eax
c000e4fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e4fe:	50                   	push   eax
c000e4ff:	6a 07                	push   0x7
c000e501:	e8 02 ff ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e506:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e50a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000e50e:	0f 95 c0             	setne  al
c000e511:	83 c4 24             	add    esp,0x24
c000e514:	c3                   	ret    
c000e515:	90                   	nop

c000e516 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000e516:	83 ec 10             	sub    esp,0x10
c000e519:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e51d:	50                   	push   eax
c000e51e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e522:	50                   	push   eax
c000e523:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e527:	50                   	push   eax
c000e528:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e52c:	50                   	push   eax
c000e52d:	6a 07                	push   0x7
c000e52f:	e8 d4 fe ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e534:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e538:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000e53c:	0f 95 c0             	setne  al
c000e53f:	83 c4 24             	add    esp,0x24
c000e542:	c3                   	ret    
c000e543:	90                   	nop

c000e544 <CPU::CPU()>:
c000e544:	83 ec 0c             	sub    esp,0xc
c000e547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54b:	83 ec 08             	sub    esp,0x8
c000e54e:	68 39 db 01 c0       	push   0xc001db39
c000e553:	50                   	push   eax
c000e554:	e8 a3 c9 ff ff       	call   c000aefc <Device::Device(char const*)>
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	ba c0 db 01 c0       	mov    edx,0xc001dbc0
c000e561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e565:	89 10                	mov    DWORD PTR [eax],edx
c000e567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000e575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e579:	05 78 01 00 00       	add    eax,0x178
c000e57e:	83 ec 0c             	sub    esp,0xc
c000e581:	50                   	push   eax
c000e582:	e8 5b 7e ff ff       	call   c00063e2 <GDT::GDT()>
c000e587:	83 c4 10             	add    esp,0x10
c000e58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58e:	05 7c 09 00 00       	add    eax,0x97c
c000e593:	83 ec 0c             	sub    esp,0xc
c000e596:	50                   	push   eax
c000e597:	e8 c0 80 ff ff       	call   c000665c <IDT::IDT()>
c000e59c:	83 c4 10             	add    esp,0x10
c000e59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a3:	05 7c 11 00 00       	add    eax,0x117c
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	50                   	push   eax
c000e5ac:	e8 2f 9a ff ff       	call   c0007fe0 <TSS::TSS()>
c000e5b1:	83 c4 10             	add    esp,0x10
c000e5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000e5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000e5cd:	90                   	nop
c000e5ce:	83 c4 0c             	add    esp,0xc
c000e5d1:	c3                   	ret    

c000e5d2 <CPU::displayFeatures()>:
c000e5d2:	c3                   	ret    
c000e5d3:	90                   	nop

c000e5d4 <CPU::detectFeatures()>:
c000e5d4:	55                   	push   ebp
c000e5d5:	57                   	push   edi
c000e5d6:	56                   	push   esi
c000e5d7:	53                   	push   ebx
c000e5d8:	83 ec 30             	sub    esp,0x30
c000e5db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e5df:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000e5e9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000e5f0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000e5f6:	6a 0d                	push   0xd
c000e5f8:	6a 00                	push   0x0
c000e5fa:	55                   	push   ebp
c000e5fb:	e8 f0 1e ff ff       	call   c00004f0 <memset>
c000e600:	83 c4 10             	add    esp,0x10
c000e603:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000e608:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000e60f:	0f 84 d5 05 00 00    	je     c000ebea <CPU::detectFeatures()+0x616>
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	89 ef                	mov    edi,ebp
c000e61a:	6a 10                	push   0x10
c000e61c:	e8 6b fe ff ff       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000e621:	83 e0 01             	and    eax,0x1
c000e624:	8d 14 00             	lea    edx,[eax+eax*1]
c000e627:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e62d:	83 e0 fd             	and    eax,0xfffffffd
c000e630:	09 d0                	or     eax,edx
c000e632:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e638:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000e63f:	e8 48 fe ff ff       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000e644:	83 e0 01             	and    eax,0x1
c000e647:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e64e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e654:	83 e0 fb             	and    eax,0xfffffffb
c000e657:	09 d0                	or     eax,edx
c000e659:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e65f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e666:	e8 21 fe ff ff       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000e66b:	83 e0 01             	and    eax,0x1
c000e66e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e675:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e67b:	83 e0 f7             	and    eax,0xfffffff7
c000e67e:	09 d0                	or     eax,edx
c000e680:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e686:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000e68d:	e8 fa fd ff ff       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000e692:	83 e0 01             	and    eax,0x1
c000e695:	c1 e0 04             	shl    eax,0x4
c000e698:	88 c2                	mov    dl,al
c000e69a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e6a0:	83 e0 ef             	and    eax,0xffffffef
c000e6a3:	09 d0                	or     eax,edx
c000e6a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e6ab:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000e6b2:	e8 d5 fd ff ff       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000e6b7:	83 e0 01             	and    eax,0x1
c000e6ba:	c1 e0 05             	shl    eax,0x5
c000e6bd:	88 c2                	mov    dl,al
c000e6bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e6c5:	83 e0 df             	and    eax,0xffffffdf
c000e6c8:	09 d0                	or     eax,edx
c000e6ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e6d0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e6d7:	e8 b0 fd ff ff       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000e6dc:	83 e0 01             	and    eax,0x1
c000e6df:	8d 14 00             	lea    edx,[eax+eax*1]
c000e6e2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000e6e8:	83 e0 fd             	and    eax,0xfffffffd
c000e6eb:	09 d0                	or     eax,edx
c000e6ed:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000e6f3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000e6fa:	e8 8d fd ff ff       	call   c000e48c <CPU::cpuidCheckEDX(unsigned int)>
c000e6ff:	83 e0 01             	and    eax,0x1
c000e702:	c1 e0 06             	shl    eax,0x6
c000e705:	88 c2                	mov    dl,al
c000e707:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e70d:	83 e0 bf             	and    eax,0xffffffbf
c000e710:	09 d0                	or     eax,edx
c000e712:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e718:	58                   	pop    eax
c000e719:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e71d:	50                   	push   eax
c000e71e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e722:	50                   	push   eax
c000e723:	8d 74 24 28          	lea    esi,[esp+0x28]
c000e727:	56                   	push   esi
c000e728:	8d 44 24 28          	lea    eax,[esp+0x28]
c000e72c:	50                   	push   eax
c000e72d:	6a 00                	push   0x0
c000e72f:	e8 d4 fc ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e734:	b8 04 00 00 00       	mov    eax,0x4
c000e739:	89 c1                	mov    ecx,eax
c000e73b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e73d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000e743:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e747:	89 c1                	mov    ecx,eax
c000e749:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e74b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000e751:	8d 74 24 38          	lea    esi,[esp+0x38]
c000e755:	89 c1                	mov    ecx,eax
c000e757:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e759:	83 c4 18             	add    esp,0x18
c000e75c:	68 48 da 01 c0       	push   0xc001da48
c000e761:	55                   	push   ebp
c000e762:	e8 99 1f ff ff       	call   c0000700 <strcmp>
c000e767:	83 c4 10             	add    esp,0x10
c000e76a:	85 c0                	test   eax,eax
c000e76c:	75 0f                	jne    c000e77d <CPU::detectFeatures()+0x1a9>
c000e76e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000e778:	e9 22 02 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e77d:	50                   	push   eax
c000e77e:	50                   	push   eax
c000e77f:	68 55 da 01 c0       	push   0xc001da55
c000e784:	55                   	push   ebp
c000e785:	e8 76 1f ff ff       	call   c0000700 <strcmp>
c000e78a:	83 c4 10             	add    esp,0x10
c000e78d:	85 c0                	test   eax,eax
c000e78f:	74 dd                	je     c000e76e <CPU::detectFeatures()+0x19a>
c000e791:	50                   	push   eax
c000e792:	50                   	push   eax
c000e793:	68 62 da 01 c0       	push   0xc001da62
c000e798:	55                   	push   ebp
c000e799:	e8 62 1f ff ff       	call   c0000700 <strcmp>
c000e79e:	83 c4 10             	add    esp,0x10
c000e7a1:	85 c0                	test   eax,eax
c000e7a3:	74 2a                	je     c000e7cf <CPU::detectFeatures()+0x1fb>
c000e7a5:	50                   	push   eax
c000e7a6:	50                   	push   eax
c000e7a7:	68 6f da 01 c0       	push   0xc001da6f
c000e7ac:	55                   	push   ebp
c000e7ad:	e8 4e 1f ff ff       	call   c0000700 <strcmp>
c000e7b2:	83 c4 10             	add    esp,0x10
c000e7b5:	85 c0                	test   eax,eax
c000e7b7:	74 16                	je     c000e7cf <CPU::detectFeatures()+0x1fb>
c000e7b9:	50                   	push   eax
c000e7ba:	50                   	push   eax
c000e7bb:	68 7c da 01 c0       	push   0xc001da7c
c000e7c0:	55                   	push   ebp
c000e7c1:	e8 3a 1f ff ff       	call   c0000700 <strcmp>
c000e7c6:	83 c4 10             	add    esp,0x10
c000e7c9:	85 c0                	test   eax,eax
c000e7cb:	74 48                	je     c000e815 <CPU::detectFeatures()+0x241>
c000e7cd:	eb 0f                	jmp    c000e7de <CPU::detectFeatures()+0x20a>
c000e7cf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000e7d9:	e9 c1 01 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e7de:	50                   	push   eax
c000e7df:	50                   	push   eax
c000e7e0:	68 89 da 01 c0       	push   0xc001da89
c000e7e5:	55                   	push   ebp
c000e7e6:	e8 15 1f ff ff       	call   c0000700 <strcmp>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	85 c0                	test   eax,eax
c000e7f0:	74 23                	je     c000e815 <CPU::detectFeatures()+0x241>
c000e7f2:	57                   	push   edi
c000e7f3:	57                   	push   edi
c000e7f4:	68 96 da 01 c0       	push   0xc001da96
c000e7f9:	55                   	push   ebp
c000e7fa:	e8 01 1f ff ff       	call   c0000700 <strcmp>
c000e7ff:	83 c4 10             	add    esp,0x10
c000e802:	85 c0                	test   eax,eax
c000e804:	75 1e                	jne    c000e824 <CPU::detectFeatures()+0x250>
c000e806:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000e810:	e9 8a 01 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e815:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000e81f:	e9 7b 01 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e824:	56                   	push   esi
c000e825:	56                   	push   esi
c000e826:	68 a3 da 01 c0       	push   0xc001daa3
c000e82b:	55                   	push   ebp
c000e82c:	e8 cf 1e ff ff       	call   c0000700 <strcmp>
c000e831:	83 c4 10             	add    esp,0x10
c000e834:	85 c0                	test   eax,eax
c000e836:	75 0f                	jne    c000e847 <CPU::detectFeatures()+0x273>
c000e838:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000e842:	e9 58 01 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e847:	51                   	push   ecx
c000e848:	51                   	push   ecx
c000e849:	68 62 da 01 c0       	push   0xc001da62
c000e84e:	55                   	push   ebp
c000e84f:	e8 ac 1e ff ff       	call   c0000700 <strcmp>
c000e854:	83 c4 10             	add    esp,0x10
c000e857:	85 c0                	test   eax,eax
c000e859:	75 0f                	jne    c000e86a <CPU::detectFeatures()+0x296>
c000e85b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000e865:	e9 35 01 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e86a:	52                   	push   edx
c000e86b:	52                   	push   edx
c000e86c:	68 b0 da 01 c0       	push   0xc001dab0
c000e871:	55                   	push   ebp
c000e872:	e8 89 1e ff ff       	call   c0000700 <strcmp>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	85 c0                	test   eax,eax
c000e87c:	75 0f                	jne    c000e88d <CPU::detectFeatures()+0x2b9>
c000e87e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000e888:	e9 12 01 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e88d:	50                   	push   eax
c000e88e:	50                   	push   eax
c000e88f:	68 bd da 01 c0       	push   0xc001dabd
c000e894:	55                   	push   ebp
c000e895:	e8 66 1e ff ff       	call   c0000700 <strcmp>
c000e89a:	83 c4 10             	add    esp,0x10
c000e89d:	85 c0                	test   eax,eax
c000e89f:	75 0f                	jne    c000e8b0 <CPU::detectFeatures()+0x2dc>
c000e8a1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000e8ab:	e9 ef 00 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e8b0:	50                   	push   eax
c000e8b1:	50                   	push   eax
c000e8b2:	68 ca da 01 c0       	push   0xc001daca
c000e8b7:	55                   	push   ebp
c000e8b8:	e8 43 1e ff ff       	call   c0000700 <strcmp>
c000e8bd:	83 c4 10             	add    esp,0x10
c000e8c0:	85 c0                	test   eax,eax
c000e8c2:	75 0f                	jne    c000e8d3 <CPU::detectFeatures()+0x2ff>
c000e8c4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000e8ce:	e9 cc 00 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e8d3:	50                   	push   eax
c000e8d4:	50                   	push   eax
c000e8d5:	68 d7 da 01 c0       	push   0xc001dad7
c000e8da:	55                   	push   ebp
c000e8db:	e8 20 1e ff ff       	call   c0000700 <strcmp>
c000e8e0:	83 c4 10             	add    esp,0x10
c000e8e3:	85 c0                	test   eax,eax
c000e8e5:	75 0f                	jne    c000e8f6 <CPU::detectFeatures()+0x322>
c000e8e7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000e8f1:	e9 a9 00 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e8f6:	50                   	push   eax
c000e8f7:	50                   	push   eax
c000e8f8:	68 e4 da 01 c0       	push   0xc001dae4
c000e8fd:	55                   	push   ebp
c000e8fe:	e8 fd 1d ff ff       	call   c0000700 <strcmp>
c000e903:	83 c4 10             	add    esp,0x10
c000e906:	85 c0                	test   eax,eax
c000e908:	75 0f                	jne    c000e919 <CPU::detectFeatures()+0x345>
c000e90a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000e914:	e9 86 00 00 00       	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e919:	50                   	push   eax
c000e91a:	50                   	push   eax
c000e91b:	68 f1 da 01 c0       	push   0xc001daf1
c000e920:	55                   	push   ebp
c000e921:	e8 da 1d ff ff       	call   c0000700 <strcmp>
c000e926:	83 c4 10             	add    esp,0x10
c000e929:	85 c0                	test   eax,eax
c000e92b:	75 0c                	jne    c000e939 <CPU::detectFeatures()+0x365>
c000e92d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000e937:	eb 66                	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e939:	50                   	push   eax
c000e93a:	50                   	push   eax
c000e93b:	68 fe da 01 c0       	push   0xc001dafe
c000e940:	55                   	push   ebp
c000e941:	e8 ba 1d ff ff       	call   c0000700 <strcmp>
c000e946:	83 c4 10             	add    esp,0x10
c000e949:	85 c0                	test   eax,eax
c000e94b:	75 0c                	jne    c000e959 <CPU::detectFeatures()+0x385>
c000e94d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000e957:	eb 46                	jmp    c000e99f <CPU::detectFeatures()+0x3cb>
c000e959:	57                   	push   edi
c000e95a:	57                   	push   edi
c000e95b:	68 0b db 01 c0       	push   0xc001db0b
c000e960:	55                   	push   ebp
c000e961:	e8 9a 1d ff ff       	call   c0000700 <strcmp>
c000e966:	83 c4 10             	add    esp,0x10
c000e969:	85 c0                	test   eax,eax
c000e96b:	74 e0                	je     c000e94d <CPU::detectFeatures()+0x379>
c000e96d:	56                   	push   esi
c000e96e:	56                   	push   esi
c000e96f:	68 18 db 01 c0       	push   0xc001db18
c000e974:	55                   	push   ebp
c000e975:	e8 86 1d ff ff       	call   c0000700 <strcmp>
c000e97a:	83 c4 10             	add    esp,0x10
c000e97d:	85 c0                	test   eax,eax
c000e97f:	74 cc                	je     c000e94d <CPU::detectFeatures()+0x379>
c000e981:	51                   	push   ecx
c000e982:	51                   	push   ecx
c000e983:	68 25 db 01 c0       	push   0xc001db25
c000e988:	55                   	push   ebp
c000e989:	e8 72 1d ff ff       	call   c0000700 <strcmp>
c000e98e:	83 c4 10             	add    esp,0x10
c000e991:	85 c0                	test   eax,eax
c000e993:	74 b8                	je     c000e94d <CPU::detectFeatures()+0x379>
c000e995:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000e99f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000e9a4:	0f 86 be 00 00 00    	jbe    c000ea68 <CPU::detectFeatures()+0x494>
c000e9aa:	83 ec 0c             	sub    esp,0xc
c000e9ad:	68 80 00 00 00       	push   0x80
c000e9b2:	e8 31 fb ff ff       	call   c000e4e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e9b7:	83 e0 01             	and    eax,0x1
c000e9ba:	c1 e0 06             	shl    eax,0x6
c000e9bd:	88 c2                	mov    dl,al
c000e9bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000e9c5:	83 e0 bf             	and    eax,0xffffffbf
c000e9c8:	09 d0                	or     eax,edx
c000e9ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000e9d0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000e9d7:	e8 0c fb ff ff       	call   c000e4e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000e9dc:	83 e0 01             	and    eax,0x1
c000e9df:	c1 e0 04             	shl    eax,0x4
c000e9e2:	88 c2                	mov    dl,al
c000e9e4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000e9ea:	83 e0 ef             	and    eax,0xffffffef
c000e9ed:	09 d0                	or     eax,edx
c000e9ef:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000e9f5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000e9fc:	e8 e7 fa ff ff       	call   c000e4e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ea01:	c1 e0 07             	shl    eax,0x7
c000ea04:	88 c2                	mov    dl,al
c000ea06:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ea0c:	83 e0 7f             	and    eax,0x7f
c000ea0f:	09 d0                	or     eax,edx
c000ea11:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ea17:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ea1e:	e8 f3 fa ff ff       	call   c000e516 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ea23:	83 e0 01             	and    eax,0x1
c000ea26:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ea2d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ea33:	83 e0 f7             	and    eax,0xfffffff7
c000ea36:	09 d0                	or     eax,edx
c000ea38:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ea3e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ea45:	e8 cc fa ff ff       	call   c000e516 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ea4a:	83 c4 10             	add    esp,0x10
c000ea4d:	83 e0 01             	and    eax,0x1
c000ea50:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea57:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ea5d:	83 e0 fb             	and    eax,0xfffffffb
c000ea60:	09 d0                	or     eax,edx
c000ea62:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea6f:	50                   	push   eax
c000ea70:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea74:	50                   	push   eax
c000ea75:	8d 74 24 28          	lea    esi,[esp+0x28]
c000ea79:	56                   	push   esi
c000ea7a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ea7e:	50                   	push   eax
c000ea7f:	6a 01                	push   0x1
c000ea81:	e8 82 f9 ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea86:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea8a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000ea90:	88 ca                	mov    dl,cl
c000ea92:	83 e0 f0             	and    eax,0xfffffff0
c000ea95:	83 e2 0f             	and    edx,0xf
c000ea98:	09 d0                	or     eax,edx
c000ea9a:	88 ca                	mov    dl,cl
c000ea9c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000eaa2:	c0 ea 04             	shr    dl,0x4
c000eaa5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000eaa9:	0f b6 c2             	movzx  eax,dl
c000eaac:	83 c4 20             	add    esp,0x20
c000eaaf:	c1 e0 06             	shl    eax,0x6
c000eab2:	89 c7                	mov    edi,eax
c000eab4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000eaba:	66 25 3f c0          	and    ax,0xc03f
c000eabe:	09 f8                	or     eax,edi
c000eac0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000eac7:	89 c8                	mov    eax,ecx
c000eac9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000ead0:	c1 e8 08             	shr    eax,0x8
c000ead3:	83 e5 3f             	and    ebp,0x3f
c000ead6:	83 e0 0f             	and    eax,0xf
c000ead9:	89 c7                	mov    edi,eax
c000eadb:	c1 e7 06             	shl    edi,0x6
c000eade:	09 ef                	or     edi,ebp
c000eae0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000eae7:	89 fa                	mov    edx,edi
c000eae9:	83 e5 c0             	and    ebp,0xffffffc0
c000eaec:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000eaf2:	88 c2                	mov    dl,al
c000eaf4:	c0 ea 02             	shr    dl,0x2
c000eaf7:	89 d7                	mov    edi,edx
c000eaf9:	09 ef                	or     edi,ebp
c000eafb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000eb01:	89 fa                	mov    edx,edi
c000eb03:	83 e5 cf             	and    ebp,0xffffffcf
c000eb06:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000eb0c:	89 cf                	mov    edi,ecx
c000eb0e:	c1 ef 0c             	shr    edi,0xc
c000eb11:	83 e7 03             	and    edi,0x3
c000eb14:	c1 e7 04             	shl    edi,0x4
c000eb17:	09 ef                	or     edi,ebp
c000eb19:	3c 06                	cmp    al,0x6
c000eb1b:	89 fa                	mov    edx,edi
c000eb1d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000eb23:	74 04                	je     c000eb29 <CPU::detectFeatures()+0x555>
c000eb25:	3c 0f                	cmp    al,0xf
c000eb27:	75 5c                	jne    c000eb85 <CPU::detectFeatures()+0x5b1>
c000eb29:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000eb2d:	89 cf                	mov    edi,ecx
c000eb2f:	c1 ef 10             	shr    edi,0x10
c000eb32:	c1 e7 04             	shl    edi,0x4
c000eb35:	09 fa                	or     edx,edi
c000eb37:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000eb3d:	0f b6 d2             	movzx  edx,dl
c000eb40:	66 81 e7 3f c0       	and    di,0xc03f
c000eb45:	c1 e2 06             	shl    edx,0x6
c000eb48:	09 fa                	or     edx,edi
c000eb4a:	3c 0f                	cmp    al,0xf
c000eb4c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000eb53:	75 30                	jne    c000eb85 <CPU::detectFeatures()+0x5b1>
c000eb55:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000eb5b:	c1 e9 14             	shr    ecx,0x14
c000eb5e:	83 e0 3f             	and    eax,0x3f
c000eb61:	83 c1 0f             	add    ecx,0xf
c000eb64:	88 ca                	mov    dl,cl
c000eb66:	c0 e9 02             	shr    cl,0x2
c000eb69:	c1 e2 06             	shl    edx,0x6
c000eb6c:	09 d0                	or     eax,edx
c000eb6e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000eb74:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000eb7a:	83 e0 c0             	and    eax,0xffffffc0
c000eb7d:	09 c1                	or     ecx,eax
c000eb7f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000eb85:	83 ec 0c             	sub    esp,0xc
c000eb88:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000eb8f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000eb93:	50                   	push   eax
c000eb94:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000eb98:	55                   	push   ebp
c000eb99:	56                   	push   esi
c000eb9a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000eb9e:	57                   	push   edi
c000eb9f:	68 00 00 00 80       	push   0x80000000
c000eba4:	e8 5f f8 ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eba9:	83 c4 20             	add    esp,0x20
c000ebac:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000ebb4:	76 22                	jbe    c000ebd8 <CPU::detectFeatures()+0x604>
c000ebb6:	83 ec 0c             	sub    esp,0xc
c000ebb9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000ebbd:	50                   	push   eax
c000ebbe:	55                   	push   ebp
c000ebbf:	56                   	push   esi
c000ebc0:	57                   	push   edi
c000ebc1:	68 01 00 00 80       	push   0x80000001
c000ebc6:	e8 3d f8 ff ff       	call   c000e408 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ebcb:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000ebd5:	83 c4 20             	add    esp,0x20
c000ebd8:	52                   	push   edx
c000ebd9:	52                   	push   edx
c000ebda:	68 31 db 01 c0       	push   0xc001db31
c000ebdf:	53                   	push   ebx
c000ebe0:	e8 09 c3 ff ff       	call   c000aeee <Device::setName(char const*)>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	eb 67                	jmp    c000ec51 <CPU::detectFeatures()+0x67d>
c000ebea:	50                   	push   eax
c000ebeb:	50                   	push   eax
c000ebec:	68 96 da 01 c0       	push   0xc001da96
c000ebf1:	55                   	push   ebp
c000ebf2:	e8 29 1a ff ff       	call   c0000620 <strcpy>
c000ebf7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000ec01:	e8 dd 15 ff ff       	call   c00001e3 <is486>
c000ec06:	83 c4 10             	add    esp,0x10
c000ec09:	85 c0                	test   eax,eax
c000ec0b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ec11:	74 1d                	je     c000ec30 <CPU::detectFeatures()+0x65c>
c000ec13:	83 c8 07             	or     eax,0x7
c000ec16:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ec1c:	0f 20 c0             	mov    eax,cr0
c000ec1f:	83 e0 14             	and    eax,0x14
c000ec22:	83 f8 04             	cmp    eax,0x4
c000ec25:	75 0e                	jne    c000ec35 <CPU::detectFeatures()+0x661>
c000ec27:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000ec2e:	eb 21                	jmp    c000ec51 <CPU::detectFeatures()+0x67d>
c000ec30:	83 e0 f8             	and    eax,0xfffffff8
c000ec33:	eb e1                	jmp    c000ec16 <CPU::detectFeatures()+0x642>
c000ec35:	e8 84 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ec3a:	83 e0 01             	and    eax,0x1
c000ec3d:	8d 14 00             	lea    edx,[eax+eax*1]
c000ec40:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ec46:	83 e0 fd             	and    eax,0xfffffffd
c000ec49:	09 d0                	or     eax,edx
c000ec4b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ec51:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000ec58:	74 0e                	je     c000ec68 <CPU::detectFeatures()+0x694>
c000ec5a:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000ec5f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000ec66:	eb 20                	jmp    c000ec88 <CPU::detectFeatures()+0x6b4>
c000ec68:	e8 51 15 ff ff       	call   c00001be <hasLegacyFPU>
c000ec6d:	83 e0 01             	and    eax,0x1
c000ec70:	8d 14 00             	lea    edx,[eax+eax*1]
c000ec73:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ec79:	83 e0 fd             	and    eax,0xfffffffd
c000ec7c:	09 d0                	or     eax,edx
c000ec7e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ec84:	a8 02                	test   al,0x2
c000ec86:	75 d2                	jne    c000ec5a <CPU::detectFeatures()+0x686>
c000ec88:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ec8f:	83 c4 2c             	add    esp,0x2c
c000ec92:	5b                   	pop    ebx
c000ec93:	5e                   	pop    esi
c000ec94:	5f                   	pop    edi
c000ec95:	5d                   	pop    ebp
c000ec96:	c3                   	ret    
c000ec97:	90                   	nop

c000ec98 <CPU::setupSMEP()>:
c000ec98:	0f 20 e0             	mov    eax,cr4
c000ec9b:	0d 00 00 10 00       	or     eax,0x100000
c000eca0:	0f 22 e0             	mov    cr4,eax
c000eca3:	c3                   	ret    

c000eca4 <CPU::setupUMIP()>:
c000eca4:	0f 20 e0             	mov    eax,cr4
c000eca7:	80 cc 08             	or     ah,0x8
c000ecaa:	0f 22 e0             	mov    cr4,eax
c000ecad:	c3                   	ret    

c000ecae <CPU::setupTSC()>:
c000ecae:	0f 20 e0             	mov    eax,cr4
c000ecb1:	83 c8 04             	or     eax,0x4
c000ecb4:	0f 22 e0             	mov    cr4,eax
c000ecb7:	c3                   	ret    

c000ecb8 <CPU::setupLargePages()>:
c000ecb8:	0f 20 e0             	mov    eax,cr4
c000ecbb:	83 c8 10             	or     eax,0x10
c000ecbe:	0f 22 e0             	mov    cr4,eax
c000ecc1:	c3                   	ret    

c000ecc2 <CPU::setupPAT()>:
c000ecc2:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000ecc7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ecce:	74 2c                	je     c000ecfc <CPU::setupPAT()+0x3a>
c000ecd0:	53                   	push   ebx
c000ecd1:	83 ec 10             	sub    esp,0x10
c000ecd4:	68 77 02 00 00       	push   0x277
c000ecd9:	50                   	push   eax
c000ecda:	e8 7b 74 ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c000ecdf:	83 e2 f8             	and    edx,0xfffffff8
c000ece2:	83 ca 01             	or     edx,0x1
c000ece5:	52                   	push   edx
c000ece6:	50                   	push   eax
c000ece7:	68 77 02 00 00       	push   0x277
c000ecec:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000ecf2:	e8 8f 74 ff ff       	call   c0006186 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ecf7:	83 c4 28             	add    esp,0x28
c000ecfa:	5b                   	pop    ebx
c000ecfb:	c3                   	ret    
c000ecfc:	c3                   	ret    
c000ecfd:	90                   	nop

c000ecfe <CPU::setupMTRR()>:
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <CPU::setupGlobalPages()>:
c000ed00:	0f 20 e0             	mov    eax,cr4
c000ed03:	0c 80                	or     al,0x80
c000ed05:	0f 22 e0             	mov    cr4,eax
c000ed08:	c3                   	ret    
c000ed09:	90                   	nop

c000ed0a <CPU::allowUsermodeDataAccess()>:
c000ed0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed0e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ed15:	74 03                	je     c000ed1a <CPU::allowUsermodeDataAccess()+0x10>
c000ed17:	0f 01 cb             	stac   
c000ed1a:	c3                   	ret    
c000ed1b:	90                   	nop

c000ed1c <CPU::prohibitUsermodeDataAccess()>:
c000ed1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed20:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ed27:	74 03                	je     c000ed2c <CPU::prohibitUsermodeDataAccess()+0x10>
c000ed29:	0f 01 ca             	clac   
c000ed2c:	c3                   	ret    
c000ed2d:	90                   	nop

c000ed2e <CPU::setupSMAP()>:
c000ed2e:	0f 20 e0             	mov    eax,cr4
c000ed31:	0d 00 00 20 00       	or     eax,0x200000
c000ed36:	0f 22 e0             	mov    cr4,eax
c000ed39:	eb e1                	jmp    c000ed1c <CPU::prohibitUsermodeDataAccess()>
c000ed3b:	90                   	nop

c000ed3c <CPU::setupFeatures()>:
c000ed3c:	53                   	push   ebx
c000ed3d:	83 ec 08             	sub    esp,0x8
c000ed40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed44:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ed4b:	74 18                	je     c000ed65 <CPU::setupFeatures()+0x29>
c000ed4d:	83 ec 0c             	sub    esp,0xc
c000ed50:	68 3d db 01 c0       	push   0xc001db3d
c000ed55:	e8 ca ab ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000ed5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed5d:	e8 42 ff ff ff       	call   c000eca4 <CPU::setupUMIP()>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ed6c:	74 18                	je     c000ed86 <CPU::setupFeatures()+0x4a>
c000ed6e:	83 ec 0c             	sub    esp,0xc
c000ed71:	68 47 db 01 c0       	push   0xc001db47
c000ed76:	e8 a9 ab ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000ed7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed7e:	e8 2b ff ff ff       	call   c000ecae <CPU::setupTSC()>
c000ed83:	83 c4 10             	add    esp,0x10
c000ed86:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ed8d:	74 18                	je     c000eda7 <CPU::setupFeatures()+0x6b>
c000ed8f:	83 ec 0c             	sub    esp,0xc
c000ed92:	68 50 db 01 c0       	push   0xc001db50
c000ed97:	e8 88 ab ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000ed9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed9f:	e8 14 ff ff ff       	call   c000ecb8 <CPU::setupLargePages()>
c000eda4:	83 c4 10             	add    esp,0x10
c000eda7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000edae:	74 18                	je     c000edc8 <CPU::setupFeatures()+0x8c>
c000edb0:	83 ec 0c             	sub    esp,0xc
c000edb3:	68 59 db 01 c0       	push   0xc001db59
c000edb8:	e8 67 ab ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000edbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000edc0:	e8 3b ff ff ff       	call   c000ed00 <CPU::setupGlobalPages()>
c000edc5:	83 c4 10             	add    esp,0x10
c000edc8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000edcf:	74 18                	je     c000ede9 <CPU::setupFeatures()+0xad>
c000edd1:	83 ec 0c             	sub    esp,0xc
c000edd4:	68 6b db 01 c0       	push   0xc001db6b
c000edd9:	e8 46 ab ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000edde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ede1:	e8 dc fe ff ff       	call   c000ecc2 <CPU::setupPAT()>
c000ede6:	83 c4 10             	add    esp,0x10
c000ede9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000edf0:	74 11                	je     c000ee03 <CPU::setupFeatures()+0xc7>
c000edf2:	c7 44 24 10 74 db 01 c0 	mov    DWORD PTR [esp+0x10],0xc001db74
c000edfa:	83 c4 08             	add    esp,0x8
c000edfd:	5b                   	pop    ebx
c000edfe:	e9 21 ab ff ff       	jmp    c0009924 <Dbg::kprintf(char const*, ...)>
c000ee03:	83 c4 08             	add    esp,0x8
c000ee06:	5b                   	pop    ebx
c000ee07:	c3                   	ret    

c000ee08 <CPU::open(int, int, void*)>:
c000ee08:	57                   	push   edi
c000ee09:	56                   	push   esi
c000ee0a:	53                   	push   ebx
c000ee0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ee13:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ee19:	83 ec 0c             	sub    esp,0xc
c000ee1c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ee22:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ee28:	50                   	push   eax
c000ee29:	e8 16 76 ff ff       	call   c0006444 <GDT::setup()>
c000ee2e:	83 c4 0c             	add    esp,0xc
c000ee31:	6a 00                	push   0x0
c000ee33:	68 ef be ad de       	push   0xdeadbeef
c000ee38:	57                   	push   edi
c000ee39:	e8 e6 91 ff ff       	call   c0008024 <TSS::setup(unsigned long, unsigned long)>
c000ee3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee41:	e8 be 91 ff ff       	call   c0008004 <TSS::flush()>
c000ee46:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ee4c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee4f:	e8 7e 78 ff ff       	call   c00066d2 <IDT::setup()>
c000ee54:	b8 00 04 00 00       	mov    eax,0x400
c000ee59:	0f 23 f8             	mov    db7,eax
c000ee5c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ee66:	e8 c3 80 ff ff       	call   c0006f2e <Phys::allocatePage()>
c000ee6b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ee71:	89 30                	mov    DWORD PTR [eax],esi
c000ee73:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ee79:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ee7c:	58                   	pop    eax
c000ee7d:	5a                   	pop    edx
c000ee7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ee84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee88:	e8 45 a1 ff ff       	call   c0008fd2 <VAS::setCPUSpecific(unsigned long)>
c000ee8d:	c7 04 24 7e db 01 c0 	mov    DWORD PTR [esp],0xc001db7e
c000ee94:	e8 22 7d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000ee99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee9c:	e8 33 f7 ff ff       	call   c000e5d4 <CPU::detectFeatures()>
c000eea1:	c7 04 24 a1 db 01 c0 	mov    DWORD PTR [esp],0xc001dba1
c000eea8:	e8 0e 7d ff ff       	call   c0006bbb <Krnl::setBootMessage(char const*)>
c000eead:	e8 d8 57 00 00       	call   c001468a <HalInitialise()>
c000eeb2:	a1 40 f4 01 c0       	mov    eax,ds:0xc001f440
c000eeb7:	83 e0 10             	and    eax,0x10
c000eeba:	83 f8 01             	cmp    eax,0x1
c000eebd:	19 c0                	sbb    eax,eax
c000eebf:	83 e0 46             	and    eax,0x46
c000eec2:	83 c0 1e             	add    eax,0x1e
c000eec5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eec8:	e8 f0 d6 ff ff       	call   c000c5bd <setupTimer(int)>
c000eecd:	83 c4 10             	add    esp,0x10
c000eed0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000eed6:	f6 05 40 f4 01 c0 20 	test   BYTE PTR ds:0xc001f440,0x20
c000eedd:	74 0c                	je     c000eeeb <CPU::open(int, int, void*)+0xe3>
c000eedf:	83 ec 0c             	sub    esp,0xc
c000eee2:	53                   	push   ebx
c000eee3:	e8 54 fe ff ff       	call   c000ed3c <CPU::setupFeatures()>
c000eee8:	83 c4 10             	add    esp,0x10
c000eeeb:	5b                   	pop    ebx
c000eeec:	31 c0                	xor    eax,eax
c000eeee:	5e                   	pop    esi
c000eeef:	5f                   	pop    edi
c000eef0:	c3                   	ret    
c000eef1:	90                   	nop

c000eef2 <EnvVarContainer::getEnv(char const*)>:
c000eef2:	57                   	push   edi
c000eef3:	56                   	push   esi
c000eef4:	53                   	push   ebx
c000eef5:	31 db                	xor    ebx,ebx
c000eef7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eefb:	39 1e                	cmp    DWORD PTR [esi],ebx
c000eefd:	7e 2b                	jle    c000ef2a <EnvVarContainer::getEnv(char const*)+0x38>
c000eeff:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ef06:	50                   	push   eax
c000ef07:	50                   	push   eax
c000ef08:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ef0b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ef0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef12:	e8 e9 17 ff ff       	call   c0000700 <strcmp>
c000ef17:	83 c4 10             	add    esp,0x10
c000ef1a:	85 c0                	test   eax,eax
c000ef1c:	75 09                	jne    c000ef27 <EnvVarContainer::getEnv(char const*)+0x35>
c000ef1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ef21:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000ef25:	eb 05                	jmp    c000ef2c <EnvVarContainer::getEnv(char const*)+0x3a>
c000ef27:	43                   	inc    ebx
c000ef28:	eb d1                	jmp    c000eefb <EnvVarContainer::getEnv(char const*)+0x9>
c000ef2a:	31 c0                	xor    eax,eax
c000ef2c:	5b                   	pop    ebx
c000ef2d:	5e                   	pop    esi
c000ef2e:	5f                   	pop    edi
c000ef2f:	c3                   	ret    

c000ef30 <EnvVarContainer::setEnv(char const*, char const*)>:
c000ef30:	55                   	push   ebp
c000ef31:	57                   	push   edi
c000ef32:	56                   	push   esi
c000ef33:	53                   	push   ebx
c000ef34:	83 ec 28             	sub    esp,0x28
c000ef37:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ef3b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ef43:	56                   	push   esi
c000ef44:	e8 17 16 ff ff       	call   c0000560 <strlen>
c000ef49:	40                   	inc    eax
c000ef4a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef4d:	e8 0f 7c ff ff       	call   c0006b61 <malloc>
c000ef52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef59:	e8 02 16 ff ff       	call   c0000560 <strlen>
c000ef5e:	40                   	inc    eax
c000ef5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef62:	e8 fa 7b ff ff       	call   c0006b61 <malloc>
c000ef67:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef6e:	e8 ed 15 ff ff       	call   c0000560 <strlen>
c000ef73:	83 c4 0c             	add    esp,0xc
c000ef76:	40                   	inc    eax
c000ef77:	50                   	push   eax
c000ef78:	6a 00                	push   0x0
c000ef7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef7e:	e8 6d 15 ff ff       	call   c00004f0 <memset>
c000ef83:	89 34 24             	mov    DWORD PTR [esp],esi
c000ef86:	e8 d5 15 ff ff       	call   c0000560 <strlen>
c000ef8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ef8f:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef97:	89 de                	mov    esi,ebx
c000ef99:	e8 c2 15 ff ff       	call   c0000560 <strlen>
c000ef9e:	83 c4 0c             	add    esp,0xc
c000efa1:	40                   	inc    eax
c000efa2:	50                   	push   eax
c000efa3:	6a 00                	push   0x0
c000efa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efa9:	e8 42 15 ff ff       	call   c00004f0 <memset>
c000efae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efb1:	e8 aa 15 ff ff       	call   c0000560 <strlen>
c000efb6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000efba:	8d 48 01             	lea    ecx,[eax+0x1]
c000efbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efc2:	40                   	inc    eax
c000efc3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efc6:	c1 e0 03             	shl    eax,0x3
c000efc9:	5a                   	pop    edx
c000efca:	59                   	pop    ecx
c000efcb:	50                   	push   eax
c000efcc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efcf:	e8 79 7b ff ff       	call   c0006b4d <realloc>
c000efd4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000efd8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000efdb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000efde:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000efe2:	b9 08 00 00 00       	mov    ecx,0x8
c000efe7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efe9:	83 c4 2c             	add    esp,0x2c
c000efec:	5b                   	pop    ebx
c000efed:	5e                   	pop    esi
c000efee:	5f                   	pop    edi
c000efef:	5d                   	pop    ebp
c000eff0:	c3                   	ret    
c000eff1:	90                   	nop

c000eff2 <EnvVarContainer::deleteEnv(char const*)>:
c000eff2:	c3                   	ret    
c000eff3:	90                   	nop

c000eff4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000eff4:	55                   	push   ebp
c000eff5:	57                   	push   edi
c000eff6:	56                   	push   esi
c000eff7:	53                   	push   ebx
c000eff8:	81 ec 38 01 00 00    	sub    esp,0x138
c000effe:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000f005:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000f00c:	68 14 01 00 00       	push   0x114
c000f011:	e8 4b 7b ff ff       	call   c0006b61 <malloc>
c000f016:	83 c4 0c             	add    esp,0xc
c000f019:	89 c3                	mov    ebx,eax
c000f01b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f01e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f025:	50                   	push   eax
c000f026:	e8 6f ae ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000f02b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f02e:	e8 95 b1 ff ff       	call   c000a1c8 <File::exists()>
c000f033:	83 c4 10             	add    esp,0x10
c000f036:	84 c0                	test   al,al
c000f038:	75 31                	jne    c000f06b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000f03a:	50                   	push   eax
c000f03b:	50                   	push   eax
c000f03c:	6a 12                	push   0x12
c000f03e:	53                   	push   ebx
c000f03f:	e8 16 af ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c000f044:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f046:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000f049:	89 34 24             	mov    DWORD PTR [esp],esi
c000f04c:	e8 0f 15 ff ff       	call   c0000560 <strlen>
c000f051:	5a                   	pop    edx
c000f052:	31 d2                	xor    edx,edx
c000f054:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f058:	51                   	push   ecx
c000f059:	56                   	push   esi
c000f05a:	52                   	push   edx
c000f05b:	50                   	push   eax
c000f05c:	53                   	push   ebx
c000f05d:	ff d7                	call   edi
c000f05f:	83 c4 14             	add    esp,0x14
c000f062:	53                   	push   ebx
c000f063:	e8 50 af ff ff       	call   c0009fb8 <File::close()>
c000f068:	83 c4 10             	add    esp,0x10
c000f06b:	56                   	push   esi
c000f06c:	31 f6                	xor    esi,esi
c000f06e:	68 00 01 00 00       	push   0x100
c000f073:	6a 00                	push   0x0
c000f075:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f079:	50                   	push   eax
c000f07a:	e8 71 14 ff ff       	call   c00004f0 <memset>
c000f07f:	5f                   	pop    edi
c000f080:	58                   	pop    eax
c000f081:	6a 01                	push   0x1
c000f083:	53                   	push   ebx
c000f084:	e8 d1 ae ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c000f089:	83 c4 10             	add    esp,0x10
c000f08c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f094:	83 ec 0c             	sub    esp,0xc
c000f097:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f099:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000f09d:	51                   	push   ecx
c000f09e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000f0a2:	52                   	push   edx
c000f0a3:	6a 00                	push   0x0
c000f0a5:	6a 01                	push   0x1
c000f0a7:	53                   	push   ebx
c000f0a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f0ab:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000f0af:	83 c4 20             	add    esp,0x20
c000f0b2:	3c 0d                	cmp    al,0xd
c000f0b4:	0f 84 09 01 00 00    	je     c000f1c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f0ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f0bf:	0f 84 ef 00 00 00    	je     c000f1b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f0c5:	3c 0a                	cmp    al,0xa
c000f0c7:	74 13                	je     c000f0dc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f0c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f0ce:	74 0c                	je     c000f0dc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000f0d0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000f0d6:	0f 8e d8 00 00 00    	jle    c000f1b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000f0dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e0:	83 ec 0c             	sub    esp,0xc
c000f0e3:	8d 78 01             	lea    edi,[eax+0x1]
c000f0e6:	57                   	push   edi
c000f0e7:	e8 75 7a ff ff       	call   c0006b61 <malloc>
c000f0ec:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000f0f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0f4:	8d 56 04             	lea    edx,[esi+0x4]
c000f0f7:	89 14 24             	mov    DWORD PTR [esp],edx
c000f0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0fe:	e8 5e 7a ff ff       	call   c0006b61 <malloc>
c000f103:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f107:	83 c4 0c             	add    esp,0xc
c000f10a:	57                   	push   edi
c000f10b:	6a 00                	push   0x0
c000f10d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f111:	e8 da 13 ff ff       	call   c00004f0 <memset>
c000f116:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f11a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f11e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f122:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f124:	83 c4 0c             	add    esp,0xc
c000f127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f12b:	52                   	push   edx
c000f12c:	6a 00                	push   0x0
c000f12e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f132:	e8 b9 13 ff ff       	call   c00004f0 <memset>
c000f137:	8d 74 24 30          	lea    esi,[esp+0x30]
c000f13b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000f13f:	89 34 24             	mov    DWORD PTR [esp],esi
c000f142:	e8 19 14 ff ff       	call   c0000560 <strlen>
c000f147:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000f14b:	89 c1                	mov    ecx,eax
c000f14d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f14f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f152:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000f155:	40                   	inc    eax
c000f156:	83 c4 10             	add    esp,0x10
c000f159:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f15c:	85 d2                	test   edx,edx
c000f15e:	75 0c                	jne    c000f16c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000f160:	83 ec 0c             	sub    esp,0xc
c000f163:	6a 08                	push   0x8
c000f165:	e8 f7 79 ff ff       	call   c0006b61 <malloc>
c000f16a:	eb 0c                	jmp    c000f178 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000f16c:	c1 e0 03             	shl    eax,0x3
c000f16f:	51                   	push   ecx
c000f170:	51                   	push   ecx
c000f171:	50                   	push   eax
c000f172:	52                   	push   edx
c000f173:	e8 d5 79 ff ff       	call   c0006b4d <realloc>
c000f178:	83 c4 10             	add    esp,0x10
c000f17b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000f17e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000f181:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000f184:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f188:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000f18c:	b9 08 00 00 00       	mov    ecx,0x8
c000f191:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f193:	31 f6                	xor    esi,esi
c000f195:	50                   	push   eax
c000f196:	68 00 01 00 00       	push   0x100
c000f19b:	6a 00                	push   0x0
c000f19d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000f1a1:	50                   	push   eax
c000f1a2:	e8 49 13 ff ff       	call   c00004f0 <memset>
c000f1a7:	83 c4 10             	add    esp,0x10
c000f1aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f1b2:	eb 0f                	jmp    c000f1c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f1b4:	3c 3d                	cmp    al,0x3d
c000f1b6:	74 07                	je     c000f1bf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000f1b8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000f1bc:	46                   	inc    esi
c000f1bd:	eb 04                	jmp    c000f1c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000f1bf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000f1c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000f1c8:	0f 85 c6 fe ff ff    	jne    c000f094 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000f1ce:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f1d4:	5b                   	pop    ebx
c000f1d5:	5e                   	pop    esi
c000f1d6:	5f                   	pop    edi
c000f1d7:	5d                   	pop    ebp
c000f1d8:	c3                   	ret    
c000f1d9:	90                   	nop

c000f1da <EnvVarContainer::__loadSystem()>:
c000f1da:	83 ec 10             	sub    esp,0x10
c000f1dd:	68 00 ee 01 c0       	push   0xc001ee00
c000f1e2:	68 e4 db 01 c0       	push   0xc001dbe4
c000f1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1eb:	e8 04 fe ff ff       	call   c000eff4 <EnvVarContainer::loadFrom(char const*, char const*)>
c000f1f0:	83 c4 1c             	add    esp,0x1c
c000f1f3:	c3                   	ret    

c000f1f4 <EnvVarContainer::__loadUser()>:
c000f1f4:	c3                   	ret    
c000f1f5:	90                   	nop

c000f1f6 <EnvVarContainer::EnvVarContainer(Process*)>:
c000f1f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f1fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f204:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f208:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f20b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f20f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f216:	90                   	nop
c000f217:	c3                   	ret    

c000f218 <EnvVarContainer::~EnvVarContainer()>:
c000f218:	83 ec 0c             	sub    esp,0xc
c000f21b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f21f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f222:	85 c0                	test   eax,eax
c000f224:	74 1d                	je     c000f243 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f22a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f22c:	85 c0                	test   eax,eax
c000f22e:	74 13                	je     c000f243 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000f230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f237:	83 ec 0c             	sub    esp,0xc
c000f23a:	50                   	push   eax
c000f23b:	e8 31 79 ff ff       	call   c0006b71 <free>
c000f240:	83 c4 10             	add    esp,0x10
c000f243:	90                   	nop
c000f244:	83 c4 0c             	add    esp,0xc
c000f247:	c3                   	ret    

c000f248 <Krnl::getEnv(Process*, char const*)>:
c000f248:	53                   	push   ebx
c000f249:	83 ec 08             	sub    esp,0x8
c000f24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f250:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f254:	39 05 30 29 02 c0    	cmp    DWORD PTR ds:0xc0022930,eax
c000f25a:	74 04                	je     c000f260 <Krnl::getEnv(Process*, char const*)+0x18>
c000f25c:	85 c0                	test   eax,eax
c000f25e:	75 0b                	jne    c000f26b <Krnl::getEnv(Process*, char const*)+0x23>
c000f260:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000f265:	85 c0                	test   eax,eax
c000f267:	75 19                	jne    c000f282 <Krnl::getEnv(Process*, char const*)+0x3a>
c000f269:	eb 27                	jmp    c000f292 <Krnl::getEnv(Process*, char const*)+0x4a>
c000f26b:	52                   	push   edx
c000f26c:	52                   	push   edx
c000f26d:	53                   	push   ebx
c000f26e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000f274:	e8 79 fc ff ff       	call   c000eef2 <EnvVarContainer::getEnv(char const*)>
c000f279:	83 c4 10             	add    esp,0x10
c000f27c:	85 c0                	test   eax,eax
c000f27e:	75 28                	jne    c000f2a8 <Krnl::getEnv(Process*, char const*)+0x60>
c000f280:	eb de                	jmp    c000f260 <Krnl::getEnv(Process*, char const*)+0x18>
c000f282:	52                   	push   edx
c000f283:	52                   	push   edx
c000f284:	53                   	push   ebx
c000f285:	50                   	push   eax
c000f286:	e8 67 fc ff ff       	call   c000eef2 <EnvVarContainer::getEnv(char const*)>
c000f28b:	83 c4 10             	add    esp,0x10
c000f28e:	85 c0                	test   eax,eax
c000f290:	75 16                	jne    c000f2a8 <Krnl::getEnv(Process*, char const*)+0x60>
c000f292:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000f296:	a1 b4 1e 02 c0       	mov    eax,ds:0xc0021eb4
c000f29b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f29f:	83 c4 08             	add    esp,0x8
c000f2a2:	5b                   	pop    ebx
c000f2a3:	e9 4a fc ff ff       	jmp    c000eef2 <EnvVarContainer::getEnv(char const*)>
c000f2a8:	83 c4 08             	add    esp,0x8
c000f2ab:	5b                   	pop    ebx
c000f2ac:	c3                   	ret    

c000f2ad <Krnl::setEnvSystem(char const*, char const*)>:
c000f2ad:	83 ec 10             	sub    esp,0x10
c000f2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2b8:	ff 35 b4 1e 02 c0    	push   DWORD PTR ds:0xc0021eb4
c000f2be:	e8 6d fc ff ff       	call   c000ef30 <EnvVarContainer::setEnv(char const*, char const*)>
c000f2c3:	83 c4 1c             	add    esp,0x1c
c000f2c6:	c3                   	ret    

c000f2c7 <Krnl::setEnvUser(char const*, char const*)>:
c000f2c7:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000f2cc:	85 c0                	test   eax,eax
c000f2ce:	74 15                	je     c000f2e5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000f2d0:	83 ec 10             	sub    esp,0x10
c000f2d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2db:	50                   	push   eax
c000f2dc:	e8 4f fc ff ff       	call   c000ef30 <EnvVarContainer::setEnv(char const*, char const*)>
c000f2e1:	83 c4 1c             	add    esp,0x1c
c000f2e4:	c3                   	ret    
c000f2e5:	c3                   	ret    

c000f2e6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000f2e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2ea:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000f2f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f2f4:	e9 37 fc ff ff       	jmp    c000ef30 <EnvVarContainer::setEnv(char const*, char const*)>

c000f2f9 <Krnl::deleteEnvSystem(char const*)>:
c000f2f9:	c3                   	ret    

c000f2fa <Krnl::deleteEnvUser(char const*)>:
c000f2fa:	c3                   	ret    

c000f2fb <Krnl::deleteEnvProcess(Process*, char const*)>:
c000f2fb:	c3                   	ret    

c000f2fc <Krnl::newProcessEnv(Process*)>:
c000f2fc:	83 ec 28             	sub    esp,0x28
c000f2ff:	6a 0c                	push   0xc
c000f301:	e8 5b 78 ff ff       	call   c0006b61 <malloc>
c000f306:	5a                   	pop    edx
c000f307:	59                   	pop    ecx
c000f308:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f30c:	50                   	push   eax
c000f30d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f311:	e8 e0 fe ff ff       	call   c000f1f6 <EnvVarContainer::EnvVarContainer(Process*)>
c000f316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f31a:	83 c4 2c             	add    esp,0x2c
c000f31d:	c3                   	ret    

c000f31e <Krnl::copyProcessEnv(Process*, Process*)>:
c000f31e:	57                   	push   edi
c000f31f:	56                   	push   esi
c000f320:	53                   	push   ebx
c000f321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f325:	83 ec 0c             	sub    esp,0xc
c000f328:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000f32e:	6a 0c                	push   0xc
c000f330:	e8 2c 78 ff ff       	call   c0006b61 <malloc>
c000f335:	89 c3                	mov    ebx,eax
c000f337:	58                   	pop    eax
c000f338:	5a                   	pop    edx
c000f339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f33d:	53                   	push   ebx
c000f33e:	e8 b3 fe ff ff       	call   c000f1f6 <EnvVarContainer::EnvVarContainer(Process*)>
c000f343:	8b 07                	mov    eax,DWORD PTR [edi]
c000f345:	89 03                	mov    DWORD PTR [ebx],eax
c000f347:	c1 e0 03             	shl    eax,0x3
c000f34a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f34d:	e8 0f 78 ff ff       	call   c0006b61 <malloc>
c000f352:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f355:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f357:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f35a:	c1 e1 03             	shl    ecx,0x3
c000f35d:	89 c7                	mov    edi,eax
c000f35f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f361:	83 c4 10             	add    esp,0x10
c000f364:	89 d8                	mov    eax,ebx
c000f366:	5b                   	pop    ebx
c000f367:	5e                   	pop    esi
c000f368:	5f                   	pop    edi
c000f369:	c3                   	ret    

c000f36a <Krnl::loadSystemEnv()>:
c000f36a:	53                   	push   ebx
c000f36b:	83 ec 14             	sub    esp,0x14
c000f36e:	6a 0c                	push   0xc
c000f370:	e8 ec 77 ff ff       	call   c0006b61 <malloc>
c000f375:	89 c3                	mov    ebx,eax
c000f377:	58                   	pop    eax
c000f378:	5a                   	pop    edx
c000f379:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c000f37f:	53                   	push   ebx
c000f380:	e8 71 fe ff ff       	call   c000f1f6 <EnvVarContainer::EnvVarContainer(Process*)>
c000f385:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f388:	89 1d b4 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb4,ebx
c000f38e:	e8 47 fe ff ff       	call   c000f1da <EnvVarContainer::__loadSystem()>
c000f393:	83 c4 18             	add    esp,0x18
c000f396:	5b                   	pop    ebx
c000f397:	c3                   	ret    

c000f398 <Krnl::loadUserEnv()>:
c000f398:	53                   	push   ebx
c000f399:	83 ec 14             	sub    esp,0x14
c000f39c:	6a 0c                	push   0xc
c000f39e:	e8 be 77 ff ff       	call   c0006b61 <malloc>
c000f3a3:	89 c3                	mov    ebx,eax
c000f3a5:	58                   	pop    eax
c000f3a6:	5a                   	pop    edx
c000f3a7:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c000f3ad:	53                   	push   ebx
c000f3ae:	e8 43 fe ff ff       	call   c000f1f6 <EnvVarContainer::EnvVarContainer(Process*)>
c000f3b3:	89 1d b0 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb0,ebx
c000f3b9:	83 c4 18             	add    esp,0x18
c000f3bc:	5b                   	pop    ebx
c000f3bd:	c3                   	ret    

c000f3be <Krnl::flushEnv()>:
c000f3be:	c3                   	ret    

c000f3bf <Krnl::getProcessTotalEnvCount(Process*)>:
c000f3bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3c3:	8b 15 b0 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb0
c000f3c9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f3cf:	a1 b4 1e 02 c0       	mov    eax,ds:0xc0021eb4
c000f3d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3d6:	03 01                	add    eax,DWORD PTR [ecx]
c000f3d8:	85 d2                	test   edx,edx
c000f3da:	74 02                	je     c000f3de <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000f3dc:	03 02                	add    eax,DWORD PTR [edx]
c000f3de:	c3                   	ret    

c000f3df <Krnl::getProcessEnvPair(Process*, int)>:
c000f3df:	57                   	push   edi
c000f3e0:	56                   	push   esi
c000f3e1:	8b 35 b0 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb0
c000f3e7:	53                   	push   ebx
c000f3e8:	85 f6                	test   esi,esi
c000f3ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3f2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000f3f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f3fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f3fe:	75 16                	jne    c000f416 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000f400:	39 c2                	cmp    edx,eax
c000f402:	7c 16                	jl     c000f41a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f404:	8b 0d b4 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021eb4
c000f40a:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f40c:	01 c6                	add    esi,eax
c000f40e:	39 d6                	cmp    esi,edx
c000f410:	7e 3c                	jle    c000f44e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f412:	29 c2                	sub    edx,eax
c000f414:	eb 04                	jmp    c000f41a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000f416:	39 c2                	cmp    edx,eax
c000f418:	7d 05                	jge    c000f41f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000f41a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f41d:	eb 20                	jmp    c000f43f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000f41f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f421:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f424:	39 d1                	cmp    ecx,edx
c000f426:	7e 04                	jle    c000f42c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000f428:	29 c2                	sub    edx,eax
c000f42a:	eb 10                	jmp    c000f43c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000f42c:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c000f432:	03 0e                	add    ecx,DWORD PTR [esi]
c000f434:	39 d1                	cmp    ecx,edx
c000f436:	7e 16                	jle    c000f44e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000f438:	29 c2                	sub    edx,eax
c000f43a:	29 fa                	sub    edx,edi
c000f43c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f43f:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f442:	8b 02                	mov    eax,DWORD PTR [edx]
c000f444:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f447:	89 03                	mov    DWORD PTR [ebx],eax
c000f449:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f44c:	eb 1d                	jmp    c000f46b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000f44e:	83 ec 0c             	sub    esp,0xc
c000f451:	68 06 dc 01 c0       	push   0xc001dc06
c000f456:	e8 18 00 00 00       	call   c000f473 <Krnl::panic(char const*)>
c000f45b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f461:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f468:	83 c4 10             	add    esp,0x10
c000f46b:	89 d8                	mov    eax,ebx
c000f46d:	5b                   	pop    ebx
c000f46e:	5e                   	pop    esi
c000f46f:	5f                   	pop    edi
c000f470:	c2 04 00             	ret    0x4

c000f473 <Krnl::panic(char const*)>:
c000f473:	53                   	push   ebx
c000f474:	83 ec 10             	sub    esp,0x10
c000f477:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f47b:	fa                   	cli    
c000f47c:	c6 05 c0 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ec0,0x1
c000f483:	53                   	push   ebx
c000f484:	68 20 dc 01 c0       	push   0xc001dc20
c000f489:	e8 96 a4 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c000f48e:	83 c4 0c             	add    esp,0xc
c000f491:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f496:	6a 01                	push   0x1
c000f498:	6a 0f                	push   0xf
c000f49a:	50                   	push   eax
c000f49b:	e8 44 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4a0:	58                   	pop    eax
c000f4a1:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f4a6:	50                   	push   eax
c000f4a7:	e8 30 84 ff ff       	call   c00078dc <VgaText::clearScreen()>
c000f4ac:	58                   	pop    eax
c000f4ad:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f4b3:	5a                   	pop    edx
c000f4b4:	68 71 dc 01 c0       	push   0xc001dc71
c000f4b9:	51                   	push   ecx
c000f4ba:	e8 5d 82 ff ff       	call   c000771c <VgaText::setTitle(char*)>
c000f4bf:	83 c4 0c             	add    esp,0xc
c000f4c2:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f4c7:	6a 01                	push   0x1
c000f4c9:	6a 0f                	push   0xf
c000f4cb:	50                   	push   eax
c000f4cc:	e8 13 82 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4d1:	58                   	pop    eax
c000f4d2:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f4d8:	5a                   	pop    edx
c000f4d9:	68 39 dc 01 c0       	push   0xc001dc39
c000f4de:	51                   	push   ecx
c000f4df:	e8 ec 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f4e4:	83 c4 0c             	add    esp,0xc
c000f4e7:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f4ec:	6a 0f                	push   0xf
c000f4ee:	6a 01                	push   0x1
c000f4f0:	50                   	push   eax
c000f4f1:	e8 ee 81 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f4f6:	58                   	pop    eax
c000f4f7:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f4fd:	5a                   	pop    edx
c000f4fe:	68 42 dc 01 c0       	push   0xc001dc42
c000f503:	51                   	push   ecx
c000f504:	e8 c7 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f509:	83 c4 0c             	add    esp,0xc
c000f50c:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f511:	6a 01                	push   0x1
c000f513:	6a 0f                	push   0xf
c000f515:	50                   	push   eax
c000f516:	e8 c9 81 ff ff       	call   c00076e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000f51b:	58                   	pop    eax
c000f51c:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f522:	5a                   	pop    edx
c000f523:	68 6f dc 01 c0       	push   0xc001dc6f
c000f528:	51                   	push   ecx
c000f529:	e8 a2 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f52e:	58                   	pop    eax
c000f52f:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f535:	5a                   	pop    edx
c000f536:	68 74 dc 01 c0       	push   0xc001dc74
c000f53b:	51                   	push   ecx
c000f53c:	e8 8f 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f541:	58                   	pop    eax
c000f542:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f548:	5a                   	pop    edx
c000f549:	68 4f dc 01 c0       	push   0xc001dc4f
c000f54e:	51                   	push   ecx
c000f54f:	e8 7c 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f554:	58                   	pop    eax
c000f555:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f55b:	5a                   	pop    edx
c000f55c:	53                   	push   ebx
c000f55d:	51                   	push   ecx
c000f55e:	e8 6d 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f563:	5b                   	pop    ebx
c000f564:	58                   	pop    eax
c000f565:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f56a:	68 6f dc 01 c0       	push   0xc001dc6f
c000f56f:	50                   	push   eax
c000f570:	e8 5b 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f575:	58                   	pop    eax
c000f576:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f57a:	50                   	push   eax
c000f57b:	e8 22 29 00 00       	call   c0011ea2 <Thr::getDriverNameFromAddress(unsigned long)>
c000f580:	83 c4 10             	add    esp,0x10
c000f583:	85 c0                	test   eax,eax
c000f585:	0f 84 a2 00 00 00    	je     c000f62d <Krnl::panic(char const*)+0x1ba>
c000f58b:	83 ec 08             	sub    esp,0x8
c000f58e:	89 c3                	mov    ebx,eax
c000f590:	68 b0 dc 01 c0       	push   0xc001dcb0
c000f595:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f59a:	50                   	push   eax
c000f59b:	e8 30 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5a0:	58                   	pop    eax
c000f5a1:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f5a7:	5a                   	pop    edx
c000f5a8:	68 4f dc 01 c0       	push   0xc001dc4f
c000f5ad:	51                   	push   ecx
c000f5ae:	e8 1d 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5b3:	58                   	pop    eax
c000f5b4:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f5ba:	5a                   	pop    edx
c000f5bb:	53                   	push   ebx
c000f5bc:	51                   	push   ecx
c000f5bd:	e8 0e 86 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5c2:	83 c4 10             	add    esp,0x10
c000f5c5:	83 ec 08             	sub    esp,0x8
c000f5c8:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f5cd:	68 6e dc 01 c0       	push   0xc001dc6e
c000f5d2:	50                   	push   eax
c000f5d3:	e8 f8 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5d8:	5a                   	pop    edx
c000f5d9:	8b 1d 74 f4 01 c0    	mov    ebx,DWORD PTR ds:0xc001f474
c000f5df:	59                   	pop    ecx
c000f5e0:	68 08 dd 01 c0       	push   0xc001dd08
c000f5e5:	53                   	push   ebx
c000f5e6:	e8 e5 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5eb:	58                   	pop    eax
c000f5ec:	8b 0d 74 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f474
c000f5f2:	5a                   	pop    edx
c000f5f3:	68 48 dd 01 c0       	push   0xc001dd48
c000f5f8:	51                   	push   ecx
c000f5f9:	e8 d2 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f5fe:	5b                   	pop    ebx
c000f5ff:	58                   	pop    eax
c000f600:	a1 74 f4 01 c0       	mov    eax,ds:0xc001f474
c000f605:	68 5a dc 01 c0       	push   0xc001dc5a
c000f60a:	50                   	push   eax
c000f60b:	e8 c0 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f610:	83 c4 10             	add    esp,0x10
c000f613:	b2 fe                	mov    dl,0xfe
c000f615:	e4 60                	in     al,0x60
c000f617:	3c 1c                	cmp    al,0x1c
c000f619:	74 04                	je     c000f61f <Krnl::panic(char const*)+0x1ac>
c000f61b:	3c 5a                	cmp    al,0x5a
c000f61d:	75 f6                	jne    c000f615 <Krnl::panic(char const*)+0x1a2>
c000f61f:	e4 64                	in     al,0x64
c000f621:	a8 02                	test   al,0x2
c000f623:	75 fa                	jne    c000f61f <Krnl::panic(char const*)+0x1ac>
c000f625:	88 d0                	mov    al,dl
c000f627:	e6 64                	out    0x64,al
c000f629:	fa                   	cli    
c000f62a:	f4                   	hlt    
c000f62b:	eb e8                	jmp    c000f615 <Krnl::panic(char const*)+0x1a2>
c000f62d:	50                   	push   eax
c000f62e:	50                   	push   eax
c000f62f:	68 dc dc 01 c0       	push   0xc001dcdc
c000f634:	ff 35 74 f4 01 c0    	push   DWORD PTR ds:0xc001f474
c000f63a:	e8 91 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f63f:	58                   	pop    eax
c000f640:	5a                   	pop    edx
c000f641:	68 4f dc 01 c0       	push   0xc001dc4f
c000f646:	ff 35 74 f4 01 c0    	push   DWORD PTR ds:0xc001f474
c000f64c:	e8 7f 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f651:	59                   	pop    ecx
c000f652:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f657:	5b                   	pop    ebx
c000f658:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f65b:	83 c0 0c             	add    eax,0xc
c000f65e:	50                   	push   eax
c000f65f:	ff 35 74 f4 01 c0    	push   DWORD PTR ds:0xc001f474
c000f665:	e8 66 85 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c000f66a:	83 c4 10             	add    esp,0x10
c000f66d:	e9 53 ff ff ff       	jmp    c000f5c5 <Krnl::panic(char const*)+0x152>

c000f672 <Krnl::powerThread(void*)>:
c000f672:	53                   	push   ebx
c000f673:	83 ec 08             	sub    esp,0x8
c000f676:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c000f67b:	48                   	dec    eax
c000f67c:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c000f681:	75 01                	jne    c000f684 <Krnl::powerThread(void*)+0x12>
c000f683:	fb                   	sti    
c000f684:	83 ec 0c             	sub    esp,0xc
c000f687:	8b 1d 14 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021f14
c000f68d:	6a 0a                	push   0xa
c000f68f:	c6 05 e0 1e 02 c0 00 	mov    BYTE PTR ds:0xc0021ee0,0x0
c000f696:	e8 5d 35 00 00       	call   c0012bf8 <sleep(unsigned int)>
c000f69b:	a1 24 1f 02 c0       	mov    eax,ds:0xc0021f24
c000f6a0:	83 c4 10             	add    esp,0x10
c000f6a3:	83 c0 0a             	add    eax,0xa
c000f6a6:	85 db                	test   ebx,ebx
c000f6a8:	a3 24 1f 02 c0       	mov    ds:0xc0021f24,eax
c000f6ad:	74 d5                	je     c000f684 <Krnl::powerThread(void*)+0x12>
c000f6af:	39 d8                	cmp    eax,ebx
c000f6b1:	7e d1                	jle    c000f684 <Krnl::powerThread(void*)+0x12>
c000f6b3:	83 ec 0c             	sub    esp,0xc
c000f6b6:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f6bc:	e8 2d 6b ff ff       	call   c00061ee <Computer::sleep()>
c000f6c1:	83 c4 10             	add    esp,0x10
c000f6c4:	eb be                	jmp    c000f684 <Krnl::powerThread(void*)+0x12>

c000f6c6 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c000f6c6:	57                   	push   edi
c000f6c7:	b9 09 00 00 00       	mov    ecx,0x9
c000f6cc:	56                   	push   esi
c000f6cd:	bf 00 1f 02 c0       	mov    edi,0xc0021f00
c000f6d2:	fc                   	cld    
c000f6d3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f6d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6d9:	5e                   	pop    esi
c000f6da:	5f                   	pop    edi
c000f6db:	c3                   	ret    

c000f6dc <Krnl::userIOReceived()>:
c000f6dc:	c7 05 24 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f24,0x0
c000f6e6:	c3                   	ret    

c000f6e7 <Krnl::handlePowerButton()>:
c000f6e7:	83 ec 0c             	sub    esp,0xc
c000f6ea:	a1 00 1f 02 c0       	mov    eax,ds:0xc0021f00
c000f6ef:	83 f8 02             	cmp    eax,0x2
c000f6f2:	75 10                	jne    c000f704 <Krnl::handlePowerButton()+0x1d>
c000f6f4:	83 ec 0c             	sub    esp,0xc
c000f6f7:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f6fd:	e8 bc 6a ff ff       	call   c00061be <Computer::shutdown()>
c000f702:	eb 11                	jmp    c000f715 <Krnl::handlePowerButton()+0x2e>
c000f704:	48                   	dec    eax
c000f705:	75 11                	jne    c000f718 <Krnl::handlePowerButton()+0x31>
c000f707:	83 ec 0c             	sub    esp,0xc
c000f70a:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f710:	e8 d9 6a ff ff       	call   c00061ee <Computer::sleep()>
c000f715:	83 c4 10             	add    esp,0x10
c000f718:	83 c4 0c             	add    esp,0xc
c000f71b:	c3                   	ret    

c000f71c <Krnl::handleSleepButton()>:
c000f71c:	83 ec 0c             	sub    esp,0xc
c000f71f:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c000f724:	83 f8 02             	cmp    eax,0x2
c000f727:	75 10                	jne    c000f739 <Krnl::handleSleepButton()+0x1d>
c000f729:	83 ec 0c             	sub    esp,0xc
c000f72c:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f732:	e8 87 6a ff ff       	call   c00061be <Computer::shutdown()>
c000f737:	eb 11                	jmp    c000f74a <Krnl::handleSleepButton()+0x2e>
c000f739:	48                   	dec    eax
c000f73a:	75 11                	jne    c000f74d <Krnl::handleSleepButton()+0x31>
c000f73c:	83 ec 0c             	sub    esp,0xc
c000f73f:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000f745:	e8 a4 6a ff ff       	call   c00061ee <Computer::sleep()>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	83 c4 0c             	add    esp,0xc
c000f750:	c3                   	ret    

c000f751 <Krnl::setupPowerManager()>:
c000f751:	83 ec 0c             	sub    esp,0xc
c000f754:	c7 05 24 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f24,0x0
c000f75e:	68 f0 00 00 00       	push   0xf0
c000f763:	c6 05 e0 1e 02 c0 00 	mov    BYTE PTR ds:0xc0021ee0,0x0
c000f76a:	6a 00                	push   0x0
c000f76c:	68 72 f6 00 c0       	push   0xc000f672
c000f771:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c000f777:	e8 4c 2f 00 00       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c000f77c:	c7 05 00 1f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0021f00,0x2
c000f786:	c7 05 04 1f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0021f04,0x1
c000f790:	c7 05 08 1f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0021f08,0x3
c000f79a:	c7 05 0c 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f0c,0x0
c000f7a4:	c7 05 18 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f18,0x0
c000f7ae:	c7 05 10 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f10,0x0
c000f7b8:	c7 05 1c 1f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021f1c,0x0
c000f7c2:	c7 05 14 1f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021f14,0x3c
c000f7cc:	c7 05 20 1f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0021f20,0x3c
c000f7d6:	83 c4 1c             	add    esp,0x1c
c000f7d9:	c3                   	ret    

c000f7da <Reg::findLineFromLoadedData(char*, char*, char*)>:
c000f7da:	55                   	push   ebp
c000f7db:	57                   	push   edi
c000f7dc:	56                   	push   esi
c000f7dd:	53                   	push   ebx
c000f7de:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f7e4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c000f7eb:	8a 1e                	mov    bl,BYTE PTR [esi]
c000f7ed:	8d 6e 01             	lea    ebp,[esi+0x1]
c000f7f0:	80 fb 40             	cmp    bl,0x40
c000f7f3:	75 1b                	jne    c000f810 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c000f7f5:	8a 16                	mov    dl,BYTE PTR [esi]
c000f7f7:	84 d2                	test   dl,dl
c000f7f9:	0f 84 f1 00 00 00    	je     c000f8f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f7ff:	8d 46 01             	lea    eax,[esi+0x1]
c000f802:	80 fa 3a             	cmp    dl,0x3a
c000f805:	74 04                	je     c000f80b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c000f807:	89 c6                	mov    esi,eax
c000f809:	eb ea                	jmp    c000f7f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c000f80b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f80e:	89 c6                	mov    esi,eax
c000f810:	50                   	push   eax
c000f811:	6a 40                	push   0x40
c000f813:	6a 00                	push   0x0
c000f815:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f819:	50                   	push   eax
c000f81a:	e8 d1 0c ff ff       	call   c00004f0 <memset>
c000f81f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c000f826:	31 c0                	xor    eax,eax
c000f828:	83 c4 10             	add    esp,0x10
c000f82b:	8a 0f                	mov    cl,BYTE PTR [edi]
c000f82d:	84 c9                	test   cl,cl
c000f82f:	0f 84 bb 00 00 00    	je     c000f8f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f835:	3d c7 00 00 00       	cmp    eax,0xc7
c000f83a:	0f 8f b0 00 00 00    	jg     c000f8f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f840:	80 f9 0a             	cmp    cl,0xa
c000f843:	0f 85 98 00 00 00    	jne    c000f8e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c000f849:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c000f84e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c000f852:	a8 df                	test   al,0xdf
c000f854:	0f 94 c1             	sete   cl
c000f857:	3c 23                	cmp    al,0x23
c000f859:	0f 94 c2             	sete   dl
c000f85c:	08 d1                	or     cl,dl
c000f85e:	75 4a                	jne    c000f8aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f860:	8d 50 f7             	lea    edx,[eax-0x9]
c000f863:	80 fa 01             	cmp    dl,0x1
c000f866:	76 42                	jbe    c000f8aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f868:	3c 5b                	cmp    al,0x5b
c000f86a:	75 42                	jne    c000f8ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c000f86c:	80 fb 40             	cmp    bl,0x40
c000f86f:	75 39                	jne    c000f8aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f871:	83 ec 0c             	sub    esp,0xc
c000f874:	8d 54 24 65          	lea    edx,[esp+0x65]
c000f878:	52                   	push   edx
c000f879:	e8 e2 0c ff ff       	call   c0000560 <strlen>
c000f87e:	83 c4 10             	add    esp,0x10
c000f881:	83 f8 3f             	cmp    eax,0x3f
c000f884:	77 6a                	ja     c000f8f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f886:	50                   	push   eax
c000f887:	50                   	push   eax
c000f888:	8d 54 24 61          	lea    edx,[esp+0x61]
c000f88c:	52                   	push   edx
c000f88d:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f891:	52                   	push   edx
c000f892:	e8 89 0d ff ff       	call   c0000620 <strcpy>
c000f897:	58                   	pop    eax
c000f898:	8d 54 24 24          	lea    edx,[esp+0x24]
c000f89c:	52                   	push   edx
c000f89d:	e8 be 0c ff ff       	call   c0000560 <strlen>
c000f8a2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c000f8a7:	83 c4 10             	add    esp,0x10
c000f8aa:	31 d2                	xor    edx,edx
c000f8ac:	eb 3a                	jmp    c000f8e8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c000f8ae:	80 fb 40             	cmp    bl,0x40
c000f8b1:	74 06                	je     c000f8b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c000f8b3:	8d 44 24 58          	lea    eax,[esp+0x58]
c000f8b7:	eb 20                	jmp    c000f8d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c000f8b9:	50                   	push   eax
c000f8ba:	50                   	push   eax
c000f8bb:	55                   	push   ebp
c000f8bc:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f8c0:	50                   	push   eax
c000f8c1:	e8 3a 0e ff ff       	call   c0000700 <strcmp>
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	85 c0                	test   eax,eax
c000f8cb:	75 dd                	jne    c000f8aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f8cd:	eb e4                	jmp    c000f8b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c000f8cf:	8d 50 01             	lea    edx,[eax+0x1]
c000f8d2:	80 f9 3d             	cmp    cl,0x3d
c000f8d5:	74 1d                	je     c000f8f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c000f8d7:	89 d0                	mov    eax,edx
c000f8d9:	8a 08                	mov    cl,BYTE PTR [eax]
c000f8db:	84 c9                	test   cl,cl
c000f8dd:	75 f0                	jne    c000f8cf <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c000f8df:	eb 0f                	jmp    c000f8f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c000f8e1:	8d 50 01             	lea    edx,[eax+0x1]
c000f8e4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c000f8e8:	47                   	inc    edi
c000f8e9:	89 d0                	mov    eax,edx
c000f8eb:	e9 3b ff ff ff       	jmp    c000f82b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c000f8f0:	31 c0                	xor    eax,eax
c000f8f2:	eb 33                	jmp    c000f927 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c000f8f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f8f8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8fb:	50                   	push   eax
c000f8fc:	50                   	push   eax
c000f8fd:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f901:	50                   	push   eax
c000f902:	56                   	push   esi
c000f903:	e8 f8 0d ff ff       	call   c0000700 <strcmp>
c000f908:	83 c4 10             	add    esp,0x10
c000f90b:	85 c0                	test   eax,eax
c000f90d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f911:	75 97                	jne    c000f8aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c000f913:	51                   	push   ecx
c000f914:	51                   	push   ecx
c000f915:	52                   	push   edx
c000f916:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c000f91d:	e8 fe 0c ff ff       	call   c0000620 <strcpy>
c000f922:	83 c4 10             	add    esp,0x10
c000f925:	b0 01                	mov    al,0x1
c000f927:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f92d:	5b                   	pop    ebx
c000f92e:	5e                   	pop    esi
c000f92f:	5f                   	pop    edi
c000f930:	5d                   	pop    ebp
c000f931:	c3                   	ret    

c000f932 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c000f932:	57                   	push   edi
c000f933:	56                   	push   esi
c000f934:	53                   	push   ebx
c000f935:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000f93b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c000f942:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c000f949:	53                   	push   ebx
c000f94a:	e8 11 0c ff ff       	call   c0000560 <strlen>
c000f94f:	89 34 24             	mov    DWORD PTR [esp],esi
c000f952:	89 c7                	mov    edi,eax
c000f954:	e8 07 0c ff ff       	call   c0000560 <strlen>
c000f959:	83 c4 10             	add    esp,0x10
c000f95c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c000f960:	3d ff 00 00 00       	cmp    eax,0xff
c000f965:	0f 87 d3 00 00 00    	ja     c000fa3e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f96b:	57                   	push   edi
c000f96c:	57                   	push   edi
c000f96d:	56                   	push   esi
c000f96e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f972:	56                   	push   esi
c000f973:	e8 a8 0c ff ff       	call   c0000620 <strcpy>
c000f978:	58                   	pop    eax
c000f979:	5a                   	pop    edx
c000f97a:	68 70 e0 01 c0       	push   0xc001e070
c000f97f:	56                   	push   esi
c000f980:	e8 5b 0e ff ff       	call   c00007e0 <strcat>
c000f985:	59                   	pop    ecx
c000f986:	5f                   	pop    edi
c000f987:	53                   	push   ebx
c000f988:	56                   	push   esi
c000f989:	e8 52 0e ff ff       	call   c00007e0 <strcat>
c000f98e:	58                   	pop    eax
c000f98f:	5a                   	pop    edx
c000f990:	68 8b dd 01 c0       	push   0xc001dd8b
c000f995:	56                   	push   esi
c000f996:	e8 45 0e ff ff       	call   c00007e0 <strcat>
c000f99b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000f9a2:	e8 ba 71 ff ff       	call   c0006b61 <malloc>
c000f9a7:	83 c4 0c             	add    esp,0xc
c000f9aa:	89 c3                	mov    ebx,eax
c000f9ac:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c000f9b2:	56                   	push   esi
c000f9b3:	50                   	push   eax
c000f9b4:	e8 e1 a4 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	85 db                	test   ebx,ebx
c000f9be:	74 7e                	je     c000fa3e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c000f9c0:	51                   	push   ecx
c000f9c1:	51                   	push   ecx
c000f9c2:	6a 01                	push   0x1
c000f9c4:	53                   	push   ebx
c000f9c5:	e8 90 a5 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c000f9ca:	83 c4 10             	add    esp,0x10
c000f9cd:	85 c0                	test   eax,eax
c000f9cf:	74 08                	je     c000f9d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c000f9d1:	83 ec 0c             	sub    esp,0xc
c000f9d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9d6:	53                   	push   ebx
c000f9d7:	eb 5f                	jmp    c000fa38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c000f9d9:	52                   	push   edx
c000f9da:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f9de:	50                   	push   eax
c000f9df:	8d 44 24 20          	lea    eax,[esp+0x20]
c000f9e3:	50                   	push   eax
c000f9e4:	53                   	push   ebx
c000f9e5:	e8 1c a8 ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c000f9ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9ee:	83 c4 10             	add    esp,0x10
c000f9f1:	89 c1                	mov    ecx,eax
c000f9f3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c000f9f7:	74 31                	je     c000fa2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000f9f9:	83 ec 0c             	sub    esp,0xc
c000f9fc:	50                   	push   eax
c000f9fd:	e8 5f 71 ff ff       	call   c0006b61 <malloc>
c000fa02:	89 c6                	mov    esi,eax
c000fa04:	58                   	pop    eax
c000fa05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fa07:	8d 54 24 20          	lea    edx,[esp+0x20]
c000fa0b:	52                   	push   edx
c000fa0c:	56                   	push   esi
c000fa0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fa11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000fa15:	53                   	push   ebx
c000fa16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fa19:	83 c4 20             	add    esp,0x20
c000fa1c:	85 c0                	test   eax,eax
c000fa1e:	75 0a                	jne    c000fa2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c000fa20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa24:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa28:	74 18                	je     c000fa42 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c000fa2a:	83 ec 0c             	sub    esp,0xc
c000fa2d:	53                   	push   ebx
c000fa2e:	e8 85 a5 ff ff       	call   c0009fb8 <File::close()>
c000fa33:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fa35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fa3b:	83 c4 10             	add    esp,0x10
c000fa3e:	31 c0                	xor    eax,eax
c000fa40:	eb 3b                	jmp    c000fa7d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c000fa42:	83 ec 0c             	sub    esp,0xc
c000fa45:	53                   	push   ebx
c000fa46:	e8 6d a5 ff ff       	call   c0009fb8 <File::close()>
c000fa4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fa4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fa53:	83 c4 0c             	add    esp,0xc
c000fa56:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fa5d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c000fa64:	56                   	push   esi
c000fa65:	e8 70 fd ff ff       	call   c000f7da <Reg::findLineFromLoadedData(char*, char*, char*)>
c000fa6a:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa6d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000fa71:	e8 fb 70 ff ff       	call   c0006b71 <free>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa7d:	81 c4 20 01 00 00    	add    esp,0x120
c000fa83:	5b                   	pop    ebx
c000fa84:	5e                   	pop    esi
c000fa85:	5f                   	pop    edi
c000fa86:	c3                   	ret    

c000fa87 <Reg::getLine(char*, char*, char*)>:
c000fa87:	57                   	push   edi
c000fa88:	56                   	push   esi
c000fa89:	53                   	push   ebx
c000fa8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa92:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fa96:	57                   	push   edi
c000fa97:	56                   	push   esi
c000fa98:	53                   	push   ebx
c000fa99:	68 90 dd 01 c0       	push   0xc001dd90
c000fa9e:	e8 8f fe ff ff       	call   c000f932 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000faa3:	83 c4 10             	add    esp,0x10
c000faa6:	84 c0                	test   al,al
c000faa8:	75 10                	jne    c000faba <Reg::getLine(char*, char*, char*)+0x33>
c000faaa:	57                   	push   edi
c000faab:	56                   	push   esi
c000faac:	53                   	push   ebx
c000faad:	68 b5 dd 01 c0       	push   0xc001ddb5
c000fab2:	e8 7b fe ff ff       	call   c000f932 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	5b                   	pop    ebx
c000fabb:	5e                   	pop    esi
c000fabc:	5f                   	pop    edi
c000fabd:	c3                   	ret    

c000fabe <Reg::readInt(char*, char*, int*)>:
c000fabe:	55                   	push   ebp
c000fabf:	57                   	push   edi
c000fac0:	56                   	push   esi
c000fac1:	53                   	push   ebx
c000fac2:	81 ec f0 00 00 00    	sub    esp,0xf0
c000fac8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000facc:	57                   	push   edi
c000facd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fad4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c000fadb:	e8 a7 ff ff ff       	call   c000fa87 <Reg::getLine(char*, char*, char*)>
c000fae0:	83 c4 10             	add    esp,0x10
c000fae3:	84 c0                	test   al,al
c000fae5:	0f 84 b3 00 00 00    	je     c000fb9e <Reg::readInt(char*, char*, int*)+0xe0>
c000faeb:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c000faef:	80 fa 2b             	cmp    dl,0x2b
c000faf2:	74 0c                	je     c000fb00 <Reg::readInt(char*, char*, int*)+0x42>
c000faf4:	80 fa 2d             	cmp    dl,0x2d
c000faf7:	75 0e                	jne    c000fb07 <Reg::readInt(char*, char*, int*)+0x49>
c000faf9:	ba 01 00 00 00       	mov    edx,0x1
c000fafe:	eb 0b                	jmp    c000fb0b <Reg::readInt(char*, char*, int*)+0x4d>
c000fb00:	ba 01 00 00 00       	mov    edx,0x1
c000fb05:	eb 02                	jmp    c000fb09 <Reg::readInt(char*, char*, int*)+0x4b>
c000fb07:	31 d2                	xor    edx,edx
c000fb09:	31 c0                	xor    eax,eax
c000fb0b:	be 0a 00 00 00       	mov    esi,0xa
c000fb10:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c000fb15:	75 20                	jne    c000fb37 <Reg::readInt(char*, char*, int*)+0x79>
c000fb17:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c000fb1b:	80 f9 78             	cmp    cl,0x78
c000fb1e:	75 0a                	jne    c000fb2a <Reg::readInt(char*, char*, int*)+0x6c>
c000fb20:	83 c2 02             	add    edx,0x2
c000fb23:	be 10 00 00 00       	mov    esi,0x10
c000fb28:	eb 0d                	jmp    c000fb37 <Reg::readInt(char*, char*, int*)+0x79>
c000fb2a:	80 f9 62             	cmp    cl,0x62
c000fb2d:	75 08                	jne    c000fb37 <Reg::readInt(char*, char*, int*)+0x79>
c000fb2f:	83 c2 02             	add    edx,0x2
c000fb32:	be 02 00 00 00       	mov    esi,0x2
c000fb37:	01 d7                	add    edi,edx
c000fb39:	31 d2                	xor    edx,edx
c000fb3b:	8a 1f                	mov    bl,BYTE PTR [edi]
c000fb3d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c000fb41:	80 fb 0d             	cmp    bl,0xd
c000fb44:	0f 94 c3             	sete   bl
c000fb47:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000fb4c:	0f 94 c1             	sete   cl
c000fb4f:	08 cb                	or     bl,cl
c000fb51:	75 3a                	jne    c000fb8d <Reg::readInt(char*, char*, int*)+0xcf>
c000fb53:	0f af d6             	imul   edx,esi
c000fb56:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c000fb5b:	83 fe 10             	cmp    esi,0x10
c000fb5e:	75 26                	jne    c000fb86 <Reg::readInt(char*, char*, int*)+0xc8>
c000fb60:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fb64:	8d 69 bf             	lea    ebp,[ecx-0x41]
c000fb67:	89 e9                	mov    ecx,ebp
c000fb69:	80 f9 05             	cmp    cl,0x5
c000fb6c:	77 06                	ja     c000fb74 <Reg::readInt(char*, char*, int*)+0xb6>
c000fb6e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c000fb72:	eb 16                	jmp    c000fb8a <Reg::readInt(char*, char*, int*)+0xcc>
c000fb74:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000fb78:	83 e9 61             	sub    ecx,0x61
c000fb7b:	80 f9 05             	cmp    cl,0x5
c000fb7e:	77 06                	ja     c000fb86 <Reg::readInt(char*, char*, int*)+0xc8>
c000fb80:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c000fb84:	eb 04                	jmp    c000fb8a <Reg::readInt(char*, char*, int*)+0xcc>
c000fb86:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c000fb8a:	47                   	inc    edi
c000fb8b:	eb ae                	jmp    c000fb3b <Reg::readInt(char*, char*, int*)+0x7d>
c000fb8d:	84 c0                	test   al,al
c000fb8f:	74 02                	je     c000fb93 <Reg::readInt(char*, char*, int*)+0xd5>
c000fb91:	f7 da                	neg    edx
c000fb93:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c000fb9a:	89 10                	mov    DWORD PTR [eax],edx
c000fb9c:	88 d8                	mov    al,bl
c000fb9e:	81 c4 ec 00 00 00    	add    esp,0xec
c000fba4:	5b                   	pop    ebx
c000fba5:	5e                   	pop    esi
c000fba6:	5f                   	pop    edi
c000fba7:	5d                   	pop    ebp
c000fba8:	c3                   	ret    

c000fba9 <Reg::readString(char*, char*, char*, int)>:
c000fba9:	57                   	push   edi
c000fbaa:	56                   	push   esi
c000fbab:	53                   	push   ebx
c000fbac:	81 ec d4 00 00 00    	sub    esp,0xd4
c000fbb2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c000fbb9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000fbbd:	57                   	push   edi
c000fbbe:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fbc5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c000fbcc:	e8 b6 fe ff ff       	call   c000fa87 <Reg::getLine(char*, char*, char*)>
c000fbd1:	83 c4 10             	add    esp,0x10
c000fbd4:	89 c6                	mov    esi,eax
c000fbd6:	84 c0                	test   al,al
c000fbd8:	74 44                	je     c000fc1e <Reg::readString(char*, char*, char*, int)+0x75>
c000fbda:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c000fbe1:	31 c0                	xor    eax,eax
c000fbe3:	4a                   	dec    edx
c000fbe4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c000fbe7:	84 c9                	test   cl,cl
c000fbe9:	74 0f                	je     c000fbfa <Reg::readString(char*, char*, char*, int)+0x51>
c000fbeb:	39 c2                	cmp    edx,eax
c000fbed:	7e 0b                	jle    c000fbfa <Reg::readString(char*, char*, char*, int)+0x51>
c000fbef:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000fbf2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c000fbf7:	40                   	inc    eax
c000fbf8:	eb ea                	jmp    c000fbe4 <Reg::readString(char*, char*, char*, int)+0x3b>
c000fbfa:	83 ec 0c             	sub    esp,0xc
c000fbfd:	53                   	push   ebx
c000fbfe:	e8 5d 09 ff ff       	call   c0000560 <strlen>
c000fc03:	83 c4 10             	add    esp,0x10
c000fc06:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c000fc0b:	75 11                	jne    c000fc1e <Reg::readString(char*, char*, char*, int)+0x75>
c000fc0d:	83 ec 0c             	sub    esp,0xc
c000fc10:	53                   	push   ebx
c000fc11:	e8 4a 09 ff ff       	call   c0000560 <strlen>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000fc1e:	81 c4 d0 00 00 00    	add    esp,0xd0
c000fc24:	89 f0                	mov    eax,esi
c000fc26:	5b                   	pop    ebx
c000fc27:	5e                   	pop    esi
c000fc28:	5f                   	pop    edi
c000fc29:	c3                   	ret    

c000fc2a <Reg::readBool(char*, char*, bool*)>:
c000fc2a:	83 ec 20             	sub    esp,0x20
c000fc2d:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fc31:	50                   	push   eax
c000fc32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc3a:	e8 7f fe ff ff       	call   c000fabe <Reg::readInt(char*, char*, int*)>
c000fc3f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fc44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fc48:	0f 95 02             	setne  BYTE PTR [edx]
c000fc4b:	83 c4 2c             	add    esp,0x2c
c000fc4e:	c3                   	ret    

c000fc4f <Reg::readBoolWithDefault(char*, char*, bool)>:
c000fc4f:	53                   	push   ebx
c000fc50:	83 ec 1c             	sub    esp,0x1c
c000fc53:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c000fc57:	8d 44 24 13          	lea    eax,[esp+0x13]
c000fc5b:	50                   	push   eax
c000fc5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc64:	e8 c1 ff ff ff       	call   c000fc2a <Reg::readBool(char*, char*, bool*)>
c000fc69:	83 c4 10             	add    esp,0x10
c000fc6c:	84 c0                	test   al,al
c000fc6e:	74 04                	je     c000fc74 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c000fc70:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c000fc74:	88 d8                	mov    al,bl
c000fc76:	83 c4 18             	add    esp,0x18
c000fc79:	5b                   	pop    ebx
c000fc7a:	c3                   	ret    

c000fc7b <Reg::readIntWithDefault(char*, char*, int)>:
c000fc7b:	53                   	push   ebx
c000fc7c:	83 ec 1c             	sub    esp,0x1c
c000fc7f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fc83:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fc87:	50                   	push   eax
c000fc88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc90:	e8 29 fe ff ff       	call   c000fabe <Reg::readInt(char*, char*, int*)>
c000fc95:	83 c4 10             	add    esp,0x10
c000fc98:	84 c0                	test   al,al
c000fc9a:	74 04                	je     c000fca0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c000fc9c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fca0:	89 d8                	mov    eax,ebx
c000fca2:	83 c4 18             	add    esp,0x18
c000fca5:	5b                   	pop    ebx
c000fca6:	c3                   	ret    

c000fca7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c000fca7:	57                   	push   edi
c000fca8:	56                   	push   esi
c000fca9:	56                   	push   esi
c000fcaa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fcae:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000fcb2:	56                   	push   esi
c000fcb3:	57                   	push   edi
c000fcb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbc:	e8 e8 fe ff ff       	call   c000fba9 <Reg::readString(char*, char*, char*, int)>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	84 c0                	test   al,al
c000fcc6:	75 1a                	jne    c000fce2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c000fcc8:	51                   	push   ecx
c000fcc9:	56                   	push   esi
c000fcca:	6a 00                	push   0x0
c000fccc:	57                   	push   edi
c000fccd:	e8 1e 08 ff ff       	call   c00004f0 <memset>
c000fcd2:	8d 4e ff             	lea    ecx,[esi-0x1]
c000fcd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fcd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	5a                   	pop    edx
c000fce5:	5e                   	pop    esi
c000fce6:	5f                   	pop    edi
c000fce7:	c3                   	ret    

c000fce8 <Sys::eject(regs*)>:
c000fce8:	83 ec 0c             	sub    esp,0xc
c000fceb:	83 ca ff             	or     edx,0xffffffff
c000fcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c000fcf5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000fcfa:	83 e9 41             	sub    ecx,0x41
c000fcfd:	83 f9 19             	cmp    ecx,0x19
c000fd00:	77 18                	ja     c000fd1a <Sys::eject(regs*)+0x32>
c000fd02:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c000fd09:	85 c9                	test   ecx,ecx
c000fd0b:	74 0d                	je     c000fd1a <Sys::eject(regs*)+0x32>
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	51                   	push   ecx
c000fd11:	e8 8c c2 ff ff       	call   c000bfa2 <LogicalDisk::eject()>
c000fd16:	83 c4 10             	add    esp,0x10
c000fd19:	99                   	cdq    
c000fd1a:	83 c4 0c             	add    esp,0xc
c000fd1d:	c3                   	ret    

c000fd1e <Sys::exit(regs*)>:
c000fd1e:	83 ec 18             	sub    esp,0x18
c000fd21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd25:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fd28:	e8 df 34 00 00       	call   c001320c <terminateTask(int)>
c000fd2d:	83 c8 ff             	or     eax,0xffffffff
c000fd30:	83 c4 1c             	add    esp,0x1c
c000fd33:	89 c2                	mov    edx,eax
c000fd35:	c3                   	ret    

c000fd36 <Sys::getCwd(regs*)>:
c000fd36:	83 ec 10             	sub    esp,0x10
c000fd39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd3d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000fd40:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000fd43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd48:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fd4b:	e8 4c 9f ff ff       	call   c0009c9c <Fs::getcwd(Process*, char*, int)>
c000fd50:	83 c4 1c             	add    esp,0x1c
c000fd53:	99                   	cdq    
c000fd54:	c3                   	ret    

c000fd55 <Sys::getPID(regs*)>:
c000fd55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fd5d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd5f:	99                   	cdq    
c000fd60:	c3                   	ret    

c000fd61 <Sys::getRAMData(regs*)>:
c000fd61:	8b 0d 58 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f458
c000fd67:	69 05 54 f4 01 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc001f454,0xc8
c000fd71:	99                   	cdq    
c000fd72:	f7 f9                	idiv   ecx
c000fd74:	c1 e0 18             	shl    eax,0x18
c000fd77:	09 c8                	or     eax,ecx
c000fd79:	99                   	cdq    
c000fd7a:	c3                   	ret    

c000fd7b <Sys::getVGAPtr(regs*)>:
c000fd7b:	55                   	push   ebp
c000fd7c:	57                   	push   edi
c000fd7d:	56                   	push   esi
c000fd7e:	53                   	push   ebx
c000fd7f:	83 ec 18             	sub    esp,0x18
c000fd82:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fd89:	e8 7e 2f 00 00       	call   c0012d0c <Thr::processFromPID(int)>
c000fd8e:	83 c4 10             	add    esp,0x10
c000fd91:	89 c1                	mov    ecx,eax
c000fd93:	b8 01 00 00 00       	mov    eax,0x1
c000fd98:	85 c9                	test   ecx,ecx
c000fd9a:	74 57                	je     c000fdf3 <Sys::getVGAPtr(regs*)+0x78>
c000fd9c:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c000fda2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000fda6:	74 0c                	je     c000fdb4 <Sys::getVGAPtr(regs*)+0x39>
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	55                   	push   ebp
c000fdac:	e8 e0 7a ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c000fdb1:	83 c4 10             	add    esp,0x10
c000fdb4:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c000fdb7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c000fdba:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c000fdbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fdc4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fdc7:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c000fdcd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fdd0:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000fdd3:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c000fdd9:	50                   	push   eax
c000fdda:	50                   	push   eax
c000fddb:	68 d0 dd 01 c0       	push   0xc001ddd0
c000fde0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000fde3:	05 a8 0f 00 00       	add    eax,0xfa8
c000fde8:	50                   	push   eax
c000fde9:	e8 32 08 ff ff       	call   c0000620 <strcpy>
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	31 c0                	xor    eax,eax
c000fdf3:	83 c4 0c             	add    esp,0xc
c000fdf6:	31 d2                	xor    edx,edx
c000fdf8:	5b                   	pop    ebx
c000fdf9:	5e                   	pop    esi
c000fdfa:	5f                   	pop    edi
c000fdfb:	5d                   	pop    ebp
c000fdfc:	c3                   	ret    

c000fdfd <Sys::loadDLL(regs*)>:
c000fdfd:	56                   	push   esi
c000fdfe:	53                   	push   ebx
c000fdff:	31 d2                	xor    edx,edx
c000fe01:	51                   	push   ecx
c000fe02:	b8 01 00 00 00       	mov    eax,0x1
c000fe07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe0b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000fe0f:	0f 84 8c 00 00 00    	je     c000fea1 <Sys::loadDLL(regs*)+0xa4>
c000fe15:	83 ec 0c             	sub    esp,0xc
c000fe18:	68 14 01 00 00       	push   0x114
c000fe1d:	e8 3f 6d ff ff       	call   c0006b61 <malloc>
c000fe22:	83 c4 0c             	add    esp,0xc
c000fe25:	89 c3                	mov    ebx,eax
c000fe27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe2c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000fe2f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fe32:	53                   	push   ebx
c000fe33:	e8 62 a0 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c000fe38:	83 c4 10             	add    esp,0x10
c000fe3b:	31 d2                	xor    edx,edx
c000fe3d:	b8 02 00 00 00       	mov    eax,0x2
c000fe42:	85 db                	test   ebx,ebx
c000fe44:	74 5b                	je     c000fea1 <Sys::loadDLL(regs*)+0xa4>
c000fe46:	83 ec 0c             	sub    esp,0xc
c000fe49:	53                   	push   ebx
c000fe4a:	e8 79 a3 ff ff       	call   c000a1c8 <File::exists()>
c000fe4f:	83 c4 10             	add    esp,0x10
c000fe52:	84 c0                	test   al,al
c000fe54:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe56:	75 11                	jne    c000fe69 <Sys::loadDLL(regs*)+0x6c>
c000fe58:	83 ec 0c             	sub    esp,0xc
c000fe5b:	53                   	push   ebx
c000fe5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fe5f:	83 c4 10             	add    esp,0x10
c000fe62:	b8 03 00 00 00       	mov    eax,0x3
c000fe67:	eb 36                	jmp    c000fe9f <Sys::loadDLL(regs*)+0xa2>
c000fe69:	83 ec 0c             	sub    esp,0xc
c000fe6c:	53                   	push   ebx
c000fe6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fe70:	58                   	pop    eax
c000fe71:	5a                   	pop    edx
c000fe72:	6a 00                	push   0x0
c000fe74:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000fe77:	e8 77 20 00 00       	call   c0011ef3 <Thr::loadDLL(char const*, bool)>
c000fe7c:	83 c4 10             	add    esp,0x10
c000fe7f:	89 c1                	mov    ecx,eax
c000fe81:	31 d2                	xor    edx,edx
c000fe83:	b8 04 00 00 00       	mov    eax,0x4
c000fe88:	85 c9                	test   ecx,ecx
c000fe8a:	74 15                	je     c000fea1 <Sys::loadDLL(regs*)+0xa4>
c000fe8c:	53                   	push   ebx
c000fe8d:	53                   	push   ebx
c000fe8e:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c000fe94:	51                   	push   ecx
c000fe95:	e8 8a 22 00 00       	call   c0012124 <Thr::executeDLL(unsigned long, void*)>
c000fe9a:	83 c4 10             	add    esp,0x10
c000fe9d:	31 c0                	xor    eax,eax
c000fe9f:	31 d2                	xor    edx,edx
c000fea1:	59                   	pop    ecx
c000fea2:	5b                   	pop    ebx
c000fea3:	5e                   	pop    esi
c000fea4:	c3                   	ret    

c000fea5 <Sys::read(regs*)>:
c000fea5:	57                   	push   edi
c000fea6:	56                   	push   esi
c000fea7:	53                   	push   ebx
c000fea8:	83 ec 10             	sub    esp,0x10
c000feab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000feaf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000feb2:	83 f8 02             	cmp    eax,0x2
c000feb5:	77 10                	ja     c000fec7 <Sys::read(regs*)+0x22>
c000feb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000febc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000febf:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c000fec5:	eb 0e                	jmp    c000fed5 <Sys::read(regs*)+0x30>
c000fec7:	83 ec 0c             	sub    esp,0xc
c000feca:	50                   	push   eax
c000fecb:	e8 77 86 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c000fed0:	83 c4 10             	add    esp,0x10
c000fed3:	89 c1                	mov    ecx,eax
c000fed5:	83 c8 ff             	or     eax,0xffffffff
c000fed8:	85 c9                	test   ecx,ecx
c000feda:	89 c2                	mov    edx,eax
c000fedc:	74 28                	je     c000ff06 <Sys::read(regs*)+0x61>
c000fede:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fee6:	31 ff                	xor    edi,edi
c000fee8:	83 ec 0c             	sub    esp,0xc
c000feeb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000feed:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fef1:	52                   	push   edx
c000fef2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fef5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c000fef8:	57                   	push   edi
c000fef9:	56                   	push   esi
c000fefa:	51                   	push   ecx
c000fefb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fefe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff02:	83 c4 20             	add    esp,0x20
c000ff05:	99                   	cdq    
c000ff06:	83 c4 10             	add    esp,0x10
c000ff09:	5b                   	pop    ebx
c000ff0a:	5e                   	pop    esi
c000ff0b:	5f                   	pop    edi
c000ff0c:	c3                   	ret    

c000ff0d <Sys::sbrk(regs*)>:
c000ff0d:	56                   	push   esi
c000ff0e:	53                   	push   ebx
c000ff0f:	50                   	push   eax
c000ff10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff1c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c000ff1f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000ff25:	85 db                	test   ebx,ebx
c000ff27:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c000ff2a:	74 02                	je     c000ff2e <Sys::sbrk(regs*)+0x21>
c000ff2c:	79 06                	jns    c000ff34 <Sys::sbrk(regs*)+0x27>
c000ff2e:	89 f0                	mov    eax,esi
c000ff30:	31 d2                	xor    edx,edx
c000ff32:	eb 2a                	jmp    c000ff5e <Sys::sbrk(regs*)+0x51>
c000ff34:	83 c8 ff             	or     eax,0xffffffff
c000ff37:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c000ff3d:	89 c2                	mov    edx,eax
c000ff3f:	77 1d                	ja     c000ff5e <Sys::sbrk(regs*)+0x51>
c000ff41:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c000ff47:	50                   	push   eax
c000ff48:	c1 ea 0c             	shr    edx,0xc
c000ff4b:	68 07 0c 00 00       	push   0xc07
c000ff50:	52                   	push   edx
c000ff51:	51                   	push   ecx
c000ff52:	e8 a3 8e ff ff       	call   c0008dfa <VAS::allocatePages(int, int)>
c000ff57:	89 f0                	mov    eax,esi
c000ff59:	31 d2                	xor    edx,edx
c000ff5b:	83 c4 10             	add    esp,0x10
c000ff5e:	59                   	pop    ecx
c000ff5f:	5b                   	pop    ebx
c000ff60:	5e                   	pop    esi
c000ff61:	c3                   	ret    

c000ff62 <Sys::setCwd(regs*)>:
c000ff62:	83 ec 14             	sub    esp,0x14
c000ff65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff69:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ff6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff71:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c000ff74:	e8 ee a2 ff ff       	call   c000a267 <Fs::setcwd(Process*, char*)>
c000ff79:	83 c4 1c             	add    esp,0x1c
c000ff7c:	99                   	cdq    
c000ff7d:	c3                   	ret    

c000ff7e <Sys::setTime(regs*)>:
c000ff7e:	55                   	push   ebp
c000ff7f:	31 c9                	xor    ecx,ecx
c000ff81:	57                   	push   edi
c000ff82:	bd 0c 00 00 00       	mov    ebp,0xc
c000ff87:	56                   	push   esi
c000ff88:	53                   	push   ebx
c000ff89:	31 db                	xor    ebx,ebx
c000ff8b:	83 ec 10             	sub    esp,0x10
c000ff8e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff92:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c000ff95:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ff98:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c000ff9b:	89 c2                	mov    edx,eax
c000ff9d:	66 81 ef 6c 07       	sub    di,0x76c
c000ffa2:	83 e2 1f             	and    edx,0x1f
c000ffa5:	c1 e7 10             	shl    edi,0x10
c000ffa8:	42                   	inc    edx
c000ffa9:	c1 e8 05             	shr    eax,0x5
c000ffac:	88 d1                	mov    cl,dl
c000ffae:	31 d2                	xor    edx,edx
c000ffb0:	f7 f5                	div    ebp
c000ffb2:	89 dd                	mov    ebp,ebx
c000ffb4:	88 d5                	mov    ch,dl
c000ffb6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c000ffbc:	0f b7 c1             	movzx  eax,cx
c000ffbf:	31 d2                	xor    edx,edx
c000ffc1:	09 f8                	or     eax,edi
c000ffc3:	bf 3c 00 00 00       	mov    edi,0x3c
c000ffc8:	89 c1                	mov    ecx,eax
c000ffca:	89 f0                	mov    eax,esi
c000ffcc:	f7 f7                	div    edi
c000ffce:	c1 e2 10             	shl    edx,0x10
c000ffd1:	09 d5                	or     ebp,edx
c000ffd3:	31 d2                	xor    edx,edx
c000ffd5:	89 eb                	mov    ebx,ebp
c000ffd7:	f7 f7                	div    edi
c000ffd9:	bf 10 0e 00 00       	mov    edi,0xe10
c000ffde:	88 d7                	mov    bh,dl
c000ffe0:	89 f0                	mov    eax,esi
c000ffe2:	31 d2                	xor    edx,edx
c000ffe4:	f7 f7                	div    edi
c000ffe6:	bf 18 00 00 00       	mov    edi,0x18
c000ffeb:	31 d2                	xor    edx,edx
c000ffed:	f7 f7                	div    edi
c000ffef:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c000fff4:	88 d3                	mov    bl,dl
c000fff6:	53                   	push   ebx
c000fff7:	51                   	push   ecx
c000fff8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000fffe:	e8 75 aa ff ff       	call   c000aa78 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0010003:	83 c4 1c             	add    esp,0x1c
c0010006:	83 f0 01             	xor    eax,0x1
c0010009:	5b                   	pop    ebx
c001000a:	0f b6 c0             	movzx  eax,al
c001000d:	5e                   	pop    esi
c001000e:	31 d2                	xor    edx,edx
c0010010:	5f                   	pop    edi
c0010011:	5d                   	pop    ebp
c0010012:	c3                   	ret    

c0010013 <Sys::timezone(regs*)>:
c0010013:	53                   	push   ebx
c0010014:	83 ec 08             	sub    esp,0x8
c0010017:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001001b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001001f:	75 17                	jne    c0010038 <Sys::timezone(regs*)+0x25>
c0010021:	83 ec 0c             	sub    esp,0xc
c0010024:	68 da dd 01 c0       	push   0xc001ddda
c0010029:	e8 f6 98 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001002e:	83 c8 ff             	or     eax,0xffffffff
c0010031:	83 c4 10             	add    esp,0x10
c0010034:	89 c2                	mov    edx,eax
c0010036:	eb 20                	jmp    c0010058 <Sys::timezone(regs*)+0x45>
c0010038:	83 ec 0c             	sub    esp,0xc
c001003b:	68 ef dd 01 c0       	push   0xc001ddef
c0010040:	e8 df 98 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0010045:	58                   	pop    eax
c0010046:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010049:	e8 86 a7 ff ff       	call   c000a7d4 <User::loadClockSettings(int)>
c001004e:	83 c4 10             	add    esp,0x10
c0010051:	b8 01 00 00 00       	mov    eax,0x1
c0010056:	31 d2                	xor    edx,edx
c0010058:	83 c4 08             	add    esp,0x8
c001005b:	5b                   	pop    ebx
c001005c:	c3                   	ret    

c001005d <Sys::write(regs*)>:
c001005d:	57                   	push   edi
c001005e:	56                   	push   esi
c001005f:	53                   	push   ebx
c0010060:	83 ec 10             	sub    esp,0x10
c0010063:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010067:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001006a:	83 f8 02             	cmp    eax,0x2
c001006d:	77 10                	ja     c001007f <Sys::write(regs*)+0x22>
c001006f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010074:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010077:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001007d:	eb 0e                	jmp    c001008d <Sys::write(regs*)+0x30>
c001007f:	83 ec 0c             	sub    esp,0xc
c0010082:	50                   	push   eax
c0010083:	e8 bf 84 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010088:	83 c4 10             	add    esp,0x10
c001008b:	89 c1                	mov    ecx,eax
c001008d:	83 c8 ff             	or     eax,0xffffffff
c0010090:	85 c9                	test   ecx,ecx
c0010092:	89 c2                	mov    edx,eax
c0010094:	74 28                	je     c00100be <Sys::write(regs*)+0x61>
c0010096:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001009e:	31 ff                	xor    edi,edi
c00100a0:	83 ec 0c             	sub    esp,0xc
c00100a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00100a9:	52                   	push   edx
c00100aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00100ad:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00100b0:	57                   	push   edi
c00100b1:	56                   	push   esi
c00100b2:	51                   	push   ecx
c00100b3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00100b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00100ba:	83 c4 20             	add    esp,0x20
c00100bd:	99                   	cdq    
c00100be:	83 c4 10             	add    esp,0x10
c00100c1:	5b                   	pop    ebx
c00100c2:	5e                   	pop    esi
c00100c3:	5f                   	pop    edi
c00100c4:	c3                   	ret    

c00100c5 <Sys::wsbe(regs*)>:
c00100c5:	57                   	push   edi
c00100c6:	b9 0b 00 00 00       	mov    ecx,0xb
c00100cb:	56                   	push   esi
c00100cc:	be 2e de 01 c0       	mov    esi,0xc001de2e
c00100d1:	53                   	push   ebx
c00100d2:	83 ec 30             	sub    esp,0x30
c00100d5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00100d9:	fc                   	cld    
c00100da:	83 ec 0c             	sub    esp,0xc
c00100dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100df:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00100e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100eb:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00100f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00100f3:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00100f6:	57                   	push   edi
c00100f7:	e8 64 04 ff ff       	call   c0000560 <strlen>
c00100fc:	5a                   	pop    edx
c00100fd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0010101:	52                   	push   edx
c0010102:	31 d2                	xor    edx,edx
c0010104:	57                   	push   edi
c0010105:	52                   	push   edx
c0010106:	50                   	push   eax
c0010107:	56                   	push   esi
c0010108:	ff d3                	call   ebx
c001010a:	83 c4 14             	add    esp,0x14
c001010d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010111:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010114:	e8 f3 30 00 00       	call   c001320c <terminateTask(int)>
c0010119:	83 c4 40             	add    esp,0x40
c001011c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010121:	5b                   	pop    ebx
c0010122:	31 d2                	xor    edx,edx
c0010124:	5e                   	pop    esi
c0010125:	5f                   	pop    edi
c0010126:	c3                   	ret    

c0010127 <Sys::yield(regs*)>:
c0010127:	83 ec 0c             	sub    esp,0xc
c001012a:	fa                   	cli    
c001012b:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0010131:	e8 b2 27 00 00       	call   c00128e8 <schedule()>
c0010136:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c001013b:	48                   	dec    eax
c001013c:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0010141:	75 01                	jne    c0010144 <Sys::yield(regs*)+0x1d>
c0010143:	fb                   	sti    
c0010144:	31 c0                	xor    eax,eax
c0010146:	31 d2                	xor    edx,edx
c0010148:	83 c4 0c             	add    esp,0xc
c001014b:	c3                   	ret    

c001014c <sysCallSeekDir(regs*)>:
c001014c:	31 c0                	xor    eax,eax
c001014e:	31 d2                	xor    edx,edx
c0010150:	c3                   	ret    

c0010151 <sysCallTellDir(regs*)>:
c0010151:	31 c0                	xor    eax,eax
c0010153:	31 d2                	xor    edx,edx
c0010155:	c3                   	ret    

c0010156 <sysCallVerify(regs*)>:
c0010156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001015a:	31 d2                	xor    edx,edx
c001015c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001015f:	c3                   	ret    

c0010160 <sysCallGetArgc(regs*)>:
c0010160:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010165:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010168:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001016e:	99                   	cdq    
c001016f:	c3                   	ret    

c0010170 <sysCallTTYName(regs*)>:
c0010170:	b8 01 00 00 00       	mov    eax,0x1
c0010175:	31 d2                	xor    edx,edx
c0010177:	c3                   	ret    

c0010178 <sysFormatDisk(regs*)>:
c0010178:	56                   	push   esi
c0010179:	53                   	push   ebx
c001017a:	50                   	push   eax
c001017b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001017f:	8b 1d 18 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f518
c0010185:	eb 28                	jmp    c00101af <sysFormatDisk(regs*)+0x37>
c0010187:	83 ec 0c             	sub    esp,0xc
c001018a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001018d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010190:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010192:	51                   	push   ecx
c0010193:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010196:	51                   	push   ecx
c0010197:	50                   	push   eax
c0010198:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c001019f:	50                   	push   eax
c00101a0:	53                   	push   ebx
c00101a1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00101a4:	83 c4 20             	add    esp,0x20
c00101a7:	83 f8 08             	cmp    eax,0x8
c00101aa:	75 12                	jne    c00101be <sysFormatDisk(regs*)+0x46>
c00101ac:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00101af:	85 db                	test   ebx,ebx
c00101b1:	75 d4                	jne    c0010187 <sysFormatDisk(regs*)+0xf>
c00101b3:	59                   	pop    ecx
c00101b4:	b8 03 00 00 00       	mov    eax,0x3
c00101b9:	31 d2                	xor    edx,edx
c00101bb:	5b                   	pop    ebx
c00101bc:	5e                   	pop    esi
c00101bd:	c3                   	ret    
c00101be:	85 c0                	test   eax,eax
c00101c0:	74 1b                	je     c00101dd <sysFormatDisk(regs*)+0x65>
c00101c2:	83 f8 09             	cmp    eax,0x9
c00101c5:	74 0b                	je     c00101d2 <sysFormatDisk(regs*)+0x5a>
c00101c7:	59                   	pop    ecx
c00101c8:	b8 02 00 00 00       	mov    eax,0x2
c00101cd:	31 d2                	xor    edx,edx
c00101cf:	5b                   	pop    ebx
c00101d0:	5e                   	pop    esi
c00101d1:	c3                   	ret    
c00101d2:	59                   	pop    ecx
c00101d3:	b8 01 00 00 00       	mov    eax,0x1
c00101d8:	31 d2                	xor    edx,edx
c00101da:	5b                   	pop    ebx
c00101db:	5e                   	pop    esi
c00101dc:	c3                   	ret    
c00101dd:	59                   	pop    ecx
c00101de:	31 c0                	xor    eax,eax
c00101e0:	31 d2                	xor    edx,edx
c00101e2:	5b                   	pop    ebx
c00101e3:	5e                   	pop    esi
c00101e4:	c3                   	ret    

c00101e5 <sysSetDiskVolumeLabel(regs*)>:
c00101e5:	56                   	push   esi
c00101e6:	53                   	push   ebx
c00101e7:	53                   	push   ebx
c00101e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101ec:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00101ef:	83 f8 19             	cmp    eax,0x19
c00101f2:	77 2d                	ja     c0010221 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00101f4:	8b 0c 85 a0 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde660]
c00101fb:	85 c9                	test   ecx,ecx
c00101fd:	74 22                	je     c0010221 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00101ff:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010202:	85 db                	test   ebx,ebx
c0010204:	74 1b                	je     c0010221 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010206:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001020c:	85 d2                	test   edx,edx
c001020e:	74 11                	je     c0010221 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010210:	8b 32                	mov    esi,DWORD PTR [edx]
c0010212:	53                   	push   ebx
c0010213:	50                   	push   eax
c0010214:	51                   	push   ecx
c0010215:	52                   	push   edx
c0010216:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010219:	83 c4 10             	add    esp,0x10
c001021c:	99                   	cdq    
c001021d:	59                   	pop    ecx
c001021e:	5b                   	pop    ebx
c001021f:	5e                   	pop    esi
c0010220:	c3                   	ret    
c0010221:	59                   	pop    ecx
c0010222:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010227:	ba ff ff ff ff       	mov    edx,0xffffffff
c001022c:	5b                   	pop    ebx
c001022d:	5e                   	pop    esi
c001022e:	c3                   	ret    

c001022f <sysGetDiskVolumeLabel(regs*)>:
c001022f:	57                   	push   edi
c0010230:	56                   	push   esi
c0010231:	53                   	push   ebx
c0010232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010236:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010239:	83 fa 19             	cmp    edx,0x19
c001023c:	77 38                	ja     c0010276 <sysGetDiskVolumeLabel(regs*)+0x47>
c001023e:	8b 0c 95 a0 19 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffde660]
c0010245:	85 c9                	test   ecx,ecx
c0010247:	74 2d                	je     c0010276 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010249:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001024c:	85 db                	test   ebx,ebx
c001024e:	74 26                	je     c0010276 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010250:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010253:	85 f6                	test   esi,esi
c0010255:	74 1f                	je     c0010276 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010257:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001025d:	85 c0                	test   eax,eax
c001025f:	74 15                	je     c0010276 <sysGetDiskVolumeLabel(regs*)+0x47>
c0010261:	83 ec 0c             	sub    esp,0xc
c0010264:	8b 38                	mov    edi,DWORD PTR [eax]
c0010266:	56                   	push   esi
c0010267:	53                   	push   ebx
c0010268:	52                   	push   edx
c0010269:	51                   	push   ecx
c001026a:	50                   	push   eax
c001026b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001026e:	83 c4 20             	add    esp,0x20
c0010271:	99                   	cdq    
c0010272:	5b                   	pop    ebx
c0010273:	5e                   	pop    esi
c0010274:	5f                   	pop    edi
c0010275:	c3                   	ret    
c0010276:	5b                   	pop    ebx
c0010277:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001027c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010281:	5e                   	pop    esi
c0010282:	5f                   	pop    edi
c0010283:	c3                   	ret    

c0010284 <sysShutdown(regs*)>:
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001028b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001028e:	85 c0                	test   eax,eax
c0010290:	74 18                	je     c00102aa <sysShutdown(regs*)+0x26>
c0010292:	83 f8 01             	cmp    eax,0x1
c0010295:	74 38                	je     c00102cf <sysShutdown(regs*)+0x4b>
c0010297:	83 f8 02             	cmp    eax,0x2
c001029a:	74 24                	je     c00102c0 <sysShutdown(regs*)+0x3c>
c001029c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102a6:	83 c4 0c             	add    esp,0xc
c00102a9:	c3                   	ret    
c00102aa:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00102af:	8b 10                	mov    edx,DWORD PTR [eax]
c00102b1:	6a 00                	push   0x0
c00102b3:	6a 00                	push   0x0
c00102b5:	6a 00                	push   0x0
c00102b7:	50                   	push   eax
c00102b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	eb dc                	jmp    c001029c <sysShutdown(regs*)+0x18>
c00102c0:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00102c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00102c7:	6a 00                	push   0x0
c00102c9:	6a 00                	push   0x0
c00102cb:	6a 01                	push   0x1
c00102cd:	eb e8                	jmp    c00102b7 <sysShutdown(regs*)+0x33>
c00102cf:	a1 20 1a 02 c0       	mov    eax,ds:0xc0021a20
c00102d4:	85 c0                	test   eax,eax
c00102d6:	74 02                	je     c00102da <sysShutdown(regs*)+0x56>
c00102d8:	ff d0                	call   eax
c00102da:	31 c0                	xor    eax,eax
c00102dc:	31 d2                	xor    edx,edx
c00102de:	83 c4 0c             	add    esp,0xc
c00102e1:	c3                   	ret    

c00102e2 <sysCallRealpath(regs*)>:
c00102e2:	83 ec 0c             	sub    esp,0xc
c00102e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00102ec:	85 d2                	test   edx,edx
c00102ee:	74 07                	je     c00102f7 <sysCallRealpath(regs*)+0x15>
c00102f0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00102f3:	85 c0                	test   eax,eax
c00102f5:	75 0b                	jne    c0010302 <sysCallRealpath(regs*)+0x20>
c00102f7:	b8 01 00 00 00       	mov    eax,0x1
c00102fc:	31 d2                	xor    edx,edx
c00102fe:	83 c4 0c             	add    esp,0xc
c0010301:	c3                   	ret    
c0010302:	51                   	push   ecx
c0010303:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010309:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001030c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010312:	51                   	push   ecx
c0010313:	52                   	push   edx
c0010314:	50                   	push   eax
c0010315:	e8 d6 99 ff ff       	call   c0009cf0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001031a:	83 c4 10             	add    esp,0x10
c001031d:	31 c0                	xor    eax,eax
c001031f:	31 d2                	xor    edx,edx
c0010321:	83 c4 0c             	add    esp,0xc
c0010324:	c3                   	ret    

c0010325 <sysCallReadDir(regs*)>:
c0010325:	53                   	push   ebx
c0010326:	83 ec 18             	sub    esp,0x18
c0010329:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001032d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010330:	83 f8 02             	cmp    eax,0x2
c0010333:	76 61                	jbe    c0010396 <sysCallReadDir(regs*)+0x71>
c0010335:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001033c:	77 49                	ja     c0010387 <sysCallReadDir(regs*)+0x62>
c001033e:	83 ec 0c             	sub    esp,0xc
c0010341:	50                   	push   eax
c0010342:	e8 00 82 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010347:	83 c4 10             	add    esp,0x10
c001034a:	85 c0                	test   eax,eax
c001034c:	74 39                	je     c0010387 <sysCallReadDir(regs*)+0x62>
c001034e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010356:	83 ec 0c             	sub    esp,0xc
c0010359:	8b 10                	mov    edx,DWORD PTR [eax]
c001035b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001035f:	51                   	push   ecx
c0010360:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010363:	51                   	push   ecx
c0010364:	6a 00                	push   0x0
c0010366:	68 10 01 00 00       	push   0x110
c001036b:	50                   	push   eax
c001036c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001036f:	83 c4 20             	add    esp,0x20
c0010372:	85 c0                	test   eax,eax
c0010374:	74 29                	je     c001039f <sysCallReadDir(regs*)+0x7a>
c0010376:	83 f8 07             	cmp    eax,0x7
c0010379:	74 1b                	je     c0010396 <sysCallReadDir(regs*)+0x71>
c001037b:	b8 02 00 00 00       	mov    eax,0x2
c0010380:	31 d2                	xor    edx,edx
c0010382:	83 c4 18             	add    esp,0x18
c0010385:	5b                   	pop    ebx
c0010386:	c3                   	ret    
c0010387:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001038c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010391:	83 c4 18             	add    esp,0x18
c0010394:	5b                   	pop    ebx
c0010395:	c3                   	ret    
c0010396:	b8 01 00 00 00       	mov    eax,0x1
c001039b:	31 d2                	xor    edx,edx
c001039d:	eb e3                	jmp    c0010382 <sysCallReadDir(regs*)+0x5d>
c001039f:	31 c0                	xor    eax,eax
c00103a1:	31 d2                	xor    edx,edx
c00103a3:	eb dd                	jmp    c0010382 <sysCallReadDir(regs*)+0x5d>

c00103a5 <sysCallIsATTY(regs*)>:
c00103a5:	83 ec 0c             	sub    esp,0xc
c00103a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00103af:	83 f8 02             	cmp    eax,0x2
c00103b2:	76 07                	jbe    c00103bb <sysCallIsATTY(regs*)+0x16>
c00103b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00103b9:	75 28                	jne    c00103e3 <sysCallIsATTY(regs*)+0x3e>
c00103bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00103c9:	85 c0                	test   eax,eax
c00103cb:	74 26                	je     c00103f3 <sysCallIsATTY(regs*)+0x4e>
c00103cd:	83 ec 0c             	sub    esp,0xc
c00103d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00103d2:	50                   	push   eax
c00103d3:	ff 12                	call   DWORD PTR [edx]
c00103d5:	31 d2                	xor    edx,edx
c00103d7:	25 ff 00 00 00       	and    eax,0xff
c00103dc:	83 c4 10             	add    esp,0x10
c00103df:	83 c4 0c             	add    esp,0xc
c00103e2:	c3                   	ret    
c00103e3:	83 ec 0c             	sub    esp,0xc
c00103e6:	50                   	push   eax
c00103e7:	e8 5b 81 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00103ec:	83 c4 10             	add    esp,0x10
c00103ef:	85 c0                	test   eax,eax
c00103f1:	75 da                	jne    c00103cd <sysCallIsATTY(regs*)+0x28>
c00103f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103fd:	83 c4 0c             	add    esp,0xc
c0010400:	c3                   	ret    

c0010401 <sysCallSeek(regs*)>:
c0010401:	53                   	push   ebx
c0010402:	83 ec 08             	sub    esp,0x8
c0010405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010409:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001040c:	8d 50 fd             	lea    edx,[eax-0x3]
c001040f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010415:	77 34                	ja     c001044b <sysCallSeek(regs*)+0x4a>
c0010417:	83 ec 0c             	sub    esp,0xc
c001041a:	50                   	push   eax
c001041b:	e8 27 81 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010420:	83 c4 0c             	add    esp,0xc
c0010423:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010426:	31 db                	xor    ebx,ebx
c0010428:	53                   	push   ebx
c0010429:	51                   	push   ecx
c001042a:	50                   	push   eax
c001042b:	e8 e8 9b ff ff       	call   c000a018 <File::seek(unsigned long long)>
c0010430:	83 c4 10             	add    esp,0x10
c0010433:	85 c0                	test   eax,eax
c0010435:	0f 95 c0             	setne  al
c0010438:	31 d2                	xor    edx,edx
c001043a:	25 ff 00 00 00       	and    eax,0xff
c001043f:	f7 d8                	neg    eax
c0010441:	83 d2 00             	adc    edx,0x0
c0010444:	83 c4 08             	add    esp,0x8
c0010447:	f7 da                	neg    edx
c0010449:	5b                   	pop    ebx
c001044a:	c3                   	ret    
c001044b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010450:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010455:	83 c4 08             	add    esp,0x8
c0010458:	5b                   	pop    ebx
c0010459:	c3                   	ret    

c001045a <sysCallTell(regs*)>:
c001045a:	53                   	push   ebx
c001045b:	83 ec 08             	sub    esp,0x8
c001045e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010462:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010465:	83 f8 02             	cmp    eax,0x2
c0010468:	76 50                	jbe    c00104ba <sysCallTell(regs*)+0x60>
c001046a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001046f:	76 19                	jbe    c001048a <sysCallTell(regs*)+0x30>
c0010471:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010474:	31 d2                	xor    edx,edx
c0010476:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001047c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010483:	31 c0                	xor    eax,eax
c0010485:	83 c4 08             	add    esp,0x8
c0010488:	5b                   	pop    ebx
c0010489:	c3                   	ret    
c001048a:	83 ec 0c             	sub    esp,0xc
c001048d:	50                   	push   eax
c001048e:	e8 b4 80 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010493:	5a                   	pop    edx
c0010494:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010497:	59                   	pop    ecx
c0010498:	53                   	push   ebx
c0010499:	50                   	push   eax
c001049a:	e8 cf 9b ff ff       	call   c000a06e <File::tell(unsigned long long*)>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	85 c0                	test   eax,eax
c00104a4:	0f 95 c0             	setne  al
c00104a7:	31 d2                	xor    edx,edx
c00104a9:	25 ff 00 00 00       	and    eax,0xff
c00104ae:	f7 d8                	neg    eax
c00104b0:	83 d2 00             	adc    edx,0x0
c00104b3:	83 c4 08             	add    esp,0x8
c00104b6:	f7 da                	neg    edx
c00104b8:	5b                   	pop    ebx
c00104b9:	c3                   	ret    
c00104ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104c4:	83 c4 08             	add    esp,0x8
c00104c7:	5b                   	pop    ebx
c00104c8:	c3                   	ret    

c00104c9 <sysCallSize(regs*)>:
c00104c9:	53                   	push   ebx
c00104ca:	83 ec 18             	sub    esp,0x18
c00104cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104d4:	83 f8 02             	cmp    eax,0x2
c00104d7:	76 56                	jbe    c001052f <sysCallSize(regs*)+0x66>
c00104d9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00104de:	76 19                	jbe    c00104f9 <sysCallSize(regs*)+0x30>
c00104e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00104e3:	31 d2                	xor    edx,edx
c00104e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104f2:	31 c0                	xor    eax,eax
c00104f4:	83 c4 18             	add    esp,0x18
c00104f7:	5b                   	pop    ebx
c00104f8:	c3                   	ret    
c00104f9:	83 ec 0c             	sub    esp,0xc
c00104fc:	50                   	push   eax
c00104fd:	e8 45 80 ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c0010502:	83 c4 0c             	add    esp,0xc
c0010505:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010509:	52                   	push   edx
c001050a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001050d:	52                   	push   edx
c001050e:	50                   	push   eax
c001050f:	e8 f2 9c ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c0010514:	83 c4 10             	add    esp,0x10
c0010517:	85 c0                	test   eax,eax
c0010519:	0f 95 c0             	setne  al
c001051c:	31 d2                	xor    edx,edx
c001051e:	25 ff 00 00 00       	and    eax,0xff
c0010523:	f7 d8                	neg    eax
c0010525:	83 d2 00             	adc    edx,0x0
c0010528:	83 c4 18             	add    esp,0x18
c001052b:	f7 da                	neg    edx
c001052d:	5b                   	pop    ebx
c001052e:	c3                   	ret    
c001052f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010534:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010539:	83 c4 18             	add    esp,0x18
c001053c:	5b                   	pop    ebx
c001053d:	c3                   	ret    

c001053e <sysCallSizeFromFilename(regs*)>:
c001053e:	57                   	push   edi
c001053f:	56                   	push   esi
c0010540:	53                   	push   ebx
c0010541:	83 ec 20             	sub    esp,0x20
c0010544:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010548:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001054b:	83 fb 02             	cmp    ebx,0x2
c001054e:	0f 86 8c 00 00 00    	jbe    c00105e0 <sysCallSizeFromFilename(regs*)+0xa2>
c0010554:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001055a:	76 1b                	jbe    c0010577 <sysCallSizeFromFilename(regs*)+0x39>
c001055c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001055f:	31 d2                	xor    edx,edx
c0010561:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010567:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001056e:	83 c4 20             	add    esp,0x20
c0010571:	31 c0                	xor    eax,eax
c0010573:	5b                   	pop    ebx
c0010574:	5e                   	pop    esi
c0010575:	5f                   	pop    edi
c0010576:	c3                   	ret    
c0010577:	83 ec 0c             	sub    esp,0xc
c001057a:	68 14 01 00 00       	push   0x114
c001057f:	e8 dd 65 ff ff       	call   c0006b61 <malloc>
c0010584:	83 c4 0c             	add    esp,0xc
c0010587:	89 c7                	mov    edi,eax
c0010589:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001058e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010591:	50                   	push   eax
c0010592:	53                   	push   ebx
c0010593:	57                   	push   edi
c0010594:	e8 01 99 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0010599:	83 c4 0c             	add    esp,0xc
c001059c:	8d 44 24 23          	lea    eax,[esp+0x23]
c00105a0:	50                   	push   eax
c00105a1:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00105a4:	52                   	push   edx
c00105a5:	57                   	push   edi
c00105a6:	e8 5b 9c ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	85 ff                	test   edi,edi
c00105b0:	74 14                	je     c00105c6 <sysCallSizeFromFilename(regs*)+0x88>
c00105b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105b6:	8b 17                	mov    edx,DWORD PTR [edi]
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	57                   	push   edi
c00105bc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00105bf:	83 c4 10             	add    esp,0x10
c00105c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105c6:	85 c0                	test   eax,eax
c00105c8:	0f 95 c0             	setne  al
c00105cb:	31 d2                	xor    edx,edx
c00105cd:	25 ff 00 00 00       	and    eax,0xff
c00105d2:	f7 d8                	neg    eax
c00105d4:	83 d2 00             	adc    edx,0x0
c00105d7:	83 c4 20             	add    esp,0x20
c00105da:	f7 da                	neg    edx
c00105dc:	5b                   	pop    ebx
c00105dd:	5e                   	pop    esi
c00105de:	5f                   	pop    edi
c00105df:	c3                   	ret    
c00105e0:	83 c4 20             	add    esp,0x20
c00105e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105e8:	5b                   	pop    ebx
c00105e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105ee:	5e                   	pop    esi
c00105ef:	5f                   	pop    edi
c00105f0:	c3                   	ret    

c00105f1 <sysCallClose(regs*)>:
c00105f1:	53                   	push   ebx
c00105f2:	83 ec 08             	sub    esp,0x8
c00105f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00105fc:	83 f8 02             	cmp    eax,0x2
c00105ff:	76 41                	jbe    c0010642 <sysCallClose(regs*)+0x51>
c0010601:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010607:	83 fa 01             	cmp    edx,0x1
c001060a:	76 2d                	jbe    c0010639 <sysCallClose(regs*)+0x48>
c001060c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010611:	77 2f                	ja     c0010642 <sysCallClose(regs*)+0x51>
c0010613:	83 ec 0c             	sub    esp,0xc
c0010616:	50                   	push   eax
c0010617:	e8 2b 7f ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c001061c:	89 c3                	mov    ebx,eax
c001061e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010621:	e8 92 99 ff ff       	call   c0009fb8 <File::close()>
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	85 db                	test   ebx,ebx
c001062b:	74 0c                	je     c0010639 <sysCallClose(regs*)+0x48>
c001062d:	83 ec 0c             	sub    esp,0xc
c0010630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010632:	53                   	push   ebx
c0010633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010636:	83 c4 10             	add    esp,0x10
c0010639:	31 c0                	xor    eax,eax
c001063b:	31 d2                	xor    edx,edx
c001063d:	83 c4 08             	add    esp,0x8
c0010640:	5b                   	pop    ebx
c0010641:	c3                   	ret    
c0010642:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010647:	ba ff ff ff ff       	mov    edx,0xffffffff
c001064c:	83 c4 08             	add    esp,0x8
c001064f:	5b                   	pop    ebx
c0010650:	c3                   	ret    

c0010651 <sysCallOpenDir(regs*)>:
c0010651:	56                   	push   esi
c0010652:	53                   	push   ebx
c0010653:	50                   	push   eax
c0010654:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010658:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001065b:	85 c0                	test   eax,eax
c001065d:	74 5b                	je     c00106ba <sysCallOpenDir(regs*)+0x69>
c001065f:	83 ec 0c             	sub    esp,0xc
c0010662:	68 14 01 00 00       	push   0x114
c0010667:	e8 f5 64 ff ff       	call   c0006b61 <malloc>
c001066c:	83 c4 0c             	add    esp,0xc
c001066f:	89 c6                	mov    esi,eax
c0010671:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010676:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010679:	50                   	push   eax
c001067a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001067d:	50                   	push   eax
c001067e:	56                   	push   esi
c001067f:	e8 40 9d ff ff       	call   c000a3c4 <Directory::Directory(char const*, Process*)>
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	85 f6                	test   esi,esi
c0010689:	74 2f                	je     c00106ba <sysCallOpenDir(regs*)+0x69>
c001068b:	83 ec 0c             	sub    esp,0xc
c001068e:	56                   	push   esi
c001068f:	e8 f0 9d ff ff       	call   c000a484 <Directory::open()>
c0010694:	83 c4 10             	add    esp,0x10
c0010697:	85 c0                	test   eax,eax
c0010699:	75 1f                	jne    c00106ba <sysCallOpenDir(regs*)+0x69>
c001069b:	83 ec 0c             	sub    esp,0xc
c001069e:	56                   	push   esi
c001069f:	e8 ae 7b ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c00106a4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	89 02                	mov    DWORD PTR [edx],eax
c00106ac:	c1 f8 1f             	sar    eax,0x1f
c00106af:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00106b2:	31 c0                	xor    eax,eax
c00106b4:	59                   	pop    ecx
c00106b5:	31 d2                	xor    edx,edx
c00106b7:	5b                   	pop    ebx
c00106b8:	5e                   	pop    esi
c00106b9:	c3                   	ret    
c00106ba:	59                   	pop    ecx
c00106bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106c5:	5b                   	pop    ebx
c00106c6:	5e                   	pop    esi
c00106c7:	c3                   	ret    

c00106c8 <sysCallCloseDir(regs*)>:
c00106c8:	53                   	push   ebx
c00106c9:	83 ec 08             	sub    esp,0x8
c00106cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00106d3:	8d 50 fd             	lea    edx,[eax-0x3]
c00106d6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00106dc:	77 2f                	ja     c001070d <sysCallCloseDir(regs*)+0x45>
c00106de:	83 ec 0c             	sub    esp,0xc
c00106e1:	50                   	push   eax
c00106e2:	e8 60 7e ff ff       	call   c0008547 <getFromFileDescriptor(int)>
c00106e7:	89 c3                	mov    ebx,eax
c00106e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00106ec:	e8 ef 9d ff ff       	call   c000a4e0 <Directory::close()>
c00106f1:	83 c4 10             	add    esp,0x10
c00106f4:	85 db                	test   ebx,ebx
c00106f6:	74 0c                	je     c0010704 <sysCallCloseDir(regs*)+0x3c>
c00106f8:	83 ec 0c             	sub    esp,0xc
c00106fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106fd:	53                   	push   ebx
c00106fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010701:	83 c4 10             	add    esp,0x10
c0010704:	31 c0                	xor    eax,eax
c0010706:	31 d2                	xor    edx,edx
c0010708:	83 c4 08             	add    esp,0x8
c001070b:	5b                   	pop    ebx
c001070c:	c3                   	ret    
c001070d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010712:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010717:	83 c4 08             	add    esp,0x8
c001071a:	5b                   	pop    ebx
c001071b:	c3                   	ret    

c001071c <sysCallMakeDir(regs*)>:
c001071c:	56                   	push   esi
c001071d:	53                   	push   ebx
c001071e:	83 ec 10             	sub    esp,0x10
c0010721:	68 14 01 00 00       	push   0x114
c0010726:	e8 36 64 ff ff       	call   c0006b61 <malloc>
c001072b:	83 c4 0c             	add    esp,0xc
c001072e:	89 c3                	mov    ebx,eax
c0010730:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010735:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010738:	56                   	push   esi
c0010739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001073d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010740:	50                   	push   eax
c0010741:	53                   	push   ebx
c0010742:	e8 7d 9c ff ff       	call   c000a3c4 <Directory::Directory(char const*, Process*)>
c0010747:	83 c4 10             	add    esp,0x10
c001074a:	85 db                	test   ebx,ebx
c001074c:	74 32                	je     c0010780 <sysCallMakeDir(regs*)+0x64>
c001074e:	83 ec 0c             	sub    esp,0xc
c0010751:	53                   	push   ebx
c0010752:	e8 0d 9f ff ff       	call   c000a664 <Directory::create()>
c0010757:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001075a:	89 c6                	mov    esi,eax
c001075c:	e8 7f 9d ff ff       	call   c000a4e0 <Directory::close()>
c0010761:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010763:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010766:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010769:	83 c4 10             	add    esp,0x10
c001076c:	31 c0                	xor    eax,eax
c001076e:	59                   	pop    ecx
c001076f:	85 f6                	test   esi,esi
c0010771:	5b                   	pop    ebx
c0010772:	0f 95 c0             	setne  al
c0010775:	5e                   	pop    esi
c0010776:	31 d2                	xor    edx,edx
c0010778:	f7 d8                	neg    eax
c001077a:	83 d2 00             	adc    edx,0x0
c001077d:	f7 da                	neg    edx
c001077f:	c3                   	ret    
c0010780:	59                   	pop    ecx
c0010781:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010786:	ba ff ff ff ff       	mov    edx,0xffffffff
c001078b:	5b                   	pop    ebx
c001078c:	5e                   	pop    esi
c001078d:	c3                   	ret    

c001078e <sysCallWait(regs*)>:
c001078e:	83 ec 10             	sub    esp,0x10
c0010791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010795:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010798:	52                   	push   edx
c0010799:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001079c:	51                   	push   ecx
c001079d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107a0:	50                   	push   eax
c00107a1:	e8 6e 23 00 00       	call   c0012b14 <waitTask(int, int*, int)>
c00107a6:	83 c4 1c             	add    esp,0x1c
c00107a9:	99                   	cdq    
c00107aa:	c3                   	ret    

c00107ab <sysCallNotImpl(regs*)>:
c00107ab:	83 ec 18             	sub    esp,0x18
c00107ae:	68 5a de 01 c0       	push   0xc001de5a
c00107b3:	e8 bb ec ff ff       	call   c000f473 <Krnl::panic(char const*)>
c00107b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107c2:	83 c4 1c             	add    esp,0x1c
c00107c5:	c3                   	ret    

c00107c6 <sysPanic(regs*)>:
c00107c6:	83 ec 18             	sub    esp,0x18
c00107c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107cd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107d0:	50                   	push   eax
c00107d1:	e8 9d ec ff ff       	call   c000f473 <Krnl::panic(char const*)>
c00107d6:	b8 01 00 00 00       	mov    eax,0x1
c00107db:	31 d2                	xor    edx,edx
c00107dd:	83 c4 1c             	add    esp,0x1c
c00107e0:	c3                   	ret    

c00107e1 <sysCallRmdir(regs*)>:
c00107e1:	56                   	push   esi
c00107e2:	53                   	push   ebx
c00107e3:	83 ec 20             	sub    esp,0x20
c00107e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107ea:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00107ed:	68 14 01 00 00       	push   0x114
c00107f2:	e8 6a 63 ff ff       	call   c0006b61 <malloc>
c00107f7:	83 c4 0c             	add    esp,0xc
c00107fa:	89 c3                	mov    ebx,eax
c00107fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010801:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010804:	50                   	push   eax
c0010805:	56                   	push   esi
c0010806:	53                   	push   ebx
c0010807:	e8 8e 96 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c001080c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001080f:	e8 be 98 ff ff       	call   c000a0d2 <File::unlink()>
c0010814:	83 c4 10             	add    esp,0x10
c0010817:	85 db                	test   ebx,ebx
c0010819:	74 14                	je     c001082f <sysCallRmdir(regs*)+0x4e>
c001081b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001081f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010821:	83 ec 0c             	sub    esp,0xc
c0010824:	53                   	push   ebx
c0010825:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010828:	83 c4 10             	add    esp,0x10
c001082b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001082f:	85 c0                	test   eax,eax
c0010831:	0f 95 c0             	setne  al
c0010834:	31 d2                	xor    edx,edx
c0010836:	25 ff 00 00 00       	and    eax,0xff
c001083b:	f7 d8                	neg    eax
c001083d:	83 d2 00             	adc    edx,0x0
c0010840:	83 c4 14             	add    esp,0x14
c0010843:	f7 da                	neg    edx
c0010845:	5b                   	pop    ebx
c0010846:	5e                   	pop    esi
c0010847:	c3                   	ret    

c0010848 <sysCallUnlink(regs*)>:
c0010848:	56                   	push   esi
c0010849:	53                   	push   ebx
c001084a:	83 ec 20             	sub    esp,0x20
c001084d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010851:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010854:	68 14 01 00 00       	push   0x114
c0010859:	e8 03 63 ff ff       	call   c0006b61 <malloc>
c001085e:	83 c4 0c             	add    esp,0xc
c0010861:	89 c3                	mov    ebx,eax
c0010863:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010868:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001086b:	50                   	push   eax
c001086c:	56                   	push   esi
c001086d:	53                   	push   ebx
c001086e:	e8 27 96 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0010873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010876:	e8 57 98 ff ff       	call   c000a0d2 <File::unlink()>
c001087b:	83 c4 10             	add    esp,0x10
c001087e:	85 db                	test   ebx,ebx
c0010880:	74 14                	je     c0010896 <sysCallUnlink(regs*)+0x4e>
c0010882:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010886:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010888:	83 ec 0c             	sub    esp,0xc
c001088b:	53                   	push   ebx
c001088c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010896:	85 c0                	test   eax,eax
c0010898:	0f 95 c0             	setne  al
c001089b:	31 d2                	xor    edx,edx
c001089d:	25 ff 00 00 00       	and    eax,0xff
c00108a2:	f7 d8                	neg    eax
c00108a4:	83 d2 00             	adc    edx,0x0
c00108a7:	83 c4 14             	add    esp,0x14
c00108aa:	f7 da                	neg    edx
c00108ac:	5b                   	pop    ebx
c00108ad:	5e                   	pop    esi
c00108ae:	c3                   	ret    

c00108af <sysCallGetArgv(regs*)>:
c00108af:	83 ec 0c             	sub    esp,0xc
c00108b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108b6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108b9:	85 c0                	test   eax,eax
c00108bb:	78 2c                	js     c00108e9 <sysCallGetArgv(regs*)+0x3a>
c00108bd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00108c3:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00108c6:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00108cc:	7d 1b                	jge    c00108e9 <sysCallGetArgv(regs*)+0x3a>
c00108ce:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00108d5:	85 c0                	test   eax,eax
c00108d7:	74 18                	je     c00108f1 <sysCallGetArgv(regs*)+0x42>
c00108d9:	83 ec 08             	sub    esp,0x8
c00108dc:	50                   	push   eax
c00108dd:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00108e0:	50                   	push   eax
c00108e1:	e8 3a fd fe ff       	call   c0000620 <strcpy>
c00108e6:	83 c4 10             	add    esp,0x10
c00108e9:	31 c0                	xor    eax,eax
c00108eb:	31 d2                	xor    edx,edx
c00108ed:	83 c4 0c             	add    esp,0xc
c00108f0:	c3                   	ret    
c00108f1:	b8 01 00 00 00       	mov    eax,0x1
c00108f6:	31 d2                	xor    edx,edx
c00108f8:	83 c4 0c             	add    esp,0xc
c00108fb:	c3                   	ret    

c00108fc <sysCallUSleep(regs*)>:
c00108fc:	83 ec 1c             	sub    esp,0x1c
c00108ff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010903:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010906:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010909:	6a 00                	push   0x0
c001090b:	6a 64                	push   0x64
c001090d:	52                   	push   edx
c001090e:	50                   	push   eax
c001090f:	e8 4c ad 00 00       	call   c001b660 <__udivdi3>
c0010914:	83 c4 14             	add    esp,0x14
c0010917:	50                   	push   eax
c0010918:	e8 cb 22 00 00       	call   c0012be8 <milliTenthSleep(unsigned int)>
c001091d:	31 c0                	xor    eax,eax
c001091f:	31 d2                	xor    edx,edx
c0010921:	83 c4 1c             	add    esp,0x1c
c0010924:	c3                   	ret    

c0010925 <sysCallSpawn(regs*)>:
c0010925:	56                   	push   esi
c0010926:	53                   	push   ebx
c0010927:	50                   	push   eax
c0010928:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001092c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001092f:	85 c0                	test   eax,eax
c0010931:	75 08                	jne    c001093b <sysCallSpawn(regs*)+0x16>
c0010933:	59                   	pop    ecx
c0010934:	31 c0                	xor    eax,eax
c0010936:	31 d2                	xor    edx,edx
c0010938:	5b                   	pop    ebx
c0010939:	5e                   	pop    esi
c001093a:	c3                   	ret    
c001093b:	83 ec 0c             	sub    esp,0xc
c001093e:	68 1f 07 00 00       	push   0x71f
c0010943:	e8 19 62 ff ff       	call   c0006b61 <malloc>
c0010948:	83 c4 10             	add    esp,0x10
c001094b:	89 c6                	mov    esi,eax
c001094d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010950:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010953:	85 c0                	test   eax,eax
c0010955:	75 33                	jne    c001098a <sysCallSpawn(regs*)+0x65>
c0010957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001095c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001095f:	52                   	push   edx
c0010960:	50                   	push   eax
c0010961:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010964:	53                   	push   ebx
c0010965:	56                   	push   esi
c0010966:	e8 61 19 00 00       	call   c00122cc <Process::Process(char const*, Process*, char**)>
c001096b:	83 c4 10             	add    esp,0x10
c001096e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010975:	75 bc                	jne    c0010933 <sysCallSpawn(regs*)+0xe>
c0010977:	83 ec 0c             	sub    esp,0xc
c001097a:	56                   	push   esi
c001097b:	e8 40 1e 00 00       	call   c00127c0 <Process::createUserThread()>
c0010980:	8b 06                	mov    eax,DWORD PTR [esi]
c0010982:	83 c4 10             	add    esp,0x10
c0010985:	99                   	cdq    
c0010986:	59                   	pop    ecx
c0010987:	5b                   	pop    ebx
c0010988:	5e                   	pop    esi
c0010989:	c3                   	ret    
c001098a:	31 c0                	xor    eax,eax
c001098c:	eb d1                	jmp    c001095f <sysCallSpawn(regs*)+0x3a>

c001098e <sysCallGetEnv(regs*)>:
c001098e:	57                   	push   edi
c001098f:	56                   	push   esi
c0010990:	53                   	push   ebx
c0010991:	83 ec 1c             	sub    esp,0x1c
c0010994:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001099d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00109a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109a6:	50                   	push   eax
c00109a7:	e8 13 ea ff ff       	call   c000f3bf <Krnl::getProcessTotalEnvCount(Process*)>
c00109ac:	83 c4 10             	add    esp,0x10
c00109af:	39 c7                	cmp    edi,eax
c00109b1:	7c 14                	jl     c00109c7 <sysCallGetEnv(regs*)+0x39>
c00109b3:	85 f6                	test   esi,esi
c00109b5:	75 0b                	jne    c00109c2 <sysCallGetEnv(regs*)+0x34>
c00109b7:	83 c4 10             	add    esp,0x10
c00109ba:	31 c0                	xor    eax,eax
c00109bc:	5b                   	pop    ebx
c00109bd:	31 d2                	xor    edx,edx
c00109bf:	5e                   	pop    esi
c00109c0:	5f                   	pop    edi
c00109c1:	c3                   	ret    
c00109c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109c5:	eb f0                	jmp    c00109b7 <sysCallGetEnv(regs*)+0x29>
c00109c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00109cb:	52                   	push   edx
c00109cc:	57                   	push   edi
c00109cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00109d3:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00109d6:	51                   	push   ecx
c00109d7:	50                   	push   eax
c00109d8:	e8 02 ea ff ff       	call   c000f3df <Krnl::getProcessEnvPair(Process*, int)>
c00109dd:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00109e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00109e8:	83 c4 0c             	add    esp,0xc
c00109eb:	85 db                	test   ebx,ebx
c00109ed:	75 23                	jne    c0010a12 <sysCallGetEnv(regs*)+0x84>
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	50                   	push   eax
c00109f3:	e8 68 fb fe ff       	call   c0000560 <strlen>
c00109f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109fb:	89 c3                	mov    ebx,eax
c00109fd:	e8 5e fb fe ff       	call   c0000560 <strlen>
c0010a02:	31 d2                	xor    edx,edx
c0010a04:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010a08:	83 c4 10             	add    esp,0x10
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	5b                   	pop    ebx
c0010a0f:	5e                   	pop    esi
c0010a10:	5f                   	pop    edi
c0010a11:	c3                   	ret    
c0010a12:	83 ec 08             	sub    esp,0x8
c0010a15:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a18:	50                   	push   eax
c0010a19:	56                   	push   esi
c0010a1a:	e8 01 fc fe ff       	call   c0000620 <strcpy>
c0010a1f:	58                   	pop    eax
c0010a20:	5a                   	pop    edx
c0010a21:	68 74 de 01 c0       	push   0xc001de74
c0010a26:	56                   	push   esi
c0010a27:	e8 b4 fd fe ff       	call   c00007e0 <strcat>
c0010a2c:	59                   	pop    ecx
c0010a2d:	5b                   	pop    ebx
c0010a2e:	57                   	push   edi
c0010a2f:	56                   	push   esi
c0010a30:	e8 ab fd fe ff       	call   c00007e0 <strcat>
c0010a35:	83 c4 10             	add    esp,0x10
c0010a38:	e9 7a ff ff ff       	jmp    c00109b7 <sysCallGetEnv(regs*)+0x29>

c0010a3d <sysSetFatAttrib(regs*)>:
c0010a3d:	57                   	push   edi
c0010a3e:	56                   	push   esi
c0010a3f:	53                   	push   ebx
c0010a40:	83 ec 1c             	sub    esp,0x1c
c0010a43:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010a47:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010a4a:	68 14 01 00 00       	push   0x114
c0010a4f:	e8 0d 61 ff ff       	call   c0006b61 <malloc>
c0010a54:	83 c4 0c             	add    esp,0xc
c0010a57:	89 c3                	mov    ebx,eax
c0010a59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a5e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a61:	50                   	push   eax
c0010a62:	57                   	push   edi
c0010a63:	53                   	push   ebx
c0010a64:	e8 31 94 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0010a69:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010a6c:	83 c4 0c             	add    esp,0xc
c0010a6f:	0f b6 d4             	movzx  edx,ah
c0010a72:	25 ff 00 00 00       	and    eax,0xff
c0010a77:	52                   	push   edx
c0010a78:	50                   	push   eax
c0010a79:	53                   	push   ebx
c0010a7a:	e8 ed 96 ff ff       	call   c000a16c <File::chfatattr(unsigned char, unsigned char)>
c0010a7f:	83 c4 10             	add    esp,0x10
c0010a82:	85 db                	test   ebx,ebx
c0010a84:	74 14                	je     c0010a9a <sysSetFatAttrib(regs*)+0x5d>
c0010a86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a8a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a8c:	83 ec 0c             	sub    esp,0xc
c0010a8f:	53                   	push   ebx
c0010a90:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a93:	83 c4 10             	add    esp,0x10
c0010a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a9a:	85 c0                	test   eax,eax
c0010a9c:	0f 95 c0             	setne  al
c0010a9f:	31 d2                	xor    edx,edx
c0010aa1:	25 ff 00 00 00       	and    eax,0xff
c0010aa6:	f7 d8                	neg    eax
c0010aa8:	83 d2 00             	adc    edx,0x0
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	f7 da                	neg    edx
c0010ab0:	5b                   	pop    ebx
c0010ab1:	5e                   	pop    esi
c0010ab2:	5f                   	pop    edi
c0010ab3:	c3                   	ret    

c0010ab4 <sysPipe(regs*)>:
c0010ab4:	57                   	push   edi
c0010ab5:	56                   	push   esi
c0010ab6:	53                   	push   ebx
c0010ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010abb:	83 ec 0c             	sub    esp,0xc
c0010abe:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010ac1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ac4:	6a 20                	push   0x20
c0010ac6:	e8 96 60 ff ff       	call   c0006b61 <malloc>
c0010acb:	89 c3                	mov    ebx,eax
c0010acd:	58                   	pop    eax
c0010ace:	5a                   	pop    edx
c0010acf:	68 00 50 00 00       	push   0x5000
c0010ad4:	53                   	push   ebx
c0010ad5:	e8 7e 6a ff ff       	call   c0007558 <Pipe::Pipe(int)>
c0010ada:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010add:	e8 70 77 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010ae2:	89 07                	mov    DWORD PTR [edi],eax
c0010ae4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ae7:	e8 66 77 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	89 06                	mov    DWORD PTR [esi],eax
c0010af1:	31 d2                	xor    edx,edx
c0010af3:	5b                   	pop    ebx
c0010af4:	31 c0                	xor    eax,eax
c0010af6:	5e                   	pop    esi
c0010af7:	5f                   	pop    edi
c0010af8:	c3                   	ret    

c0010af9 <sysGetUnixTime(regs*)>:
c0010af9:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0010afe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b08:	e9 9d 9d ff ff       	jmp    c000a8aa <Clock::timeInSecondsLocal()>

c0010b0d <string_ends_with(char const*, char const*)>:
c0010b0d:	57                   	push   edi
c0010b0e:	56                   	push   esi
c0010b0f:	53                   	push   ebx
c0010b10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b14:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010b18:	83 ec 0c             	sub    esp,0xc
c0010b1b:	53                   	push   ebx
c0010b1c:	e8 3f fa fe ff       	call   c0000560 <strlen>
c0010b21:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b24:	89 c6                	mov    esi,eax
c0010b26:	e8 35 fa fe ff       	call   c0000560 <strlen>
c0010b2b:	83 c4 10             	add    esp,0x10
c0010b2e:	39 c6                	cmp    esi,eax
c0010b30:	7d 06                	jge    c0010b38 <string_ends_with(char const*, char const*)+0x2b>
c0010b32:	5b                   	pop    ebx
c0010b33:	31 c0                	xor    eax,eax
c0010b35:	5e                   	pop    esi
c0010b36:	5f                   	pop    edi
c0010b37:	c3                   	ret    
c0010b38:	83 ec 08             	sub    esp,0x8
c0010b3b:	29 c6                	sub    esi,eax
c0010b3d:	57                   	push   edi
c0010b3e:	01 f3                	add    ebx,esi
c0010b40:	53                   	push   ebx
c0010b41:	e8 ba fb fe ff       	call   c0000700 <strcmp>
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	85 c0                	test   eax,eax
c0010b4b:	5b                   	pop    ebx
c0010b4c:	0f 94 c0             	sete   al
c0010b4f:	5e                   	pop    esi
c0010b50:	25 ff 00 00 00       	and    eax,0xff
c0010b55:	5f                   	pop    edi
c0010b56:	c3                   	ret    

c0010b57 <sysCallOpen(regs*)>:
c0010b57:	56                   	push   esi
c0010b58:	53                   	push   ebx
c0010b59:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b5f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b66:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010b69:	85 c9                	test   ecx,ecx
c0010b6b:	0f 84 b9 01 00 00    	je     c0010d2a <sysCallOpen(regs*)+0x1d3>
c0010b71:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b74:	85 c0                	test   eax,eax
c0010b76:	0f 84 ae 01 00 00    	je     c0010d2a <sysCallOpen(regs*)+0x1d3>
c0010b7c:	52                   	push   edx
c0010b7d:	68 76 de 01 c0       	push   0xc001de76
c0010b82:	50                   	push   eax
c0010b83:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b87:	56                   	push   esi
c0010b88:	e8 63 91 ff ff       	call   c0009cf0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b90:	e8 cb f9 fe ff       	call   c0000560 <strlen>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	48                   	dec    eax
c0010b99:	74 1d                	je     c0010bb8 <sysCallOpen(regs*)+0x61>
c0010b9b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010b9e:	eb 0f                	jmp    c0010baf <sysCallOpen(regs*)+0x58>
c0010ba0:	80 fa 3a             	cmp    dl,0x3a
c0010ba3:	74 0f                	je     c0010bb4 <sysCallOpen(regs*)+0x5d>
c0010ba5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010ba9:	48                   	dec    eax
c0010baa:	74 0c                	je     c0010bb8 <sysCallOpen(regs*)+0x61>
c0010bac:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010baf:	80 fa 2e             	cmp    dl,0x2e
c0010bb2:	75 ec                	jne    c0010ba0 <sysCallOpen(regs*)+0x49>
c0010bb4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010bb8:	83 ec 08             	sub    esp,0x8
c0010bbb:	68 7a de 01 c0       	push   0xc001de7a
c0010bc0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bc3:	50                   	push   eax
c0010bc4:	e8 44 ff ff ff       	call   c0010b0d <string_ends_with(char const*, char const*)>
c0010bc9:	83 c4 10             	add    esp,0x10
c0010bcc:	85 c0                	test   eax,eax
c0010bce:	74 1d                	je     c0010bed <sysCallOpen(regs*)+0x96>
c0010bd0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bd3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010bd9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010be0:	81 c4 04 01 00 00    	add    esp,0x104
c0010be6:	31 c0                	xor    eax,eax
c0010be8:	31 d2                	xor    edx,edx
c0010bea:	5b                   	pop    ebx
c0010beb:	5e                   	pop    esi
c0010bec:	c3                   	ret    
c0010bed:	83 ec 08             	sub    esp,0x8
c0010bf0:	68 7f de 01 c0       	push   0xc001de7f
c0010bf5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bf8:	50                   	push   eax
c0010bf9:	e8 0f ff ff ff       	call   c0010b0d <string_ends_with(char const*, char const*)>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	85 c0                	test   eax,eax
c0010c03:	75 cb                	jne    c0010bd0 <sysCallOpen(regs*)+0x79>
c0010c05:	83 ec 08             	sub    esp,0x8
c0010c08:	68 7b de 01 c0       	push   0xc001de7b
c0010c0d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c10:	50                   	push   eax
c0010c11:	e8 ea fa fe ff       	call   c0000700 <strcmp>
c0010c16:	83 c4 10             	add    esp,0x10
c0010c19:	85 c0                	test   eax,eax
c0010c1b:	74 b3                	je     c0010bd0 <sysCallOpen(regs*)+0x79>
c0010c1d:	83 ec 08             	sub    esp,0x8
c0010c20:	68 7a de 01 c0       	push   0xc001de7a
c0010c25:	56                   	push   esi
c0010c26:	e8 e2 fe ff ff       	call   c0010b0d <string_ends_with(char const*, char const*)>
c0010c2b:	83 c4 10             	add    esp,0x10
c0010c2e:	85 c0                	test   eax,eax
c0010c30:	75 9e                	jne    c0010bd0 <sysCallOpen(regs*)+0x79>
c0010c32:	83 ec 08             	sub    esp,0x8
c0010c35:	68 84 de 01 c0       	push   0xc001de84
c0010c3a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c3d:	50                   	push   eax
c0010c3e:	e8 ca fe ff ff       	call   c0010b0d <string_ends_with(char const*, char const*)>
c0010c43:	83 c4 10             	add    esp,0x10
c0010c46:	85 c0                	test   eax,eax
c0010c48:	0f 85 ef 00 00 00    	jne    c0010d3d <sysCallOpen(regs*)+0x1e6>
c0010c4e:	83 ec 08             	sub    esp,0x8
c0010c51:	68 89 de 01 c0       	push   0xc001de89
c0010c56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c59:	50                   	push   eax
c0010c5a:	e8 ae fe ff ff       	call   c0010b0d <string_ends_with(char const*, char const*)>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	85 c0                	test   eax,eax
c0010c64:	0f 85 d3 00 00 00    	jne    c0010d3d <sysCallOpen(regs*)+0x1e6>
c0010c6a:	83 ec 08             	sub    esp,0x8
c0010c6d:	68 85 de 01 c0       	push   0xc001de85
c0010c72:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c75:	51                   	push   ecx
c0010c76:	e8 85 fa fe ff       	call   c0000700 <strcmp>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	0f 84 b7 00 00 00    	je     c0010d3d <sysCallOpen(regs*)+0x1e6>
c0010c86:	83 ec 08             	sub    esp,0x8
c0010c89:	68 84 de 01 c0       	push   0xc001de84
c0010c8e:	56                   	push   esi
c0010c8f:	e8 79 fe ff ff       	call   c0010b0d <string_ends_with(char const*, char const*)>
c0010c94:	83 c4 10             	add    esp,0x10
c0010c97:	85 c0                	test   eax,eax
c0010c99:	0f 85 9e 00 00 00    	jne    c0010d3d <sysCallOpen(regs*)+0x1e6>
c0010c9f:	83 ec 0c             	sub    esp,0xc
c0010ca2:	68 14 01 00 00       	push   0x114
c0010ca7:	e8 b5 5e ff ff       	call   c0006b61 <malloc>
c0010cac:	83 c4 0c             	add    esp,0xc
c0010caf:	89 c6                	mov    esi,eax
c0010cb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cb9:	50                   	push   eax
c0010cba:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010cbd:	52                   	push   edx
c0010cbe:	56                   	push   esi
c0010cbf:	e8 d6 91 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0010cc4:	83 c4 10             	add    esp,0x10
c0010cc7:	85 f6                	test   esi,esi
c0010cc9:	74 5f                	je     c0010d2a <sysCallOpen(regs*)+0x1d3>
c0010ccb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010cce:	89 d0                	mov    eax,edx
c0010cd0:	25 ff 00 00 00       	and    eax,0xff
c0010cd5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010cd8:	89 d0                	mov    eax,edx
c0010cda:	83 e0 01             	and    eax,0x1
c0010cdd:	f6 c2 02             	test   dl,0x2
c0010ce0:	74 03                	je     c0010ce5 <sysCallOpen(regs*)+0x18e>
c0010ce2:	83 c8 02             	or     eax,0x2
c0010ce5:	f6 c2 04             	test   dl,0x4
c0010ce8:	74 03                	je     c0010ced <sysCallOpen(regs*)+0x196>
c0010cea:	83 c8 04             	or     eax,0x4
c0010ced:	f6 c2 08             	test   dl,0x8
c0010cf0:	74 03                	je     c0010cf5 <sysCallOpen(regs*)+0x19e>
c0010cf2:	83 c8 0a             	or     eax,0xa
c0010cf5:	83 e2 10             	and    edx,0x10
c0010cf8:	74 03                	je     c0010cfd <sysCallOpen(regs*)+0x1a6>
c0010cfa:	83 c8 12             	or     eax,0x12
c0010cfd:	83 ec 08             	sub    esp,0x8
c0010d00:	50                   	push   eax
c0010d01:	56                   	push   esi
c0010d02:	e8 53 92 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	85 c0                	test   eax,eax
c0010d0c:	75 1c                	jne    c0010d2a <sysCallOpen(regs*)+0x1d3>
c0010d0e:	83 ec 0c             	sub    esp,0xc
c0010d11:	56                   	push   esi
c0010d12:	e8 3b 75 ff ff       	call   c0008252 <UnixFile::getFileDescriptor()>
c0010d17:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d1a:	83 c4 10             	add    esp,0x10
c0010d1d:	89 02                	mov    DWORD PTR [edx],eax
c0010d1f:	c1 f8 1f             	sar    eax,0x1f
c0010d22:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d25:	e9 b6 fe ff ff       	jmp    c0010be0 <sysCallOpen(regs*)+0x89>
c0010d2a:	81 c4 04 01 00 00    	add    esp,0x104
c0010d30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d3a:	5b                   	pop    ebx
c0010d3b:	5e                   	pop    esi
c0010d3c:	c3                   	ret    
c0010d3d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d40:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d46:	e9 8e fe ff ff       	jmp    c0010bd9 <sysCallOpen(regs*)+0x82>

c0010d4b <Sys::loadSyscalls()>:
c0010d4b:	c7 05 40 1f 02 c0 27 01 01 c0 	mov    DWORD PTR ds:0xc0021f40,0xc0010127
c0010d55:	c7 05 44 1f 02 c0 1e fd 00 c0 	mov    DWORD PTR ds:0xc0021f44,0xc000fd1e
c0010d5f:	c7 05 48 1f 02 c0 0d ff 00 c0 	mov    DWORD PTR ds:0xc0021f48,0xc000ff0d
c0010d69:	c7 05 4c 1f 02 c0 5d 00 01 c0 	mov    DWORD PTR ds:0xc0021f4c,0xc001005d
c0010d73:	c7 05 50 1f 02 c0 a5 fe 00 c0 	mov    DWORD PTR ds:0xc0021f50,0xc000fea5
c0010d7d:	c7 05 54 1f 02 c0 55 fd 00 c0 	mov    DWORD PTR ds:0xc0021f54,0xc000fd55
c0010d87:	c7 05 58 1f 02 c0 36 fd 00 c0 	mov    DWORD PTR ds:0xc0021f58,0xc000fd36
c0010d91:	c7 05 5c 1f 02 c0 62 ff 00 c0 	mov    DWORD PTR ds:0xc0021f5c,0xc000ff62
c0010d9b:	c7 05 64 1f 02 c0 f1 05 01 c0 	mov    DWORD PTR ds:0xc0021f64,0xc00105f1
c0010da5:	c7 05 60 1f 02 c0 57 0b 01 c0 	mov    DWORD PTR ds:0xc0021f60,0xc0010b57
c0010daf:	c7 05 68 1f 02 c0 51 06 01 c0 	mov    DWORD PTR ds:0xc0021f68,0xc0010651
c0010db9:	c7 05 6c 1f 02 c0 25 03 01 c0 	mov    DWORD PTR ds:0xc0021f6c,0xc0010325
c0010dc3:	c7 05 70 1f 02 c0 4c 01 01 c0 	mov    DWORD PTR ds:0xc0021f70,0xc001014c
c0010dcd:	c7 05 74 1f 02 c0 51 01 01 c0 	mov    DWORD PTR ds:0xc0021f74,0xc0010151
c0010dd7:	c7 05 78 1f 02 c0 1c 07 01 c0 	mov    DWORD PTR ds:0xc0021f78,0xc001071c
c0010de1:	c7 05 7c 1f 02 c0 c8 06 01 c0 	mov    DWORD PTR ds:0xc0021f7c,0xc00106c8
c0010deb:	c7 05 80 1f 02 c0 01 04 01 c0 	mov    DWORD PTR ds:0xc0021f80,0xc0010401
c0010df5:	c7 05 84 1f 02 c0 5a 04 01 c0 	mov    DWORD PTR ds:0xc0021f84,0xc001045a
c0010dff:	c7 05 88 1f 02 c0 c9 04 01 c0 	mov    DWORD PTR ds:0xc0021f88,0xc00104c9
c0010e09:	c7 05 8c 1f 02 c0 56 01 01 c0 	mov    DWORD PTR ds:0xc0021f8c,0xc0010156
c0010e13:	c7 05 90 1f 02 c0 8e 07 01 c0 	mov    DWORD PTR ds:0xc0021f90,0xc001078e
c0010e1d:	c7 05 94 1f 02 c0 ab 07 01 c0 	mov    DWORD PTR ds:0xc0021f94,0xc00107ab
c0010e27:	c7 05 98 1f 02 c0 ab 07 01 c0 	mov    DWORD PTR ds:0xc0021f98,0xc00107ab
c0010e31:	c7 05 9c 1f 02 c0 e1 07 01 c0 	mov    DWORD PTR ds:0xc0021f9c,0xc00107e1
c0010e3b:	c7 05 a0 1f 02 c0 48 08 01 c0 	mov    DWORD PTR ds:0xc0021fa0,0xc0010848
c0010e45:	c7 05 a4 1f 02 c0 60 01 01 c0 	mov    DWORD PTR ds:0xc0021fa4,0xc0010160
c0010e4f:	c7 05 a8 1f 02 c0 af 08 01 c0 	mov    DWORD PTR ds:0xc0021fa8,0xc00108af
c0010e59:	c7 05 ac 1f 02 c0 e2 02 01 c0 	mov    DWORD PTR ds:0xc0021fac,0xc00102e2
c0010e63:	c7 05 b0 1f 02 c0 70 01 01 c0 	mov    DWORD PTR ds:0xc0021fb0,0xc0010170
c0010e6d:	c7 05 b4 1f 02 c0 a5 03 01 c0 	mov    DWORD PTR ds:0xc0021fb4,0xc00103a5
c0010e77:	c7 05 b8 1f 02 c0 fc 08 01 c0 	mov    DWORD PTR ds:0xc0021fb8,0xc00108fc
c0010e81:	c7 05 bc 1f 02 c0 3e 05 01 c0 	mov    DWORD PTR ds:0xc0021fbc,0xc001053e
c0010e8b:	c7 05 c0 1f 02 c0 25 09 01 c0 	mov    DWORD PTR ds:0xc0021fc0,0xc0010925
c0010e95:	c7 05 c4 1f 02 c0 8e 09 01 c0 	mov    DWORD PTR ds:0xc0021fc4,0xc001098e
c0010e9f:	c7 05 cc 1f 02 c0 78 01 01 c0 	mov    DWORD PTR ds:0xc0021fcc,0xc0010178
c0010ea9:	c7 05 d0 1f 02 c0 e5 01 01 c0 	mov    DWORD PTR ds:0xc0021fd0,0xc00101e5
c0010eb3:	c7 05 d4 1f 02 c0 2f 02 01 c0 	mov    DWORD PTR ds:0xc0021fd4,0xc001022f
c0010ebd:	c7 05 d8 1f 02 c0 3d 0a 01 c0 	mov    DWORD PTR ds:0xc0021fd8,0xc0010a3d
c0010ec7:	c7 05 dc 1f 02 c0 c6 07 01 c0 	mov    DWORD PTR ds:0xc0021fdc,0xc00107c6
c0010ed1:	c7 05 e0 1f 02 c0 84 02 01 c0 	mov    DWORD PTR ds:0xc0021fe0,0xc0010284
c0010edb:	c7 05 e4 1f 02 c0 b4 0a 01 c0 	mov    DWORD PTR ds:0xc0021fe4,0xc0010ab4
c0010ee5:	c7 05 e8 1f 02 c0 f9 0a 01 c0 	mov    DWORD PTR ds:0xc0021fe8,0xc0010af9
c0010eef:	c7 05 ec 1f 02 c0 fd fd 00 c0 	mov    DWORD PTR ds:0xc0021fec,0xc000fdfd
c0010ef9:	c7 05 f0 1f 02 c0 7e ff 00 c0 	mov    DWORD PTR ds:0xc0021ff0,0xc000ff7e
c0010f03:	c7 05 f4 1f 02 c0 13 00 01 c0 	mov    DWORD PTR ds:0xc0021ff4,0xc0010013
c0010f0d:	c7 05 f8 1f 02 c0 e8 fc 00 c0 	mov    DWORD PTR ds:0xc0021ff8,0xc000fce8
c0010f17:	c7 05 fc 1f 02 c0 c5 00 01 c0 	mov    DWORD PTR ds:0xc0021ffc,0xc00100c5
c0010f21:	c7 05 00 20 02 c0 61 fd 00 c0 	mov    DWORD PTR ds:0xc0022000,0xc000fd61
c0010f2b:	c7 05 04 20 02 c0 7b fd 00 c0 	mov    DWORD PTR ds:0xc0022004,0xc000fd7b
c0010f35:	c3                   	ret    

c0010f36 <Sys::systemCall(regs*, void*)>:
c0010f36:	53                   	push   ebx
c0010f37:	83 ec 08             	sub    esp,0x8
c0010f3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f3e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f41:	83 f8 7f             	cmp    eax,0x7f
c0010f44:	77 16                	ja     c0010f5c <Sys::systemCall(regs*, void*)+0x26>
c0010f46:	8b 14 85 40 1f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde0c0]
c0010f4d:	85 d2                	test   edx,edx
c0010f4f:	74 0b                	je     c0010f5c <Sys::systemCall(regs*, void*)+0x26>
c0010f51:	83 ec 0c             	sub    esp,0xc
c0010f54:	53                   	push   ebx
c0010f55:	ff d2                	call   edx
c0010f57:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010f5a:	eb 0d                	jmp    c0010f69 <Sys::systemCall(regs*, void*)+0x33>
c0010f5c:	52                   	push   edx
c0010f5d:	52                   	push   edx
c0010f5e:	50                   	push   eax
c0010f5f:	68 8e de 01 c0       	push   0xc001de8e
c0010f64:	e8 bb 89 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0010f69:	83 c4 10             	add    esp,0x10
c0010f6c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010f71:	31 d2                	xor    edx,edx
c0010f73:	83 c4 08             	add    esp,0x8
c0010f76:	5b                   	pop    ebx
c0010f77:	c3                   	ret    

c0010f78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0010f78:	55                   	push   ebp
c0010f79:	57                   	push   edi
c0010f7a:	56                   	push   esi
c0010f7b:	53                   	push   ebx
c0010f7c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0010f82:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0010f8a:	0f 95 c2             	setne  dl
c0010f8d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0010f95:	0f 94 c0             	sete   al
c0010f98:	84 c2                	test   dl,al
c0010f9a:	74 34                	je     c0010fd0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010f9c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0010fa7:	74 27                	je     c0010fd0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0010fa9:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0010fb0:	05 00 10 00 00       	add    eax,0x1000
c0010fb5:	89 c1                	mov    ecx,eax
c0010fb7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010fbc:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0010fc2:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0010fc9:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0010fd0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0010fe0:	6a 01                	push   0x1
c0010fe2:	e8 b6 76 ff ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	89 c3                	mov    ebx,eax
c0010fec:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0010ff2:	0f 86 25 01 00 00    	jbe    c001111d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0010ff8:	c1 ee 0c             	shr    esi,0xc
c0010ffb:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011002:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011006:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001100e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011019:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011020:	29 ef                	sub    edi,ebp
c0011022:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011026:	0f 83 f8 00 00 00    	jae    c0011124 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c001102c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011032:	76 05                	jbe    c0011039 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011034:	bf 00 10 00 00       	mov    edi,0x1000
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	31 d2                	xor    edx,edx
c001103e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011045:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011047:	8d 44 24 28          	lea    eax,[esp+0x28]
c001104b:	50                   	push   eax
c001104c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011050:	56                   	push   esi
c0011051:	52                   	push   edx
c0011052:	57                   	push   edi
c0011053:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001105a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001105d:	83 c4 20             	add    esp,0x20
c0011060:	85 c0                	test   eax,eax
c0011062:	75 06                	jne    c001106a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011064:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011068:	74 13                	je     c001107d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c001106a:	83 ec 0c             	sub    esp,0xc
c001106d:	53                   	push   ebx
c001106e:	e8 1e 79 ff ff       	call   c0008991 <Virt::freeKernelVirtualPages(unsigned long)>
c0011073:	83 c4 10             	add    esp,0x10
c0011076:	31 c0                	xor    eax,eax
c0011078:	e9 7c 01 00 00       	jmp    c00111f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c001107d:	fa                   	cli    
c001107e:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0011084:	e8 a5 5e ff ff       	call   c0006f2e <Phys::allocatePage()>
c0011089:	6a 07                	push   0x7
c001108b:	89 c7                	mov    edi,eax
c001108d:	53                   	push   ebx
c001108e:	50                   	push   eax
c001108f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011094:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011097:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001109d:	e8 54 7c ff ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00110a2:	83 c4 0c             	add    esp,0xc
c00110a5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00110ac:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110b2:	6a 00                	push   0x0
c00110b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110c2:	e8 a1 7a ff ff       	call   c0008b68 <VAS::mapOtherVASIn(bool, VAS*)>
c00110c7:	58                   	pop    eax
c00110c8:	5a                   	pop    edx
c00110c9:	68 07 0c 00 00       	push   0xc07
c00110ce:	55                   	push   ebp
c00110cf:	57                   	push   edi
c00110d0:	89 df                	mov    edi,ebx
c00110d2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00110d9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110df:	6a 00                	push   0x0
c00110e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110e9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00110ef:	e8 c2 7f ff ff       	call   c00090b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00110f4:	b9 00 10 00 00       	mov    ecx,0x1000
c00110f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110fb:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0011100:	83 c4 20             	add    esp,0x20
c0011103:	48                   	dec    eax
c0011104:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0011109:	85 c0                	test   eax,eax
c001110b:	75 01                	jne    c001110e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c001110d:	fb                   	sti    
c001110e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011114:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011118:	e9 f1 fe ff ff       	jmp    c001100e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c001111d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011124:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001112b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011131:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011137:	0f 86 ae 00 00 00    	jbe    c00111eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001113d:	fa                   	cli    
c001113e:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0011144:	c1 ee 0c             	shr    esi,0xc
c0011147:	51                   	push   ecx
c0011148:	31 ff                	xor    edi,edi
c001114a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011151:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011157:	6a 00                	push   0x0
c0011159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001115e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011161:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011167:	e8 fc 79 ff ff       	call   c0008b68 <VAS::mapOtherVASIn(bool, VAS*)>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	e8 ba 5d ff ff       	call   c0006f2e <Phys::allocatePage()>
c0011174:	47                   	inc    edi
c0011175:	6a 07                	push   0x7
c0011177:	53                   	push   ebx
c0011178:	50                   	push   eax
c0011179:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001117d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011183:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011186:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001118c:	e8 65 7b ff ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011191:	58                   	pop    eax
c0011192:	5a                   	pop    edx
c0011193:	68 07 0c 00 00       	push   0xc07
c0011198:	55                   	push   ebp
c0011199:	81 c5 00 10 00 00    	add    ebp,0x1000
c001119f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00111a3:	50                   	push   eax
c00111a4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00111ab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00111b1:	6a 00                	push   0x0
c00111b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111bb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00111c1:	e8 f0 7e ff ff       	call   c00090b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00111c6:	83 c4 1c             	add    esp,0x1c
c00111c9:	68 00 10 00 00       	push   0x1000
c00111ce:	6a 00                	push   0x0
c00111d0:	53                   	push   ebx
c00111d1:	e8 1a f3 fe ff       	call   c00004f0 <memset>
c00111d6:	83 c4 10             	add    esp,0x10
c00111d9:	39 fe                	cmp    esi,edi
c00111db:	77 92                	ja     c001116f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c00111dd:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00111e2:	48                   	dec    eax
c00111e3:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00111e8:	75 01                	jne    c00111eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00111ea:	fb                   	sti    
c00111eb:	83 ec 0c             	sub    esp,0xc
c00111ee:	53                   	push   ebx
c00111ef:	e8 9d 77 ff ff       	call   c0008991 <Virt::freeKernelVirtualPages(unsigned long)>
c00111f4:	83 c4 10             	add    esp,0x10
c00111f7:	b0 01                	mov    al,0x1
c00111f9:	81 c4 2c 10 00 00    	add    esp,0x102c
c00111ff:	5b                   	pop    ebx
c0011200:	5e                   	pop    esi
c0011201:	5f                   	pop    edi
c0011202:	5d                   	pop    ebp
c0011203:	c3                   	ret    

c0011204 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011204:	55                   	push   ebp
c0011205:	57                   	push   edi
c0011206:	56                   	push   esi
c0011207:	53                   	push   ebx
c0011208:	83 ec 48             	sub    esp,0x48
c001120b:	68 14 01 00 00       	push   0x114
c0011210:	e8 4c 59 ff ff       	call   c0006b61 <malloc>
c0011215:	83 c4 0c             	add    esp,0xc
c0011218:	89 c6                	mov    esi,eax
c001121a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001121e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011222:	50                   	push   eax
c0011223:	e8 72 8c ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0011228:	58                   	pop    eax
c0011229:	5a                   	pop    edx
c001122a:	6a 01                	push   0x1
c001122c:	56                   	push   esi
c001122d:	e8 28 8d ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c0011232:	83 c4 10             	add    esp,0x10
c0011235:	85 c0                	test   eax,eax
c0011237:	0f 85 47 01 00 00    	jne    c0011384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001123d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011245:	83 ec 0c             	sub    esp,0xc
c0011248:	6a 34                	push   0x34
c001124a:	e8 12 59 ff ff       	call   c0006b61 <malloc>
c001124f:	89 c3                	mov    ebx,eax
c0011251:	58                   	pop    eax
c0011252:	8b 06                	mov    eax,DWORD PTR [esi]
c0011254:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011258:	57                   	push   edi
c0011259:	53                   	push   ebx
c001125a:	6a 00                	push   0x0
c001125c:	6a 34                	push   0x34
c001125e:	56                   	push   esi
c001125f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011262:	83 c4 20             	add    esp,0x20
c0011265:	85 c0                	test   eax,eax
c0011267:	0f 85 17 01 00 00    	jne    c0011384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001126d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011273:	0f 85 0b 01 00 00    	jne    c0011384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011279:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001127c:	85 c0                	test   eax,eax
c001127e:	0f 84 00 01 00 00    	je     c0011384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011284:	31 d2                	xor    edx,edx
c0011286:	55                   	push   ebp
c0011287:	52                   	push   edx
c0011288:	50                   	push   eax
c0011289:	56                   	push   esi
c001128a:	e8 89 8d ff ff       	call   c000a018 <File::seek(unsigned long long)>
c001128f:	83 c4 10             	add    esp,0x10
c0011292:	85 c0                	test   eax,eax
c0011294:	0f 85 ea 00 00 00    	jne    c0011384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001129a:	83 ec 0c             	sub    esp,0xc
c001129d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00112a0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00112a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00112a8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00112ac:	0f af c2             	imul   eax,edx
c00112af:	50                   	push   eax
c00112b0:	e8 ac 58 ff ff       	call   c0006b61 <malloc>
c00112b5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00112b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00112bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112c2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00112c6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00112ca:	0f af c2             	imul   eax,edx
c00112cd:	99                   	cdq    
c00112ce:	52                   	push   edx
c00112cf:	50                   	push   eax
c00112d0:	56                   	push   esi
c00112d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00112d4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00112d7:	83 c4 20             	add    esp,0x20
c00112da:	85 c0                	test   eax,eax
c00112dc:	0f 84 a2 00 00 00    	je     c0011384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112e2:	31 d2                	xor    edx,edx
c00112e4:	51                   	push   ecx
c00112e5:	52                   	push   edx
c00112e6:	50                   	push   eax
c00112e7:	56                   	push   esi
c00112e8:	e8 2b 8d ff ff       	call   c000a018 <File::seek(unsigned long long)>
c00112ed:	83 c4 10             	add    esp,0x10
c00112f0:	85 c0                	test   eax,eax
c00112f2:	0f 85 8c 00 00 00    	jne    c0011384 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00112ff:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011303:	31 ed                	xor    ebp,ebp
c0011305:	0f af c2             	imul   eax,edx
c0011308:	50                   	push   eax
c0011309:	e8 53 58 ff ff       	call   c0006b61 <malloc>
c001130e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011310:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011314:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001131f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011323:	0f af c2             	imul   eax,edx
c0011326:	99                   	cdq    
c0011327:	52                   	push   edx
c0011328:	50                   	push   eax
c0011329:	56                   	push   esi
c001132a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001132d:	83 c4 20             	add    esp,0x20
c0011330:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011338:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001133c:	0f 86 80 00 00 00    	jbe    c00113c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011342:	0f b7 fd             	movzx  edi,bp
c0011345:	c1 e7 05             	shl    edi,0x5
c0011348:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001134c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001134f:	75 6b                	jne    c00113bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011351:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011354:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011358:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001135b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001135f:	52                   	push   edx
c0011360:	31 d2                	xor    edx,edx
c0011362:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011365:	52                   	push   edx
c0011366:	50                   	push   eax
c0011367:	56                   	push   esi
c0011368:	e8 ab 8c ff ff       	call   c000a018 <File::seek(unsigned long long)>
c001136d:	83 c4 10             	add    esp,0x10
c0011370:	85 c0                	test   eax,eax
c0011372:	74 17                	je     c001138b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011374:	83 ec 0c             	sub    esp,0xc
c0011377:	68 a2 de 01 c0       	push   0xc001dea2
c001137c:	e8 a3 85 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0011381:	83 c4 10             	add    esp,0x10
c0011384:	31 c0                	xor    eax,eax
c0011386:	e9 87 00 00 00       	jmp    c0011412 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001138b:	83 ec 0c             	sub    esp,0xc
c001138e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011391:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011394:	50                   	push   eax
c0011395:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011399:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001139d:	56                   	push   esi
c001139e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00113a2:	e8 d1 fb ff ff       	call   c0010f78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00113a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00113ab:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00113af:	83 c4 20             	add    esp,0x20
c00113b2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00113b6:	73 04                	jae    c00113bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00113b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113bc:	45                   	inc    ebp
c00113bd:	e9 76 ff ff ff       	jmp    c0011338 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00113c2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00113c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00113ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00113ce:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00113d4:	83 ec 0c             	sub    esp,0xc
c00113d7:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00113dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00113e2:	05 00 10 00 00       	add    eax,0x1000
c00113e7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ee:	e8 7e 57 ff ff       	call   c0006b71 <free>
c00113f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113f6:	e8 76 57 ff ff       	call   c0006b71 <free>
c00113fb:	58                   	pop    eax
c00113fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011400:	e8 6c 57 ff ff       	call   c0006b71 <free>
c0011405:	89 34 24             	mov    DWORD PTR [esp],esi
c0011408:	e8 ab 8b ff ff       	call   c0009fb8 <File::close()>
c001140d:	83 c4 10             	add    esp,0x10
c0011410:	b0 01                	mov    al,0x1
c0011412:	83 c4 3c             	add    esp,0x3c
c0011415:	5b                   	pop    ebx
c0011416:	5e                   	pop    esi
c0011417:	5f                   	pop    edi
c0011418:	5d                   	pop    ebp
c0011419:	c3                   	ret    

c001141a <Thr::runtimeReferenceHelper()>:
c001141a:	83 ec 18             	sub    esp,0x18
c001141d:	68 aa de 01 c0       	push   0xc001deaa
c0011422:	e8 fd 84 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0011427:	fa                   	cli    
c0011428:	83 c4 10             	add    esp,0x10
c001142b:	eb fe                	jmp    c001142b <Thr::runtimeReferenceHelper()+0x11>

c001142d <Thr::getAddressOfKernelSymbol(char const*)>:
c001142d:	57                   	push   edi
c001142e:	56                   	push   esi
c001142f:	53                   	push   ebx
c0011430:	31 db                	xor    ebx,ebx
c0011432:	39 1d e0 28 02 c0    	cmp    DWORD PTR ds:0xc00228e0,ebx
c0011438:	7e 3c                	jle    c0011476 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001143a:	8b 34 9d 60 28 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdd7a0]
c0011441:	31 ff                	xor    edi,edi
c0011443:	39 3c 9d 60 27 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdd8a0],edi
c001144a:	7e 27                	jle    c0011473 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001144c:	50                   	push   eax
c001144d:	50                   	push   eax
c001144e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011452:	8b 06                	mov    eax,DWORD PTR [esi]
c0011454:	03 04 9d e0 27 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdd820]
c001145b:	50                   	push   eax
c001145c:	e8 9f f2 fe ff       	call   c0000700 <strcmp>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	85 c0                	test   eax,eax
c0011466:	75 05                	jne    c001146d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011468:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001146b:	eb 0b                	jmp    c0011478 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001146d:	83 c6 10             	add    esi,0x10
c0011470:	47                   	inc    edi
c0011471:	eb d0                	jmp    c0011443 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011473:	43                   	inc    ebx
c0011474:	eb bc                	jmp    c0011432 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011476:	31 c0                	xor    eax,eax
c0011478:	5b                   	pop    ebx
c0011479:	5e                   	pop    esi
c001147a:	5f                   	pop    edi
c001147b:	c3                   	ret    

c001147c <Thr::loadKernelSymbolTable(char const*)>:
c001147c:	55                   	push   ebp
c001147d:	57                   	push   edi
c001147e:	56                   	push   esi
c001147f:	53                   	push   ebx
c0011480:	83 ec 68             	sub    esp,0x68
c0011483:	8b 35 30 29 02 c0    	mov    esi,DWORD PTR ds:0xc0022930
c0011489:	68 14 01 00 00       	push   0x114
c001148e:	e8 ce 56 ff ff       	call   c0006b61 <malloc>
c0011493:	83 c4 0c             	add    esp,0xc
c0011496:	89 c3                	mov    ebx,eax
c0011498:	56                   	push   esi
c0011499:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001149d:	50                   	push   eax
c001149e:	e8 f7 89 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c00114a3:	5e                   	pop    esi
c00114a4:	5f                   	pop    edi
c00114a5:	6a 01                	push   0x1
c00114a7:	53                   	push   ebx
c00114a8:	e8 ad 8a ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	85 c0                	test   eax,eax
c00114b2:	74 0a                	je     c00114be <Thr::loadKernelSymbolTable(char const*)+0x42>
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	68 cc de 01 c0       	push   0xc001decc
c00114bc:	eb 34                	jmp    c00114f2 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00114be:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00114c6:	83 ec 0c             	sub    esp,0xc
c00114c9:	6a 34                	push   0x34
c00114cb:	e8 91 56 ff ff       	call   c0006b61 <malloc>
c00114d0:	59                   	pop    ecx
c00114d1:	89 c7                	mov    edi,eax
c00114d3:	8d 74 24 34          	lea    esi,[esp+0x34]
c00114d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d9:	56                   	push   esi
c00114da:	57                   	push   edi
c00114db:	6a 00                	push   0x0
c00114dd:	6a 34                	push   0x34
c00114df:	53                   	push   ebx
c00114e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00114e3:	83 c4 20             	add    esp,0x20
c00114e6:	85 c0                	test   eax,eax
c00114e8:	74 17                	je     c0011501 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00114ea:	83 ec 0c             	sub    esp,0xc
c00114ed:	68 e3 de 01 c0       	push   0xc001dee3
c00114f2:	e8 7c df ff ff       	call   c000f473 <Krnl::panic(char const*)>
c00114f7:	83 c4 10             	add    esp,0x10
c00114fa:	31 c0                	xor    eax,eax
c00114fc:	e9 31 02 00 00       	jmp    c0011732 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011501:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011507:	75 e1                	jne    c00114ea <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011509:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001150c:	85 c0                	test   eax,eax
c001150e:	74 da                	je     c00114ea <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011510:	52                   	push   edx
c0011511:	31 d2                	xor    edx,edx
c0011513:	52                   	push   edx
c0011514:	50                   	push   eax
c0011515:	53                   	push   ebx
c0011516:	e8 fd 8a ff ff       	call   c000a018 <File::seek(unsigned long long)>
c001151b:	83 c4 10             	add    esp,0x10
c001151e:	85 c0                	test   eax,eax
c0011520:	75 c8                	jne    c00114ea <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011522:	83 ec 0c             	sub    esp,0xc
c0011525:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011529:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001152d:	31 ed                	xor    ebp,ebp
c001152f:	0f af c2             	imul   eax,edx
c0011532:	50                   	push   eax
c0011533:	e8 29 56 ff ff       	call   c0006b61 <malloc>
c0011538:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001153a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001153e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011545:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011549:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001154d:	0f af c2             	imul   eax,edx
c0011550:	99                   	cdq    
c0011551:	52                   	push   edx
c0011552:	50                   	push   eax
c0011553:	53                   	push   ebx
c0011554:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011557:	83 c4 20             	add    esp,0x20
c001155a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011562:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001156a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011572:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001157a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001157e:	0f 86 aa 00 00 00    	jbe    c001162e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011584:	0f b7 f5             	movzx  esi,bp
c0011587:	6b f6 28             	imul   esi,esi,0x28
c001158a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001158e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011591:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011595:	50                   	push   eax
c0011596:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001159a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001159e:	8b 16                	mov    edx,DWORD PTR [esi]
c00115a0:	6b c0 28             	imul   eax,eax,0x28
c00115a3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00115a7:	89 d0                	mov    eax,edx
c00115a9:	31 d2                	xor    edx,edx
c00115ab:	52                   	push   edx
c00115ac:	50                   	push   eax
c00115ad:	53                   	push   ebx
c00115ae:	e8 65 8a ff ff       	call   c000a018 <File::seek(unsigned long long)>
c00115b3:	83 c4 0c             	add    esp,0xc
c00115b6:	6a 20                	push   0x20
c00115b8:	6a 00                	push   0x0
c00115ba:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00115be:	52                   	push   edx
c00115bf:	e8 2c ef fe ff       	call   c00004f0 <memset>
c00115c4:	58                   	pop    eax
c00115c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115c7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00115cb:	51                   	push   ecx
c00115cc:	8d 54 24 40          	lea    edx,[esp+0x40]
c00115d0:	52                   	push   edx
c00115d1:	6a 00                	push   0x0
c00115d3:	6a 1f                	push   0x1f
c00115d5:	53                   	push   ebx
c00115d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00115d9:	83 c4 18             	add    esp,0x18
c00115dc:	68 fa de 01 c0       	push   0xc001defa
c00115e1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00115e5:	52                   	push   edx
c00115e6:	e8 15 f1 fe ff       	call   c0000700 <strcmp>
c00115eb:	83 c4 10             	add    esp,0x10
c00115ee:	85 c0                	test   eax,eax
c00115f0:	75 0f                	jne    c0011601 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00115f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00115f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011601:	50                   	push   eax
c0011602:	50                   	push   eax
c0011603:	68 02 df 01 c0       	push   0xc001df02
c0011608:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001160c:	50                   	push   eax
c001160d:	e8 ee f0 fe ff       	call   c0000700 <strcmp>
c0011612:	83 c4 10             	add    esp,0x10
c0011615:	85 c0                	test   eax,eax
c0011617:	75 0f                	jne    c0011628 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0011619:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001161c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011620:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011624:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011628:	45                   	inc    ebp
c0011629:	e9 4c ff ff ff       	jmp    c001157a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001162e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011633:	75 10                	jne    c0011645 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0011635:	83 ec 0c             	sub    esp,0xc
c0011638:	68 0a df 01 c0       	push   0xc001df0a
c001163d:	e8 31 de ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011642:	83 c4 10             	add    esp,0x10
c0011645:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001164a:	75 10                	jne    c001165c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001164c:	83 ec 0c             	sub    esp,0xc
c001164f:	68 0a df 01 c0       	push   0xc001df0a
c0011654:	e8 1a de ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	31 d2                	xor    edx,edx
c001165e:	50                   	push   eax
c001165f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011663:	52                   	push   edx
c0011664:	50                   	push   eax
c0011665:	53                   	push   ebx
c0011666:	e8 ad 89 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c001166b:	5a                   	pop    edx
c001166c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011670:	e8 ec 54 ff ff       	call   c0006b61 <malloc>
c0011675:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011679:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001167d:	31 c9                	xor    ecx,ecx
c001167f:	5e                   	pop    esi
c0011680:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011682:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0011686:	55                   	push   ebp
c0011687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001168b:	51                   	push   ecx
c001168c:	52                   	push   edx
c001168d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0011691:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0011695:	53                   	push   ebx
c0011696:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011699:	83 c4 14             	add    esp,0x14
c001169c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116a0:	e8 bc 54 ff ff       	call   c0006b61 <malloc>
c00116a5:	89 c6                	mov    esi,eax
c00116a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116ac:	56                   	push   esi
c00116ad:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00116b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00116b5:	51                   	push   ecx
c00116b6:	52                   	push   edx
c00116b7:	53                   	push   ebx
c00116b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00116bf:	8b 15 e0 28 02 c0    	mov    edx,DWORD PTR ds:0xc00228e0
c00116c5:	83 c4 1c             	add    esp,0x1c
c00116c8:	c1 e8 04             	shr    eax,0x4
c00116cb:	89 04 95 60 27 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd8a0],eax
c00116d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116d6:	31 d2                	xor    edx,edx
c00116d8:	52                   	push   edx
c00116d9:	50                   	push   eax
c00116da:	53                   	push   ebx
c00116db:	e8 38 89 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c00116e0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00116e2:	31 d2                	xor    edx,edx
c00116e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116e7:	56                   	push   esi
c00116e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116ec:	52                   	push   edx
c00116ed:	50                   	push   eax
c00116ee:	53                   	push   ebx
c00116ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00116f2:	83 c4 14             	add    esp,0x14
c00116f5:	53                   	push   ebx
c00116f6:	e8 bd 88 ff ff       	call   c0009fb8 <File::close()>
c00116fb:	5d                   	pop    ebp
c00116fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011700:	e8 6c 54 ff ff       	call   c0006b71 <free>
c0011705:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011708:	e8 64 54 ff ff       	call   c0006b71 <free>
c001170d:	a1 e0 28 02 c0       	mov    eax,ds:0xc00228e0
c0011712:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011716:	8d 50 01             	lea    edx,[eax+0x1]
c0011719:	89 0c 85 60 28 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd7a0],ecx
c0011720:	89 34 85 e0 27 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd820],esi
c0011727:	89 15 e0 28 02 c0    	mov    DWORD PTR ds:0xc00228e0,edx
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	b0 01                	mov    al,0x1
c0011732:	83 c4 5c             	add    esp,0x5c
c0011735:	5b                   	pop    ebx
c0011736:	5e                   	pop    esi
c0011737:	5f                   	pop    edi
c0011738:	5d                   	pop    ebp
c0011739:	c3                   	ret    

c001173a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001173a:	55                   	push   ebp
c001173b:	57                   	push   edi
c001173c:	56                   	push   esi
c001173d:	53                   	push   ebx
c001173e:	81 ec 68 03 00 00    	sub    esp,0x368
c0011744:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001174b:	8b 1d 30 29 02 c0    	mov    ebx,DWORD PTR ds:0xc0022930
c0011751:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0011755:	68 14 01 00 00       	push   0x114
c001175a:	e8 02 54 ff ff       	call   c0006b61 <malloc>
c001175f:	83 c4 0c             	add    esp,0xc
c0011762:	89 c5                	mov    ebp,eax
c0011764:	53                   	push   ebx
c0011765:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001176c:	50                   	push   eax
c001176d:	e8 28 87 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0011772:	5e                   	pop    esi
c0011773:	5f                   	pop    edi
c0011774:	6a 01                	push   0x1
c0011776:	55                   	push   ebp
c0011777:	e8 de 87 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	85 c0                	test   eax,eax
c0011781:	0f 85 a7 06 00 00    	jne    c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011787:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001178f:	83 ec 0c             	sub    esp,0xc
c0011792:	6a 34                	push   0x34
c0011794:	e8 c8 53 ff ff       	call   c0006b61 <malloc>
c0011799:	5b                   	pop    ebx
c001179a:	89 c7                	mov    edi,eax
c001179c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00117a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00117a3:	53                   	push   ebx
c00117a4:	57                   	push   edi
c00117a5:	6a 00                	push   0x0
c00117a7:	6a 34                	push   0x34
c00117a9:	55                   	push   ebp
c00117aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00117ad:	83 c4 20             	add    esp,0x20
c00117b0:	85 c0                	test   eax,eax
c00117b2:	0f 85 76 06 00 00    	jne    c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00117b8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00117be:	0f 85 6a 06 00 00    	jne    c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00117c4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00117c7:	85 c0                	test   eax,eax
c00117c9:	0f 84 5f 06 00 00    	je     c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00117cf:	31 d2                	xor    edx,edx
c00117d1:	51                   	push   ecx
c00117d2:	52                   	push   edx
c00117d3:	50                   	push   eax
c00117d4:	55                   	push   ebp
c00117d5:	e8 3e 88 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c00117da:	83 c4 10             	add    esp,0x10
c00117dd:	85 c0                	test   eax,eax
c00117df:	0f 85 49 06 00 00    	jne    c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00117e5:	83 ec 0c             	sub    esp,0xc
c00117e8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00117eb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00117ef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00117f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00117f7:	0f af c2             	imul   eax,edx
c00117fa:	50                   	push   eax
c00117fb:	e8 61 53 ff ff       	call   c0006b61 <malloc>
c0011800:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011803:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001180a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001180e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011812:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011816:	0f af c2             	imul   eax,edx
c0011819:	99                   	cdq    
c001181a:	52                   	push   edx
c001181b:	50                   	push   eax
c001181c:	55                   	push   ebp
c001181d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011820:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0011823:	83 c4 20             	add    esp,0x20
c0011826:	85 c0                	test   eax,eax
c0011828:	0f 84 00 06 00 00    	je     c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001182e:	52                   	push   edx
c001182f:	31 d2                	xor    edx,edx
c0011831:	52                   	push   edx
c0011832:	50                   	push   eax
c0011833:	55                   	push   ebp
c0011834:	e8 df 87 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	85 c0                	test   eax,eax
c001183e:	0f 85 ea 05 00 00    	jne    c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011844:	83 ec 0c             	sub    esp,0xc
c0011847:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001184b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001184f:	31 f6                	xor    esi,esi
c0011851:	0f af c2             	imul   eax,edx
c0011854:	50                   	push   eax
c0011855:	e8 07 53 ff ff       	call   c0006b61 <malloc>
c001185a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001185d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011861:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011864:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011868:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001186c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0011870:	0f af c2             	imul   eax,edx
c0011873:	99                   	cdq    
c0011874:	52                   	push   edx
c0011875:	50                   	push   eax
c0011876:	55                   	push   ebp
c0011877:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001187a:	83 c4 20             	add    esp,0x20
c001187d:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0011881:	0f 86 8a 00 00 00    	jbe    c0011911 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0011887:	0f b7 de             	movzx  ebx,si
c001188a:	c1 e3 05             	shl    ebx,0x5
c001188d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0011891:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0011894:	75 75                	jne    c001190b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0011896:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011899:	31 d2                	xor    edx,edx
c001189b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001189f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00118a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118a6:	50                   	push   eax
c00118a7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00118aa:	52                   	push   edx
c00118ab:	50                   	push   eax
c00118ac:	55                   	push   ebp
c00118ad:	e8 66 87 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	85 c0                	test   eax,eax
c00118b7:	0f 85 71 05 00 00    	jne    c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00118bd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00118c4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00118c7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00118cb:	31 d2                	xor    edx,edx
c00118cd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00118d1:	83 ec 0c             	sub    esp,0xc
c00118d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00118df:	50                   	push   eax
c00118e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118e8:	52                   	push   edx
c00118e9:	50                   	push   eax
c00118ea:	55                   	push   ebp
c00118eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00118ee:	83 c4 1c             	add    esp,0x1c
c00118f1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00118f4:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00118f7:	50                   	push   eax
c00118f8:	6a 00                	push   0x0
c00118fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118fe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0011902:	50                   	push   eax
c0011903:	e8 e8 eb fe ff       	call   c00004f0 <memset>
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	46                   	inc    esi
c001190c:	e9 6c ff ff ff       	jmp    c001187d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0011911:	53                   	push   ebx
c0011912:	31 db                	xor    ebx,ebx
c0011914:	68 00 01 00 00       	push   0x100
c0011919:	6a 00                	push   0x0
c001191b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001191f:	50                   	push   eax
c0011920:	e8 cb eb fe ff       	call   c00004f0 <memset>
c0011925:	83 c4 0c             	add    esp,0xc
c0011928:	68 00 01 00 00       	push   0x100
c001192d:	6a 00                	push   0x0
c001192f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0011936:	50                   	push   eax
c0011937:	e8 b4 eb fe ff       	call   c00004f0 <memset>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011947:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001194f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0011957:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001195f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011967:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001196b:	0f 86 30 01 00 00    	jbe    c0011aa1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0011971:	0f b7 f3             	movzx  esi,bx
c0011974:	6b f6 28             	imul   esi,esi,0x28
c0011977:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001197b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001197e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011982:	52                   	push   edx
c0011983:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011987:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001198b:	8b 06                	mov    eax,DWORD PTR [esi]
c001198d:	6b d2 28             	imul   edx,edx,0x28
c0011990:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0011994:	31 d2                	xor    edx,edx
c0011996:	52                   	push   edx
c0011997:	50                   	push   eax
c0011998:	55                   	push   ebp
c0011999:	e8 7a 86 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c001199e:	83 c4 0c             	add    esp,0xc
c00119a1:	6a 20                	push   0x20
c00119a3:	6a 00                	push   0x0
c00119a5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00119ac:	51                   	push   ecx
c00119ad:	e8 3e eb fe ff       	call   c00004f0 <memset>
c00119b2:	59                   	pop    ecx
c00119b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119b6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00119ba:	52                   	push   edx
c00119bb:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00119c2:	51                   	push   ecx
c00119c3:	6a 00                	push   0x0
c00119c5:	6a 1f                	push   0x1f
c00119c7:	55                   	push   ebp
c00119c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00119cb:	83 c4 1c             	add    esp,0x1c
c00119ce:	6a 09                	push   0x9
c00119d0:	68 24 df 01 c0       	push   0xc001df24
c00119d5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00119dc:	51                   	push   ecx
c00119dd:	e8 ce e9 fe ff       	call   c00003b0 <memcmp>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	85 c0                	test   eax,eax
c00119e7:	75 21                	jne    c0011a0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00119e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00119f1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00119f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00119f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00119fc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011a03:	89 d0                	mov    eax,edx
c0011a05:	40                   	inc    eax
c0011a06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a0a:	50                   	push   eax
c0011a0b:	6a 09                	push   0x9
c0011a0d:	68 2e df 01 c0       	push   0xc001df2e
c0011a12:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a19:	50                   	push   eax
c0011a1a:	e8 91 e9 fe ff       	call   c00003b0 <memcmp>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	85 c0                	test   eax,eax
c0011a24:	75 21                	jne    c0011a47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0011a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a2e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0011a32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011a36:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011a39:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0011a40:	89 d0                	mov    eax,edx
c0011a42:	40                   	inc    eax
c0011a43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a47:	50                   	push   eax
c0011a48:	50                   	push   eax
c0011a49:	68 fa de 01 c0       	push   0xc001defa
c0011a4e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a55:	50                   	push   eax
c0011a56:	e8 a5 ec fe ff       	call   c0000700 <strcmp>
c0011a5b:	83 c4 10             	add    esp,0x10
c0011a5e:	85 c0                	test   eax,eax
c0011a60:	75 0f                	jne    c0011a71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0011a62:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011a65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a71:	50                   	push   eax
c0011a72:	50                   	push   eax
c0011a73:	68 02 df 01 c0       	push   0xc001df02
c0011a78:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011a7f:	50                   	push   eax
c0011a80:	e8 7b ec fe ff       	call   c0000700 <strcmp>
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	85 c0                	test   eax,eax
c0011a8a:	75 0f                	jne    c0011a9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0011a8c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011a8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a97:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a9b:	43                   	inc    ebx
c0011a9c:	e9 c6 fe ff ff       	jmp    c0011967 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0011aa1:	31 d2                	xor    edx,edx
c0011aa3:	50                   	push   eax
c0011aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011aa8:	52                   	push   edx
c0011aa9:	50                   	push   eax
c0011aaa:	55                   	push   ebp
c0011aab:	e8 68 85 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c0011ab0:	58                   	pop    eax
c0011ab1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ab5:	e8 a7 50 ff ff       	call   c0006b61 <malloc>
c0011aba:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011abd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011ac1:	31 d2                	xor    edx,edx
c0011ac3:	58                   	pop    eax
c0011ac4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0011ac8:	53                   	push   ebx
c0011ac9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011acd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ad1:	52                   	push   edx
c0011ad2:	50                   	push   eax
c0011ad3:	55                   	push   ebp
c0011ad4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ad7:	83 c4 14             	add    esp,0x14
c0011ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ade:	e8 7e 50 ff ff       	call   c0006b61 <malloc>
c0011ae3:	31 d2                	xor    edx,edx
c0011ae5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011ae9:	83 c4 0c             	add    esp,0xc
c0011aec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011af0:	52                   	push   edx
c0011af1:	50                   	push   eax
c0011af2:	55                   	push   ebp
c0011af3:	e8 20 85 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c0011af8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011afb:	31 d2                	xor    edx,edx
c0011afd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011b04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b08:	52                   	push   edx
c0011b09:	50                   	push   eax
c0011b0a:	55                   	push   ebp
c0011b0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b0e:	83 c4 20             	add    esp,0x20
c0011b11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011b19:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011b1d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0011b21:	0f 84 0b 03 00 00    	je     c0011e32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0011b27:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0011b2e:	31 d2                	xor    edx,edx
c0011b30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b34:	c1 e8 03             	shr    eax,0x3
c0011b37:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011b3b:	51                   	push   ecx
c0011b3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b40:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0011b44:	52                   	push   edx
c0011b45:	50                   	push   eax
c0011b46:	55                   	push   ebp
c0011b47:	e8 cc 84 ff ff       	call   c000a018 <File::seek(unsigned long long)>
c0011b4c:	5b                   	pop    ebx
c0011b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b51:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0011b58:	e8 04 50 ff ff       	call   c0006b61 <malloc>
c0011b5d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0011b60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b64:	31 d2                	xor    edx,edx
c0011b66:	5e                   	pop    esi
c0011b67:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011b6b:	50                   	push   eax
c0011b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b74:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0011b7b:	52                   	push   edx
c0011b7c:	50                   	push   eax
c0011b7d:	55                   	push   ebp
c0011b7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b81:	83 c4 20             	add    esp,0x20
c0011b84:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0011b8c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b90:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0011b94:	0f 8d 7c 02 00 00    	jge    c0011e16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0011b9a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ba2:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0011ba7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0011baa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb2:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0011bb6:	89 d8                	mov    eax,ebx
c0011bb8:	c1 e8 08             	shr    eax,0x8
c0011bbb:	89 c6                	mov    esi,eax
c0011bbd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011bc1:	c1 e6 04             	shl    esi,0x4
c0011bc4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0011bc8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0011bcb:	85 d2                	test   edx,edx
c0011bcd:	0f 85 bf 00 00 00    	jne    c0011c92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011bd3:	83 ec 0c             	sub    esp,0xc
c0011bd6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011bda:	03 06                	add    eax,DWORD PTR [esi]
c0011bdc:	50                   	push   eax
c0011bdd:	e8 4b f8 ff ff       	call   c001142d <Thr::getAddressOfKernelSymbol(char const*)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	89 c2                	mov    edx,eax
c0011be7:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0011bec:	85 c0                	test   eax,eax
c0011bee:	0f 85 9e 00 00 00    	jne    c0011c92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011bf4:	83 ec 0c             	sub    esp,0xc
c0011bf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011bfb:	03 06                	add    eax,DWORD PTR [esi]
c0011bfd:	50                   	push   eax
c0011bfe:	e8 01 40 ff ff       	call   c0005c04 <Krnl::resolveCompatibilitySymbol(char*)>
c0011c03:	83 c4 10             	add    esp,0x10
c0011c06:	89 c2                	mov    edx,eax
c0011c08:	85 c0                	test   eax,eax
c0011c0a:	0f 85 82 00 00 00    	jne    c0011c92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0011c10:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011c14:	50                   	push   eax
c0011c15:	50                   	push   eax
c0011c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c1a:	03 06                	add    eax,DWORD PTR [esi]
c0011c1c:	50                   	push   eax
c0011c1d:	68 38 df 01 c0       	push   0xc001df38
c0011c22:	e8 fd 7c ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0011c27:	58                   	pop    eax
c0011c28:	5a                   	pop    edx
c0011c29:	68 52 df 01 c0       	push   0xc001df52
c0011c2e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c35:	50                   	push   eax
c0011c36:	e8 e5 e9 fe ff       	call   c0000620 <strcpy>
c0011c3b:	59                   	pop    ecx
c0011c3c:	58                   	pop    eax
c0011c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c41:	03 06                	add    eax,DWORD PTR [esi]
c0011c43:	50                   	push   eax
c0011c44:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c4b:	50                   	push   eax
c0011c4c:	e8 8f eb fe ff       	call   c00007e0 <strcat>
c0011c51:	58                   	pop    eax
c0011c52:	5a                   	pop    edx
c0011c53:	68 e8 df 01 c0       	push   0xc001dfe8
c0011c58:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c5f:	50                   	push   eax
c0011c60:	e8 7b eb fe ff       	call   c00007e0 <strcat>
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011c6d:	0f 84 5d 01 00 00    	je     c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011c73:	83 ec 0c             	sub    esp,0xc
c0011c76:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0011c7d:	50                   	push   eax
c0011c7e:	e8 f0 d7 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011c8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011c8e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0011c92:	80 fb 01             	cmp    bl,0x1
c0011c95:	0f 85 88 00 00 00    	jne    c0011d23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0011c9b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0011ca2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011ca6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0011caa:	01 ce                	add    esi,ecx
c0011cac:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011cb2:	0f 94 c0             	sete   al
c0011cb5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011cbb:	0f 94 c3             	sete   bl
c0011cbe:	09 c3                	or     ebx,eax
c0011cc0:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cc2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011cc7:	74 41                	je     c0011d0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0011cc9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0011ccc:	84 db                	test   bl,bl
c0011cce:	75 15                	jne    c0011ce5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0011cd0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011cd4:	66 83 f8 0c          	cmp    ax,0xc
c0011cd8:	76 05                	jbe    c0011cdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0011cda:	b8 0c 00 00 00       	mov    eax,0xc
c0011cdf:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011ce3:	76 37                	jbe    c0011d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011ce5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0011ce9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011cee:	0f 84 dc 00 00 00    	je     c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	68 69 df 01 c0       	push   0xc001df69
c0011cfc:	e8 72 d7 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d08:	eb 12                	jmp    c0011d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d0a:	01 c1                	add    ecx,eax
c0011d0c:	84 db                	test   bl,bl
c0011d0e:	75 0c                	jne    c0011d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d10:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011d14:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0011d18:	77 02                	ja     c0011d1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0011d1a:	01 d1                	add    ecx,edx
c0011d1c:	89 0e                	mov    DWORD PTR [esi],ecx
c0011d1e:	e9 ea 00 00 00       	jmp    c0011e0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011d23:	80 fb 02             	cmp    bl,0x2
c0011d26:	75 7c                	jne    c0011da4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0011d28:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0011d2f:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0011d33:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0011d37:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0011d3d:	74 20                	je     c0011d5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011d3f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0011d45:	74 18                	je     c0011d5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0011d47:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011d4b:	b9 0a 00 00 00       	mov    ecx,0xa
c0011d50:	66 83 f8 0e          	cmp    ax,0xe
c0011d54:	77 03                	ja     c0011d59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0011d56:	8d 48 fc             	lea    ecx,[eax-0x4]
c0011d59:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0011d5d:	76 1f                	jbe    c0011d7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0011d5f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0011d63:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011d68:	74 66                	je     c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	68 85 df 01 c0       	push   0xc001df85
c0011d72:	e8 fc d6 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d80:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0011d85:	74 13                	je     c0011d9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0011d87:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d8b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0011d92:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0011d96:	01 c8                	add    eax,ecx
c0011d98:	eb 04                	jmp    c0011d9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0011d9a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0011d9e:	01 c2                	add    edx,eax
c0011da0:	89 16                	mov    DWORD PTR [esi],edx
c0011da2:	eb 69                	jmp    c0011e0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011da4:	0f b6 db             	movzx  ebx,bl
c0011da7:	50                   	push   eax
c0011da8:	50                   	push   eax
c0011da9:	53                   	push   ebx
c0011daa:	68 a1 df 01 c0       	push   0xc001dfa1
c0011daf:	e8 70 7b ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011dbc:	74 12                	je     c0011dd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0011dbe:	83 ec 0c             	sub    esp,0xc
c0011dc1:	68 ac df 01 c0       	push   0xc001dfac
c0011dc6:	e8 a8 d6 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011dcb:	83 c4 10             	add    esp,0x10
c0011dce:	eb 3d                	jmp    c0011e0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0011dd0:	83 ec 0c             	sub    esp,0xc
c0011dd3:	55                   	push   ebp
c0011dd4:	e8 df 81 ff ff       	call   c0009fb8 <File::close()>
c0011dd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011ddc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011ddf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011de2:	59                   	pop    ecx
c0011de3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011de7:	e8 85 4d ff ff       	call   c0006b71 <free>
c0011dec:	5b                   	pop    ebx
c0011ded:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011df1:	e8 7b 4d ff ff       	call   c0006b71 <free>
c0011df6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011df9:	e8 73 4d ff ff       	call   c0006b71 <free>
c0011dfe:	5e                   	pop    esi
c0011dff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e03:	e8 69 4d ff ff       	call   c0006b71 <free>
c0011e08:	83 c4 10             	add    esp,0x10
c0011e0b:	eb 21                	jmp    c0011e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0011e0d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0011e11:	e9 76 fd ff ff       	jmp    c0011b8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0011e16:	83 ec 0c             	sub    esp,0xc
c0011e19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e1d:	e8 4f 4d ff ff       	call   c0006b71 <free>
c0011e22:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0011e26:	83 c4 10             	add    esp,0x10
c0011e29:	e9 eb fc ff ff       	jmp    c0011b19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0011e2e:	31 c0                	xor    eax,eax
c0011e30:	eb 33                	jmp    c0011e65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0011e32:	83 ec 0c             	sub    esp,0xc
c0011e35:	55                   	push   ebp
c0011e36:	e8 7d 81 ff ff       	call   c0009fb8 <File::close()>
c0011e3b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011e3e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011e41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e44:	58                   	pop    eax
c0011e45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e49:	e8 23 4d ff ff       	call   c0006b71 <free>
c0011e4e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e51:	e8 1b 4d ff ff       	call   c0006b71 <free>
c0011e56:	5a                   	pop    edx
c0011e57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e5b:	e8 11 4d ff ff       	call   c0006b71 <free>
c0011e60:	83 c4 10             	add    esp,0x10
c0011e63:	b0 01                	mov    al,0x1
c0011e65:	81 c4 5c 03 00 00    	add    esp,0x35c
c0011e6b:	5b                   	pop    ebx
c0011e6c:	5e                   	pop    esi
c0011e6d:	5f                   	pop    edi
c0011e6e:	5d                   	pop    ebp
c0011e6f:	c3                   	ret    

c0011e70 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0011e70:	56                   	push   esi
c0011e71:	31 d2                	xor    edx,edx
c0011e73:	53                   	push   ebx
c0011e74:	8b 1d 40 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022140
c0011e7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011e7e:	39 d3                	cmp    ebx,edx
c0011e80:	7e 1b                	jle    c0011e9d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0011e82:	8b 04 95 60 23 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffddca0]
c0011e89:	39 c8                	cmp    eax,ecx
c0011e8b:	77 0d                	ja     c0011e9a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0011e8d:	8b 34 95 60 21 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffddea0]
c0011e94:	01 c6                	add    esi,eax
c0011e96:	39 ce                	cmp    esi,ecx
c0011e98:	77 05                	ja     c0011e9f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0011e9a:	42                   	inc    edx
c0011e9b:	eb e1                	jmp    c0011e7e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0011e9d:	31 c0                	xor    eax,eax
c0011e9f:	5b                   	pop    ebx
c0011ea0:	5e                   	pop    esi
c0011ea1:	c3                   	ret    

c0011ea2 <Thr::getDriverNameFromAddress(unsigned long)>:
c0011ea2:	53                   	push   ebx
c0011ea3:	31 c0                	xor    eax,eax
c0011ea5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ea9:	8b 1d 40 21 02 c0    	mov    ebx,DWORD PTR ds:0xc0022140
c0011eaf:	39 c3                	cmp    ebx,eax
c0011eb1:	7e 22                	jle    c0011ed5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0011eb3:	8b 14 85 60 23 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddca0]
c0011eba:	39 ca                	cmp    edx,ecx
c0011ebc:	77 14                	ja     c0011ed2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011ebe:	03 14 85 60 21 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffddea0]
c0011ec5:	39 ca                	cmp    edx,ecx
c0011ec7:	76 09                	jbe    c0011ed2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0011ec9:	8b 04 85 60 25 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddaa0]
c0011ed0:	eb 05                	jmp    c0011ed7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0011ed2:	40                   	inc    eax
c0011ed3:	eb da                	jmp    c0011eaf <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0011ed5:	31 c0                	xor    eax,eax
c0011ed7:	5b                   	pop    ebx
c0011ed8:	c3                   	ret    

c0011ed9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0011ed9:	53                   	push   ebx
c0011eda:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0011ede:	53                   	push   ebx
c0011edf:	e8 8c ff ff ff       	call   c0011e70 <Thr::getDriverBaseFromAddress(unsigned long)>
c0011ee4:	5a                   	pop    edx
c0011ee5:	31 d2                	xor    edx,edx
c0011ee7:	85 c0                	test   eax,eax
c0011ee9:	74 04                	je     c0011eef <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0011eeb:	89 da                	mov    edx,ebx
c0011eed:	29 c2                	sub    edx,eax
c0011eef:	89 d0                	mov    eax,edx
c0011ef1:	5b                   	pop    ebx
c0011ef2:	c3                   	ret    

c0011ef3 <Thr::loadDLL(char const*, bool)>:
c0011ef3:	55                   	push   ebp
c0011ef4:	57                   	push   edi
c0011ef5:	56                   	push   esi
c0011ef6:	53                   	push   ebx
c0011ef7:	81 ec 34 01 00 00    	sub    esp,0x134
c0011efd:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011f04:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011f0b:	56                   	push   esi
c0011f0c:	68 c4 df 01 c0       	push   0xc001dfc4
c0011f11:	e8 0e 7a ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0011f16:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011f1d:	e8 3f 4c ff ff       	call   c0006b61 <malloc>
c0011f22:	83 c4 0c             	add    esp,0xc
c0011f25:	89 c3                	mov    ebx,eax
c0011f27:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c0011f2d:	56                   	push   esi
c0011f2e:	50                   	push   eax
c0011f2f:	e8 66 7f ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	85 db                	test   ebx,ebx
c0011f39:	75 3c                	jne    c0011f77 <Thr::loadDLL(char const*, bool)+0x84>
c0011f3b:	89 f8                	mov    eax,edi
c0011f3d:	84 c0                	test   al,al
c0011f3f:	0f 84 d2 01 00 00    	je     c0012117 <Thr::loadDLL(char const*, bool)+0x224>
c0011f45:	55                   	push   ebp
c0011f46:	55                   	push   ebp
c0011f47:	68 d5 df 01 c0       	push   0xc001dfd5
c0011f4c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0011f50:	55                   	push   ebp
c0011f51:	e8 ca e6 fe ff       	call   c0000620 <strcpy>
c0011f56:	58                   	pop    eax
c0011f57:	5a                   	pop    edx
c0011f58:	56                   	push   esi
c0011f59:	55                   	push   ebp
c0011f5a:	e8 81 e8 fe ff       	call   c00007e0 <strcat>
c0011f5f:	59                   	pop    ecx
c0011f60:	58                   	pop    eax
c0011f61:	68 e8 df 01 c0       	push   0xc001dfe8
c0011f66:	55                   	push   ebp
c0011f67:	e8 74 e8 fe ff       	call   c00007e0 <strcat>
c0011f6c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011f6f:	e8 ff d4 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011f74:	83 c4 10             	add    esp,0x10
c0011f77:	51                   	push   ecx
c0011f78:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011f7c:	50                   	push   eax
c0011f7d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011f81:	50                   	push   eax
c0011f82:	53                   	push   ebx
c0011f83:	e8 7e 82 ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c0011f88:	83 c4 10             	add    esp,0x10
c0011f8b:	85 db                	test   ebx,ebx
c0011f8d:	74 0c                	je     c0011f9b <Thr::loadDLL(char const*, bool)+0xa8>
c0011f8f:	83 ec 0c             	sub    esp,0xc
c0011f92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f94:	53                   	push   ebx
c0011f95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f98:	83 c4 10             	add    esp,0x10
c0011f9b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0011fa0:	75 0a                	jne    c0011fac <Thr::loadDLL(char const*, bool)+0xb9>
c0011fa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fa6:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011faa:	75 3c                	jne    c0011fe8 <Thr::loadDLL(char const*, bool)+0xf5>
c0011fac:	89 f8                	mov    eax,edi
c0011fae:	84 c0                	test   al,al
c0011fb0:	0f 84 49 01 00 00    	je     c00120ff <Thr::loadDLL(char const*, bool)+0x20c>
c0011fb6:	51                   	push   ecx
c0011fb7:	51                   	push   ecx
c0011fb8:	68 d5 df 01 c0       	push   0xc001dfd5
c0011fbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0011fc1:	53                   	push   ebx
c0011fc2:	e8 59 e6 fe ff       	call   c0000620 <strcpy>
c0011fc7:	5d                   	pop    ebp
c0011fc8:	58                   	pop    eax
c0011fc9:	56                   	push   esi
c0011fca:	53                   	push   ebx
c0011fcb:	e8 10 e8 fe ff       	call   c00007e0 <strcat>
c0011fd0:	58                   	pop    eax
c0011fd1:	5a                   	pop    edx
c0011fd2:	68 e8 df 01 c0       	push   0xc001dfe8
c0011fd7:	53                   	push   ebx
c0011fd8:	e8 03 e8 fe ff       	call   c00007e0 <strcat>
c0011fdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fe0:	e8 8e d4 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	52                   	push   edx
c0011fe9:	6a 03                	push   0x3
c0011feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011ff3:	05 ff 0f 00 00       	add    eax,0xfff
c0011ff8:	83 d2 00             	adc    edx,0x0
c0011ffb:	0f ac d0 0c          	shrd   eax,edx,0xc
c0011fff:	50                   	push   eax
c0012000:	ff 35 14 f5 01 c0    	push   DWORD PTR ds:0xc001f514
c0012006:	e8 ef 6d ff ff       	call   c0008dfa <VAS::allocatePages(int, int)>
c001200b:	59                   	pop    ecx
c001200c:	89 c3                	mov    ebx,eax
c001200e:	5d                   	pop    ebp
c001200f:	50                   	push   eax
c0012010:	68 ce cc 01 c0       	push   0xc001ccce
c0012015:	e8 0a 79 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001201a:	89 34 24             	mov    DWORD PTR [esp],esi
c001201d:	e8 3e e5 fe ff       	call   c0000560 <strlen>
c0012022:	8b 2d 40 21 02 c0    	mov    ebp,DWORD PTR ds:0xc0022140
c0012028:	40                   	inc    eax
c0012029:	89 04 24             	mov    DWORD PTR [esp],eax
c001202c:	e8 30 4b ff ff       	call   c0006b61 <malloc>
c0012031:	89 04 ad 60 25 02 c0 	mov    DWORD PTR [ebp*4-0x3ffddaa0],eax
c0012038:	58                   	pop    eax
c0012039:	a1 40 21 02 c0       	mov    eax,ds:0xc0022140
c001203e:	5a                   	pop    edx
c001203f:	56                   	push   esi
c0012040:	ff 34 85 60 25 02 c0 	push   DWORD PTR [eax*4-0x3ffddaa0]
c0012047:	e8 d4 e5 fe ff       	call   c0000620 <strcpy>
c001204c:	a1 40 21 02 c0       	mov    eax,ds:0xc0022140
c0012051:	8d 50 01             	lea    edx,[eax+0x1]
c0012054:	89 1c 85 60 23 02 c0 	mov    DWORD PTR [eax*4-0x3ffddca0],ebx
c001205b:	89 15 40 21 02 c0    	mov    DWORD PTR ds:0xc0022140,edx
c0012061:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012065:	83 c4 0c             	add    esp,0xc
c0012068:	89 14 85 60 21 02 c0 	mov    DWORD PTR [eax*4-0x3ffddea0],edx
c001206f:	6a 01                	push   0x1
c0012071:	53                   	push   ebx
c0012072:	56                   	push   esi
c0012073:	e8 c2 f6 ff ff       	call   c001173a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012078:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001207c:	83 c4 10             	add    esp,0x10
c001207f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012084:	0f 85 89 00 00 00    	jne    c0012113 <Thr::loadDLL(char const*, bool)+0x220>
c001208a:	89 f8                	mov    eax,edi
c001208c:	84 c0                	test   al,al
c001208e:	74 73                	je     c0012103 <Thr::loadDLL(char const*, bool)+0x210>
c0012090:	83 ec 0c             	sub    esp,0xc
c0012093:	68 ea df 01 c0       	push   0xc001dfea
c0012098:	e8 d6 d3 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	eb 61                	jmp    c0012103 <Thr::loadDLL(char const*, bool)+0x210>
c00120a2:	50                   	push   eax
c00120a3:	50                   	push   eax
c00120a4:	89 e8                	mov    eax,ebp
c00120a6:	c1 e0 0c             	shl    eax,0xc
c00120a9:	01 d8                	add    eax,ebx
c00120ab:	50                   	push   eax
c00120ac:	ff 35 14 f5 01 c0    	push   DWORD PTR ds:0xc001f514
c00120b2:	e8 bb 68 ff ff       	call   c0008972 <VAS::getPageTableEntry(unsigned long)>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00120bc:	a8 60                	test   al,0x60
c00120be:	75 11                	jne    c00120d1 <Thr::loadDLL(char const*, bool)+0x1de>
c00120c0:	83 ec 0c             	sub    esp,0xc
c00120c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120c8:	50                   	push   eax
c00120c9:	e8 fe 4d ff ff       	call   c0006ecc <Phys::freePage(unsigned long)>
c00120ce:	83 c4 10             	add    esp,0x10
c00120d1:	45                   	inc    ebp
c00120d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120da:	05 ff 0f 00 00       	add    eax,0xfff
c00120df:	bf 00 00 00 00       	mov    edi,0x0
c00120e4:	83 d2 00             	adc    edx,0x0
c00120e7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00120eb:	c1 ea 0c             	shr    edx,0xc
c00120ee:	39 c5                	cmp    ebp,eax
c00120f0:	89 d1                	mov    ecx,edx
c00120f2:	89 f8                	mov    eax,edi
c00120f4:	19 c8                	sbb    eax,ecx
c00120f6:	72 aa                	jb     c00120a2 <Thr::loadDLL(char const*, bool)+0x1af>
c00120f8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120fd:	75 18                	jne    c0012117 <Thr::loadDLL(char const*, bool)+0x224>
c00120ff:	31 db                	xor    ebx,ebx
c0012101:	eb 14                	jmp    c0012117 <Thr::loadDLL(char const*, bool)+0x224>
c0012103:	83 ec 0c             	sub    esp,0xc
c0012106:	68 09 e0 01 c0       	push   0xc001e009
c001210b:	e8 63 d3 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0012110:	83 c4 10             	add    esp,0x10
c0012113:	31 ed                	xor    ebp,ebp
c0012115:	eb bb                	jmp    c00120d2 <Thr::loadDLL(char const*, bool)+0x1df>
c0012117:	81 c4 2c 01 00 00    	add    esp,0x12c
c001211d:	89 d8                	mov    eax,ebx
c001211f:	5b                   	pop    ebx
c0012120:	5e                   	pop    esi
c0012121:	5f                   	pop    edi
c0012122:	5d                   	pop    ebp
c0012123:	c3                   	ret    

c0012124 <Thr::executeDLL(unsigned long, void*)>:
c0012124:	56                   	push   esi
c0012125:	53                   	push   ebx
c0012126:	52                   	push   edx
c0012127:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001212b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001212f:	85 db                	test   ebx,ebx
c0012131:	75 10                	jne    c0012143 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012133:	83 ec 0c             	sub    esp,0xc
c0012136:	68 25 e0 01 c0       	push   0xc001e025
c001213b:	e8 33 d3 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0012140:	83 c4 10             	add    esp,0x10
c0012143:	50                   	push   eax
c0012144:	50                   	push   eax
c0012145:	53                   	push   ebx
c0012146:	68 4f e0 01 c0       	push   0xc001e04f
c001214b:	e8 d4 77 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0012150:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012154:	89 d8                	mov    eax,ebx
c0012156:	83 c4 14             	add    esp,0x14
c0012159:	5b                   	pop    ebx
c001215a:	5e                   	pop    esi
c001215b:	ff e0                	jmp    eax
c001215d:	66 90                	xchg   ax,ax
c001215f:	90                   	nop

c0012160 <userModeEntryPoint(void*)>:
c0012160:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012165:	48                   	dec    eax
c0012166:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c001216b:	75 03                	jne    c0012170 <userModeEntryPoint(void*)+0x10>
c001216d:	fb                   	sti    
c001216e:	66 90                	xchg   ax,ax
c0012170:	fb                   	sti    
c0012171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012179:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001217f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012183:	e9 d7 e0 fe ff       	jmp    c000025f <goToUsermode>

c0012188 <changeTSS>:
c0012188:	83 ec 14             	sub    esp,0x14
c001218b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012190:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012193:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012198:	c1 e2 15             	shl    edx,0x15
c001219b:	29 d0                	sub    eax,edx
c001219d:	50                   	push   eax
c001219e:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00121a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a9:	05 7c 11 00 00       	add    eax,0x117c
c00121ae:	50                   	push   eax
c00121af:	e8 3c 5e ff ff       	call   c0007ff0 <TSS::setESP(unsigned long)>
c00121b4:	83 c4 1c             	add    esp,0x1c
c00121b7:	c3                   	ret    

c00121b8 <switchToThread(ThreadControlBlock*)>:
c00121b8:	57                   	push   edi
c00121b9:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c00121be:	56                   	push   esi
c00121bf:	85 c0                	test   eax,eax
c00121c1:	53                   	push   ebx
c00121c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121c6:	0f 85 90 00 00 00    	jne    c001225c <switchToThread(ThreadControlBlock*)+0xa4>
c00121cc:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00121cf:	80 fa ff             	cmp    dl,0xff
c00121d2:	0f 84 80 00 00 00    	je     c0012258 <switchToThread(ThreadControlBlock*)+0xa0>
c00121d8:	81 e2 ff 00 00 00    	and    edx,0xff
c00121de:	b8 00 04 00 00       	mov    eax,0x400
c00121e3:	29 d0                	sub    eax,edx
c00121e5:	d1 f8                	sar    eax,1
c00121e7:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00121ef:	e8 7b 24 00 00       	call   c001466f <HalQueryPerformanceCounter()>
c00121f4:	a3 48 29 02 c0       	mov    ds:0xc0022948,eax
c00121f9:	89 15 4c 29 02 c0    	mov    DWORD PTR ds:0xc002294c,edx
c00121ff:	89 c6                	mov    esi,eax
c0012201:	89 d7                	mov    edi,edx
c0012203:	2b 35 38 29 02 c0    	sub    esi,DWORD PTR ds:0xc0022938
c0012209:	a3 38 29 02 c0       	mov    ds:0xc0022938,eax
c001220e:	1b 3d 3c 29 02 c0    	sbb    edi,DWORD PTR ds:0xc002293c
c0012214:	89 35 40 29 02 c0    	mov    DWORD PTR ds:0xc0022940,esi
c001221a:	89 3d 44 29 02 c0    	mov    DWORD PTR ds:0xc0022944,edi
c0012220:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012226:	89 15 3c 29 02 c0    	mov    DWORD PTR ds:0xc002293c,edx
c001222c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001222f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012232:	01 c6                	add    esi,eax
c0012234:	11 d7                	adc    edi,edx
c0012236:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012239:	83 ec 0c             	sub    esp,0xc
c001223c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001223f:	53                   	push   ebx
c0012240:	e8 52 e0 fe ff       	call   c0000297 <switchToThreadASM>
c0012245:	0f 20 c0             	mov    eax,cr0
c0012248:	83 c8 08             	or     eax,0x8
c001224b:	0f 22 c0             	mov    cr0,eax
c001224e:	83 c4 10             	add    esp,0x10
c0012251:	5b                   	pop    ebx
c0012252:	5e                   	pop    esi
c0012253:	5f                   	pop    edi
c0012254:	c3                   	ret    
c0012255:	8d 76 00             	lea    esi,[esi+0x0]
c0012258:	31 c0                	xor    eax,eax
c001225a:	eb 90                	jmp    c00121ec <switchToThread(ThreadControlBlock*)+0x34>
c001225c:	5b                   	pop    ebx
c001225d:	c7 05 00 29 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x1
c0012267:	5e                   	pop    esi
c0012268:	5f                   	pop    edi
c0012269:	c3                   	ret    
c001226a:	66 90                	xchg   ax,ax

c001226c <Process::addArgs(char**)>:
c001226c:	57                   	push   edi
c001226d:	56                   	push   esi
c001226e:	53                   	push   ebx
c001226f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012273:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012277:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012281:	85 ff                	test   edi,edi
c0012283:	74 43                	je     c00122c8 <Process::addArgs(char**)+0x5c>
c0012285:	8b 07                	mov    eax,DWORD PTR [edi]
c0012287:	85 c0                	test   eax,eax
c0012289:	74 3d                	je     c00122c8 <Process::addArgs(char**)+0x5c>
c001228b:	31 db                	xor    ebx,ebx
c001228d:	8d 76 00             	lea    esi,[esi+0x0]
c0012290:	83 ec 0c             	sub    esp,0xc
c0012293:	50                   	push   eax
c0012294:	e8 c7 e2 fe ff       	call   c0000560 <strlen>
c0012299:	40                   	inc    eax
c001229a:	89 04 24             	mov    DWORD PTR [esp],eax
c001229d:	e8 bf 48 ff ff       	call   c0006b61 <malloc>
c00122a2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00122a9:	5a                   	pop    edx
c00122aa:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00122ad:	59                   	pop    ecx
c00122ae:	43                   	inc    ebx
c00122af:	52                   	push   edx
c00122b0:	50                   	push   eax
c00122b1:	e8 6a e3 fe ff       	call   c0000620 <strcpy>
c00122b6:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00122c2:	85 c0                	test   eax,eax
c00122c4:	75 ca                	jne    c0012290 <Process::addArgs(char**)+0x24>
c00122c6:	66 90                	xchg   ax,ax
c00122c8:	5b                   	pop    ebx
c00122c9:	5e                   	pop    esi
c00122ca:	5f                   	pop    edi
c00122cb:	c3                   	ret    

c00122cc <Process::Process(char const*, Process*, char**)>:
c00122cc:	56                   	push   esi
c00122cd:	53                   	push   ebx
c00122ce:	83 ec 14             	sub    esp,0x14
c00122d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122d5:	05 0c 02 00 00       	add    eax,0x20c
c00122da:	bb 07 00 00 00       	mov    ebx,0x7
c00122df:	89 c6                	mov    esi,eax
c00122e1:	8d 76 00             	lea    esi,[esi+0x0]
c00122e4:	85 db                	test   ebx,ebx
c00122e6:	78 14                	js     c00122fc <Process::Process(char const*, Process*, char**)+0x30>
c00122e8:	83 ec 0c             	sub    esp,0xc
c00122eb:	56                   	push   esi
c00122ec:	e8 7b 9c 00 00       	call   c001bf6c <ThreadControlBlock::ThreadControlBlock()>
c00122f1:	83 c4 10             	add    esp,0x10
c00122f4:	83 c6 5f             	add    esi,0x5f
c00122f7:	4b                   	dec    ebx
c00122f8:	eb ea                	jmp    c00122e4 <Process::Process(char const*, Process*, char**)+0x18>
c00122fa:	66 90                	xchg   ax,ax
c00122fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012300:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012307:	83 ec 0c             	sub    esp,0xc
c001230a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001230e:	e8 e9 cf ff ff       	call   c000f2fc <Krnl::newProcessEnv(Process*)>
c0012313:	83 c4 10             	add    esp,0x10
c0012316:	89 c2                	mov    edx,eax
c0012318:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001231c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012326:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001232f:	a1 50 ee 01 c0       	mov    eax,ds:0xc001ee50
c0012334:	8d 50 01             	lea    edx,[eax+0x1]
c0012337:	89 15 50 ee 01 c0    	mov    DWORD PTR ds:0xc001ee50,edx
c001233d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012341:	89 02                	mov    DWORD PTR [edx],eax
c0012343:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001234b:	83 ec 0c             	sub    esp,0xc
c001234e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012352:	e8 0a 48 ff ff       	call   c0006b61 <malloc>
c0012357:	83 c4 10             	add    esp,0x10
c001235a:	89 c3                	mov    ebx,eax
c001235c:	83 ec 08             	sub    esp,0x8
c001235f:	6a 00                	push   0x0
c0012361:	53                   	push   ebx
c0012362:	e8 3d 6e ff ff       	call   c00091a4 <VAS::VAS(bool)>
c0012367:	83 c4 10             	add    esp,0x10
c001236a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001236e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012378:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012386:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001238a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012394:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001239a:	85 c0                	test   eax,eax
c001239c:	74 42                	je     c00123e0 <Process::Process(char const*, Process*, char**)+0x114>
c001239e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123a2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00123a8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00123ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123b2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00123b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00123c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00123c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123cc:	05 0c 01 00 00       	add    eax,0x10c
c00123d1:	83 ec 08             	sub    esp,0x8
c00123d4:	52                   	push   edx
c00123d5:	50                   	push   eax
c00123d6:	e8 45 e2 fe ff       	call   c0000620 <strcpy>
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	eb 64                	jmp    c0012444 <Process::Process(char const*, Process*, char**)+0x178>
c00123e0:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00123e8:	83 ec 0c             	sub    esp,0xc
c00123eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00123ef:	e8 6d 47 ff ff       	call   c0006b61 <malloc>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	89 c3                	mov    ebx,eax
c00123f9:	83 ec 08             	sub    esp,0x8
c00123fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012400:	53                   	push   ebx
c0012401:	e8 8e 59 ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001240d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012417:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001241d:	83 ec 0c             	sub    esp,0xc
c0012420:	50                   	push   eax
c0012421:	e8 0e 52 ff ff       	call   c0007634 <addToTerminalCycle(VgaText*)>
c0012426:	83 c4 10             	add    esp,0x10
c0012429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001242d:	05 0c 01 00 00       	add    eax,0x10c
c0012432:	83 ec 08             	sub    esp,0x8
c0012435:	68 6e e0 01 c0       	push   0xc001e06e
c001243a:	50                   	push   eax
c001243b:	e8 e0 e1 fe ff       	call   c0000620 <strcpy>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	90                   	nop
c0012444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012448:	83 c0 0c             	add    eax,0xc
c001244b:	83 ec 08             	sub    esp,0x8
c001244e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012452:	50                   	push   eax
c0012453:	e8 c8 e1 fe ff       	call   c0000620 <strcpy>
c0012458:	83 c4 10             	add    esp,0x10
c001245b:	83 ec 08             	sub    esp,0x8
c001245e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012462:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012466:	e8 01 fe ff ff       	call   c001226c <Process::addArgs(char**)>
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	83 ec 08             	sub    esp,0x8
c0012471:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012475:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012479:	e8 86 ed ff ff       	call   c0011204 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001247e:	83 c4 10             	add    esp,0x10
c0012481:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012485:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012489:	83 f0 01             	xor    eax,0x1
c001248c:	88 c2                	mov    dl,al
c001248e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012492:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012498:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001249c:	25 ff 00 00 00       	and    eax,0xff
c00124a1:	83 ec 08             	sub    esp,0x8
c00124a4:	50                   	push   eax
c00124a5:	68 c8 e0 01 c0       	push   0xc001e0c8
c00124aa:	e8 75 74 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	90                   	nop
c00124b3:	83 c4 14             	add    esp,0x14
c00124b6:	5b                   	pop    ebx
c00124b7:	5e                   	pop    esi
c00124b8:	c3                   	ret    
c00124b9:	90                   	nop
c00124ba:	66 90                	xchg   ax,ax

c00124bc <Process::Process(bool, char const*, Process*, char**)>:
c00124bc:	56                   	push   esi
c00124bd:	53                   	push   ebx
c00124be:	83 ec 24             	sub    esp,0x24
c00124c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00124c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124cd:	05 0c 02 00 00       	add    eax,0x20c
c00124d2:	bb 07 00 00 00       	mov    ebx,0x7
c00124d7:	89 c6                	mov    esi,eax
c00124d9:	8d 76 00             	lea    esi,[esi+0x0]
c00124dc:	85 db                	test   ebx,ebx
c00124de:	78 14                	js     c00124f4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	56                   	push   esi
c00124e4:	e8 83 9a 00 00       	call   c001bf6c <ThreadControlBlock::ThreadControlBlock()>
c00124e9:	83 c4 10             	add    esp,0x10
c00124ec:	83 c6 5f             	add    esi,0x5f
c00124ef:	4b                   	dec    ebx
c00124f0:	eb ea                	jmp    c00124dc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00124f2:	66 90                	xchg   ax,ax
c00124f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00124ff:	83 ec 0c             	sub    esp,0xc
c0012502:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012506:	e8 f1 cd ff ff       	call   c000f2fc <Krnl::newProcessEnv(Process*)>
c001250b:	83 c4 10             	add    esp,0x10
c001250e:	89 c2                	mov    edx,eax
c0012510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012514:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001251a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001251e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012527:	a1 50 ee 01 c0       	mov    eax,ds:0xc001ee50
c001252c:	8d 50 01             	lea    edx,[eax+0x1]
c001252f:	89 15 50 ee 01 c0    	mov    DWORD PTR ds:0xc001ee50,edx
c0012535:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012539:	89 02                	mov    DWORD PTR [edx],eax
c001253b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012543:	83 ec 0c             	sub    esp,0xc
c0012546:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001254a:	e8 12 46 ff ff       	call   c0006b61 <malloc>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	89 c3                	mov    ebx,eax
c0012554:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012558:	25 ff 00 00 00       	and    eax,0xff
c001255d:	83 ec 08             	sub    esp,0x8
c0012560:	50                   	push   eax
c0012561:	53                   	push   ebx
c0012562:	e8 3d 6c ff ff       	call   c00091a4 <VAS::VAS(bool)>
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001256e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012574:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012578:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012586:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001258a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012594:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001259a:	85 c0                	test   eax,eax
c001259c:	74 42                	je     c00125e0 <Process::Process(bool, char const*, Process*, char**)+0x124>
c001259e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125a2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00125a8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00125ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125b2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00125b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00125c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00125c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125cc:	05 0c 01 00 00       	add    eax,0x10c
c00125d1:	83 ec 08             	sub    esp,0x8
c00125d4:	52                   	push   edx
c00125d5:	50                   	push   eax
c00125d6:	e8 45 e0 fe ff       	call   c0000620 <strcpy>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	eb 64                	jmp    c0012644 <Process::Process(bool, char const*, Process*, char**)+0x188>
c00125e0:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00125e8:	83 ec 0c             	sub    esp,0xc
c00125eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125ef:	e8 6d 45 ff ff       	call   c0006b61 <malloc>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	89 c3                	mov    ebx,eax
c00125f9:	83 ec 08             	sub    esp,0x8
c00125fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012600:	53                   	push   ebx
c0012601:	e8 8e 57 ff ff       	call   c0007d94 <VgaText::VgaText(char const*)>
c0012606:	83 c4 10             	add    esp,0x10
c0012609:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001260d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012613:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012617:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001261d:	83 ec 0c             	sub    esp,0xc
c0012620:	50                   	push   eax
c0012621:	e8 0e 50 ff ff       	call   c0007634 <addToTerminalCycle(VgaText*)>
c0012626:	83 c4 10             	add    esp,0x10
c0012629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001262d:	05 0c 01 00 00       	add    eax,0x10c
c0012632:	83 ec 08             	sub    esp,0x8
c0012635:	68 6e e0 01 c0       	push   0xc001e06e
c001263a:	50                   	push   eax
c001263b:	e8 e0 df fe ff       	call   c0000620 <strcpy>
c0012640:	83 c4 10             	add    esp,0x10
c0012643:	90                   	nop
c0012644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012648:	83 c0 0c             	add    eax,0xc
c001264b:	83 ec 08             	sub    esp,0x8
c001264e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012652:	50                   	push   eax
c0012653:	e8 c8 df fe ff       	call   c0000620 <strcpy>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	83 ec 08             	sub    esp,0x8
c001265e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012662:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012666:	e8 01 fc ff ff       	call   c001226c <Process::addArgs(char**)>
c001266b:	83 c4 10             	add    esp,0x10
c001266e:	90                   	nop
c001266f:	83 c4 24             	add    esp,0x24
c0012672:	5b                   	pop    ebx
c0012673:	5e                   	pop    esi
c0012674:	c3                   	ret    
c0012675:	8d 76 00             	lea    esi,[esi+0x0]

c0012678 <taskStartupFunction>:
c0012678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001267d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0012680:	c3                   	ret    
c0012681:	90                   	nop
c0012682:	66 90                	xchg   ax,ax

c0012684 <Semaphore::Semaphore(int)>:
c0012684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001268c:	89 10                	mov    DWORD PTR [eax],edx
c001268e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012692:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0012699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001269d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00126af:	90                   	nop
c00126b0:	c3                   	ret    
c00126b1:	90                   	nop
c00126b2:	66 90                	xchg   ax,ax

c00126b4 <Mutex::Mutex()>:
c00126b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126b8:	6a 01                	push   0x1
c00126ba:	50                   	push   eax
c00126bb:	e8 c4 ff ff ff       	call   c0012684 <Semaphore::Semaphore(int)>
c00126c0:	83 c4 08             	add    esp,0x8
c00126c3:	90                   	nop
c00126c4:	c3                   	ret    
c00126c5:	90                   	nop
c00126c6:	66 90                	xchg   ax,ax

c00126c8 <Process::createThread(void (*)(void*), void*, int)>:
c00126c8:	57                   	push   edi
c00126c9:	31 c9                	xor    ecx,ecx
c00126cb:	56                   	push   esi
c00126cc:	53                   	push   ebx
c00126cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126d1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00126d8:	89 f2                	mov    edx,esi
c00126da:	66 90                	xchg   ax,ax
c00126dc:	31 c0                	xor    eax,eax
c00126de:	66 89 d0             	mov    ax,dx
c00126e1:	83 e2 01             	and    edx,0x1
c00126e4:	74 12                	je     c00126f8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00126e6:	d1 f8                	sar    eax,1
c00126e8:	41                   	inc    ecx
c00126e9:	89 c2                	mov    edx,eax
c00126eb:	83 f9 10             	cmp    ecx,0x10
c00126ee:	75 ec                	jne    c00126dc <Process::createThread(void (*)(void*), void*, int)+0x14>
c00126f0:	31 db                	xor    ebx,ebx
c00126f2:	89 d8                	mov    eax,ebx
c00126f4:	5b                   	pop    ebx
c00126f5:	5e                   	pop    esi
c00126f6:	5f                   	pop    edi
c00126f7:	c3                   	ret    
c00126f8:	b8 01 00 00 00       	mov    eax,0x1
c00126fd:	d3 e0                	shl    eax,cl
c00126ff:	09 c6                	or     esi,eax
c0012701:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012704:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001270b:	01 c0                	add    eax,eax
c001270d:	01 c8                	add    eax,ecx
c001270f:	8d 04 80             	lea    eax,[eax+eax*4]
c0012712:	01 d8                	add    eax,ebx
c0012714:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001271b:	75 0b                	jne    c0012728 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001271d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0012727:	90                   	nop
c0012728:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001272e:	83 ec 08             	sub    esp,0x8
c0012731:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012734:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0012737:	01 c0                	add    eax,eax
c0012739:	01 c8                	add    eax,ecx
c001273b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001273e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0012741:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0012747:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001274d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012751:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0012757:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001275d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0012764:	89 ca                	mov    edx,ecx
c0012766:	f7 da                	neg    edx
c0012768:	c1 e2 15             	shl    edx,0x15
c001276b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0012771:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0012777:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001277b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0012785:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001278b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001278f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0012795:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001279f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00127a9:	53                   	push   ebx
c00127aa:	68 24 29 02 c0       	push   0xc0022924
c00127af:	e8 58 95 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00127b4:	83 c4 10             	add    esp,0x10
c00127b7:	89 d8                	mov    eax,ebx
c00127b9:	5b                   	pop    ebx
c00127ba:	5e                   	pop    esi
c00127bb:	5f                   	pop    edi
c00127bc:	c3                   	ret    
c00127bd:	90                   	nop
c00127be:	66 90                	xchg   ax,ax

c00127c0 <Process::createUserThread()>:
c00127c0:	83 ec 0c             	sub    esp,0xc
c00127c3:	68 80 00 00 00       	push   0x80
c00127c8:	6a 00                	push   0x0
c00127ca:	68 60 21 01 c0       	push   0xc0012160
c00127cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127d3:	50                   	push   eax
c00127d4:	e8 ef fe ff ff       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c00127d9:	83 c4 1c             	add    esp,0x1c
c00127dc:	c3                   	ret    
c00127dd:	8d 76 00             	lea    esi,[esi+0x0]

c00127e0 <setupMultitasking(void (*)())>:
c00127e0:	56                   	push   esi
c00127e1:	53                   	push   ebx
c00127e2:	53                   	push   ebx
c00127e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127e7:	eb 13                	jmp    c00127fc <setupMultitasking(void (*)())+0x1c>
c00127e9:	8d 76 00             	lea    esi,[esi+0x0]
c00127ec:	83 ec 0c             	sub    esp,0xc
c00127ef:	68 24 29 02 c0       	push   0xc0022924
c00127f4:	e8 5b 94 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00127f9:	83 c4 10             	add    esp,0x10
c00127fc:	83 ec 0c             	sub    esp,0xc
c00127ff:	68 24 29 02 c0       	push   0xc0022924
c0012804:	e8 27 94 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012809:	83 c4 10             	add    esp,0x10
c001280c:	84 c0                	test   al,al
c001280e:	74 dc                	je     c00127ec <setupMultitasking(void (*)())+0xc>
c0012810:	83 ec 0c             	sub    esp,0xc
c0012813:	68 1f 07 00 00       	push   0x71f
c0012818:	e8 44 43 ff ff       	call   c0006b61 <malloc>
c001281d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0012824:	89 c3                	mov    ebx,eax
c0012826:	6a 00                	push   0x0
c0012828:	68 72 e0 01 c0       	push   0xc001e072
c001282d:	6a 01                	push   0x1
c001282f:	50                   	push   eax
c0012830:	e8 87 fc ff ff       	call   c00124bc <Process::Process(bool, char const*, Process*, char**)>
c0012835:	83 c4 14             	add    esp,0x14
c0012838:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001283e:	89 1d 30 29 02 c0    	mov    DWORD PTR ds:0xc0022930,ebx
c0012844:	50                   	push   eax
c0012845:	e8 47 50 ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c001284a:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0012852:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001285c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0012862:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012865:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001286f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0012875:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001287b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0012885:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001288f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0012899:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001289f:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00128a5:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00128af:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00128b5:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00128bf:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00128c5:	5a                   	pop    edx
c00128c6:	59                   	pop    ecx
c00128c7:	68 6e e0 01 c0       	push   0xc001e06e
c00128cc:	50                   	push   eax
c00128cd:	e8 4e dd fe ff       	call   c0000620 <strcpy>
c00128d2:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00128d9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00128dd:	83 c4 14             	add    esp,0x14
c00128e0:	5b                   	pop    ebx
c00128e1:	5e                   	pop    esi
c00128e2:	e9 a2 d9 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00128e7:	90                   	nop

c00128e8 <schedule()>:
c00128e8:	8b 15 04 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022904
c00128ee:	85 d2                	test   edx,edx
c00128f0:	74 0e                	je     c0012900 <schedule()+0x18>
c00128f2:	c7 05 00 29 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x1
c00128fc:	c3                   	ret    
c00128fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012900:	53                   	push   ebx
c0012901:	83 ec 14             	sub    esp,0x14
c0012904:	68 24 29 02 c0       	push   0xc0022924
c0012909:	e8 22 93 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001290e:	83 c4 10             	add    esp,0x10
c0012911:	84 c0                	test   al,al
c0012913:	75 3b                	jne    c0012950 <schedule()+0x68>
c0012915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001291a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001291d:	4a                   	dec    edx
c001291e:	74 38                	je     c0012958 <schedule()+0x70>
c0012920:	83 ec 0c             	sub    esp,0xc
c0012923:	68 24 29 02 c0       	push   0xc0022924
c0012928:	e8 1f 93 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001292d:	c7 04 24 24 29 02 c0 	mov    DWORD PTR [esp],0xc0022924
c0012934:	89 c3                	mov    ebx,eax
c0012936:	e8 19 93 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001293b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0012942:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012945:	e8 6e f8 ff ff       	call   c00121b8 <switchToThread(ThreadControlBlock*)>
c001294a:	83 c4 10             	add    esp,0x10
c001294d:	8d 76 00             	lea    esi,[esi+0x0]
c0012950:	83 c4 08             	add    esp,0x8
c0012953:	5b                   	pop    ebx
c0012954:	c3                   	ret    
c0012955:	8d 76 00             	lea    esi,[esi+0x0]
c0012958:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001295f:	83 ec 08             	sub    esp,0x8
c0012962:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012967:	50                   	push   eax
c0012968:	68 24 29 02 c0       	push   0xc0022924
c001296d:	e8 9a 93 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012972:	83 c4 10             	add    esp,0x10
c0012975:	eb a9                	jmp    c0012920 <schedule()+0x38>
c0012977:	90                   	nop

c0012978 <Semaphore::tryAcquire()>:
c0012978:	53                   	push   ebx
c0012979:	83 ec 08             	sub    esp,0x8
c001297c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012980:	fa                   	cli    
c0012981:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012986:	8d 50 01             	lea    edx,[eax+0x1]
c0012989:	89 15 08 29 02 c0    	mov    DWORD PTR ds:0xc0022908,edx
c001298f:	8b 15 04 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022904
c0012995:	8d 5a 01             	lea    ebx,[edx+0x1]
c0012998:	89 1d 04 29 02 c0    	mov    DWORD PTR ds:0xc0022904,ebx
c001299e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00129a1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00129a3:	7c 33                	jl     c00129d8 <Semaphore::tryAcquire()+0x60>
c00129a5:	89 15 04 29 02 c0    	mov    DWORD PTR ds:0xc0022904,edx
c00129ab:	85 d2                	test   edx,edx
c00129ad:	75 0d                	jne    c00129bc <Semaphore::tryAcquire()+0x44>
c00129af:	8b 15 00 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022900
c00129b5:	85 d2                	test   edx,edx
c00129b7:	75 6b                	jne    c0012a24 <Semaphore::tryAcquire()+0xac>
c00129b9:	8d 76 00             	lea    esi,[esi+0x0]
c00129bc:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00129c1:	85 c0                	test   eax,eax
c00129c3:	74 0b                	je     c00129d0 <Semaphore::tryAcquire()+0x58>
c00129c5:	8d 76 00             	lea    esi,[esi+0x0]
c00129c8:	31 c0                	xor    eax,eax
c00129ca:	83 c4 08             	add    esp,0x8
c00129cd:	5b                   	pop    ebx
c00129ce:	c3                   	ret    
c00129cf:	90                   	nop
c00129d0:	fb                   	sti    
c00129d1:	83 c4 08             	add    esp,0x8
c00129d4:	5b                   	pop    ebx
c00129d5:	c3                   	ret    
c00129d6:	66 90                	xchg   ax,ax
c00129d8:	43                   	inc    ebx
c00129d9:	89 15 04 29 02 c0    	mov    DWORD PTR ds:0xc0022904,edx
c00129df:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00129e2:	85 d2                	test   edx,edx
c00129e4:	75 22                	jne    c0012a08 <Semaphore::tryAcquire()+0x90>
c00129e6:	8b 0d 00 29 02 c0    	mov    ecx,DWORD PTR ds:0xc0022900
c00129ec:	85 c9                	test   ecx,ecx
c00129ee:	74 18                	je     c0012a08 <Semaphore::tryAcquire()+0x90>
c00129f0:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c00129fa:	e8 e9 fe ff ff       	call   c00128e8 <schedule()>
c00129ff:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012a04:	48                   	dec    eax
c0012a05:	8d 76 00             	lea    esi,[esi+0x0]
c0012a08:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	75 0b                	jne    c0012a1c <Semaphore::tryAcquire()+0xa4>
c0012a11:	fb                   	sti    
c0012a12:	b0 01                	mov    al,0x1
c0012a14:	83 c4 08             	add    esp,0x8
c0012a17:	5b                   	pop    ebx
c0012a18:	c3                   	ret    
c0012a19:	8d 76 00             	lea    esi,[esi+0x0]
c0012a1c:	b0 01                	mov    al,0x1
c0012a1e:	83 c4 08             	add    esp,0x8
c0012a21:	5b                   	pop    ebx
c0012a22:	c3                   	ret    
c0012a23:	90                   	nop
c0012a24:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c0012a2e:	e8 b5 fe ff ff       	call   c00128e8 <schedule()>
c0012a33:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012a38:	48                   	dec    eax
c0012a39:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012a3e:	85 c0                	test   eax,eax
c0012a40:	75 86                	jne    c00129c8 <Semaphore::tryAcquire()+0x50>
c0012a42:	eb 8c                	jmp    c00129d0 <Semaphore::tryAcquire()+0x58>

c0012a44 <Semaphore::assertLocked(char const*)>:
c0012a44:	83 ec 0c             	sub    esp,0xc
c0012a47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a4b:	fa                   	cli    
c0012a4c:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0012a52:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c0012a57:	8d 48 01             	lea    ecx,[eax+0x1]
c0012a5a:	89 0d 04 29 02 c0    	mov    DWORD PTR ds:0xc0022904,ecx
c0012a60:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012a62:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0012a65:	7c 29                	jl     c0012a90 <Semaphore::assertLocked(char const*)+0x4c>
c0012a67:	90                   	nop
c0012a68:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c0012a6d:	85 c0                	test   eax,eax
c0012a6f:	75 0b                	jne    c0012a7c <Semaphore::assertLocked(char const*)+0x38>
c0012a71:	a1 00 29 02 c0       	mov    eax,ds:0xc0022900
c0012a76:	85 c0                	test   eax,eax
c0012a78:	75 2e                	jne    c0012aa8 <Semaphore::assertLocked(char const*)+0x64>
c0012a7a:	66 90                	xchg   ax,ax
c0012a7c:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012a81:	48                   	dec    eax
c0012a82:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012a87:	75 03                	jne    c0012a8c <Semaphore::assertLocked(char const*)+0x48>
c0012a89:	fb                   	sti    
c0012a8a:	66 90                	xchg   ax,ax
c0012a8c:	83 c4 0c             	add    esp,0xc
c0012a8f:	c3                   	ret    
c0012a90:	83 ec 0c             	sub    esp,0xc
c0012a93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012a97:	52                   	push   edx
c0012a98:	e8 d6 c9 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0012a9d:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c0012aa2:	83 c4 10             	add    esp,0x10
c0012aa5:	48                   	dec    eax
c0012aa6:	eb c0                	jmp    c0012a68 <Semaphore::assertLocked(char const*)+0x24>
c0012aa8:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c0012ab2:	e8 31 fe ff ff       	call   c00128e8 <schedule()>
c0012ab7:	eb c3                	jmp    c0012a7c <Semaphore::assertLocked(char const*)+0x38>
c0012ab9:	8d 76 00             	lea    esi,[esi+0x0]

c0012abc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0012abc:	83 ec 0c             	sub    esp,0xc
c0012abf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ac4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ac8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012acb:	e8 18 fe ff ff       	call   c00128e8 <schedule()>
c0012ad0:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012ad5:	48                   	dec    eax
c0012ad6:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012adb:	75 03                	jne    c0012ae0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0012add:	fb                   	sti    
c0012ade:	66 90                	xchg   ax,ax
c0012ae0:	83 c4 0c             	add    esp,0xc
c0012ae3:	c3                   	ret    

c0012ae4 <blockTask(TaskState)>:
c0012ae4:	83 ec 0c             	sub    esp,0xc
c0012ae7:	fa                   	cli    
c0012ae8:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0012aee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012af2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012af7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012afa:	e8 e9 fd ff ff       	call   c00128e8 <schedule()>
c0012aff:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012b04:	48                   	dec    eax
c0012b05:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012b0a:	75 04                	jne    c0012b10 <blockTask(TaskState)+0x2c>
c0012b0c:	fb                   	sti    
c0012b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b10:	83 c4 0c             	add    esp,0xc
c0012b13:	c3                   	ret    

c0012b14 <waitTask(int, int*, int)>:
c0012b14:	83 ec 18             	sub    esp,0x18
c0012b17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b20:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0012b23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012b27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b2c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0012b2f:	6a 07                	push   0x7
c0012b31:	e8 ae ff ff ff       	call   c0012ae4 <blockTask(TaskState)>
c0012b36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0012b41:	85 d2                	test   edx,edx
c0012b43:	74 0b                	je     c0012b50 <waitTask(int, int*, int)+0x3c>
c0012b45:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0012b48:	89 02                	mov    DWORD PTR [edx],eax
c0012b4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b4f:	90                   	nop
c0012b50:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0012b53:	83 c4 0c             	add    esp,0xc
c0012b56:	c3                   	ret    
c0012b57:	90                   	nop

c0012b58 <milliTenthSleepUntil(unsigned int)>:
c0012b58:	83 ec 0c             	sub    esp,0xc
c0012b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b5f:	39 05 0c 1a 02 c0    	cmp    DWORD PTR ds:0xc0021a0c,eax
c0012b65:	76 05                	jbe    c0012b6c <milliTenthSleepUntil(unsigned int)+0x14>
c0012b67:	90                   	nop
c0012b68:	83 c4 0c             	add    esp,0xc
c0012b6b:	c3                   	ret    
c0012b6c:	fa                   	cli    
c0012b6d:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0012b73:	83 ec 08             	sub    esp,0x8
c0012b76:	ff 05 04 29 02 c0    	inc    DWORD PTR ds:0xc0022904
c0012b7c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012b82:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0012b85:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012b8b:	52                   	push   edx
c0012b8c:	68 18 29 02 c0       	push   0xc0022918
c0012b91:	e8 76 91 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012b96:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012b9d:	e8 42 ff ff ff       	call   c0012ae4 <blockTask(TaskState)>
c0012ba2:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	48                   	dec    eax
c0012bab:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c0012bb0:	85 c0                	test   eax,eax
c0012bb2:	75 0c                	jne    c0012bc0 <milliTenthSleepUntil(unsigned int)+0x68>
c0012bb4:	a1 00 29 02 c0       	mov    eax,ds:0xc0022900
c0012bb9:	85 c0                	test   eax,eax
c0012bbb:	75 17                	jne    c0012bd4 <milliTenthSleepUntil(unsigned int)+0x7c>
c0012bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc0:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012bc5:	48                   	dec    eax
c0012bc6:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012bcb:	75 9b                	jne    c0012b68 <milliTenthSleepUntil(unsigned int)+0x10>
c0012bcd:	fb                   	sti    
c0012bce:	83 c4 0c             	add    esp,0xc
c0012bd1:	c3                   	ret    
c0012bd2:	66 90                	xchg   ax,ax
c0012bd4:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c0012bde:	e8 05 fd ff ff       	call   c00128e8 <schedule()>
c0012be3:	eb db                	jmp    c0012bc0 <milliTenthSleepUntil(unsigned int)+0x68>
c0012be5:	8d 76 00             	lea    esi,[esi+0x0]

c0012be8 <milliTenthSleep(unsigned int)>:
c0012be8:	a1 0c 1a 02 c0       	mov    eax,ds:0xc0021a0c
c0012bed:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0012bf1:	e9 62 ff ff ff       	jmp    c0012b58 <milliTenthSleepUntil(unsigned int)>
c0012bf6:	66 90                	xchg   ax,ax

c0012bf8 <sleep(unsigned int)>:
c0012bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bfc:	8d 04 80             	lea    eax,[eax+eax*4]
c0012bff:	8d 04 80             	lea    eax,[eax+eax*4]
c0012c02:	8d 04 80             	lea    eax,[eax+eax*4]
c0012c05:	8d 04 80             	lea    eax,[eax+eax*4]
c0012c08:	c1 e0 04             	shl    eax,0x4
c0012c0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c0f:	eb d7                	jmp    c0012be8 <milliTenthSleep(unsigned int)>
c0012c11:	90                   	nop
c0012c12:	66 90                	xchg   ax,ax

c0012c14 <Semaphore::acquire()>:
c0012c14:	83 ec 0c             	sub    esp,0xc
c0012c17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c1b:	fa                   	cli    
c0012c1c:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c0012c21:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0012c27:	8d 48 01             	lea    ecx,[eax+0x1]
c0012c2a:	89 0d 04 29 02 c0    	mov    DWORD PTR ds:0xc0022904,ecx
c0012c30:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0012c33:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0012c35:	7d 2d                	jge    c0012c64 <Semaphore::acquire()+0x50>
c0012c37:	41                   	inc    ecx
c0012c38:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0012c3b:	90                   	nop
c0012c3c:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c0012c41:	85 c0                	test   eax,eax
c0012c43:	75 0b                	jne    c0012c50 <Semaphore::acquire()+0x3c>
c0012c45:	a1 00 29 02 c0       	mov    eax,ds:0xc0022900
c0012c4a:	85 c0                	test   eax,eax
c0012c4c:	75 62                	jne    c0012cb0 <Semaphore::acquire()+0x9c>
c0012c4e:	66 90                	xchg   ax,ax
c0012c50:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012c55:	48                   	dec    eax
c0012c56:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012c5b:	75 03                	jne    c0012c60 <Semaphore::acquire()+0x4c>
c0012c5d:	fb                   	sti    
c0012c5e:	66 90                	xchg   ax,ax
c0012c60:	83 c4 0c             	add    esp,0xc
c0012c63:	c3                   	ret    
c0012c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012c70:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0012c73:	85 c9                	test   ecx,ecx
c0012c75:	74 4d                	je     c0012cc4 <Semaphore::acquire()+0xb0>
c0012c77:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0012c7a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c80:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0012c83:	90                   	nop
c0012c84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c89:	83 ec 0c             	sub    esp,0xc
c0012c8c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0012c8f:	68 f0 e0 01 c0       	push   0xc001e0f0
c0012c94:	e8 8b 6c ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0012c99:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0012ca0:	e8 3f fe ff ff       	call   c0012ae4 <blockTask(TaskState)>
c0012ca5:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c0012caa:	83 c4 10             	add    esp,0x10
c0012cad:	48                   	dec    eax
c0012cae:	eb 8c                	jmp    c0012c3c <Semaphore::acquire()+0x28>
c0012cb0:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c0012cba:	e8 29 fc ff ff       	call   c00128e8 <schedule()>
c0012cbf:	eb 8f                	jmp    c0012c50 <Semaphore::acquire()+0x3c>
c0012cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cc9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012ccc:	eb b6                	jmp    c0012c84 <Semaphore::acquire()+0x70>
c0012cce:	66 90                	xchg   ax,ax

c0012cd0 <taskReturned>:
c0012cd0:	83 ec 18             	sub    esp,0x18
c0012cd3:	68 10 e1 01 c0       	push   0xc001e110
c0012cd8:	e8 96 c7 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	83 ec 0c             	sub    esp,0xc
c0012ce3:	6a 02                	push   0x2
c0012ce5:	e8 fa fd ff ff       	call   c0012ae4 <blockTask(TaskState)>
c0012cea:	fa                   	cli    
c0012ceb:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0012cf1:	e8 f2 fb ff ff       	call   c00128e8 <schedule()>
c0012cf6:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012cfb:	83 c4 10             	add    esp,0x10
c0012cfe:	48                   	dec    eax
c0012cff:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012d04:	85 c0                	test   eax,eax
c0012d06:	75 d8                	jne    c0012ce0 <taskReturned+0x10>
c0012d08:	fb                   	sti    
c0012d09:	eb d5                	jmp    c0012ce0 <taskReturned+0x10>
c0012d0b:	90                   	nop

c0012d0c <Thr::processFromPID(int)>:
c0012d0c:	57                   	push   edi
c0012d0d:	56                   	push   esi
c0012d0e:	53                   	push   ebx
c0012d0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d13:	fa                   	cli    
c0012d14:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0012d1a:	83 ec 0c             	sub    esp,0xc
c0012d1d:	68 24 29 02 c0       	push   0xc0022924
c0012d22:	e8 25 8f 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	89 c7                	mov    edi,eax
c0012d2c:	eb 16                	jmp    c0012d44 <Thr::processFromPID(int)+0x38>
c0012d2e:	66 90                	xchg   ax,ax
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	68 24 29 02 c0       	push   0xc0022924
c0012d38:	e8 0f 8f 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	39 f8                	cmp    eax,edi
c0012d42:	74 4c                	je     c0012d90 <Thr::processFromPID(int)+0x84>
c0012d44:	83 ec 0c             	sub    esp,0xc
c0012d47:	68 24 29 02 c0       	push   0xc0022924
c0012d4c:	e8 fb 8e 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d51:	c7 04 24 24 29 02 c0 	mov    DWORD PTR [esp],0xc0022924
c0012d58:	89 c3                	mov    ebx,eax
c0012d5a:	e8 f5 8e 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d5f:	58                   	pop    eax
c0012d60:	5a                   	pop    edx
c0012d61:	53                   	push   ebx
c0012d62:	68 24 29 02 c0       	push   0xc0022924
c0012d67:	e8 a0 8f 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012d6c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	39 30                	cmp    DWORD PTR [eax],esi
c0012d74:	75 ba                	jne    c0012d30 <Thr::processFromPID(int)+0x24>
c0012d76:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012d7b:	48                   	dec    eax
c0012d7c:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012d81:	74 09                	je     c0012d8c <Thr::processFromPID(int)+0x80>
c0012d83:	90                   	nop
c0012d84:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012d87:	5b                   	pop    ebx
c0012d88:	5e                   	pop    esi
c0012d89:	5f                   	pop    edi
c0012d8a:	c3                   	ret    
c0012d8b:	90                   	nop
c0012d8c:	fb                   	sti    
c0012d8d:	eb f5                	jmp    c0012d84 <Thr::processFromPID(int)+0x78>
c0012d8f:	90                   	nop
c0012d90:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012d95:	48                   	dec    eax
c0012d96:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012d9b:	75 07                	jne    c0012da4 <Thr::processFromPID(int)+0x98>
c0012d9d:	fb                   	sti    
c0012d9e:	5b                   	pop    ebx
c0012d9f:	5e                   	pop    esi
c0012da0:	5f                   	pop    edi
c0012da1:	c3                   	ret    
c0012da2:	66 90                	xchg   ax,ax
c0012da4:	5b                   	pop    ebx
c0012da5:	31 c0                	xor    eax,eax
c0012da7:	5e                   	pop    esi
c0012da8:	5f                   	pop    edi
c0012da9:	c3                   	ret    
c0012daa:	66 90                	xchg   ax,ax

c0012dac <unblockTask(ThreadControlBlock*)>:
c0012dac:	53                   	push   ebx
c0012dad:	83 ec 08             	sub    esp,0x8
c0012db0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012db4:	fa                   	cli    
c0012db5:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0012dbb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012dbe:	85 c0                	test   eax,eax
c0012dc0:	74 66                	je     c0012e28 <unblockTask(ThreadControlBlock*)+0x7c>
c0012dc2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012dc5:	48                   	dec    eax
c0012dc6:	74 38                	je     c0012e00 <unblockTask(ThreadControlBlock*)+0x54>
c0012dc8:	83 ec 0c             	sub    esp,0xc
c0012dcb:	68 24 29 02 c0       	push   0xc0022924
c0012dd0:	e8 77 8e 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dd5:	83 c4 10             	add    esp,0x10
c0012dd8:	85 c0                	test   eax,eax
c0012dda:	75 1c                	jne    c0012df8 <unblockTask(ThreadControlBlock*)+0x4c>
c0012ddc:	eb 5e                	jmp    c0012e3c <unblockTask(ThreadControlBlock*)+0x90>
c0012dde:	66 90                	xchg   ax,ax
c0012de0:	83 ec 08             	sub    esp,0x8
c0012de3:	50                   	push   eax
c0012de4:	68 24 29 02 c0       	push   0xc0022924
c0012de9:	e8 0e 92 00 00       	call   c001bffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	85 c0                	test   eax,eax
c0012df3:	74 47                	je     c0012e3c <unblockTask(ThreadControlBlock*)+0x90>
c0012df5:	8d 76 00             	lea    esi,[esi+0x0]
c0012df8:	39 c3                	cmp    ebx,eax
c0012dfa:	75 e4                	jne    c0012de0 <unblockTask(ThreadControlBlock*)+0x34>
c0012dfc:	eb 12                	jmp    c0012e10 <unblockTask(ThreadControlBlock*)+0x64>
c0012dfe:	66 90                	xchg   ax,ax
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	68 90 e0 01 c0       	push   0xc001e090
c0012e08:	e8 17 6b ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0012e15:	48                   	dec    eax
c0012e16:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0012e1b:	75 03                	jne    c0012e20 <unblockTask(ThreadControlBlock*)+0x74>
c0012e1d:	fb                   	sti    
c0012e1e:	66 90                	xchg   ax,ax
c0012e20:	83 c4 08             	add    esp,0x8
c0012e23:	5b                   	pop    ebx
c0012e24:	c3                   	ret    
c0012e25:	8d 76 00             	lea    esi,[esi+0x0]
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	68 79 e0 01 c0       	push   0xc001e079
c0012e30:	e8 ef 6a ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0012e35:	83 c4 10             	add    esp,0x10
c0012e38:	eb d6                	jmp    c0012e10 <unblockTask(ThreadControlBlock*)+0x64>
c0012e3a:	66 90                	xchg   ax,ax
c0012e3c:	83 ec 08             	sub    esp,0x8
c0012e3f:	53                   	push   ebx
c0012e40:	68 24 29 02 c0       	push   0xc0022924
c0012e45:	e8 c2 8e 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e4a:	83 c4 10             	add    esp,0x10
c0012e4d:	eb c1                	jmp    c0012e10 <unblockTask(ThreadControlBlock*)+0x64>
c0012e4f:	90                   	nop

c0012e50 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0012e50:	55                   	push   ebp
c0012e51:	57                   	push   edi
c0012e52:	56                   	push   esi
c0012e53:	53                   	push   ebx
c0012e54:	83 ec 1c             	sub    esp,0x1c
c0012e57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0012e5b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e5e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0012e64:	85 ed                	test   ebp,ebp
c0012e66:	7e 24                	jle    c0012e8c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0012e68:	31 f6                	xor    esi,esi
c0012e6a:	66 90                	xchg   ax,ax
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0012e76:	46                   	inc    esi
c0012e77:	57                   	push   edi
c0012e78:	e8 f4 3c ff ff       	call   c0006b71 <free>
c0012e7d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012e80:	83 c4 10             	add    esp,0x10
c0012e83:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0012e89:	7f e1                	jg     c0012e6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0012e8b:	90                   	nop
c0012e8c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012e96:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012e9b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0012e9e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0012ea1:	d3 c0                	rol    eax,cl
c0012ea3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0012eaa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012ead:	89 f7                	mov    edi,esi
c0012eaf:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0012eb7:	0f 85 77 01 00 00    	jne    c0013034 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0012ebd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0012ec3:	85 ed                	test   ebp,ebp
c0012ec5:	74 1d                	je     c0012ee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0012ec7:	83 ec 0c             	sub    esp,0xc
c0012eca:	55                   	push   ebp
c0012ecb:	e8 48 c3 ff ff       	call   c000f218 <EnvVarContainer::~EnvVarContainer()>
c0012ed0:	59                   	pop    ecx
c0012ed1:	5e                   	pop    esi
c0012ed2:	6a 0c                	push   0xc
c0012ed4:	55                   	push   ebp
c0012ed5:	e8 54 69 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c0012eda:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012edd:	83 c4 10             	add    esp,0x10
c0012ee0:	89 f7                	mov    edi,esi
c0012ee2:	66 90                	xchg   ax,ax
c0012ee4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012eea:	85 c0                	test   eax,eax
c0012eec:	0f 84 b6 00 00 00    	je     c0012fa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012ef2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0012ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012ef9:	31 c9                	xor    ecx,ecx
c0012efb:	eb 17                	jmp    c0012f14 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0012efd:	8d 76 00             	lea    esi,[esi+0x0]
c0012f00:	41                   	inc    ecx
c0012f01:	83 f9 10             	cmp    ecx,0x10
c0012f04:	0f 84 9e 00 00 00    	je     c0012fa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012f12:	66 90                	xchg   ax,ax
c0012f14:	31 d2                	xor    edx,edx
c0012f16:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0012f1d:	d3 fa                	sar    edx,cl
c0012f1f:	83 e2 01             	and    edx,0x1
c0012f22:	74 dc                	je     c0012f00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f24:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0012f27:	01 d2                	add    edx,edx
c0012f29:	01 ca                	add    edx,ecx
c0012f2b:	8d 14 92             	lea    edx,[edx+edx*4]
c0012f2e:	01 d0                	add    eax,edx
c0012f30:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0012f36:	83 fd 07             	cmp    ebp,0x7
c0012f39:	75 c5                	jne    c0012f00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f3b:	05 40 02 00 00       	add    eax,0x240
c0012f40:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0012f43:	83 fd ff             	cmp    ebp,0xffffffff
c0012f46:	0f 8c f0 00 00 00    	jl     c001303c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0012f4c:	0f 84 ae 01 00 00    	je     c0013100 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0012f52:	85 ed                	test   ebp,ebp
c0012f54:	0f 84 92 01 00 00    	je     c00130ec <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0012f5a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0012f5c:	75 a2                	jne    c0012f00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0012f5e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0012f64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0012f68:	01 d0                	add    eax,edx
c0012f6a:	66 90                	xchg   ax,ax
c0012f6c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0012f79:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012f7c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012f82:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0012f89:	50                   	push   eax
c0012f8a:	e8 1d fe ff ff       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c0012f8f:	83 c4 10             	add    esp,0x10
c0012f92:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0012f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012f99:	89 f7                	mov    edi,esi
c0012f9b:	41                   	inc    ecx
c0012f9c:	83 f9 10             	cmp    ecx,0x10
c0012f9f:	0f 85 67 ff ff ff    	jne    c0012f0c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0012fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0012fa8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0012fae:	85 c0                	test   eax,eax
c0012fb0:	74 62                	je     c0013014 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012fb2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0012fb8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0012fbe:	74 54                	je     c0013014 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0012fc0:	83 ec 0c             	sub    esp,0xc
c0012fc3:	68 24 29 02 c0       	push   0xc0022924
c0012fc8:	e8 7f 8c 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012fcd:	c7 04 24 24 29 02 c0 	mov    DWORD PTR [esp],0xc0022924
c0012fd4:	89 c7                	mov    edi,eax
c0012fd6:	e8 55 8c 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012fdb:	83 c4 10             	add    esp,0x10
c0012fde:	84 c0                	test   al,al
c0012fe0:	0f 84 ce 00 00 00    	je     c00130b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0012fe6:	66 90                	xchg   ax,ax
c0012fe8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0012feb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012ff1:	85 d2                	test   edx,edx
c0012ff3:	74 0f                	je     c0013004 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0012ff5:	83 ec 0c             	sub    esp,0xc
c0012ff8:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ffa:	52                   	push   edx
c0012ffb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ffe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001300e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013011:	8d 76 00             	lea    esi,[esi+0x0]
c0013014:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001301a:	85 db                	test   ebx,ebx
c001301c:	74 16                	je     c0013034 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001301e:	83 ec 0c             	sub    esp,0xc
c0013021:	53                   	push   ebx
c0013022:	e8 6b 5b ff ff       	call   c0008b92 <VAS::~VAS()>
c0013027:	58                   	pop    eax
c0013028:	5a                   	pop    edx
c0013029:	6a 14                	push   0x14
c001302b:	53                   	push   ebx
c001302c:	e8 fd 67 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c0013031:	83 c4 10             	add    esp,0x10
c0013034:	83 c4 1c             	add    esp,0x1c
c0013037:	5b                   	pop    ebx
c0013038:	5e                   	pop    esi
c0013039:	5f                   	pop    edi
c001303a:	5d                   	pop    ebp
c001303b:	c3                   	ret    
c001303c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013040:	83 ec 0c             	sub    esp,0xc
c0013043:	68 44 e1 01 c0       	push   0xc001e144
c0013048:	e8 26 c4 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001304d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	89 f7                	mov    edi,esi
c0013055:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013059:	e9 a2 fe ff ff       	jmp    c0012f00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001305e:	66 90                	xchg   ax,ax
c0013060:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013066:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001306c:	75 1e                	jne    c001308c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	68 ac e1 01 c0       	push   0xc001e1ac
c0013076:	e8 a9 68 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001307b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013082:	e8 5d fa ff ff       	call   c0012ae4 <blockTask(TaskState)>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	66 90                	xchg   ax,ax
c001308c:	83 ec 08             	sub    esp,0x8
c001308f:	56                   	push   esi
c0013090:	68 24 29 02 c0       	push   0xc0022924
c0013095:	e8 72 8c 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001309a:	c7 04 24 24 29 02 c0 	mov    DWORD PTR [esp],0xc0022924
c00130a1:	e8 a6 8b 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130a6:	83 c4 10             	add    esp,0x10
c00130a9:	39 f8                	cmp    eax,edi
c00130ab:	0f 84 37 ff ff ff    	je     c0012fe8 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00130b1:	8d 76 00             	lea    esi,[esi+0x0]
c00130b4:	83 ec 0c             	sub    esp,0xc
c00130b7:	68 24 29 02 c0       	push   0xc0022924
c00130bc:	e8 8b 8b 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130c1:	c7 04 24 24 29 02 c0 	mov    DWORD PTR [esp],0xc0022924
c00130c8:	89 c6                	mov    esi,eax
c00130ca:	e8 85 8b 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	39 f3                	cmp    ebx,esi
c00130d4:	74 b6                	je     c001308c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00130d6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00130d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00130dc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00130e2:	75 a8                	jne    c001308c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00130e4:	e9 77 ff ff ff       	jmp    c0013060 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c00130e9:	8d 76 00             	lea    esi,[esi+0x0]
c00130ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00130f0:	83 ec 0c             	sub    esp,0xc
c00130f3:	68 78 e1 01 c0       	push   0xc001e178
c00130f8:	e9 4b ff ff ff       	jmp    c0013048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00130fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013100:	8b 36                	mov    esi,DWORD PTR [esi]
c0013102:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013106:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013109:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001310c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013112:	01 d7                	add    edi,edx
c0013114:	89 f8                	mov    eax,edi
c0013116:	e9 51 fe ff ff       	jmp    c0012f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001311b:	90                   	nop

c001311c <cleanerTaskFunction(void*)>:
c001311c:	53                   	push   ebx
c001311d:	83 ec 08             	sub    esp,0x8
c0013120:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0013125:	48                   	dec    eax
c0013126:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c001312b:	75 03                	jne    c0013130 <cleanerTaskFunction(void*)+0x14>
c001312d:	fb                   	sti    
c001312e:	66 90                	xchg   ax,ax
c0013130:	fa                   	cli    
c0013131:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0013136:	80 3d ec 28 02 c0 00 	cmp    BYTE PTR ds:0xc00228ec,0x0
c001313d:	8d 50 01             	lea    edx,[eax+0x1]
c0013140:	89 15 08 29 02 c0    	mov    DWORD PTR ds:0xc0022908,edx
c0013146:	0f 84 ac 00 00 00    	je     c00131f8 <cleanerTaskFunction(void*)+0xdc>
c001314c:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0013151:	85 c0                	test   eax,eax
c0013153:	75 03                	jne    c0013158 <cleanerTaskFunction(void*)+0x3c>
c0013155:	fb                   	sti    
c0013156:	66 90                	xchg   ax,ax
c0013158:	c6 05 ec 28 02 c0 00 	mov    BYTE PTR ds:0xc00228ec,0x0
c001315f:	fa                   	cli    
c0013160:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0013166:	ff 05 04 29 02 c0    	inc    DWORD PTR ds:0xc0022904
c001316c:	fa                   	cli    
c001316d:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0013173:	eb 2b                	jmp    c00131a0 <cleanerTaskFunction(void*)+0x84>
c0013175:	8d 76 00             	lea    esi,[esi+0x0]
c0013178:	83 ec 0c             	sub    esp,0xc
c001317b:	68 0c 29 02 c0       	push   0xc002290c
c0013180:	e8 c7 8a 00 00       	call   c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013185:	c7 04 24 0c 29 02 c0 	mov    DWORD PTR [esp],0xc002290c
c001318c:	89 c3                	mov    ebx,eax
c001318e:	e8 c1 8a 00 00       	call   c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013196:	e8 b5 fc ff ff       	call   c0012e50 <cleanupTerminatedTask(ThreadControlBlock*)>
c001319b:	83 c4 10             	add    esp,0x10
c001319e:	66 90                	xchg   ax,ax
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	68 0c 29 02 c0       	push   0xc002290c
c00131a8:	e8 83 8a 00 00       	call   c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00131ad:	83 c4 10             	add    esp,0x10
c00131b0:	84 c0                	test   al,al
c00131b2:	74 c4                	je     c0013178 <cleanerTaskFunction(void*)+0x5c>
c00131b4:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00131b9:	48                   	dec    eax
c00131ba:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00131bf:	75 03                	jne    c00131c4 <cleanerTaskFunction(void*)+0xa8>
c00131c1:	fb                   	sti    
c00131c2:	66 90                	xchg   ax,ax
c00131c4:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c00131c9:	48                   	dec    eax
c00131ca:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c00131cf:	0f 85 4b ff ff ff    	jne    c0013120 <cleanerTaskFunction(void*)+0x4>
c00131d5:	a1 00 29 02 c0       	mov    eax,ds:0xc0022900
c00131da:	85 c0                	test   eax,eax
c00131dc:	0f 84 3e ff ff ff    	je     c0013120 <cleanerTaskFunction(void*)+0x4>
c00131e2:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c00131ec:	e8 f7 f6 ff ff       	call   c00128e8 <schedule()>
c00131f1:	e9 2a ff ff ff       	jmp    c0013120 <cleanerTaskFunction(void*)+0x4>
c00131f6:	66 90                	xchg   ax,ax
c00131f8:	83 ec 0c             	sub    esp,0xc
c00131fb:	6a 02                	push   0x2
c00131fd:	e8 ba f8 ff ff       	call   c0012abc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013202:	83 c4 10             	add    esp,0x10
c0013205:	e9 4e ff ff ff       	jmp    c0013158 <cleanerTaskFunction(void*)+0x3c>
c001320a:	66 90                	xchg   ax,ax

c001320c <terminateTask(int)>:
c001320c:	83 ec 14             	sub    esp,0x14
c001320f:	fa                   	cli    
c0013210:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0013216:	ff 05 04 29 02 c0    	inc    DWORD PTR ds:0xc0022904
c001321c:	fa                   	cli    
c001321d:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0013223:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001322c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001322f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013234:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013237:	50                   	push   eax
c0013238:	68 0c 29 02 c0       	push   0xc002290c
c001323d:	e8 ca 8a 00 00       	call   c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013242:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013247:	83 c4 10             	add    esp,0x10
c001324a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013251:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c0013256:	85 c0                	test   eax,eax
c0013258:	74 5e                	je     c00132b8 <terminateTask(int)+0xac>
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	c6 05 ec 28 02 c0 01 	mov    BYTE PTR ds:0xc00228ec,0x1
c0013264:	50                   	push   eax
c0013265:	e8 42 fb ff ff       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c001326a:	83 c4 10             	add    esp,0x10
c001326d:	8d 76 00             	lea    esi,[esi+0x0]
c0013270:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0013275:	48                   	dec    eax
c0013276:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c001327b:	75 03                	jne    c0013280 <terminateTask(int)+0x74>
c001327d:	fb                   	sti    
c001327e:	66 90                	xchg   ax,ax
c0013280:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c0013285:	48                   	dec    eax
c0013286:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c001328b:	75 0b                	jne    c0013298 <terminateTask(int)+0x8c>
c001328d:	83 3d 00 29 02 c0 00 	cmp    DWORD PTR ds:0xc0022900,0x0
c0013294:	75 36                	jne    c00132cc <terminateTask(int)+0xc0>
c0013296:	66 90                	xchg   ax,ax
c0013298:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c001329d:	48                   	dec    eax
c001329e:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00132a3:	75 03                	jne    c00132a8 <terminateTask(int)+0x9c>
c00132a5:	fb                   	sti    
c00132a6:	66 90                	xchg   ax,ax
c00132a8:	fa                   	cli    
c00132a9:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c00132af:	90                   	nop
c00132b0:	e8 33 f6 ff ff       	call   c00128e8 <schedule()>
c00132b5:	eb e1                	jmp    c0013298 <terminateTask(int)+0x8c>
c00132b7:	90                   	nop
c00132b8:	83 ec 0c             	sub    esp,0xc
c00132bb:	68 a7 e0 01 c0       	push   0xc001e0a7
c00132c0:	e8 5f 66 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	eb a6                	jmp    c0013270 <terminateTask(int)+0x64>
c00132ca:	66 90                	xchg   ax,ax
c00132cc:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c00132d6:	eb d8                	jmp    c00132b0 <terminateTask(int)+0xa4>

c00132d8 <Thr::terminateFromIRQ(int)>:
c00132d8:	83 ec 18             	sub    esp,0x18
c00132db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132df:	50                   	push   eax
c00132e0:	e8 27 ff ff ff       	call   c001320c <terminateTask(int)>
c00132e5:	90                   	nop
c00132e6:	66 90                	xchg   ax,ax

c00132e8 <Semaphore::release()>:
c00132e8:	83 ec 0c             	sub    esp,0xc
c00132eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ef:	fa                   	cli    
c00132f0:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c00132f5:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c00132fb:	8d 48 01             	lea    ecx,[eax+0x1]
c00132fe:	89 0d 04 29 02 c0    	mov    DWORD PTR ds:0xc0022904,ecx
c0013304:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013307:	85 c9                	test   ecx,ecx
c0013309:	74 41                	je     c001334c <Semaphore::release()+0x64>
c001330b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001330e:	83 ec 0c             	sub    esp,0xc
c0013311:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013314:	51                   	push   ecx
c0013315:	e8 92 fa ff ff       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c001331a:	a1 04 29 02 c0       	mov    eax,ds:0xc0022904
c001331f:	83 c4 10             	add    esp,0x10
c0013322:	48                   	dec    eax
c0013323:	90                   	nop
c0013324:	a3 04 29 02 c0       	mov    ds:0xc0022904,eax
c0013329:	85 c0                	test   eax,eax
c001332b:	75 0b                	jne    c0013338 <Semaphore::release()+0x50>
c001332d:	a1 00 29 02 c0       	mov    eax,ds:0xc0022900
c0013332:	85 c0                	test   eax,eax
c0013334:	75 1e                	jne    c0013354 <Semaphore::release()+0x6c>
c0013336:	66 90                	xchg   ax,ax
c0013338:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c001333d:	48                   	dec    eax
c001333e:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0013343:	75 03                	jne    c0013348 <Semaphore::release()+0x60>
c0013345:	fb                   	sti    
c0013346:	66 90                	xchg   ax,ax
c0013348:	83 c4 0c             	add    esp,0xc
c001334b:	c3                   	ret    
c001334c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001334f:	eb d3                	jmp    c0013324 <Semaphore::release()+0x3c>
c0013351:	8d 76 00             	lea    esi,[esi+0x0]
c0013354:	c7 05 00 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022900,0x0
c001335e:	e8 85 f5 ff ff       	call   c00128e8 <schedule()>
c0013363:	eb d3                	jmp    c0013338 <Semaphore::release()+0x50>
c0013365:	8d 76 00             	lea    esi,[esi+0x0]

c0013368 <__static_initialization_and_destruction_0(int, int)>:
c0013368:	83 ec 0c             	sub    esp,0xc
c001336b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013370:	0f 85 8e 00 00 00    	jne    c0013404 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013376:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001337e:	0f 85 80 00 00 00    	jne    c0013404 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013384:	83 ec 0c             	sub    esp,0xc
c0013387:	68 24 29 02 c0       	push   0xc0022924
c001338c:	e8 27 8c 00 00       	call   c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	83 ec 04             	sub    esp,0x4
c0013397:	68 ec eb 01 c0       	push   0xc001ebec
c001339c:	68 24 29 02 c0       	push   0xc0022924
c00133a1:	68 68 bf 01 c0       	push   0xc001bf68
c00133a6:	e8 33 64 ff ff       	call   c00097de <__cxa_atexit>
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	68 18 29 02 c0       	push   0xc0022918
c00133b6:	e8 fd 8b 00 00       	call   c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	83 ec 04             	sub    esp,0x4
c00133c1:	68 ec eb 01 c0       	push   0xc001ebec
c00133c6:	68 18 29 02 c0       	push   0xc0022918
c00133cb:	68 68 bf 01 c0       	push   0xc001bf68
c00133d0:	e8 09 64 ff ff       	call   c00097de <__cxa_atexit>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	68 0c 29 02 c0       	push   0xc002290c
c00133e0:	e8 d3 8b 00 00       	call   c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00133e5:	83 c4 10             	add    esp,0x10
c00133e8:	83 ec 04             	sub    esp,0x4
c00133eb:	68 ec eb 01 c0       	push   0xc001ebec
c00133f0:	68 0c 29 02 c0       	push   0xc002290c
c00133f5:	68 68 bf 01 c0       	push   0xc001bf68
c00133fa:	e8 df 63 ff ff       	call   c00097de <__cxa_atexit>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	66 90                	xchg   ax,ax
c0013404:	90                   	nop
c0013405:	83 c4 0c             	add    esp,0xc
c0013408:	c3                   	ret    
c0013409:	8d 76 00             	lea    esi,[esi+0x0]

c001340c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001340c:	83 ec 0c             	sub    esp,0xc
c001340f:	83 ec 08             	sub    esp,0x8
c0013412:	68 ff ff 00 00       	push   0xffff
c0013417:	6a 01                	push   0x1
c0013419:	e8 4a ff ff ff       	call   c0013368 <__static_initialization_and_destruction_0(int, int)>
c001341e:	83 c4 10             	add    esp,0x10
c0013421:	83 c4 0c             	add    esp,0xc
c0013424:	c3                   	ret    

c0013425 <Vm::inbv(unsigned short)>:
c0013425:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013429:	66 81 fa fe fe       	cmp    dx,0xfefe
c001342e:	75 06                	jne    c0013436 <Vm::inbv(unsigned short)+0x11>
c0013430:	a0 6c 29 02 c0       	mov    al,ds:0xc002296c
c0013435:	c3                   	ret    
c0013436:	ec                   	in     al,dx
c0013437:	c3                   	ret    

c0013438 <Vm::outbv(unsigned short, unsigned char)>:
c0013438:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001343c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013440:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013445:	75 25                	jne    c001346c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013447:	8b 0d 6c 29 02 c0    	mov    ecx,DWORD PTR ds:0xc002296c
c001344d:	8d 51 01             	lea    edx,[ecx+0x1]
c0013450:	88 81 80 29 02 c0    	mov    BYTE PTR [ecx-0x3ffdd680],al
c0013456:	89 15 6c 29 02 c0    	mov    DWORD PTR ds:0xc002296c,edx
c001345c:	83 fa 20             	cmp    edx,0x20
c001345f:	75 0c                	jne    c001346d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013461:	c7 05 6c 29 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002296c,0x1f
c001346b:	c3                   	ret    
c001346c:	ee                   	out    dx,al
c001346d:	c3                   	ret    

c001346e <Vm::realToLinear(unsigned short, unsigned short)>:
c001346e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013473:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013478:	c1 e0 04             	shl    eax,0x4
c001347b:	01 d0                	add    eax,edx
c001347d:	c3                   	ret    

c001347e <Vm::getSegment(unsigned int)>:
c001347e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013482:	c1 e8 10             	shr    eax,0x10
c0013485:	c3                   	ret    

c0013486 <Vm::getOffset(unsigned int)>:
c0013486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001348a:	c3                   	ret    

c001348b <Vm::mainloop2()>:
c001348b:	83 ec 18             	sub    esp,0x18
c001348e:	fa                   	cli    
c001348f:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0013495:	6a 02                	push   0x2
c0013497:	c6 05 65 29 02 c0 01 	mov    BYTE PTR ds:0xc0022965,0x1
c001349e:	e8 19 f6 ff ff       	call   c0012abc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00134a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134a8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00134ac:	52                   	push   edx
c00134ad:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00134b1:	52                   	push   edx
c00134b2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00134b6:	52                   	push   edx
c00134b7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00134bb:	50                   	push   eax
c00134bc:	e8 6e cd fe ff       	call   c000022f <goToVM86>
c00134c1:	83 c4 2c             	add    esp,0x2c
c00134c4:	c3                   	ret    

c00134c5 <Vm::mainVm8086Loop(void*)>:
c00134c5:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00134ca:	48                   	dec    eax
c00134cb:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00134d0:	75 01                	jne    c00134d3 <Vm::mainVm8086Loop(void*)+0xe>
c00134d2:	fb                   	sti    
c00134d3:	eb b6                	jmp    c001348b <Vm::mainloop2()>

c00134d5 <Vm::mainloop3(unsigned long)>:
c00134d5:	83 ec 18             	sub    esp,0x18
c00134d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134dc:	fa                   	cli    
c00134dd:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c00134e3:	6a 02                	push   0x2
c00134e5:	c6 05 64 29 02 c0 01 	mov    BYTE PTR ds:0xc0022964,0x1
c00134ec:	a3 60 29 02 c0       	mov    ds:0xc0022960,eax
c00134f1:	e8 c6 f5 ff ff       	call   c0012abc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00134f6:	83 c4 1c             	add    esp,0x1c
c00134f9:	eb 90                	jmp    c001348b <Vm::mainloop2()>

c00134fb <Vm::initialise8086()>:
c00134fb:	83 ec 0c             	sub    esp,0xc
c00134fe:	68 80 00 00 00       	push   0x80
c0013503:	6a 00                	push   0x0
c0013505:	68 c5 34 01 c0       	push   0xc00134c5
c001350a:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c0013510:	e8 b3 f1 ff ff       	call   c00126c8 <Process::createThread(void (*)(void*), void*, int)>
c0013515:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001351c:	a3 68 29 02 c0       	mov    ds:0xc0022968,eax
c0013521:	68 00 01 00 00       	push   0x100
c0013526:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c001352b:	6a 00                	push   0x0
c001352d:	6a 00                	push   0x0
c001352f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013535:	e8 b6 5a ff ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001353a:	83 c4 2c             	add    esp,0x2c
c001353d:	c3                   	ret    

c001353e <Vm::finish8086()>:
c001353e:	53                   	push   ebx
c001353f:	83 ec 08             	sub    esp,0x8
c0013542:	fa                   	cli    
c0013543:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c0013549:	80 3d 64 29 02 c0 00 	cmp    BYTE PTR ds:0xc0022964,0x0
c0013550:	75 15                	jne    c0013567 <Vm::finish8086()+0x29>
c0013552:	e8 91 f3 ff ff       	call   c00128e8 <schedule()>
c0013557:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c001355c:	48                   	dec    eax
c001355d:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0013562:	75 de                	jne    c0013542 <Vm::finish8086()+0x4>
c0013564:	fb                   	sti    
c0013565:	eb db                	jmp    c0013542 <Vm::finish8086()+0x4>
c0013567:	83 ec 0c             	sub    esp,0xc
c001356a:	8b 1d 60 29 02 c0    	mov    ebx,DWORD PTR ds:0xc0022960
c0013570:	ff 35 68 29 02 c0    	push   DWORD PTR ds:0xc0022968
c0013576:	c6 05 64 29 02 c0 00 	mov    BYTE PTR ds:0xc0022964,0x0
c001357d:	e8 2a f8 ff ff       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c0013582:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	8d 50 ff             	lea    edx,[eax-0x1]
c001358d:	89 15 08 29 02 c0    	mov    DWORD PTR ds:0xc0022908,edx
c0013593:	85 d2                	test   edx,edx
c0013595:	75 01                	jne    c0013598 <Vm::finish8086()+0x5a>
c0013597:	fb                   	sti    
c0013598:	89 d8                	mov    eax,ebx
c001359a:	83 c4 08             	add    esp,0x8
c001359d:	5b                   	pop    ebx
c001359e:	c3                   	ret    

c001359f <Vm::getOutput8086(unsigned char*)>:
c001359f:	57                   	push   edi
c00135a0:	8b 0d 6c 29 02 c0    	mov    ecx,DWORD PTR ds:0xc002296c
c00135a6:	56                   	push   esi
c00135a7:	be 80 29 02 c0       	mov    esi,0xc0022980
c00135ac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00135b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00135b2:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c00135b7:	5e                   	pop    esi
c00135b8:	c7 05 6c 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002296c,0x0
c00135c2:	5f                   	pop    edi
c00135c3:	c3                   	ret    

c00135c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00135c4:	55                   	push   ebp
c00135c5:	57                   	push   edi
c00135c6:	56                   	push   esi
c00135c7:	53                   	push   ebx
c00135c8:	83 ec 0c             	sub    esp,0xc
c00135cb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00135d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00135db:	fa                   	cli    
c00135dc:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c00135e2:	80 3d 65 29 02 c0 00 	cmp    BYTE PTR ds:0xc0022965,0x0
c00135e9:	75 15                	jne    c0013600 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00135eb:	e8 f8 f2 ff ff       	call   c00128e8 <schedule()>
c00135f0:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00135f5:	48                   	dec    eax
c00135f6:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00135fb:	75 de                	jne    c00135db <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00135fd:	fb                   	sti    
c00135fe:	eb db                	jmp    c00135db <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013600:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c0013605:	c7 05 6c 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002296c,0x0
c001360f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0013613:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0013617:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001361b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001361f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0013623:	0f b7 ff             	movzx  edi,di
c0013626:	0f b7 f6             	movzx  esi,si
c0013629:	50                   	push   eax
c001362a:	6a 20                	push   0x20
c001362c:	6a 00                	push   0x0
c001362e:	68 80 29 02 c0       	push   0xc0022980
c0013633:	e8 b8 ce fe ff       	call   c00004f0 <memset>
c0013638:	5a                   	pop    edx
c0013639:	59                   	pop    ecx
c001363a:	57                   	push   edi
c001363b:	56                   	push   esi
c001363c:	e8 2d fe ff ff       	call   c001346e <Vm::realToLinear(unsigned short, unsigned short)>
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	89 c7                	mov    edi,eax
c0013646:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001364a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001364e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013650:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0013655:	c6 05 65 29 02 c0 00 	mov    BYTE PTR ds:0xc0022965,0x0
c001365c:	48                   	dec    eax
c001365d:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0013662:	75 01                	jne    c0013665 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0013664:	fb                   	sti    
c0013665:	83 ec 0c             	sub    esp,0xc
c0013668:	ff 35 68 29 02 c0    	push   DWORD PTR ds:0xc0022968
c001366e:	e8 39 f7 ff ff       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c0013673:	83 c4 1c             	add    esp,0x1c
c0013676:	b0 01                	mov    al,0x1
c0013678:	5b                   	pop    ebx
c0013679:	5e                   	pop    esi
c001367a:	5f                   	pop    edi
c001367b:	5d                   	pop    ebp
c001367c:	c3                   	ret    

c001367d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001367d:	55                   	push   ebp
c001367e:	57                   	push   edi
c001367f:	56                   	push   esi
c0013680:	53                   	push   ebx
c0013681:	83 ec 2c             	sub    esp,0x2c
c0013684:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0013688:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001368c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0013690:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013694:	fa                   	cli    
c0013695:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c001369b:	0f b6 35 65 29 02 c0 	movzx  esi,BYTE PTR ds:0xc0022965
c00136a2:	89 f0                	mov    eax,esi
c00136a4:	84 c0                	test   al,al
c00136a6:	75 1d                	jne    c00136c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00136a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00136ac:	e8 37 f2 ff ff       	call   c00128e8 <schedule()>
c00136b1:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00136b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136ba:	48                   	dec    eax
c00136bb:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00136c0:	75 d2                	jne    c0013694 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00136c2:	fb                   	sti    
c00136c3:	eb cf                	jmp    c0013694 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00136c5:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c00136ca:	c7 05 6c 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002296c,0x0
c00136d4:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00136d8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00136dc:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00136e0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00136e4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00136e8:	50                   	push   eax
c00136e9:	6a 20                	push   0x20
c00136eb:	6a 00                	push   0x0
c00136ed:	68 80 29 02 c0       	push   0xc0022980
c00136f2:	e8 f9 cd fe ff       	call   c00004f0 <memset>
c00136f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00136fe:	e8 5e 34 ff ff       	call   c0006b61 <malloc>
c0013703:	83 c4 0c             	add    esp,0xc
c0013706:	89 c3                	mov    ebx,eax
c0013708:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c001370e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013712:	50                   	push   eax
c0013713:	e8 82 67 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0013718:	83 c4 10             	add    esp,0x10
c001371b:	85 db                	test   ebx,ebx
c001371d:	75 0a                	jne    c0013729 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001371f:	83 ec 0c             	sub    esp,0xc
c0013722:	68 d4 e1 01 c0       	push   0xc001e1d4
c0013727:	eb 3e                	jmp    c0013767 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0013729:	50                   	push   eax
c001372a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001372e:	50                   	push   eax
c001372f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013733:	50                   	push   eax
c0013734:	53                   	push   ebx
c0013735:	e8 cc 6a ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c001373a:	83 c4 10             	add    esp,0x10
c001373d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013742:	74 0a                	je     c001374e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0013744:	83 ec 0c             	sub    esp,0xc
c0013747:	68 e8 e1 01 c0       	push   0xc001e1e8
c001374c:	eb 19                	jmp    c0013767 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001374e:	51                   	push   ecx
c001374f:	51                   	push   ecx
c0013750:	6a 01                	push   0x1
c0013752:	53                   	push   ebx
c0013753:	e8 02 68 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	85 c0                	test   eax,eax
c001375d:	74 24                	je     c0013783 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001375f:	83 ec 0c             	sub    esp,0xc
c0013762:	68 01 e2 01 c0       	push   0xc001e201
c0013767:	e8 07 bd ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001376c:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c0013771:	83 c4 10             	add    esp,0x10
c0013774:	48                   	dec    eax
c0013775:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c001377a:	85 c0                	test   eax,eax
c001377c:	75 01                	jne    c001377f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001377e:	fb                   	sti    
c001377f:	31 f6                	xor    esi,esi
c0013781:	eb 58                	jmp    c00137db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0013783:	0f b7 ed             	movzx  ebp,bp
c0013786:	50                   	push   eax
c0013787:	0f b7 ff             	movzx  edi,di
c001378a:	50                   	push   eax
c001378b:	55                   	push   ebp
c001378c:	57                   	push   edi
c001378d:	e8 dc fc ff ff       	call   c001346e <Vm::realToLinear(unsigned short, unsigned short)>
c0013792:	5a                   	pop    edx
c0013793:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013795:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013799:	51                   	push   ecx
c001379a:	50                   	push   eax
c001379b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001379f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137a3:	53                   	push   ebx
c00137a4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00137a7:	83 c4 14             	add    esp,0x14
c00137aa:	53                   	push   ebx
c00137ab:	e8 08 68 ff ff       	call   c0009fb8 <File::close()>
c00137b0:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00137b5:	83 c4 10             	add    esp,0x10
c00137b8:	48                   	dec    eax
c00137b9:	c6 05 65 29 02 c0 00 	mov    BYTE PTR ds:0xc0022965,0x0
c00137c0:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00137c5:	85 c0                	test   eax,eax
c00137c7:	75 01                	jne    c00137ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00137c9:	fb                   	sti    
c00137ca:	83 ec 0c             	sub    esp,0xc
c00137cd:	ff 35 68 29 02 c0    	push   DWORD PTR ds:0xc0022968
c00137d3:	e8 d4 f5 ff ff       	call   c0012dac <unblockTask(ThreadControlBlock*)>
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	83 c4 2c             	add    esp,0x2c
c00137de:	89 f0                	mov    eax,esi
c00137e0:	5b                   	pop    ebx
c00137e1:	5e                   	pop    esi
c00137e2:	5f                   	pop    edi
c00137e3:	5d                   	pop    ebp
c00137e4:	c3                   	ret    

c00137e5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00137e5:	57                   	push   edi
c00137e6:	56                   	push   esi
c00137e7:	53                   	push   ebx
c00137e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00137ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137f4:	83 e8 06             	sub    eax,0x6
c00137f7:	0f b7 c0             	movzx  eax,ax
c00137fa:	50                   	push   eax
c00137fb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0013800:	50                   	push   eax
c0013801:	e8 68 fc ff ff       	call   c001346e <Vm::realToLinear(unsigned short, unsigned short)>
c0013806:	5a                   	pop    edx
c0013807:	5e                   	pop    esi
c0013808:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001380b:	8d 56 fa             	lea    edx,[esi-0x6]
c001380e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0013814:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0013817:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001381a:	83 c2 02             	add    edx,0x2
c001381d:	66 89 10             	mov    WORD PTR [eax],dx
c0013820:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0013823:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013827:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001382a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001382e:	89 d6                	mov    esi,edx
c0013830:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0013836:	66 81 e6 ff fd       	and    si,0xfdff
c001383b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001383f:	74 07                	je     c0013848 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0013841:	89 d6                	mov    esi,edx
c0013843:	66 81 ce 00 02       	or     si,0x200
c0013848:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001384c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013851:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013855:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001385d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0013860:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0013868:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001386b:	5b                   	pop    ebx
c001386c:	5e                   	pop    esi
c001386d:	5f                   	pop    edi
c001386e:	c3                   	ret    

c001386f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001386f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013874:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013879:	c1 e0 04             	shl    eax,0x4
c001387c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001387f:	c3                   	ret    

c0013880 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0013880:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013885:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001388a:	c1 e0 04             	shl    eax,0x4
c001388d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0013891:	c3                   	ret    

c0013892 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0013892:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013897:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001389c:	c1 e0 04             	shl    eax,0x4
c001389f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00138a2:	c3                   	ret    

c00138a3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00138a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138ad:	c1 e0 04             	shl    eax,0x4
c00138b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00138b4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00138b7:	c3                   	ret    

c00138b8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00138b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138c2:	c1 e0 04             	shl    eax,0x4
c00138c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00138c9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00138cd:	c3                   	ret    

c00138ce <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00138ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00138d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00138d8:	c1 e0 04             	shl    eax,0x4
c00138db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00138df:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00138e2:	c3                   	ret    

c00138e3 <Vm::faultHandler(regs*)>:
c00138e3:	55                   	push   ebp
c00138e4:	57                   	push   edi
c00138e5:	56                   	push   esi
c00138e6:	53                   	push   ebx
c00138e7:	83 ec 1c             	sub    esp,0x1c
c00138ea:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00138ee:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138f1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00138f5:	0f b7 f8             	movzx  edi,ax
c00138f8:	52                   	push   edx
c00138f9:	0f b7 c0             	movzx  eax,ax
c00138fc:	50                   	push   eax
c00138fd:	e8 6c fb ff ff       	call   c001346e <Vm::realToLinear(unsigned short, unsigned short)>
c0013902:	5a                   	pop    edx
c0013903:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0013906:	59                   	pop    ecx
c0013907:	89 c1                	mov    ecx,eax
c0013909:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001390c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013910:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013915:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013919:	0f b7 c5             	movzx  eax,bp
c001391c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013920:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0013924:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013928:	e8 41 fb ff ff       	call   c001346e <Vm::realToLinear(unsigned short, unsigned short)>
c001392d:	5e                   	pop    esi
c001392e:	be 06 00 00 00       	mov    esi,0x6
c0013933:	5a                   	pop    edx
c0013934:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0013939:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001393e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0013941:	80 fa 9d             	cmp    dl,0x9d
c0013944:	0f 84 2c 02 00 00    	je     c0013b76 <Vm::faultHandler(regs*)+0x293>
c001394a:	0f 87 91 00 00 00    	ja     c00139e1 <Vm::faultHandler(regs*)+0xfe>
c0013950:	80 fa 66             	cmp    dl,0x66
c0013953:	0f 84 98 01 00 00    	je     c0013af1 <Vm::faultHandler(regs*)+0x20e>
c0013959:	77 47                	ja     c00139a2 <Vm::faultHandler(regs*)+0xbf>
c001395b:	80 fa 36             	cmp    dl,0x36
c001395e:	0f 84 80 01 00 00    	je     c0013ae4 <Vm::faultHandler(regs*)+0x201>
c0013964:	77 1a                	ja     c0013980 <Vm::faultHandler(regs*)+0x9d>
c0013966:	80 fa 26             	cmp    dl,0x26
c0013969:	0f 84 4e 01 00 00    	je     c0013abd <Vm::faultHandler(regs*)+0x1da>
c001396f:	80 fa 2e             	cmp    dl,0x2e
c0013972:	0f 85 e2 05 00 00    	jne    c0013f5a <Vm::faultHandler(regs*)+0x677>
c0013978:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001397b:	31 f6                	xor    esi,esi
c001397d:	41                   	inc    ecx
c001397e:	eb be                	jmp    c001393e <Vm::faultHandler(regs*)+0x5b>
c0013980:	80 fa 64             	cmp    dl,0x64
c0013983:	0f 84 41 01 00 00    	je     c0013aca <Vm::faultHandler(regs*)+0x1e7>
c0013989:	0f 87 48 01 00 00    	ja     c0013ad7 <Vm::faultHandler(regs*)+0x1f4>
c001398f:	80 fa 3e             	cmp    dl,0x3e
c0013992:	0f 85 c2 05 00 00    	jne    c0013f5a <Vm::faultHandler(regs*)+0x677>
c0013998:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001399b:	be 01 00 00 00       	mov    esi,0x1
c00139a0:	eb db                	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c00139a2:	80 fa 6d             	cmp    dl,0x6d
c00139a5:	0f 84 ec 02 00 00    	je     c0013c97 <Vm::faultHandler(regs*)+0x3b4>
c00139ab:	77 17                	ja     c00139c4 <Vm::faultHandler(regs*)+0xe1>
c00139ad:	80 fa 67             	cmp    dl,0x67
c00139b0:	0f 84 48 01 00 00    	je     c0013afe <Vm::faultHandler(regs*)+0x21b>
c00139b6:	80 fa 6c             	cmp    dl,0x6c
c00139b9:	0f 84 69 02 00 00    	je     c0013c28 <Vm::faultHandler(regs*)+0x345>
c00139bf:	e9 96 05 00 00       	jmp    c0013f5a <Vm::faultHandler(regs*)+0x677>
c00139c4:	80 fa 6f             	cmp    dl,0x6f
c00139c7:	0f 84 f4 03 00 00    	je     c0013dc1 <Vm::faultHandler(regs*)+0x4de>
c00139cd:	0f 82 59 03 00 00    	jb     c0013d2c <Vm::faultHandler(regs*)+0x449>
c00139d3:	80 fa 9c             	cmp    dl,0x9c
c00139d6:	0f 84 2f 01 00 00    	je     c0013b0b <Vm::faultHandler(regs*)+0x228>
c00139dc:	e9 79 05 00 00       	jmp    c0013f5a <Vm::faultHandler(regs*)+0x677>
c00139e1:	80 fa ec             	cmp    dl,0xec
c00139e4:	0f 84 14 05 00 00    	je     c0013efe <Vm::faultHandler(regs*)+0x61b>
c00139ea:	77 7b                	ja     c0013a67 <Vm::faultHandler(regs*)+0x184>
c00139ec:	80 fa e4             	cmp    dl,0xe4
c00139ef:	0f 84 93 04 00 00    	je     c0013e88 <Vm::faultHandler(regs*)+0x5a5>
c00139f5:	77 53                	ja     c0013a4a <Vm::faultHandler(regs*)+0x167>
c00139f7:	80 fa cd             	cmp    dl,0xcd
c00139fa:	0f 84 d9 01 00 00    	je     c0013bd9 <Vm::faultHandler(regs*)+0x2f6>
c0013a00:	80 fa cf             	cmp    dl,0xcf
c0013a03:	0f 85 51 05 00 00    	jne    c0013f5a <Vm::faultHandler(regs*)+0x677>
c0013a09:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013a0c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0013a0f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0013a13:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0013a16:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0013a1a:	81 ca 00 02 02 00    	or     edx,0x20200
c0013a20:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013a23:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013a27:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a2d:	66 c1 e8 09          	shr    ax,0x9
c0013a31:	83 e0 01             	and    eax,0x1
c0013a34:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013a37:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013a3a:	83 c0 06             	add    eax,0x6
c0013a3d:	25 ff ff 00 00       	and    eax,0xffff
c0013a42:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013a45:	e9 0c 05 00 00       	jmp    c0013f56 <Vm::faultHandler(regs*)+0x673>
c0013a4a:	80 fa e6             	cmp    dl,0xe6
c0013a4d:	0f 84 7f 04 00 00    	je     c0013ed2 <Vm::faultHandler(regs*)+0x5ef>
c0013a53:	0f 82 4b 04 00 00    	jb     c0013ea4 <Vm::faultHandler(regs*)+0x5c1>
c0013a59:	80 fa e7             	cmp    dl,0xe7
c0013a5c:	0f 84 87 04 00 00    	je     c0013ee9 <Vm::faultHandler(regs*)+0x606>
c0013a62:	e9 f3 04 00 00       	jmp    c0013f5a <Vm::faultHandler(regs*)+0x677>
c0013a67:	80 fa ef             	cmp    dl,0xef
c0013a6a:	0f 84 d1 04 00 00    	je     c0013f41 <Vm::faultHandler(regs*)+0x65e>
c0013a70:	77 28                	ja     c0013a9a <Vm::faultHandler(regs*)+0x1b7>
c0013a72:	80 fa ed             	cmp    dl,0xed
c0013a75:	0f 84 9f 04 00 00    	je     c0013f1a <Vm::faultHandler(regs*)+0x637>
c0013a7b:	80 fa ee             	cmp    dl,0xee
c0013a7e:	0f 85 d6 04 00 00    	jne    c0013f5a <Vm::faultHandler(regs*)+0x677>
c0013a84:	50                   	push   eax
c0013a85:	50                   	push   eax
c0013a86:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013a8a:	50                   	push   eax
c0013a8b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013a8f:	50                   	push   eax
c0013a90:	e8 a3 f9 ff ff       	call   c0013438 <Vm::outbv(unsigned short, unsigned char)>
c0013a95:	e9 9f 04 00 00       	jmp    c0013f39 <Vm::faultHandler(regs*)+0x656>
c0013a9a:	80 fa fa             	cmp    dl,0xfa
c0013a9d:	0f 84 69 01 00 00    	je     c0013c0c <Vm::faultHandler(regs*)+0x329>
c0013aa3:	80 fa fb             	cmp    dl,0xfb
c0013aa6:	0f 84 6e 01 00 00    	je     c0013c1a <Vm::faultHandler(regs*)+0x337>
c0013aac:	80 fa f3             	cmp    dl,0xf3
c0013aaf:	0f 85 a5 04 00 00    	jne    c0013f5a <Vm::faultHandler(regs*)+0x677>
c0013ab5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ab8:	e9 c0 fe ff ff       	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c0013abd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ac0:	be 02 00 00 00       	mov    esi,0x2
c0013ac5:	e9 b3 fe ff ff       	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c0013aca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013acd:	be 03 00 00 00       	mov    esi,0x3
c0013ad2:	e9 a6 fe ff ff       	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c0013ad7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ada:	be 04 00 00 00       	mov    esi,0x4
c0013adf:	e9 99 fe ff ff       	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c0013ae4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013ae7:	be 05 00 00 00       	mov    esi,0x5
c0013aec:	e9 8c fe ff ff       	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c0013af1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013af4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0013af9:	e9 7f fe ff ff       	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c0013afe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013b01:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0013b06:	e9 72 fe ff ff       	jmp    c001397d <Vm::faultHandler(regs*)+0x9a>
c0013b0b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0013b0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b12:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013b17:	74 30                	je     c0013b49 <Vm::faultHandler(regs*)+0x266>
c0013b19:	83 e9 04             	sub    ecx,0x4
c0013b1c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013b22:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013b28:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013b2b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013b2e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b34:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013b38:	0f 84 15 04 00 00    	je     c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013b3e:	80 ce 02             	or     dh,0x2
c0013b41:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0013b44:	e9 0a 04 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013b49:	83 e9 02             	sub    ecx,0x2
c0013b4c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0013b52:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0013b55:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013b59:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b5f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0013b63:	74 05                	je     c0013b6a <Vm::faultHandler(regs*)+0x287>
c0013b65:	80 ce 02             	or     dh,0x2
c0013b68:	eb 03                	jmp    c0013b6d <Vm::faultHandler(regs*)+0x28a>
c0013b6a:	80 e6 fd             	and    dh,0xfd
c0013b6d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0013b71:	e9 dd 03 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013b76:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013b7b:	74 2a                	je     c0013ba7 <Vm::faultHandler(regs*)+0x2c4>
c0013b7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b7f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0013b85:	81 ca 00 02 02 00    	or     edx,0x20200
c0013b8b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b90:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b96:	c1 e8 09             	shr    eax,0x9
c0013b99:	83 e0 01             	and    eax,0x1
c0013b9c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013b9f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013ba2:	83 c0 04             	add    eax,0x4
c0013ba5:	eb 25                	jmp    c0013bcc <Vm::faultHandler(regs*)+0x2e9>
c0013ba7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0013baa:	81 ca 00 02 02 00    	or     edx,0x20200
c0013bb0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0013bb3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013bb6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bbc:	66 c1 e8 09          	shr    ax,0x9
c0013bc0:	83 e0 01             	and    eax,0x1
c0013bc3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0013bc6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0013bc9:	83 c0 02             	add    eax,0x2
c0013bcc:	25 ff ff 00 00       	and    eax,0xffff
c0013bd1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0013bd4:	e9 7a 03 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013bd9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013bdd:	3c ee                	cmp    al,0xee
c0013bdf:	75 10                	jne    c0013bf1 <Vm::faultHandler(regs*)+0x30e>
c0013be1:	83 ec 0c             	sub    esp,0xc
c0013be4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013be7:	e8 e9 f8 ff ff       	call   c00134d5 <Vm::mainloop3(unsigned long)>
c0013bec:	e9 4b 03 00 00       	jmp    c0013f3c <Vm::faultHandler(regs*)+0x659>
c0013bf1:	83 ec 0c             	sub    esp,0xc
c0013bf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bfc:	51                   	push   ecx
c0013bfd:	50                   	push   eax
c0013bfe:	53                   	push   ebx
c0013bff:	e8 e1 fb ff ff       	call   c00137e5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0013c04:	83 c4 20             	add    esp,0x20
c0013c07:	e9 4a 03 00 00       	jmp    c0013f56 <Vm::faultHandler(regs*)+0x673>
c0013c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c11:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0013c15:	e9 39 03 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013c1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c1f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0013c23:	e9 2b 03 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013c28:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013c2b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013c30:	74 2b                	je     c0013c5d <Vm::faultHandler(regs*)+0x37a>
c0013c32:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0013c39:	76 22                	jbe    c0013c5d <Vm::faultHandler(regs*)+0x37a>
c0013c3b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013c3f:	50                   	push   eax
c0013c40:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013c44:	50                   	push   eax
c0013c45:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013c49:	50                   	push   eax
c0013c4a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013c4e:	50                   	push   eax
c0013c4f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013c53:	50                   	push   eax
c0013c54:	6a 6c                	push   0x6c
c0013c56:	6a 6c                	push   0x6c
c0013c58:	e9 b9 01 00 00       	jmp    c0013e16 <Vm::faultHandler(regs*)+0x533>
c0013c5d:	83 ec 0c             	sub    esp,0xc
c0013c60:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013c64:	0f b7 f6             	movzx  esi,si
c0013c67:	50                   	push   eax
c0013c68:	e8 b8 f7 ff ff       	call   c0013425 <Vm::inbv(unsigned short)>
c0013c6d:	83 c4 0c             	add    esp,0xc
c0013c70:	0f b6 c0             	movzx  eax,al
c0013c73:	50                   	push   eax
c0013c74:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0013c78:	50                   	push   eax
c0013c79:	56                   	push   esi
c0013c7a:	e8 24 fc ff ff       	call   c00138a3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013c85:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013c89:	74 03                	je     c0013c8e <Vm::faultHandler(regs*)+0x3ab>
c0013c8b:	48                   	dec    eax
c0013c8c:	eb 01                	jmp    c0013c8f <Vm::faultHandler(regs*)+0x3ac>
c0013c8e:	40                   	inc    eax
c0013c8f:	0f b7 c0             	movzx  eax,ax
c0013c92:	e9 8d 00 00 00       	jmp    c0013d24 <Vm::faultHandler(regs*)+0x441>
c0013c97:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013c9a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013c9d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013ca2:	74 29                	je     c0013ccd <Vm::faultHandler(regs*)+0x3ea>
c0013ca4:	3d ff ff 00 00       	cmp    eax,0xffff
c0013ca9:	76 22                	jbe    c0013ccd <Vm::faultHandler(regs*)+0x3ea>
c0013cab:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013caf:	50                   	push   eax
c0013cb0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013cb4:	50                   	push   eax
c0013cb5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013cb9:	50                   	push   eax
c0013cba:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013cbe:	50                   	push   eax
c0013cbf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013cc3:	50                   	push   eax
c0013cc4:	6a 6d                	push   0x6d
c0013cc6:	6a 6d                	push   0x6d
c0013cc8:	e9 49 01 00 00       	jmp    c0013e16 <Vm::faultHandler(regs*)+0x533>
c0013ccd:	0f b7 c8             	movzx  ecx,ax
c0013cd0:	0f b7 f6             	movzx  esi,si
c0013cd3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013cd6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013cdb:	74 20                	je     c0013cfd <Vm::faultHandler(regs*)+0x41a>
c0013cdd:	ed                   	in     eax,dx
c0013cde:	55                   	push   ebp
c0013cdf:	50                   	push   eax
c0013ce0:	51                   	push   ecx
c0013ce1:	56                   	push   esi
c0013ce2:	e8 e7 fb ff ff       	call   c00138ce <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013ced:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013cf1:	74 05                	je     c0013cf8 <Vm::faultHandler(regs*)+0x415>
c0013cf3:	83 e8 04             	sub    eax,0x4
c0013cf6:	eb 27                	jmp    c0013d1f <Vm::faultHandler(regs*)+0x43c>
c0013cf8:	83 c0 04             	add    eax,0x4
c0013cfb:	eb 22                	jmp    c0013d1f <Vm::faultHandler(regs*)+0x43c>
c0013cfd:	66 ed                	in     ax,dx
c0013cff:	0f b7 c0             	movzx  eax,ax
c0013d02:	57                   	push   edi
c0013d03:	50                   	push   eax
c0013d04:	51                   	push   ecx
c0013d05:	56                   	push   esi
c0013d06:	e8 ad fb ff ff       	call   c00138b8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013d11:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013d15:	74 05                	je     c0013d1c <Vm::faultHandler(regs*)+0x439>
c0013d17:	83 e8 02             	sub    eax,0x2
c0013d1a:	eb 03                	jmp    c0013d1f <Vm::faultHandler(regs*)+0x43c>
c0013d1c:	83 c0 02             	add    eax,0x2
c0013d1f:	25 ff ff 00 00       	and    eax,0xffff
c0013d24:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0013d27:	e9 27 02 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013d2c:	8d 46 ff             	lea    eax,[esi-0x1]
c0013d2f:	3c 05                	cmp    al,0x5
c0013d31:	77 24                	ja     c0013d57 <Vm::faultHandler(regs*)+0x474>
c0013d33:	0f b6 c0             	movzx  eax,al
c0013d36:	ff 24 85 74 e2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1d8c]
c0013d3d:	0f b7 fd             	movzx  edi,bp
c0013d40:	eb 15                	jmp    c0013d57 <Vm::faultHandler(regs*)+0x474>
c0013d42:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0013d46:	eb 0f                	jmp    c0013d57 <Vm::faultHandler(regs*)+0x474>
c0013d48:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0013d4c:	eb 09                	jmp    c0013d57 <Vm::faultHandler(regs*)+0x474>
c0013d4e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0013d52:	eb 03                	jmp    c0013d57 <Vm::faultHandler(regs*)+0x474>
c0013d54:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0013d57:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013d5a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013d5f:	74 29                	je     c0013d8a <Vm::faultHandler(regs*)+0x4a7>
c0013d61:	3d ff ff 00 00       	cmp    eax,0xffff
c0013d66:	76 22                	jbe    c0013d8a <Vm::faultHandler(regs*)+0x4a7>
c0013d68:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013d6c:	50                   	push   eax
c0013d6d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013d71:	50                   	push   eax
c0013d72:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013d76:	50                   	push   eax
c0013d77:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013d7b:	50                   	push   eax
c0013d7c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013d80:	50                   	push   eax
c0013d81:	6a 6e                	push   0x6e
c0013d83:	6a 6e                	push   0x6e
c0013d85:	e9 8c 00 00 00       	jmp    c0013e16 <Vm::faultHandler(regs*)+0x533>
c0013d8a:	0f b7 c0             	movzx  eax,ax
c0013d8d:	52                   	push   edx
c0013d8e:	52                   	push   edx
c0013d8f:	50                   	push   eax
c0013d90:	57                   	push   edi
c0013d91:	e8 d9 fa ff ff       	call   c001386f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0013d96:	59                   	pop    ecx
c0013d97:	0f b6 c0             	movzx  eax,al
c0013d9a:	5e                   	pop    esi
c0013d9b:	50                   	push   eax
c0013d9c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013da0:	50                   	push   eax
c0013da1:	e8 92 f6 ff ff       	call   c0013438 <Vm::outbv(unsigned short, unsigned char)>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013dac:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0013db0:	74 03                	je     c0013db5 <Vm::faultHandler(regs*)+0x4d2>
c0013db2:	48                   	dec    eax
c0013db3:	eb 01                	jmp    c0013db6 <Vm::faultHandler(regs*)+0x4d3>
c0013db5:	40                   	inc    eax
c0013db6:	0f b7 c0             	movzx  eax,ax
c0013db9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0013dbc:	e9 92 01 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013dc1:	8d 46 ff             	lea    eax,[esi-0x1]
c0013dc4:	3c 05                	cmp    al,0x5
c0013dc6:	77 1f                	ja     c0013de7 <Vm::faultHandler(regs*)+0x504>
c0013dc8:	0f b6 c0             	movzx  eax,al
c0013dcb:	ff 24 85 8c e2 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1d74]
c0013dd2:	89 ef                	mov    edi,ebp
c0013dd4:	eb 11                	jmp    c0013de7 <Vm::faultHandler(regs*)+0x504>
c0013dd6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0013dd9:	eb 0c                	jmp    c0013de7 <Vm::faultHandler(regs*)+0x504>
c0013ddb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0013dde:	eb 07                	jmp    c0013de7 <Vm::faultHandler(regs*)+0x504>
c0013de0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0013de3:	eb 02                	jmp    c0013de7 <Vm::faultHandler(regs*)+0x504>
c0013de5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0013de7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0013dea:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0013def:	74 37                	je     c0013e28 <Vm::faultHandler(regs*)+0x545>
c0013df1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0013df7:	76 2f                	jbe    c0013e28 <Vm::faultHandler(regs*)+0x545>
c0013df9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013dfd:	50                   	push   eax
c0013dfe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013e02:	50                   	push   eax
c0013e03:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013e07:	50                   	push   eax
c0013e08:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013e0c:	50                   	push   eax
c0013e0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e11:	50                   	push   eax
c0013e12:	6a 6f                	push   0x6f
c0013e14:	6a 6f                	push   0x6f
c0013e16:	68 1a e2 01 c0       	push   0xc001e21a
c0013e1b:	e8 04 5b ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0013e20:	83 c4 20             	add    esp,0x20
c0013e23:	e9 86 01 00 00       	jmp    c0013fae <Vm::faultHandler(regs*)+0x6cb>
c0013e28:	0f b7 d7             	movzx  edx,di
c0013e2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0013e2e:	0f b7 c6             	movzx  eax,si
c0013e31:	81 e1 00 04 00 00    	and    ecx,0x400
c0013e37:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0013e3a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013e3f:	74 1d                	je     c0013e5e <Vm::faultHandler(regs*)+0x57b>
c0013e41:	55                   	push   ebp
c0013e42:	55                   	push   ebp
c0013e43:	50                   	push   eax
c0013e44:	52                   	push   edx
c0013e45:	e8 48 fa ff ff       	call   c0013892 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	89 fa                	mov    edx,edi
c0013e4f:	ef                   	out    dx,eax
c0013e50:	85 c9                	test   ecx,ecx
c0013e52:	74 05                	je     c0013e59 <Vm::faultHandler(regs*)+0x576>
c0013e54:	83 ee 04             	sub    esi,0x4
c0013e57:	eb 21                	jmp    c0013e7a <Vm::faultHandler(regs*)+0x597>
c0013e59:	83 c6 04             	add    esi,0x4
c0013e5c:	eb 1c                	jmp    c0013e7a <Vm::faultHandler(regs*)+0x597>
c0013e5e:	55                   	push   ebp
c0013e5f:	55                   	push   ebp
c0013e60:	50                   	push   eax
c0013e61:	52                   	push   edx
c0013e62:	e8 19 fa ff ff       	call   c0013880 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	89 fa                	mov    edx,edi
c0013e6c:	66 ef                	out    dx,ax
c0013e6e:	85 c9                	test   ecx,ecx
c0013e70:	74 05                	je     c0013e77 <Vm::faultHandler(regs*)+0x594>
c0013e72:	83 ee 02             	sub    esi,0x2
c0013e75:	eb 03                	jmp    c0013e7a <Vm::faultHandler(regs*)+0x597>
c0013e77:	83 c6 02             	add    esi,0x2
c0013e7a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0013e80:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0013e83:	e9 cb 00 00 00       	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013e88:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013e96:	50                   	push   eax
c0013e97:	e8 89 f5 ff ff       	call   c0013425 <Vm::inbv(unsigned short)>
c0013e9c:	0f b6 c0             	movzx  eax,al
c0013e9f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013ea2:	eb 3f                	jmp    c0013ee3 <Vm::faultHandler(regs*)+0x600>
c0013ea4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ea9:	74 07                	je     c0013eb2 <Vm::faultHandler(regs*)+0x5cf>
c0013eab:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013eaf:	ed                   	in     eax,dx
c0013eb0:	eb 14                	jmp    c0013ec6 <Vm::faultHandler(regs*)+0x5e3>
c0013eb2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0013eb5:	66 31 f6             	xor    si,si
c0013eb8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0013ebb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013ebf:	66 ed                	in     ax,dx
c0013ec1:	0f b7 c0             	movzx  eax,ax
c0013ec4:	09 f0                	or     eax,esi
c0013ec6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013ec9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013ecd:	e9 84 00 00 00       	jmp    c0013f56 <Vm::faultHandler(regs*)+0x673>
c0013ed2:	52                   	push   edx
c0013ed3:	52                   	push   edx
c0013ed4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0013ed8:	50                   	push   eax
c0013ed9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013edd:	50                   	push   eax
c0013ede:	e8 55 f5 ff ff       	call   c0013438 <Vm::outbv(unsigned short, unsigned char)>
c0013ee3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0013ee7:	eb 53                	jmp    c0013f3c <Vm::faultHandler(regs*)+0x659>
c0013ee9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013eec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0013ef0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013ef5:	74 03                	je     c0013efa <Vm::faultHandler(regs*)+0x617>
c0013ef7:	ef                   	out    dx,eax
c0013ef8:	eb cf                	jmp    c0013ec9 <Vm::faultHandler(regs*)+0x5e6>
c0013efa:	66 ef                	out    dx,ax
c0013efc:	eb cb                	jmp    c0013ec9 <Vm::faultHandler(regs*)+0x5e6>
c0013efe:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0013f05:	83 ec 0c             	sub    esp,0xc
c0013f08:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0013f0c:	50                   	push   eax
c0013f0d:	e8 13 f5 ff ff       	call   c0013425 <Vm::inbv(unsigned short)>
c0013f12:	0f b6 c0             	movzx  eax,al
c0013f15:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0013f18:	eb 1f                	jmp    c0013f39 <Vm::faultHandler(regs*)+0x656>
c0013f1a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013f1d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f22:	74 03                	je     c0013f27 <Vm::faultHandler(regs*)+0x644>
c0013f24:	ed                   	in     eax,dx
c0013f25:	eb 0d                	jmp    c0013f34 <Vm::faultHandler(regs*)+0x651>
c0013f27:	66 ed                	in     ax,dx
c0013f29:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0013f2c:	0f b7 c0             	movzx  eax,ax
c0013f2f:	66 31 d2             	xor    dx,dx
c0013f32:	09 d0                	or     eax,edx
c0013f34:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0013f37:	eb 1a                	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013f39:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	eb 15                	jmp    c0013f56 <Vm::faultHandler(regs*)+0x673>
c0013f41:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0013f44:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0013f47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0013f4c:	74 03                	je     c0013f51 <Vm::faultHandler(regs*)+0x66e>
c0013f4e:	ef                   	out    dx,eax
c0013f4f:	eb 02                	jmp    c0013f53 <Vm::faultHandler(regs*)+0x670>
c0013f51:	66 ef                	out    dx,ax
c0013f53:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0013f56:	b0 01                	mov    al,0x1
c0013f58:	eb 56                	jmp    c0013fb0 <Vm::faultHandler(regs*)+0x6cd>
c0013f5a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0013f5e:	50                   	push   eax
c0013f5f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0013f63:	50                   	push   eax
c0013f64:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0013f68:	50                   	push   eax
c0013f69:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0013f6d:	50                   	push   eax
c0013f6e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0013f72:	50                   	push   eax
c0013f73:	52                   	push   edx
c0013f74:	52                   	push   edx
c0013f75:	68 47 e2 01 c0       	push   0xc001e247
c0013f7a:	e8 a5 59 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0013f7f:	83 c4 20             	add    esp,0x20
c0013f82:	83 ec 0c             	sub    esp,0xc
c0013f85:	6a 60                	push   0x60
c0013f87:	e8 99 f4 ff ff       	call   c0013425 <Vm::inbv(unsigned short)>
c0013f8c:	83 c4 10             	add    esp,0x10
c0013f8f:	3c 1c                	cmp    al,0x1c
c0013f91:	74 04                	je     c0013f97 <Vm::faultHandler(regs*)+0x6b4>
c0013f93:	3c 5a                	cmp    al,0x5a
c0013f95:	75 eb                	jne    c0013f82 <Vm::faultHandler(regs*)+0x69f>
c0013f97:	3c 5a                	cmp    al,0x5a
c0013f99:	74 04                	je     c0013f9f <Vm::faultHandler(regs*)+0x6bc>
c0013f9b:	3c 1c                	cmp    al,0x1c
c0013f9d:	75 0f                	jne    c0013fae <Vm::faultHandler(regs*)+0x6cb>
c0013f9f:	83 ec 0c             	sub    esp,0xc
c0013fa2:	6a 60                	push   0x60
c0013fa4:	e8 7c f4 ff ff       	call   c0013425 <Vm::inbv(unsigned short)>
c0013fa9:	83 c4 10             	add    esp,0x10
c0013fac:	eb e9                	jmp    c0013f97 <Vm::faultHandler(regs*)+0x6b4>
c0013fae:	31 c0                	xor    eax,eax
c0013fb0:	83 c4 1c             	add    esp,0x1c
c0013fb3:	5b                   	pop    ebx
c0013fb4:	5e                   	pop    esi
c0013fb5:	5f                   	pop    edi
c0013fb6:	5d                   	pop    ebp
c0013fb7:	c3                   	ret    

c0013fb8 <noCopro(unsigned long)>:
c0013fb8:	c3                   	ret    

c0013fb9 <nmiHandler(regs*, void*)>:
c0013fb9:	83 ec 0c             	sub    esp,0xc
c0013fbc:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0013fc1:	83 ec 0c             	sub    esp,0xc
c0013fc4:	50                   	push   eax
c0013fc5:	e8 78 23 ff ff       	call   c0006342 <Computer::handleNMI()>
c0013fca:	83 c4 10             	add    esp,0x10
c0013fcd:	90                   	nop
c0013fce:	83 c4 0c             	add    esp,0xc
c0013fd1:	c3                   	ret    

c0013fd2 <doubleFault(regs*, void*)>:
c0013fd2:	55                   	push   ebp
c0013fd3:	89 e5                	mov    ebp,esp
c0013fd5:	83 ec 08             	sub    esp,0x8
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	68 a4 e2 01 c0       	push   0xc001e2a4
c0013fe0:	e8 8e b4 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0013fe5:	83 c4 10             	add    esp,0x10
c0013fe8:	90                   	nop
c0013fe9:	c9                   	leave  
c0013fea:	c3                   	ret    

c0013feb <displayDebugInfo(regs*)>:
c0013feb:	83 ec 1c             	sub    esp,0x1c
c0013fee:	0f 20 c0             	mov    eax,cr0
c0013ff1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff5:	0f 20 d0             	mov    eax,cr2
c0013ff8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ffc:	0f 20 d8             	mov    eax,cr3
c0013fff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014003:	0f 20 e0             	mov    eax,cr4
c0014006:	89 04 24             	mov    DWORD PTR [esp],eax
c0014009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014010:	83 ec 08             	sub    esp,0x8
c0014013:	50                   	push   eax
c0014014:	68 c0 e2 01 c0       	push   0xc001e2c0
c0014019:	e8 06 59 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001401e:	83 c4 10             	add    esp,0x10
c0014021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014025:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014028:	83 ec 08             	sub    esp,0x8
c001402b:	50                   	push   eax
c001402c:	68 b1 e2 01 c0       	push   0xc001e2b1
c0014031:	e8 ee 58 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0014036:	83 c4 10             	add    esp,0x10
c0014039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014040:	83 ec 08             	sub    esp,0x8
c0014043:	50                   	push   eax
c0014044:	68 bc e2 01 c0       	push   0xc001e2bc
c0014049:	e8 d6 58 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001404e:	83 c4 10             	add    esp,0x10
c0014051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014055:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014058:	83 ec 08             	sub    esp,0x8
c001405b:	50                   	push   eax
c001405c:	68 cb e2 01 c0       	push   0xc001e2cb
c0014061:	e8 be 58 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0014066:	83 c4 10             	add    esp,0x10
c0014069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001406d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014070:	83 ec 08             	sub    esp,0x8
c0014073:	50                   	push   eax
c0014074:	68 d6 e2 01 c0       	push   0xc001e2d6
c0014079:	e8 a6 58 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001407e:	83 c4 10             	add    esp,0x10
c0014081:	83 ec 08             	sub    esp,0x8
c0014084:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014088:	68 e1 e2 01 c0       	push   0xc001e2e1
c001408d:	e8 92 58 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0014092:	83 c4 10             	add    esp,0x10
c0014095:	83 ec 08             	sub    esp,0x8
c0014098:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001409c:	68 ec e2 01 c0       	push   0xc001e2ec
c00140a1:	e8 7e 58 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00140a6:	83 c4 10             	add    esp,0x10
c00140a9:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00140ae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140b4:	83 ec 0c             	sub    esp,0xc
c00140b7:	50                   	push   eax
c00140b8:	e8 d4 37 ff ff       	call   c0007891 <setActiveTerminal(VgaText*)>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00140c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140cb:	83 ec 08             	sub    esp,0x8
c00140ce:	68 f7 e2 01 c0       	push   0xc001e2f7
c00140d3:	50                   	push   eax
c00140d4:	e8 f7 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00140d9:	83 c4 10             	add    esp,0x10
c00140dc:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00140e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140e7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00140ec:	8b 12                	mov    edx,DWORD PTR [edx]
c00140ee:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00140f1:	83 c2 0c             	add    edx,0xc
c00140f4:	83 ec 08             	sub    esp,0x8
c00140f7:	52                   	push   edx
c00140f8:	50                   	push   eax
c00140f9:	e8 d2 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00140fe:	83 c4 10             	add    esp,0x10
c0014101:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0014106:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001410c:	83 ec 08             	sub    esp,0x8
c001410f:	68 00 e3 01 c0       	push   0xc001e300
c0014114:	50                   	push   eax
c0014115:	e8 b6 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0014122:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014128:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001412c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001412f:	83 ec 08             	sub    esp,0x8
c0014132:	52                   	push   edx
c0014133:	50                   	push   eax
c0014134:	e8 51 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014139:	83 c4 10             	add    esp,0x10
c001413c:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0014141:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014147:	83 ec 08             	sub    esp,0x8
c001414a:	68 08 e3 01 c0       	push   0xc001e308
c001414f:	50                   	push   eax
c0014150:	e8 7b 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014155:	83 c4 10             	add    esp,0x10
c0014158:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c001415d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014163:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014167:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001416a:	83 ec 08             	sub    esp,0x8
c001416d:	52                   	push   edx
c001416e:	50                   	push   eax
c001416f:	e8 16 3a ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014174:	83 c4 10             	add    esp,0x10
c0014177:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c001417c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014182:	83 ec 08             	sub    esp,0x8
c0014185:	68 10 e3 01 c0       	push   0xc001e310
c001418a:	50                   	push   eax
c001418b:	e8 40 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014190:	83 c4 10             	add    esp,0x10
c0014193:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0014198:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001419e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141a2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00141a5:	83 ec 08             	sub    esp,0x8
c00141a8:	52                   	push   edx
c00141a9:	50                   	push   eax
c00141aa:	e8 db 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00141b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141bd:	83 ec 08             	sub    esp,0x8
c00141c0:	68 18 e3 01 c0       	push   0xc001e318
c00141c5:	50                   	push   eax
c00141c6:	e8 05 3a ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00141cb:	83 c4 10             	add    esp,0x10
c00141ce:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00141d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141dd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00141e0:	83 ec 08             	sub    esp,0x8
c00141e3:	52                   	push   edx
c00141e4:	50                   	push   eax
c00141e5:	e8 a0 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00141ea:	83 c4 10             	add    esp,0x10
c00141ed:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00141f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00141f8:	83 ec 08             	sub    esp,0x8
c00141fb:	68 20 e3 01 c0       	push   0xc001e320
c0014200:	50                   	push   eax
c0014201:	e8 ca 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c001420e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014214:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014218:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001421b:	83 ec 08             	sub    esp,0x8
c001421e:	52                   	push   edx
c001421f:	50                   	push   eax
c0014220:	e8 65 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c001422d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014233:	83 ec 08             	sub    esp,0x8
c0014236:	68 28 e3 01 c0       	push   0xc001e328
c001423b:	50                   	push   eax
c001423c:	e8 8f 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0014249:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001424f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014253:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014256:	83 ec 08             	sub    esp,0x8
c0014259:	52                   	push   edx
c001425a:	50                   	push   eax
c001425b:	e8 2a 39 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014260:	83 c4 10             	add    esp,0x10
c0014263:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0014268:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001426e:	83 ec 08             	sub    esp,0x8
c0014271:	68 30 e3 01 c0       	push   0xc001e330
c0014276:	50                   	push   eax
c0014277:	e8 54 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c001427c:	83 c4 10             	add    esp,0x10
c001427f:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0014284:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001428a:	83 ec 08             	sub    esp,0x8
c001428d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014291:	50                   	push   eax
c0014292:	e8 f3 38 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014297:	83 c4 10             	add    esp,0x10
c001429a:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c001429f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142a5:	83 ec 08             	sub    esp,0x8
c00142a8:	68 39 e3 01 c0       	push   0xc001e339
c00142ad:	50                   	push   eax
c00142ae:	e8 1d 39 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00142b3:	83 c4 10             	add    esp,0x10
c00142b6:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00142bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142c1:	83 ec 08             	sub    esp,0x8
c00142c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142c8:	50                   	push   eax
c00142c9:	e8 bc 38 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c00142ce:	83 c4 10             	add    esp,0x10
c00142d1:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00142d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142dc:	83 ec 08             	sub    esp,0x8
c00142df:	68 41 e3 01 c0       	push   0xc001e341
c00142e4:	50                   	push   eax
c00142e5:	e8 e6 38 ff ff       	call   c0007bd0 <VgaText::puts(char const*)>
c00142ea:	83 c4 10             	add    esp,0x10
c00142ed:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c00142f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00142f8:	83 ec 08             	sub    esp,0x8
c00142fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00142ff:	50                   	push   eax
c0014300:	e8 85 38 ff ff       	call   c0007b8a <VgaText::putx(unsigned int)>
c0014305:	83 c4 10             	add    esp,0x10
c0014308:	fa                   	cli    
c0014309:	f4                   	hlt    
c001430a:	eb fe                	jmp    c001430a <displayDebugInfo(regs*)+0x31f>

c001430c <displayProgramFault(char const*)>:
c001430c:	83 ec 0c             	sub    esp,0xc
c001430f:	83 ec 0c             	sub    esp,0xc
c0014312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014316:	e8 09 56 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001431b:	83 c4 10             	add    esp,0x10
c001431e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014323:	8b 00                	mov    eax,DWORD PTR [eax]
c0014325:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014328:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001432e:	85 c0                	test   eax,eax
c0014330:	74 21                	je     c0014353 <displayProgramFault(char const*)+0x47>
c0014332:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014337:	8b 00                	mov    eax,DWORD PTR [eax]
c0014339:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001433c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014342:	6a 04                	push   0x4
c0014344:	6a 0f                	push   0xf
c0014346:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001434a:	50                   	push   eax
c001434b:	e8 f2 38 ff ff       	call   c0007c42 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014350:	83 c4 10             	add    esp,0x10
c0014353:	90                   	nop
c0014354:	83 c4 0c             	add    esp,0xc
c0014357:	c3                   	ret    

c0014358 <gpFault(regs*, void*)>:
c0014358:	83 ec 1c             	sub    esp,0x1c
c001435b:	c7 05 b0 29 02 c0 e3 38 01 c0 	mov    DWORD PTR ds:0xc00229b0,0xc00138e3
c0014365:	a1 b0 29 02 c0       	mov    eax,ds:0xc00229b0
c001436a:	85 c0                	test   eax,eax
c001436c:	74 1c                	je     c001438a <gpFault(regs*, void*)+0x32>
c001436e:	a1 b0 29 02 c0       	mov    eax,ds:0xc00229b0
c0014373:	83 ec 0c             	sub    esp,0xc
c0014376:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001437a:	ff d0                	call   eax
c001437c:	83 c4 10             	add    esp,0x10
c001437f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014383:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014388:	75 2e                	jne    c00143b8 <gpFault(regs*, void*)+0x60>
c001438a:	83 ec 0c             	sub    esp,0xc
c001438d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014391:	e8 55 fc ff ff       	call   c0013feb <displayDebugInfo(regs*)>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	83 ec 0c             	sub    esp,0xc
c001439c:	68 49 e3 01 c0       	push   0xc001e349
c00143a1:	e8 66 ff ff ff       	call   c001430c <displayProgramFault(char const*)>
c00143a6:	83 c4 10             	add    esp,0x10
c00143a9:	83 ec 0c             	sub    esp,0xc
c00143ac:	6a 00                	push   0x0
c00143ae:	e8 25 ef ff ff       	call   c00132d8 <Thr::terminateFromIRQ(int)>
c00143b3:	83 c4 10             	add    esp,0x10
c00143b6:	eb 01                	jmp    c00143b9 <gpFault(regs*, void*)+0x61>
c00143b8:	90                   	nop
c00143b9:	83 c4 1c             	add    esp,0x1c
c00143bc:	c3                   	ret    

c00143bd <pgFault(regs*, void*)>:
c00143bd:	83 ec 1c             	sub    esp,0x1c
c00143c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00143c7:	0f 20 d0             	mov    eax,cr2
c00143ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00143ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143d2:	83 ec 04             	sub    esp,0x4
c00143d5:	52                   	push   edx
c00143d6:	50                   	push   eax
c00143d7:	68 b4 e3 01 c0       	push   0xc001e3b4
c00143dc:	e8 43 55 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00143e1:	83 c4 10             	add    esp,0x10
c00143e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00143e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00143eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143ee:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00143f4:	0f 20 d2             	mov    edx,cr2
c00143f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00143fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143ff:	83 ec 08             	sub    esp,0x8
c0014402:	52                   	push   edx
c0014403:	50                   	push   eax
c0014404:	e8 4d 51 ff ff       	call   c0009556 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	84 c0                	test   al,al
c001440e:	75 2e                	jne    c001443e <pgFault(regs*, void*)+0x81>
c0014410:	83 ec 0c             	sub    esp,0xc
c0014413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014417:	e8 cf fb ff ff       	call   c0013feb <displayDebugInfo(regs*)>
c001441c:	83 c4 10             	add    esp,0x10
c001441f:	83 ec 0c             	sub    esp,0xc
c0014422:	68 62 e3 01 c0       	push   0xc001e362
c0014427:	e8 e0 fe ff ff       	call   c001430c <displayProgramFault(char const*)>
c001442c:	83 c4 10             	add    esp,0x10
c001442f:	83 ec 0c             	sub    esp,0xc
c0014432:	6a 00                	push   0x0
c0014434:	e8 9f ee ff ff       	call   c00132d8 <Thr::terminateFromIRQ(int)>
c0014439:	83 c4 10             	add    esp,0x10
c001443c:	eb 01                	jmp    c001443f <pgFault(regs*, void*)+0x82>
c001443e:	90                   	nop
c001443f:	83 c4 1c             	add    esp,0x1c
c0014442:	c3                   	ret    

c0014443 <otherISRHandler(regs*, void*)>:
c0014443:	83 ec 0c             	sub    esp,0xc
c0014446:	83 ec 0c             	sub    esp,0xc
c0014449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001444d:	e8 99 fb ff ff       	call   c0013feb <displayDebugInfo(regs*)>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	83 ec 0c             	sub    esp,0xc
c0014458:	68 dc e3 01 c0       	push   0xc001e3dc
c001445d:	e8 aa fe ff ff       	call   c001430c <displayProgramFault(char const*)>
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	83 ec 0c             	sub    esp,0xc
c0014468:	6a 00                	push   0x0
c001446a:	e8 69 ee ff ff       	call   c00132d8 <Thr::terminateFromIRQ(int)>
c001446f:	83 c4 10             	add    esp,0x10
c0014472:	90                   	nop
c0014473:	83 c4 0c             	add    esp,0xc
c0014476:	c3                   	ret    

c0014477 <opcodeFault(regs*, void*)>:
c0014477:	55                   	push   ebp
c0014478:	89 e5                	mov    ebp,esp
c001447a:	83 ec 08             	sub    esp,0x8
c001447d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014480:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014483:	83 ec 08             	sub    esp,0x8
c0014486:	50                   	push   eax
c0014487:	68 6d e3 01 c0       	push   0xc001e36d
c001448c:	e8 93 54 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0014491:	83 c4 10             	add    esp,0x10
c0014494:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0014499:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001449f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00144a5:	84 c0                	test   al,al
c00144a7:	74 21                	je     c00144ca <opcodeFault(regs*, void*)+0x53>
c00144a9:	83 ec 0c             	sub    esp,0xc
c00144ac:	68 04 e4 01 c0       	push   0xc001e404
c00144b1:	e8 6e 54 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00144b6:	83 c4 10             	add    esp,0x10
c00144b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00144bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00144bf:	8d 50 19             	lea    edx,[eax+0x19]
c00144c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00144c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00144c8:	eb 2b                	jmp    c00144f5 <opcodeFault(regs*, void*)+0x7e>
c00144ca:	83 ec 0c             	sub    esp,0xc
c00144cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00144d0:	e8 16 fb ff ff       	call   c0013feb <displayDebugInfo(regs*)>
c00144d5:	83 c4 10             	add    esp,0x10
c00144d8:	83 ec 0c             	sub    esp,0xc
c00144db:	68 7b e3 01 c0       	push   0xc001e37b
c00144e0:	e8 27 fe ff ff       	call   c001430c <displayProgramFault(char const*)>
c00144e5:	83 c4 10             	add    esp,0x10
c00144e8:	83 ec 0c             	sub    esp,0xc
c00144eb:	6a 00                	push   0x0
c00144ed:	e8 e6 ed ff ff       	call   c00132d8 <Thr::terminateFromIRQ(int)>
c00144f2:	83 c4 10             	add    esp,0x10
c00144f5:	c9                   	leave  
c00144f6:	c3                   	ret    

c00144f7 <i386SaveCoprocessor(void*)>:
c00144f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144fb:	83 c0 3f             	add    eax,0x3f
c00144fe:	83 e0 c0             	and    eax,0xffffffc0
c0014501:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014505:	ff 25 ac 29 02 c0    	jmp    DWORD PTR ds:0xc00229ac

c001450b <i386LoadCoprocessor(void*)>:
c001450b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001450f:	83 c0 3f             	add    eax,0x3f
c0014512:	83 e0 c0             	and    eax,0xffffffc0
c0014515:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014519:	ff 25 a8 29 02 c0    	jmp    DWORD PTR ds:0xc00229a8

c001451f <x87EmulHandler(regs*, void*)>:
c001451f:	53                   	push   ebx
c0014520:	83 ec 08             	sub    esp,0x8
c0014523:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014528:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001452c:	74 10                	je     c001453e <x87EmulHandler(regs*, void*)+0x1f>
c001452e:	83 ec 0c             	sub    esp,0xc
c0014531:	68 88 e3 01 c0       	push   0xc001e388
c0014536:	e8 38 af ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001453b:	83 c4 10             	add    esp,0x10
c001453e:	0f 20 c0             	mov    eax,cr0
c0014541:	a8 08                	test   al,0x8
c0014543:	74 59                	je     c001459e <x87EmulHandler(regs*, void*)+0x7f>
c0014545:	0f 06                	clts   
c0014547:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c001454c:	85 c0                	test   eax,eax
c001454e:	74 0e                	je     c001455e <x87EmulHandler(regs*, void*)+0x3f>
c0014550:	83 ec 0c             	sub    esp,0xc
c0014553:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014556:	e8 9c ff ff ff       	call   c00144f7 <i386SaveCoprocessor(void*)>
c001455b:	83 c4 10             	add    esp,0x10
c001455e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014564:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0014568:	75 12                	jne    c001457c <x87EmulHandler(regs*, void*)+0x5d>
c001456a:	83 ec 0c             	sub    esp,0xc
c001456d:	68 40 02 00 00       	push   0x240
c0014572:	e8 ea 25 ff ff       	call   c0006b61 <malloc>
c0014577:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001457a:	eb 10                	jmp    c001458c <x87EmulHandler(regs*, void*)+0x6d>
c001457c:	83 ec 0c             	sub    esp,0xc
c001457f:	a1 a4 29 02 c0       	mov    eax,ds:0xc00229a4
c0014584:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014587:	e8 7f ff ff ff       	call   c001450b <i386LoadCoprocessor(void*)>
c001458c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014591:	83 c4 10             	add    esp,0x10
c0014594:	a3 a4 29 02 c0       	mov    ds:0xc00229a4,eax
c0014599:	83 c4 08             	add    esp,0x8
c001459c:	5b                   	pop    ebx
c001459d:	c3                   	ret    
c001459e:	83 ec 0c             	sub    esp,0xc
c00145a1:	68 9c e3 01 c0       	push   0xc001e39c
c00145a6:	e8 79 53 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c00145ab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00145b3:	83 c4 18             	add    esp,0x18
c00145b6:	5b                   	pop    ebx
c00145b7:	e9 1c ed ff ff       	jmp    c00132d8 <Thr::terminateFromIRQ(int)>

c00145bc <HalInitialiseCoprocessor()>:
c00145bc:	83 ec 10             	sub    esp,0x10
c00145bf:	c7 05 a4 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229a4,0x0
c00145c9:	6a 00                	push   0x0
c00145cb:	68 1f 45 01 c0       	push   0xc001451f
c00145d0:	6a 07                	push   0x7
c00145d2:	e8 c1 6c ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00145d7:	e8 84 6a 00 00       	call   c001b060 <avxDetect>
c00145dc:	83 c4 10             	add    esp,0x10
c00145df:	85 c0                	test   eax,eax
c00145e1:	74 1c                	je     c00145ff <HalInitialiseCoprocessor()+0x43>
c00145e3:	c7 05 ac 29 02 c0 8a b0 01 c0 	mov    DWORD PTR ds:0xc00229ac,0xc001b08a
c00145ed:	c7 05 a8 29 02 c0 9b b0 01 c0 	mov    DWORD PTR ds:0xc00229a8,0xc001b09b
c00145f7:	83 c4 0c             	add    esp,0xc
c00145fa:	e9 ad 6a 00 00       	jmp    c001b0ac <avxInit>
c00145ff:	e8 dc 6c 00 00       	call   c001b2e0 <absolutelyNoChanceInHell>
c0014604:	85 c0                	test   eax,eax
c0014606:	74 1c                	je     c0014624 <HalInitialiseCoprocessor()+0x68>
c0014608:	c7 05 ac 29 02 c0 f8 b2 01 c0 	mov    DWORD PTR ds:0xc00229ac,0xc001b2f8
c0014612:	c7 05 a8 29 02 c0 00 b3 01 c0 	mov    DWORD PTR ds:0xc00229a8,0xc001b300
c001461c:	83 c4 0c             	add    esp,0xc
c001461f:	e9 e4 6c 00 00       	jmp    c001b308 <sseInit>
c0014624:	e8 fd 6c 00 00       	call   c001b326 <x87Detect>
c0014629:	85 c0                	test   eax,eax
c001462b:	74 1c                	je     c0014649 <HalInitialiseCoprocessor()+0x8d>
c001462d:	c7 05 ac 29 02 c0 41 b3 01 c0 	mov    DWORD PTR ds:0xc00229ac,0xc001b341
c0014637:	c7 05 a8 29 02 c0 48 b3 01 c0 	mov    DWORD PTR ds:0xc00229a8,0xc001b348
c0014641:	83 c4 0c             	add    esp,0xc
c0014644:	e9 06 6d 00 00       	jmp    c001b34f <x87Init>
c0014649:	c7 05 ac 29 02 c0 b8 3f 01 c0 	mov    DWORD PTR ds:0xc00229ac,0xc0013fb8
c0014653:	c7 05 a8 29 02 c0 b8 3f 01 c0 	mov    DWORD PTR ds:0xc00229a8,0xc0013fb8
c001465d:	0f 20 c0             	mov    eax,cr0
c0014660:	83 c8 04             	or     eax,0x4
c0014663:	0f 22 c0             	mov    cr0,eax
c0014666:	83 c4 0c             	add    esp,0xc
c0014669:	c3                   	ret    

c001466a <HalPanic(char const*)>:
c001466a:	e9 04 ae ff ff       	jmp    c000f473 <Krnl::panic(char const*)>

c001466f <HalQueryPerformanceCounter()>:
c001466f:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0014674:	31 d2                	xor    edx,edx
c0014676:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001467c:	31 c0                	xor    eax,eax
c001467e:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0014685:	74 02                	je     c0014689 <HalQueryPerformanceCounter()+0x1a>
c0014687:	0f 31                	rdtsc  
c0014689:	c3                   	ret    

c001468a <HalInitialise()>:
c001468a:	53                   	push   ebx
c001468b:	83 ec 08             	sub    esp,0x8
c001468e:	e8 38 6e ff ff       	call   c000b4cb <setupINTS()>
c0014693:	80 3d 00 1d 02 c0 00 	cmp    BYTE PTR ds:0xc0021d00,0x0
c001469a:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001469f:	75 07                	jne    c00146a8 <HalInitialise()+0x1e>
c00146a1:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00146a8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00146ae:	83 e0 01             	and    eax,0x1
c00146b1:	a2 a0 29 02 c0       	mov    ds:0xc00229a0,al
c00146b6:	e8 a9 02 00 00       	call   c0014964 <picOpen()>
c00146bb:	80 3d a0 29 02 c0 00 	cmp    BYTE PTR ds:0xc00229a0,0x0
c00146c2:	74 0a                	je     c00146ce <HalInitialise()+0x44>
c00146c4:	e8 e3 01 00 00       	call   c00148ac <picDisable()>
c00146c9:	e8 08 63 00 00       	call   c001a9d6 <apicOpen()>
c00146ce:	bb 0f 00 00 00       	mov    ebx,0xf
c00146d3:	50                   	push   eax
c00146d4:	6a 00                	push   0x0
c00146d6:	68 43 44 01 c0       	push   0xc0014443
c00146db:	6a 00                	push   0x0
c00146dd:	e8 b6 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00146e2:	83 c4 0c             	add    esp,0xc
c00146e5:	6a 00                	push   0x0
c00146e7:	68 43 44 01 c0       	push   0xc0014443
c00146ec:	6a 01                	push   0x1
c00146ee:	e8 a5 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00146f3:	83 c4 0c             	add    esp,0xc
c00146f6:	6a 00                	push   0x0
c00146f8:	68 b9 3f 01 c0       	push   0xc0013fb9
c00146fd:	6a 02                	push   0x2
c00146ff:	e8 94 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014704:	83 c4 0c             	add    esp,0xc
c0014707:	6a 00                	push   0x0
c0014709:	68 43 44 01 c0       	push   0xc0014443
c001470e:	6a 03                	push   0x3
c0014710:	e8 83 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	6a 00                	push   0x0
c001471a:	68 43 44 01 c0       	push   0xc0014443
c001471f:	6a 04                	push   0x4
c0014721:	e8 72 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014726:	83 c4 0c             	add    esp,0xc
c0014729:	6a 00                	push   0x0
c001472b:	68 43 44 01 c0       	push   0xc0014443
c0014730:	6a 05                	push   0x5
c0014732:	e8 61 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014737:	83 c4 0c             	add    esp,0xc
c001473a:	6a 00                	push   0x0
c001473c:	68 77 44 01 c0       	push   0xc0014477
c0014741:	6a 06                	push   0x6
c0014743:	e8 50 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014748:	83 c4 0c             	add    esp,0xc
c001474b:	6a 00                	push   0x0
c001474d:	68 d2 3f 01 c0       	push   0xc0013fd2
c0014752:	6a 08                	push   0x8
c0014754:	e8 3f 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0014759:	83 c4 0c             	add    esp,0xc
c001475c:	6a 00                	push   0x0
c001475e:	68 43 44 01 c0       	push   0xc0014443
c0014763:	6a 09                	push   0x9
c0014765:	e8 2e 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001476a:	83 c4 0c             	add    esp,0xc
c001476d:	6a 00                	push   0x0
c001476f:	68 43 44 01 c0       	push   0xc0014443
c0014774:	6a 0a                	push   0xa
c0014776:	e8 1d 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001477b:	83 c4 0c             	add    esp,0xc
c001477e:	6a 00                	push   0x0
c0014780:	68 43 44 01 c0       	push   0xc0014443
c0014785:	6a 0b                	push   0xb
c0014787:	e8 0c 6b ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001478c:	83 c4 0c             	add    esp,0xc
c001478f:	6a 00                	push   0x0
c0014791:	68 58 43 01 c0       	push   0xc0014358
c0014796:	6a 0d                	push   0xd
c0014798:	e8 fb 6a ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001479d:	83 c4 0c             	add    esp,0xc
c00147a0:	6a 00                	push   0x0
c00147a2:	68 bd 43 01 c0       	push   0xc00143bd
c00147a7:	6a 0e                	push   0xe
c00147a9:	e8 ea 6a ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147ae:	83 c4 10             	add    esp,0x10
c00147b1:	50                   	push   eax
c00147b2:	6a 00                	push   0x0
c00147b4:	68 43 44 01 c0       	push   0xc0014443
c00147b9:	53                   	push   ebx
c00147ba:	43                   	inc    ebx
c00147bb:	e8 d8 6a ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147c0:	83 c4 10             	add    esp,0x10
c00147c3:	83 fb 1e             	cmp    ebx,0x1e
c00147c6:	75 e9                	jne    c00147b1 <HalInitialise()+0x127>
c00147c8:	50                   	push   eax
c00147c9:	6a 00                	push   0x0
c00147cb:	68 36 0f 01 c0       	push   0xc0010f36
c00147d0:	6a 60                	push   0x60
c00147d2:	e8 c1 6a ff ff       	call   c000b298 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00147d7:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00147dc:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00147e6:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00147ed:	e8 6f 23 ff ff       	call   c0006b61 <malloc>
c00147f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147f5:	89 c3                	mov    ebx,eax
c00147f7:	e8 30 09 00 00       	call   c001512c <RTC::RTC()>
c00147fc:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0014806:	5a                   	pop    edx
c0014807:	59                   	pop    ecx
c0014808:	53                   	push   ebx
c0014809:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c001480f:	e8 50 65 ff ff       	call   c000ad64 <Device::addChild(Device*)>
c0014814:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014816:	6a 00                	push   0x0
c0014818:	6a 00                	push   0x0
c001481a:	6a 00                	push   0x0
c001481c:	53                   	push   ebx
c001481d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014820:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0014825:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001482b:	83 c4 28             	add    esp,0x28
c001482e:	5b                   	pop    ebx
c001482f:	c3                   	ret    

c0014830 <HalMakeBeep(int)>:
c0014830:	53                   	push   ebx
c0014831:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014835:	85 db                	test   ebx,ebx
c0014837:	75 07                	jne    c0014840 <HalMakeBeep(int)+0x10>
c0014839:	e4 61                	in     al,0x61
c001483b:	83 e0 fc             	and    eax,0xfffffffc
c001483e:	eb 26                	jmp    c0014866 <HalMakeBeep(int)+0x36>
c0014840:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0014845:	99                   	cdq    
c0014846:	f7 fb                	idiv   ebx
c0014848:	89 c1                	mov    ecx,eax
c001484a:	b0 b6                	mov    al,0xb6
c001484c:	e6 43                	out    0x43,al
c001484e:	88 c8                	mov    al,cl
c0014850:	e6 42                	out    0x42,al
c0014852:	89 c8                	mov    eax,ecx
c0014854:	c1 e8 08             	shr    eax,0x8
c0014857:	e6 42                	out    0x42,al
c0014859:	e4 61                	in     al,0x61
c001485b:	88 c2                	mov    dl,al
c001485d:	83 ca 03             	or     edx,0x3
c0014860:	38 c2                	cmp    dl,al
c0014862:	74 04                	je     c0014868 <HalMakeBeep(int)+0x38>
c0014864:	88 d0                	mov    al,dl
c0014866:	e6 61                	out    0x61,al
c0014868:	5b                   	pop    ebx
c0014869:	c3                   	ret    

c001486a <HalGetRand()>:
c001486a:	31 c0                	xor    eax,eax
c001486c:	c3                   	ret    

c001486d <HalEndOfInterrupt(int)>:
c001486d:	80 3d a0 29 02 c0 00 	cmp    BYTE PTR ds:0xc00229a0,0x0
c0014874:	74 23                	je     c0014899 <HalEndOfInterrupt(int)+0x2c>
c0014876:	83 ec 14             	sub    esp,0x14
c0014879:	6a 1b                	push   0x1b
c001487b:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014881:	e8 d4 18 ff ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c0014886:	25 00 f0 ff ff       	and    eax,0xfffff000
c001488b:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0014895:	83 c4 1c             	add    esp,0x1c
c0014898:	c3                   	ret    
c0014899:	e9 56 02 00 00       	jmp    c0014af4 <picEOI(int)>

c001489e <HalRestart()>:
c001489e:	c3                   	ret    

c001489f <HalShutdown()>:
c001489f:	c3                   	ret    

c00148a0 <HalSleep()>:
c00148a0:	c3                   	ret    
c00148a1:	66 90                	xchg   ax,ax
c00148a3:	90                   	nop

c00148a4 <picIoWait()>:
c00148a4:	eb 00                	jmp    c00148a6 <picIoWait()+0x2>
c00148a6:	eb 00                	jmp    c00148a8 <picIoWait()+0x4>
c00148a8:	90                   	nop
c00148a9:	c3                   	ret    
c00148aa:	66 90                	xchg   ax,ax

c00148ac <picDisable()>:
c00148ac:	83 ec 10             	sub    esp,0x10
c00148af:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00148b6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00148bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00148bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00148c4:	ee                   	out    dx,al
c00148c5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00148cc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00148d1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00148d5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00148da:	ee                   	out    dx,al
c00148db:	90                   	nop
c00148dc:	83 c4 10             	add    esp,0x10
c00148df:	c3                   	ret    

c00148e0 <picGetIRQReg(int)>:
c00148e0:	83 ec 10             	sub    esp,0x10
c00148e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148e7:	25 ff 00 00 00       	and    eax,0xff
c00148ec:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00148f3:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00148f7:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00148fb:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014900:	ee                   	out    dx,al
c0014901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014905:	25 ff 00 00 00       	and    eax,0xff
c001490a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014911:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0014915:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014919:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001491e:	ee                   	out    dx,al
c001491f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0014926:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001492b:	89 c2                	mov    edx,eax
c001492d:	ec                   	in     al,dx
c001492e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0014932:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014936:	25 ff 00 00 00       	and    eax,0xff
c001493b:	c1 e0 08             	shl    eax,0x8
c001493e:	89 c1                	mov    ecx,eax
c0014940:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0014947:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001494c:	89 c2                	mov    edx,eax
c001494e:	ec                   	in     al,dx
c001494f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0014953:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0014957:	25 ff 00 00 00       	and    eax,0xff
c001495c:	09 c8                	or     eax,ecx
c001495e:	83 c4 10             	add    esp,0x10
c0014961:	c3                   	ret    
c0014962:	66 90                	xchg   ax,ax

c0014964 <picOpen()>:
c0014964:	83 ec 50             	sub    esp,0x50
c0014967:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001496e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0014973:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014977:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001497b:	ee                   	out    dx,al
c001497c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0014983:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0014988:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001498c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014990:	ee                   	out    dx,al
c0014991:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0014999:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00149a1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00149a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149ac:	89 c2                	mov    edx,eax
c00149ae:	ec                   	in     al,dx
c00149af:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00149b3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00149b7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00149bb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00149c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149c6:	89 c2                	mov    edx,eax
c00149c8:	ec                   	in     al,dx
c00149c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00149cd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00149d1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00149d5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00149dc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00149e1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00149e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149e9:	ee                   	out    dx,al
c00149ea:	e8 b5 fe ff ff       	call   c00148a4 <picIoWait()>
c00149ef:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00149f6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00149fb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00149ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a03:	ee                   	out    dx,al
c0014a04:	e8 9b fe ff ff       	call   c00148a4 <picIoWait()>
c0014a09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a0d:	25 ff 00 00 00       	and    eax,0xff
c0014a12:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0014a19:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0014a1d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0014a21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a25:	ee                   	out    dx,al
c0014a26:	e8 79 fe ff ff       	call   c00148a4 <picIoWait()>
c0014a2b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014a2f:	25 ff 00 00 00       	and    eax,0xff
c0014a34:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0014a3b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014a3f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0014a43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014a47:	ee                   	out    dx,al
c0014a48:	e8 57 fe ff ff       	call   c00148a4 <picIoWait()>
c0014a4d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0014a54:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0014a59:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0014a5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014a61:	ee                   	out    dx,al
c0014a62:	e8 3d fe ff ff       	call   c00148a4 <picIoWait()>
c0014a67:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0014a6e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0014a73:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014a77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a7b:	ee                   	out    dx,al
c0014a7c:	e8 23 fe ff ff       	call   c00148a4 <picIoWait()>
c0014a81:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0014a88:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0014a8d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014a91:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014a95:	ee                   	out    dx,al
c0014a96:	e8 09 fe ff ff       	call   c00148a4 <picIoWait()>
c0014a9b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0014aa2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0014aa7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014aab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014aaf:	ee                   	out    dx,al
c0014ab0:	e8 ef fd ff ff       	call   c00148a4 <picIoWait()>
c0014ab5:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0014ab9:	25 ff 00 00 00       	and    eax,0xff
c0014abe:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0014ac5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0014ac9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0014acd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014ad1:	ee                   	out    dx,al
c0014ad2:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0014ad6:	25 ff 00 00 00       	and    eax,0xff
c0014adb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0014ae2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014ae6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0014aea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0014aee:	ee                   	out    dx,al
c0014aef:	90                   	nop
c0014af0:	83 c4 50             	add    esp,0x50
c0014af3:	c3                   	ret    

c0014af4 <picEOI(int)>:
c0014af4:	83 ec 10             	sub    esp,0x10
c0014af7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014afc:	75 22                	jne    c0014b20 <picEOI(int)+0x2c>
c0014afe:	6a 0b                	push   0xb
c0014b00:	e8 db fd ff ff       	call   c00148e0 <picGetIRQReg(int)>
c0014b05:	83 c4 04             	add    esp,0x4
c0014b08:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014b0d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0014b12:	25 ff ff 00 00       	and    eax,0xffff
c0014b17:	25 80 00 00 00       	and    eax,0x80
c0014b1c:	74 72                	je     c0014b90 <picEOI(int)+0x9c>
c0014b1e:	66 90                	xchg   ax,ax
c0014b20:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b25:	75 31                	jne    c0014b58 <picEOI(int)+0x64>
c0014b27:	6a 0b                	push   0xb
c0014b29:	e8 b2 fd ff ff       	call   c00148e0 <picGetIRQReg(int)>
c0014b2e:	83 c4 04             	add    esp,0x4
c0014b31:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014b36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b3a:	66 85 c0             	test   ax,ax
c0014b3d:	78 19                	js     c0014b58 <picEOI(int)+0x64>
c0014b3f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0014b46:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0014b4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0014b4f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0014b54:	ee                   	out    dx,al
c0014b55:	eb 3d                	jmp    c0014b94 <picEOI(int)+0xa0>
c0014b57:	90                   	nop
c0014b58:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0014b5d:	7e 19                	jle    c0014b78 <picEOI(int)+0x84>
c0014b5f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0014b66:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0014b6b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0014b6f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0014b74:	ee                   	out    dx,al
c0014b75:	8d 76 00             	lea    esi,[esi+0x0]
c0014b78:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0014b7f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0014b84:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0014b88:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0014b8d:	ee                   	out    dx,al
c0014b8e:	eb 04                	jmp    c0014b94 <picEOI(int)+0xa0>
c0014b90:	90                   	nop
c0014b91:	8d 76 00             	lea    esi,[esi+0x0]
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	c3                   	ret    

c0014b98 <RTC::open(int, int, void*)>:
c0014b98:	31 c0                	xor    eax,eax
c0014b9a:	c3                   	ret    
c0014b9b:	90                   	nop

c0014b9c <RTC::close(int, int, void*)>:
c0014b9c:	31 c0                	xor    eax,eax
c0014b9e:	c3                   	ret    
c0014b9f:	90                   	nop

c0014ba0 <RTC::timeInSecondsUTC()>:
c0014ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ba4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0014baa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014bb0:	c3                   	ret    
c0014bb1:	90                   	nop

c0014bb2 <RTC::timeInDatetimeUTC()>:
c0014bb2:	53                   	push   ebx
c0014bb3:	83 ec 14             	sub    esp,0x14
c0014bb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0014bc0:	50                   	push   eax
c0014bc1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0014bc4:	83 c4 0c             	add    esp,0xc
c0014bc7:	52                   	push   edx
c0014bc8:	50                   	push   eax
c0014bc9:	53                   	push   ebx
c0014bca:	e8 09 5f ff ff       	call   c000aad8 <secondsToDatetime(unsigned long long)>
c0014bcf:	89 d8                	mov    eax,ebx
c0014bd1:	83 c4 14             	add    esp,0x14
c0014bd4:	5b                   	pop    ebx
c0014bd5:	c2 04 00             	ret    0x4

c0014bd8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0014bd8:	56                   	push   esi
c0014bd9:	53                   	push   ebx
c0014bda:	83 ec 14             	sub    esp,0x14
c0014bdd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014be1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014be3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0014be6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014bea:	52                   	push   edx
c0014beb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bf3:	50                   	push   eax
c0014bf4:	e8 df 5e ff ff       	call   c000aad8 <secondsToDatetime(unsigned long long)>
c0014bf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014c01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014c05:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0014c09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014c0d:	89 f0                	mov    eax,esi
c0014c0f:	83 c4 20             	add    esp,0x20
c0014c12:	5b                   	pop    ebx
c0014c13:	5e                   	pop    esi
c0014c14:	ff e0                	jmp    eax

c0014c16 <RTC::~RTC()>:
c0014c16:	83 ec 0c             	sub    esp,0xc
c0014c19:	ba 44 e4 01 c0       	mov    edx,0xc001e444
c0014c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c22:	89 10                	mov    DWORD PTR [eax],edx
c0014c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c28:	83 ec 0c             	sub    esp,0xc
c0014c2b:	50                   	push   eax
c0014c2c:	e8 2b 5c ff ff       	call   c000a85c <Clock::~Clock()>
c0014c31:	83 c4 10             	add    esp,0x10
c0014c34:	90                   	nop
c0014c35:	83 c4 0c             	add    esp,0xc
c0014c38:	c3                   	ret    
c0014c39:	90                   	nop

c0014c3a <RTC::~RTC()>:
c0014c3a:	83 ec 0c             	sub    esp,0xc
c0014c3d:	83 ec 0c             	sub    esp,0xc
c0014c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c44:	e8 cd ff ff ff       	call   c0014c16 <RTC::~RTC()>
c0014c49:	83 c4 10             	add    esp,0x10
c0014c4c:	83 ec 08             	sub    esp,0x8
c0014c4f:	68 60 01 00 00       	push   0x160
c0014c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c58:	e8 d1 4b ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c0014c5d:	83 c4 10             	add    esp,0x10
c0014c60:	83 c4 0c             	add    esp,0xc
c0014c63:	c3                   	ret    

c0014c64 <RTC::get_update_in_progress_flag()>:
c0014c64:	83 ec 14             	sub    esp,0x14
c0014c67:	6a 0a                	push   0xa
c0014c69:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014c6f:	e8 9a 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014c74:	83 c4 1c             	add    esp,0x1c
c0014c77:	c0 e8 07             	shr    al,0x7
c0014c7a:	c3                   	ret    
c0014c7b:	90                   	nop

c0014c7c <RTC::completeRTCRefresh()>:
c0014c7c:	55                   	push   ebp
c0014c7d:	57                   	push   edi
c0014c7e:	56                   	push   esi
c0014c7f:	53                   	push   ebx
c0014c80:	83 ec 2c             	sub    esp,0x2c
c0014c83:	8b 1d 0c 1a 02 c0    	mov    ebx,DWORD PTR ds:0xc0021a0c
c0014c89:	83 ec 0c             	sub    esp,0xc
c0014c8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014c90:	e8 cf ff ff ff       	call   c0014c64 <RTC::get_update_in_progress_flag()>
c0014c95:	83 c4 10             	add    esp,0x10
c0014c98:	84 c0                	test   al,al
c0014c9a:	74 0e                	je     c0014caa <RTC::completeRTCRefresh()+0x2e>
c0014c9c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014ca2:	3b 05 0c 1a 02 c0    	cmp    eax,DWORD PTR ds:0xc0021a0c
c0014ca8:	73 df                	jae    c0014c89 <RTC::completeRTCRefresh()+0xd>
c0014caa:	55                   	push   ebp
c0014cab:	55                   	push   ebp
c0014cac:	6a 00                	push   0x0
c0014cae:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014cb4:	e8 55 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014cb9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014cbd:	58                   	pop    eax
c0014cbe:	5a                   	pop    edx
c0014cbf:	6a 02                	push   0x2
c0014cc1:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014cc7:	e8 42 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014ccc:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0014cd0:	59                   	pop    ecx
c0014cd1:	5b                   	pop    ebx
c0014cd2:	6a 04                	push   0x4
c0014cd4:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014cda:	e8 2f 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014cdf:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0014ce3:	5e                   	pop    esi
c0014ce4:	5f                   	pop    edi
c0014ce5:	6a 07                	push   0x7
c0014ce7:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014ced:	e8 1c 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014cf2:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0014cf6:	5d                   	pop    ebp
c0014cf7:	58                   	pop    eax
c0014cf8:	6a 08                	push   0x8
c0014cfa:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d00:	e8 09 15 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d05:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0014d09:	58                   	pop    eax
c0014d0a:	5a                   	pop    edx
c0014d0b:	6a 09                	push   0x9
c0014d0d:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d13:	e8 f6 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d18:	83 c4 10             	add    esp,0x10
c0014d1b:	0f b6 e8             	movzx  ebp,al
c0014d1e:	8b 1d 0c 1a 02 c0    	mov    ebx,DWORD PTR ds:0xc0021a0c
c0014d24:	83 ec 0c             	sub    esp,0xc
c0014d27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0014d2b:	e8 34 ff ff ff       	call   c0014c64 <RTC::get_update_in_progress_flag()>
c0014d30:	83 c4 10             	add    esp,0x10
c0014d33:	84 c0                	test   al,al
c0014d35:	74 0e                	je     c0014d45 <RTC::completeRTCRefresh()+0xc9>
c0014d37:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0014d3d:	3b 05 0c 1a 02 c0    	cmp    eax,DWORD PTR ds:0xc0021a0c
c0014d43:	73 df                	jae    c0014d24 <RTC::completeRTCRefresh()+0xa8>
c0014d45:	50                   	push   eax
c0014d46:	50                   	push   eax
c0014d47:	6a 00                	push   0x0
c0014d49:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d4f:	e8 ba 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d54:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0014d58:	58                   	pop    eax
c0014d59:	5a                   	pop    edx
c0014d5a:	6a 02                	push   0x2
c0014d5c:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d62:	e8 a7 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d67:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014d6b:	59                   	pop    ecx
c0014d6c:	5b                   	pop    ebx
c0014d6d:	6a 04                	push   0x4
c0014d6f:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d75:	e8 94 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d7a:	5e                   	pop    esi
c0014d7b:	88 c3                	mov    bl,al
c0014d7d:	5f                   	pop    edi
c0014d7e:	6a 07                	push   0x7
c0014d80:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d86:	e8 83 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d8b:	89 c6                	mov    esi,eax
c0014d8d:	58                   	pop    eax
c0014d8e:	5a                   	pop    edx
c0014d8f:	6a 08                	push   0x8
c0014d91:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014d97:	e8 72 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014d9c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0014da0:	59                   	pop    ecx
c0014da1:	5f                   	pop    edi
c0014da2:	6a 09                	push   0x9
c0014da4:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014daa:	e8 5f 14 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014daf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014db3:	0f b6 f8             	movzx  edi,al
c0014db6:	83 c4 10             	add    esp,0x10
c0014db9:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0014dbd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014dc1:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0014dc5:	89 f1                	mov    ecx,esi
c0014dc7:	0f 94 c0             	sete   al
c0014dca:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0014dce:	0f 94 c2             	sete   dl
c0014dd1:	21 d0                	and    eax,edx
c0014dd3:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0014dd7:	0f 94 c2             	sete   dl
c0014dda:	21 c2                	and    edx,eax
c0014ddc:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0014de0:	0f 94 c0             	sete   al
c0014de3:	21 d0                	and    eax,edx
c0014de5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014de9:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0014ded:	0f 94 c1             	sete   cl
c0014df0:	84 c8                	test   al,cl
c0014df2:	75 29                	jne    c0014e1d <RTC::completeRTCRefresh()+0x1a1>
c0014df4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014df8:	89 fd                	mov    ebp,edi
c0014dfa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014dfe:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0014e02:	89 f0                	mov    eax,esi
c0014e04:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0014e08:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014e0c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014e10:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014e14:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0014e18:	e9 01 ff ff ff       	jmp    c0014d1e <RTC::completeRTCRefresh()+0xa2>
c0014e1d:	39 fd                	cmp    ebp,edi
c0014e1f:	75 d3                	jne    c0014df4 <RTC::completeRTCRefresh()+0x178>
c0014e21:	55                   	push   ebp
c0014e22:	55                   	push   ebp
c0014e23:	6a 0b                	push   0xb
c0014e25:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014e2b:	e8 de 13 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014e30:	83 c4 10             	add    esp,0x10
c0014e33:	89 c5                	mov    ebp,eax
c0014e35:	a8 04                	test   al,0x4
c0014e37:	75 78                	jne    c0014eb1 <RTC::completeRTCRefresh()+0x235>
c0014e39:	b1 0a                	mov    cl,0xa
c0014e3b:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0014e3f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014e43:	83 e2 0f             	and    edx,0xf
c0014e46:	c0 e8 04             	shr    al,0x4
c0014e49:	c1 ef 04             	shr    edi,0x4
c0014e4c:	f6 e1                	mul    cl
c0014e4e:	6b ff 0a             	imul   edi,edi,0xa
c0014e51:	01 d0                	add    eax,edx
c0014e53:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014e57:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014e5b:	83 e2 0f             	and    edx,0xf
c0014e5e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014e62:	c0 e8 04             	shr    al,0x4
c0014e65:	f6 e1                	mul    cl
c0014e67:	01 d0                	add    eax,edx
c0014e69:	88 da                	mov    dl,bl
c0014e6b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014e6f:	83 e2 0f             	and    edx,0xf
c0014e72:	88 d8                	mov    al,bl
c0014e74:	83 e3 80             	and    ebx,0xffffff80
c0014e77:	c0 e8 04             	shr    al,0x4
c0014e7a:	83 e0 07             	and    eax,0x7
c0014e7d:	f6 e1                	mul    cl
c0014e7f:	01 d0                	add    eax,edx
c0014e81:	89 f2                	mov    edx,esi
c0014e83:	09 c3                	or     ebx,eax
c0014e85:	83 e2 0f             	and    edx,0xf
c0014e88:	89 f0                	mov    eax,esi
c0014e8a:	c0 e8 04             	shr    al,0x4
c0014e8d:	f6 e1                	mul    cl
c0014e8f:	8d 34 02             	lea    esi,[edx+eax*1]
c0014e92:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0014e96:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014e9a:	83 e2 0f             	and    edx,0xf
c0014e9d:	c0 e8 04             	shr    al,0x4
c0014ea0:	f6 e1                	mul    cl
c0014ea2:	01 d0                	add    eax,edx
c0014ea4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0014ea8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014eac:	83 e0 0f             	and    eax,0xf
c0014eaf:	01 c7                	add    edi,eax
c0014eb1:	83 e5 02             	and    ebp,0x2
c0014eb4:	75 14                	jne    c0014eca <RTC::completeRTCRefresh()+0x24e>
c0014eb6:	84 db                	test   bl,bl
c0014eb8:	79 10                	jns    c0014eca <RTC::completeRTCRefresh()+0x24e>
c0014eba:	83 e3 7f             	and    ebx,0x7f
c0014ebd:	b9 18 00 00 00       	mov    ecx,0x18
c0014ec2:	8d 43 0c             	lea    eax,[ebx+0xc]
c0014ec5:	99                   	cdq    
c0014ec6:	f7 f9                	idiv   ecx
c0014ec8:	88 d3                	mov    bl,dl
c0014eca:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0014ed0:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0014ed6:	77 06                	ja     c0014ede <RTC::completeRTCRefresh()+0x262>
c0014ed8:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0014ede:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0014ee3:	31 d2                	xor    edx,edx
c0014ee5:	c1 e1 10             	shl    ecx,0x10
c0014ee8:	89 d7                	mov    edi,edx
c0014eea:	c1 e5 10             	shl    ebp,0x10
c0014eed:	31 c0                	xor    eax,eax
c0014eef:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0014ef5:	09 cf                	or     edi,ecx
c0014ef7:	89 fa                	mov    edx,edi
c0014ef9:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0014efd:	88 da                	mov    dl,bl
c0014eff:	89 f3                	mov    ebx,esi
c0014f01:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0014f05:	88 d8                	mov    al,bl
c0014f07:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0014f0b:	0f b7 c8             	movzx  ecx,ax
c0014f0e:	09 e9                	or     ecx,ebp
c0014f10:	89 c8                	mov    eax,ecx
c0014f12:	51                   	push   ecx
c0014f13:	51                   	push   ecx
c0014f14:	52                   	push   edx
c0014f15:	50                   	push   eax
c0014f16:	e8 30 5a ff ff       	call   c000a94b <datetimeToSeconds(datetime_t)>
c0014f1b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0014f1f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0014f25:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0014f2b:	83 c4 3c             	add    esp,0x3c
c0014f2e:	5b                   	pop    ebx
c0014f2f:	5e                   	pop    esi
c0014f30:	5f                   	pop    edi
c0014f31:	5d                   	pop    ebp
c0014f32:	c3                   	ret    
c0014f33:	90                   	nop

c0014f34 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0014f34:	55                   	push   ebp
c0014f35:	57                   	push   edi
c0014f36:	56                   	push   esi
c0014f37:	53                   	push   ebx
c0014f38:	83 ec 30             	sub    esp,0x30
c0014f3b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0014f3f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0014f43:	6a 00                	push   0x0
c0014f45:	6a 00                	push   0x0
c0014f47:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014f4d:	e8 d2 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f52:	83 c4 0c             	add    esp,0xc
c0014f55:	6a 00                	push   0x0
c0014f57:	6a 02                	push   0x2
c0014f59:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014f5f:	e8 c0 13 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0014f64:	31 d2                	xor    edx,edx
c0014f66:	89 f9                	mov    ecx,edi
c0014f68:	89 f8                	mov    eax,edi
c0014f6a:	c1 e9 10             	shr    ecx,0x10
c0014f6d:	0f b6 c4             	movzx  eax,ah
c0014f70:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0014f74:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0014f78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f7c:	b9 64 00 00 00       	mov    ecx,0x64
c0014f81:	89 f0                	mov    eax,esi
c0014f83:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0014f87:	89 f0                	mov    eax,esi
c0014f89:	0f b6 c4             	movzx  eax,ah
c0014f8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f90:	89 f0                	mov    eax,esi
c0014f92:	c1 e8 10             	shr    eax,0x10
c0014f95:	66 f7 f1             	div    cx
c0014f98:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0014f9d:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0014fa2:	59                   	pop    ecx
c0014fa3:	5b                   	pop    ebx
c0014fa4:	89 fb                	mov    ebx,edi
c0014fa6:	6a 0b                	push   0xb
c0014fa8:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0014fae:	e8 5b 12 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0014fb3:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0014fb7:	83 c4 10             	add    esp,0x10
c0014fba:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0014fbf:	75 74                	jne    c0015035 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0014fc1:	b2 0a                	mov    dl,0xa
c0014fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014fc7:	0f b6 c1             	movzx  eax,cl
c0014fca:	f6 f2                	div    dl
c0014fcc:	88 c3                	mov    bl,al
c0014fce:	88 e0                	mov    al,ah
c0014fd0:	c1 e3 04             	shl    ebx,0x4
c0014fd3:	09 c3                	or     ebx,eax
c0014fd5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014fda:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0014fde:	f6 f2                	div    dl
c0014fe0:	88 c1                	mov    cl,al
c0014fe2:	88 e0                	mov    al,ah
c0014fe4:	c1 e1 04             	shl    ecx,0x4
c0014fe7:	09 c1                	or     ecx,eax
c0014fe9:	89 f8                	mov    eax,edi
c0014feb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0014fef:	0f b6 c0             	movzx  eax,al
c0014ff2:	f6 f2                	div    dl
c0014ff4:	88 c3                	mov    bl,al
c0014ff6:	88 e0                	mov    al,ah
c0014ff8:	c1 e3 04             	shl    ebx,0x4
c0014ffb:	09 c3                	or     ebx,eax
c0014ffd:	89 f0                	mov    eax,esi
c0014fff:	0f b6 c0             	movzx  eax,al
c0015002:	f6 f2                	div    dl
c0015004:	88 c1                	mov    cl,al
c0015006:	88 e0                	mov    al,ah
c0015008:	c1 e1 04             	shl    ecx,0x4
c001500b:	09 c1                	or     ecx,eax
c001500d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015012:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015016:	f6 f2                	div    dl
c0015018:	88 c1                	mov    cl,al
c001501a:	88 e0                	mov    al,ah
c001501c:	c1 e1 04             	shl    ecx,0x4
c001501f:	09 c1                	or     ecx,eax
c0015021:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015026:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001502a:	f6 f2                	div    dl
c001502c:	89 c5                	mov    ebp,eax
c001502e:	88 e0                	mov    al,ah
c0015030:	c1 e5 04             	shl    ebp,0x4
c0015033:	09 c5                	or     ebp,eax
c0015035:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001503a:	75 17                	jne    c0015053 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001503c:	80 fb 0b             	cmp    bl,0xb
c001503f:	76 0c                	jbe    c001504d <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015041:	80 eb 0c             	sub    bl,0xc
c0015044:	75 02                	jne    c0015048 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015046:	b3 0c                	mov    bl,0xc
c0015048:	83 cb 80             	or     ebx,0xffffff80
c001504b:	eb 06                	jmp    c0015053 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001504d:	84 db                	test   bl,bl
c001504f:	75 02                	jne    c0015053 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015051:	b3 0c                	mov    bl,0xc
c0015053:	0f b6 db             	movzx  ebx,bl
c0015056:	50                   	push   eax
c0015057:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001505c:	50                   	push   eax
c001505d:	6a 00                	push   0x0
c001505f:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c0015065:	e8 ba 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c001506a:	83 c4 0c             	add    esp,0xc
c001506d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015072:	50                   	push   eax
c0015073:	6a 02                	push   0x2
c0015075:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c001507b:	e8 a4 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015080:	83 c4 0c             	add    esp,0xc
c0015083:	53                   	push   ebx
c0015084:	6a 04                	push   0x4
c0015086:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c001508c:	e8 93 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015091:	83 c4 0c             	add    esp,0xc
c0015094:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015099:	50                   	push   eax
c001509a:	6a 07                	push   0x7
c001509c:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c00150a2:	e8 7d 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c00150a7:	83 c4 0c             	add    esp,0xc
c00150aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00150af:	50                   	push   eax
c00150b0:	6a 08                	push   0x8
c00150b2:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c00150b8:	e8 67 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c00150bd:	83 c4 0c             	add    esp,0xc
c00150c0:	89 e8                	mov    eax,ebp
c00150c2:	0f b6 e8             	movzx  ebp,al
c00150c5:	55                   	push   ebp
c00150c6:	6a 09                	push   0x9
c00150c8:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c00150ce:	e8 51 12 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c00150d3:	5a                   	pop    edx
c00150d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00150d8:	e8 9f fb ff ff       	call   c0014c7c <RTC::completeRTCRefresh()>
c00150dd:	83 c4 3c             	add    esp,0x3c
c00150e0:	b0 01                	mov    al,0x1
c00150e2:	5b                   	pop    ebx
c00150e3:	5e                   	pop    esi
c00150e4:	5f                   	pop    edi
c00150e5:	5d                   	pop    ebp
c00150e6:	c3                   	ret    

c00150e7 <rtcIRQHandler(regs*, void*)>:
c00150e7:	53                   	push   ebx
c00150e8:	83 ec 10             	sub    esp,0x10
c00150eb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150ef:	6a 0c                	push   0xc
c00150f1:	ff 35 28 f4 01 c0    	push   DWORD PTR ds:0xc001f428
c00150f7:	e8 12 11 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c00150fc:	83 c4 10             	add    esp,0x10
c00150ff:	84 c0                	test   al,al
c0015101:	79 24                	jns    c0015127 <rtcIRQHandler(regs*, void*)+0x40>
c0015103:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001510a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015111:	66 ff 05 b4 29 02 c0 	inc    WORD PTR ds:0xc00229b4
c0015118:	75 0d                	jne    c0015127 <rtcIRQHandler(regs*, void*)+0x40>
c001511a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001511e:	83 c4 08             	add    esp,0x8
c0015121:	5b                   	pop    ebx
c0015122:	e9 55 fb ff ff       	jmp    c0014c7c <RTC::completeRTCRefresh()>
c0015127:	83 c4 08             	add    esp,0x8
c001512a:	5b                   	pop    ebx
c001512b:	c3                   	ret    

c001512c <RTC::RTC()>:
c001512c:	83 ec 1c             	sub    esp,0x1c
c001512f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015133:	83 ec 08             	sub    esp,0x8
c0015136:	68 27 e4 01 c0       	push   0xc001e427
c001513b:	50                   	push   eax
c001513c:	e8 e5 56 ff ff       	call   c000a826 <Clock::Clock(char const*)>
c0015141:	83 c4 10             	add    esp,0x10
c0015144:	ba 44 e4 01 c0       	mov    edx,0xc001e444
c0015149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001514d:	89 10                	mov    DWORD PTR [eax],edx
c001514f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015153:	83 ec 0c             	sub    esp,0xc
c0015156:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001515a:	6a 01                	push   0x1
c001515c:	68 e7 50 01 c0       	push   0xc00150e7
c0015161:	6a 08                	push   0x8
c0015163:	50                   	push   eax
c0015164:	e8 a7 5b ff ff       	call   c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015169:	83 c4 20             	add    esp,0x20
c001516c:	89 c2                	mov    edx,eax
c001516e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015172:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015178:	fa                   	cli    
c0015179:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c001517e:	40                   	inc    eax
c001517f:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c0015184:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0015189:	83 ec 08             	sub    esp,0x8
c001518c:	6a 0b                	push   0xb
c001518e:	50                   	push   eax
c001518f:	e8 7a 10 ff ff       	call   c000620e <Computer::readCMOS(unsigned char)>
c0015194:	83 c4 10             	add    esp,0x10
c0015197:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001519b:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00151a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00151a4:	83 ca 10             	or     edx,0x10
c00151a7:	81 e2 ff 00 00 00    	and    edx,0xff
c00151ad:	83 ec 04             	sub    esp,0x4
c00151b0:	52                   	push   edx
c00151b1:	6a 0b                	push   0xb
c00151b3:	50                   	push   eax
c00151b4:	e8 6b 11 ff ff       	call   c0006324 <Computer::writeCMOS(unsigned char, unsigned char)>
c00151b9:	83 c4 10             	add    esp,0x10
c00151bc:	83 ec 0c             	sub    esp,0xc
c00151bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151c3:	e8 b4 fa ff ff       	call   c0014c7c <RTC::completeRTCRefresh()>
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00151d0:	48                   	dec    eax
c00151d1:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c00151d6:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c00151db:	85 c0                	test   eax,eax
c00151dd:	75 01                	jne    c00151e0 <RTC::RTC()+0xb4>
c00151df:	fb                   	sti    
c00151e0:	90                   	nop
c00151e1:	83 c4 1c             	add    esp,0x1c
c00151e4:	c3                   	ret    
c00151e5:	66 90                	xchg   ax,ax
c00151e7:	90                   	nop

c00151e8 <HalConsoleScroll(int, int)>:
c00151e8:	83 ec 10             	sub    esp,0x10
c00151eb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00151f3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00151fb:	90                   	nop
c00151fc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015201:	0f 8f e1 00 00 00    	jg     c00152e8 <HalConsoleScroll(int, int)+0x100>
c0015207:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001520f:	90                   	nop
c0015210:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015218:	0f 8f be 00 00 00    	jg     c00152dc <HalConsoleScroll(int, int)+0xf4>
c001521e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015222:	89 d0                	mov    eax,edx
c0015224:	c1 e0 02             	shl    eax,0x2
c0015227:	01 d0                	add    eax,edx
c0015229:	c1 e0 05             	shl    eax,0x5
c001522c:	89 c2                	mov    edx,eax
c001522e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015232:	01 d0                	add    eax,edx
c0015234:	89 c2                	mov    edx,eax
c0015236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001523a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001523d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015241:	89 d0                	mov    eax,edx
c0015243:	c1 e0 02             	shl    eax,0x2
c0015246:	01 d0                	add    eax,edx
c0015248:	c1 e0 05             	shl    eax,0x5
c001524b:	89 c2                	mov    edx,eax
c001524d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015251:	01 d0                	add    eax,edx
c0015253:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001525d:	01 c2                	add    edx,eax
c001525f:	8a 01                	mov    al,BYTE PTR [ecx]
c0015261:	88 02                	mov    BYTE PTR [edx],al
c0015263:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015268:	75 66                	jne    c00152d0 <HalConsoleScroll(int, int)+0xe8>
c001526a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001526e:	83 e0 01             	and    eax,0x1
c0015271:	74 39                	je     c00152ac <HalConsoleScroll(int, int)+0xc4>
c0015273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015277:	83 e0 0f             	and    eax,0xf
c001527a:	88 c2                	mov    dl,al
c001527c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015280:	c1 e0 04             	shl    eax,0x4
c0015283:	88 d1                	mov    cl,dl
c0015285:	09 c1                	or     ecx,eax
c0015287:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001528b:	89 d0                	mov    eax,edx
c001528d:	c1 e0 02             	shl    eax,0x2
c0015290:	01 d0                	add    eax,edx
c0015292:	c1 e0 05             	shl    eax,0x5
c0015295:	89 c2                	mov    edx,eax
c0015297:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001529b:	01 d0                	add    eax,edx
c001529d:	89 c2                	mov    edx,eax
c001529f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152a3:	01 d0                	add    eax,edx
c00152a5:	88 ca                	mov    dl,cl
c00152a7:	88 10                	mov    BYTE PTR [eax],dl
c00152a9:	eb 25                	jmp    c00152d0 <HalConsoleScroll(int, int)+0xe8>
c00152ab:	90                   	nop
c00152ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152b0:	89 d0                	mov    eax,edx
c00152b2:	c1 e0 02             	shl    eax,0x2
c00152b5:	01 d0                	add    eax,edx
c00152b7:	c1 e0 05             	shl    eax,0x5
c00152ba:	89 c2                	mov    edx,eax
c00152bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152c0:	01 d0                	add    eax,edx
c00152c2:	89 c2                	mov    edx,eax
c00152c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152c8:	01 d0                	add    eax,edx
c00152ca:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00152cd:	8d 76 00             	lea    esi,[esi+0x0]
c00152d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00152d4:	e9 37 ff ff ff       	jmp    c0015210 <HalConsoleScroll(int, int)+0x28>
c00152d9:	8d 76 00             	lea    esi,[esi+0x0]
c00152dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00152e0:	e9 17 ff ff ff       	jmp    c00151fc <HalConsoleScroll(int, int)+0x14>
c00152e5:	8d 76 00             	lea    esi,[esi+0x0]
c00152e8:	90                   	nop
c00152e9:	83 c4 10             	add    esp,0x10
c00152ec:	c3                   	ret    
c00152ed:	8d 76 00             	lea    esi,[esi+0x0]

c00152f0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00152f0:	83 ec 14             	sub    esp,0x14
c00152f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152f7:	88 04 24             	mov    BYTE PTR [esp],al
c00152fa:	8a 04 24             	mov    al,BYTE PTR [esp]
c00152fd:	25 ff 00 00 00       	and    eax,0xff
c0015302:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015306:	89 d1                	mov    ecx,edx
c0015308:	83 e1 0f             	and    ecx,0xf
c001530b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001530f:	c1 e2 04             	shl    edx,0x4
c0015312:	81 e2 ff 00 00 00    	and    edx,0xff
c0015318:	09 ca                	or     edx,ecx
c001531a:	c1 e2 08             	shl    edx,0x8
c001531d:	09 d0                	or     eax,edx
c001531f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015324:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001532c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015330:	89 d0                	mov    eax,edx
c0015332:	c1 e0 02             	shl    eax,0x2
c0015335:	01 d0                	add    eax,edx
c0015337:	c1 e0 04             	shl    eax,0x4
c001533a:	89 c2                	mov    edx,eax
c001533c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015340:	01 d0                	add    eax,edx
c0015342:	01 c0                	add    eax,eax
c0015344:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015348:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001534c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015351:	66 89 02             	mov    WORD PTR [edx],ax
c0015354:	90                   	nop
c0015355:	83 c4 14             	add    esp,0x14
c0015358:	c3                   	ret    
c0015359:	8d 76 00             	lea    esi,[esi+0x0]

c001535c <HalConsoleCursorUpdate(int, int)>:
c001535c:	83 ec 20             	sub    esp,0x20
c001535f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015363:	89 c2                	mov    edx,eax
c0015365:	89 d0                	mov    eax,edx
c0015367:	c1 e0 02             	shl    eax,0x2
c001536a:	01 d0                	add    eax,edx
c001536c:	c1 e0 04             	shl    eax,0x4
c001536f:	89 c2                	mov    edx,eax
c0015371:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015375:	01 d0                	add    eax,edx
c0015377:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001537c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015383:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015388:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001538c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015390:	ee                   	out    dx,al
c0015391:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015396:	25 ff 00 00 00       	and    eax,0xff
c001539b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00153a2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00153a6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00153aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00153ae:	ee                   	out    dx,al
c00153af:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00153b6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00153bb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00153bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00153c3:	ee                   	out    dx,al
c00153c4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00153c9:	66 c1 e8 08          	shr    ax,0x8
c00153cd:	25 ff 00 00 00       	and    eax,0xff
c00153d2:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00153d9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00153dd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00153e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00153e5:	ee                   	out    dx,al
c00153e6:	90                   	nop
c00153e7:	83 c4 20             	add    esp,0x20
c00153ea:	c3                   	ret    
c00153eb:	90                   	nop

c00153ec <FAT::getName()>:
c00153ec:	b8 78 e4 01 c0       	mov    eax,0xc001e478
c00153f1:	c3                   	ret    
c00153f2:	66 90                	xchg   ax,ax

c00153f4 <FAT::tell(void*, unsigned long long*)>:
c00153f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00153f9:	75 09                	jne    c0015404 <FAT::tell(void*, unsigned long long*)+0x10>
c00153fb:	b8 04 00 00 00       	mov    eax,0x4
c0015400:	c3                   	ret    
c0015401:	8d 76 00             	lea    esi,[esi+0x0]
c0015404:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015409:	75 09                	jne    c0015414 <FAT::tell(void*, unsigned long long*)+0x20>
c001540b:	b8 04 00 00 00       	mov    eax,0x4
c0015410:	c3                   	ret    
c0015411:	8d 76 00             	lea    esi,[esi+0x0]
c0015414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015418:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001541b:	ba 00 00 00 00       	mov    edx,0x0
c0015420:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015424:	89 01                	mov    DWORD PTR [ecx],eax
c0015426:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015429:	b8 00 00 00 00       	mov    eax,0x0
c001542e:	c3                   	ret    
c001542f:	90                   	nop

c0015430 <FAT::stat(void*, unsigned long long*)>:
c0015430:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015435:	75 09                	jne    c0015440 <FAT::stat(void*, unsigned long long*)+0x10>
c0015437:	b8 04 00 00 00       	mov    eax,0x4
c001543c:	c3                   	ret    
c001543d:	8d 76 00             	lea    esi,[esi+0x0]
c0015440:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015445:	75 09                	jne    c0015450 <FAT::stat(void*, unsigned long long*)+0x20>
c0015447:	b8 04 00 00 00       	mov    eax,0x4
c001544c:	c3                   	ret    
c001544d:	8d 76 00             	lea    esi,[esi+0x0]
c0015450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015454:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015457:	ba 00 00 00 00       	mov    edx,0x0
c001545c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015460:	89 01                	mov    DWORD PTR [ecx],eax
c0015462:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015465:	b8 00 00 00 00       	mov    eax,0x0
c001546a:	c3                   	ret    
c001546b:	90                   	nop

c001546c <FAT::~FAT()>:
c001546c:	83 ec 0c             	sub    esp,0xc
c001546f:	ba c4 e4 01 c0       	mov    edx,0xc001e4c4
c0015474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015478:	89 10                	mov    DWORD PTR [eax],edx
c001547a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001547e:	83 ec 0c             	sub    esp,0xc
c0015481:	50                   	push   eax
c0015482:	e8 e3 47 ff ff       	call   c0009c6a <Filesystem::~Filesystem()>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	90                   	nop
c001548b:	83 c4 0c             	add    esp,0xc
c001548e:	c3                   	ret    
c001548f:	90                   	nop

c0015490 <FAT::~FAT()>:
c0015490:	83 ec 0c             	sub    esp,0xc
c0015493:	83 ec 0c             	sub    esp,0xc
c0015496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001549a:	e8 cd ff ff ff       	call   c001546c <FAT::~FAT()>
c001549f:	83 c4 10             	add    esp,0x10
c00154a2:	83 ec 08             	sub    esp,0x8
c00154a5:	6a 08                	push   0x8
c00154a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154ab:	e8 7e 43 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	83 c4 0c             	add    esp,0xc
c00154b6:	c3                   	ret    
c00154b7:	90                   	nop

c00154b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00154b8:	83 ec 1c             	sub    esp,0x1c
c00154bb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00154c2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00154c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154cb:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c00154d2:	83 f8 ff             	cmp    eax,0xffffffff
c00154d5:	75 35                	jne    c001550c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00154d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154db:	88 c2                	mov    dl,al
c00154dd:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c00154e2:	01 d0                	add    eax,edx
c00154e4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00154e8:	8b 15 c0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229c0
c00154ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154f2:	89 14 85 e0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd620],edx
c00154f9:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c00154fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015502:	89 14 85 60 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5a0],edx
c0015509:	eb 19                	jmp    c0015524 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001550b:	90                   	nop
c001550c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015510:	88 c2                	mov    dl,al
c0015512:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015516:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c001551d:	01 d0                	add    eax,edx
c001551f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015523:	90                   	nop
c0015524:	83 ec 04             	sub    esp,0x4
c0015527:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001552b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001552f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0015533:	50                   	push   eax
c0015534:	e8 48 f7 fe ff       	call   c0004c81 <f_getlabel>
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015540:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015545:	75 09                	jne    c0015550 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0015547:	b8 00 00 00 00       	mov    eax,0x0
c001554c:	eb 0a                	jmp    c0015558 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001554e:	66 90                	xchg   ax,ax
c0015550:	b8 01 00 00 00       	mov    eax,0x1
c0015555:	8d 76 00             	lea    esi,[esi+0x0]
c0015558:	83 c4 1c             	add    esp,0x1c
c001555b:	c3                   	ret    

c001555c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001555c:	57                   	push   edi
c001555d:	83 ec 58             	sub    esp,0x58
c0015560:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0015568:	8d 54 24 10          	lea    edx,[esp+0x10]
c001556c:	b8 00 00 00 00       	mov    eax,0x0
c0015571:	b9 0f 00 00 00       	mov    ecx,0xf
c0015576:	fc                   	cld    
c0015577:	89 d7                	mov    edi,edx
c0015579:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001557b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001557f:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0015586:	83 f8 ff             	cmp    eax,0xffffffff
c0015589:	75 35                	jne    c00155c0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001558b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001558f:	88 c2                	mov    dl,al
c0015591:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c0015596:	01 d0                	add    eax,edx
c0015598:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001559c:	8b 15 c0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229c0
c00155a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00155a6:	89 14 85 e0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd620],edx
c00155ad:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c00155b2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00155b6:	89 14 85 60 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5a0],edx
c00155bd:	eb 19                	jmp    c00155d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00155bf:	90                   	nop
c00155c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00155c4:	88 c2                	mov    dl,al
c00155c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00155ca:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c00155d1:	01 d0                	add    eax,edx
c00155d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00155d7:	90                   	nop
c00155d8:	83 ec 08             	sub    esp,0x8
c00155db:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00155df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00155e3:	50                   	push   eax
c00155e4:	e8 f7 b1 fe ff       	call   c00007e0 <strcat>
c00155e9:	83 c4 10             	add    esp,0x10
c00155ec:	83 ec 0c             	sub    esp,0xc
c00155ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00155f3:	50                   	push   eax
c00155f4:	e8 d9 f7 fe ff       	call   c0004dd2 <f_setlabel>
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015600:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0015605:	75 09                	jne    c0015610 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0015607:	b8 00 00 00 00       	mov    eax,0x0
c001560c:	eb 0a                	jmp    c0015618 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001560e:	66 90                	xchg   ax,ax
c0015610:	b8 01 00 00 00       	mov    eax,0x1
c0015615:	8d 76 00             	lea    esi,[esi+0x0]
c0015618:	83 c4 58             	add    esp,0x58
c001561b:	5f                   	pop    edi
c001561c:	c3                   	ret    
c001561d:	90                   	nop
c001561e:	66 90                	xchg   ax,ax

c0015620 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0015620:	83 ec 2c             	sub    esp,0x2c
c0015623:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001562b:	83 ec 08             	sub    esp,0x8
c001562e:	68 9c e4 01 c0       	push   0xc001e49c
c0015633:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015637:	e8 c4 b0 fe ff       	call   c0000700 <strcmp>
c001563c:	83 c4 10             	add    esp,0x10
c001563f:	85 c0                	test   eax,eax
c0015641:	0f 94 c0             	sete   al
c0015644:	84 c0                	test   al,al
c0015646:	74 10                	je     c0015658 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0015648:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0015650:	e9 b3 00 00 00       	jmp    c0015708 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015655:	8d 76 00             	lea    esi,[esi+0x0]
c0015658:	83 ec 08             	sub    esp,0x8
c001565b:	68 8e e4 01 c0       	push   0xc001e48e
c0015660:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015664:	e8 97 b0 fe ff       	call   c0000700 <strcmp>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	85 c0                	test   eax,eax
c001566e:	0f 94 c0             	sete   al
c0015671:	84 c0                	test   al,al
c0015673:	74 0f                	je     c0015684 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0015675:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001567d:	e9 86 00 00 00       	jmp    c0015708 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0015682:	66 90                	xchg   ax,ax
c0015684:	83 ec 08             	sub    esp,0x8
c0015687:	68 94 e4 01 c0       	push   0xc001e494
c001568c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015690:	e8 6b b0 fe ff       	call   c0000700 <strcmp>
c0015695:	83 c4 10             	add    esp,0x10
c0015698:	85 c0                	test   eax,eax
c001569a:	0f 94 c0             	sete   al
c001569d:	84 c0                	test   al,al
c001569f:	74 0b                	je     c00156ac <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00156a1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00156a9:	eb 5d                	jmp    c0015708 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00156ab:	90                   	nop
c00156ac:	83 ec 08             	sub    esp,0x8
c00156af:	68 5c c4 01 c0       	push   0xc001c45c
c00156b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00156b8:	e8 43 b0 fe ff       	call   c0000700 <strcmp>
c00156bd:	83 c4 10             	add    esp,0x10
c00156c0:	85 c0                	test   eax,eax
c00156c2:	0f 94 c0             	sete   al
c00156c5:	84 c0                	test   al,al
c00156c7:	74 0b                	je     c00156d4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00156c9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00156d1:	eb 35                	jmp    c0015708 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00156d3:	90                   	nop
c00156d4:	83 ec 08             	sub    esp,0x8
c00156d7:	68 9a e4 01 c0       	push   0xc001e49a
c00156dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00156e0:	e8 1b b0 fe ff       	call   c0000700 <strcmp>
c00156e5:	83 c4 10             	add    esp,0x10
c00156e8:	85 c0                	test   eax,eax
c00156ea:	0f 94 c0             	sete   al
c00156ed:	84 c0                	test   al,al
c00156ef:	74 0b                	je     c00156fc <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00156f1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00156f9:	eb 0d                	jmp    c0015708 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00156fb:	90                   	nop
c00156fc:	b8 08 00 00 00       	mov    eax,0x8
c0015701:	e9 ea 00 00 00       	jmp    c00157f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0015706:	66 90                	xchg   ax,ax
c0015708:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001570f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015714:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015718:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c001571f:	83 f8 ff             	cmp    eax,0xffffffff
c0015722:	75 34                	jne    c0015758 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0015724:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0015728:	88 c2                	mov    dl,al
c001572a:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c001572f:	01 d0                	add    eax,edx
c0015731:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0015735:	8b 15 c0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229c0
c001573b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001573f:	89 14 85 e0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd620],edx
c0015746:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c001574b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001574f:	89 14 85 60 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5a0],edx
c0015756:	eb 18                	jmp    c0015770 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0015758:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001575c:	88 c2                	mov    dl,al
c001575e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015762:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0015769:	01 d0                	add    eax,edx
c001576b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001576f:	90                   	nop
c0015770:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015774:	88 04 24             	mov    BYTE PTR [esp],al
c0015777:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001577b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001577f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015787:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001578c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015794:	83 ec 0c             	sub    esp,0xc
c0015797:	68 00 20 00 00       	push   0x2000
c001579c:	e8 c0 13 ff ff       	call   c0006b61 <malloc>
c00157a1:	83 c4 10             	add    esp,0x10
c00157a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00157a8:	68 00 20 00 00       	push   0x2000
c00157ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00157b5:	50                   	push   eax
c00157b6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00157ba:	50                   	push   eax
c00157bb:	e8 02 f9 fe ff       	call   c00050c2 <f_mkfs>
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00157c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00157cc:	75 0a                	jne    c00157d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00157ce:	b8 00 00 00 00       	mov    eax,0x0
c00157d3:	eb 1b                	jmp    c00157f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00157d5:	8d 76 00             	lea    esi,[esi+0x0]
c00157d8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00157dd:	75 09                	jne    c00157e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00157df:	b8 09 00 00 00       	mov    eax,0x9
c00157e4:	eb 0a                	jmp    c00157f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00157e6:	66 90                	xchg   ax,ax
c00157e8:	b8 01 00 00 00       	mov    eax,0x1
c00157ed:	8d 76 00             	lea    esi,[esi+0x0]
c00157f0:	83 c4 2c             	add    esp,0x2c
c00157f3:	c3                   	ret    

c00157f4 <FAT::tryMount(LogicalDisk*, int)>:
c00157f4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00157fa:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c00157ff:	83 f8 14             	cmp    eax,0x14
c0015802:	75 18                	jne    c001581c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	68 a0 e4 01 c0       	push   0xc001e4a0
c001580c:	e8 62 9c ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	b0 00                	mov    al,0x0
c0015816:	e9 e9 01 00 00       	jmp    c0015a04 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001581b:	90                   	nop
c001581c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0015823:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015829:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001582f:	3d 00 02 00 00       	cmp    eax,0x200
c0015834:	74 0a                	je     c0015840 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0015836:	b0 00                	mov    al,0x0
c0015838:	e9 c7 01 00 00       	jmp    c0015a04 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001583d:	8d 76 00             	lea    esi,[esi+0x0]
c0015840:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0015848:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001584f:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c0015856:	83 f8 ff             	cmp    eax,0xffffffff
c0015859:	74 09                	je     c0015864 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001585b:	b0 01                	mov    al,0x1
c001585d:	e9 a2 01 00 00       	jmp    c0015a04 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015862:	66 90                	xchg   ax,ax
c0015864:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001586e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0015876:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001587d:	88 c2                	mov    dl,al
c001587f:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c0015884:	01 d0                	add    eax,edx
c0015886:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001588d:	8b 15 c0 29 02 c0    	mov    edx,DWORD PTR ds:0xc00229c0
c0015893:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001589a:	89 14 85 e0 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd620],edx
c00158a1:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c00158a6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00158ad:	89 14 85 60 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd5a0],edx
c00158b4:	83 ec 0c             	sub    esp,0xc
c00158b7:	68 34 02 00 00       	push   0x234
c00158bc:	e8 a0 12 ff ff       	call   c0006b61 <malloc>
c00158c1:	83 c4 10             	add    esp,0x10
c00158c4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00158cb:	83 ec 04             	sub    esp,0x4
c00158ce:	6a 00                	push   0x0
c00158d0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00158d7:	50                   	push   eax
c00158d8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00158df:	e8 04 e0 fe ff       	call   c00038e8 <f_mount>
c00158e4:	83 c4 10             	add    esp,0x10
c00158e7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00158ee:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00158f6:	74 1c                	je     c0015914 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00158f8:	83 ec 0c             	sub    esp,0xc
c00158fb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0015902:	e8 7a 12 ff ff       	call   c0006b81 <rfree>
c0015907:	83 c4 10             	add    esp,0x10
c001590a:	b0 00                	mov    al,0x0
c001590c:	e9 f3 00 00 00       	jmp    c0015a04 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0015911:	8d 76 00             	lea    esi,[esi+0x0]
c0015914:	83 ec 04             	sub    esp,0x4
c0015917:	68 00 01 00 00       	push   0x100
c001591c:	6a 00                	push   0x0
c001591e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015925:	50                   	push   eax
c0015926:	e8 c5 ab fe ff       	call   c00004f0 <memset>
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	83 ec 08             	sub    esp,0x8
c0015931:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0015938:	50                   	push   eax
c0015939:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015940:	50                   	push   eax
c0015941:	e8 9a ae fe ff       	call   c00007e0 <strcat>
c0015946:	83 c4 10             	add    esp,0x10
c0015949:	83 ec 08             	sub    esp,0x8
c001594c:	68 ae e4 01 c0       	push   0xc001e4ae
c0015951:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0015958:	50                   	push   eax
c0015959:	e8 82 ae fe ff       	call   c00007e0 <strcat>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	83 ec 04             	sub    esp,0x4
c0015964:	6a 01                	push   0x1
c0015966:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001596d:	50                   	push   eax
c001596e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015972:	50                   	push   eax
c0015973:	e8 d2 df fe ff       	call   c000394a <f_open>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0015982:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0015989:	85 c0                	test   eax,eax
c001598b:	74 0b                	je     c0015998 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001598d:	78 31                	js     c00159c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001598f:	83 e8 04             	sub    eax,0x4
c0015992:	83 f8 01             	cmp    eax,0x1
c0015995:	77 29                	ja     c00159c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0015997:	90                   	nop
c0015998:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00159a7:	50                   	push   eax
c00159a8:	e8 50 e7 fe ff       	call   c00040fd <f_close>
c00159ad:	83 c4 10             	add    esp,0x10
c00159b0:	90                   	nop
c00159b1:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00159b9:	74 41                	je     c00159fc <FAT::tryMount(LogicalDisk*, int)+0x208>
c00159bb:	eb 33                	jmp    c00159f0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00159bd:	8d 76 00             	lea    esi,[esi+0x0]
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00159ca:	e8 b2 11 ff ff       	call   c0006b81 <rfree>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	83 ec 04             	sub    esp,0x4
c00159d5:	6a 00                	push   0x0
c00159d7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00159de:	50                   	push   eax
c00159df:	6a 00                	push   0x0
c00159e1:	e8 02 df fe ff       	call   c00038e8 <f_mount>
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	b0 00                	mov    al,0x0
c00159eb:	eb 17                	jmp    c0015a04 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00159ed:	8d 76 00             	lea    esi,[esi+0x0]
c00159f0:	a1 c0 29 02 c0       	mov    eax,ds:0xc00229c0
c00159f5:	40                   	inc    eax
c00159f6:	a3 c0 29 02 c0       	mov    ds:0xc00229c0,eax
c00159fb:	90                   	nop
c00159fc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0015a03:	90                   	nop
c0015a04:	81 c4 4c 03 00 00    	add    esp,0x34c
c0015a0a:	c3                   	ret    
c0015a0b:	90                   	nop

c0015a0c <FAT::allocateSwapfile(char const*, int)>:
c0015a0c:	55                   	push   ebp
c0015a0d:	57                   	push   edi
c0015a0e:	56                   	push   esi
c0015a0f:	53                   	push   ebx
c0015a10:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0015a16:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0015a21:	83 ec 0c             	sub    esp,0xc
c0015a24:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0015a2b:	e8 31 11 ff ff       	call   c0006b61 <malloc>
c0015a30:	83 c4 10             	add    esp,0x10
c0015a33:	89 c7                	mov    edi,eax
c0015a35:	a1 30 29 02 c0       	mov    eax,ds:0xc0022930
c0015a3a:	83 ec 04             	sub    esp,0x4
c0015a3d:	50                   	push   eax
c0015a3e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0015a45:	57                   	push   edi
c0015a46:	e8 4f 44 ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0015a4b:	83 c4 10             	add    esp,0x10
c0015a4e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0015a55:	83 ec 04             	sub    esp,0x4
c0015a58:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015a5c:	50                   	push   eax
c0015a5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015a61:	50                   	push   eax
c0015a62:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015a69:	e8 98 47 ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c0015a6e:	83 c4 10             	add    esp,0x10
c0015a71:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015a78:	c1 e0 14             	shl    eax,0x14
c0015a7b:	89 c7                	mov    edi,eax
c0015a7d:	89 c5                	mov    ebp,eax
c0015a7f:	c1 fd 1f             	sar    ebp,0x1f
c0015a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a8a:	89 f9                	mov    ecx,edi
c0015a8c:	31 c1                	xor    ecx,eax
c0015a8e:	89 cb                	mov    ebx,ecx
c0015a90:	89 e9                	mov    ecx,ebp
c0015a92:	31 d1                	xor    ecx,edx
c0015a94:	89 ce                	mov    esi,ecx
c0015a96:	89 f0                	mov    eax,esi
c0015a98:	09 d8                	or     eax,ebx
c0015a9a:	0f 84 9c 00 00 00    	je     c0015b3c <FAT::allocateSwapfile(char const*, int)+0x130>
c0015aa0:	83 ec 0c             	sub    esp,0xc
c0015aa3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015aaa:	e8 23 46 ff ff       	call   c000a0d2 <File::unlink()>
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	83 ec 08             	sub    esp,0x8
c0015ab5:	6a 12                	push   0x12
c0015ab7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015abe:	e8 97 44 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c0015ac3:	83 c4 10             	add    esp,0x10
c0015ac6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015acd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015ad3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015ada:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0015ae1:	c1 e0 14             	shl    eax,0x14
c0015ae4:	83 ec 04             	sub    esp,0x4
c0015ae7:	6a 01                	push   0x1
c0015ae9:	50                   	push   eax
c0015aea:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0015af1:	e8 6c f4 fe ff       	call   c0004f62 <f_expand>
c0015af6:	83 c4 10             	add    esp,0x10
c0015af9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b02:	83 c0 10             	add    eax,0x10
c0015b05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b07:	83 ec 0c             	sub    esp,0xc
c0015b0a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015b0e:	52                   	push   edx
c0015b0f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0015b13:	52                   	push   edx
c0015b14:	6a 00                	push   0x0
c0015b16:	68 00 04 00 00       	push   0x400
c0015b1b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015b22:	ff d0                	call   eax
c0015b24:	83 c4 20             	add    esp,0x20
c0015b27:	83 ec 0c             	sub    esp,0xc
c0015b2a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015b31:	e8 82 44 ff ff       	call   c0009fb8 <File::close()>
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8d 76 00             	lea    esi,[esi+0x0]
c0015b3c:	83 ec 08             	sub    esp,0x8
c0015b3f:	6a 01                	push   0x1
c0015b41:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015b48:	e8 0d 44 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	83 c0 0c             	add    eax,0xc
c0015b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5e:	83 ec 0c             	sub    esp,0xc
c0015b61:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015b65:	52                   	push   edx
c0015b66:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0015b6a:	52                   	push   edx
c0015b6b:	6a 00                	push   0x0
c0015b6d:	6a 04                	push   0x4
c0015b6f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0015b76:	ff d0                	call   eax
c0015b78:	83 c4 20             	add    esp,0x20
c0015b7b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0015b82:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0015b88:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0015b8f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0015b96:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015b99:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0015ba0:	83 ec 0c             	sub    esp,0xc
c0015ba3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0015baa:	e8 09 44 ff ff       	call   c0009fb8 <File::close()>
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0015bb9:	ba 00 00 00 00       	mov    edx,0x0
c0015bbe:	81 c4 3c 04 00 00    	add    esp,0x43c
c0015bc4:	5b                   	pop    ebx
c0015bc5:	5e                   	pop    esi
c0015bc6:	5f                   	pop    edi
c0015bc7:	5d                   	pop    ebp
c0015bc8:	c3                   	ret    
c0015bc9:	90                   	nop
c0015bca:	66 90                	xchg   ax,ax

c0015bcc <FAT::readDir(void*, unsigned long, void*, int*)>:
c0015bcc:	57                   	push   edi
c0015bcd:	56                   	push   esi
c0015bce:	53                   	push   ebx
c0015bcf:	81 ec 50 02 00 00    	sub    esp,0x250
c0015bd5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0015bdd:	74 0d                	je     c0015bec <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0015bdf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0015be7:	75 0f                	jne    c0015bf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0015be9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bec:	b8 04 00 00 00       	mov    eax,0x4
c0015bf1:	e9 36 01 00 00       	jmp    c0015d2c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015bf6:	66 90                	xchg   ax,ax
c0015bf8:	83 ec 08             	sub    esp,0x8
c0015bfb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015c02:	50                   	push   eax
c0015c03:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0015c0a:	e8 b1 e7 fe ff       	call   c00043c0 <f_readdir>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0015c19:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0015c20:	83 ec 0c             	sub    esp,0xc
c0015c23:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0015c2a:	83 c0 16             	add    eax,0x16
c0015c2d:	50                   	push   eax
c0015c2e:	e8 2d a9 fe ff       	call   c0000560 <strlen>
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	ba 00 00 00 00       	mov    edx,0x0
c0015c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c3f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015c43:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0015c4a:	25 ff 00 00 00       	and    eax,0xff
c0015c4f:	83 e0 10             	and    eax,0x10
c0015c52:	74 08                	je     c0015c5c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0015c54:	b8 02 00 00 00       	mov    eax,0x2
c0015c59:	eb 09                	jmp    c0015c64 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0015c5b:	90                   	nop
c0015c5c:	b8 01 00 00 00       	mov    eax,0x1
c0015c61:	8d 76 00             	lea    esi,[esi+0x0]
c0015c64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015c68:	83 ec 08             	sub    esp,0x8
c0015c6b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0015c72:	83 c0 16             	add    eax,0x16
c0015c75:	50                   	push   eax
c0015c76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0015c7a:	83 c0 10             	add    eax,0x10
c0015c7d:	50                   	push   eax
c0015c7e:	e8 9d a9 fe ff       	call   c0000620 <strcpy>
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0015c8d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0015c94:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c98:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0015c9f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0015ca6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0015cad:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0015cb4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0015cbb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0015cc2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0015cc9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0015cd0:	89 c6                	mov    esi,eax
c0015cd2:	89 d7                	mov    edi,edx
c0015cd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015cd6:	89 c8                	mov    eax,ecx
c0015cd8:	89 fa                	mov    edx,edi
c0015cda:	89 f3                	mov    ebx,esi
c0015cdc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0015ce3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0015cea:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0015cf1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0015cf8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0015cfe:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0015d05:	84 c0                	test   al,al
c0015d07:	75 07                	jne    c0015d10 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0015d09:	b8 07 00 00 00       	mov    eax,0x7
c0015d0e:	eb 1c                	jmp    c0015d2c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015d10:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0015d17:	85 c0                	test   eax,eax
c0015d19:	75 09                	jne    c0015d24 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0015d1b:	b8 00 00 00 00       	mov    eax,0x0
c0015d20:	eb 0a                	jmp    c0015d2c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0015d22:	66 90                	xchg   ax,ax
c0015d24:	b8 01 00 00 00       	mov    eax,0x1
c0015d29:	8d 76 00             	lea    esi,[esi+0x0]
c0015d2c:	81 c4 50 02 00 00    	add    esp,0x250
c0015d32:	5b                   	pop    ebx
c0015d33:	5e                   	pop    esi
c0015d34:	5f                   	pop    edi
c0015d35:	c3                   	ret    
c0015d36:	66 90                	xchg   ax,ax

c0015d38 <FAT::read(void*, unsigned long, void*, int*)>:
c0015d38:	83 ec 1c             	sub    esp,0x1c
c0015d3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015d40:	74 0a                	je     c0015d4c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0015d42:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015d47:	75 0b                	jne    c0015d54 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0015d49:	8d 76 00             	lea    esi,[esi+0x0]
c0015d4c:	b8 04 00 00 00       	mov    eax,0x4
c0015d51:	eb 41                	jmp    c0015d94 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015d53:	90                   	nop
c0015d54:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d58:	50                   	push   eax
c0015d59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015d61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d65:	e8 ab de fe ff       	call   c0003c15 <f_read>
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d75:	89 c2                	mov    edx,eax
c0015d77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7b:	89 10                	mov    DWORD PTR [eax],edx
c0015d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d81:	85 c0                	test   eax,eax
c0015d83:	75 07                	jne    c0015d8c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0015d85:	b8 00 00 00 00       	mov    eax,0x0
c0015d8a:	eb 08                	jmp    c0015d94 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0015d8c:	b8 01 00 00 00       	mov    eax,0x1
c0015d91:	8d 76 00             	lea    esi,[esi+0x0]
c0015d94:	83 c4 1c             	add    esp,0x1c
c0015d97:	c3                   	ret    

c0015d98 <FAT::write(void*, unsigned long, void*, int*)>:
c0015d98:	83 ec 1c             	sub    esp,0x1c
c0015d9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015da0:	74 0a                	je     c0015dac <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0015da2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015da7:	75 0b                	jne    c0015db4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0015da9:	8d 76 00             	lea    esi,[esi+0x0]
c0015dac:	b8 04 00 00 00       	mov    eax,0x4
c0015db1:	eb 41                	jmp    c0015df4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015db3:	90                   	nop
c0015db4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015db8:	50                   	push   eax
c0015db9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015dc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dc5:	e8 4a e0 fe ff       	call   c0003e14 <f_write>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dd5:	89 c2                	mov    edx,eax
c0015dd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ddb:	89 10                	mov    DWORD PTR [eax],edx
c0015ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015de1:	85 c0                	test   eax,eax
c0015de3:	75 07                	jne    c0015dec <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0015de5:	b8 00 00 00 00       	mov    eax,0x0
c0015dea:	eb 08                	jmp    c0015df4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0015dec:	b8 01 00 00 00       	mov    eax,0x1
c0015df1:	8d 76 00             	lea    esi,[esi+0x0]
c0015df4:	83 c4 1c             	add    esp,0x1c
c0015df7:	c3                   	ret    

c0015df8 <FAT::close(void*)>:
c0015df8:	83 ec 1c             	sub    esp,0x1c
c0015dfb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e00:	75 0a                	jne    c0015e0c <FAT::close(void*)+0x14>
c0015e02:	b8 04 00 00 00       	mov    eax,0x4
c0015e07:	eb 3f                	jmp    c0015e48 <FAT::close(void*)+0x50>
c0015e09:	8d 76 00             	lea    esi,[esi+0x0]
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e13:	e8 e5 e2 fe ff       	call   c00040fd <f_close>
c0015e18:	83 c4 10             	add    esp,0x10
c0015e1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e1f:	83 ec 0c             	sub    esp,0xc
c0015e22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e26:	e8 46 0d ff ff       	call   c0006b71 <free>
c0015e2b:	83 c4 10             	add    esp,0x10
c0015e2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e32:	85 c0                	test   eax,eax
c0015e34:	75 0a                	jne    c0015e40 <FAT::close(void*)+0x48>
c0015e36:	b8 00 00 00 00       	mov    eax,0x0
c0015e3b:	eb 0b                	jmp    c0015e48 <FAT::close(void*)+0x50>
c0015e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e40:	b8 01 00 00 00       	mov    eax,0x1
c0015e45:	8d 76 00             	lea    esi,[esi+0x0]
c0015e48:	83 c4 1c             	add    esp,0x1c
c0015e4b:	c3                   	ret    

c0015e4c <FAT::closeDir(void*)>:
c0015e4c:	83 ec 1c             	sub    esp,0x1c
c0015e4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015e54:	75 0a                	jne    c0015e60 <FAT::closeDir(void*)+0x14>
c0015e56:	b8 04 00 00 00       	mov    eax,0x4
c0015e5b:	eb 3f                	jmp    c0015e9c <FAT::closeDir(void*)+0x50>
c0015e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e60:	83 ec 0c             	sub    esp,0xc
c0015e63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e67:	e8 32 e5 fe ff       	call   c000439e <f_closedir>
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e73:	83 ec 0c             	sub    esp,0xc
c0015e76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e7a:	e8 f2 0c ff ff       	call   c0006b71 <free>
c0015e7f:	83 c4 10             	add    esp,0x10
c0015e82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e86:	85 c0                	test   eax,eax
c0015e88:	75 0a                	jne    c0015e94 <FAT::closeDir(void*)+0x48>
c0015e8a:	b8 00 00 00 00       	mov    eax,0x0
c0015e8f:	eb 0b                	jmp    c0015e9c <FAT::closeDir(void*)+0x50>
c0015e91:	8d 76 00             	lea    esi,[esi+0x0]
c0015e94:	b8 01 00 00 00       	mov    eax,0x1
c0015e99:	8d 76 00             	lea    esi,[esi+0x0]
c0015e9c:	83 c4 1c             	add    esp,0x1c
c0015e9f:	c3                   	ret    

c0015ea0 <FAT::seek(void*, unsigned long long)>:
c0015ea0:	83 ec 2c             	sub    esp,0x2c
c0015ea3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015eab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015eaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015eb3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0015eb8:	75 0a                	jne    c0015ec4 <FAT::seek(void*, unsigned long long)+0x24>
c0015eba:	b8 04 00 00 00       	mov    eax,0x4
c0015ebf:	eb 33                	jmp    c0015ef4 <FAT::seek(void*, unsigned long long)+0x54>
c0015ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ec4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec8:	83 ec 08             	sub    esp,0x8
c0015ecb:	50                   	push   eax
c0015ecc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ed0:	e8 57 e2 fe ff       	call   c000412c <f_lseek>
c0015ed5:	83 c4 10             	add    esp,0x10
c0015ed8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ee0:	85 c0                	test   eax,eax
c0015ee2:	75 08                	jne    c0015eec <FAT::seek(void*, unsigned long long)+0x4c>
c0015ee4:	b8 00 00 00 00       	mov    eax,0x0
c0015ee9:	eb 09                	jmp    c0015ef4 <FAT::seek(void*, unsigned long long)+0x54>
c0015eeb:	90                   	nop
c0015eec:	b8 01 00 00 00       	mov    eax,0x1
c0015ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ef4:	83 c4 2c             	add    esp,0x2c
c0015ef7:	c3                   	ret    

c0015ef8 <fatWrapperReadDisk>:
c0015ef8:	53                   	push   ebx
c0015ef9:	83 ec 18             	sub    esp,0x18
c0015efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f00:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f04:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f08:	25 ff 00 00 00       	and    eax,0xff
c0015f0d:	8b 0c 85 a0 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde660]
c0015f14:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015f18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f1c:	ba 00 00 00 00       	mov    edx,0x0
c0015f21:	83 ec 0c             	sub    esp,0xc
c0015f24:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f28:	53                   	push   ebx
c0015f29:	52                   	push   edx
c0015f2a:	50                   	push   eax
c0015f2b:	51                   	push   ecx
c0015f2c:	e8 db 60 ff ff       	call   c000c00c <LogicalDisk::read(unsigned long long, int, void*)>
c0015f31:	83 c4 20             	add    esp,0x20
c0015f34:	83 c4 18             	add    esp,0x18
c0015f37:	5b                   	pop    ebx
c0015f38:	c3                   	ret    
c0015f39:	8d 76 00             	lea    esi,[esi+0x0]

c0015f3c <fatWrapperWriteDisk>:
c0015f3c:	53                   	push   ebx
c0015f3d:	83 ec 18             	sub    esp,0x18
c0015f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f48:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f4c:	25 ff 00 00 00       	and    eax,0xff
c0015f51:	8b 0c 85 a0 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde660]
c0015f58:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015f5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f60:	ba 00 00 00 00       	mov    edx,0x0
c0015f65:	83 ec 0c             	sub    esp,0xc
c0015f68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f6c:	53                   	push   ebx
c0015f6d:	52                   	push   edx
c0015f6e:	50                   	push   eax
c0015f6f:	51                   	push   ecx
c0015f70:	e8 03 61 ff ff       	call   c000c078 <LogicalDisk::write(unsigned long long, int, void*)>
c0015f75:	83 c4 20             	add    esp,0x20
c0015f78:	83 c4 18             	add    esp,0x18
c0015f7b:	5b                   	pop    ebx
c0015f7c:	c3                   	ret    
c0015f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0015f80 <fatWrapperIoctl>:
c0015f80:	53                   	push   ebx
c0015f81:	83 ec 28             	sub    esp,0x28
c0015f84:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015f88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f8c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0015f90:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0015f94:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0015f99:	75 35                	jne    c0015fd0 <fatWrapperIoctl+0x50>
c0015f9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015f9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015fa3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fa7:	25 ff 00 00 00       	and    eax,0xff
c0015fac:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0015fb3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fb9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015fbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015fc3:	66 89 02             	mov    WORD PTR [edx],ax
c0015fc6:	b8 00 00 00 00       	mov    eax,0x0
c0015fcb:	e9 c4 00 00 00       	jmp    c0016094 <fatWrapperIoctl+0x114>
c0015fd0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0015fd5:	75 75                	jne    c001604c <fatWrapperIoctl+0xcc>
c0015fd7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015fdf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fe3:	25 ff 00 00 00       	and    eax,0xff
c0015fe8:	8b 04 85 a0 19 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde660]
c0015fef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015ff5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015ffb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016001:	89 c8                	mov    eax,ecx
c0016003:	89 da                	mov    edx,ebx
c0016005:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016009:	c1 e0 0a             	shl    eax,0xa
c001600c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016010:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016016:	8b 0c 8d a0 19 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde660]
c001601d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016023:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016029:	89 cb                	mov    ebx,ecx
c001602b:	c1 fb 1f             	sar    ebx,0x1f
c001602e:	53                   	push   ebx
c001602f:	51                   	push   ecx
c0016030:	52                   	push   edx
c0016031:	50                   	push   eax
c0016032:	e8 29 56 00 00       	call   c001b660 <__udivdi3>
c0016037:	83 c4 10             	add    esp,0x10
c001603a:	89 c2                	mov    edx,eax
c001603c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016040:	89 10                	mov    DWORD PTR [eax],edx
c0016042:	b8 00 00 00 00       	mov    eax,0x0
c0016047:	eb 4b                	jmp    c0016094 <fatWrapperIoctl+0x114>
c0016049:	8d 76 00             	lea    esi,[esi+0x0]
c001604c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016051:	75 09                	jne    c001605c <fatWrapperIoctl+0xdc>
c0016053:	b8 00 00 00 00       	mov    eax,0x0
c0016058:	eb 3a                	jmp    c0016094 <fatWrapperIoctl+0x114>
c001605a:	66 90                	xchg   ax,ax
c001605c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016061:	75 19                	jne    c001607c <fatWrapperIoctl+0xfc>
c0016063:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016067:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001606b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001606f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016075:	b8 00 00 00 00       	mov    eax,0x0
c001607a:	eb 18                	jmp    c0016094 <fatWrapperIoctl+0x114>
c001607c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016081:	75 09                	jne    c001608c <fatWrapperIoctl+0x10c>
c0016083:	b8 00 00 00 00       	mov    eax,0x0
c0016088:	eb 0a                	jmp    c0016094 <fatWrapperIoctl+0x114>
c001608a:	66 90                	xchg   ax,ax
c001608c:	b8 04 00 00 00       	mov    eax,0x4
c0016091:	8d 76 00             	lea    esi,[esi+0x0]
c0016094:	83 c4 28             	add    esp,0x28
c0016097:	5b                   	pop    ebx
c0016098:	c3                   	ret    
c0016099:	90                   	nop
c001609a:	66 90                	xchg   ax,ax

c001609c <FAT::FAT()>:
c001609c:	83 ec 1c             	sub    esp,0x1c
c001609f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160a3:	83 ec 0c             	sub    esp,0xc
c00160a6:	50                   	push   eax
c00160a7:	e8 9a 3b ff ff       	call   c0009c46 <Filesystem::Filesystem()>
c00160ac:	83 c4 10             	add    esp,0x10
c00160af:	ba c4 e4 01 c0       	mov    edx,0xc001e4c4
c00160b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b8:	89 10                	mov    DWORD PTR [eax],edx
c00160ba:	c7 05 c0 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00229c0,0x0
c00160c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00160cc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00160d1:	7f 15                	jg     c00160e8 <FAT::FAT()+0x4c>
c00160d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160d7:	c7 04 85 e0 29 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdd620],0xffffffff
c00160e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00160e6:	eb e4                	jmp    c00160cc <FAT::FAT()+0x30>
c00160e8:	90                   	nop
c00160e9:	83 c4 1c             	add    esp,0x1c
c00160ec:	c3                   	ret    
c00160ed:	90                   	nop
c00160ee:	66 90                	xchg   ax,ax

c00160f0 <FAT::fixFilepath(char*)>:
c00160f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160f4:	8a 00                	mov    al,BYTE PTR [eax]
c00160f6:	3c 40                	cmp    al,0x40
c00160f8:	7e 2e                	jle    c0016128 <FAT::fixFilepath(char*)+0x38>
c00160fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160fe:	8a 00                	mov    al,BYTE PTR [eax]
c0016100:	83 e8 41             	sub    eax,0x41
c0016103:	88 c2                	mov    dl,al
c0016105:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016109:	88 10                	mov    BYTE PTR [eax],dl
c001610b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001610f:	8a 00                	mov    al,BYTE PTR [eax]
c0016111:	0f be c0             	movsx  eax,al
c0016114:	8b 04 85 e0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd620]
c001611b:	83 c0 30             	add    eax,0x30
c001611e:	88 c2                	mov    dl,al
c0016120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016124:	88 10                	mov    BYTE PTR [eax],dl
c0016126:	66 90                	xchg   ax,ax
c0016128:	90                   	nop
c0016129:	c3                   	ret    
c001612a:	66 90                	xchg   ax,ax

c001612c <FAT::open(char const*, void**, FileOpenMode)>:
c001612c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016132:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001613a:	74 0c                	je     c0016148 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001613c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016144:	75 0e                	jne    c0016154 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016146:	66 90                	xchg   ax,ax
c0016148:	b8 04 00 00 00       	mov    eax,0x4
c001614d:	e9 0a 01 00 00       	jmp    c001625c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016152:	66 90                	xchg   ax,ax
c0016154:	83 ec 08             	sub    esp,0x8
c0016157:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001615e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016162:	50                   	push   eax
c0016163:	e8 b8 a4 fe ff       	call   c0000620 <strcpy>
c0016168:	83 c4 10             	add    esp,0x10
c001616b:	83 ec 08             	sub    esp,0x8
c001616e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016172:	50                   	push   eax
c0016173:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001617a:	e8 71 ff ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c001617f:	83 c4 10             	add    esp,0x10
c0016182:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001618a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016191:	83 e0 01             	and    eax,0x1
c0016194:	74 0a                	je     c00161a0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016196:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001619e:	66 90                	xchg   ax,ax
c00161a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00161a7:	83 e0 04             	and    eax,0x4
c00161aa:	74 10                	je     c00161bc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00161ac:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00161b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00161bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00161c3:	83 e0 02             	and    eax,0x2
c00161c6:	74 08                	je     c00161d0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00161c8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00161d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00161d7:	83 e0 08             	and    eax,0x8
c00161da:	74 08                	je     c00161e4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00161dc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00161e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00161eb:	83 e0 10             	and    eax,0x10
c00161ee:	74 08                	je     c00161f8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00161f0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	68 28 02 00 00       	push   0x228
c0016200:	e8 5c 09 ff ff       	call   c0006b61 <malloc>
c0016205:	83 c4 10             	add    esp,0x10
c0016208:	89 c2                	mov    edx,eax
c001620a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016211:	89 10                	mov    DWORD PTR [eax],edx
c0016213:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001621a:	31 d2                	xor    edx,edx
c001621c:	88 c2                	mov    dl,al
c001621e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016225:	8b 00                	mov    eax,DWORD PTR [eax]
c0016227:	83 ec 04             	sub    esp,0x4
c001622a:	52                   	push   edx
c001622b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001622f:	52                   	push   edx
c0016230:	50                   	push   eax
c0016231:	e8 14 d7 fe ff       	call   c000394a <f_open>
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016240:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016248:	74 0a                	je     c0016254 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001624a:	b8 01 00 00 00       	mov    eax,0x1
c001624f:	eb 0b                	jmp    c001625c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016251:	8d 76 00             	lea    esi,[esi+0x0]
c0016254:	b8 00 00 00 00       	mov    eax,0x0
c0016259:	8d 76 00             	lea    esi,[esi+0x0]
c001625c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016262:	c3                   	ret    
c0016263:	90                   	nop

c0016264 <FAT::openDir(char const*, void**)>:
c0016264:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001626a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016272:	74 0c                	je     c0016280 <FAT::openDir(char const*, void**)+0x1c>
c0016274:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001627c:	75 0e                	jne    c001628c <FAT::openDir(char const*, void**)+0x28>
c001627e:	66 90                	xchg   ax,ax
c0016280:	b8 04 00 00 00       	mov    eax,0x4
c0016285:	e9 82 00 00 00       	jmp    c001630c <FAT::openDir(char const*, void**)+0xa8>
c001628a:	66 90                	xchg   ax,ax
c001628c:	83 ec 08             	sub    esp,0x8
c001628f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016296:	8d 44 24 18          	lea    eax,[esp+0x18]
c001629a:	50                   	push   eax
c001629b:	e8 80 a3 fe ff       	call   c0000620 <strcpy>
c00162a0:	83 c4 10             	add    esp,0x10
c00162a3:	83 ec 08             	sub    esp,0x8
c00162a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00162aa:	50                   	push   eax
c00162ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00162b2:	e8 39 fe ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	83 ec 0c             	sub    esp,0xc
c00162bd:	6a 30                	push   0x30
c00162bf:	e8 9d 08 ff ff       	call   c0006b61 <malloc>
c00162c4:	83 c4 10             	add    esp,0x10
c00162c7:	89 c2                	mov    edx,eax
c00162c9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00162d0:	89 10                	mov    DWORD PTR [eax],edx
c00162d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00162d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00162db:	83 ec 08             	sub    esp,0x8
c00162de:	8d 54 24 14          	lea    edx,[esp+0x14]
c00162e2:	52                   	push   edx
c00162e3:	50                   	push   eax
c00162e4:	e8 ea df fe ff       	call   c00042d3 <f_opendir>
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00162f3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00162fb:	74 07                	je     c0016304 <FAT::openDir(char const*, void**)+0xa0>
c00162fd:	b8 01 00 00 00       	mov    eax,0x1
c0016302:	eb 08                	jmp    c001630c <FAT::openDir(char const*, void**)+0xa8>
c0016304:	b8 00 00 00 00       	mov    eax,0x0
c0016309:	8d 76 00             	lea    esi,[esi+0x0]
c001630c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016312:	c3                   	ret    
c0016313:	90                   	nop

c0016314 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016314:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001631a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016322:	75 0c                	jne    c0016330 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016324:	b8 04 00 00 00       	mov    eax,0x4
c0016329:	e9 d6 00 00 00       	jmp    c0016404 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001632e:	66 90                	xchg   ax,ax
c0016330:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016338:	75 0a                	jne    c0016344 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001633a:	b8 04 00 00 00       	mov    eax,0x4
c001633f:	e9 c0 00 00 00       	jmp    c0016404 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016344:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001634c:	75 0a                	jne    c0016358 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001634e:	b8 04 00 00 00       	mov    eax,0x4
c0016353:	e9 ac 00 00 00       	jmp    c0016404 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016358:	83 ec 08             	sub    esp,0x8
c001635b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016362:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016369:	50                   	push   eax
c001636a:	e8 b1 a2 fe ff       	call   c0000620 <strcpy>
c001636f:	83 c4 10             	add    esp,0x10
c0016372:	83 ec 08             	sub    esp,0x8
c0016375:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001637c:	50                   	push   eax
c001637d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016384:	e8 67 fd ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	83 ec 08             	sub    esp,0x8
c001638f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016393:	50                   	push   eax
c0016394:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001639b:	50                   	push   eax
c001639c:	e8 b1 e0 fe ff       	call   c0004452 <f_stat>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00163ab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00163b2:	85 c0                	test   eax,eax
c00163b4:	74 0a                	je     c00163c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00163b6:	83 f8 04             	cmp    eax,0x4
c00163b9:	74 39                	je     c00163f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00163bb:	eb 3f                	jmp    c00163fc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00163bd:	8d 76 00             	lea    esi,[esi+0x0]
c00163c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00163c4:	25 ff 00 00 00       	and    eax,0xff
c00163c9:	83 e0 10             	and    eax,0x10
c00163cc:	0f 95 c2             	setne  dl
c00163cf:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00163d6:	88 10                	mov    BYTE PTR [eax],dl
c00163d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163dc:	ba 00 00 00 00       	mov    edx,0x0
c00163e1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00163e8:	89 01                	mov    DWORD PTR [ecx],eax
c00163ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00163ed:	b8 00 00 00 00       	mov    eax,0x0
c00163f2:	eb 10                	jmp    c0016404 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00163f4:	b8 02 00 00 00       	mov    eax,0x2
c00163f9:	eb 09                	jmp    c0016404 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00163fb:	90                   	nop
c00163fc:	b8 01 00 00 00       	mov    eax,0x1
c0016401:	8d 76 00             	lea    esi,[esi+0x0]
c0016404:	81 c4 2c 02 00 00    	add    esp,0x22c
c001640a:	c3                   	ret    
c001640b:	90                   	nop

c001640c <FAT::unlink(char const*)>:
c001640c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016412:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001641a:	75 08                	jne    c0016424 <FAT::unlink(char const*)+0x18>
c001641c:	b8 04 00 00 00       	mov    eax,0x4
c0016421:	eb 61                	jmp    c0016484 <FAT::unlink(char const*)+0x78>
c0016423:	90                   	nop
c0016424:	83 ec 08             	sub    esp,0x8
c0016427:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001642e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016432:	50                   	push   eax
c0016433:	e8 e8 a1 fe ff       	call   c0000620 <strcpy>
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	83 ec 08             	sub    esp,0x8
c001643e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016442:	50                   	push   eax
c0016443:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001644a:	e8 a1 fc ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016459:	50                   	push   eax
c001645a:	e8 58 e2 fe ff       	call   c00046b7 <f_unlink>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016469:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016470:	85 c0                	test   eax,eax
c0016472:	75 08                	jne    c001647c <FAT::unlink(char const*)+0x70>
c0016474:	b8 00 00 00 00       	mov    eax,0x0
c0016479:	eb 09                	jmp    c0016484 <FAT::unlink(char const*)+0x78>
c001647b:	90                   	nop
c001647c:	b8 01 00 00 00       	mov    eax,0x1
c0016481:	8d 76 00             	lea    esi,[esi+0x0]
c0016484:	81 c4 1c 01 00 00    	add    esp,0x11c
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001648c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0016492:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016499:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00164a0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00164a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00164a8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00164b0:	75 0a                	jne    c00164bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00164b2:	b8 04 00 00 00       	mov    eax,0x4
c00164b7:	e9 54 01 00 00       	jmp    c0016610 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00164bc:	83 ec 08             	sub    esp,0x8
c00164bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164c6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00164ca:	50                   	push   eax
c00164cb:	e8 50 a1 fe ff       	call   c0000620 <strcpy>
c00164d0:	83 c4 10             	add    esp,0x10
c00164d3:	83 ec 08             	sub    esp,0x8
c00164d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00164da:	50                   	push   eax
c00164db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164e2:	e8 09 fc ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00164f2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00164fa:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00164fe:	25 ff 00 00 00       	and    eax,0xff
c0016503:	83 e0 01             	and    eax,0x1
c0016506:	74 08                	je     c0016510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0016508:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0016510:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016514:	25 ff 00 00 00       	and    eax,0xff
c0016519:	83 e0 02             	and    eax,0x2
c001651c:	74 0a                	je     c0016528 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001651e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0016526:	66 90                	xchg   ax,ax
c0016528:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001652c:	25 ff 00 00 00       	and    eax,0xff
c0016531:	83 e0 04             	and    eax,0x4
c0016534:	74 0a                	je     c0016540 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0016536:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001653e:	66 90                	xchg   ax,ax
c0016540:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016544:	25 ff 00 00 00       	and    eax,0xff
c0016549:	83 e0 08             	and    eax,0x8
c001654c:	74 0a                	je     c0016558 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001654e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0016556:	66 90                	xchg   ax,ax
c0016558:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001655c:	25 ff 00 00 00       	and    eax,0xff
c0016561:	83 e0 01             	and    eax,0x1
c0016564:	74 0a                	je     c0016570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0016566:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001656e:	66 90                	xchg   ax,ax
c0016570:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016574:	25 ff 00 00 00       	and    eax,0xff
c0016579:	83 e0 02             	and    eax,0x2
c001657c:	74 0a                	je     c0016588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001657e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0016586:	66 90                	xchg   ax,ax
c0016588:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001658c:	25 ff 00 00 00       	and    eax,0xff
c0016591:	83 e0 04             	and    eax,0x4
c0016594:	74 0a                	je     c00165a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0016596:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001659e:	66 90                	xchg   ax,ax
c00165a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165a4:	25 ff 00 00 00       	and    eax,0xff
c00165a9:	83 e0 08             	and    eax,0x8
c00165ac:	74 0a                	je     c00165b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00165ae:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00165b6:	66 90                	xchg   ax,ax
c00165b8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00165bf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00165c6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00165cd:	31 d2                	xor    edx,edx
c00165cf:	88 c2                	mov    dl,al
c00165d1:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00165d8:	25 ff 00 00 00       	and    eax,0xff
c00165dd:	83 ec 04             	sub    esp,0x4
c00165e0:	52                   	push   edx
c00165e1:	50                   	push   eax
c00165e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00165e6:	50                   	push   eax
c00165e7:	e8 3e e5 fe ff       	call   c0004b2a <f_chmod>
c00165ec:	83 c4 10             	add    esp,0x10
c00165ef:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00165f6:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00165fd:	85 c0                	test   eax,eax
c00165ff:	75 07                	jne    c0016608 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0016601:	b8 00 00 00 00       	mov    eax,0x0
c0016606:	eb 08                	jmp    c0016610 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0016608:	b8 01 00 00 00       	mov    eax,0x1
c001660d:	8d 76 00             	lea    esi,[esi+0x0]
c0016610:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016616:	c3                   	ret    
c0016617:	90                   	nop

c0016618 <FAT::rename(char const*, char const*)>:
c0016618:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001661e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0016626:	74 0c                	je     c0016634 <FAT::rename(char const*, char const*)+0x1c>
c0016628:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0016630:	75 0e                	jne    c0016640 <FAT::rename(char const*, char const*)+0x28>
c0016632:	66 90                	xchg   ax,ax
c0016634:	b8 04 00 00 00       	mov    eax,0x4
c0016639:	e9 9e 00 00 00       	jmp    c00166dc <FAT::rename(char const*, char const*)+0xc4>
c001663e:	66 90                	xchg   ax,ax
c0016640:	83 ec 08             	sub    esp,0x8
c0016643:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001664a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0016651:	50                   	push   eax
c0016652:	e8 c9 9f fe ff       	call   c0000620 <strcpy>
c0016657:	83 c4 10             	add    esp,0x10
c001665a:	83 ec 08             	sub    esp,0x8
c001665d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0016664:	50                   	push   eax
c0016665:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001666c:	e8 7f fa ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c0016671:	83 c4 10             	add    esp,0x10
c0016674:	83 ec 08             	sub    esp,0x8
c0016677:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001667e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016682:	50                   	push   eax
c0016683:	e8 98 9f fe ff       	call   c0000620 <strcpy>
c0016688:	83 c4 10             	add    esp,0x10
c001668b:	83 ec 08             	sub    esp,0x8
c001668e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016692:	50                   	push   eax
c0016693:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001669a:	e8 51 fa ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c001669f:	83 c4 10             	add    esp,0x10
c00166a2:	83 ec 08             	sub    esp,0x8
c00166a5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00166a9:	50                   	push   eax
c00166aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00166b1:	50                   	push   eax
c00166b2:	e8 bd e2 fe ff       	call   c0004974 <f_rename>
c00166b7:	83 c4 10             	add    esp,0x10
c00166ba:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00166c1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00166c8:	85 c0                	test   eax,eax
c00166ca:	75 08                	jne    c00166d4 <FAT::rename(char const*, char const*)+0xbc>
c00166cc:	b8 00 00 00 00       	mov    eax,0x0
c00166d1:	eb 09                	jmp    c00166dc <FAT::rename(char const*, char const*)+0xc4>
c00166d3:	90                   	nop
c00166d4:	b8 01 00 00 00       	mov    eax,0x1
c00166d9:	8d 76 00             	lea    esi,[esi+0x0]
c00166dc:	81 c4 1c 02 00 00    	add    esp,0x21c
c00166e2:	c3                   	ret    
c00166e3:	90                   	nop

c00166e4 <FAT::mkdir(char const*)>:
c00166e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00166ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00166f2:	75 08                	jne    c00166fc <FAT::mkdir(char const*)+0x18>
c00166f4:	b8 04 00 00 00       	mov    eax,0x4
c00166f9:	eb 61                	jmp    c001675c <FAT::mkdir(char const*)+0x78>
c00166fb:	90                   	nop
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016706:	8d 44 24 18          	lea    eax,[esp+0x18]
c001670a:	50                   	push   eax
c001670b:	e8 10 9f fe ff       	call   c0000620 <strcpy>
c0016710:	83 c4 10             	add    esp,0x10
c0016713:	83 ec 08             	sub    esp,0x8
c0016716:	8d 44 24 14          	lea    eax,[esp+0x14]
c001671a:	50                   	push   eax
c001671b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016722:	e8 c9 f9 ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c0016727:	83 c4 10             	add    esp,0x10
c001672a:	83 ec 0c             	sub    esp,0xc
c001672d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016731:	50                   	push   eax
c0016732:	e8 a2 e0 fe ff       	call   c00047d9 <f_mkdir>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016741:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016748:	85 c0                	test   eax,eax
c001674a:	75 08                	jne    c0016754 <FAT::mkdir(char const*)+0x70>
c001674c:	b8 00 00 00 00       	mov    eax,0x0
c0016751:	eb 09                	jmp    c001675c <FAT::mkdir(char const*)+0x78>
c0016753:	90                   	nop
c0016754:	b8 01 00 00 00       	mov    eax,0x1
c0016759:	8d 76 00             	lea    esi,[esi+0x0]
c001675c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016762:	c3                   	ret    
c0016763:	90                   	nop

c0016764 <FAT::exists(char const*)>:
c0016764:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001676a:	83 ec 08             	sub    esp,0x8
c001676d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016774:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016778:	50                   	push   eax
c0016779:	e8 a2 9e fe ff       	call   c0000620 <strcpy>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	83 ec 08             	sub    esp,0x8
c0016784:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016788:	50                   	push   eax
c0016789:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016790:	e8 5b f9 ff ff       	call   c00160f0 <FAT::fixFilepath(char*)>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	83 ec 08             	sub    esp,0x8
c001679b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00167a2:	50                   	push   eax
c00167a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00167a7:	50                   	push   eax
c00167a8:	e8 a5 dc fe ff       	call   c0004452 <f_stat>
c00167ad:	83 c4 10             	add    esp,0x10
c00167b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00167b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00167be:	85 c0                	test   eax,eax
c00167c0:	75 06                	jne    c00167c8 <FAT::exists(char const*)+0x64>
c00167c2:	b0 01                	mov    al,0x1
c00167c4:	eb 06                	jmp    c00167cc <FAT::exists(char const*)+0x68>
c00167c6:	66 90                	xchg   ax,ax
c00167c8:	b0 00                	mov    al,0x0
c00167ca:	66 90                	xchg   ax,ax
c00167cc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00167d2:	c3                   	ret    
c00167d3:	90                   	nop

c00167d4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00167d4:	b8 08 00 00 00       	mov    eax,0x8
c00167d9:	c3                   	ret    

c00167da <ISO9660::seek(void*, unsigned long long)>:
c00167da:	53                   	push   ebx
c00167db:	b8 04 00 00 00       	mov    eax,0x4
c00167e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167ec:	85 d2                	test   edx,edx
c00167ee:	74 17                	je     c0016807 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00167f0:	89 c8                	mov    eax,ecx
c00167f2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00167f5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00167f8:	b8 01 00 00 00       	mov    eax,0x1
c00167fd:	73 08                	jae    c0016807 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00167ff:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0016802:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0016805:	31 c0                	xor    eax,eax
c0016807:	5b                   	pop    ebx
c0016808:	c3                   	ret    
c0016809:	90                   	nop

c001680a <ISO9660::tell(void*, unsigned long long*)>:
c001680a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001680e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016812:	85 d2                	test   edx,edx
c0016814:	74 12                	je     c0016828 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0016816:	85 c0                	test   eax,eax
c0016818:	74 0e                	je     c0016828 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001681a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001681d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0016820:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0016823:	89 10                	mov    DWORD PTR [eax],edx
c0016825:	31 c0                	xor    eax,eax
c0016827:	c3                   	ret    
c0016828:	b8 04 00 00 00       	mov    eax,0x4
c001682d:	c3                   	ret    

c001682e <ISO9660::getName()>:
c001682e:	b8 24 e5 01 c0       	mov    eax,0xc001e524
c0016833:	c3                   	ret    

c0016834 <ISO9660::stat(void*, unsigned long long*)>:
c0016834:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016838:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001683c:	85 d2                	test   edx,edx
c001683e:	74 12                	je     c0016852 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0016840:	85 c0                	test   eax,eax
c0016842:	74 0e                	je     c0016852 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0016844:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016847:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001684a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001684d:	89 10                	mov    DWORD PTR [eax],edx
c001684f:	31 c0                	xor    eax,eax
c0016851:	c3                   	ret    
c0016852:	b8 04 00 00 00       	mov    eax,0x4
c0016857:	c3                   	ret    

c0016858 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0016858:	b8 01 00 00 00       	mov    eax,0x1
c001685d:	c3                   	ret    

c001685e <ISO9660::unlink(char const*)>:
c001685e:	b8 01 00 00 00       	mov    eax,0x1
c0016863:	c3                   	ret    

c0016864 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0016864:	b8 01 00 00 00       	mov    eax,0x1
c0016869:	c3                   	ret    

c001686a <ISO9660::rename(char const*, char const*)>:
c001686a:	b8 01 00 00 00       	mov    eax,0x1
c001686f:	c3                   	ret    

c0016870 <ISO9660::mkdir(char const*)>:
c0016870:	b8 01 00 00 00       	mov    eax,0x1
c0016875:	c3                   	ret    

c0016876 <ISO9660::close(void*)>:
c0016876:	83 ec 0c             	sub    esp,0xc
c0016879:	b8 04 00 00 00       	mov    eax,0x4
c001687e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016882:	85 d2                	test   edx,edx
c0016884:	74 0e                	je     c0016894 <ISO9660::close(void*)+0x1e>
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	52                   	push   edx
c001688a:	e8 e2 02 ff ff       	call   c0006b71 <free>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	31 c0                	xor    eax,eax
c0016894:	83 c4 0c             	add    esp,0xc
c0016897:	c3                   	ret    

c0016898 <ISO9660::closeDir(void*)>:
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	b8 04 00 00 00       	mov    eax,0x4
c00168a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00168a4:	85 d2                	test   edx,edx
c00168a6:	74 0e                	je     c00168b6 <ISO9660::closeDir(void*)+0x1e>
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	52                   	push   edx
c00168ac:	e8 c0 02 ff ff       	call   c0006b71 <free>
c00168b1:	83 c4 10             	add    esp,0x10
c00168b4:	31 c0                	xor    eax,eax
c00168b6:	83 c4 0c             	add    esp,0xc
c00168b9:	c3                   	ret    

c00168ba <ISO9660::~ISO9660()>:
c00168ba:	83 ec 0c             	sub    esp,0xc
c00168bd:	ba 48 e5 01 c0       	mov    edx,0xc001e548
c00168c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c6:	89 10                	mov    DWORD PTR [eax],edx
c00168c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	50                   	push   eax
c00168d0:	e8 95 33 ff ff       	call   c0009c6a <Filesystem::~Filesystem()>
c00168d5:	83 c4 10             	add    esp,0x10
c00168d8:	90                   	nop
c00168d9:	83 c4 0c             	add    esp,0xc
c00168dc:	c3                   	ret    
c00168dd:	90                   	nop

c00168de <ISO9660::~ISO9660()>:
c00168de:	83 ec 0c             	sub    esp,0xc
c00168e1:	83 ec 0c             	sub    esp,0xc
c00168e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e8:	e8 cd ff ff ff       	call   c00168ba <ISO9660::~ISO9660()>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	83 ec 08             	sub    esp,0x8
c00168f3:	6a 08                	push   0x8
c00168f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f9:	e8 30 2f ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	83 c4 0c             	add    esp,0xc
c0016904:	c3                   	ret    

c0016905 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0016905:	55                   	push   ebp
c0016906:	31 c9                	xor    ecx,ecx
c0016908:	57                   	push   edi
c0016909:	56                   	push   esi
c001690a:	53                   	push   ebx
c001690b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001690f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016913:	89 eb                	mov    ebx,ebp
c0016915:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0016919:	39 ce                	cmp    esi,ecx
c001691b:	7e 17                	jle    c0016934 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001691d:	31 d2                	xor    edx,edx
c001691f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0016923:	7d 13                	jge    c0016938 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0016925:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016929:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001692c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001692f:	75 0d                	jne    c001693e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0016931:	42                   	inc    edx
c0016932:	eb eb                	jmp    c001691f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0016934:	31 c0                	xor    eax,eax
c0016936:	eb 0a                	jmp    c0016942 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0016938:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001693c:	eb 04                	jmp    c0016942 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001693e:	41                   	inc    ecx
c001693f:	43                   	inc    ebx
c0016940:	eb d7                	jmp    c0016919 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0016942:	5b                   	pop    ebx
c0016943:	5e                   	pop    esi
c0016944:	5f                   	pop    edi
c0016945:	5d                   	pop    ebp
c0016946:	c3                   	ret    

c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0016947:	57                   	push   edi
c0016948:	56                   	push   esi
c0016949:	53                   	push   ebx
c001694a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001694e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016952:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016956:	39 35 c0 2a 02 c0    	cmp    DWORD PTR ds:0xc0022ac0,esi
c001695c:	75 08                	jne    c0016966 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001695e:	38 1d 54 ee 01 c0    	cmp    BYTE PTR ds:0xc001ee54,bl
c0016964:	74 4a                	je     c00169b0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016966:	83 ec 0c             	sub    esp,0xc
c0016969:	31 d2                	xor    edx,edx
c001696b:	68 e0 2a 02 c0       	push   0xc0022ae0
c0016970:	0f be c3             	movsx  eax,bl
c0016973:	6a 01                	push   0x1
c0016975:	52                   	push   edx
c0016976:	56                   	push   esi
c0016977:	ff 34 85 9c 18 02 c0 	push   DWORD PTR [eax*4-0x3ffde764]
c001697e:	e8 89 56 ff ff       	call   c000c00c <LogicalDisk::read(unsigned long long, int, void*)>
c0016983:	83 c4 20             	add    esp,0x20
c0016986:	85 c0                	test   eax,eax
c0016988:	75 0e                	jne    c0016998 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001698a:	89 35 c0 2a 02 c0    	mov    DWORD PTR ds:0xc0022ac0,esi
c0016990:	88 1d 54 ee 01 c0    	mov    BYTE PTR ds:0xc001ee54,bl
c0016996:	eb 18                	jmp    c00169b0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0016998:	50                   	push   eax
c0016999:	68 00 08 00 00       	push   0x800
c001699e:	6a 00                	push   0x0
c00169a0:	57                   	push   edi
c00169a1:	e8 4a 9b fe ff       	call   c00004f0 <memset>
c00169a6:	83 c4 10             	add    esp,0x10
c00169a9:	b8 01 00 00 00       	mov    eax,0x1
c00169ae:	eb 0e                	jmp    c00169be <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c00169b0:	be e0 2a 02 c0       	mov    esi,0xc0022ae0
c00169b5:	b9 00 08 00 00       	mov    ecx,0x800
c00169ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169bc:	31 c0                	xor    eax,eax
c00169be:	5b                   	pop    ebx
c00169bf:	5e                   	pop    esi
c00169c0:	5f                   	pop    edi
c00169c1:	c3                   	ret    

c00169c2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00169c2:	81 ec 10 08 00 00    	sub    esp,0x810
c00169c8:	c7 05 c0 2a 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0022ac0,0xdeadbeef
c00169d2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00169d9:	83 c0 41             	add    eax,0x41
c00169dc:	0f be c0             	movsx  eax,al
c00169df:	50                   	push   eax
c00169e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00169e4:	50                   	push   eax
c00169e5:	6a 10                	push   0x10
c00169e7:	e8 5b ff ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	31 d2                	xor    edx,edx
c00169f1:	85 c0                	test   eax,eax
c00169f3:	75 24                	jne    c0016a19 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00169f5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00169fa:	75 1d                	jne    c0016a19 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c00169fc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0016a01:	75 16                	jne    c0016a19 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016a03:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0016a08:	75 0f                	jne    c0016a19 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016a0a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0016a0f:	75 08                	jne    c0016a19 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c0016a11:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0016a16:	0f 94 c2             	sete   dl
c0016a19:	88 d0                	mov    al,dl
c0016a1b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0016a21:	c3                   	ret    

c0016a22 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0016a22:	55                   	push   ebp
c0016a23:	57                   	push   edi
c0016a24:	56                   	push   esi
c0016a25:	53                   	push   ebx
c0016a26:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0016a2c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0016a33:	85 ed                	test   ebp,ebp
c0016a35:	0f 84 da 01 00 00    	je     c0016c15 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016a3b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0016a43:	0f 84 cc 01 00 00    	je     c0016c15 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0016a49:	b8 01 00 00 00       	mov    eax,0x1
c0016a4e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0016a52:	0f 85 c2 01 00 00    	jne    c0016c1a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016a58:	31 d2                	xor    edx,edx
c0016a5a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0016a61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016a64:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016a67:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016a6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a71:	01 c8                	add    eax,ecx
c0016a73:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016a76:	11 da                	adc    edx,ebx
c0016a78:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0016a7c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016a80:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016a84:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016a88:	19 d7                	sbb    edi,edx
c0016a8a:	72 11                	jb     c0016a9d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0016a8c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016a8f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016a93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a9b:	eb 0c                	jmp    c0016aa9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0016a9d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0016aa1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016aa5:	29 ce                	sub    esi,ecx
c0016aa7:	19 df                	sbb    edi,ebx
c0016aa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016aac:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0016aaf:	0f a4 c2 0b          	shld   edx,eax,0xb
c0016ab3:	c1 e0 0b             	shl    eax,0xb
c0016ab6:	01 c8                	add    eax,ecx
c0016ab8:	11 da                	adc    edx,ebx
c0016aba:	89 04 24             	mov    DWORD PTR [esp],eax
c0016abd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ac1:	51                   	push   ecx
c0016ac2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016ac6:	50                   	push   eax
c0016ac7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0016acb:	53                   	push   ebx
c0016acc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ad4:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016ad8:	50                   	push   eax
c0016ad9:	e8 69 fe ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016ade:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0016ae1:	b8 00 08 00 00       	mov    eax,0x800
c0016ae6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0016aec:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0016af0:	29 d0                	sub    eax,edx
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	89 f9                	mov    ecx,edi
c0016af7:	39 c6                	cmp    esi,eax
c0016af9:	83 d9 00             	sbb    ecx,0x0
c0016afc:	7d 1b                	jge    c0016b19 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0016afe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016b03:	75 12                	jne    c0016b17 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0016b05:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016b0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016b12:	e9 fa 00 00 00       	jmp    c0016c11 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0016b17:	89 f0                	mov    eax,esi
c0016b19:	01 d3                	add    ebx,edx
c0016b1b:	31 d2                	xor    edx,edx
c0016b1d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016b21:	39 c2                	cmp    edx,eax
c0016b23:	7d 14                	jge    c0016b39 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0016b25:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0016b2c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016b30:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0016b33:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0016b36:	42                   	inc    edx
c0016b37:	eb e8                	jmp    c0016b21 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0016b39:	89 c2                	mov    edx,eax
c0016b3b:	85 c0                	test   eax,eax
c0016b3d:	79 02                	jns    c0016b41 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0016b3f:	31 d2                	xor    edx,edx
c0016b41:	01 c2                	add    edx,eax
c0016b43:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016b46:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0016b4d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0016b51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016b55:	99                   	cdq    
c0016b56:	01 c1                	add    ecx,eax
c0016b58:	11 d3                	adc    ebx,edx
c0016b5a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0016b5e:	29 c6                	sub    esi,eax
c0016b60:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0016b64:	19 d7                	sbb    edi,edx
c0016b66:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0016b6d:	b8 ff 07 00 00       	mov    eax,0x7ff
c0016b72:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0016b75:	b8 00 00 00 00       	mov    eax,0x0
c0016b7a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0016b7e:	7d 43                	jge    c0016bc3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0016b80:	52                   	push   edx
c0016b81:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016b85:	50                   	push   eax
c0016b86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b8e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b92:	0f ac d0 0b          	shrd   eax,edx,0xb
c0016b96:	50                   	push   eax
c0016b97:	e8 ab fd ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016b9c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0016ba4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0016ba9:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0016bb1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0016bb9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0016bbe:	83 c4 10             	add    esp,0x10
c0016bc1:	eb aa                	jmp    c0016b6d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0016bc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bc7:	0b 04 24             	or     eax,DWORD PTR [esp]
c0016bca:	74 2a                	je     c0016bf6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0016bcc:	50                   	push   eax
c0016bcd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016bd1:	50                   	push   eax
c0016bd2:	8d 74 24 28          	lea    esi,[esp+0x28]
c0016bd6:	56                   	push   esi
c0016bd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016bdb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016bdf:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0016be3:	51                   	push   ecx
c0016be4:	e8 5e fd ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016be9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016bed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016bfd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c05:	89 18                	mov    DWORD PTR [eax],ebx
c0016c07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c0b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016c0e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016c11:	31 c0                	xor    eax,eax
c0016c13:	eb 05                	jmp    c0016c1a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0016c15:	b8 04 00 00 00       	mov    eax,0x4
c0016c1a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0016c20:	5b                   	pop    ebx
c0016c21:	5e                   	pop    esi
c0016c22:	5f                   	pop    edi
c0016c23:	5d                   	pop    ebp
c0016c24:	c3                   	ret    
c0016c25:	90                   	nop

c0016c26 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0016c26:	55                   	push   ebp
c0016c27:	57                   	push   edi
c0016c28:	56                   	push   esi
c0016c29:	53                   	push   ebx
c0016c2a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0016c30:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0016c37:	85 ed                	test   ebp,ebp
c0016c39:	0f 84 4f 02 00 00    	je     c0016e8e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016c3f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0016c47:	0f 84 41 02 00 00    	je     c0016e8e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x268>
c0016c4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016c50:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0016c53:	75 0a                	jne    c0016c5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0016c55:	b8 07 00 00 00       	mov    eax,0x7
c0016c5a:	e9 34 02 00 00       	jmp    c0016e93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016c5f:	50                   	push   eax
c0016c60:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016c64:	50                   	push   eax
c0016c65:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016c6c:	53                   	push   ebx
c0016c6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016c70:	c1 e0 0b             	shl    eax,0xb
c0016c73:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0016c76:	c1 e8 0b             	shr    eax,0xb
c0016c79:	50                   	push   eax
c0016c7a:	e8 c8 fc ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016c7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	89 c1                	mov    ecx,eax
c0016c87:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016c8a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0016c90:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0016c93:	84 db                	test   bl,bl
c0016c95:	0f 85 8b 00 00 00    	jne    c0016d26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0016c9b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0016ca1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016ca4:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0016caa:	29 c6                	sub    esi,eax
c0016cac:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016cb0:	89 f3                	mov    ebx,esi
c0016cb2:	89 f1                	mov    ecx,esi
c0016cb4:	c1 fb 1f             	sar    ebx,0x1f
c0016cb7:	01 f0                	add    eax,esi
c0016cb9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0016cbc:	11 da                	adc    edx,ebx
c0016cbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0016cc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016cc5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0016cc8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016ccb:	89 d8                	mov    eax,ebx
c0016ccd:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0016cd1:	ba 00 00 00 00       	mov    edx,0x0
c0016cd6:	19 f8                	sbb    eax,edi
c0016cd8:	b8 00 00 00 00       	mov    eax,0x0
c0016cdd:	73 08                	jae    c0016ce7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0016cdf:	89 f0                	mov    eax,esi
c0016ce1:	89 fa                	mov    edx,edi
c0016ce3:	29 c8                	sub    eax,ecx
c0016ce5:	19 da                	sbb    edx,ebx
c0016ce7:	89 d7                	mov    edi,edx
c0016ce9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016cec:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016cef:	09 c7                	or     edi,eax
c0016cf1:	0f 84 5e ff ff ff    	je     c0016c55 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0016cf7:	57                   	push   edi
c0016cf8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0016cfc:	50                   	push   eax
c0016cfd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0016d04:	53                   	push   ebx
c0016d05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d08:	c1 e0 0b             	shl    eax,0xb
c0016d0b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d0f:	c1 e8 0b             	shr    eax,0xb
c0016d12:	50                   	push   eax
c0016d13:	e8 2f fc ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016d18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	25 ff 07 00 00       	and    eax,0x7ff
c0016d23:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0016d26:	31 ff                	xor    edi,edi
c0016d28:	56                   	push   esi
c0016d29:	6a 28                	push   0x28
c0016d2b:	6a 00                	push   0x0
c0016d2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016d31:	50                   	push   eax
c0016d32:	e8 b9 97 fe ff       	call   c00004f0 <memset>
c0016d37:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016d3a:	25 ff 07 00 00       	and    eax,0x7ff
c0016d3f:	89 c6                	mov    esi,eax
c0016d41:	83 c6 21             	add    esi,0x21
c0016d44:	83 d7 00             	adc    edi,0x0
c0016d47:	83 c4 10             	add    esp,0x10
c0016d4a:	31 c9                	xor    ecx,ecx
c0016d4c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0016d53:	83 f9 28             	cmp    ecx,0x28
c0016d56:	88 04 24             	mov    BYTE PTR [esp],al
c0016d59:	0f 94 c2             	sete   dl
c0016d5c:	88 d0                	mov    al,dl
c0016d5e:	ba ff 07 00 00       	mov    edx,0x7ff
c0016d63:	39 f2                	cmp    edx,esi
c0016d65:	ba 00 00 00 00       	mov    edx,0x0
c0016d6a:	19 fa                	sbb    edx,edi
c0016d6c:	0f 92 c2             	setb   dl
c0016d6f:	09 c2                	or     edx,eax
c0016d71:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0016d75:	0f 94 c0             	sete   al
c0016d78:	08 d0                	or     al,dl
c0016d7a:	75 16                	jne    c0016d92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016d7c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0016d80:	74 10                	je     c0016d92 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0016d82:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016d85:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0016d89:	41                   	inc    ecx
c0016d8a:	83 c6 01             	add    esi,0x1
c0016d8d:	83 d7 00             	adc    edi,0x0
c0016d90:	eb ba                	jmp    c0016d4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0016d92:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0016d99:	83 ec 0c             	sub    esp,0xc
c0016d9c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0016da0:	56                   	push   esi
c0016da1:	e8 ba 97 fe ff       	call   c0000560 <strlen>
c0016da6:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0016dad:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016db1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0016db9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016dbc:	5a                   	pop    edx
c0016dbd:	25 ff 07 00 00       	and    eax,0x7ff
c0016dc2:	59                   	pop    ecx
c0016dc3:	01 f8                	add    eax,edi
c0016dc5:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c0016dcc:	0f 95 c0             	setne  al
c0016dcf:	0f b6 c0             	movzx  eax,al
c0016dd2:	40                   	inc    eax
c0016dd3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0016dd7:	56                   	push   esi
c0016dd8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016ddc:	50                   	push   eax
c0016ddd:	e8 3e 98 fe ff       	call   c0000620 <strcpy>
c0016de2:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0016de6:	83 c4 10             	add    esp,0x10
c0016de9:	84 c0                	test   al,al
c0016deb:	75 21                	jne    c0016e0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1e8>
c0016ded:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0016df5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016dfd:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016e05:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0016e0c:	eb 28                	jmp    c0016e36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016e0e:	fe c8                	dec    al
c0016e10:	75 24                	jne    c0016e36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x210>
c0016e12:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0016e1a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e22:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0016e2a:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0016e31:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0016e36:	8d 74 24 40          	lea    esi,[esp+0x40]
c0016e3a:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0016e41:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0016e48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e4a:	0f b6 f3             	movzx  esi,bl
c0016e4d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0016e54:	31 db                	xor    ebx,ebx
c0016e56:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e5c:	89 df                	mov    edi,ebx
c0016e5e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0016e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016e64:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0016e67:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0016e6a:	39 c6                	cmp    esi,eax
c0016e6c:	19 d7                	sbb    edi,edx
c0016e6e:	72 10                	jb     c0016e80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25a>
c0016e70:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0016e77:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0016e7e:	eb 0a                	jmp    c0016e8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x264>
c0016e80:	29 f0                	sub    eax,esi
c0016e82:	19 da                	sbb    edx,ebx
c0016e84:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0016e87:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016e8a:	31 c0                	xor    eax,eax
c0016e8c:	eb 05                	jmp    c0016e93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c0016e8e:	b8 04 00 00 00       	mov    eax,0x4
c0016e93:	81 c4 5c 09 00 00    	add    esp,0x95c
c0016e99:	5b                   	pop    ebx
c0016e9a:	5e                   	pop    esi
c0016e9b:	5f                   	pop    edi
c0016e9c:	5d                   	pop    ebp
c0016e9d:	c3                   	ret    

c0016e9e <readRoot(unsigned int*, unsigned int*, char)>:
c0016e9e:	57                   	push   edi
c0016e9f:	56                   	push   esi
c0016ea0:	81 ec 38 08 00 00    	sub    esp,0x838
c0016ea6:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0016eae:	50                   	push   eax
c0016eaf:	8d 44 24 38          	lea    eax,[esp+0x38]
c0016eb3:	50                   	push   eax
c0016eb4:	6a 10                	push   0x10
c0016eb6:	e8 8c fa ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016ebb:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0016ec2:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0016ec6:	b9 22 00 00 00       	mov    ecx,0x22
c0016ecb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ecd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0016ed4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ed8:	89 10                	mov    DWORD PTR [eax],edx
c0016eda:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0016ee1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016ee5:	89 10                	mov    DWORD PTR [eax],edx
c0016ee7:	81 c4 44 08 00 00    	add    esp,0x844
c0016eed:	b0 01                	mov    al,0x1
c0016eef:	5e                   	pop    esi
c0016ef0:	5f                   	pop    edi
c0016ef1:	c3                   	ret    

c0016ef2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0016ef2:	55                   	push   ebp
c0016ef3:	57                   	push   edi
c0016ef4:	56                   	push   esi
c0016ef5:	53                   	push   ebx
c0016ef6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016efc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0016f03:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0016f0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f0e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0016f12:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016f16:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f1a:	75 03                	jne    c0016f1f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0016f1c:	83 c3 02             	add    ebx,0x2
c0016f1f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0016f22:	75 03                	jne    c0016f27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0016f24:	43                   	inc    ebx
c0016f25:	eb f8                	jmp    c0016f1f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0016f27:	52                   	push   edx
c0016f28:	68 00 01 00 00       	push   0x100
c0016f2d:	6a 00                	push   0x0
c0016f2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0016f33:	50                   	push   eax
c0016f34:	e8 b7 95 fe ff       	call   c00004f0 <memset>
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	31 d2                	xor    edx,edx
c0016f3e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0016f41:	84 c0                	test   al,al
c0016f43:	74 21                	je     c0016f66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0016f45:	3c 2f                	cmp    al,0x2f
c0016f47:	75 0b                	jne    c0016f54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0016f49:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0016f4d:	bd 01 00 00 00       	mov    ebp,0x1
c0016f52:	eb 14                	jmp    c0016f68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0016f54:	8d 48 9f             	lea    ecx,[eax-0x61]
c0016f57:	80 f9 19             	cmp    cl,0x19
c0016f5a:	77 03                	ja     c0016f5f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0016f5c:	83 e8 20             	sub    eax,0x20
c0016f5f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0016f63:	42                   	inc    edx
c0016f64:	eb d8                	jmp    c0016f3e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0016f66:	31 ed                	xor    ebp,ebp
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016f72:	e8 ea fb fe ff       	call   c0006b61 <malloc>
c0016f77:	89 c6                	mov    esi,eax
c0016f79:	89 c2                	mov    edx,eax
c0016f7b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0016f82:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0016f88:	c1 ef 0b             	shr    edi,0xb
c0016f8b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0016f92:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016f96:	83 c4 10             	add    esp,0x10
c0016f99:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0016f9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fa2:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c0016fa9:	74 29                	je     c0016fd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c0016fab:	50                   	push   eax
c0016fac:	57                   	push   edi
c0016fad:	52                   	push   edx
c0016fae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016fb2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0016fb9:	e8 89 f9 ff ff       	call   c0016947 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0016fbe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fc2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0016fc9:	81 c2 00 08 00 00    	add    edx,0x800
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	eb ca                	jmp    c0016f9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c0016fd4:	83 ec 0c             	sub    esp,0xc
c0016fd7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0016fdb:	57                   	push   edi
c0016fdc:	e8 7f 95 fe ff       	call   c0000560 <strlen>
c0016fe1:	50                   	push   eax
c0016fe2:	57                   	push   edi
c0016fe3:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0016fea:	56                   	push   esi
c0016feb:	e8 15 f9 ff ff       	call   c0016905 <__memmem(unsigned char*, int, unsigned char*, int)>
c0016ff0:	83 c4 20             	add    esp,0x20
c0016ff3:	85 c0                	test   eax,eax
c0016ff5:	75 13                	jne    c001700a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c0016ff7:	83 ec 0c             	sub    esp,0xc
c0016ffa:	56                   	push   esi
c0016ffb:	e8 71 fb fe ff       	call   c0006b71 <free>
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	31 c0                	xor    eax,eax
c0017005:	e9 b3 00 00 00       	jmp    c00170bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001700a:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001700e:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0017012:	c1 e7 08             	shl    edi,0x8
c0017015:	c1 e2 10             	shl    edx,0x10
c0017018:	09 d7                	or     edi,edx
c001701a:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001701e:	09 d7                	or     edi,edx
c0017020:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0017024:	c1 e2 18             	shl    edx,0x18
c0017027:	09 d7                	or     edi,edx
c0017029:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001702d:	89 d1                	mov    ecx,edx
c001702f:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0017033:	c1 e1 08             	shl    ecx,0x8
c0017036:	c1 e2 10             	shl    edx,0x10
c0017039:	09 ca                	or     edx,ecx
c001703b:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001703f:	09 ca                	or     edx,ecx
c0017041:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0017045:	c1 e1 18             	shl    ecx,0x18
c0017048:	09 ca                	or     edx,ecx
c001704a:	89 e9                	mov    ecx,ebp
c001704c:	84 c9                	test   cl,cl
c001704e:	74 3c                	je     c001708c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c0017050:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017054:	83 ec 0c             	sub    esp,0xc
c0017057:	56                   	push   esi
c0017058:	e8 14 fb fe ff       	call   c0006b71 <free>
c001705d:	83 c4 0c             	add    esp,0xc
c0017060:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017067:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001706c:	50                   	push   eax
c001706d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017074:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001707b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001707f:	52                   	push   edx
c0017080:	57                   	push   edi
c0017081:	53                   	push   ebx
c0017082:	e8 6b fe ff ff       	call   c0016ef2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0017087:	83 c4 20             	add    esp,0x20
c001708a:	eb 31                	jmp    c00170bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001708c:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001708f:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0017096:	d0 e8                	shr    al,1
c0017098:	89 3b                	mov    DWORD PTR [ebx],edi
c001709a:	83 e0 01             	and    eax,0x1
c001709d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00170a4:	83 ec 0c             	sub    esp,0xc
c00170a7:	89 13                	mov    DWORD PTR [ebx],edx
c00170a9:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00170b0:	89 03                	mov    DWORD PTR [ebx],eax
c00170b2:	56                   	push   esi
c00170b3:	e8 b9 fa fe ff       	call   c0006b71 <free>
c00170b8:	83 c4 10             	add    esp,0x10
c00170bb:	b0 01                	mov    al,0x1
c00170bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00170c3:	5b                   	pop    ebx
c00170c4:	5e                   	pop    esi
c00170c5:	5f                   	pop    edi
c00170c6:	5d                   	pop    ebp
c00170c7:	c3                   	ret    

c00170c8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00170c8:	55                   	push   ebp
c00170c9:	57                   	push   edi
c00170ca:	56                   	push   esi
c00170cb:	53                   	push   ebx
c00170cc:	83 ec 20             	sub    esp,0x20
c00170cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170d3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00170d7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00170db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00170eb:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00170f0:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00170f6:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00170fc:	57                   	push   edi
c00170fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017101:	50                   	push   eax
c0017102:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017106:	50                   	push   eax
c0017107:	e8 92 fd ff ff       	call   c0016e9e <readRoot(unsigned int*, unsigned int*, char)>
c001710c:	5a                   	pop    edx
c001710d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017111:	e8 4a 94 fe ff       	call   c0000560 <strlen>
c0017116:	83 c4 10             	add    esp,0x10
c0017119:	83 f8 03             	cmp    eax,0x3
c001711c:	77 17                	ja     c0017135 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001711e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017122:	89 03                	mov    DWORD PTR [ebx],eax
c0017124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017128:	89 06                	mov    DWORD PTR [esi],eax
c001712a:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0017131:	b0 01                	mov    al,0x1
c0017133:	eb 19                	jmp    c001714e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0017135:	50                   	push   eax
c0017136:	55                   	push   ebp
c0017137:	57                   	push   edi
c0017138:	56                   	push   esi
c0017139:	53                   	push   ebx
c001713a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001713e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017142:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017146:	e8 a7 fd ff ff       	call   c0016ef2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001714b:	83 c4 20             	add    esp,0x20
c001714e:	83 c4 1c             	add    esp,0x1c
c0017151:	5b                   	pop    ebx
c0017152:	5e                   	pop    esi
c0017153:	5f                   	pop    edi
c0017154:	5d                   	pop    ebp
c0017155:	c3                   	ret    

c0017156 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017156:	57                   	push   edi
c0017157:	56                   	push   esi
c0017158:	53                   	push   ebx
c0017159:	83 ec 10             	sub    esp,0x10
c001715c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0017160:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017164:	85 ff                	test   edi,edi
c0017166:	0f 84 8b 00 00 00    	je     c00171f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001716c:	85 f6                	test   esi,esi
c001716e:	0f 84 83 00 00 00    	je     c00171f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0017174:	b8 03 00 00 00       	mov    eax,0x3
c0017179:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001717e:	75 7c                	jne    c00171fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	6a 1c                	push   0x1c
c0017185:	e8 d7 f9 fe ff       	call   c0006b61 <malloc>
c001718a:	89 07                	mov    DWORD PTR [edi],eax
c001718c:	89 c3                	mov    ebx,eax
c001718e:	58                   	pop    eax
c001718f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017193:	50                   	push   eax
c0017194:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017197:	50                   	push   eax
c0017198:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001719c:	50                   	push   eax
c001719d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00171a1:	50                   	push   eax
c00171a2:	56                   	push   esi
c00171a3:	e8 20 ff ff ff       	call   c00170c8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00171a8:	83 c4 20             	add    esp,0x20
c00171ab:	84 c0                	test   al,al
c00171ad:	74 07                	je     c00171b6 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00171af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00171b4:	74 0b                	je     c00171c1 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00171b6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00171ba:	b8 01 00 00 00       	mov    eax,0x1
c00171bf:	eb 3b                	jmp    c00171fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00171c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171c5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00171c9:	89 03                	mov    DWORD PTR [ebx],eax
c00171cb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00171d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00171e4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00171e7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00171ee:	8a 06                	mov    al,BYTE PTR [esi]
c00171f0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00171f3:	31 c0                	xor    eax,eax
c00171f5:	eb 05                	jmp    c00171fc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00171f7:	b8 04 00 00 00       	mov    eax,0x4
c00171fc:	83 c4 10             	add    esp,0x10
c00171ff:	5b                   	pop    ebx
c0017200:	5e                   	pop    esi
c0017201:	5f                   	pop    edi
c0017202:	c3                   	ret    
c0017203:	90                   	nop

c0017204 <ISO9660::exists(char const*)>:
c0017204:	83 ec 28             	sub    esp,0x28
c0017207:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001720b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001720f:	52                   	push   edx
c0017210:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0017213:	52                   	push   edx
c0017214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0017218:	52                   	push   edx
c0017219:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001721d:	52                   	push   edx
c001721e:	50                   	push   eax
c001721f:	e8 a4 fe ff ff       	call   c00170c8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017224:	83 c4 3c             	add    esp,0x3c
c0017227:	c3                   	ret    

c0017228 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017228:	56                   	push   esi
c0017229:	53                   	push   ebx
c001722a:	83 ec 14             	sub    esp,0x14
c001722d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017231:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017235:	85 db                	test   ebx,ebx
c0017237:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001723b:	0f 94 c2             	sete   dl
c001723e:	85 f6                	test   esi,esi
c0017240:	0f 94 c0             	sete   al
c0017243:	08 c2                	or     dl,al
c0017245:	75 68                	jne    c00172af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0017247:	85 c9                	test   ecx,ecx
c0017249:	74 64                	je     c00172af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001724b:	83 ec 0c             	sub    esp,0xc
c001724e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017251:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017255:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001725b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017262:	50                   	push   eax
c0017263:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0017266:	50                   	push   eax
c0017267:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001726b:	50                   	push   eax
c001726c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017270:	50                   	push   eax
c0017271:	51                   	push   ecx
c0017272:	e8 51 fe ff ff       	call   c00170c8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0017277:	83 c4 20             	add    esp,0x20
c001727a:	ba 01 00 00 00       	mov    edx,0x1
c001727f:	84 c0                	test   al,al
c0017281:	74 31                	je     c00172b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0017283:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017287:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001728e:	89 03                	mov    DWORD PTR [ebx],eax
c0017290:	ba 00 00 00 00       	mov    edx,0x0
c0017295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017299:	85 c0                	test   eax,eax
c001729b:	0f 95 06             	setne  BYTE PTR [esi]
c001729e:	74 14                	je     c00172b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00172a0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00172a6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00172ad:	eb 05                	jmp    c00172b4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00172af:	ba 04 00 00 00       	mov    edx,0x4
c00172b4:	83 c4 14             	add    esp,0x14
c00172b7:	89 d0                	mov    eax,edx
c00172b9:	5b                   	pop    ebx
c00172ba:	5e                   	pop    esi
c00172bb:	c3                   	ret    

c00172bc <ISO9660::openDir(char const*, void**)>:
c00172bc:	57                   	push   edi
c00172bd:	56                   	push   esi
c00172be:	53                   	push   ebx
c00172bf:	83 ec 10             	sub    esp,0x10
c00172c2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00172c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00172ca:	85 ff                	test   edi,edi
c00172cc:	74 7b                	je     c0017349 <ISO9660::openDir(char const*, void**)+0x8d>
c00172ce:	85 f6                	test   esi,esi
c00172d0:	74 77                	je     c0017349 <ISO9660::openDir(char const*, void**)+0x8d>
c00172d2:	83 ec 0c             	sub    esp,0xc
c00172d5:	6a 1c                	push   0x1c
c00172d7:	e8 85 f8 fe ff       	call   c0006b61 <malloc>
c00172dc:	89 07                	mov    DWORD PTR [edi],eax
c00172de:	89 c3                	mov    ebx,eax
c00172e0:	58                   	pop    eax
c00172e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172e5:	50                   	push   eax
c00172e6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00172e9:	50                   	push   eax
c00172ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172ee:	50                   	push   eax
c00172ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172f3:	50                   	push   eax
c00172f4:	56                   	push   esi
c00172f5:	e8 ce fd ff ff       	call   c00170c8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00172fa:	83 c4 20             	add    esp,0x20
c00172fd:	84 c0                	test   al,al
c00172ff:	74 07                	je     c0017308 <ISO9660::openDir(char const*, void**)+0x4c>
c0017301:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017306:	75 0b                	jne    c0017313 <ISO9660::openDir(char const*, void**)+0x57>
c0017308:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001730c:	b8 01 00 00 00       	mov    eax,0x1
c0017311:	eb 3b                	jmp    c001734e <ISO9660::openDir(char const*, void**)+0x92>
c0017313:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017317:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001731b:	89 03                	mov    DWORD PTR [ebx],eax
c001731d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017328:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001732f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017336:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0017339:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0017340:	8a 06                	mov    al,BYTE PTR [esi]
c0017342:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0017345:	31 c0                	xor    eax,eax
c0017347:	eb 05                	jmp    c001734e <ISO9660::openDir(char const*, void**)+0x92>
c0017349:	b8 04 00 00 00       	mov    eax,0x4
c001734e:	83 c4 10             	add    esp,0x10
c0017351:	5b                   	pop    ebx
c0017352:	5e                   	pop    esi
c0017353:	5f                   	pop    edi
c0017354:	c3                   	ret    
c0017355:	90                   	nop

c0017356 <ISO9660::ISO9660()>:
c0017356:	83 ec 0c             	sub    esp,0xc
c0017359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001735d:	83 ec 0c             	sub    esp,0xc
c0017360:	50                   	push   eax
c0017361:	e8 e0 28 ff ff       	call   c0009c46 <Filesystem::Filesystem()>
c0017366:	83 c4 10             	add    esp,0x10
c0017369:	ba 48 e5 01 c0       	mov    edx,0xc001e548
c001736e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017372:	89 10                	mov    DWORD PTR [eax],edx
c0017374:	90                   	nop
c0017375:	83 c4 0c             	add    esp,0xc
c0017378:	c3                   	ret    
c0017379:	90                   	nop

c001737a <SoundCard::beginPlayback()>:
c001737a:	c7 44 24 04 a8 e5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e5a8
c0017382:	e9 ec 80 ff ff       	jmp    c000f473 <Krnl::panic(char const*)>
c0017387:	90                   	nop

c0017388 <SoundCard::stopPlayback()>:
c0017388:	c7 44 24 04 a8 e5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e5a8
c0017390:	e9 de 80 ff ff       	jmp    c000f473 <Krnl::panic(char const*)>
c0017395:	90                   	nop

c0017396 <SoundCard::SoundCard(char const*)>:
c0017396:	83 ec 1c             	sub    esp,0x1c
c0017399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001739d:	83 ec 08             	sub    esp,0x8
c00173a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173a4:	50                   	push   eax
c00173a5:	e8 52 3b ff ff       	call   c000aefc <Device::Device(char const*)>
c00173aa:	83 c4 10             	add    esp,0x10
c00173ad:	ba f4 e5 01 c0       	mov    edx,0xc001e5f4
c00173b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173b6:	89 10                	mov    DWORD PTR [eax],edx
c00173b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173bc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00173c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173c7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00173d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173d5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00173df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00173ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00173fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017403:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017408:	7f 19                	jg     c0017423 <SoundCard::SoundCard(char const*)+0x8d>
c001740a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001740e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017412:	83 c2 54             	add    edx,0x54
c0017415:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001741d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017421:	eb e0                	jmp    c0017403 <SoundCard::SoundCard(char const*)+0x6d>
c0017423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017427:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001742e:	90                   	nop
c001742f:	83 c4 1c             	add    esp,0x1c
c0017432:	c3                   	ret    
c0017433:	90                   	nop

c0017434 <SoundCard::~SoundCard()>:
c0017434:	83 ec 0c             	sub    esp,0xc
c0017437:	ba f4 e5 01 c0       	mov    edx,0xc001e5f4
c001743c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017440:	89 10                	mov    DWORD PTR [eax],edx
c0017442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017446:	83 ec 0c             	sub    esp,0xc
c0017449:	50                   	push   eax
c001744a:	e8 17 38 ff ff       	call   c000ac66 <Device::~Device()>
c001744f:	83 c4 10             	add    esp,0x10
c0017452:	90                   	nop
c0017453:	83 c4 0c             	add    esp,0xc
c0017456:	c3                   	ret    
c0017457:	90                   	nop

c0017458 <SoundCard::~SoundCard()>:
c0017458:	83 ec 0c             	sub    esp,0xc
c001745b:	83 ec 0c             	sub    esp,0xc
c001745e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017462:	e8 cd ff ff ff       	call   c0017434 <SoundCard::~SoundCard()>
c0017467:	83 c4 10             	add    esp,0x10
c001746a:	83 ec 08             	sub    esp,0x8
c001746d:	68 e8 01 00 00       	push   0x1e8
c0017472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017476:	e8 b3 23 ff ff       	call   c000982e <operator delete(void*, unsigned long)>
c001747b:	83 c4 10             	add    esp,0x10
c001747e:	83 c4 0c             	add    esp,0xc
c0017481:	c3                   	ret    

c0017482 <SoundCard::configureRates(int, int, int)>:
c0017482:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017486:	31 c0                	xor    eax,eax
c0017488:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001748f:	75 20                	jne    c00174b1 <SoundCard::configureRates(int, int, int)+0x2f>
c0017491:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017495:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001749b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001749f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00174a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00174af:	b0 01                	mov    al,0x1
c00174b1:	c3                   	ret    

c00174b2 <SoundCard::getSamples16(int, short*)>:
c00174b2:	55                   	push   ebp
c00174b3:	57                   	push   edi
c00174b4:	31 ff                	xor    edi,edi
c00174b6:	56                   	push   esi
c00174b7:	53                   	push   ebx
c00174b8:	31 db                	xor    ebx,ebx
c00174ba:	83 ec 10             	sub    esp,0x10
c00174bd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00174c1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00174c5:	8d 04 36             	lea    eax,[esi+esi*1]
c00174c8:	50                   	push   eax
c00174c9:	6a 00                	push   0x0
c00174cb:	55                   	push   ebp
c00174cc:	e8 1f 90 fe ff       	call   c00004f0 <memset>
c00174d1:	83 c4 10             	add    esp,0x10
c00174d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174d8:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00174df:	85 c0                	test   eax,eax
c00174e1:	74 1b                	je     c00174fe <SoundCard::getSamples16(int, short*)+0x4c>
c00174e3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00174e7:	75 15                	jne    c00174fe <SoundCard::getSamples16(int, short*)+0x4c>
c00174e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00174ed:	55                   	push   ebp
c00174ee:	56                   	push   esi
c00174ef:	50                   	push   eax
c00174f0:	e8 ef 02 00 00       	call   c00177e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00174f5:	83 c4 10             	add    esp,0x10
c00174f8:	39 c7                	cmp    edi,eax
c00174fa:	7d 02                	jge    c00174fe <SoundCard::getSamples16(int, short*)+0x4c>
c00174fc:	89 c7                	mov    edi,eax
c00174fe:	43                   	inc    ebx
c00174ff:	83 fb 20             	cmp    ebx,0x20
c0017502:	75 d0                	jne    c00174d4 <SoundCard::getSamples16(int, short*)+0x22>
c0017504:	83 c4 0c             	add    esp,0xc
c0017507:	89 f8                	mov    eax,edi
c0017509:	5b                   	pop    ebx
c001750a:	5e                   	pop    esi
c001750b:	5f                   	pop    edi
c001750c:	5d                   	pop    ebp
c001750d:	c3                   	ret    

c001750e <SoundCard::getSamples32(int, int*)>:
c001750e:	55                   	push   ebp
c001750f:	57                   	push   edi
c0017510:	31 ff                	xor    edi,edi
c0017512:	56                   	push   esi
c0017513:	31 f6                	xor    esi,esi
c0017515:	53                   	push   ebx
c0017516:	83 ec 10             	sub    esp,0x10
c0017519:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001751d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017521:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017525:	c1 e0 02             	shl    eax,0x2
c0017528:	50                   	push   eax
c0017529:	6a 00                	push   0x0
c001752b:	55                   	push   ebp
c001752c:	e8 bf 8f fe ff       	call   c00004f0 <memset>
c0017531:	83 c4 10             	add    esp,0x10
c0017534:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001753b:	85 c0                	test   eax,eax
c001753d:	74 1b                	je     c001755a <SoundCard::getSamples32(int, int*)+0x4c>
c001753f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017543:	75 15                	jne    c001755a <SoundCard::getSamples32(int, int*)+0x4c>
c0017545:	53                   	push   ebx
c0017546:	55                   	push   ebp
c0017547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001754b:	50                   	push   eax
c001754c:	e8 57 03 00 00       	call   c00178a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	39 c6                	cmp    esi,eax
c0017556:	7d 02                	jge    c001755a <SoundCard::getSamples32(int, int*)+0x4c>
c0017558:	89 c6                	mov    esi,eax
c001755a:	47                   	inc    edi
c001755b:	83 ff 20             	cmp    edi,0x20
c001755e:	75 d4                	jne    c0017534 <SoundCard::getSamples32(int, int*)+0x26>
c0017560:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017566:	85 f6                	test   esi,esi
c0017568:	75 0f                	jne    c0017579 <SoundCard::getSamples32(int, int*)+0x6b>
c001756a:	84 c0                	test   al,al
c001756c:	74 1b                	je     c0017589 <SoundCard::getSamples32(int, int*)+0x7b>
c001756e:	83 ec 0c             	sub    esp,0xc
c0017571:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017573:	53                   	push   ebx
c0017574:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017577:	eb 0d                	jmp    c0017586 <SoundCard::getSamples32(int, int*)+0x78>
c0017579:	84 c0                	test   al,al
c001757b:	75 0c                	jne    c0017589 <SoundCard::getSamples32(int, int*)+0x7b>
c001757d:	83 ec 0c             	sub    esp,0xc
c0017580:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017582:	53                   	push   ebx
c0017583:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017586:	83 c4 10             	add    esp,0x10
c0017589:	83 c4 0c             	add    esp,0xc
c001758c:	89 f0                	mov    eax,esi
c001758e:	5b                   	pop    ebx
c001758f:	5e                   	pop    esi
c0017590:	5f                   	pop    edi
c0017591:	5d                   	pop    ebp
c0017592:	c3                   	ret    
c0017593:	90                   	nop

c0017594 <SoundCard::addChannel(SoundPort*)>:
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	31 c0                	xor    eax,eax
c0017599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001759d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00175a5:	74 1b                	je     c00175c2 <SoundCard::addChannel(SoundPort*)+0x2e>
c00175a7:	40                   	inc    eax
c00175a8:	83 f8 20             	cmp    eax,0x20
c00175ab:	75 f0                	jne    c001759d <SoundCard::addChannel(SoundPort*)+0x9>
c00175ad:	83 ec 0c             	sub    esp,0xc
c00175b0:	68 cd e5 01 c0       	push   0xc001e5cd
c00175b5:	e8 b9 7e ff ff       	call   c000f473 <Krnl::panic(char const*)>
c00175ba:	83 c4 10             	add    esp,0x10
c00175bd:	83 c8 ff             	or     eax,0xffffffff
c00175c0:	eb 0b                	jmp    c00175cd <SoundCard::addChannel(SoundPort*)+0x39>
c00175c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00175c6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00175cd:	83 c4 0c             	add    esp,0xc
c00175d0:	c3                   	ret    
c00175d1:	90                   	nop

c00175d2 <SoundCard::removeChannel(int)>:
c00175d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00175da:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00175e5:	c3                   	ret    
c00175e6:	66 90                	xchg   ax,ax

c00175e8 <SoundPort::SoundPort(int, int, int, int)>:
c00175e8:	83 ec 0c             	sub    esp,0xc
c00175eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00175f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175fa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00175fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017606:	89 10                	mov    DWORD PTR [eax],edx
c0017608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017610:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017617:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001761b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001761e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017623:	75 13                	jne    c0017638 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017629:	8b 00                	mov    eax,DWORD PTR [eax]
c001762b:	05 a0 0f 00 00       	add    eax,0xfa0
c0017630:	01 c0                	add    eax,eax
c0017632:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017636:	66 90                	xchg   ax,ax
c0017638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017640:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017647:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001764e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017652:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017655:	c1 e0 02             	shl    eax,0x2
c0017658:	83 ec 0c             	sub    esp,0xc
c001765b:	50                   	push   eax
c001765c:	e8 00 f5 fe ff       	call   c0006b61 <malloc>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	89 c2                	mov    edx,eax
c0017666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001766a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001766d:	90                   	nop
c001766e:	83 c4 0c             	add    esp,0xc
c0017671:	c3                   	ret    
c0017672:	66 90                	xchg   ax,ax

c0017674 <SoundPort::~SoundPort()>:
c0017674:	83 ec 0c             	sub    esp,0xc
c0017677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001767e:	85 c0                	test   eax,eax
c0017680:	74 1e                	je     c00176a0 <SoundPort::~SoundPort()+0x2c>
c0017682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017686:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017689:	83 ec 0c             	sub    esp,0xc
c001768c:	50                   	push   eax
c001768d:	e8 df f4 fe ff       	call   c0006b71 <free>
c0017692:	83 c4 10             	add    esp,0x10
c0017695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017699:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00176a0:	90                   	nop
c00176a1:	83 c4 0c             	add    esp,0xc
c00176a4:	c3                   	ret    
c00176a5:	90                   	nop
c00176a6:	66 90                	xchg   ax,ax

c00176a8 <SoundPort::unpause()>:
c00176a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176ac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00176b0:	c3                   	ret    
c00176b1:	90                   	nop
c00176b2:	66 90                	xchg   ax,ax

c00176b4 <SoundPort::pause()>:
c00176b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176b8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00176bc:	c3                   	ret    
c00176bd:	90                   	nop
c00176be:	66 90                	xchg   ax,ax

c00176c0 <SoundPort::getBufferUsed()>:
c00176c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00176c7:	c3                   	ret    

c00176c8 <SoundPort::getBufferSize()>:
c00176c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00176cf:	c3                   	ret    

c00176d0 <SoundPort::buffer16(short*, int)>:
c00176d0:	55                   	push   ebp
c00176d1:	57                   	push   edi
c00176d2:	56                   	push   esi
c00176d3:	53                   	push   ebx
c00176d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176d8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00176dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00176df:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00176e2:	74 68                	je     c001774c <SoundPort::buffer16(short*, int)+0x7c>
c00176e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00176e8:	85 c9                	test   ecx,ecx
c00176ea:	7e 60                	jle    c001774c <SoundPort::buffer16(short*, int)+0x7c>
c00176ec:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00176f0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00176f3:	c1 e1 0f             	shl    ecx,0xf
c00176f6:	8d 70 01             	lea    esi,[eax+0x1]
c00176f9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00176fc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00176ff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017702:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017705:	74 4d                	je     c0017754 <SoundPort::buffer16(short*, int)+0x84>
c0017707:	31 f6                	xor    esi,esi
c0017709:	eb 21                	jmp    c001772c <SoundPort::buffer16(short*, int)+0x5c>
c001770b:	90                   	nop
c001770c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017711:	8d 79 01             	lea    edi,[ecx+0x1]
c0017714:	c1 e3 0f             	shl    ebx,0xf
c0017717:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001771a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001771d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017720:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017723:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017726:	74 1c                	je     c0017744 <SoundPort::buffer16(short*, int)+0x74>
c0017728:	89 c6                	mov    esi,eax
c001772a:	66 90                	xchg   ax,ax
c001772c:	8d 46 01             	lea    eax,[esi+0x1]
c001772f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017733:	75 d7                	jne    c001770c <SoundPort::buffer16(short*, int)+0x3c>
c0017735:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017739:	8d 76 00             	lea    esi,[esi+0x0]
c001773c:	5b                   	pop    ebx
c001773d:	5e                   	pop    esi
c001773e:	5f                   	pop    edi
c001773f:	5d                   	pop    ebp
c0017740:	c3                   	ret    
c0017741:	8d 76 00             	lea    esi,[esi+0x0]
c0017744:	5b                   	pop    ebx
c0017745:	8d 46 02             	lea    eax,[esi+0x2]
c0017748:	5e                   	pop    esi
c0017749:	5f                   	pop    edi
c001774a:	5d                   	pop    ebp
c001774b:	c3                   	ret    
c001774c:	5b                   	pop    ebx
c001774d:	31 c0                	xor    eax,eax
c001774f:	5e                   	pop    esi
c0017750:	5f                   	pop    edi
c0017751:	5d                   	pop    ebp
c0017752:	c3                   	ret    
c0017753:	90                   	nop
c0017754:	b8 01 00 00 00       	mov    eax,0x1
c0017759:	eb e1                	jmp    c001773c <SoundPort::buffer16(short*, int)+0x6c>
c001775b:	90                   	nop

c001775c <SoundPort::buffer32(int*, int)>:
c001775c:	55                   	push   ebp
c001775d:	57                   	push   edi
c001775e:	56                   	push   esi
c001775f:	53                   	push   ebx
c0017760:	51                   	push   ecx
c0017761:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017769:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001776c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017770:	89 04 24             	mov    DWORD PTR [esp],eax
c0017773:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017776:	74 5c                	je     c00177d4 <SoundPort::buffer32(int*, int)+0x78>
c0017778:	85 c0                	test   eax,eax
c001777a:	7e 58                	jle    c00177d4 <SoundPort::buffer32(int*, int)+0x78>
c001777c:	8d 71 01             	lea    esi,[ecx+0x1]
c001777f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017782:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017785:	8b 37                	mov    esi,DWORD PTR [edi]
c0017787:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001778a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001778d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017790:	74 4a                	je     c00177dc <SoundPort::buffer32(int*, int)+0x80>
c0017792:	31 f6                	xor    esi,esi
c0017794:	eb 1e                	jmp    c00177b4 <SoundPort::buffer32(int*, int)+0x58>
c0017796:	66 90                	xchg   ax,ax
c0017798:	8d 69 01             	lea    ebp,[ecx+0x1]
c001779b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001779e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00177a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00177a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00177a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00177ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00177ae:	74 18                	je     c00177c8 <SoundPort::buffer32(int*, int)+0x6c>
c00177b0:	89 de                	mov    esi,ebx
c00177b2:	66 90                	xchg   ax,ax
c00177b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00177b7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00177ba:	75 dc                	jne    c0017798 <SoundPort::buffer32(int*, int)+0x3c>
c00177bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00177bf:	90                   	nop
c00177c0:	5a                   	pop    edx
c00177c1:	5b                   	pop    ebx
c00177c2:	5e                   	pop    esi
c00177c3:	5f                   	pop    edi
c00177c4:	5d                   	pop    ebp
c00177c5:	c3                   	ret    
c00177c6:	66 90                	xchg   ax,ax
c00177c8:	5a                   	pop    edx
c00177c9:	8d 46 02             	lea    eax,[esi+0x2]
c00177cc:	5b                   	pop    ebx
c00177cd:	5e                   	pop    esi
c00177ce:	5f                   	pop    edi
c00177cf:	5d                   	pop    ebp
c00177d0:	c3                   	ret    
c00177d1:	8d 76 00             	lea    esi,[esi+0x0]
c00177d4:	5a                   	pop    edx
c00177d5:	31 c0                	xor    eax,eax
c00177d7:	5b                   	pop    ebx
c00177d8:	5e                   	pop    esi
c00177d9:	5f                   	pop    edi
c00177da:	5d                   	pop    ebp
c00177db:	c3                   	ret    
c00177dc:	b8 01 00 00 00       	mov    eax,0x1
c00177e1:	eb dd                	jmp    c00177c0 <SoundPort::buffer32(int*, int)+0x64>
c00177e3:	90                   	nop

c00177e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00177e4:	57                   	push   edi
c00177e5:	56                   	push   esi
c00177e6:	53                   	push   ebx
c00177e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00177ef:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00177f5:	39 03                	cmp    DWORD PTR [ebx],eax
c00177f7:	74 13                	je     c001780c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00177f9:	83 ec 0c             	sub    esp,0xc
c00177fc:	68 20 e6 01 c0       	push   0xc001e620
c0017801:	e8 6d 7c ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	8d 76 00             	lea    esi,[esi+0x0]
c001780c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017812:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017815:	74 11                	je     c0017828 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017817:	83 ec 0c             	sub    esp,0xc
c001781a:	68 5f e6 01 c0       	push   0xc001e65f
c001781f:	e8 4f 7c ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	90                   	nop
c0017828:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001782e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017831:	74 11                	je     c0017844 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017833:	83 ec 0c             	sub    esp,0xc
c0017836:	68 5f e6 01 c0       	push   0xc001e65f
c001783b:	e8 33 7c ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	90                   	nop
c0017844:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017847:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001784b:	7e 07                	jle    c0017854 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001784d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017851:	8d 76 00             	lea    esi,[esi+0x0]
c0017854:	85 f6                	test   esi,esi
c0017856:	7e 2c                	jle    c0017884 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017858:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001785c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001785f:	31 c9                	xor    ecx,ecx
c0017861:	01 d7                	add    edi,edx
c0017863:	90                   	nop
c0017864:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017867:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001786a:	85 c0                	test   eax,eax
c001786c:	79 06                	jns    c0017874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001786e:	05 ff 7f 00 00       	add    eax,0x7fff
c0017873:	90                   	nop
c0017874:	c1 f8 0f             	sar    eax,0xf
c0017877:	83 c1 04             	add    ecx,0x4
c001787a:	66 01 02             	add    WORD PTR [edx],ax
c001787d:	83 c2 02             	add    edx,0x2
c0017880:	39 d7                	cmp    edi,edx
c0017882:	75 e0                	jne    c0017864 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017884:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017887:	50                   	push   eax
c0017888:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001788b:	29 f0                	sub    eax,esi
c001788d:	c1 e0 02             	shl    eax,0x2
c0017890:	50                   	push   eax
c0017891:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017894:	50                   	push   eax
c0017895:	52                   	push   edx
c0017896:	e8 65 8b fe ff       	call   c0000400 <memmove>
c001789b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001789e:	83 c4 10             	add    esp,0x10
c00178a1:	89 f0                	mov    eax,esi
c00178a3:	5b                   	pop    ebx
c00178a4:	5e                   	pop    esi
c00178a5:	5f                   	pop    edi
c00178a6:	c3                   	ret    
c00178a7:	90                   	nop

c00178a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00178a8:	57                   	push   edi
c00178a9:	56                   	push   esi
c00178aa:	53                   	push   ebx
c00178ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178af:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00178b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00178b7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00178bd:	39 06                	cmp    DWORD PTR [esi],eax
c00178bf:	74 13                	je     c00178d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00178c1:	83 ec 0c             	sub    esp,0xc
c00178c4:	68 40 e6 01 c0       	push   0xc001e640
c00178c9:	e8 a5 7b ff ff       	call   c000f473 <Krnl::panic(char const*)>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	8d 76 00             	lea    esi,[esi+0x0]
c00178d4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00178da:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00178dd:	74 11                	je     c00178f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00178df:	83 ec 0c             	sub    esp,0xc
c00178e2:	68 7b e6 01 c0       	push   0xc001e67b
c00178e7:	e8 87 7b ff ff       	call   c000f473 <Krnl::panic(char const*)>
c00178ec:	83 c4 10             	add    esp,0x10
c00178ef:	90                   	nop
c00178f0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00178f6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00178f9:	74 11                	je     c001790c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00178fb:	83 ec 0c             	sub    esp,0xc
c00178fe:	68 7b e6 01 c0       	push   0xc001e67b
c0017903:	e8 6b 7b ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0017908:	83 c4 10             	add    esp,0x10
c001790b:	90                   	nop
c001790c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001790f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017913:	7e 07                	jle    c001791c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017915:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017919:	8d 76 00             	lea    esi,[esi+0x0]
c001791c:	85 ff                	test   edi,edi
c001791e:	7e 1c                	jle    c001793c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017920:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017927:	31 c0                	xor    eax,eax
c0017929:	8d 76 00             	lea    esi,[esi+0x0]
c001792c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001792f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017932:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017935:	83 c0 04             	add    eax,0x4
c0017938:	39 c1                	cmp    ecx,eax
c001793a:	75 f0                	jne    c001792c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001793c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001793f:	50                   	push   eax
c0017940:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017943:	29 f8                	sub    eax,edi
c0017945:	c1 e0 02             	shl    eax,0x2
c0017948:	50                   	push   eax
c0017949:	8d 04 ba             	lea    eax,[edx+edi*4]
c001794c:	50                   	push   eax
c001794d:	52                   	push   edx
c001794e:	e8 ad 8a fe ff       	call   c0000400 <memmove>
c0017953:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017956:	83 c4 10             	add    esp,0x10
c0017959:	89 f8                	mov    eax,edi
c001795b:	5b                   	pop    ebx
c001795c:	5e                   	pop    esi
c001795d:	5f                   	pop    edi
c001795e:	c3                   	ret    
c001795f:	90                   	nop

c0017960 <PCI::open(int, int, void*)>:
c0017960:	83 ec 18             	sub    esp,0x18
c0017963:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017967:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001796b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017971:	8b 10                	mov    edx,DWORD PTR [eax]
c0017973:	50                   	push   eax
c0017974:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017977:	31 c0                	xor    eax,eax
c0017979:	83 c4 1c             	add    esp,0x1c
c001797c:	c3                   	ret    
c001797d:	90                   	nop

c001797e <PCI::close(int, int, void*)>:
c001797e:	31 c0                	xor    eax,eax
c0017980:	c3                   	ret    
c0017981:	90                   	nop

c0017982 <PCI::PCI()>:
c0017982:	83 ec 0c             	sub    esp,0xc
c0017985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017989:	83 ec 08             	sub    esp,0x8
c001798c:	68 97 e6 01 c0       	push   0xc001e697
c0017991:	50                   	push   eax
c0017992:	e8 21 2d ff ff       	call   c000a6b8 <Bus::Bus(char const*)>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c001799f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a3:	89 10                	mov    DWORD PTR [eax],edx
c00179a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00179b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b7:	a3 e0 32 02 c0       	mov    ds:0xc00232e0,eax
c00179bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00179c6:	31 d2                	xor    edx,edx
c00179c8:	88 c2                	mov    dl,al
c00179ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ce:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00179d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00179df:	31 d2                	xor    edx,edx
c00179e1:	88 c2                	mov    dl,al
c00179e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00179ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00179f6:	8d 50 01             	lea    edx,[eax+0x1]
c00179f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00179fd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0017a03:	31 d2                	xor    edx,edx
c0017a05:	88 c2                	mov    dl,al
c0017a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a0b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0017a0f:	83 c9 c0             	or     ecx,0xffffffc0
c0017a12:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0017a16:	90                   	nop
c0017a17:	83 c4 0c             	add    esp,0xc
c0017a1a:	c3                   	ret    
c0017a1b:	90                   	nop

c0017a1c <PCI::readBAR8(unsigned int, int)>:
c0017a1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a24:	f6 c2 01             	test   dl,0x1
c0017a27:	74 07                	je     c0017a30 <PCI::readBAR8(unsigned int, int)+0x14>
c0017a29:	83 e2 fc             	and    edx,0xfffffffc
c0017a2c:	01 c2                	add    edx,eax
c0017a2e:	ec                   	in     al,dx
c0017a2f:	c3                   	ret    
c0017a30:	83 e2 f0             	and    edx,0xfffffff0
c0017a33:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0017a36:	c3                   	ret    
c0017a37:	90                   	nop

c0017a38 <PCI::readBAR16(unsigned int, int)>:
c0017a38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a40:	f6 c2 01             	test   dl,0x1
c0017a43:	74 08                	je     c0017a4d <PCI::readBAR16(unsigned int, int)+0x15>
c0017a45:	83 e2 fc             	and    edx,0xfffffffc
c0017a48:	01 c2                	add    edx,eax
c0017a4a:	66 ed                	in     ax,dx
c0017a4c:	c3                   	ret    
c0017a4d:	83 e2 f0             	and    edx,0xfffffff0
c0017a50:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0017a54:	c3                   	ret    
c0017a55:	90                   	nop

c0017a56 <PCI::readBAR32(unsigned int, int)>:
c0017a56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a5e:	f6 c2 01             	test   dl,0x1
c0017a61:	74 07                	je     c0017a6a <PCI::readBAR32(unsigned int, int)+0x14>
c0017a63:	83 e2 fc             	and    edx,0xfffffffc
c0017a66:	01 c2                	add    edx,eax
c0017a68:	ed                   	in     eax,dx
c0017a69:	c3                   	ret    
c0017a6a:	83 e2 f0             	and    edx,0xfffffff0
c0017a6d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0017a70:	c3                   	ret    
c0017a71:	90                   	nop

c0017a72 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0017a72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a7e:	f6 c2 01             	test   dl,0x1
c0017a81:	74 07                	je     c0017a8a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0017a83:	83 e2 fc             	and    edx,0xfffffffc
c0017a86:	01 ca                	add    edx,ecx
c0017a88:	ee                   	out    dx,al
c0017a89:	c3                   	ret    
c0017a8a:	83 e2 f0             	and    edx,0xfffffff0
c0017a8d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0017a90:	c3                   	ret    
c0017a91:	90                   	nop

c0017a92 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0017a92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017a9e:	f6 c2 01             	test   dl,0x1
c0017aa1:	74 08                	je     c0017aab <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0017aa3:	83 e2 fc             	and    edx,0xfffffffc
c0017aa6:	01 ca                	add    edx,ecx
c0017aa8:	66 ef                	out    dx,ax
c0017aaa:	c3                   	ret    
c0017aab:	83 e2 f0             	and    edx,0xfffffff0
c0017aae:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0017ab2:	c3                   	ret    
c0017ab3:	90                   	nop

c0017ab4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0017ab4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ac0:	f6 c2 01             	test   dl,0x1
c0017ac3:	74 07                	je     c0017acc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0017ac5:	83 e2 fc             	and    edx,0xfffffffc
c0017ac8:	01 ca                	add    edx,ecx
c0017aca:	ef                   	out    dx,eax
c0017acb:	c3                   	ret    
c0017acc:	83 e2 f0             	and    edx,0xfffffff0
c0017acf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0017ad2:	c3                   	ret    
c0017ad3:	90                   	nop

c0017ad4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017ad4:	55                   	push   ebp
c0017ad5:	57                   	push   edi
c0017ad6:	56                   	push   esi
c0017ad7:	53                   	push   ebx
c0017ad8:	83 ec 0c             	sub    esp,0xc
c0017adb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017adf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0017ae3:	89 f0                	mov    eax,esi
c0017ae5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0017ae9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017aed:	3c 07                	cmp    al,0x7
c0017aef:	76 10                	jbe    c0017b01 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0017af1:	83 ec 0c             	sub    esp,0xc
c0017af4:	68 9f e6 01 c0       	push   0xc001e69f
c0017af9:	e8 75 79 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	80 fb 0f             	cmp    bl,0xf
c0017b04:	76 10                	jbe    c0017b16 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0017b06:	83 ec 0c             	sub    esp,0xc
c0017b09:	68 cf e6 01 c0       	push   0xc001e6cf
c0017b0e:	e8 60 79 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	8d 04 36             	lea    eax,[esi+esi*1]
c0017b19:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017b1e:	83 c8 f0             	or     eax,0xfffffff0
c0017b21:	ee                   	out    dx,al
c0017b22:	ba fa 0c 00 00       	mov    edx,0xcfa
c0017b27:	89 e8                	mov    eax,ebp
c0017b29:	ee                   	out    dx,al
c0017b2a:	83 c4 0c             	add    esp,0xc
c0017b2d:	89 d8                	mov    eax,ebx
c0017b2f:	66 81 e7 fc 00       	and    di,0xfc
c0017b34:	5b                   	pop    ebx
c0017b35:	c1 e0 08             	shl    eax,0x8
c0017b38:	5e                   	pop    esi
c0017b39:	09 f8                	or     eax,edi
c0017b3b:	5f                   	pop    edi
c0017b3c:	66 0d 00 c0          	or     ax,0xc000
c0017b40:	5d                   	pop    ebp
c0017b41:	c3                   	ret    

c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017b42:	57                   	push   edi
c0017b43:	56                   	push   esi
c0017b44:	53                   	push   ebx
c0017b45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017b49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b4d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0017b53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b57:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017b5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b5f:	83 ff 01             	cmp    edi,0x1
c0017b62:	75 3e                	jne    c0017ba2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0017b64:	89 de                	mov    esi,ebx
c0017b66:	0f b6 c0             	movzx  eax,al
c0017b69:	81 e6 fc 00 00 00    	and    esi,0xfc
c0017b6f:	c1 e0 10             	shl    eax,0x10
c0017b72:	0f b6 c9             	movzx  ecx,cl
c0017b75:	09 f0                	or     eax,esi
c0017b77:	c1 e1 08             	shl    ecx,0x8
c0017b7a:	0f b6 d2             	movzx  edx,dl
c0017b7d:	09 c8                	or     eax,ecx
c0017b7f:	c1 e2 0b             	shl    edx,0xb
c0017b82:	09 d0                	or     eax,edx
c0017b84:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017b89:	0d 00 00 00 80       	or     eax,0x80000000
c0017b8e:	ef                   	out    dx,eax
c0017b8f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017b94:	ed                   	in     eax,dx
c0017b95:	83 e3 02             	and    ebx,0x2
c0017b98:	0f b6 cb             	movzx  ecx,bl
c0017b9b:	c1 e1 03             	shl    ecx,0x3
c0017b9e:	d3 e8                	shr    eax,cl
c0017ba0:	eb 43                	jmp    c0017be5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017ba2:	83 ff 02             	cmp    edi,0x2
c0017ba5:	75 2c                	jne    c0017bd3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0017ba7:	83 ec 0c             	sub    esp,0xc
c0017baa:	0f b6 c9             	movzx  ecx,cl
c0017bad:	0f b6 d2             	movzx  edx,dl
c0017bb0:	0f b6 fb             	movzx  edi,bl
c0017bb3:	0f b6 c0             	movzx  eax,al
c0017bb6:	57                   	push   edi
c0017bb7:	51                   	push   ecx
c0017bb8:	52                   	push   edx
c0017bb9:	50                   	push   eax
c0017bba:	56                   	push   esi
c0017bbb:	e8 14 ff ff ff       	call   c0017ad4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017bc0:	89 c2                	mov    edx,eax
c0017bc2:	ed                   	in     eax,dx
c0017bc3:	83 e3 02             	and    ebx,0x2
c0017bc6:	83 c4 20             	add    esp,0x20
c0017bc9:	0f b6 cb             	movzx  ecx,bl
c0017bcc:	c1 e1 03             	shl    ecx,0x3
c0017bcf:	d3 e8                	shr    eax,cl
c0017bd1:	eb 12                	jmp    c0017be5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0017bd3:	83 ec 0c             	sub    esp,0xc
c0017bd6:	68 ff e6 01 c0       	push   0xc001e6ff
c0017bdb:	e8 93 78 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	31 c0                	xor    eax,eax
c0017be5:	5b                   	pop    ebx
c0017be6:	5e                   	pop    esi
c0017be7:	5f                   	pop    edi
c0017be8:	c3                   	ret    
c0017be9:	90                   	nop

c0017bea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0017bea:	83 ec 18             	sub    esp,0x18
c0017bed:	6a 00                	push   0x0
c0017bef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bf4:	50                   	push   eax
c0017bf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017bfa:	50                   	push   eax
c0017bfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c00:	50                   	push   eax
c0017c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c05:	e8 38 ff ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c0a:	83 c4 2c             	add    esp,0x2c
c0017c0d:	c3                   	ret    

c0017c0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0017c0e:	83 ec 18             	sub    esp,0x18
c0017c11:	6a 0e                	push   0xe
c0017c13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c18:	50                   	push   eax
c0017c19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c1e:	50                   	push   eax
c0017c1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c24:	50                   	push   eax
c0017c25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c29:	e8 14 ff ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c2e:	83 c4 2c             	add    esp,0x2c
c0017c31:	0f b6 c0             	movzx  eax,al
c0017c34:	c3                   	ret    
c0017c35:	90                   	nop

c0017c36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0017c36:	55                   	push   ebp
c0017c37:	57                   	push   edi
c0017c38:	56                   	push   esi
c0017c39:	53                   	push   ebx
c0017c3a:	83 ec 18             	sub    esp,0x18
c0017c3d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0017c42:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0017c47:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0017c4c:	6a 0a                	push   0xa
c0017c4e:	56                   	push   esi
c0017c4f:	55                   	push   ebp
c0017c50:	57                   	push   edi
c0017c51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c55:	e8 e8 fe ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c5a:	83 c4 14             	add    esp,0x14
c0017c5d:	89 c3                	mov    ebx,eax
c0017c5f:	6a 0a                	push   0xa
c0017c61:	0f b6 db             	movzx  ebx,bl
c0017c64:	56                   	push   esi
c0017c65:	55                   	push   ebp
c0017c66:	57                   	push   edi
c0017c67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c6b:	e8 d2 fe ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017c70:	83 c4 2c             	add    esp,0x2c
c0017c73:	25 00 ff 00 00       	and    eax,0xff00
c0017c78:	09 d8                	or     eax,ebx
c0017c7a:	5b                   	pop    ebx
c0017c7b:	5e                   	pop    esi
c0017c7c:	5f                   	pop    edi
c0017c7d:	5d                   	pop    ebp
c0017c7e:	c3                   	ret    
c0017c7f:	90                   	nop

c0017c80 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0017c80:	83 ec 18             	sub    esp,0x18
c0017c83:	6a 08                	push   0x8
c0017c85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c8a:	50                   	push   eax
c0017c8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c90:	50                   	push   eax
c0017c91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017c96:	50                   	push   eax
c0017c97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c9b:	e8 a2 fe ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017ca0:	83 c4 2c             	add    esp,0x2c
c0017ca3:	0f b6 c4             	movzx  eax,ah
c0017ca6:	c3                   	ret    
c0017ca7:	90                   	nop

c0017ca8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0017ca8:	83 ec 18             	sub    esp,0x18
c0017cab:	6a 08                	push   0x8
c0017cad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cb2:	50                   	push   eax
c0017cb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cb8:	50                   	push   eax
c0017cb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cbe:	50                   	push   eax
c0017cbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cc3:	e8 7a fe ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cc8:	83 c4 2c             	add    esp,0x2c
c0017ccb:	c3                   	ret    

c0017ccc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0017ccc:	83 ec 18             	sub    esp,0x18
c0017ccf:	6a 3c                	push   0x3c
c0017cd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cd6:	50                   	push   eax
c0017cd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cdc:	50                   	push   eax
c0017cdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017ce2:	50                   	push   eax
c0017ce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ce7:	e8 56 fe ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017cec:	83 c4 2c             	add    esp,0x2c
c0017cef:	c3                   	ret    

c0017cf0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0017cf0:	83 ec 18             	sub    esp,0x18
c0017cf3:	6a 18                	push   0x18
c0017cf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017cfa:	50                   	push   eax
c0017cfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d00:	50                   	push   eax
c0017d01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017d06:	50                   	push   eax
c0017d07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d0b:	e8 32 fe ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d10:	83 c4 2c             	add    esp,0x2c
c0017d13:	0f b6 c4             	movzx  eax,ah
c0017d16:	c3                   	ret    
c0017d17:	90                   	nop

c0017d18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0017d18:	55                   	push   ebp
c0017d19:	57                   	push   edi
c0017d1a:	56                   	push   esi
c0017d1b:	53                   	push   ebx
c0017d1c:	83 ec 28             	sub    esp,0x28
c0017d1f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0017d23:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0017d28:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0017d2d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0017d32:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0017d39:	8d 43 12             	lea    eax,[ebx+0x12]
c0017d3c:	83 c3 10             	add    ebx,0x10
c0017d3f:	0f b6 c0             	movzx  eax,al
c0017d42:	0f b6 db             	movzx  ebx,bl
c0017d45:	50                   	push   eax
c0017d46:	51                   	push   ecx
c0017d47:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0017d4b:	57                   	push   edi
c0017d4c:	55                   	push   ebp
c0017d4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017d51:	e8 ec fd ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d56:	83 c4 14             	add    esp,0x14
c0017d59:	89 c6                	mov    esi,eax
c0017d5b:	53                   	push   ebx
c0017d5c:	c1 e6 10             	shl    esi,0x10
c0017d5f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d63:	51                   	push   ecx
c0017d64:	57                   	push   edi
c0017d65:	55                   	push   ebp
c0017d66:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017d6a:	e8 d3 fd ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017d6f:	83 c4 3c             	add    esp,0x3c
c0017d72:	0f b7 c0             	movzx  eax,ax
c0017d75:	5b                   	pop    ebx
c0017d76:	09 f0                	or     eax,esi
c0017d78:	5e                   	pop    esi
c0017d79:	5f                   	pop    edi
c0017d7a:	5d                   	pop    ebp
c0017d7b:	c3                   	ret    

c0017d7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0017d7c:	55                   	push   ebp
c0017d7d:	57                   	push   edi
c0017d7e:	56                   	push   esi
c0017d7f:	53                   	push   ebx
c0017d80:	83 ec 0c             	sub    esp,0xc
c0017d83:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017d87:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0017d8b:	89 f5                	mov    ebp,esi
c0017d8d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0017d93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017d9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017da3:	83 f9 01             	cmp    ecx,0x1
c0017da6:	75 5d                	jne    c0017e05 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0017da8:	0f b6 c8             	movzx  ecx,al
c0017dab:	0f b6 d2             	movzx  edx,dl
c0017dae:	c1 e1 10             	shl    ecx,0x10
c0017db1:	c1 e2 0b             	shl    edx,0xb
c0017db4:	89 f0                	mov    eax,esi
c0017db6:	25 fc 00 00 00       	and    eax,0xfc
c0017dbb:	09 c1                	or     ecx,eax
c0017dbd:	89 e8                	mov    eax,ebp
c0017dbf:	0f b6 c0             	movzx  eax,al
c0017dc2:	c1 e0 08             	shl    eax,0x8
c0017dc5:	09 c1                	or     ecx,eax
c0017dc7:	09 d1                	or     ecx,edx
c0017dc9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017dce:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0017dd4:	89 c8                	mov    eax,ecx
c0017dd6:	ef                   	out    dx,eax
c0017dd7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017ddc:	ed                   	in     eax,dx
c0017ddd:	0f b7 db             	movzx  ebx,bx
c0017de0:	83 e6 02             	and    esi,0x2
c0017de3:	74 0a                	je     c0017def <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0017de5:	0f b7 d0             	movzx  edx,ax
c0017de8:	c1 e3 10             	shl    ebx,0x10
c0017deb:	09 d3                	or     ebx,edx
c0017ded:	eb 05                	jmp    c0017df4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0017def:	66 31 c0             	xor    ax,ax
c0017df2:	09 c3                	or     ebx,eax
c0017df4:	ba f8 0c 00 00       	mov    edx,0xcf8
c0017df9:	89 c8                	mov    eax,ecx
c0017dfb:	ef                   	out    dx,eax
c0017dfc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0017e01:	89 d8                	mov    eax,ebx
c0017e03:	eb 41                	jmp    c0017e46 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017e05:	83 f9 02             	cmp    ecx,0x2
c0017e08:	75 45                	jne    c0017e4f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	0f b6 d2             	movzx  edx,dl
c0017e10:	89 f1                	mov    ecx,esi
c0017e12:	0f b6 c0             	movzx  eax,al
c0017e15:	0f b6 f1             	movzx  esi,cl
c0017e18:	89 e9                	mov    ecx,ebp
c0017e1a:	56                   	push   esi
c0017e1b:	0f b6 c9             	movzx  ecx,cl
c0017e1e:	51                   	push   ecx
c0017e1f:	52                   	push   edx
c0017e20:	50                   	push   eax
c0017e21:	57                   	push   edi
c0017e22:	e8 ad fc ff ff       	call   c0017ad4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0017e27:	89 c2                	mov    edx,eax
c0017e29:	ed                   	in     eax,dx
c0017e2a:	83 c4 20             	add    esp,0x20
c0017e2d:	0f b7 db             	movzx  ebx,bx
c0017e30:	f6 c2 02             	test   dl,0x2
c0017e33:	74 0c                	je     c0017e41 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0017e35:	0f b7 c8             	movzx  ecx,ax
c0017e38:	89 d8                	mov    eax,ebx
c0017e3a:	c1 e0 10             	shl    eax,0x10
c0017e3d:	09 c8                	or     eax,ecx
c0017e3f:	eb 05                	jmp    c0017e46 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0017e41:	66 31 c0             	xor    ax,ax
c0017e44:	09 d8                	or     eax,ebx
c0017e46:	ef                   	out    dx,eax
c0017e47:	83 c4 0c             	add    esp,0xc
c0017e4a:	5b                   	pop    ebx
c0017e4b:	5e                   	pop    esi
c0017e4c:	5f                   	pop    edi
c0017e4d:	5d                   	pop    ebp
c0017e4e:	c3                   	ret    
c0017e4f:	c7 44 24 20 ff e6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001e6ff
c0017e57:	83 c4 0c             	add    esp,0xc
c0017e5a:	5b                   	pop    ebx
c0017e5b:	5e                   	pop    esi
c0017e5c:	5f                   	pop    edi
c0017e5d:	5d                   	pop    ebp
c0017e5e:	e9 10 76 ff ff       	jmp    c000f473 <Krnl::panic(char const*)>
c0017e63:	90                   	nop

c0017e64 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0017e64:	55                   	push   ebp
c0017e65:	57                   	push   edi
c0017e66:	56                   	push   esi
c0017e67:	53                   	push   ebx
c0017e68:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017e6e:	80 3d ec 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232ec,0x0
c0017e75:	0f 85 84 00 00 00    	jne    c0017eff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	68 14 01 00 00       	push   0x114
c0017e83:	e8 d9 ec fe ff       	call   c0006b61 <malloc>
c0017e88:	83 c4 0c             	add    esp,0xc
c0017e8b:	89 c3                	mov    ebx,eax
c0017e8d:	ff 35 30 29 02 c0    	push   DWORD PTR ds:0xc0022930
c0017e93:	68 05 e7 01 c0       	push   0xc001e705
c0017e98:	50                   	push   eax
c0017e99:	e8 fc 1f ff ff       	call   c0009e9a <File::File(char const*, Process*)>
c0017e9e:	5a                   	pop    edx
c0017e9f:	59                   	pop    ecx
c0017ea0:	6a 01                	push   0x1
c0017ea2:	53                   	push   ebx
c0017ea3:	e8 b2 20 ff ff       	call   c0009f5a <File::open(FileOpenMode)>
c0017ea8:	83 c4 0c             	add    esp,0xc
c0017eab:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0017eaf:	50                   	push   eax
c0017eb0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017eb4:	50                   	push   eax
c0017eb5:	53                   	push   ebx
c0017eb6:	e8 4b 23 ff ff       	call   c000a206 <File::stat(unsigned long long*, bool*)>
c0017ebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ebf:	40                   	inc    eax
c0017ec0:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ec3:	e8 99 ec fe ff       	call   c0006b61 <malloc>
c0017ec8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ecc:	a3 e8 32 02 c0       	mov    ds:0xc00232e8,eax
c0017ed1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0017ed5:	5e                   	pop    esi
c0017ed6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017ed8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017edc:	51                   	push   ecx
c0017edd:	50                   	push   eax
c0017ede:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017ee2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017ee6:	53                   	push   ebx
c0017ee7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017eea:	83 c4 14             	add    esp,0x14
c0017eed:	53                   	push   ebx
c0017eee:	e8 c5 20 ff ff       	call   c0009fb8 <File::close()>
c0017ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ef7:	83 c4 10             	add    esp,0x10
c0017efa:	a3 e4 32 02 c0       	mov    ds:0xc00232e4,eax
c0017eff:	a1 e4 32 02 c0       	mov    eax,ds:0xc00232e4
c0017f04:	8b 15 e8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232e8
c0017f0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f0d:	31 ff                	xor    edi,edi
c0017f0f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0017f17:	31 f6                	xor    esi,esi
c0017f19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0017f1e:	31 db                	xor    ebx,ebx
c0017f20:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0017f28:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017f2d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0017f34:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0017f38:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0017f3f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017f43:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0017f46:	0f 8e 6b 01 00 00    	jle    c00180b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0017f4c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0017f4f:	d4 40                	aam    0x40
c0017f51:	d5 39                	aad    0x39
c0017f53:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f57:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0017f5b:	d4 40                	aam    0x40
c0017f5d:	d5 39                	aad    0x39
c0017f5f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017f63:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0017f67:	d4 40                	aam    0x40
c0017f69:	d5 39                	aad    0x39
c0017f6b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f6f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0017f73:	d4 40                	aam    0x40
c0017f75:	d5 39                	aad    0x39
c0017f77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f7b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0017f7f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017f83:	3c 56                	cmp    al,0x56
c0017f85:	74 45                	je     c0017fcc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0017f87:	d4 40                	aam    0x40
c0017f89:	d5 39                	aad    0x39
c0017f8b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017f8e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0017f92:	0f b6 c9             	movzx  ecx,cl
c0017f95:	c1 e1 04             	shl    ecx,0x4
c0017f98:	d4 40                	aam    0x40
c0017f9a:	d5 39                	aad    0x39
c0017f9c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017f9f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0017fa3:	0f b6 db             	movzx  ebx,bl
c0017fa6:	09 cb                	or     ebx,ecx
c0017fa8:	c1 e3 04             	shl    ebx,0x4
c0017fab:	d4 40                	aam    0x40
c0017fad:	d5 39                	aad    0x39
c0017faf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0017fb2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0017fb6:	0f b6 c9             	movzx  ecx,cl
c0017fb9:	09 cb                	or     ebx,ecx
c0017fbb:	c1 e3 04             	shl    ebx,0x4
c0017fbe:	89 d9                	mov    ecx,ebx
c0017fc0:	d4 40                	aam    0x40
c0017fc2:	d5 39                	aad    0x39
c0017fc4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0017fc7:	0f b6 db             	movzx  ebx,bl
c0017fca:	09 cb                	or     ebx,ecx
c0017fcc:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0017fd0:	80 f9 44             	cmp    cl,0x44
c0017fd3:	74 47                	je     c001801c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0017fd5:	88 c8                	mov    al,cl
c0017fd7:	d4 40                	aam    0x40
c0017fd9:	d5 39                	aad    0x39
c0017fdb:	83 e8 30             	sub    eax,0x30
c0017fde:	0f b6 e8             	movzx  ebp,al
c0017fe1:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0017fe5:	c1 e5 04             	shl    ebp,0x4
c0017fe8:	d4 40                	aam    0x40
c0017fea:	d5 39                	aad    0x39
c0017fec:	83 e8 30             	sub    eax,0x30
c0017fef:	0f b6 f0             	movzx  esi,al
c0017ff2:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0017ff6:	09 ee                	or     esi,ebp
c0017ff8:	c1 e6 04             	shl    esi,0x4
c0017ffb:	d4 40                	aam    0x40
c0017ffd:	d5 39                	aad    0x39
c0017fff:	83 e8 30             	sub    eax,0x30
c0018002:	0f b6 e8             	movzx  ebp,al
c0018005:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018009:	09 ee                	or     esi,ebp
c001800b:	c1 e6 04             	shl    esi,0x4
c001800e:	89 f5                	mov    ebp,esi
c0018010:	d4 40                	aam    0x40
c0018012:	d5 39                	aad    0x39
c0018014:	83 e8 30             	sub    eax,0x30
c0018017:	0f b6 f0             	movzx  esi,al
c001801a:	09 ee                	or     esi,ebp
c001801c:	83 c7 10             	add    edi,0x10
c001801f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018023:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018026:	3c 0a                	cmp    al,0xa
c0018028:	74 09                	je     c0018033 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001802a:	45                   	inc    ebp
c001802b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001802e:	75 16                	jne    c0018046 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018030:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018033:	3c 0a                	cmp    al,0xa
c0018035:	0f 94 c0             	sete   al
c0018038:	0f b6 c0             	movzx  eax,al
c001803b:	01 c7                	add    edi,eax
c001803d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018042:	75 0c                	jne    c0018050 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018044:	eb 15                	jmp    c001805b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018046:	47                   	inc    edi
c0018047:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001804a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001804e:	eb d3                	jmp    c0018023 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018050:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018055:	0f 85 e8 fe ff ff    	jne    c0017f43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001805b:	80 f9 44             	cmp    cl,0x44
c001805e:	74 0b                	je     c001806b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018060:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018065:	0f 85 d8 fe ff ff    	jne    c0017f43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001806b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001806f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018073:	c1 e1 04             	shl    ecx,0x4
c0018076:	83 e8 30             	sub    eax,0x30
c0018079:	09 c8                	or     eax,ecx
c001807b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001807f:	0f 85 be fe ff ff    	jne    c0017f43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018085:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018089:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001808d:	c1 e1 04             	shl    ecx,0x4
c0018090:	83 e8 30             	sub    eax,0x30
c0018093:	09 c8                	or     eax,ecx
c0018095:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018099:	0f 85 a4 fe ff ff    	jne    c0017f43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001809f:	50                   	push   eax
c00180a0:	50                   	push   eax
c00180a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00180a5:	50                   	push   eax
c00180a6:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00180ad:	e8 6e 85 fe ff       	call   c0000620 <strcpy>
c00180b2:	83 c4 10             	add    esp,0x10
c00180b5:	eb 15                	jmp    c00180cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00180b7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00180be:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00180c9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00180cc:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00180d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00180d9:	5b                   	pop    ebx
c00180da:	5e                   	pop    esi
c00180db:	5f                   	pop    edi
c00180dc:	5d                   	pop    ebp
c00180dd:	c3                   	ret    

c00180de <PCI::checkBus(unsigned char)>:
c00180de:	56                   	push   esi
c00180df:	53                   	push   ebx
c00180e0:	31 f6                	xor    esi,esi
c00180e2:	51                   	push   ecx
c00180e3:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c00180e7:	0f b6 c3             	movzx  eax,bl
c00180ea:	52                   	push   edx
c00180eb:	56                   	push   esi
c00180ec:	46                   	inc    esi
c00180ed:	50                   	push   eax
c00180ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180f2:	e8 f3 02 00 00       	call   c00183ea <PCI::checkDevice(unsigned char, unsigned char)>
c00180f7:	83 c4 10             	add    esp,0x10
c00180fa:	83 fe 20             	cmp    esi,0x20
c00180fd:	75 e8                	jne    c00180e7 <PCI::checkBus(unsigned char)+0x9>
c00180ff:	58                   	pop    eax
c0018100:	5b                   	pop    ebx
c0018101:	5e                   	pop    esi
c0018102:	c3                   	ret    
c0018103:	90                   	nop

c0018104 <PCI::foundDevice(PCIDeviceInfo)>:
c0018104:	55                   	push   ebp
c0018105:	57                   	push   edi
c0018106:	56                   	push   esi
c0018107:	53                   	push   ebx
c0018108:	83 ec 1c             	sub    esp,0x1c
c001810b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001810f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018115:	0f 84 52 01 00 00    	je     c001826d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001811b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001811f:	66 81 f9 06 04       	cmp    cx,0x406
c0018124:	75 2c                	jne    c0018152 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018126:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001812b:	50                   	push   eax
c001812c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018131:	50                   	push   eax
c0018132:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018137:	50                   	push   eax
c0018138:	56                   	push   esi
c0018139:	e8 b2 fb ff ff       	call   c0017cf0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001813e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018142:	0f b6 c0             	movzx  eax,al
c0018145:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018149:	83 c4 2c             	add    esp,0x2c
c001814c:	5b                   	pop    ebx
c001814d:	5e                   	pop    esi
c001814e:	5f                   	pop    edi
c001814f:	5d                   	pop    ebp
c0018150:	eb 8c                	jmp    c00180de <PCI::checkBus(unsigned char)>
c0018152:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018156:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001815c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018160:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018164:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018168:	88 d3                	mov    bl,dl
c001816a:	85 c0                	test   eax,eax
c001816c:	74 33                	je     c00181a1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001816e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018171:	85 d2                	test   edx,edx
c0018173:	74 28                	je     c001819d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018175:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001817b:	31 ef                	xor    edi,ebp
c001817d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018183:	75 18                	jne    c001819d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018185:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018189:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001818f:	75 0c                	jne    c001819d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018191:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018197:	0f 84 d0 00 00 00    	je     c001826d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001819d:	8b 00                	mov    eax,DWORD PTR [eax]
c001819f:	eb c9                	jmp    c001816a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00181a1:	66 81 f9 01 06       	cmp    cx,0x601
c00181a6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00181aa:	75 19                	jne    c00181c5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00181ac:	83 ec 0c             	sub    esp,0xc
c00181af:	68 64 01 00 00       	push   0x164
c00181b4:	e8 a8 e9 fe ff       	call   c0006b61 <malloc>
c00181b9:	89 c5                	mov    ebp,eax
c00181bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00181be:	e8 47 0e 00 00       	call   c001900a <SATABus::SATABus()>
c00181c3:	eb 1e                	jmp    c00181e3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00181c5:	66 81 f9 01 01       	cmp    cx,0x101
c00181ca:	75 60                	jne    c001822c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00181cc:	83 ec 0c             	sub    esp,0xc
c00181cf:	68 70 02 00 00       	push   0x270
c00181d4:	e8 88 e9 fe ff       	call   c0006b61 <malloc>
c00181d9:	89 c5                	mov    ebp,eax
c00181db:	89 04 24             	mov    DWORD PTR [esp],eax
c00181de:	e8 cb 02 00 00       	call   c00184ae <IDE::IDE()>
c00181e3:	58                   	pop    eax
c00181e4:	5a                   	pop    edx
c00181e5:	55                   	push   ebp
c00181e6:	56                   	push   esi
c00181e7:	e8 78 2b ff ff       	call   c000ad64 <Device::addChild(Device*)>
c00181ec:	83 ec 1c             	sub    esp,0x1c
c00181ef:	b9 09 00 00 00       	mov    ecx,0x9
c00181f4:	fc                   	cld    
c00181f5:	89 e7                	mov    edi,esp
c00181f7:	89 de                	mov    esi,ebx
c00181f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00181fb:	55                   	push   ebp
c00181fc:	e8 a9 2a ff ff       	call   c000acaa <Device::preOpenPCI(PCIDeviceInfo)>
c0018201:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018204:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018208:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018210:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018218:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018220:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018223:	83 c4 4c             	add    esp,0x4c
c0018226:	5b                   	pop    ebx
c0018227:	5e                   	pop    esi
c0018228:	5f                   	pop    edi
c0018229:	5d                   	pop    ebp
c001822a:	ff e0                	jmp    eax
c001822c:	83 ec 0c             	sub    esp,0xc
c001822f:	68 58 01 00 00       	push   0x158
c0018234:	e8 28 e9 fe ff       	call   c0006b61 <malloc>
c0018239:	89 c5                	mov    ebp,eax
c001823b:	58                   	pop    eax
c001823c:	5a                   	pop    edx
c001823d:	68 1e e7 01 c0       	push   0xc001e71e
c0018242:	55                   	push   ebp
c0018243:	e8 ba 2d ff ff       	call   c000b002 <DriverlessDevice::DriverlessDevice(char const*)>
c0018248:	59                   	pop    ecx
c0018249:	5f                   	pop    edi
c001824a:	55                   	push   ebp
c001824b:	56                   	push   esi
c001824c:	e8 13 2b ff ff       	call   c000ad64 <Device::addChild(Device*)>
c0018251:	b9 09 00 00 00       	mov    ecx,0x9
c0018256:	fc                   	cld    
c0018257:	89 df                	mov    edi,ebx
c0018259:	89 de                	mov    esi,ebx
c001825b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001825d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018261:	83 c4 2c             	add    esp,0x2c
c0018264:	5b                   	pop    ebx
c0018265:	5e                   	pop    esi
c0018266:	5f                   	pop    edi
c0018267:	5d                   	pop    ebp
c0018268:	e9 3d 2a ff ff       	jmp    c000acaa <Device::preOpenPCI(PCIDeviceInfo)>
c001826d:	83 c4 1c             	add    esp,0x1c
c0018270:	5b                   	pop    ebx
c0018271:	5e                   	pop    esi
c0018272:	5f                   	pop    edi
c0018273:	5d                   	pop    ebp
c0018274:	c3                   	ret    
c0018275:	90                   	nop

c0018276 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018276:	55                   	push   ebp
c0018277:	57                   	push   edi
c0018278:	56                   	push   esi
c0018279:	53                   	push   ebx
c001827a:	83 ec 68             	sub    esp,0x68
c001827d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018281:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018288:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001828c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018293:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018298:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001829c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00182a3:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c00182a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00182ac:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00182b1:	6a 0c                	push   0xc
c00182b3:	57                   	push   edi
c00182b4:	53                   	push   ebx
c00182b5:	56                   	push   esi
c00182b6:	55                   	push   ebp
c00182b7:	e8 86 f8 ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182bc:	83 c4 20             	add    esp,0x20
c00182bf:	57                   	push   edi
c00182c0:	53                   	push   ebx
c00182c1:	56                   	push   esi
c00182c2:	55                   	push   ebp
c00182c3:	e8 6e f9 ff ff       	call   c0017c36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00182c8:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00182cd:	57                   	push   edi
c00182ce:	53                   	push   ebx
c00182cf:	56                   	push   esi
c00182d0:	55                   	push   ebp
c00182d1:	e8 f6 f9 ff ff       	call   c0017ccc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00182d6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00182da:	83 c4 14             	add    esp,0x14
c00182dd:	6a 3c                	push   0x3c
c00182df:	57                   	push   edi
c00182e0:	53                   	push   ebx
c00182e1:	56                   	push   esi
c00182e2:	55                   	push   ebp
c00182e3:	e8 5a f8 ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182e8:	0f b6 c4             	movzx  eax,ah
c00182eb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182ef:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00182f3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00182f7:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c00182fc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018302:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018308:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001830c:	83 c4 20             	add    esp,0x20
c001830f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018314:	74 30                	je     c0018346 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018316:	31 c0                	xor    eax,eax
c0018318:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001831c:	7e 28                	jle    c0018346 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001831e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018326:	39 cb                	cmp    ebx,ecx
c0018328:	75 19                	jne    c0018343 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001832a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018332:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018336:	75 0b                	jne    c0018343 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018338:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001833f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018343:	40                   	inc    eax
c0018344:	eb d2                	jmp    c0018318 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018346:	31 d2                	xor    edx,edx
c0018348:	83 ec 0c             	sub    esp,0xc
c001834b:	57                   	push   edi
c001834c:	53                   	push   ebx
c001834d:	56                   	push   esi
c001834e:	52                   	push   edx
c001834f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018353:	55                   	push   ebp
c0018354:	e8 bf f9 ff ff       	call   c0017d18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018359:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001835d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018361:	42                   	inc    edx
c0018362:	83 c4 20             	add    esp,0x20
c0018365:	83 fa 06             	cmp    edx,0x6
c0018368:	75 de                	jne    c0018348 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001836a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001836f:	83 ec 0c             	sub    esp,0xc
c0018372:	86 e0                	xchg   al,ah
c0018374:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018379:	6a 02                	push   0x2
c001837b:	57                   	push   edi
c001837c:	53                   	push   ebx
c001837d:	56                   	push   esi
c001837e:	55                   	push   ebp
c001837f:	e8 be f7 ff ff       	call   c0017b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018384:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018389:	83 c4 20             	add    esp,0x20
c001838c:	57                   	push   edi
c001838d:	53                   	push   ebx
c001838e:	56                   	push   esi
c001838f:	55                   	push   ebp
c0018390:	e8 eb f8 ff ff       	call   c0017c80 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018395:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018399:	57                   	push   edi
c001839a:	53                   	push   ebx
c001839b:	56                   	push   esi
c001839c:	55                   	push   ebp
c001839d:	e8 48 f8 ff ff       	call   c0017bea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00183a2:	b9 09 00 00 00       	mov    ecx,0x9
c00183a7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00183ac:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c00183b0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00183b4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00183b8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00183bc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00183c0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00183c4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c00183c8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00183cc:	83 ec 0c             	sub    esp,0xc
c00183cf:	fc                   	cld    
c00183d0:	89 e7                	mov    edi,esp
c00183d2:	8d 74 24 58          	lea    esi,[esp+0x58]
c00183d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00183d8:	55                   	push   ebp
c00183d9:	e8 26 fd ff ff       	call   c0018104 <PCI::foundDevice(PCIDeviceInfo)>
c00183de:	81 c4 8c 00 00 00    	add    esp,0x8c
c00183e4:	5b                   	pop    ebx
c00183e5:	5e                   	pop    esi
c00183e6:	5f                   	pop    edi
c00183e7:	5d                   	pop    ebp
c00183e8:	c3                   	ret    
c00183e9:	90                   	nop

c00183ea <PCI::checkDevice(unsigned char, unsigned char)>:
c00183ea:	55                   	push   ebp
c00183eb:	57                   	push   edi
c00183ec:	56                   	push   esi
c00183ed:	53                   	push   ebx
c00183ee:	83 ec 0c             	sub    esp,0xc
c00183f1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00183f5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00183fa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00183ff:	6a 00                	push   0x0
c0018401:	56                   	push   esi
c0018402:	57                   	push   edi
c0018403:	55                   	push   ebp
c0018404:	e8 e1 f7 ff ff       	call   c0017bea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018409:	6a 00                	push   0x0
c001840b:	56                   	push   esi
c001840c:	57                   	push   edi
c001840d:	55                   	push   ebp
c001840e:	e8 63 fe ff ff       	call   c0018276 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018413:	83 c4 20             	add    esp,0x20
c0018416:	6a 00                	push   0x0
c0018418:	56                   	push   esi
c0018419:	57                   	push   edi
c001841a:	55                   	push   ebp
c001841b:	e8 ee f7 ff ff       	call   c0017c0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	84 c0                	test   al,al
c0018425:	79 27                	jns    c001844e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018427:	bb 01 00 00 00       	mov    ebx,0x1
c001842c:	53                   	push   ebx
c001842d:	56                   	push   esi
c001842e:	57                   	push   edi
c001842f:	55                   	push   ebp
c0018430:	e8 b5 f7 ff ff       	call   c0017bea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018435:	83 c4 10             	add    esp,0x10
c0018438:	66 40                	inc    ax
c001843a:	74 0c                	je     c0018448 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001843c:	53                   	push   ebx
c001843d:	56                   	push   esi
c001843e:	57                   	push   edi
c001843f:	55                   	push   ebp
c0018440:	e8 31 fe ff ff       	call   c0018276 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	43                   	inc    ebx
c0018449:	83 fb 08             	cmp    ebx,0x8
c001844c:	75 de                	jne    c001842c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001844e:	83 c4 0c             	add    esp,0xc
c0018451:	5b                   	pop    ebx
c0018452:	5e                   	pop    esi
c0018453:	5f                   	pop    edi
c0018454:	5d                   	pop    ebp
c0018455:	c3                   	ret    

c0018456 <PCI::detect()>:
c0018456:	56                   	push   esi
c0018457:	53                   	push   ebx
c0018458:	53                   	push   ebx
c0018459:	31 db                	xor    ebx,ebx
c001845b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001845f:	6a 00                	push   0x0
c0018461:	6a 00                	push   0x0
c0018463:	6a 00                	push   0x0
c0018465:	56                   	push   esi
c0018466:	e8 a3 f7 ff ff       	call   c0017c0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001846b:	83 c4 10             	add    esp,0x10
c001846e:	a8 80                	test   al,0x80
c0018470:	75 21                	jne    c0018493 <PCI::detect()+0x3d>
c0018472:	51                   	push   ecx
c0018473:	51                   	push   ecx
c0018474:	6a 00                	push   0x0
c0018476:	56                   	push   esi
c0018477:	e8 62 fc ff ff       	call   c00180de <PCI::checkBus(unsigned char)>
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	eb 24                	jmp    c00184a5 <PCI::detect()+0x4f>
c0018481:	52                   	push   edx
c0018482:	52                   	push   edx
c0018483:	53                   	push   ebx
c0018484:	43                   	inc    ebx
c0018485:	56                   	push   esi
c0018486:	e8 53 fc ff ff       	call   c00180de <PCI::checkBus(unsigned char)>
c001848b:	83 c4 10             	add    esp,0x10
c001848e:	83 fb 08             	cmp    ebx,0x8
c0018491:	74 12                	je     c00184a5 <PCI::detect()+0x4f>
c0018493:	53                   	push   ebx
c0018494:	6a 00                	push   0x0
c0018496:	6a 00                	push   0x0
c0018498:	56                   	push   esi
c0018499:	e8 4c f7 ff ff       	call   c0017bea <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001849e:	83 c4 10             	add    esp,0x10
c00184a1:	66 40                	inc    ax
c00184a3:	74 dc                	je     c0018481 <PCI::detect()+0x2b>
c00184a5:	58                   	pop    eax
c00184a6:	5b                   	pop    ebx
c00184a7:	5e                   	pop    esi
c00184a8:	c3                   	ret    
c00184a9:	90                   	nop

c00184aa <IDE::close(int, int, void*)>:
c00184aa:	83 c8 ff             	or     eax,0xffffffff
c00184ad:	c3                   	ret    

c00184ae <IDE::IDE()>:
c00184ae:	83 ec 0c             	sub    esp,0xc
c00184b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b5:	83 ec 08             	sub    esp,0x8
c00184b8:	68 64 e7 01 c0       	push   0xc001e764
c00184bd:	50                   	push   eax
c00184be:	e8 e5 2b ff ff       	call   c000b0a8 <HardDiskController::HardDiskController(char const*)>
c00184c3:	83 c4 10             	add    esp,0x10
c00184c6:	ba f4 e7 01 c0       	mov    edx,0xc001e7f4
c00184cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184cf:	89 10                	mov    DWORD PTR [eax],edx
c00184d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00184dc:	90                   	nop
c00184dd:	83 c4 0c             	add    esp,0xc
c00184e0:	c3                   	ret    
c00184e1:	90                   	nop

c00184e2 <IDE::prepareInterrupt(unsigned char)>:
c00184e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184eb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00184f3:	c3                   	ret    

c00184f4 <selectDrive(unsigned char, unsigned char)>:
c00184f4:	c3                   	ret    
c00184f5:	90                   	nop

c00184f6 <IDE::getBase(unsigned char)>:
c00184f6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00184fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ff:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018507:	c3                   	ret    

c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018508:	55                   	push   ebp
c0018509:	57                   	push   edi
c001850a:	56                   	push   esi
c001850b:	53                   	push   ebx
c001850c:	83 ec 1c             	sub    esp,0x1c
c001850f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018513:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018517:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001851a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001851e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018522:	80 f9 03             	cmp    cl,0x3
c0018525:	77 51                	ja     c0018578 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018527:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001852b:	0f b6 f2             	movzx  esi,dl
c001852e:	0f b6 db             	movzx  ebx,bl
c0018531:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018534:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018538:	83 ca 80             	or     edx,0xffffff80
c001853b:	0f b6 d2             	movzx  edx,dl
c001853e:	52                   	push   edx
c001853f:	6a 0c                	push   0xc
c0018541:	56                   	push   esi
c0018542:	57                   	push   edi
c0018543:	e8 c0 ff ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018548:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001854d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018551:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018555:	ee                   	out    dx,al
c0018556:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001855b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001855f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018563:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018567:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001856f:	83 c4 2c             	add    esp,0x2c
c0018572:	5b                   	pop    ebx
c0018573:	5e                   	pop    esi
c0018574:	5f                   	pop    edi
c0018575:	5d                   	pop    ebp
c0018576:	eb 90                	jmp    c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018578:	80 fb 07             	cmp    bl,0x7
c001857b:	77 12                	ja     c001858f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001857d:	0f b6 d2             	movzx  edx,dl
c0018580:	0f b6 db             	movzx  ebx,bl
c0018583:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001858b:	89 da                	mov    edx,ebx
c001858d:	eb 2f                	jmp    c00185be <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001858f:	80 fb 0d             	cmp    bl,0xd
c0018592:	77 13                	ja     c00185a7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018594:	0f b6 d2             	movzx  edx,dl
c0018597:	0f b6 db             	movzx  ebx,bl
c001859a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00185a1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00185a5:	eb 17                	jmp    c00185be <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00185a7:	80 fb 15             	cmp    bl,0x15
c00185aa:	77 13                	ja     c00185bf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00185ac:	0f b6 d2             	movzx  edx,dl
c00185af:	0f b6 db             	movzx  ebx,bl
c00185b2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00185ba:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00185be:	ee                   	out    dx,al
c00185bf:	83 c4 1c             	add    esp,0x1c
c00185c2:	5b                   	pop    ebx
c00185c3:	5e                   	pop    esi
c00185c4:	5f                   	pop    edi
c00185c5:	5d                   	pop    ebp
c00185c6:	c3                   	ret    
c00185c7:	90                   	nop

c00185c8 <IDE::read(unsigned char, unsigned char)>:
c00185c8:	55                   	push   ebp
c00185c9:	57                   	push   edi
c00185ca:	56                   	push   esi
c00185cb:	53                   	push   ebx
c00185cc:	83 ec 1c             	sub    esp,0x1c
c00185cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00185d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185d7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00185da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185de:	3c 03                	cmp    al,0x3
c00185e0:	77 43                	ja     c0018625 <IDE::read(unsigned char, unsigned char)+0x5d>
c00185e2:	0f b6 f2             	movzx  esi,dl
c00185e5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00185e8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00185ec:	83 c8 80             	or     eax,0xffffff80
c00185ef:	0f b6 c0             	movzx  eax,al
c00185f2:	50                   	push   eax
c00185f3:	6a 0c                	push   0xc
c00185f5:	56                   	push   esi
c00185f6:	57                   	push   edi
c00185f7:	e8 0c ff ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00185fc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018601:	0f b6 c3             	movzx  eax,bl
c0018604:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018608:	ec                   	in     al,dx
c0018609:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001860d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018612:	52                   	push   edx
c0018613:	6a 0c                	push   0xc
c0018615:	56                   	push   esi
c0018616:	57                   	push   edi
c0018617:	e8 ec fe ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001861c:	83 c4 20             	add    esp,0x20
c001861f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018623:	eb 49                	jmp    c001866e <IDE::read(unsigned char, unsigned char)+0xa6>
c0018625:	80 fb 07             	cmp    bl,0x7
c0018628:	77 12                	ja     c001863c <IDE::read(unsigned char, unsigned char)+0x74>
c001862a:	0f b6 d2             	movzx  edx,dl
c001862d:	0f b6 c3             	movzx  eax,bl
c0018630:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018638:	89 c2                	mov    edx,eax
c001863a:	eb 31                	jmp    c001866d <IDE::read(unsigned char, unsigned char)+0xa5>
c001863c:	80 fb 0d             	cmp    bl,0xd
c001863f:	77 13                	ja     c0018654 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018641:	0f b6 d2             	movzx  edx,dl
c0018644:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001864b:	0f b6 d3             	movzx  edx,bl
c001864e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018652:	eb 19                	jmp    c001866d <IDE::read(unsigned char, unsigned char)+0xa5>
c0018654:	31 c0                	xor    eax,eax
c0018656:	80 fb 15             	cmp    bl,0x15
c0018659:	77 13                	ja     c001866e <IDE::read(unsigned char, unsigned char)+0xa6>
c001865b:	0f b6 d2             	movzx  edx,dl
c001865e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018666:	0f b6 d3             	movzx  edx,bl
c0018669:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001866d:	ec                   	in     al,dx
c001866e:	83 c4 1c             	add    esp,0x1c
c0018671:	5b                   	pop    ebx
c0018672:	5e                   	pop    esi
c0018673:	5f                   	pop    edi
c0018674:	5d                   	pop    ebp
c0018675:	c3                   	ret    

c0018676 <IDE::waitInterrupt(unsigned char)>:
c0018676:	57                   	push   edi
c0018677:	56                   	push   esi
c0018678:	31 f6                	xor    esi,esi
c001867a:	53                   	push   ebx
c001867b:	83 ec 10             	sub    esp,0x10
c001867e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018682:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018686:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001868a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001868f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018696:	84 db                	test   bl,bl
c0018698:	75 33                	jne    c00186cd <IDE::waitInterrupt(unsigned char)+0x57>
c001869a:	52                   	push   edx
c001869b:	6a 0c                	push   0xc
c001869d:	50                   	push   eax
c001869e:	57                   	push   edi
c001869f:	e8 24 ff ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c00186a4:	83 c4 10             	add    esp,0x10
c00186a7:	a8 01                	test   al,0x1
c00186a9:	75 2a                	jne    c00186d5 <IDE::waitInterrupt(unsigned char)+0x5f>
c00186ab:	f7 c6 04 00 00 00    	test   esi,0x4
c00186b1:	75 12                	jne    c00186c5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00186b3:	83 fe 32             	cmp    esi,0x32
c00186b6:	7e 0d                	jle    c00186c5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00186b8:	83 ec 0c             	sub    esp,0xc
c00186bb:	6a 64                	push   0x64
c00186bd:	e8 26 a5 ff ff       	call   c0012be8 <milliTenthSleep(unsigned int)>
c00186c2:	83 c4 10             	add    esp,0x10
c00186c5:	83 fe 3c             	cmp    esi,0x3c
c00186c8:	74 0b                	je     c00186d5 <IDE::waitInterrupt(unsigned char)+0x5f>
c00186ca:	46                   	inc    esi
c00186cb:	eb bd                	jmp    c001868a <IDE::waitInterrupt(unsigned char)+0x14>
c00186cd:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	88 d8                	mov    al,bl
c00186da:	5b                   	pop    ebx
c00186db:	5e                   	pop    esi
c00186dc:	5f                   	pop    edi
c00186dd:	c3                   	ret    

c00186de <ideChannel0IRQHandler(regs*, void*)>:
c00186de:	83 ec 10             	sub    esp,0x10
c00186e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186e5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00186ec:	6a 07                	push   0x7
c00186ee:	6a 00                	push   0x0
c00186f0:	50                   	push   eax
c00186f1:	e8 d2 fe ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c00186f6:	83 c4 1c             	add    esp,0x1c
c00186f9:	c3                   	ret    

c00186fa <ideChannel1IRQHandler(regs*, void*)>:
c00186fa:	83 ec 10             	sub    esp,0x10
c00186fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018701:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018708:	6a 07                	push   0x7
c001870a:	6a 01                	push   0x1
c001870c:	50                   	push   eax
c001870d:	e8 b6 fe ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018712:	83 c4 1c             	add    esp,0x1c
c0018715:	c3                   	ret    

c0018716 <IDE::enableIRQs(unsigned char, bool)>:
c0018716:	57                   	push   edi
c0018717:	56                   	push   esi
c0018718:	be 04 00 00 00       	mov    esi,0x4
c001871d:	53                   	push   ebx
c001871e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018723:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018727:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001872c:	0f 94 c0             	sete   al
c001872f:	01 c0                	add    eax,eax
c0018731:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018738:	0f b6 c0             	movzx  eax,al
c001873b:	50                   	push   eax
c001873c:	6a 0c                	push   0xc
c001873e:	57                   	push   edi
c001873f:	53                   	push   ebx
c0018740:	e8 c3 fd ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018745:	83 c4 10             	add    esp,0x10
c0018748:	50                   	push   eax
c0018749:	6a 0c                	push   0xc
c001874b:	57                   	push   edi
c001874c:	53                   	push   ebx
c001874d:	e8 76 fe ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018752:	83 c4 10             	add    esp,0x10
c0018755:	4e                   	dec    esi
c0018756:	75 f0                	jne    c0018748 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018758:	5b                   	pop    ebx
c0018759:	5e                   	pop    esi
c001875a:	5f                   	pop    edi
c001875b:	c3                   	ret    

c001875c <IDE::open(int, int, void*)>:
c001875c:	55                   	push   ebp
c001875d:	57                   	push   edi
c001875e:	56                   	push   esi
c001875f:	53                   	push   ebx
c0018760:	83 ec 1c             	sub    esp,0x1c
c0018763:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018767:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018770:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018779:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018780:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018787:	0f 85 b0 02 00 00    	jne    c0018a3d <IDE::open(int, int, void*)+0x2e1>
c001878d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018793:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018797:	83 e0 7f             	and    eax,0x7f
c001879a:	3c 05                	cmp    al,0x5
c001879c:	74 04                	je     c00187a2 <IDE::open(int, int, void*)+0x46>
c001879e:	3c 0f                	cmp    al,0xf
c00187a0:	75 32                	jne    c00187d4 <IDE::open(int, int, void*)+0x78>
c00187a2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00187a8:	83 e0 fc             	and    eax,0xfffffffc
c00187ab:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00187b2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00187b8:	83 e0 fc             	and    eax,0xfffffffc
c00187bb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00187c2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00187c8:	83 e0 fc             	and    eax,0xfffffffc
c00187cb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00187d2:	eb 14                	jmp    c00187e8 <IDE::open(int, int, void*)+0x8c>
c00187d4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00187de:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00187e8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00187ef:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00187f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187fa:	89 c6                	mov    esi,eax
c00187fc:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018801:	c1 e6 10             	shl    esi,0x10
c0018804:	89 e8                	mov    eax,ebp
c0018806:	89 fa                	mov    edx,edi
c0018808:	c1 e0 0b             	shl    eax,0xb
c001880b:	09 f0                	or     eax,esi
c001880d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018814:	c1 e6 08             	shl    esi,0x8
c0018817:	09 c6                	or     esi,eax
c0018819:	89 f0                	mov    eax,esi
c001881b:	0d 08 00 00 80       	or     eax,0x80000008
c0018820:	ef                   	out    dx,eax
c0018821:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018826:	89 ca                	mov    edx,ecx
c0018828:	ed                   	in     eax,dx
c0018829:	c1 e8 10             	shr    eax,0x10
c001882c:	3d ff ff 00 00       	cmp    eax,0xffff
c0018831:	0f 84 f5 00 00 00    	je     c001892c <IDE::open(int, int, void*)+0x1d0>
c0018837:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001883d:	89 fa                	mov    edx,edi
c001883f:	89 f0                	mov    eax,esi
c0018841:	ef                   	out    dx,eax
c0018842:	b0 fe                	mov    al,0xfe
c0018844:	89 ca                	mov    edx,ecx
c0018846:	ee                   	out    dx,al
c0018847:	89 f0                	mov    eax,esi
c0018849:	89 fa                	mov    edx,edi
c001884b:	ef                   	out    dx,eax
c001884c:	89 ca                	mov    edx,ecx
c001884e:	ed                   	in     eax,dx
c001884f:	3c fe                	cmp    al,0xfe
c0018851:	0f 85 a9 00 00 00    	jne    c0018900 <IDE::open(int, int, void*)+0x1a4>
c0018857:	8b 15 28 f4 01 c0    	mov    edx,DWORD PTR ds:0xc001f428
c001885d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018864:	74 33                	je     c0018899 <IDE::open(int, int, void*)+0x13d>
c0018866:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001886c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018870:	40                   	inc    eax
c0018871:	83 ec 0c             	sub    esp,0xc
c0018874:	0f b6 c0             	movzx  eax,al
c0018877:	50                   	push   eax
c0018878:	55                   	push   ebp
c0018879:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001887d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018883:	51                   	push   ecx
c0018884:	e8 67 52 ff ff       	call   c000daf0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018889:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001888e:	83 c4 1c             	add    esp,0x1c
c0018891:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018897:	eb 0a                	jmp    c00188a3 <IDE::open(int, int, void*)+0x147>
c0018899:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00188a3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00188aa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00188b1:	c1 e1 10             	shl    ecx,0x10
c00188b4:	c1 e0 08             	shl    eax,0x8
c00188b7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00188bc:	09 c1                	or     ecx,eax
c00188be:	89 fa                	mov    edx,edi
c00188c0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00188c7:	c1 e0 0b             	shl    eax,0xb
c00188ca:	09 c1                	or     ecx,eax
c00188cc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00188d2:	89 c8                	mov    eax,ecx
c00188d4:	ef                   	out    dx,eax
c00188d5:	be fc 0c 00 00       	mov    esi,0xcfc
c00188da:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00188e0:	89 f2                	mov    edx,esi
c00188e2:	ee                   	out    dx,al
c00188e3:	89 c8                	mov    eax,ecx
c00188e5:	89 fa                	mov    edx,edi
c00188e7:	ef                   	out    dx,eax
c00188e8:	89 f2                	mov    edx,esi
c00188ea:	ed                   	in     eax,dx
c00188eb:	0f b6 c0             	movzx  eax,al
c00188ee:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00188f4:	74 46                	je     c001893c <IDE::open(int, int, void*)+0x1e0>
c00188f6:	83 ec 0c             	sub    esp,0xc
c00188f9:	68 7c e7 01 c0       	push   0xc001e77c
c00188fe:	eb 34                	jmp    c0018934 <IDE::open(int, int, void*)+0x1d8>
c0018900:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018909:	75 17                	jne    c0018922 <IDE::open(int, int, void*)+0x1c6>
c001890b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018910:	74 07                	je     c0018919 <IDE::open(int, int, void*)+0x1bd>
c0018912:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018917:	75 09                	jne    c0018922 <IDE::open(int, int, void*)+0x1c6>
c0018919:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018920:	eb 1a                	jmp    c001893c <IDE::open(int, int, void*)+0x1e0>
c0018922:	83 ec 0c             	sub    esp,0xc
c0018925:	68 84 e7 01 c0       	push   0xc001e784
c001892a:	eb 08                	jmp    c0018934 <IDE::open(int, int, void*)+0x1d8>
c001892c:	83 ec 0c             	sub    esp,0xc
c001892f:	68 b5 e7 01 c0       	push   0xc001e7b5
c0018934:	e8 3a 6b ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0018939:	83 c4 10             	add    esp,0x10
c001893c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018943:	79 1a                	jns    c001895f <IDE::open(int, int, void*)+0x203>
c0018945:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001894b:	83 e0 fc             	and    eax,0xfffffffc
c001894e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018955:	83 c0 08             	add    eax,0x8
c0018958:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001895f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018965:	89 c2                	mov    edx,eax
c0018967:	83 e2 0f             	and    edx,0xf
c001896a:	66 83 fa 08          	cmp    dx,0x8
c001896e:	75 0a                	jne    c001897a <IDE::open(int, int, void*)+0x21e>
c0018970:	83 e8 02             	sub    eax,0x2
c0018973:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001897a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018980:	89 c2                	mov    edx,eax
c0018982:	83 e2 0f             	and    edx,0xf
c0018985:	66 83 fa 08          	cmp    dx,0x8
c0018989:	75 0a                	jne    c0018995 <IDE::open(int, int, void*)+0x239>
c001898b:	83 e8 02             	sub    eax,0x2
c001898e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018995:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001899c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00189a3:	89 d0                	mov    eax,edx
c00189a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00189a8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00189ac:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00189b0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00189b3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00189b8:	0f b6 c9             	movzx  ecx,cl
c00189bb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00189c2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00189c5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00189c9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00189cd:	8d 50 02             	lea    edx,[eax+0x2]
c00189d0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00189d5:	0f b6 d2             	movzx  edx,dl
c00189d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00189de:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00189e1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00189e5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00189e9:	8d 48 03             	lea    ecx,[eax+0x3]
c00189ec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00189f1:	0f b6 c9             	movzx  ecx,cl
c00189f4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00189fa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00189fd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018a01:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0018a05:	8d 50 04             	lea    edx,[eax+0x4]
c0018a08:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0018a0e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018a13:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0018a1a:	66 85 f6             	test   si,si
c0018a1d:	74 5b                	je     c0018a7a <IDE::open(int, int, void*)+0x31e>
c0018a1f:	0f b6 d2             	movzx  edx,dl
c0018a22:	83 c0 05             	add    eax,0x5
c0018a25:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018a28:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018a2c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0018a30:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018a36:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018a3b:	eb 3d                	jmp    c0018a7a <IDE::open(int, int, void*)+0x31e>
c0018a3d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0018a43:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018a4a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018a51:	66 05 06 02          	add    ax,0x206
c0018a55:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018a5c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0018a63:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018a6a:	66 05 06 02          	add    ax,0x206
c0018a6e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018a75:	e9 e5 fe ff ff       	jmp    c001895f <IDE::open(int, int, void*)+0x203>
c0018a7a:	50                   	push   eax
c0018a7b:	50                   	push   eax
c0018a7c:	6a 00                	push   0x0
c0018a7e:	53                   	push   ebx
c0018a7f:	e8 5e fa ff ff       	call   c00184e2 <IDE::prepareInterrupt(unsigned char)>
c0018a84:	5a                   	pop    edx
c0018a85:	59                   	pop    ecx
c0018a86:	6a 01                	push   0x1
c0018a88:	53                   	push   ebx
c0018a89:	e8 54 fa ff ff       	call   c00184e2 <IDE::prepareInterrupt(unsigned char)>
c0018a8e:	83 c4 0c             	add    esp,0xc
c0018a91:	6a 00                	push   0x0
c0018a93:	6a 00                	push   0x0
c0018a95:	53                   	push   ebx
c0018a96:	e8 7b fc ff ff       	call   c0018716 <IDE::enableIRQs(unsigned char, bool)>
c0018a9b:	83 c4 0c             	add    esp,0xc
c0018a9e:	6a 00                	push   0x0
c0018aa0:	6a 01                	push   0x1
c0018aa2:	53                   	push   ebx
c0018aa3:	e8 6e fc ff ff       	call   c0018716 <IDE::enableIRQs(unsigned char, bool)>
c0018aa8:	83 c4 10             	add    esp,0x10
c0018aab:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0018ab2:	74 34                	je     c0018ae8 <IDE::open(int, int, void*)+0x38c>
c0018ab4:	83 ec 0c             	sub    esp,0xc
c0018ab7:	53                   	push   ebx
c0018ab8:	6a 01                	push   0x1
c0018aba:	68 de 86 01 c0       	push   0xc00186de
c0018abf:	6a 0e                	push   0xe
c0018ac1:	53                   	push   ebx
c0018ac2:	e8 49 22 ff ff       	call   c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018ac7:	83 c4 14             	add    esp,0x14
c0018aca:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018ad0:	53                   	push   ebx
c0018ad1:	6a 01                	push   0x1
c0018ad3:	68 fa 86 01 c0       	push   0xc00186fa
c0018ad8:	6a 0f                	push   0xf
c0018ada:	53                   	push   ebx
c0018adb:	e8 30 22 ff ff       	call   c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018ae0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0018ae6:	eb 38                	jmp    c0018b20 <IDE::open(int, int, void*)+0x3c4>
c0018ae8:	83 ec 0c             	sub    esp,0xc
c0018aeb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0018af5:	53                   	push   ebx
c0018af6:	6a 00                	push   0x0
c0018af8:	68 de 86 01 c0       	push   0xc00186de
c0018afd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0018b03:	53                   	push   ebx
c0018b04:	e8 07 22 ff ff       	call   c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018b09:	83 c4 14             	add    esp,0x14
c0018b0c:	53                   	push   ebx
c0018b0d:	6a 00                	push   0x0
c0018b0f:	68 fa 86 01 c0       	push   0xc00186fa
c0018b14:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0018b1a:	53                   	push   ebx
c0018b1b:	e8 f0 21 ff ff       	call   c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018b20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018b22:	83 c4 20             	add    esp,0x20
c0018b25:	83 ec 0c             	sub    esp,0xc
c0018b28:	53                   	push   ebx
c0018b29:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0018b2c:	83 c4 0c             	add    esp,0xc
c0018b2f:	6a 07                	push   0x7
c0018b31:	6a 00                	push   0x0
c0018b33:	53                   	push   ebx
c0018b34:	e8 8f fa ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018b39:	83 c4 0c             	add    esp,0xc
c0018b3c:	6a 07                	push   0x7
c0018b3e:	6a 01                	push   0x1
c0018b40:	53                   	push   ebx
c0018b41:	e8 82 fa ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018b46:	83 c4 0c             	add    esp,0xc
c0018b49:	6a 01                	push   0x1
c0018b4b:	6a 00                	push   0x0
c0018b4d:	53                   	push   ebx
c0018b4e:	e8 c3 fb ff ff       	call   c0018716 <IDE::enableIRQs(unsigned char, bool)>
c0018b53:	83 c4 0c             	add    esp,0xc
c0018b56:	6a 01                	push   0x1
c0018b58:	6a 01                	push   0x1
c0018b5a:	53                   	push   ebx
c0018b5b:	e8 b6 fb ff ff       	call   c0018716 <IDE::enableIRQs(unsigned char, bool)>
c0018b60:	83 c4 2c             	add    esp,0x2c
c0018b63:	31 c0                	xor    eax,eax
c0018b65:	5b                   	pop    ebx
c0018b66:	5e                   	pop    esi
c0018b67:	5f                   	pop    edi
c0018b68:	5d                   	pop    ebp
c0018b69:	c3                   	ret    

c0018b6a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0018b6a:	55                   	push   ebp
c0018b6b:	57                   	push   edi
c0018b6c:	56                   	push   esi
c0018b6d:	53                   	push   ebx
c0018b6e:	83 ec 1c             	sub    esp,0x1c
c0018b71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018b79:	8d 50 f8             	lea    edx,[eax-0x8]
c0018b7c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018b80:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018b84:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018b88:	80 fa 03             	cmp    dl,0x3
c0018b8b:	77 5d                	ja     c0018bea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0018b8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b95:	0f b6 db             	movzx  ebx,bl
c0018b98:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0018b9b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0018b9f:	83 ca 80             	or     edx,0xffffff80
c0018ba2:	0f b6 d2             	movzx  edx,dl
c0018ba5:	52                   	push   edx
c0018ba6:	6a 0c                	push   0xc
c0018ba8:	53                   	push   ebx
c0018ba9:	56                   	push   esi
c0018baa:	e8 59 f9 ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018baf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0018bb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bb8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018bbc:	0f b6 c0             	movzx  eax,al
c0018bbf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0018bc3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018bc5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0018bca:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0018bce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018bd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018bd6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018bde:	83 c4 2c             	add    esp,0x2c
c0018be1:	5b                   	pop    ebx
c0018be2:	5e                   	pop    esi
c0018be3:	5f                   	pop    edi
c0018be4:	5d                   	pop    ebp
c0018be5:	e9 1e f9 ff ff       	jmp    c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bea:	3c 07                	cmp    al,0x7
c0018bec:	77 10                	ja     c0018bfe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0018bee:	0f b6 db             	movzx  ebx,bl
c0018bf1:	0f b6 d0             	movzx  edx,al
c0018bf4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0018bfc:	eb 2d                	jmp    c0018c2b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018bfe:	3c 0d                	cmp    al,0xd
c0018c00:	77 13                	ja     c0018c15 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0018c02:	0f b6 db             	movzx  ebx,bl
c0018c05:	0f b6 c0             	movzx  eax,al
c0018c08:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0018c0f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0018c13:	eb 16                	jmp    c0018c2b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0018c15:	3c 15                	cmp    al,0x15
c0018c17:	77 14                	ja     c0018c2d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0018c19:	0f b6 db             	movzx  ebx,bl
c0018c1c:	0f b6 c0             	movzx  eax,al
c0018c1f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0018c27:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0018c2b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0018c2d:	83 c4 1c             	add    esp,0x1c
c0018c30:	5b                   	pop    ebx
c0018c31:	5e                   	pop    esi
c0018c32:	5f                   	pop    edi
c0018c33:	5d                   	pop    ebp
c0018c34:	c3                   	ret    
c0018c35:	90                   	nop

c0018c36 <IDE::detect()>:
c0018c36:	55                   	push   ebp
c0018c37:	57                   	push   edi
c0018c38:	56                   	push   esi
c0018c39:	53                   	push   ebx
c0018c3a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018c40:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0018c47:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0018c4e:	0f 85 97 02 00 00    	jne    c0018eeb <IDE::detect()+0x2b5>
c0018c54:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0018c5b:	31 f6                	xor    esi,esi
c0018c5d:	31 ed                	xor    ebp,ebp
c0018c5f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018c67:	89 e8                	mov    eax,ebp
c0018c69:	c1 e0 06             	shl    eax,0x6
c0018c6c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0018c74:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018c78:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018c7c:	c1 e0 04             	shl    eax,0x4
c0018c7f:	83 c8 a0             	or     eax,0xffffffa0
c0018c82:	0f b6 c0             	movzx  eax,al
c0018c85:	50                   	push   eax
c0018c86:	6a 06                	push   0x6
c0018c88:	56                   	push   esi
c0018c89:	53                   	push   ebx
c0018c8a:	e8 79 f8 ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c8f:	83 c4 0c             	add    esp,0xc
c0018c92:	6a 0c                	push   0xc
c0018c94:	56                   	push   esi
c0018c95:	53                   	push   ebx
c0018c96:	e8 2d f9 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018c9b:	83 c4 0c             	add    esp,0xc
c0018c9e:	6a 0c                	push   0xc
c0018ca0:	56                   	push   esi
c0018ca1:	53                   	push   ebx
c0018ca2:	e8 21 f9 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018ca7:	83 c4 0c             	add    esp,0xc
c0018caa:	6a 0c                	push   0xc
c0018cac:	56                   	push   esi
c0018cad:	53                   	push   ebx
c0018cae:	e8 15 f9 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018cb3:	83 c4 0c             	add    esp,0xc
c0018cb6:	6a 0c                	push   0xc
c0018cb8:	56                   	push   esi
c0018cb9:	53                   	push   ebx
c0018cba:	e8 09 f9 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018cbf:	68 ec 00 00 00       	push   0xec
c0018cc4:	6a 07                	push   0x7
c0018cc6:	56                   	push   esi
c0018cc7:	53                   	push   ebx
c0018cc8:	e8 3b f8 ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ccd:	83 c4 1c             	add    esp,0x1c
c0018cd0:	6a 0c                	push   0xc
c0018cd2:	56                   	push   esi
c0018cd3:	53                   	push   ebx
c0018cd4:	e8 ef f8 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018cd9:	83 c4 0c             	add    esp,0xc
c0018cdc:	6a 0c                	push   0xc
c0018cde:	56                   	push   esi
c0018cdf:	53                   	push   ebx
c0018ce0:	e8 e3 f8 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018ce5:	83 c4 0c             	add    esp,0xc
c0018ce8:	6a 0c                	push   0xc
c0018cea:	56                   	push   esi
c0018ceb:	53                   	push   ebx
c0018cec:	e8 d7 f8 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018cf1:	83 c4 0c             	add    esp,0xc
c0018cf4:	6a 0c                	push   0xc
c0018cf6:	56                   	push   esi
c0018cf7:	53                   	push   ebx
c0018cf8:	e8 cb f8 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018cfd:	83 c4 0c             	add    esp,0xc
c0018d00:	6a 0c                	push   0xc
c0018d02:	56                   	push   esi
c0018d03:	53                   	push   ebx
c0018d04:	e8 bf f8 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018d09:	83 c4 10             	add    esp,0x10
c0018d0c:	84 c0                	test   al,al
c0018d0e:	0f 84 5f 01 00 00    	je     c0018e73 <IDE::detect()+0x23d>
c0018d14:	31 ff                	xor    edi,edi
c0018d16:	50                   	push   eax
c0018d17:	6a 0c                	push   0xc
c0018d19:	56                   	push   esi
c0018d1a:	53                   	push   ebx
c0018d1b:	e8 a8 f8 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018d20:	83 c4 10             	add    esp,0x10
c0018d23:	a8 01                	test   al,0x1
c0018d25:	0f 85 69 01 00 00    	jne    c0018e94 <IDE::detect()+0x25e>
c0018d2b:	84 c0                	test   al,al
c0018d2d:	78 04                	js     c0018d33 <IDE::detect()+0xfd>
c0018d2f:	a8 08                	test   al,0x8
c0018d31:	75 23                	jne    c0018d56 <IDE::detect()+0x120>
c0018d33:	47                   	inc    edi
c0018d34:	81 ff 17 01 00 00    	cmp    edi,0x117
c0018d3a:	7e da                	jle    c0018d16 <IDE::detect()+0xe0>
c0018d3c:	83 ec 0c             	sub    esp,0xc
c0018d3f:	6a 32                	push   0x32
c0018d41:	e8 a2 9e ff ff       	call   c0012be8 <milliTenthSleep(unsigned int)>
c0018d46:	83 c4 10             	add    esp,0x10
c0018d49:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0018d4f:	75 c5                	jne    c0018d16 <IDE::detect()+0xe0>
c0018d51:	e9 3e 01 00 00       	jmp    c0018e94 <IDE::detect()+0x25e>
c0018d56:	31 c9                	xor    ecx,ecx
c0018d58:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0018d5c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0018d60:	83 ec 0c             	sub    esp,0xc
c0018d63:	68 80 00 00 00       	push   0x80
c0018d68:	57                   	push   edi
c0018d69:	6a 00                	push   0x0
c0018d6b:	56                   	push   esi
c0018d6c:	53                   	push   ebx
c0018d6d:	e8 f8 fd ff ff       	call   c0018b6a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0018d72:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0018d77:	89 e8                	mov    eax,ebp
c0018d79:	89 d1                	mov    ecx,edx
c0018d7b:	c1 e0 06             	shl    eax,0x6
c0018d7e:	01 d8                	add    eax,ebx
c0018d80:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0018d87:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0018d8e:	89 f2                	mov    edx,esi
c0018d90:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0018d96:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0018d9a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0018da0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018da4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0018dab:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0018db3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0018dba:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0018dc2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0018dc8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0018dcf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0018dd5:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018dd9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018ddd:	83 c4 20             	add    esp,0x20
c0018de0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0018de3:	83 c0 02             	add    eax,0x2
c0018de6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0018dec:	83 c7 02             	add    edi,0x2
c0018def:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0018df2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0018df8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0018dfc:	75 e2                	jne    c0018de0 <IDE::detect()+0x1aa>
c0018dfe:	89 e8                	mov    eax,ebp
c0018e00:	c1 e0 06             	shl    eax,0x6
c0018e03:	01 d8                	add    eax,ebx
c0018e05:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0018e0b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0018e12:	66 c1 ea 09          	shr    dx,0x9
c0018e16:	83 e2 01             	and    edx,0x1
c0018e19:	84 c9                	test   cl,cl
c0018e1b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0018e21:	75 22                	jne    c0018e45 <IDE::detect()+0x20f>
c0018e23:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0018e2a:	74 46                	je     c0018e72 <IDE::detect()+0x23c>
c0018e2c:	83 ec 0c             	sub    esp,0xc
c0018e2f:	68 7c 01 00 00       	push   0x17c
c0018e34:	e8 28 dd fe ff       	call   c0006b61 <malloc>
c0018e39:	89 c7                	mov    edi,eax
c0018e3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e3e:	e8 07 05 00 00       	call   c001934a <ATA::ATA()>
c0018e43:	eb 17                	jmp    c0018e5c <IDE::detect()+0x226>
c0018e45:	83 ec 0c             	sub    esp,0xc
c0018e48:	68 84 01 00 00       	push   0x184
c0018e4d:	e8 0f dd fe ff       	call   c0006b61 <malloc>
c0018e52:	89 c7                	mov    edi,eax
c0018e54:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e57:	e8 e6 0a 00 00       	call   c0019942 <ATAPI::ATAPI()>
c0018e5c:	5a                   	pop    edx
c0018e5d:	59                   	pop    ecx
c0018e5e:	57                   	push   edi
c0018e5f:	53                   	push   ebx
c0018e60:	e8 ff 1e ff ff       	call   c000ad64 <Device::addChild(Device*)>
c0018e65:	8b 07                	mov    eax,DWORD PTR [edi]
c0018e67:	53                   	push   ebx
c0018e68:	55                   	push   ebp
c0018e69:	6a 00                	push   0x0
c0018e6b:	57                   	push   edi
c0018e6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018e6f:	83 c4 20             	add    esp,0x20
c0018e72:	45                   	inc    ebp
c0018e73:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0018e78:	74 0d                	je     c0018e87 <IDE::detect()+0x251>
c0018e7a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018e82:	e9 e0 fd ff ff       	jmp    c0018c67 <IDE::detect()+0x31>
c0018e87:	4e                   	dec    esi
c0018e88:	74 61                	je     c0018eeb <IDE::detect()+0x2b5>
c0018e8a:	be 01 00 00 00       	mov    esi,0x1
c0018e8f:	e9 cb fd ff ff       	jmp    c0018c5f <IDE::detect()+0x29>
c0018e94:	50                   	push   eax
c0018e95:	6a 04                	push   0x4
c0018e97:	56                   	push   esi
c0018e98:	53                   	push   ebx
c0018e99:	e8 2a f7 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018e9e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018ea2:	83 c4 0c             	add    esp,0xc
c0018ea5:	6a 05                	push   0x5
c0018ea7:	56                   	push   esi
c0018ea8:	53                   	push   ebx
c0018ea9:	e8 1a f7 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018eae:	83 c4 10             	add    esp,0x10
c0018eb1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018eb5:	80 fa 14             	cmp    dl,0x14
c0018eb8:	75 04                	jne    c0018ebe <IDE::detect()+0x288>
c0018eba:	3c eb                	cmp    al,0xeb
c0018ebc:	eb 07                	jmp    c0018ec5 <IDE::detect()+0x28f>
c0018ebe:	3c 96                	cmp    al,0x96
c0018ec0:	75 b1                	jne    c0018e73 <IDE::detect()+0x23d>
c0018ec2:	80 fa 69             	cmp    dl,0x69
c0018ec5:	75 ac                	jne    c0018e73 <IDE::detect()+0x23d>
c0018ec7:	68 a1 00 00 00       	push   0xa1
c0018ecc:	6a 07                	push   0x7
c0018ece:	56                   	push   esi
c0018ecf:	53                   	push   ebx
c0018ed0:	e8 33 f6 ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ed5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0018edc:	e8 07 9d ff ff       	call   c0012be8 <milliTenthSleep(unsigned int)>
c0018ee1:	83 c4 10             	add    esp,0x10
c0018ee4:	b1 01                	mov    cl,0x1
c0018ee6:	e9 6d fe ff ff       	jmp    c0018d58 <IDE::detect()+0x122>
c0018eeb:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018ef1:	5b                   	pop    ebx
c0018ef2:	5e                   	pop    esi
c0018ef3:	5f                   	pop    edi
c0018ef4:	5d                   	pop    ebp
c0018ef5:	c3                   	ret    

c0018ef6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0018ef6:	55                   	push   ebp
c0018ef7:	57                   	push   edi
c0018ef8:	56                   	push   esi
c0018ef9:	53                   	push   ebx
c0018efa:	83 ec 1c             	sub    esp,0x1c
c0018efd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018f01:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018f05:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018f09:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0018f0d:	88 c3                	mov    bl,al
c0018f0f:	84 c0                	test   al,al
c0018f11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f15:	0f 84 81 00 00 00    	je     c0018f9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f1b:	83 ec 0c             	sub    esp,0xc
c0018f1e:	68 df e7 01 c0       	push   0xc001e7df
c0018f23:	e8 fc 09 ff ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0018f28:	83 c4 10             	add    esp,0x10
c0018f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f2f:	3c 01                	cmp    al,0x1
c0018f31:	74 63                	je     c0018f96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0018f33:	3c 02                	cmp    al,0x2
c0018f35:	75 53                	jne    c0018f8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0018f37:	01 f6                	add    esi,esi
c0018f39:	09 ee                	or     esi,ebp
c0018f3b:	50                   	push   eax
c0018f3c:	89 f0                	mov    eax,esi
c0018f3e:	6a 01                	push   0x1
c0018f40:	0f b6 f0             	movzx  esi,al
c0018f43:	c1 e6 06             	shl    esi,0x6
c0018f46:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0018f4e:	50                   	push   eax
c0018f4f:	57                   	push   edi
c0018f50:	e8 73 f6 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018f55:	83 c4 10             	add    esp,0x10
c0018f58:	a8 01                	test   al,0x1
c0018f5a:	74 02                	je     c0018f5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0018f5c:	b3 07                	mov    bl,0x7
c0018f5e:	a8 02                	test   al,0x2
c0018f60:	74 02                	je     c0018f64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0018f62:	b3 03                	mov    bl,0x3
c0018f64:	a8 04                	test   al,0x4
c0018f66:	74 02                	je     c0018f6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0018f68:	b3 14                	mov    bl,0x14
c0018f6a:	a8 08                	test   al,0x8
c0018f6c:	74 02                	je     c0018f70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0018f6e:	b3 03                	mov    bl,0x3
c0018f70:	a8 10                	test   al,0x10
c0018f72:	74 02                	je     c0018f76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0018f74:	b3 15                	mov    bl,0x15
c0018f76:	a8 20                	test   al,0x20
c0018f78:	74 02                	je     c0018f7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0018f7a:	b3 03                	mov    bl,0x3
c0018f7c:	a8 40                	test   al,0x40
c0018f7e:	74 02                	je     c0018f82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0018f80:	b3 16                	mov    bl,0x16
c0018f82:	84 c0                	test   al,al
c0018f84:	79 16                	jns    c0018f9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f86:	b3 0d                	mov    bl,0xd
c0018f88:	eb 12                	jmp    c0018f9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f8a:	3c 03                	cmp    al,0x3
c0018f8c:	74 0c                	je     c0018f9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0018f8e:	3c 04                	cmp    al,0x4
c0018f90:	75 0a                	jne    c0018f9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f92:	b3 08                	mov    bl,0x8
c0018f94:	eb 06                	jmp    c0018f9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f96:	b3 13                	mov    bl,0x13
c0018f98:	eb 02                	jmp    c0018f9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0018f9a:	b3 17                	mov    bl,0x17
c0018f9c:	83 c4 1c             	add    esp,0x1c
c0018f9f:	88 d8                	mov    al,bl
c0018fa1:	5b                   	pop    ebx
c0018fa2:	5e                   	pop    esi
c0018fa3:	5f                   	pop    edi
c0018fa4:	5d                   	pop    ebp
c0018fa5:	c3                   	ret    

c0018fa6 <IDE::polling(unsigned char, unsigned int)>:
c0018fa6:	55                   	push   ebp
c0018fa7:	bd 04 00 00 00       	mov    ebp,0x4
c0018fac:	57                   	push   edi
c0018fad:	56                   	push   esi
c0018fae:	53                   	push   ebx
c0018faf:	83 ec 0c             	sub    esp,0xc
c0018fb2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018fb6:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0018fba:	0f b6 f3             	movzx  esi,bl
c0018fbd:	52                   	push   edx
c0018fbe:	6a 0c                	push   0xc
c0018fc0:	56                   	push   esi
c0018fc1:	57                   	push   edi
c0018fc2:	e8 01 f6 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	4d                   	dec    ebp
c0018fcb:	75 ed                	jne    c0018fba <IDE::polling(unsigned char, unsigned int)+0x14>
c0018fcd:	bb a0 86 01 00       	mov    ebx,0x186a0
c0018fd2:	50                   	push   eax
c0018fd3:	6a 0c                	push   0xc
c0018fd5:	56                   	push   esi
c0018fd6:	57                   	push   edi
c0018fd7:	e8 ec f5 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	a8 01                	test   al,0x1
c0018fe1:	75 17                	jne    c0018ffa <IDE::polling(unsigned char, unsigned int)+0x54>
c0018fe3:	a8 20                	test   al,0x20
c0018fe5:	75 0f                	jne    c0018ff6 <IDE::polling(unsigned char, unsigned int)+0x50>
c0018fe7:	4b                   	dec    ebx
c0018fe8:	74 10                	je     c0018ffa <IDE::polling(unsigned char, unsigned int)+0x54>
c0018fea:	84 c0                	test   al,al
c0018fec:	78 e4                	js     c0018fd2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018fee:	a8 08                	test   al,0x8
c0018ff0:	74 e0                	je     c0018fd2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0018ff2:	31 c0                	xor    eax,eax
c0018ff4:	eb 06                	jmp    c0018ffc <IDE::polling(unsigned char, unsigned int)+0x56>
c0018ff6:	b0 01                	mov    al,0x1
c0018ff8:	eb 02                	jmp    c0018ffc <IDE::polling(unsigned char, unsigned int)+0x56>
c0018ffa:	b0 02                	mov    al,0x2
c0018ffc:	83 c4 0c             	add    esp,0xc
c0018fff:	5b                   	pop    ebx
c0019000:	5e                   	pop    esi
c0019001:	5f                   	pop    edi
c0019002:	5d                   	pop    ebp
c0019003:	c3                   	ret    

c0019004 <SATABus::close(int, int, void*)>:
c0019004:	31 c0                	xor    eax,eax
c0019006:	c3                   	ret    
c0019007:	90                   	nop

c0019008 <SATABus::detect()>:
c0019008:	c3                   	ret    
c0019009:	90                   	nop

c001900a <SATABus::SATABus()>:
c001900a:	83 ec 0c             	sub    esp,0xc
c001900d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019011:	83 ec 08             	sub    esp,0x8
c0019014:	68 18 e8 01 c0       	push   0xc001e818
c0019019:	50                   	push   eax
c001901a:	e8 89 20 ff ff       	call   c000b0a8 <HardDiskController::HardDiskController(char const*)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	ba 44 e8 01 c0       	mov    edx,0xc001e844
c0019027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001902b:	89 10                	mov    DWORD PTR [eax],edx
c001902d:	83 ec 0c             	sub    esp,0xc
c0019030:	6a 50                	push   0x50
c0019032:	e8 b5 df fe ff       	call   c0006fec <Phys::allocateContiguousPages(int)>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	89 c2                	mov    edx,eax
c001903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019040:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019046:	83 ec 0c             	sub    esp,0xc
c0019049:	6a 50                	push   0x50
c001904b:	e8 4d f6 fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	89 c2                	mov    edx,eax
c0019055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019059:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001905f:	a1 14 f5 01 c0       	mov    eax,ds:0xc001f514
c0019064:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019068:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001906e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019072:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019078:	83 ec 0c             	sub    esp,0xc
c001907b:	6a 03                	push   0x3
c001907d:	6a 50                	push   0x50
c001907f:	51                   	push   ecx
c0019080:	52                   	push   edx
c0019081:	50                   	push   eax
c0019082:	e8 69 ff fe ff       	call   c0008ff0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019087:	83 c4 20             	add    esp,0x20
c001908a:	90                   	nop
c001908b:	83 c4 0c             	add    esp,0xc
c001908e:	c3                   	ret    
c001908f:	90                   	nop

c0019090 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019094:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019097:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001909a:	09 c2                	or     edx,eax
c001909c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00190a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00190a8:	31 c0                	xor    eax,eax
c00190aa:	c1 e9 08             	shr    ecx,0x8
c00190ad:	83 e1 0f             	and    ecx,0xf
c00190b0:	39 c8                	cmp    eax,ecx
c00190b2:	74 0a                	je     c00190be <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00190b4:	f6 c2 01             	test   dl,0x1
c00190b7:	74 08                	je     c00190c1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00190b9:	d1 ea                	shr    edx,1
c00190bb:	40                   	inc    eax
c00190bc:	eb f2                	jmp    c00190b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00190be:	83 c8 ff             	or     eax,0xffffffff
c00190c1:	c3                   	ret    

c00190c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00190c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00190c6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00190c9:	89 c2                	mov    edx,eax
c00190cb:	c1 ea 08             	shr    edx,0x8
c00190ce:	83 e2 0f             	and    edx,0xf
c00190d1:	fe ca                	dec    dl
c00190d3:	75 31                	jne    c0019106 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00190d5:	83 e0 0f             	and    eax,0xf
c00190d8:	3c 03                	cmp    al,0x3
c00190da:	75 2a                	jne    c0019106 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00190dc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00190df:	b8 02 00 00 00       	mov    eax,0x2
c00190e4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00190ea:	74 1c                	je     c0019108 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00190ec:	b8 04 00 00 00       	mov    eax,0x4
c00190f1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00190f7:	74 0f                	je     c0019108 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00190f9:	31 c0                	xor    eax,eax
c00190fb:	83 fa 03             	cmp    edx,0x3
c00190fe:	0f 94 c0             	sete   al
c0019101:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019105:	c3                   	ret    
c0019106:	31 c0                	xor    eax,eax
c0019108:	c3                   	ret    
c0019109:	90                   	nop

c001910a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001910a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001910e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019111:	0f ba e2 0f          	bt     edx,0xf
c0019115:	72 f7                	jb     c001910e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019117:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001911a:	83 ca 10             	or     edx,0x10
c001911d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019120:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019123:	83 ca 01             	or     edx,0x1
c0019126:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019129:	c3                   	ret    

c001912a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001912a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001912e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019131:	83 e2 fe             	and    edx,0xfffffffe
c0019134:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019137:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001913a:	83 e2 ef             	and    edx,0xffffffef
c001913d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019143:	0f ba e2 0e          	bt     edx,0xe
c0019147:	72 f7                	jb     c0019140 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019149:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001914c:	0f ba e2 0f          	bt     edx,0xf
c0019150:	72 ee                	jb     c0019140 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019152:	c3                   	ret    
c0019153:	90                   	nop

c0019154 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019154:	55                   	push   ebp
c0019155:	57                   	push   edi
c0019156:	56                   	push   esi
c0019157:	53                   	push   ebx
c0019158:	83 ec 1c             	sub    esp,0x1c
c001915b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001915f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019163:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019167:	53                   	push   ebx
c0019168:	89 fd                	mov    ebp,edi
c001916a:	56                   	push   esi
c001916b:	c1 e5 0a             	shl    ebp,0xa
c001916e:	e8 b7 ff ff ff       	call   c001912a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019173:	83 ec 0c             	sub    esp,0xc
c0019176:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001917c:	01 e8                	add    eax,ebp
c001917e:	89 03                	mov    DWORD PTR [ebx],eax
c0019180:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019182:	68 00 04 00 00       	push   0x400
c0019187:	6a 00                	push   0x0
c0019189:	50                   	push   eax
c001918a:	e8 61 73 fe ff       	call   c00004f0 <memset>
c001918f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019195:	89 fa                	mov    edx,edi
c0019197:	01 e8                	add    eax,ebp
c0019199:	c1 e7 0d             	shl    edi,0xd
c001919c:	89 03                	mov    DWORD PTR [ebx],eax
c001919e:	c1 e2 08             	shl    edx,0x8
c00191a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00191a8:	81 c2 00 80 00 00    	add    edx,0x8000
c00191ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00191b2:	89 d0                	mov    eax,edx
c00191b4:	83 c4 1c             	add    esp,0x1c
c00191b7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00191bd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00191c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00191c3:	68 00 01 00 00       	push   0x100
c00191c8:	6a 00                	push   0x0
c00191ca:	50                   	push   eax
c00191cb:	e8 20 73 fe ff       	call   c00004f0 <memset>
c00191d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191d4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00191da:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00191e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00191e4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00191e7:	83 c4 10             	add    esp,0x10
c00191ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00191f1:	31 ff                	xor    edi,edi
c00191f3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00191f9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00191ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019203:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019209:	83 c5 20             	add    ebp,0x20
c001920c:	01 f8                	add    eax,edi
c001920e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019211:	52                   	push   edx
c0019212:	68 00 01 00 00       	push   0x100
c0019217:	6a 00                	push   0x0
c0019219:	50                   	push   eax
c001921a:	e8 d1 72 fe ff       	call   c00004f0 <memset>
c001921f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001922c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019233:	01 f8                	add    eax,edi
c0019235:	81 c7 00 01 00 00    	add    edi,0x100
c001923b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001923e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019244:	75 b3                	jne    c00191f9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0019246:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001924a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001924e:	83 c4 1c             	add    esp,0x1c
c0019251:	5b                   	pop    ebx
c0019252:	5e                   	pop    esi
c0019253:	5f                   	pop    edi
c0019254:	5d                   	pop    ebp
c0019255:	e9 b0 fe ff ff       	jmp    c001910a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001925a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001925a:	55                   	push   ebp
c001925b:	57                   	push   edi
c001925c:	56                   	push   esi
c001925d:	53                   	push   ebx
c001925e:	31 db                	xor    ebx,ebx
c0019260:	83 ec 0c             	sub    esp,0xc
c0019263:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019267:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001926b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001926e:	f7 c7 01 00 00 00    	test   edi,0x1
c0019274:	74 7a                	je     c00192f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019276:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001927a:	89 d8                	mov    eax,ebx
c001927c:	c1 e0 07             	shl    eax,0x7
c001927f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019286:	55                   	push   ebp
c0019287:	56                   	push   esi
c0019288:	e8 35 fe ff ff       	call   c00190c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001928d:	5a                   	pop    edx
c001928e:	83 f8 01             	cmp    eax,0x1
c0019291:	59                   	pop    ecx
c0019292:	75 21                	jne    c00192b5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019294:	50                   	push   eax
c0019295:	53                   	push   ebx
c0019296:	55                   	push   ebp
c0019297:	56                   	push   esi
c0019298:	e8 b7 fe ff ff       	call   c0019154 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001929d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00192a4:	e8 b8 d8 fe ff       	call   c0006b61 <malloc>
c00192a9:	89 c5                	mov    ebp,eax
c00192ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00192ae:	e8 43 0d 00 00       	call   c0019ff6 <SATA::SATA()>
c00192b3:	eb 24                	jmp    c00192d9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00192b5:	83 f8 04             	cmp    eax,0x4
c00192b8:	75 36                	jne    c00192f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00192ba:	51                   	push   ecx
c00192bb:	53                   	push   ebx
c00192bc:	55                   	push   ebp
c00192bd:	56                   	push   esi
c00192be:	e8 91 fe ff ff       	call   c0019154 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00192c3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00192ca:	e8 92 d8 fe ff       	call   c0006b61 <malloc>
c00192cf:	89 c5                	mov    ebp,eax
c00192d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00192d4:	e8 79 10 00 00       	call   c001a352 <SATAPI::SATAPI()>
c00192d9:	58                   	pop    eax
c00192da:	5a                   	pop    edx
c00192db:	55                   	push   ebp
c00192dc:	56                   	push   esi
c00192dd:	e8 82 1a ff ff       	call   c000ad64 <Device::addChild(Device*)>
c00192e2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00192e5:	56                   	push   esi
c00192e6:	6a 00                	push   0x0
c00192e8:	53                   	push   ebx
c00192e9:	55                   	push   ebp
c00192ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00192ed:	83 c4 20             	add    esp,0x20
c00192f0:	d1 ef                	shr    edi,1
c00192f2:	43                   	inc    ebx
c00192f3:	83 fb 20             	cmp    ebx,0x20
c00192f6:	0f 85 72 ff ff ff    	jne    c001926e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00192fc:	83 c4 0c             	add    esp,0xc
c00192ff:	5b                   	pop    ebx
c0019300:	5e                   	pop    esi
c0019301:	5f                   	pop    edi
c0019302:	5d                   	pop    ebp
c0019303:	c3                   	ret    

c0019304 <SATABus::open(int, int, void*)>:
c0019304:	83 ec 14             	sub    esp,0x14
c0019307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001930b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019311:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019317:	52                   	push   edx
c0019318:	50                   	push   eax
c0019319:	e8 3c ff ff ff       	call   c001925a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001931e:	31 c0                	xor    eax,eax
c0019320:	83 c4 1c             	add    esp,0x1c
c0019323:	c3                   	ret    

c0019324 <ATA::close(int, int, void*)>:
c0019324:	83 ec 0c             	sub    esp,0xc
c0019327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001932b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019331:	85 c0                	test   eax,eax
c0019333:	74 0c                	je     c0019341 <ATA::close(int, int, void*)+0x1d>
c0019335:	83 ec 0c             	sub    esp,0xc
c0019338:	8b 10                	mov    edx,DWORD PTR [eax]
c001933a:	50                   	push   eax
c001933b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	31 c0                	xor    eax,eax
c0019343:	83 c4 0c             	add    esp,0xc
c0019346:	c3                   	ret    
c0019347:	90                   	nop

c0019348 <ATA::powerSaving(PowerSavingLevel)>:
c0019348:	c3                   	ret    
c0019349:	90                   	nop

c001934a <ATA::ATA()>:
c001934a:	83 ec 0c             	sub    esp,0xc
c001934d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019351:	83 ec 04             	sub    esp,0x4
c0019354:	68 00 02 00 00       	push   0x200
c0019359:	68 11 e9 01 c0       	push   0xc001e911
c001935e:	50                   	push   eax
c001935f:	e8 ce 1d ff ff       	call   c000b132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	ba 84 e8 01 c0       	mov    edx,0xc001e884
c001936c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019370:	89 10                	mov    DWORD PTR [eax],edx
c0019372:	90                   	nop
c0019373:	83 c4 0c             	add    esp,0xc
c0019376:	c3                   	ret    
c0019377:	90                   	nop

c0019378 <ATA::flush(bool)>:
c0019378:	53                   	push   ebx
c0019379:	83 ec 08             	sub    esp,0x8
c001937c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019385:	19 c0                	sbb    eax,eax
c0019387:	83 e0 fd             	and    eax,0xfffffffd
c001938a:	05 ea 00 00 00       	add    eax,0xea
c001938f:	50                   	push   eax
c0019390:	6a 07                	push   0x7
c0019392:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019399:	50                   	push   eax
c001939a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00193a0:	e8 63 f1 ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00193a5:	83 c4 0c             	add    esp,0xc
c00193a8:	6a 00                	push   0x0
c00193aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00193b1:	50                   	push   eax
c00193b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00193b8:	e8 e9 fb ff ff       	call   c0018fa6 <IDE::polling(unsigned char, unsigned int)>
c00193bd:	83 c4 18             	add    esp,0x18
c00193c0:	5b                   	pop    ebx
c00193c1:	c3                   	ret    

c00193c2 <ATA::readyForCommand()>:
c00193c2:	56                   	push   esi
c00193c3:	53                   	push   ebx
c00193c4:	53                   	push   ebx
c00193c5:	31 db                	xor    ebx,ebx
c00193c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00193cb:	51                   	push   ecx
c00193cc:	6a 0c                	push   0xc
c00193ce:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00193d5:	50                   	push   eax
c00193d6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00193dc:	e8 e7 f1 ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	a8 88                	test   al,0x88
c00193e6:	74 1f                	je     c0019407 <ATA::readyForCommand()+0x45>
c00193e8:	43                   	inc    ebx
c00193e9:	83 fb 63             	cmp    ebx,0x63
c00193ec:	7e dd                	jle    c00193cb <ATA::readyForCommand()+0x9>
c00193ee:	83 ec 0c             	sub    esp,0xc
c00193f1:	6a 0a                	push   0xa
c00193f3:	e8 f0 97 ff ff       	call   c0012be8 <milliTenthSleep(unsigned int)>
c00193f8:	83 c4 10             	add    esp,0x10
c00193fb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019401:	75 c8                	jne    c00193cb <ATA::readyForCommand()+0x9>
c0019403:	31 c0                	xor    eax,eax
c0019405:	eb 02                	jmp    c0019409 <ATA::readyForCommand()+0x47>
c0019407:	b0 01                	mov    al,0x1
c0019409:	5a                   	pop    edx
c001940a:	5b                   	pop    ebx
c001940b:	5e                   	pop    esi
c001940c:	c3                   	ret    
c001940d:	90                   	nop

c001940e <ATA::access(unsigned long long, int, void*, bool)>:
c001940e:	55                   	push   ebp
c001940f:	57                   	push   edi
c0019410:	56                   	push   esi
c0019411:	53                   	push   ebx
c0019412:	83 ec 2c             	sub    esp,0x2c
c0019415:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019419:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001941d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019421:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019425:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019429:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001942d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019431:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019437:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001943b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019441:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019445:	c1 e0 06             	shl    eax,0x6
c0019448:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019450:	74 5d                	je     c00194af <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019452:	89 fa                	mov    edx,edi
c0019454:	89 f0                	mov    eax,esi
c0019456:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001945a:	c1 ea 1c             	shr    edx,0x1c
c001945d:	89 d1                	mov    ecx,edx
c001945f:	09 c1                	or     ecx,eax
c0019461:	74 25                	je     c0019488 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019463:	31 ed                	xor    ebp,ebp
c0019465:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001946c:	89 fa                	mov    edx,edi
c001946e:	89 f0                	mov    eax,esi
c0019470:	0f ad d0             	shrd   eax,edx,cl
c0019473:	d3 ea                	shr    edx,cl
c0019475:	f6 c1 20             	test   cl,0x20
c0019478:	74 02                	je     c001947c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001947a:	89 d0                	mov    eax,edx
c001947c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019480:	45                   	inc    ebp
c0019481:	83 fd 06             	cmp    ebp,0x6
c0019484:	75 df                	jne    c0019465 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019486:	eb 76                	jmp    c00194fe <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019488:	89 f0                	mov    eax,esi
c001948a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001948f:	89 fa                	mov    edx,edi
c0019491:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019498:	0f ac d0 10          	shrd   eax,edx,0x10
c001949c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00194a1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00194a5:	c1 ee 18             	shr    esi,0x18
c00194a8:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00194ad:	eb 56                	jmp    c0019505 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00194af:	6a 00                	push   0x0
c00194b1:	6a 3f                	push   0x3f
c00194b3:	57                   	push   edi
c00194b4:	56                   	push   esi
c00194b5:	e8 a6 22 00 00       	call   c001b760 <__umoddi3>
c00194ba:	83 c4 10             	add    esp,0x10
c00194bd:	40                   	inc    eax
c00194be:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00194c2:	6a 00                	push   0x0
c00194c4:	68 f0 03 00 00       	push   0x3f0
c00194c9:	57                   	push   edi
c00194ca:	56                   	push   esi
c00194cb:	e8 90 21 00 00       	call   c001b660 <__udivdi3>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00194d8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00194df:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00194e4:	6a 00                	push   0x0
c00194e6:	6a 3f                	push   0x3f
c00194e8:	57                   	push   edi
c00194e9:	56                   	push   esi
c00194ea:	e8 71 21 00 00       	call   c001b660 <__udivdi3>
c00194ef:	83 c4 10             	add    esp,0x10
c00194f2:	89 c6                	mov    esi,eax
c00194f4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00194f9:	83 e6 0f             	and    esi,0xf
c00194fc:	eb 07                	jmp    c0019505 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00194fe:	31 f6                	xor    esi,esi
c0019500:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019505:	bf 01 00 00 00       	mov    edi,0x1
c001950a:	50                   	push   eax
c001950b:	6a 00                	push   0x0
c001950d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019514:	50                   	push   eax
c0019515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019519:	e8 f8 f1 ff ff       	call   c0018716 <IDE::enableIRQs(unsigned char, bool)>
c001951e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019521:	e8 9c fe ff ff       	call   c00193c2 <ATA::readyForCommand()>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	84 c0                	test   al,al
c001952b:	0f 84 4e 02 00 00    	je     c001977f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019531:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019537:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001953d:	c1 e0 04             	shl    eax,0x4
c0019540:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019547:	09 c6                	or     esi,eax
c0019549:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001954e:	75 05                	jne    c0019555 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019550:	83 ce a0             	or     esi,0xffffffa0
c0019553:	eb 03                	jmp    c0019558 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019555:	83 ce e0             	or     esi,0xffffffe0
c0019558:	89 f0                	mov    eax,esi
c001955a:	0f b6 f0             	movzx  esi,al
c001955d:	56                   	push   esi
c001955e:	6a 06                	push   0x6
c0019560:	51                   	push   ecx
c0019561:	52                   	push   edx
c0019562:	e8 a1 ef ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019567:	83 c4 10             	add    esp,0x10
c001956a:	6a 00                	push   0x0
c001956c:	6a 01                	push   0x1
c001956e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019575:	50                   	push   eax
c0019576:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001957c:	e8 87 ef ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019581:	83 c4 10             	add    esp,0x10
c0019584:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019589:	75 6e                	jne    c00195f9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001958b:	6a 00                	push   0x0
c001958d:	6a 08                	push   0x8
c001958f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019596:	50                   	push   eax
c0019597:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001959d:	e8 66 ef ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195a2:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00195a7:	50                   	push   eax
c00195a8:	6a 09                	push   0x9
c00195aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195b1:	50                   	push   eax
c00195b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195b8:	e8 4b ef ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195bd:	83 c4 20             	add    esp,0x20
c00195c0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00195c5:	50                   	push   eax
c00195c6:	6a 0a                	push   0xa
c00195c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195cf:	50                   	push   eax
c00195d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195d6:	e8 2d ef ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195db:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00195e0:	50                   	push   eax
c00195e1:	6a 0b                	push   0xb
c00195e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00195ea:	50                   	push   eax
c00195eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195f1:	e8 12 ef ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195f6:	83 c4 20             	add    esp,0x20
c00195f9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00195fe:	50                   	push   eax
c00195ff:	6a 02                	push   0x2
c0019601:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019608:	50                   	push   eax
c0019609:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001960f:	e8 f4 ee ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019614:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019619:	50                   	push   eax
c001961a:	6a 03                	push   0x3
c001961c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019623:	50                   	push   eax
c0019624:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001962a:	e8 d9 ee ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001962f:	83 c4 20             	add    esp,0x20
c0019632:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019637:	50                   	push   eax
c0019638:	6a 04                	push   0x4
c001963a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019641:	50                   	push   eax
c0019642:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019648:	e8 bb ee ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001964d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019652:	50                   	push   eax
c0019653:	6a 05                	push   0x5
c0019655:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001965c:	50                   	push   eax
c001965d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019663:	e8 a0 ee ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019668:	83 c4 20             	add    esp,0x20
c001966b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019670:	0f 94 c0             	sete   al
c0019673:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019678:	74 09                	je     c0019683 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001967a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019681:	eb 07                	jmp    c001968a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019683:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001968a:	0f b6 c0             	movzx  eax,al
c001968d:	50                   	push   eax
c001968e:	6a 07                	push   0x7
c0019690:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019697:	50                   	push   eax
c0019698:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001969e:	e8 65 ee ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196a3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	85 f6                	test   esi,esi
c00196ac:	0f 84 ae 00 00 00    	je     c0019760 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c00196b2:	50                   	push   eax
c00196b3:	6a 01                	push   0x1
c00196b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00196bc:	50                   	push   eax
c00196bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196c3:	e8 de f8 ff ff       	call   c0018fa6 <IDE::polling(unsigned char, unsigned int)>
c00196c8:	83 c4 10             	add    esp,0x10
c00196cb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00196d1:	84 c0                	test   al,al
c00196d3:	74 20                	je     c00196f5 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c00196d5:	0f b6 f8             	movzx  edi,al
c00196d8:	0f b6 d2             	movzx  edx,dl
c00196db:	57                   	push   edi
c00196dc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00196e3:	50                   	push   eax
c00196e4:	52                   	push   edx
c00196e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196eb:	e8 06 f8 ff ff       	call   c0018ef6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00196f0:	e9 87 00 00 00       	jmp    c001977c <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c00196f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00196fa:	74 33                	je     c001972f <ATA::access(unsigned long long, int, void*, bool)+0x321>
c00196fc:	31 ed                	xor    ebp,ebp
c00196fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019702:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019706:	50                   	push   eax
c0019707:	50                   	push   eax
c0019708:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001970f:	50                   	push   eax
c0019710:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019716:	e8 db ed ff ff       	call   c00184f6 <IDE::getBase(unsigned char)>
c001971b:	89 c2                	mov    edx,eax
c001971d:	89 f8                	mov    eax,edi
c001971f:	66 ef                	out    dx,ax
c0019721:	45                   	inc    ebp
c0019722:	83 c4 10             	add    esp,0x10
c0019725:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001972b:	75 d1                	jne    c00196fe <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001972d:	eb 23                	jmp    c0019752 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001972f:	0f b6 d2             	movzx  edx,dl
c0019732:	51                   	push   ecx
c0019733:	51                   	push   ecx
c0019734:	52                   	push   edx
c0019735:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001973b:	e8 b6 ed ff ff       	call   c00184f6 <IDE::getBase(unsigned char)>
c0019740:	b9 00 01 00 00       	mov    ecx,0x100
c0019745:	89 c2                	mov    edx,eax
c0019747:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001974b:	fc                   	cld    
c001974c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001975a:	4e                   	dec    esi
c001975b:	e9 4a ff ff ff       	jmp    c00196aa <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019760:	31 ff                	xor    edi,edi
c0019762:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019767:	74 16                	je     c001977f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019769:	50                   	push   eax
c001976a:	50                   	push   eax
c001976b:	31 c0                	xor    eax,eax
c001976d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019772:	0f 94 c0             	sete   al
c0019775:	50                   	push   eax
c0019776:	53                   	push   ebx
c0019777:	e8 fc fb ff ff       	call   c0019378 <ATA::flush(bool)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	83 c4 2c             	add    esp,0x2c
c0019782:	89 f8                	mov    eax,edi
c0019784:	5b                   	pop    ebx
c0019785:	5e                   	pop    esi
c0019786:	5f                   	pop    edi
c0019787:	5d                   	pop    ebp
c0019788:	c3                   	ret    
c0019789:	90                   	nop

c001978a <ATA::read(unsigned long long, int, void*)>:
c001978a:	57                   	push   edi
c001978b:	b8 04 00 00 00       	mov    eax,0x4
c0019790:	56                   	push   esi
c0019791:	53                   	push   ebx
c0019792:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019796:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001979a:	8d 7a ff             	lea    edi,[edx-0x1]
c001979d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00197a5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00197ab:	77 25                	ja     c00197d2 <ATA::read(unsigned long long, int, void*)+0x48>
c00197ad:	b8 06 00 00 00       	mov    eax,0x6
c00197b2:	85 f6                	test   esi,esi
c00197b4:	74 1c                	je     c00197d2 <ATA::read(unsigned long long, int, void*)+0x48>
c00197b6:	50                   	push   eax
c00197b7:	50                   	push   eax
c00197b8:	6a 00                	push   0x0
c00197ba:	56                   	push   esi
c00197bb:	52                   	push   edx
c00197bc:	53                   	push   ebx
c00197bd:	51                   	push   ecx
c00197be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197c2:	e8 47 fc ff ff       	call   c001940e <ATA::access(unsigned long long, int, void*, bool)>
c00197c7:	83 c4 20             	add    esp,0x20
c00197ca:	85 c0                	test   eax,eax
c00197cc:	0f 95 c0             	setne  al
c00197cf:	0f b6 c0             	movzx  eax,al
c00197d2:	5b                   	pop    ebx
c00197d3:	5e                   	pop    esi
c00197d4:	5f                   	pop    edi
c00197d5:	c3                   	ret    

c00197d6 <ATA::write(unsigned long long, int, void*)>:
c00197d6:	57                   	push   edi
c00197d7:	b8 04 00 00 00       	mov    eax,0x4
c00197dc:	56                   	push   esi
c00197dd:	53                   	push   ebx
c00197de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00197e6:	8d 7a ff             	lea    edi,[edx-0x1]
c00197e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00197f1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00197f7:	77 25                	ja     c001981e <ATA::write(unsigned long long, int, void*)+0x48>
c00197f9:	b8 06 00 00 00       	mov    eax,0x6
c00197fe:	85 f6                	test   esi,esi
c0019800:	74 1c                	je     c001981e <ATA::write(unsigned long long, int, void*)+0x48>
c0019802:	50                   	push   eax
c0019803:	50                   	push   eax
c0019804:	6a 01                	push   0x1
c0019806:	56                   	push   esi
c0019807:	52                   	push   edx
c0019808:	53                   	push   ebx
c0019809:	51                   	push   ecx
c001980a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001980e:	e8 fb fb ff ff       	call   c001940e <ATA::access(unsigned long long, int, void*, bool)>
c0019813:	83 c4 20             	add    esp,0x20
c0019816:	85 c0                	test   eax,eax
c0019818:	0f 95 c0             	setne  al
c001981b:	0f b6 c0             	movzx  eax,al
c001981e:	5b                   	pop    ebx
c001981f:	5e                   	pop    esi
c0019820:	5f                   	pop    edi
c0019821:	c3                   	ret    

c0019822 <ATA::detectCHS()>:
c0019822:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019826:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001982c:	c1 e0 06             	shl    eax,0x6
c001982f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019835:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001983f:	c7 44 24 04 68 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e868
c0019847:	e9 27 5c ff ff       	jmp    c000f473 <Krnl::panic(char const*)>

c001984c <ATA::open(int, int, void*)>:
c001984c:	53                   	push   ebx
c001984d:	83 ec 08             	sub    esp,0x8
c0019850:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019854:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019858:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001985c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019862:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019868:	c1 e0 06             	shl    eax,0x6
c001986b:	01 d0                	add    eax,edx
c001986d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019874:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001987a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019881:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001988b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019891:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019898:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001989f:	75 0c                	jne    c00198ad <ATA::open(int, int, void*)+0x61>
c00198a1:	83 ec 0c             	sub    esp,0xc
c00198a4:	53                   	push   ebx
c00198a5:	e8 78 ff ff ff       	call   c0019822 <ATA::detectCHS()>
c00198aa:	83 c4 10             	add    esp,0x10
c00198ad:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00198b3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00198b9:	c1 e0 06             	shl    eax,0x6
c00198bc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00198c3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00198cd:	d1 e8                	shr    eax,1
c00198cf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00198d5:	6a 04                	push   0x4
c00198d7:	6a 0c                	push   0xc
c00198d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00198e0:	50                   	push   eax
c00198e1:	52                   	push   edx
c00198e2:	e8 21 ec ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198e7:	90                   	nop
c00198e8:	90                   	nop
c00198e9:	6a 00                	push   0x0
c00198eb:	6a 0c                	push   0xc
c00198ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00198f4:	50                   	push   eax
c00198f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00198fb:	e8 08 ec ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019900:	83 c4 14             	add    esp,0x14
c0019903:	53                   	push   ebx
c0019904:	e8 91 18 ff ff       	call   c000b19a <PhysicalDisk::startCache()>
c0019909:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001990c:	e8 01 29 ff ff       	call   c000c212 <createPartitionsForDisk(PhysicalDisk*)>
c0019911:	31 c0                	xor    eax,eax
c0019913:	83 c4 18             	add    esp,0x18
c0019916:	5b                   	pop    ebx
c0019917:	c3                   	ret    

c0019918 <ATAPI::write(unsigned long long, int, void*)>:
c0019918:	b8 03 00 00 00       	mov    eax,0x3
c001991d:	c3                   	ret    

c001991e <ATAPI::close(int, int, void*)>:
c001991e:	83 ec 0c             	sub    esp,0xc
c0019921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019925:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001992b:	85 c0                	test   eax,eax
c001992d:	74 0c                	je     c001993b <ATAPI::close(int, int, void*)+0x1d>
c001992f:	83 ec 0c             	sub    esp,0xc
c0019932:	8b 10                	mov    edx,DWORD PTR [eax]
c0019934:	50                   	push   eax
c0019935:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019938:	83 c4 10             	add    esp,0x10
c001993b:	31 c0                	xor    eax,eax
c001993d:	83 c4 0c             	add    esp,0xc
c0019940:	c3                   	ret    
c0019941:	90                   	nop

c0019942 <ATAPI::ATAPI()>:
c0019942:	83 ec 0c             	sub    esp,0xc
c0019945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019949:	83 ec 04             	sub    esp,0x4
c001994c:	68 00 08 00 00       	push   0x800
c0019951:	68 b1 e9 01 c0       	push   0xc001e9b1
c0019956:	50                   	push   eax
c0019957:	e8 d6 17 ff ff       	call   c000b132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001995c:	83 c4 10             	add    esp,0x10
c001995f:	ba cc e8 01 c0       	mov    edx,0xc001e8cc
c0019964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019968:	89 10                	mov    DWORD PTR [eax],edx
c001996a:	90                   	nop
c001996b:	83 c4 0c             	add    esp,0xc
c001996e:	c3                   	ret    
c001996f:	90                   	nop

c0019970 <ATAPI::readyForCommand()>:
c0019970:	56                   	push   esi
c0019971:	53                   	push   ebx
c0019972:	53                   	push   ebx
c0019973:	31 db                	xor    ebx,ebx
c0019975:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019979:	51                   	push   ecx
c001997a:	6a 0c                	push   0xc
c001997c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019983:	50                   	push   eax
c0019984:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001998a:	e8 39 ec ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c001998f:	83 c4 10             	add    esp,0x10
c0019992:	a8 88                	test   al,0x88
c0019994:	74 25                	je     c00199bb <ATAPI::readyForCommand()+0x4b>
c0019996:	43                   	inc    ebx
c0019997:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001999d:	7e da                	jle    c0019979 <ATAPI::readyForCommand()+0x9>
c001999f:	83 ec 0c             	sub    esp,0xc
c00199a2:	68 5e 01 00 00       	push   0x15e
c00199a7:	e8 3c 92 ff ff       	call   c0012be8 <milliTenthSleep(unsigned int)>
c00199ac:	83 c4 10             	add    esp,0x10
c00199af:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00199b5:	75 c2                	jne    c0019979 <ATAPI::readyForCommand()+0x9>
c00199b7:	31 c0                	xor    eax,eax
c00199b9:	eb 02                	jmp    c00199bd <ATAPI::readyForCommand()+0x4d>
c00199bb:	b0 01                	mov    al,0x1
c00199bd:	5a                   	pop    edx
c00199be:	5b                   	pop    ebx
c00199bf:	5e                   	pop    esi
c00199c0:	c3                   	ret    
c00199c1:	90                   	nop

c00199c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00199c2:	55                   	push   ebp
c00199c3:	57                   	push   edi
c00199c4:	56                   	push   esi
c00199c5:	53                   	push   ebx
c00199c6:	83 ec 20             	sub    esp,0x20
c00199c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00199cd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00199d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00199d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00199d9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00199dd:	6a 01                	push   0x1
c00199df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199e6:	50                   	push   eax
c00199e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00199ed:	e8 24 ed ff ff       	call   c0018716 <IDE::enableIRQs(unsigned char, bool)>
c00199f2:	5e                   	pop    esi
c00199f3:	58                   	pop    eax
c00199f4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00199fb:	50                   	push   eax
c00199fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a02:	e8 db ea ff ff       	call   c00184e2 <IDE::prepareInterrupt(unsigned char)>
c0019a07:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a0a:	e8 61 ff ff ff       	call   c0019970 <ATAPI::readyForCommand()>
c0019a0f:	83 c4 10             	add    esp,0x10
c0019a12:	84 c0                	test   al,al
c0019a14:	75 0a                	jne    c0019a20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0019a16:	bb 01 00 00 00       	mov    ebx,0x1
c0019a1b:	e9 57 02 00 00       	jmp    c0019c77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019a20:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0019a26:	c1 e0 04             	shl    eax,0x4
c0019a29:	0f b6 c0             	movzx  eax,al
c0019a2c:	50                   	push   eax
c0019a2d:	6a 06                	push   0x6
c0019a2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a36:	50                   	push   eax
c0019a37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a3d:	e8 c6 ea ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a42:	6a 00                	push   0x0
c0019a44:	6a 01                	push   0x1
c0019a46:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a4d:	50                   	push   eax
c0019a4e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a54:	e8 af ea ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a59:	83 c4 20             	add    esp,0x20
c0019a5c:	0f b6 c3             	movzx  eax,bl
c0019a5f:	0f b6 df             	movzx  ebx,bh
c0019a62:	50                   	push   eax
c0019a63:	6a 04                	push   0x4
c0019a65:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a6c:	50                   	push   eax
c0019a6d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a73:	e8 90 ea ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a78:	53                   	push   ebx
c0019a79:	6a 05                	push   0x5
c0019a7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a82:	50                   	push   eax
c0019a83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019a89:	e8 7a ea ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a8e:	83 c4 20             	add    esp,0x20
c0019a91:	68 a0 00 00 00       	push   0xa0
c0019a96:	6a 07                	push   0x7
c0019a98:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019a9f:	50                   	push   eax
c0019aa0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019aa6:	e8 5d ea ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019aab:	83 c4 0c             	add    esp,0xc
c0019aae:	6a 01                	push   0x1
c0019ab0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ab7:	50                   	push   eax
c0019ab8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019abe:	e8 e3 f4 ff ff       	call   c0018fa6 <IDE::polling(unsigned char, unsigned int)>
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0019acc:	84 c0                	test   al,al
c0019ace:	74 23                	je     c0019af3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0019ad0:	0f b6 d8             	movzx  ebx,al
c0019ad3:	0f b6 d2             	movzx  edx,dl
c0019ad6:	53                   	push   ebx
c0019ad7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0019ade:	50                   	push   eax
c0019adf:	52                   	push   edx
c0019ae0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ae6:	e8 0b f4 ff ff       	call   c0018ef6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019aeb:	83 c4 10             	add    esp,0x10
c0019aee:	e9 84 01 00 00       	jmp    c0019c77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019af3:	0f b6 d2             	movzx  edx,dl
c0019af6:	53                   	push   ebx
c0019af7:	53                   	push   ebx
c0019af8:	52                   	push   edx
c0019af9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019aff:	e8 f2 e9 ff ff       	call   c00184f6 <IDE::getBase(unsigned char)>
c0019b04:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019b08:	b9 06 00 00 00       	mov    ecx,0x6
c0019b0d:	89 c2                	mov    edx,eax
c0019b0f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0019b12:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019b16:	83 c4 10             	add    esp,0x10
c0019b19:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019b1f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019b26:	85 db                	test   ebx,ebx
c0019b28:	0f 84 ec 00 00 00    	je     c0019c1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0019b2e:	51                   	push   ecx
c0019b2f:	51                   	push   ecx
c0019b30:	52                   	push   edx
c0019b31:	50                   	push   eax
c0019b32:	e8 3f eb ff ff       	call   c0018676 <IDE::waitInterrupt(unsigned char)>
c0019b37:	83 c4 10             	add    esp,0x10
c0019b3a:	84 c0                	test   al,al
c0019b3c:	0f 84 d4 fe ff ff    	je     c0019a16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019b42:	56                   	push   esi
c0019b43:	56                   	push   esi
c0019b44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b4b:	50                   	push   eax
c0019b4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b52:	e8 8b e9 ff ff       	call   c00184e2 <IDE::prepareInterrupt(unsigned char)>
c0019b57:	83 c4 0c             	add    esp,0xc
c0019b5a:	6a 04                	push   0x4
c0019b5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b63:	50                   	push   eax
c0019b64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b6a:	e8 59 ea ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0019b6f:	83 c4 0c             	add    esp,0xc
c0019b72:	89 c6                	mov    esi,eax
c0019b74:	6a 05                	push   0x5
c0019b76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019b7d:	50                   	push   eax
c0019b7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019b84:	e8 3f ea ff ff       	call   c00185c8 <IDE::read(unsigned char, unsigned char)>
c0019b89:	89 f1                	mov    ecx,esi
c0019b8b:	0f b6 c0             	movzx  eax,al
c0019b8e:	0f b6 f1             	movzx  esi,cl
c0019b91:	c1 e0 08             	shl    eax,0x8
c0019b94:	09 c6                	or     esi,eax
c0019b96:	d1 fe                	sar    esi,1
c0019b98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0019b9c:	83 c4 10             	add    esp,0x10
c0019b9f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019ba4:	74 41                	je     c0019be7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0019ba6:	31 c9                	xor    ecx,ecx
c0019ba8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019bae:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019bb5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0019bb9:	75 0a                	jne    c0019bc5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0019bbb:	01 c9                	add    ecx,ecx
c0019bbd:	01 cd                	add    ebp,ecx
c0019bbf:	4b                   	dec    ebx
c0019bc0:	e9 54 ff ff ff       	jmp    c0019b19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0019bc5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0019bca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019bce:	51                   	push   ecx
c0019bcf:	51                   	push   ecx
c0019bd0:	52                   	push   edx
c0019bd1:	50                   	push   eax
c0019bd2:	e8 1f e9 ff ff       	call   c00184f6 <IDE::getBase(unsigned char)>
c0019bd7:	89 c2                	mov    edx,eax
c0019bd9:	89 f0                	mov    eax,esi
c0019bdb:	66 ef                	out    dx,ax
c0019bdd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	41                   	inc    ecx
c0019be5:	eb c1                	jmp    c0019ba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0019be7:	31 f6                	xor    esi,esi
c0019be9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0019bef:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0019bf6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0019bfa:	75 06                	jne    c0019c02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0019bfc:	01 f6                	add    esi,esi
c0019bfe:	01 f5                	add    ebp,esi
c0019c00:	eb bd                	jmp    c0019bbf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0019c02:	51                   	push   ecx
c0019c03:	51                   	push   ecx
c0019c04:	52                   	push   edx
c0019c05:	50                   	push   eax
c0019c06:	e8 eb e8 ff ff       	call   c00184f6 <IDE::getBase(unsigned char)>
c0019c0b:	89 c2                	mov    edx,eax
c0019c0d:	66 ed                	in     ax,dx
c0019c0f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0019c14:	83 c4 10             	add    esp,0x10
c0019c17:	46                   	inc    esi
c0019c18:	eb cf                	jmp    c0019be9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0019c1a:	51                   	push   ecx
c0019c1b:	51                   	push   ecx
c0019c1c:	52                   	push   edx
c0019c1d:	50                   	push   eax
c0019c1e:	e8 53 ea ff ff       	call   c0018676 <IDE::waitInterrupt(unsigned char)>
c0019c23:	83 c4 10             	add    esp,0x10
c0019c26:	84 c0                	test   al,al
c0019c28:	0f 84 e8 fd ff ff    	je     c0019a16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0019c2e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019c33:	52                   	push   edx
c0019c34:	52                   	push   edx
c0019c35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c3c:	50                   	push   eax
c0019c3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c43:	e8 9a e8 ff ff       	call   c00184e2 <IDE::prepareInterrupt(unsigned char)>
c0019c48:	83 c4 10             	add    esp,0x10
c0019c4b:	50                   	push   eax
c0019c4c:	50                   	push   eax
c0019c4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019c54:	50                   	push   eax
c0019c55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019c5b:	e8 96 e8 ff ff       	call   c00184f6 <IDE::getBase(unsigned char)>
c0019c60:	8d 50 07             	lea    edx,[eax+0x7]
c0019c63:	ec                   	in     al,dx
c0019c64:	83 c4 10             	add    esp,0x10
c0019c67:	a8 88                	test   al,0x88
c0019c69:	74 0a                	je     c0019c75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0019c6b:	4b                   	dec    ebx
c0019c6c:	75 dd                	jne    c0019c4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0019c6e:	bb 02 00 00 00       	mov    ebx,0x2
c0019c73:	eb 02                	jmp    c0019c77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019c75:	31 db                	xor    ebx,ebx
c0019c77:	83 c4 1c             	add    esp,0x1c
c0019c7a:	89 d8                	mov    eax,ebx
c0019c7c:	5b                   	pop    ebx
c0019c7d:	5e                   	pop    esi
c0019c7e:	5f                   	pop    edi
c0019c7f:	5d                   	pop    ebp
c0019c80:	c3                   	ret    
c0019c81:	90                   	nop

c0019c82 <ATAPI::diskRemoved()>:
c0019c82:	53                   	push   ebx
c0019c83:	83 ec 14             	sub    esp,0x14
c0019c86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019c8a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019c91:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0019c97:	e8 f6 22 ff ff       	call   c000bf92 <LogicalDisk::unmount()>
c0019c9c:	58                   	pop    eax
c0019c9d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0019ca3:	e8 30 2c ff ff       	call   c000c8d8 <VCache::writeWriteBuffer()>
c0019ca8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019cae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019cb2:	83 c4 18             	add    esp,0x18
c0019cb5:	5b                   	pop    ebx
c0019cb6:	e9 0d 2c ff ff       	jmp    c000c8c8 <VCache::invalidateReadBuffer()>
c0019cbb:	90                   	nop

c0019cbc <ATAPI::eject()>:
c0019cbc:	57                   	push   edi
c0019cbd:	b9 03 00 00 00       	mov    ecx,0x3
c0019cc2:	53                   	push   ebx
c0019cc3:	83 ec 14             	sub    esp,0x14
c0019cc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019cca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019cce:	fc                   	cld    
c0019ccf:	31 c0                	xor    eax,eax
c0019cd1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019cd3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0019cd8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0019cdd:	50                   	push   eax
c0019cde:	50                   	push   eax
c0019cdf:	6a 00                	push   0x0
c0019ce1:	6a 00                	push   0x0
c0019ce3:	6a 00                	push   0x0
c0019ce5:	6a 02                	push   0x2
c0019ce7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019ceb:	50                   	push   eax
c0019cec:	53                   	push   ebx
c0019ced:	e8 d0 fc ff ff       	call   c00199c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019cf2:	83 c4 14             	add    esp,0x14
c0019cf5:	53                   	push   ebx
c0019cf6:	e8 87 ff ff ff       	call   c0019c82 <ATAPI::diskRemoved()>
c0019cfb:	83 c4 24             	add    esp,0x24
c0019cfe:	31 c0                	xor    eax,eax
c0019d00:	5b                   	pop    ebx
c0019d01:	5f                   	pop    edi
c0019d02:	c3                   	ret    
c0019d03:	90                   	nop

c0019d04 <ATAPI::diskInserted()>:
c0019d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d08:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0019d0f:	c3                   	ret    

c0019d10 <ATAPI::detectMedia()>:
c0019d10:	56                   	push   esi
c0019d11:	53                   	push   ebx
c0019d12:	83 ec 28             	sub    esp,0x28
c0019d15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d19:	6a 0c                	push   0xc
c0019d1b:	6a 00                	push   0x0
c0019d1d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0019d21:	56                   	push   esi
c0019d22:	e8 c9 67 fe ff       	call   c00004f0 <memset>
c0019d27:	58                   	pop    eax
c0019d28:	5a                   	pop    edx
c0019d29:	6a 00                	push   0x0
c0019d2b:	6a 00                	push   0x0
c0019d2d:	6a 00                	push   0x0
c0019d2f:	6a 00                	push   0x0
c0019d31:	56                   	push   esi
c0019d32:	53                   	push   ebx
c0019d33:	e8 8a fc ff ff       	call   c00199c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019d38:	83 c4 1c             	add    esp,0x1c
c0019d3b:	6a 0c                	push   0xc
c0019d3d:	6a 00                	push   0x0
c0019d3f:	56                   	push   esi
c0019d40:	e8 ab 67 fe ff       	call   c00004f0 <memset>
c0019d45:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0019d4a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0019d4f:	59                   	pop    ecx
c0019d50:	58                   	pop    eax
c0019d51:	6a 01                	push   0x1
c0019d53:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0019d57:	50                   	push   eax
c0019d58:	6a 00                	push   0x0
c0019d5a:	6a 12                	push   0x12
c0019d5c:	56                   	push   esi
c0019d5d:	53                   	push   ebx
c0019d5e:	e8 5f fc ff ff       	call   c00199c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019d63:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0019d67:	83 c4 20             	add    esp,0x20
c0019d6a:	83 e0 7f             	and    eax,0x7f
c0019d6d:	3c 70                	cmp    al,0x70
c0019d6f:	74 15                	je     c0019d86 <ATAPI::detectMedia()+0x76>
c0019d71:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019d78:	75 0c                	jne    c0019d86 <ATAPI::detectMedia()+0x76>
c0019d7a:	83 ec 0c             	sub    esp,0xc
c0019d7d:	53                   	push   ebx
c0019d7e:	e8 81 ff ff ff       	call   c0019d04 <ATAPI::diskInserted()>
c0019d83:	83 c4 10             	add    esp,0x10
c0019d86:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019d8a:	83 e0 0f             	and    eax,0xf
c0019d8d:	3c 02                	cmp    al,0x2
c0019d8f:	75 1b                	jne    c0019dac <ATAPI::detectMedia()+0x9c>
c0019d91:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0019d96:	75 2d                	jne    c0019dc5 <ATAPI::detectMedia()+0xb5>
c0019d98:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019d9f:	74 24                	je     c0019dc5 <ATAPI::detectMedia()+0xb5>
c0019da1:	83 ec 0c             	sub    esp,0xc
c0019da4:	53                   	push   ebx
c0019da5:	e8 d8 fe ff ff       	call   c0019c82 <ATAPI::diskRemoved()>
c0019daa:	eb 16                	jmp    c0019dc2 <ATAPI::detectMedia()+0xb2>
c0019dac:	84 c0                	test   al,al
c0019dae:	75 15                	jne    c0019dc5 <ATAPI::detectMedia()+0xb5>
c0019db0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019db7:	75 0c                	jne    c0019dc5 <ATAPI::detectMedia()+0xb5>
c0019db9:	83 ec 0c             	sub    esp,0xc
c0019dbc:	53                   	push   ebx
c0019dbd:	e8 42 ff ff ff       	call   c0019d04 <ATAPI::diskInserted()>
c0019dc2:	83 c4 10             	add    esp,0x10
c0019dc5:	83 c4 24             	add    esp,0x24
c0019dc8:	5b                   	pop    ebx
c0019dc9:	5e                   	pop    esi
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <ATAPI::open(int, int, void*)>:
c0019dcc:	56                   	push   esi
c0019dcd:	53                   	push   ebx
c0019dce:	50                   	push   eax
c0019dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019dd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ddb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019de1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019de7:	c1 e0 06             	shl    eax,0x6
c0019dea:	01 d0                	add    eax,edx
c0019dec:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0019df3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0019df9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0019e00:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0019e0a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019e10:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0019e17:	6a 04                	push   0x4
c0019e19:	6a 0c                	push   0xc
c0019e1b:	51                   	push   ecx
c0019e1c:	52                   	push   edx
c0019e1d:	e8 e6 e6 ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e22:	90                   	nop
c0019e23:	90                   	nop
c0019e24:	6a 00                	push   0x0
c0019e26:	6a 0c                	push   0xc
c0019e28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e2f:	50                   	push   eax
c0019e30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e36:	e8 cd e6 ff ff       	call   c0018508 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e3b:	83 c4 14             	add    esp,0x14
c0019e3e:	68 74 01 00 00       	push   0x174
c0019e43:	e8 19 cd fe ff       	call   c0006b61 <malloc>
c0019e48:	83 c4 0c             	add    esp,0xc
c0019e4b:	89 c6                	mov    esi,eax
c0019e4d:	6a 00                	push   0x0
c0019e4f:	68 ff ff ff 7f       	push   0x7fffffff
c0019e54:	6a 00                	push   0x0
c0019e56:	6a 00                	push   0x0
c0019e58:	53                   	push   ebx
c0019e59:	68 9a ea 01 c0       	push   0xc001ea9a
c0019e5e:	50                   	push   eax
c0019e5f:	e8 7a 1f ff ff       	call   c000bdde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0019e64:	83 c4 14             	add    esp,0x14
c0019e67:	56                   	push   esi
c0019e68:	e8 27 20 ff ff       	call   c000be94 <LogicalDisk::assignDriveLetter()>
c0019e6d:	5a                   	pop    edx
c0019e6e:	0f be c0             	movsx  eax,al
c0019e71:	59                   	pop    ecx
c0019e72:	50                   	push   eax
c0019e73:	68 b4 e8 01 c0       	push   0xc001e8b4
c0019e78:	e8 a7 fa fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c0019e7d:	58                   	pop    eax
c0019e7e:	5a                   	pop    edx
c0019e7f:	56                   	push   esi
c0019e80:	53                   	push   ebx
c0019e81:	e8 de 0e ff ff       	call   c000ad64 <Device::addChild(Device*)>
c0019e86:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0019e8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e8f:	e8 06 13 ff ff       	call   c000b19a <PhysicalDisk::startCache()>
c0019e94:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0019e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e9e:	e8 6d fe ff ff       	call   c0019d10 <ATAPI::detectMedia()>
c0019ea3:	83 c4 14             	add    esp,0x14
c0019ea6:	31 c0                	xor    eax,eax
c0019ea8:	5b                   	pop    ebx
c0019ea9:	5e                   	pop    esi
c0019eaa:	c3                   	ret    
c0019eab:	90                   	nop

c0019eac <ATAPI::read(unsigned long long, int, void*)>:
c0019eac:	55                   	push   ebp
c0019ead:	57                   	push   edi
c0019eae:	56                   	push   esi
c0019eaf:	53                   	push   ebx
c0019eb0:	83 ec 1c             	sub    esp,0x1c
c0019eb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019eb7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ebb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019ebf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019ec6:	74 3c                	je     c0019f04 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0019ec8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0019ecc:	b9 03 00 00 00       	mov    ecx,0x3
c0019ed1:	fc                   	cld    
c0019ed2:	31 c0                	xor    eax,eax
c0019ed4:	0f ce                	bswap  esi
c0019ed6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019ed8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0019edd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0019ee1:	89 e8                	mov    eax,ebp
c0019ee3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019ee7:	50                   	push   eax
c0019ee8:	50                   	push   eax
c0019ee9:	55                   	push   ebp
c0019eea:	c1 e5 0b             	shl    ebp,0xb
c0019eed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019ef1:	6a 00                	push   0x0
c0019ef3:	55                   	push   ebp
c0019ef4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019ef8:	50                   	push   eax
c0019ef9:	53                   	push   ebx
c0019efa:	e8 c3 fa ff ff       	call   c00199c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0019eff:	83 c4 20             	add    esp,0x20
c0019f02:	eb 1a                	jmp    c0019f1e <ATAPI::read(unsigned long long, int, void*)+0x72>
c0019f04:	83 ec 0c             	sub    esp,0xc
c0019f07:	53                   	push   ebx
c0019f08:	e8 03 fe ff ff       	call   c0019d10 <ATAPI::detectMedia()>
c0019f0d:	83 c4 10             	add    esp,0x10
c0019f10:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0019f17:	75 af                	jne    c0019ec8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0019f19:	b8 02 00 00 00       	mov    eax,0x2
c0019f1e:	83 c4 1c             	add    esp,0x1c
c0019f21:	5b                   	pop    ebx
c0019f22:	5e                   	pop    esi
c0019f23:	5f                   	pop    edi
c0019f24:	5d                   	pop    ebp
c0019f25:	c3                   	ret    

c0019f26 <SATA::close(int, int, void*)>:
c0019f26:	83 ec 0c             	sub    esp,0xc
c0019f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f33:	85 c0                	test   eax,eax
c0019f35:	74 0c                	je     c0019f43 <SATA::close(int, int, void*)+0x1d>
c0019f37:	83 ec 0c             	sub    esp,0xc
c0019f3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f3c:	50                   	push   eax
c0019f3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f40:	83 c4 10             	add    esp,0x10
c0019f43:	31 c0                	xor    eax,eax
c0019f45:	83 c4 0c             	add    esp,0xc
c0019f48:	c3                   	ret    
c0019f49:	90                   	nop

c0019f4a <SATA::powerSaving(PowerSavingLevel)>:
c0019f4a:	c3                   	ret    
c0019f4b:	90                   	nop

c0019f4c <SATA::open(int, int, void*)>:
c0019f4c:	56                   	push   esi
c0019f4d:	53                   	push   ebx
c0019f4e:	50                   	push   eax
c0019f4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f57:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019f61:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0019f67:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0019f71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f75:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f7f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f85:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019f8c:	e8 9d cf fe ff       	call   c0006f2e <Phys::allocatePage()>
c0019f91:	89 c6                	mov    esi,eax
c0019f93:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0019f99:	81 c6 00 10 00 00    	add    esi,0x1000
c0019f9f:	e8 8a cf fe ff       	call   c0006f2e <Phys::allocatePage()>
c0019fa4:	39 c6                	cmp    esi,eax
c0019fa6:	74 10                	je     c0019fb8 <SATA::open(int, int, void*)+0x6c>
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	68 fc e8 01 c0       	push   0xc001e8fc
c0019fb0:	e8 be 54 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	83 ec 0c             	sub    esp,0xc
c0019fbb:	6a 02                	push   0x2
c0019fbd:	e8 db e6 fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c0019fc2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019fc8:	6a 03                	push   0x3
c0019fca:	50                   	push   eax
c0019fcb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019fd1:	ff 35 14 f5 01 c0    	push   DWORD PTR ds:0xc001f514
c0019fd7:	e8 1a ed fe ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019fdc:	83 c4 14             	add    esp,0x14
c0019fdf:	53                   	push   ebx
c0019fe0:	e8 b5 11 ff ff       	call   c000b19a <PhysicalDisk::startCache()>
c0019fe5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fe8:	e8 25 22 ff ff       	call   c000c212 <createPartitionsForDisk(PhysicalDisk*)>
c0019fed:	83 c4 14             	add    esp,0x14
c0019ff0:	31 c0                	xor    eax,eax
c0019ff2:	5b                   	pop    ebx
c0019ff3:	5e                   	pop    esi
c0019ff4:	c3                   	ret    
c0019ff5:	90                   	nop

c0019ff6 <SATA::SATA()>:
c0019ff6:	83 ec 0c             	sub    esp,0xc
c0019ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ffd:	83 ec 04             	sub    esp,0x4
c001a000:	68 00 02 00 00       	push   0x200
c001a005:	68 10 e9 01 c0       	push   0xc001e910
c001a00a:	50                   	push   eax
c001a00b:	e8 22 11 ff ff       	call   c000b132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a010:	83 c4 10             	add    esp,0x10
c001a013:	ba 80 e9 01 c0       	mov    edx,0xc001e980
c001a018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a01c:	89 10                	mov    DWORD PTR [eax],edx
c001a01e:	90                   	nop
c001a01f:	83 c4 0c             	add    esp,0xc
c001a022:	c3                   	ret    
c001a023:	90                   	nop

c001a024 <SATA::access(unsigned long long, int, void*, bool)>:
c001a024:	55                   	push   ebp
c001a025:	57                   	push   edi
c001a026:	56                   	push   esi
c001a027:	53                   	push   ebx
c001a028:	83 ec 2c             	sub    esp,0x2c
c001a02b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a02f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a033:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a037:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a03b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a03f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a044:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a048:	7e 10                	jle    c001a05a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	68 20 e9 01 c0       	push   0xc001e920
c001a052:	e8 1c 54 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a060:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a066:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a070:	89 d0                	mov    eax,edx
c001a072:	c1 e0 07             	shl    eax,0x7
c001a075:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a079:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a083:	51                   	push   ecx
c001a084:	8d 42 02             	lea    eax,[edx+0x2]
c001a087:	51                   	push   ecx
c001a088:	c1 e0 07             	shl    eax,0x7
c001a08b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a08f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a093:	50                   	push   eax
c001a094:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a09a:	e8 f1 ef ff ff       	call   c0019090 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a09f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a0a3:	83 c4 10             	add    esp,0x10
c001a0a6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a0ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0af:	0f 84 4f 01 00 00    	je     c001a204 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a0b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a0b9:	c1 e0 09             	shl    eax,0x9
c001a0bc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a0c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a0c5:	74 0e                	je     c001a0d5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a0c7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a0cd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a0d1:	89 c1                	mov    ecx,eax
c001a0d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a0d9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a0df:	8d 42 02             	lea    eax,[edx+0x2]
c001a0e2:	c1 e0 07             	shl    eax,0x7
c001a0e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a0e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0eb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a0f1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a0f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0fb:	c1 e1 05             	shl    ecx,0x5
c001a0fe:	01 c8                	add    eax,ecx
c001a100:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a104:	83 e1 01             	and    ecx,0x1
c001a107:	89 ce                	mov    esi,ecx
c001a109:	8a 08                	mov    cl,BYTE PTR [eax]
c001a10b:	c1 e6 06             	shl    esi,0x6
c001a10e:	83 e1 bf             	and    ecx,0xffffffbf
c001a111:	09 f1                	or     ecx,esi
c001a113:	88 08                	mov    BYTE PTR [eax],cl
c001a115:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a117:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a11d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a123:	89 08                	mov    DWORD PTR [eax],ecx
c001a125:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a12b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a131:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a137:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a13a:	50                   	push   eax
c001a13b:	68 90 00 00 00       	push   0x90
c001a140:	6a 00                	push   0x0
c001a142:	56                   	push   esi
c001a143:	e8 a8 63 fe ff       	call   c00004f0 <memset>
c001a148:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a14e:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a152:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a158:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a15c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	48                   	dec    eax
c001a164:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a169:	89 c1                	mov    ecx,eax
c001a16b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a171:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a176:	09 c8                	or     eax,ecx
c001a178:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a17e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a181:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a188:	66 25 00 7f          	and    ax,0x7f00
c001a18c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a190:	66 0d 27 80          	or     ax,0x8027
c001a194:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a199:	66 89 06             	mov    WORD PTR [esi],ax
c001a19c:	19 c0                	sbb    eax,eax
c001a19e:	83 e0 f0             	and    eax,0xfffffff0
c001a1a1:	83 c0 35             	add    eax,0x35
c001a1a4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a1a7:	89 e8                	mov    eax,ebp
c001a1a9:	c1 e8 10             	shr    eax,0x10
c001a1ac:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a1af:	89 e8                	mov    eax,ebp
c001a1b1:	c1 e8 18             	shr    eax,0x18
c001a1b4:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a1b7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a1bb:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a1be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1c2:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a1c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a1c9:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a1cd:	89 d6                	mov    esi,edx
c001a1cf:	31 c0                	xor    eax,eax
c001a1d1:	c1 e6 07             	shl    esi,0x7
c001a1d4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a1d8:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a1de:	80 e1 88             	and    cl,0x88
c001a1e1:	74 0a                	je     c001a1ed <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a1e3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a1e8:	74 0a                	je     c001a1f4 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a1ea:	40                   	inc    eax
c001a1eb:	eb eb                	jmp    c001a1d8 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a1ed:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a1f2:	75 17                	jne    c001a20b <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a1f4:	83 ec 0c             	sub    esp,0xc
c001a1f7:	68 59 e9 01 c0       	push   0xc001e959
c001a1fc:	e8 23 f7 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a201:	83 c4 10             	add    esp,0x10
c001a204:	b8 01 00 00 00       	mov    eax,0x1
c001a209:	eb 5d                	jmp    c001a268 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a20b:	b8 01 00 00 00       	mov    eax,0x1
c001a210:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a214:	c1 e2 07             	shl    edx,0x7
c001a217:	d3 e0                	shl    eax,cl
c001a219:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a21d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a223:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a229:	85 c8                	test   eax,ecx
c001a22b:	74 16                	je     c001a243 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a22d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a233:	0f ba e1 1e          	bt     ecx,0x1e
c001a237:	73 ea                	jae    c001a223 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a239:	83 ec 0c             	sub    esp,0xc
c001a23c:	68 67 e9 01 c0       	push   0xc001e967
c001a241:	eb b9                	jmp    c001a1fc <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a243:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a249:	0f ba e0 1e          	bt     eax,0x1e
c001a24d:	72 b5                	jb     c001a204 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a24f:	31 c0                	xor    eax,eax
c001a251:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a256:	75 10                	jne    c001a268 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a258:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a25e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a262:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a266:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a268:	83 c4 2c             	add    esp,0x2c
c001a26b:	5b                   	pop    ebx
c001a26c:	5e                   	pop    esi
c001a26d:	5f                   	pop    edi
c001a26e:	5d                   	pop    ebp
c001a26f:	c3                   	ret    

c001a270 <SATA::read(unsigned long long, int, void*)>:
c001a270:	57                   	push   edi
c001a271:	b8 04 00 00 00       	mov    eax,0x4
c001a276:	56                   	push   esi
c001a277:	53                   	push   ebx
c001a278:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a27c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a280:	8d 7a ff             	lea    edi,[edx-0x1]
c001a283:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a287:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a28b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a291:	77 25                	ja     c001a2b8 <SATA::read(unsigned long long, int, void*)+0x48>
c001a293:	b8 06 00 00 00       	mov    eax,0x6
c001a298:	85 f6                	test   esi,esi
c001a29a:	74 1c                	je     c001a2b8 <SATA::read(unsigned long long, int, void*)+0x48>
c001a29c:	50                   	push   eax
c001a29d:	50                   	push   eax
c001a29e:	6a 00                	push   0x0
c001a2a0:	56                   	push   esi
c001a2a1:	52                   	push   edx
c001a2a2:	53                   	push   ebx
c001a2a3:	51                   	push   ecx
c001a2a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2a8:	e8 77 fd ff ff       	call   c001a024 <SATA::access(unsigned long long, int, void*, bool)>
c001a2ad:	83 c4 20             	add    esp,0x20
c001a2b0:	85 c0                	test   eax,eax
c001a2b2:	0f 95 c0             	setne  al
c001a2b5:	0f b6 c0             	movzx  eax,al
c001a2b8:	5b                   	pop    ebx
c001a2b9:	5e                   	pop    esi
c001a2ba:	5f                   	pop    edi
c001a2bb:	c3                   	ret    

c001a2bc <SATA::write(unsigned long long, int, void*)>:
c001a2bc:	55                   	push   ebp
c001a2bd:	b8 04 00 00 00       	mov    eax,0x4
c001a2c2:	57                   	push   edi
c001a2c3:	56                   	push   esi
c001a2c4:	53                   	push   ebx
c001a2c5:	83 ec 0c             	sub    esp,0xc
c001a2c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2cc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a2d0:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a2d3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a2d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a2db:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a2e1:	77 3d                	ja     c001a320 <SATA::write(unsigned long long, int, void*)+0x64>
c001a2e3:	b8 06 00 00 00       	mov    eax,0x6
c001a2e8:	85 ed                	test   ebp,ebp
c001a2ea:	74 34                	je     c001a320 <SATA::write(unsigned long long, int, void*)+0x64>
c001a2ec:	c1 e3 09             	shl    ebx,0x9
c001a2ef:	01 eb                	add    ebx,ebp
c001a2f1:	89 d6                	mov    esi,edx
c001a2f3:	89 cf                	mov    edi,ecx
c001a2f5:	83 c6 01             	add    esi,0x1
c001a2f8:	83 d7 00             	adc    edi,0x0
c001a2fb:	50                   	push   eax
c001a2fc:	50                   	push   eax
c001a2fd:	6a 01                	push   0x1
c001a2ff:	55                   	push   ebp
c001a300:	81 c5 00 02 00 00    	add    ebp,0x200
c001a306:	6a 01                	push   0x1
c001a308:	51                   	push   ecx
c001a309:	52                   	push   edx
c001a30a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a30e:	e8 11 fd ff ff       	call   c001a024 <SATA::access(unsigned long long, int, void*, bool)>
c001a313:	83 c4 20             	add    esp,0x20
c001a316:	89 f2                	mov    edx,esi
c001a318:	89 f9                	mov    ecx,edi
c001a31a:	39 dd                	cmp    ebp,ebx
c001a31c:	75 d3                	jne    c001a2f1 <SATA::write(unsigned long long, int, void*)+0x35>
c001a31e:	31 c0                	xor    eax,eax
c001a320:	83 c4 0c             	add    esp,0xc
c001a323:	5b                   	pop    ebx
c001a324:	5e                   	pop    esi
c001a325:	5f                   	pop    edi
c001a326:	5d                   	pop    ebp
c001a327:	c3                   	ret    

c001a328 <SATAPI::write(unsigned long long, int, void*)>:
c001a328:	b8 03 00 00 00       	mov    eax,0x3
c001a32d:	c3                   	ret    

c001a32e <SATAPI::close(int, int, void*)>:
c001a32e:	83 ec 0c             	sub    esp,0xc
c001a331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a335:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a33b:	85 c0                	test   eax,eax
c001a33d:	74 0c                	je     c001a34b <SATAPI::close(int, int, void*)+0x1d>
c001a33f:	83 ec 0c             	sub    esp,0xc
c001a342:	8b 10                	mov    edx,DWORD PTR [eax]
c001a344:	50                   	push   eax
c001a345:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	31 c0                	xor    eax,eax
c001a34d:	83 c4 0c             	add    esp,0xc
c001a350:	c3                   	ret    
c001a351:	90                   	nop

c001a352 <SATAPI::SATAPI()>:
c001a352:	83 ec 0c             	sub    esp,0xc
c001a355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a359:	83 ec 04             	sub    esp,0x4
c001a35c:	68 00 08 00 00       	push   0x800
c001a361:	68 b0 e9 01 c0       	push   0xc001e9b0
c001a366:	50                   	push   eax
c001a367:	e8 c6 0d ff ff       	call   c000b132 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	ba ec ea 01 c0       	mov    edx,0xc001eaec
c001a374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a378:	89 10                	mov    DWORD PTR [eax],edx
c001a37a:	90                   	nop
c001a37b:	83 c4 0c             	add    esp,0xc
c001a37e:	c3                   	ret    
c001a37f:	90                   	nop

c001a380 <SATAPI::diskRemoved()>:
c001a380:	c3                   	ret    
c001a381:	90                   	nop

c001a382 <SATAPI::diskInserted()>:
c001a382:	83 ec 18             	sub    esp,0x18
c001a385:	68 bc e9 01 c0       	push   0xc001e9bc
c001a38a:	e8 95 f5 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a38f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a393:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a39a:	83 c4 1c             	add    esp,0x1c
c001a39d:	c3                   	ret    

c001a39e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a39e:	55                   	push   ebp
c001a39f:	57                   	push   edi
c001a3a0:	56                   	push   esi
c001a3a1:	53                   	push   ebx
c001a3a2:	83 ec 38             	sub    esp,0x38
c001a3a5:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a3a9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a3ad:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a3b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a3b5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a3b9:	68 d4 e9 01 c0       	push   0xc001e9d4
c001a3be:	e8 61 f5 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a3c3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a3c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a3cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3d3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3dd:	c1 e0 07             	shl    eax,0x7
c001a3e0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a3e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a3e8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a3f2:	5a                   	pop    edx
c001a3f3:	59                   	pop    ecx
c001a3f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3f8:	8d 58 02             	lea    ebx,[eax+0x2]
c001a3fb:	c1 e3 07             	shl    ebx,0x7
c001a3fe:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001a402:	53                   	push   ebx
c001a403:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001a409:	e8 82 ec ff ff       	call   c0019090 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a40e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a412:	83 c4 10             	add    esp,0x10
c001a415:	b8 01 00 00 00       	mov    eax,0x1
c001a41a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a41f:	0f 84 ff 01 00 00    	je     c001a624 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a425:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a42b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a42d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a433:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a439:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a43d:	c1 e1 05             	shl    ecx,0x5
c001a440:	01 c8                	add    eax,ecx
c001a442:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a444:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001a44a:	81 c9 25 00 01 00    	or     ecx,0x10025
c001a450:	89 08                	mov    DWORD PTR [eax],ecx
c001a452:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001a458:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001a45e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001a464:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001a467:	8d 7b 40             	lea    edi,[ebx+0x40]
c001a46a:	50                   	push   eax
c001a46b:	68 90 00 00 00       	push   0x90
c001a470:	6a 00                	push   0x0
c001a472:	53                   	push   ebx
c001a473:	e8 78 60 fe ff       	call   c00004f0 <memset>
c001a478:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001a47c:	b9 0c 00 00 00       	mov    ecx,0xc
c001a481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a483:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001a489:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001a48d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001a493:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001a497:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001a49b:	48                   	dec    eax
c001a49c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a4a1:	89 c1                	mov    ecx,eax
c001a4a3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001a4a9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a4ae:	09 c8                	or     eax,ecx
c001a4b0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001a4b6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001a4b9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001a4c0:	66 25 00 7f          	and    ax,0x7f00
c001a4c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a4c8:	66 0d 27 80          	or     ax,0x8027
c001a4cc:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001a4d0:	66 89 03             	mov    WORD PTR [ebx],ax
c001a4d3:	89 d0                	mov    eax,edx
c001a4d5:	c1 ea 18             	shr    edx,0x18
c001a4d8:	c1 e8 10             	shr    eax,0x10
c001a4db:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001a4de:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001a4e1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a4e5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001a4e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4ec:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001a4ef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001a4fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a4fe:	31 c0                	xor    eax,eax
c001a500:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001a506:	80 e1 88             	and    cl,0x88
c001a509:	74 0a                	je     c001a515 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001a50b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a510:	74 0a                	je     c001a51c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001a512:	40                   	inc    eax
c001a513:	eb eb                	jmp    c001a500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001a515:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a51a:	75 0a                	jne    c001a526 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	68 ee e9 01 c0       	push   0xc001e9ee
c001a524:	eb 43                	jmp    c001a569 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a526:	be 01 00 00 00       	mov    esi,0x1
c001a52b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a52f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a533:	d3 e6                	shl    esi,cl
c001a535:	c1 e7 07             	shl    edi,0x7
c001a538:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001a53e:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001a543:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001a547:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001a54d:	85 c6                	test   esi,eax
c001a54f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001a555:	0f 84 96 00 00 00    	je     c001a5f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001a55b:	0f ba e0 1e          	bt     eax,0x1e
c001a55f:	73 1a                	jae    c001a57b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001a561:	83 ec 0c             	sub    esp,0xc
c001a564:	68 03 ea 01 c0       	push   0xc001ea03
c001a569:	e8 b6 f3 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	b8 01 00 00 00       	mov    eax,0x1
c001a576:	e9 a9 00 00 00       	jmp    c001a624 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001a57b:	83 fb 0d             	cmp    ebx,0xd
c001a57e:	77 12                	ja     c001a592 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001a580:	83 ec 0c             	sub    esp,0xc
c001a583:	68 c8 00 00 00       	push   0xc8
c001a588:	e8 5b 86 ff ff       	call   c0012be8 <milliTenthSleep(unsigned int)>
c001a58d:	83 c4 10             	add    esp,0x10
c001a590:	eb 2a                	jmp    c001a5bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a592:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001a598:	83 f8 0d             	cmp    eax,0xd
c001a59b:	77 0a                	ja     c001a5a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001a59d:	83 ec 0c             	sub    esp,0xc
c001a5a0:	68 58 02 00 00       	push   0x258
c001a5a5:	eb 28                	jmp    c001a5cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a5a7:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001a5ad:	83 f8 0d             	cmp    eax,0xd
c001a5b0:	77 0a                	ja     c001a5bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001a5b2:	83 ec 0c             	sub    esp,0xc
c001a5b5:	68 dc 05 00 00       	push   0x5dc
c001a5ba:	eb 13                	jmp    c001a5cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001a5bc:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001a5c2:	83 f8 0d             	cmp    eax,0xd
c001a5c5:	77 10                	ja     c001a5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001a5c7:	83 ec 0c             	sub    esp,0xc
c001a5ca:	68 c4 09 00 00       	push   0x9c4
c001a5cf:	e8 14 86 ff ff       	call   c0012be8 <milliTenthSleep(unsigned int)>
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	43                   	inc    ebx
c001a5d8:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001a5de:	0f 85 63 ff ff ff    	jne    c001a547 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001a5e4:	83 ec 0c             	sub    esp,0xc
c001a5e7:	68 16 ea 01 c0       	push   0xc001ea16
c001a5ec:	e9 78 ff ff ff       	jmp    c001a569 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a5f1:	0f ba e0 1e          	bt     eax,0x1e
c001a5f5:	73 0d                	jae    c001a604 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001a5f7:	83 ec 0c             	sub    esp,0xc
c001a5fa:	68 2a ea 01 c0       	push   0xc001ea2a
c001a5ff:	e9 65 ff ff ff       	jmp    c001a569 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001a604:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001a609:	74 17                	je     c001a622 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a60b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001a610:	74 10                	je     c001a622 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001a612:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001a618:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001a61c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a620:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a622:	31 c0                	xor    eax,eax
c001a624:	83 c4 2c             	add    esp,0x2c
c001a627:	5b                   	pop    ebx
c001a628:	5e                   	pop    esi
c001a629:	5f                   	pop    edi
c001a62a:	5d                   	pop    ebp
c001a62b:	c3                   	ret    

c001a62c <SATAPI::eject()>:
c001a62c:	57                   	push   edi
c001a62d:	b9 03 00 00 00       	mov    ecx,0x3
c001a632:	83 ec 18             	sub    esp,0x18
c001a635:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a639:	fc                   	cld    
c001a63a:	31 c0                	xor    eax,eax
c001a63c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a63e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a643:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a648:	50                   	push   eax
c001a649:	6a 00                	push   0x0
c001a64b:	6a 00                	push   0x0
c001a64d:	6a 00                	push   0x0
c001a64f:	6a 00                	push   0x0
c001a651:	6a 02                	push   0x2
c001a653:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a657:	50                   	push   eax
c001a658:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a65c:	e8 3d fd ff ff       	call   c001a39e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a661:	31 c0                	xor    eax,eax
c001a663:	83 c4 38             	add    esp,0x38
c001a666:	5f                   	pop    edi
c001a667:	c3                   	ret    

c001a668 <SATAPI::detectMedia()>:
c001a668:	56                   	push   esi
c001a669:	53                   	push   ebx
c001a66a:	83 ec 30             	sub    esp,0x30
c001a66d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a671:	68 3f ea 01 c0       	push   0xc001ea3f
c001a676:	e8 a9 f2 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a67b:	83 c4 0c             	add    esp,0xc
c001a67e:	6a 0c                	push   0xc
c001a680:	6a 00                	push   0x0
c001a682:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a686:	56                   	push   esi
c001a687:	e8 64 5e fe ff       	call   c00004f0 <memset>
c001a68c:	83 c4 0c             	add    esp,0xc
c001a68f:	6a 00                	push   0x0
c001a691:	6a 00                	push   0x0
c001a693:	6a 00                	push   0x0
c001a695:	6a 00                	push   0x0
c001a697:	6a 00                	push   0x0
c001a699:	56                   	push   esi
c001a69a:	53                   	push   ebx
c001a69b:	e8 fe fc ff ff       	call   c001a39e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a6a0:	83 c4 20             	add    esp,0x20
c001a6a3:	48                   	dec    eax
c001a6a4:	74 34                	je     c001a6da <SATAPI::detectMedia()+0x72>
c001a6a6:	50                   	push   eax
c001a6a7:	6a 0c                	push   0xc
c001a6a9:	6a 00                	push   0x0
c001a6ab:	56                   	push   esi
c001a6ac:	e8 3f 5e fe ff       	call   c00004f0 <memset>
c001a6b1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a6b6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a6bb:	83 c4 0c             	add    esp,0xc
c001a6be:	6a 01                	push   0x1
c001a6c0:	8d 44 24 16          	lea    eax,[esp+0x16]
c001a6c4:	50                   	push   eax
c001a6c5:	6a 00                	push   0x0
c001a6c7:	6a 00                	push   0x0
c001a6c9:	6a 12                	push   0x12
c001a6cb:	56                   	push   esi
c001a6cc:	53                   	push   ebx
c001a6cd:	e8 cc fc ff ff       	call   c001a39e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a6d2:	83 c4 20             	add    esp,0x20
c001a6d5:	48                   	dec    eax
c001a6d6:	75 39                	jne    c001a711 <SATAPI::detectMedia()+0xa9>
c001a6d8:	eb 1e                	jmp    c001a6f8 <SATAPI::detectMedia()+0x90>
c001a6da:	83 ec 0c             	sub    esp,0xc
c001a6dd:	68 53 ea 01 c0       	push   0xc001ea53
c001a6e2:	e8 3d f2 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a6e7:	83 c4 10             	add    esp,0x10
c001a6ea:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a6f1:	74 b3                	je     c001a6a6 <SATAPI::detectMedia()+0x3e>
c001a6f3:	e9 93 00 00 00       	jmp    c001a78b <SATAPI::detectMedia()+0x123>
c001a6f8:	83 ec 0c             	sub    esp,0xc
c001a6fb:	68 5d ea 01 c0       	push   0xc001ea5d
c001a700:	e8 1f f2 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a70f:	75 7a                	jne    c001a78b <SATAPI::detectMedia()+0x123>
c001a711:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a715:	83 e0 7f             	and    eax,0x7f
c001a718:	3c 70                	cmp    al,0x70
c001a71a:	74 25                	je     c001a741 <SATAPI::detectMedia()+0xd9>
c001a71c:	83 ec 0c             	sub    esp,0xc
c001a71f:	68 67 ea 01 c0       	push   0xc001ea67
c001a724:	e8 fb f1 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a729:	83 c4 10             	add    esp,0x10
c001a72c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a733:	75 0c                	jne    c001a741 <SATAPI::detectMedia()+0xd9>
c001a735:	83 ec 0c             	sub    esp,0xc
c001a738:	53                   	push   ebx
c001a739:	e8 44 fc ff ff       	call   c001a382 <SATAPI::diskInserted()>
c001a73e:	83 c4 10             	add    esp,0x10
c001a741:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a745:	83 e0 0f             	and    eax,0xf
c001a748:	3c 02                	cmp    al,0x2
c001a74a:	75 16                	jne    c001a762 <SATAPI::detectMedia()+0xfa>
c001a74c:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a751:	75 38                	jne    c001a78b <SATAPI::detectMedia()+0x123>
c001a753:	83 ec 0c             	sub    esp,0xc
c001a756:	68 70 ea 01 c0       	push   0xc001ea70
c001a75b:	e8 c4 f1 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a760:	eb 26                	jmp    c001a788 <SATAPI::detectMedia()+0x120>
c001a762:	84 c0                	test   al,al
c001a764:	75 25                	jne    c001a78b <SATAPI::detectMedia()+0x123>
c001a766:	83 ec 0c             	sub    esp,0xc
c001a769:	68 79 ea 01 c0       	push   0xc001ea79
c001a76e:	e8 b1 f1 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001a77d:	75 0c                	jne    c001a78b <SATAPI::detectMedia()+0x123>
c001a77f:	83 ec 0c             	sub    esp,0xc
c001a782:	53                   	push   ebx
c001a783:	e8 fa fb ff ff       	call   c001a382 <SATAPI::diskInserted()>
c001a788:	83 c4 10             	add    esp,0x10
c001a78b:	83 c4 24             	add    esp,0x24
c001a78e:	5b                   	pop    ebx
c001a78f:	5e                   	pop    esi
c001a790:	c3                   	ret    
c001a791:	90                   	nop

c001a792 <SATAPI::open(int, int, void*)>:
c001a792:	56                   	push   esi
c001a793:	53                   	push   ebx
c001a794:	51                   	push   ecx
c001a795:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a799:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a79d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a7a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a7ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a7b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7bb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a7c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a7cb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a7d2:	e8 57 c7 fe ff       	call   c0006f2e <Phys::allocatePage()>
c001a7d7:	89 c6                	mov    esi,eax
c001a7d9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a7df:	81 c6 00 10 00 00    	add    esi,0x1000
c001a7e5:	e8 44 c7 fe ff       	call   c0006f2e <Phys::allocatePage()>
c001a7ea:	39 c6                	cmp    esi,eax
c001a7ec:	74 10                	je     c001a7fe <SATAPI::open(int, int, void*)+0x6c>
c001a7ee:	83 ec 0c             	sub    esp,0xc
c001a7f1:	68 83 ea 01 c0       	push   0xc001ea83
c001a7f6:	e8 78 4c ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001a7fb:	83 c4 10             	add    esp,0x10
c001a7fe:	83 ec 0c             	sub    esp,0xc
c001a801:	6a 02                	push   0x2
c001a803:	e8 95 de fe ff       	call   c000869d <Virt::allocateKernelVirtualPages(int)>
c001a808:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a80e:	6a 03                	push   0x3
c001a810:	50                   	push   eax
c001a811:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a817:	ff 35 14 f5 01 c0    	push   DWORD PTR ds:0xc001f514
c001a81d:	e8 d4 e4 fe ff       	call   c0008cf6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a822:	83 c4 14             	add    esp,0x14
c001a825:	68 74 01 00 00       	push   0x174
c001a82a:	e8 32 c3 fe ff       	call   c0006b61 <malloc>
c001a82f:	83 c4 0c             	add    esp,0xc
c001a832:	89 c6                	mov    esi,eax
c001a834:	6a 00                	push   0x0
c001a836:	68 ff ff ff 7f       	push   0x7fffffff
c001a83b:	6a 00                	push   0x0
c001a83d:	6a 00                	push   0x0
c001a83f:	53                   	push   ebx
c001a840:	68 99 ea 01 c0       	push   0xc001ea99
c001a845:	50                   	push   eax
c001a846:	e8 93 15 ff ff       	call   c000bdde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a84b:	83 c4 14             	add    esp,0x14
c001a84e:	56                   	push   esi
c001a84f:	e8 40 16 ff ff       	call   c000be94 <LogicalDisk::assignDriveLetter()>
c001a854:	5a                   	pop    edx
c001a855:	0f be c0             	movsx  eax,al
c001a858:	59                   	pop    ecx
c001a859:	50                   	push   eax
c001a85a:	68 b4 e8 01 c0       	push   0xc001e8b4
c001a85f:	e8 c0 f0 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a864:	58                   	pop    eax
c001a865:	5a                   	pop    edx
c001a866:	56                   	push   esi
c001a867:	53                   	push   ebx
c001a868:	e8 f7 04 ff ff       	call   c000ad64 <Device::addChild(Device*)>
c001a86d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a876:	e8 1f 09 ff ff       	call   c000b19a <PhysicalDisk::startCache()>
c001a87b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001a882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a885:	e8 de fd ff ff       	call   c001a668 <SATAPI::detectMedia()>
c001a88a:	83 c4 14             	add    esp,0x14
c001a88d:	31 c0                	xor    eax,eax
c001a88f:	5b                   	pop    ebx
c001a890:	5e                   	pop    esi
c001a891:	c3                   	ret    

c001a892 <SATAPI::read(unsigned long long, int, void*)>:
c001a892:	55                   	push   ebp
c001a893:	57                   	push   edi
c001a894:	56                   	push   esi
c001a895:	53                   	push   ebx
c001a896:	83 ec 48             	sub    esp,0x48
c001a899:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a89d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001a8a1:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001a8a5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a8a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a8b1:	68 a7 ea 01 c0       	push   0xc001eaa7
c001a8b6:	e8 69 f0 fe ff       	call   c0009924 <Dbg::kprintf(char const*, ...)>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	83 fb 04             	cmp    ebx,0x4
c001a8c1:	7e 10                	jle    c001a8d3 <SATAPI::read(unsigned long long, int, void*)+0x41>
c001a8c3:	83 ec 0c             	sub    esp,0xc
c001a8c6:	68 b8 ea 01 c0       	push   0xc001eab8
c001a8cb:	e8 a3 4b ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001a8d7:	31 ed                	xor    ebp,ebp
c001a8d9:	b9 03 00 00 00       	mov    ecx,0x3
c001a8de:	fc                   	cld    
c001a8df:	89 e8                	mov    eax,ebp
c001a8e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8e3:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001a8e8:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001a8ed:	50                   	push   eax
c001a8ee:	6a 00                	push   0x0
c001a8f0:	6a 00                	push   0x0
c001a8f2:	6a 00                	push   0x0
c001a8f4:	6a 00                	push   0x0
c001a8f6:	6a 02                	push   0x2
c001a8f8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a8fc:	50                   	push   eax
c001a8fd:	56                   	push   esi
c001a8fe:	e8 9b fa ff ff       	call   c001a39e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a903:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001a907:	89 e8                	mov    eax,ebp
c001a909:	b9 03 00 00 00       	mov    ecx,0x3
c001a90e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a910:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a914:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001a918:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001a91d:	0f c8                	bswap  eax
c001a91f:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001a923:	83 c4 1c             	add    esp,0x1c
c001a926:	53                   	push   ebx
c001a927:	c1 e3 0b             	shl    ebx,0xb
c001a92a:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001a92e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a932:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a936:	53                   	push   ebx
c001a937:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a93b:	50                   	push   eax
c001a93c:	56                   	push   esi
c001a93d:	e8 5c fa ff ff       	call   c001a39e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001a942:	83 c4 20             	add    esp,0x20
c001a945:	85 c0                	test   eax,eax
c001a947:	74 14                	je     c001a95d <SATAPI::read(unsigned long long, int, void*)+0xcb>
c001a949:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a94d:	83 ec 0c             	sub    esp,0xc
c001a950:	56                   	push   esi
c001a951:	e8 12 fd ff ff       	call   c001a668 <SATAPI::detectMedia()>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a95d:	83 c4 3c             	add    esp,0x3c
c001a960:	5b                   	pop    ebx
c001a961:	5e                   	pop    esi
c001a962:	5f                   	pop    edi
c001a963:	5d                   	pop    ebp
c001a964:	c3                   	ret    
c001a965:	90                   	nop

c001a966 <IOAPIC::close(int, int, void*)>:
c001a966:	b8 00 00 00 00       	mov    eax,0x0
c001a96b:	c3                   	ret    

c001a96c <apicGetBase()>:
c001a96c:	55                   	push   ebp
c001a96d:	89 e5                	mov    ebp,esp
c001a96f:	83 ec 18             	sub    esp,0x18
c001a972:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001a977:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001a97d:	83 e0 08             	and    eax,0x8
c001a980:	84 c0                	test   al,al
c001a982:	75 07                	jne    c001a98b <apicGetBase()+0x1f>
c001a984:	b8 00 00 00 00       	mov    eax,0x0
c001a989:	eb 21                	jmp    c001a9ac <apicGetBase()+0x40>
c001a98b:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001a990:	83 ec 08             	sub    esp,0x8
c001a993:	6a 1b                	push   0x1b
c001a995:	50                   	push   eax
c001a996:	e8 bf b7 fe ff       	call   c000615a <Computer::rdmsr(unsigned int)>
c001a99b:	83 c4 10             	add    esp,0x10
c001a99e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001a9a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001a9a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001a9a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a9ac:	c9                   	leave  
c001a9ad:	c3                   	ret    

c001a9ae <IOAPIC::IOAPIC()>:
c001a9ae:	83 ec 0c             	sub    esp,0xc
c001a9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b5:	83 ec 08             	sub    esp,0x8
c001a9b8:	68 1c eb 01 c0       	push   0xc001eb1c
c001a9bd:	50                   	push   eax
c001a9be:	e8 39 05 ff ff       	call   c000aefc <Device::Device(char const*)>
c001a9c3:	83 c4 10             	add    esp,0x10
c001a9c6:	ba 2c eb 01 c0       	mov    edx,0xc001eb2c
c001a9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cf:	89 10                	mov    DWORD PTR [eax],edx
c001a9d1:	90                   	nop
c001a9d2:	83 c4 0c             	add    esp,0xc
c001a9d5:	c3                   	ret    

c001a9d6 <apicOpen()>:
c001a9d6:	55                   	push   ebp
c001a9d7:	89 e5                	mov    ebp,esp
c001a9d9:	53                   	push   ebx
c001a9da:	83 ec 34             	sub    esp,0x34
c001a9dd:	a0 40 33 02 c0       	mov    al,ds:0xc0023340
c001a9e2:	83 f0 01             	xor    eax,0x1
c001a9e5:	84 c0                	test   al,al
c001a9e7:	0f 84 9d 00 00 00    	je     c001aa8a <apicOpen()+0xb4>
c001a9ed:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001a9f1:	a0 00 1d 02 c0       	mov    al,ds:0xc0021d00
c001a9f6:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001a9f9:	0f 83 84 00 00 00    	jae    c001aa83 <apicOpen()+0xad>
c001a9ff:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001aa06:	83 ec 0c             	sub    esp,0xc
c001aa09:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001aa0c:	e8 50 c1 fe ff       	call   c0006b61 <malloc>
c001aa11:	83 c4 10             	add    esp,0x10
c001aa14:	89 c3                	mov    ebx,eax
c001aa16:	83 ec 0c             	sub    esp,0xc
c001aa19:	53                   	push   ebx
c001aa1a:	e8 8f ff ff ff       	call   c001a9ae <IOAPIC::IOAPIC()>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001aa25:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aa28:	25 ff 00 00 00       	and    eax,0xff
c001aa2d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001aa30:	89 14 85 20 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcce0],edx
c001aa37:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c001aa3c:	40                   	inc    eax
c001aa3d:	a3 00 33 02 c0       	mov    ds:0xc0023300,eax
c001aa42:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c001aa47:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001aa4d:	83 ec 08             	sub    esp,0x8
c001aa50:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001aa53:	50                   	push   eax
c001aa54:	e8 0b 03 ff ff       	call   c000ad64 <Device::addChild(Device*)>
c001aa59:	83 c4 10             	add    esp,0x10
c001aa5c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001aa5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa61:	83 c0 08             	add    eax,0x8
c001aa64:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa66:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001aa69:	25 ff 00 00 00       	and    eax,0xff
c001aa6e:	6a 00                	push   0x0
c001aa70:	6a 00                	push   0x0
c001aa72:	50                   	push   eax
c001aa73:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001aa76:	ff d2                	call   edx
c001aa78:	83 c4 10             	add    esp,0x10
c001aa7b:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001aa7e:	e9 6e ff ff ff       	jmp    c001a9f1 <apicOpen()+0x1b>
c001aa83:	c6 05 40 33 02 c0 01 	mov    BYTE PTR ds:0xc0023340,0x1
c001aa8a:	e8 dd fe ff ff       	call   c001a96c <apicGetBase()>
c001aa8f:	05 f0 00 00 00       	add    eax,0xf0
c001aa94:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001aa97:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001aa9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa9c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001aa9f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001aaa6:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001aaad:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001aab0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001aab3:	89 10                	mov    DWORD PTR [eax],edx
c001aab5:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001aabc:	a1 50 1c 02 c0       	mov    eax,ds:0xc0021c50
c001aac1:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001aac4:	7d 70                	jge    c001ab36 <apicOpen()+0x160>
c001aac6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aac9:	8b 04 85 60 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3a0]
c001aad0:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001aad3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aad6:	8b 04 85 60 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3a0]
c001aadd:	c1 e8 08             	shr    eax,0x8
c001aae0:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001aae4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aae7:	8b 04 85 60 1c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde3a0]
c001aaee:	c1 e8 18             	shr    eax,0x18
c001aaf1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001aaf4:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001aaf8:	75 37                	jne    c001ab31 <apicOpen()+0x15b>
c001aafa:	e8 6d fe ff ff       	call   c001a96c <apicGetBase()>
c001aaff:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ab03:	75 07                	jne    c001ab0c <apicOpen()+0x136>
c001ab05:	ba 60 03 00 00       	mov    edx,0x360
c001ab0a:	eb 05                	jmp    c001ab11 <apicOpen()+0x13b>
c001ab0c:	ba 50 03 00 00       	mov    edx,0x350
c001ab11:	01 d0                	add    eax,edx
c001ab13:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ab16:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ab19:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab1b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ab1e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ab25:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ab29:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ab2c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ab2f:	89 10                	mov    DWORD PTR [eax],edx
c001ab31:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ab34:	eb 86                	jmp    c001aabc <apicOpen()+0xe6>
c001ab36:	90                   	nop
c001ab37:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ab3a:	c9                   	leave  
c001ab3b:	c3                   	ret    

c001ab3c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ab3c:	55                   	push   ebp
c001ab3d:	89 e5                	mov    ebp,esp
c001ab3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab48:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ab4b:	72 1d                	jb     c001ab6a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ab4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab50:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ab56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab59:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ab5f:	01 d0                	add    eax,edx
c001ab61:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ab64:	73 04                	jae    c001ab6a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ab66:	b0 01                	mov    al,0x1
c001ab68:	eb 02                	jmp    c001ab6c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ab6a:	b0 00                	mov    al,0x0
c001ab6c:	5d                   	pop    ebp
c001ab6d:	c3                   	ret    

c001ab6e <IOAPIC::read(int)>:
c001ab6e:	55                   	push   ebp
c001ab6f:	89 e5                	mov    ebp,esp
c001ab71:	83 ec 10             	sub    esp,0x10
c001ab74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ab77:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ab7d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ab80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ab83:	31 d2                	xor    edx,edx
c001ab85:	88 c2                	mov    dl,al
c001ab87:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab8a:	89 10                	mov    DWORD PTR [eax],edx
c001ab8c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ab8f:	83 c0 10             	add    eax,0x10
c001ab92:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab94:	c9                   	leave  
c001ab95:	c3                   	ret    

c001ab96 <IOAPIC::open(int, int, void*)>:
c001ab96:	55                   	push   ebp
c001ab97:	89 e5                	mov    ebp,esp
c001ab99:	57                   	push   edi
c001ab9a:	56                   	push   esi
c001ab9b:	53                   	push   ebx
c001ab9c:	83 ec 04             	sub    esp,0x4
c001ab9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001aba2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001aba5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001abab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001abb4:	8b 14 85 40 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde2c0]
c001abbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abbe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001abc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abc7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001abcd:	8b 14 85 c0 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde240]
c001abd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abd7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001abdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abe0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001abe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001abe9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001abef:	89 c6                	mov    esi,eax
c001abf1:	81 e6 ff 00 00 00    	and    esi,0xff
c001abf7:	89 d0                	mov    eax,edx
c001abf9:	ba 00 00 00 00       	mov    edx,0x0
c001abfe:	89 c7                	mov    edi,eax
c001ac00:	83 e7 ff             	and    edi,0xffffffff
c001ac03:	89 f9                	mov    ecx,edi
c001ac05:	89 d0                	mov    eax,edx
c001ac07:	25 ff 00 00 00       	and    eax,0xff
c001ac0c:	89 c3                	mov    ebx,eax
c001ac0e:	89 c8                	mov    eax,ecx
c001ac10:	89 da                	mov    edx,ebx
c001ac12:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ac15:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ac18:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ac1c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ac20:	83 e0 00             	and    eax,0x0
c001ac23:	09 d0                	or     eax,edx
c001ac25:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ac29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac2c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ac32:	8d 50 01             	lea    edx,[eax+0x1]
c001ac35:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ac38:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ac3e:	31 d2                	xor    edx,edx
c001ac40:	88 c2                	mov    dl,al
c001ac42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac45:	83 c2 08             	add    edx,0x8
c001ac48:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ac4c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ac52:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ac58:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ac5c:	6a 01                	push   0x1
c001ac5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ac61:	e8 08 ff ff ff       	call   c001ab6e <IOAPIC::read(int)>
c001ac66:	83 c4 08             	add    esp,0x8
c001ac69:	c1 f8 10             	sar    eax,0x10
c001ac6c:	25 ff 00 00 00       	and    eax,0xff
c001ac71:	8d 50 01             	lea    edx,[eax+0x1]
c001ac74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac77:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ac7d:	b8 00 00 00 00       	mov    eax,0x0
c001ac82:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ac85:	5b                   	pop    ebx
c001ac86:	5e                   	pop    esi
c001ac87:	5f                   	pop    edi
c001ac88:	5d                   	pop    ebp
c001ac89:	c3                   	ret    

c001ac8a <IOAPIC::write(int, int)>:
c001ac8a:	55                   	push   ebp
c001ac8b:	89 e5                	mov    ebp,esp
c001ac8d:	83 ec 10             	sub    esp,0x10
c001ac90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ac93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ac99:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ac9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ac9f:	31 d2                	xor    edx,edx
c001aca1:	88 c2                	mov    dl,al
c001aca3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001aca6:	89 10                	mov    DWORD PTR [eax],edx
c001aca8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001acab:	8d 50 10             	lea    edx,[eax+0x10]
c001acae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001acb1:	89 02                	mov    DWORD PTR [edx],eax
c001acb3:	90                   	nop
c001acb4:	c9                   	leave  
c001acb5:	c3                   	ret    

c001acb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001acb6:	55                   	push   ebp
c001acb7:	89 e5                	mov    ebp,esp
c001acb9:	53                   	push   ebx
c001acba:	83 ec 2c             	sub    esp,0x2c
c001acbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001acc0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001acc3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001acc6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001acc9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001accc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001accf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001acd2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001acd5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001acd8:	88 d8                	mov    al,bl
c001acda:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001acdd:	88 c8                	mov    al,cl
c001acdf:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ace2:	88 d0                	mov    al,dl
c001ace4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ace7:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001acea:	25 ff 00 00 00       	and    eax,0xff
c001acef:	83 c0 08             	add    eax,0x8
c001acf2:	01 c0                	add    eax,eax
c001acf4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001acf7:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001acfa:	25 ff 00 00 00       	and    eax,0xff
c001acff:	83 c0 08             	add    eax,0x8
c001ad02:	01 c0                	add    eax,eax
c001ad04:	40                   	inc    eax
c001ad05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ad08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ad0b:	50                   	push   eax
c001ad0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad0f:	e8 5a fe ff ff       	call   c001ab6e <IOAPIC::read(int)>
c001ad14:	83 c4 08             	add    esp,0x8
c001ad17:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ad1a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ad21:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ad24:	c1 e0 18             	shl    eax,0x18
c001ad27:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ad2a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ad2d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ad30:	52                   	push   edx
c001ad31:	50                   	push   eax
c001ad32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad35:	e8 50 ff ff ff       	call   c001ac8a <IOAPIC::write(int, int)>
c001ad3a:	83 c4 0c             	add    esp,0xc
c001ad3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ad40:	50                   	push   eax
c001ad41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ad44:	e8 25 fe ff ff       	call   c001ab6e <IOAPIC::read(int)>
c001ad49:	83 c4 08             	add    esp,0x8
c001ad4c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ad4f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ad56:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ad5d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ad64:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001ad68:	74 09                	je     c001ad73 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001ad6a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ad71:	eb 07                	jmp    c001ad7a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001ad73:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ad7a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001ad7e:	74 09                	je     c001ad89 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001ad80:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ad87:	eb 07                	jmp    c001ad90 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001ad89:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ad90:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ad97:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001ad9a:	25 ff 00 00 00       	and    eax,0xff
c001ad9f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ada2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ada5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ada8:	52                   	push   edx
c001ada9:	50                   	push   eax
c001adaa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001adad:	e8 d8 fe ff ff       	call   c001ac8a <IOAPIC::write(int, int)>
c001adb2:	83 c4 0c             	add    esp,0xc
c001adb5:	90                   	nop
c001adb6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001adb9:	c9                   	leave  
c001adba:	c3                   	ret    
c001adbb:	90                   	nop

c001adbc <APICTimer::close(int, int, void*)>:
c001adbc:	b8 00 00 00 00       	mov    eax,0x0
c001adc1:	c3                   	ret    
c001adc2:	66 90                	xchg   ax,ax

c001adc4 <apicTimerHandler(regs*, void*)>:
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adcb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001adcd:	b8 10 27 00 00       	mov    eax,0x2710
c001add2:	ba 00 00 00 00       	mov    edx,0x0
c001add7:	f7 f1                	div    ecx
c001add9:	83 ec 0c             	sub    esp,0xc
c001addc:	50                   	push   eax
c001addd:	e8 16 18 ff ff       	call   c000c5f8 <timerHandler(unsigned int)>
c001ade2:	83 c4 10             	add    esp,0x10
c001ade5:	90                   	nop
c001ade6:	83 c4 0c             	add    esp,0xc
c001ade9:	c3                   	ret    
c001adea:	66 90                	xchg   ax,ax

c001adec <APICTimer::open(int, int, void*)>:
c001adec:	83 ec 0c             	sub    esp,0xc
c001adef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf3:	8b 00                	mov    eax,DWORD PTR [eax]
c001adf5:	83 c0 24             	add    eax,0x24
c001adf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001adfa:	83 ec 08             	sub    esp,0x8
c001adfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae05:	ff d0                	call   eax
c001ae07:	83 c4 10             	add    esp,0x10
c001ae0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae12:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ae18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae20:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ae26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae2a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	51                   	push   ecx
c001ae34:	6a 01                	push   0x1
c001ae36:	68 c4 ad 01 c0       	push   0xc001adc4
c001ae3b:	52                   	push   edx
c001ae3c:	50                   	push   eax
c001ae3d:	e8 ce fe fe ff       	call   c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ae42:	83 c4 20             	add    esp,0x20
c001ae45:	89 c2                	mov    edx,eax
c001ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ae51:	b8 00 00 00 00       	mov    eax,0x0
c001ae56:	83 c4 0c             	add    esp,0xc
c001ae59:	c3                   	ret    
c001ae5a:	66 90                	xchg   ax,ax

c001ae5c <APICTimer::write(int)>:
c001ae5c:	83 ec 0c             	sub    esp,0xc
c001ae5f:	83 ec 0c             	sub    esp,0xc
c001ae62:	68 50 eb 01 c0       	push   0xc001eb50
c001ae67:	e8 07 46 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001ae6c:	83 c4 10             	add    esp,0x10
c001ae6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ae7d:	90                   	nop
c001ae7e:	83 c4 0c             	add    esp,0xc
c001ae81:	c3                   	ret    
c001ae82:	66 90                	xchg   ax,ax

c001ae84 <APICTimer::APICTimer()>:
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8b:	83 ec 08             	sub    esp,0x8
c001ae8e:	68 60 eb 01 c0       	push   0xc001eb60
c001ae93:	50                   	push   eax
c001ae94:	e8 93 16 ff ff       	call   c000c52c <Timer::Timer(char const*)>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	ba 74 eb 01 c0       	mov    edx,0xc001eb74
c001aea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea5:	89 10                	mov    DWORD PTR [eax],edx
c001aea7:	90                   	nop
c001aea8:	83 c4 0c             	add    esp,0xc
c001aeab:	c3                   	ret    

c001aeac <PIT::write(int)>:
c001aeac:	83 ec 10             	sub    esp,0x10
c001aeaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aeb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeb7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aebd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aec1:	a3 44 33 02 c0       	mov    ds:0xc0023344,eax
c001aec6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001aecb:	99                   	cdq    
c001aecc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001aed0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aed4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001aedb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001aee0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aee4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001aee9:	ee                   	out    dx,al
c001aeea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeee:	25 ff 00 00 00       	and    eax,0xff
c001aef3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001aefa:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001aefe:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001af02:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001af07:	ee                   	out    dx,al
c001af08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af0c:	c1 f8 08             	sar    eax,0x8
c001af0f:	25 ff 00 00 00       	and    eax,0xff
c001af14:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001af1b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001af1f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af23:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001af28:	ee                   	out    dx,al
c001af29:	90                   	nop
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	c3                   	ret    
c001af2e:	66 90                	xchg   ax,ax

c001af30 <pitHandler(regs*, void*)>:
c001af30:	83 ec 0c             	sub    esp,0xc
c001af33:	8b 0d 44 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023344
c001af39:	b8 10 27 00 00       	mov    eax,0x2710
c001af3e:	99                   	cdq    
c001af3f:	f7 f9                	idiv   ecx
c001af41:	83 ec 0c             	sub    esp,0xc
c001af44:	50                   	push   eax
c001af45:	e8 ae 16 ff ff       	call   c000c5f8 <timerHandler(unsigned int)>
c001af4a:	83 c4 10             	add    esp,0x10
c001af4d:	90                   	nop
c001af4e:	83 c4 0c             	add    esp,0xc
c001af51:	c3                   	ret    
c001af52:	66 90                	xchg   ax,ax

c001af54 <PIT::open(int, int, void*)>:
c001af54:	83 ec 0c             	sub    esp,0xc
c001af57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001af5d:	83 c0 24             	add    eax,0x24
c001af60:	8b 00                	mov    eax,DWORD PTR [eax]
c001af62:	83 ec 08             	sub    esp,0x8
c001af65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af6d:	ff d0                	call   eax
c001af6f:	83 c4 10             	add    esp,0x10
c001af72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af76:	83 ec 0c             	sub    esp,0xc
c001af79:	6a 00                	push   0x0
c001af7b:	6a 01                	push   0x1
c001af7d:	68 30 af 01 c0       	push   0xc001af30
c001af82:	6a 00                	push   0x0
c001af84:	50                   	push   eax
c001af85:	e8 86 fd fe ff       	call   c000ad10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af8a:	83 c4 20             	add    esp,0x20
c001af8d:	89 c2                	mov    edx,eax
c001af8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af93:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001af99:	b8 00 00 00 00       	mov    eax,0x0
c001af9e:	83 c4 0c             	add    esp,0xc
c001afa1:	c3                   	ret    
c001afa2:	66 90                	xchg   ax,ax

c001afa4 <PIT::close(int, int, void*)>:
c001afa4:	83 ec 0c             	sub    esp,0xc
c001afa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afab:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001afb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb9:	6a 01                	push   0x1
c001afbb:	68 30 af 01 c0       	push   0xc001af30
c001afc0:	6a 00                	push   0x0
c001afc2:	50                   	push   eax
c001afc3:	e8 7e fd fe ff       	call   c000ad46 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	b8 00 00 00 00       	mov    eax,0x0
c001afd0:	83 c4 0c             	add    esp,0xc
c001afd3:	c3                   	ret    

c001afd4 <PIT::PIT()>:
c001afd4:	83 ec 0c             	sub    esp,0xc
c001afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afdb:	83 ec 08             	sub    esp,0x8
c001afde:	68 9c eb 01 c0       	push   0xc001eb9c
c001afe3:	50                   	push   eax
c001afe4:	e8 43 15 ff ff       	call   c000c52c <Timer::Timer(char const*)>
c001afe9:	83 c4 10             	add    esp,0x10
c001afec:	ba c4 eb 01 c0       	mov    edx,0xc001ebc4
c001aff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff5:	89 10                	mov    DWORD PTR [eax],edx
c001aff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001affb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b001:	31 d2                	xor    edx,edx
c001b003:	88 c2                	mov    dl,al
c001b005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b009:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b014:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b01a:	31 d2                	xor    edx,edx
c001b01c:	88 c2                	mov    dl,al
c001b01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b022:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b02b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b031:	8d 50 01             	lea    edx,[eax+0x1]
c001b034:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b038:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b03e:	31 d2                	xor    edx,edx
c001b040:	88 c2                	mov    dl,al
c001b042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b046:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b04a:	83 e1 3f             	and    ecx,0x3f
c001b04d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b051:	90                   	nop
c001b052:	83 c4 0c             	add    esp,0xc
c001b055:	c3                   	ret    
c001b056:	66 90                	xchg   ax,ax
c001b058:	66 90                	xchg   ax,ax
c001b05a:	66 90                	xchg   ax,ax
c001b05c:	66 90                	xchg   ax,ax
c001b05e:	66 90                	xchg   ax,ax

c001b060 <avxDetect>:
c001b060:	b8 01 00 00 00       	mov    eax,0x1
c001b065:	0f a2                	cpuid  
c001b067:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b06d:	74 15                	je     c001b084 <avxDetect.noAVX>
c001b06f:	b8 01 00 00 00       	mov    eax,0x1
c001b074:	0f a2                	cpuid  
c001b076:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b07c:	74 06                	je     c001b084 <avxDetect.noAVX>
c001b07e:	b8 01 00 00 00       	mov    eax,0x1
c001b083:	c3                   	ret    

c001b084 <avxDetect.noAVX>:
c001b084:	b8 00 00 00 00       	mov    eax,0x0
c001b089:	c3                   	ret    

c001b08a <avxSave>:
c001b08a:	53                   	push   ebx
c001b08b:	52                   	push   edx
c001b08c:	31 c0                	xor    eax,eax
c001b08e:	48                   	dec    eax
c001b08f:	89 c2                	mov    edx,eax
c001b091:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b095:	0f ae 23             	xsave  [ebx]
c001b098:	5a                   	pop    edx
c001b099:	5b                   	pop    ebx
c001b09a:	c3                   	ret    

c001b09b <avxLoad>:
c001b09b:	53                   	push   ebx
c001b09c:	52                   	push   edx
c001b09d:	31 c0                	xor    eax,eax
c001b09f:	48                   	dec    eax
c001b0a0:	89 c2                	mov    edx,eax
c001b0a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0a6:	0f ae 2b             	xrstor [ebx]
c001b0a9:	5a                   	pop    edx
c001b0aa:	5b                   	pop    ebx
c001b0ab:	c3                   	ret    

c001b0ac <avxInit>:
c001b0ac:	e8 57 02 00 00       	call   c001b308 <sseInit>
c001b0b1:	50                   	push   eax
c001b0b2:	51                   	push   ecx
c001b0b3:	0f 20 e0             	mov    eax,cr4
c001b0b6:	0d 00 00 04 00       	or     eax,0x40000
c001b0bb:	0f 22 e0             	mov    cr4,eax
c001b0be:	31 c9                	xor    ecx,ecx
c001b0c0:	0f 01 d0             	xgetbv 
c001b0c3:	0d 07 00 00 00       	or     eax,0x7
c001b0c8:	0f 01 d1             	xsetbv 
c001b0cb:	59                   	pop    ecx
c001b0cc:	58                   	pop    eax
c001b0cd:	c3                   	ret    

c001b0ce <avxClose>:
c001b0ce:	c3                   	ret    

c001b0cf <wouldSheSayYes>:
c001b0cf:	c3                   	ret    
c001b0d0:	49                   	dec    ecx
c001b0d1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b0d5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b0d9:	75 20                	jne    c001b0fb <isr0+0xb>
c001b0db:	4e                   	dec    esi
c001b0dc:	79 61                	jns    c001b13f <isr7+0x3>
c001b0de:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b0e3:	66 90                	xchg   ax,ax
c001b0e5:	66 90                	xchg   ax,ax
c001b0e7:	66 90                	xchg   ax,ax
c001b0e9:	66 90                	xchg   ax,ax
c001b0eb:	66 90                	xchg   ax,ax
c001b0ed:	66 90                	xchg   ax,ax
c001b0ef:	90                   	nop

c001b0f0 <isr0>:
c001b0f0:	fa                   	cli    
c001b0f1:	68 00 00 00 00       	push   0x0
c001b0f6:	68 00 00 00 00       	push   0x0
c001b0fb:	e9 44 01 00 00       	jmp    c001b244 <int_common_stub>

c001b100 <isr1>:
c001b100:	fa                   	cli    
c001b101:	6a 00                	push   0x0
c001b103:	6a 01                	push   0x1
c001b105:	e9 3a 01 00 00       	jmp    c001b244 <int_common_stub>

c001b10a <isr2>:
c001b10a:	fa                   	cli    
c001b10b:	6a 00                	push   0x0
c001b10d:	6a 02                	push   0x2
c001b10f:	e9 30 01 00 00       	jmp    c001b244 <int_common_stub>

c001b114 <isr3>:
c001b114:	fa                   	cli    
c001b115:	6a 00                	push   0x0
c001b117:	6a 03                	push   0x3
c001b119:	e9 26 01 00 00       	jmp    c001b244 <int_common_stub>

c001b11e <isr4>:
c001b11e:	fa                   	cli    
c001b11f:	6a 00                	push   0x0
c001b121:	6a 04                	push   0x4
c001b123:	e9 1c 01 00 00       	jmp    c001b244 <int_common_stub>

c001b128 <isr5>:
c001b128:	fa                   	cli    
c001b129:	6a 00                	push   0x0
c001b12b:	6a 05                	push   0x5
c001b12d:	e9 12 01 00 00       	jmp    c001b244 <int_common_stub>

c001b132 <isr6>:
c001b132:	fa                   	cli    
c001b133:	6a 00                	push   0x0
c001b135:	6a 06                	push   0x6
c001b137:	e9 08 01 00 00       	jmp    c001b244 <int_common_stub>

c001b13c <isr7>:
c001b13c:	fa                   	cli    
c001b13d:	6a 00                	push   0x0
c001b13f:	6a 07                	push   0x7
c001b141:	e9 fe 00 00 00       	jmp    c001b244 <int_common_stub>

c001b146 <isr8>:
c001b146:	fa                   	cli    
c001b147:	6a 08                	push   0x8
c001b149:	e9 f6 00 00 00       	jmp    c001b244 <int_common_stub>

c001b14e <isr9>:
c001b14e:	fa                   	cli    
c001b14f:	6a 00                	push   0x0
c001b151:	6a 09                	push   0x9
c001b153:	e9 ec 00 00 00       	jmp    c001b244 <int_common_stub>

c001b158 <isr10>:
c001b158:	fa                   	cli    
c001b159:	6a 0a                	push   0xa
c001b15b:	e9 e4 00 00 00       	jmp    c001b244 <int_common_stub>

c001b160 <isr11>:
c001b160:	fa                   	cli    
c001b161:	6a 0b                	push   0xb
c001b163:	e9 dc 00 00 00       	jmp    c001b244 <int_common_stub>

c001b168 <isr12>:
c001b168:	fa                   	cli    
c001b169:	6a 0c                	push   0xc
c001b16b:	e9 d4 00 00 00       	jmp    c001b244 <int_common_stub>

c001b170 <isr13>:
c001b170:	fa                   	cli    
c001b171:	6a 0d                	push   0xd
c001b173:	e9 cc 00 00 00       	jmp    c001b244 <int_common_stub>

c001b178 <isr14>:
c001b178:	fa                   	cli    
c001b179:	6a 0e                	push   0xe
c001b17b:	e9 c4 00 00 00       	jmp    c001b244 <int_common_stub>

c001b180 <isr15>:
c001b180:	fa                   	cli    
c001b181:	6a 00                	push   0x0
c001b183:	6a 0f                	push   0xf
c001b185:	e9 ba 00 00 00       	jmp    c001b244 <int_common_stub>

c001b18a <isr16>:
c001b18a:	fa                   	cli    
c001b18b:	6a 00                	push   0x0
c001b18d:	6a 10                	push   0x10
c001b18f:	e9 b0 00 00 00       	jmp    c001b244 <int_common_stub>

c001b194 <isr17>:
c001b194:	fa                   	cli    
c001b195:	6a 00                	push   0x0
c001b197:	6a 11                	push   0x11
c001b199:	e9 a6 00 00 00       	jmp    c001b244 <int_common_stub>

c001b19e <isr18>:
c001b19e:	fa                   	cli    
c001b19f:	6a 00                	push   0x0
c001b1a1:	6a 12                	push   0x12
c001b1a3:	e9 9c 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1a8 <irq3>:
c001b1a8:	fa                   	cli    
c001b1a9:	6a 00                	push   0x0
c001b1ab:	6a 23                	push   0x23
c001b1ad:	e9 92 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1b2 <irq4>:
c001b1b2:	fa                   	cli    
c001b1b3:	6a 00                	push   0x0
c001b1b5:	6a 24                	push   0x24
c001b1b7:	e9 88 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1bc <irq5>:
c001b1bc:	fa                   	cli    
c001b1bd:	6a 00                	push   0x0
c001b1bf:	6a 25                	push   0x25
c001b1c1:	e9 7e 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1c6 <irq6>:
c001b1c6:	fa                   	cli    
c001b1c7:	6a 00                	push   0x0
c001b1c9:	6a 26                	push   0x26
c001b1cb:	e9 74 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1d0 <irq7>:
c001b1d0:	fa                   	cli    
c001b1d1:	6a 00                	push   0x0
c001b1d3:	6a 27                	push   0x27
c001b1d5:	e9 6a 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1da <irq8>:
c001b1da:	fa                   	cli    
c001b1db:	6a 00                	push   0x0
c001b1dd:	6a 28                	push   0x28
c001b1df:	e9 60 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1e4 <irq9>:
c001b1e4:	fa                   	cli    
c001b1e5:	6a 00                	push   0x0
c001b1e7:	6a 29                	push   0x29
c001b1e9:	e9 56 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1ee <irq10>:
c001b1ee:	fa                   	cli    
c001b1ef:	6a 00                	push   0x0
c001b1f1:	6a 2a                	push   0x2a
c001b1f3:	e9 4c 00 00 00       	jmp    c001b244 <int_common_stub>

c001b1f8 <irq11>:
c001b1f8:	fa                   	cli    
c001b1f9:	6a 00                	push   0x0
c001b1fb:	6a 2b                	push   0x2b
c001b1fd:	e9 42 00 00 00       	jmp    c001b244 <int_common_stub>

c001b202 <irq12>:
c001b202:	fa                   	cli    
c001b203:	6a 00                	push   0x0
c001b205:	6a 2c                	push   0x2c
c001b207:	e9 38 00 00 00       	jmp    c001b244 <int_common_stub>

c001b20c <irq13>:
c001b20c:	fa                   	cli    
c001b20d:	6a 00                	push   0x0
c001b20f:	6a 2d                	push   0x2d
c001b211:	e9 2e 00 00 00       	jmp    c001b244 <int_common_stub>

c001b216 <irq14>:
c001b216:	fa                   	cli    
c001b217:	6a 00                	push   0x0
c001b219:	6a 2e                	push   0x2e
c001b21b:	e9 24 00 00 00       	jmp    c001b244 <int_common_stub>

c001b220 <irq15>:
c001b220:	fa                   	cli    
c001b221:	6a 00                	push   0x0
c001b223:	6a 2f                	push   0x2f
c001b225:	e9 1a 00 00 00       	jmp    c001b244 <int_common_stub>

c001b22a <irq1>:
c001b22a:	fa                   	cli    
c001b22b:	6a 00                	push   0x0
c001b22d:	6a 21                	push   0x21
c001b22f:	eb 13                	jmp    c001b244 <int_common_stub>

c001b231 <irq2>:
c001b231:	fa                   	cli    
c001b232:	6a 00                	push   0x0
c001b234:	6a 22                	push   0x22
c001b236:	eb 0c                	jmp    c001b244 <int_common_stub>

c001b238 <isr96>:
c001b238:	6a 00                	push   0x0
c001b23a:	6a 60                	push   0x60
c001b23c:	fb                   	sti    
c001b23d:	eb 05                	jmp    c001b244 <int_common_stub>

c001b23f <irq0>:
c001b23f:	fa                   	cli    
c001b240:	6a 00                	push   0x0
c001b242:	6a 20                	push   0x20

c001b244 <int_common_stub>:
c001b244:	60                   	pusha  
c001b245:	1e                   	push   ds
c001b246:	06                   	push   es
c001b247:	0f a0                	push   fs
c001b249:	0f a8                	push   gs
c001b24b:	66 b8 10 00          	mov    ax,0x10
c001b24f:	66 8e d8             	mov    ds,ax
c001b252:	66 8e c0             	mov    es,ax
c001b255:	66 8e e0             	mov    fs,ax
c001b258:	66 8e e8             	mov    gs,ax
c001b25b:	54                   	push   esp
c001b25c:	fc                   	cld    
c001b25d:	e8 ae ff fe ff       	call   c000b210 <int_handler>
c001b262:	81 c4 04 00 00 00    	add    esp,0x4
c001b268:	0f a9                	pop    gs
c001b26a:	0f a1                	pop    fs
c001b26c:	07                   	pop    es
c001b26d:	1f                   	pop    ds
c001b26e:	61                   	popa   
c001b26f:	81 c4 08 00 00 00    	add    esp,0x8
c001b275:	cf                   	iret   

c001b276 <irq16>:
c001b276:	fa                   	cli    
c001b277:	6a 00                	push   0x0
c001b279:	6a 30                	push   0x30
c001b27b:	e9 c4 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b280 <irq17>:
c001b280:	fa                   	cli    
c001b281:	6a 00                	push   0x0
c001b283:	6a 31                	push   0x31
c001b285:	e9 ba ff ff ff       	jmp    c001b244 <int_common_stub>

c001b28a <irq18>:
c001b28a:	fa                   	cli    
c001b28b:	6a 00                	push   0x0
c001b28d:	6a 32                	push   0x32
c001b28f:	e9 b0 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b294 <irq19>:
c001b294:	fa                   	cli    
c001b295:	6a 00                	push   0x0
c001b297:	6a 33                	push   0x33
c001b299:	e9 a6 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b29e <irq20>:
c001b29e:	fa                   	cli    
c001b29f:	6a 00                	push   0x0
c001b2a1:	6a 34                	push   0x34
c001b2a3:	e9 9c ff ff ff       	jmp    c001b244 <int_common_stub>

c001b2a8 <irq21>:
c001b2a8:	fa                   	cli    
c001b2a9:	6a 00                	push   0x0
c001b2ab:	6a 35                	push   0x35
c001b2ad:	e9 92 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b2b2 <irq22>:
c001b2b2:	fa                   	cli    
c001b2b3:	6a 00                	push   0x0
c001b2b5:	6a 36                	push   0x36
c001b2b7:	e9 88 ff ff ff       	jmp    c001b244 <int_common_stub>

c001b2bc <irq23>:
c001b2bc:	fa                   	cli    
c001b2bd:	6a 00                	push   0x0
c001b2bf:	6a 37                	push   0x37
c001b2c1:	e9 7e ff ff ff       	jmp    c001b244 <int_common_stub>
c001b2c6:	66 90                	xchg   ax,ax
c001b2c8:	66 90                	xchg   ax,ax
c001b2ca:	66 90                	xchg   ax,ax
c001b2cc:	66 90                	xchg   ax,ax
c001b2ce:	66 90                	xchg   ax,ax

c001b2d0 <i386GetRDRAND>:
c001b2d0:	b9 64 00 00 00       	mov    ecx,0x64

c001b2d5 <retry>:
c001b2d5:	0f c7 f0             	rdrand eax
c001b2d8:	72 05                	jb     c001b2df <retry.done>
c001b2da:	e2 f9                	loop   c001b2d5 <retry>

c001b2dc <retry.fail>:
c001b2dc:	31 c0                	xor    eax,eax
c001b2de:	c3                   	ret    

c001b2df <retry.done>:
c001b2df:	c3                   	ret    

c001b2e0 <absolutelyNoChanceInHell>:
c001b2e0:	b8 01 00 00 00       	mov    eax,0x1
c001b2e5:	0f a2                	cpuid  
c001b2e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b2ed:	74 06                	je     c001b2f5 <sseDetect.noSSE>
c001b2ef:	b8 01 00 00 00       	mov    eax,0x1
c001b2f4:	c3                   	ret    

c001b2f5 <sseDetect.noSSE>:
c001b2f5:	31 c0                	xor    eax,eax
c001b2f7:	c3                   	ret    

c001b2f8 <sseSave>:
c001b2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2fc:	0f ae 00             	fxsave [eax]
c001b2ff:	c3                   	ret    

c001b300 <sseLoad>:
c001b300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b304:	0f ae 08             	fxrstor [eax]
c001b307:	c3                   	ret    

c001b308 <sseInit>:
c001b308:	e8 42 00 00 00       	call   c001b34f <x87Init>
c001b30d:	0f 20 e0             	mov    eax,cr4
c001b310:	66 0d 00 06          	or     ax,0x600
c001b314:	0f 22 e0             	mov    cr4,eax
c001b317:	c3                   	ret    

c001b318 <sseClose>:
c001b318:	c3                   	ret    
c001b319:	66 90                	xchg   ax,ax
c001b31b:	66 90                	xchg   ax,ax
c001b31d:	66 90                	xchg   ax,ax
c001b31f:	90                   	nop

c001b320 <value_37F>:
c001b320:	7f 03                	jg     c001b325 <value_37A+0x1>

c001b322 <value_37E>:
c001b322:	7e 03                	jle    c001b327 <x87Detect+0x1>

c001b324 <value_37A>:
c001b324:	7a 03                	jp     c001b329 <x87Detect+0x3>

c001b326 <x87Detect>:
c001b326:	b8 01 00 00 00       	mov    eax,0x1
c001b32b:	0f a2                	cpuid  
c001b32d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b333:	74 06                	je     c001b33b <x87Detect.nox87>
c001b335:	b8 01 00 00 00       	mov    eax,0x1
c001b33a:	c3                   	ret    

c001b33b <x87Detect.nox87>:
c001b33b:	b8 00 00 00 00       	mov    eax,0x0
c001b340:	c3                   	ret    

c001b341 <x87Save>:
c001b341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b345:	dd 30                	fnsave [eax]
c001b347:	c3                   	ret    

c001b348 <x87Load>:
c001b348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b34c:	dd 20                	frstor [eax]
c001b34e:	c3                   	ret    

c001b34f <x87Init>:
c001b34f:	0f 20 c0             	mov    eax,cr0
c001b352:	66 25 fb ff          	and    ax,0xfffb
c001b356:	66 0d 22 00          	or     ax,0x22
c001b35a:	0f 22 c0             	mov    cr0,eax
c001b35d:	db e3                	fninit 
c001b35f:	0f 06                	clts   
c001b361:	d9 2d 24 b3 01 c0    	fldcw  WORD PTR ds:0xc001b324
c001b367:	c3                   	ret    

c001b368 <x87Close>:
c001b368:	c3                   	ret    
c001b369:	66 90                	xchg   ax,ax
c001b36b:	90                   	nop

c001b36c <__do_global_ctors_aux>:
c001b36c:	a1 1c c3 01 c0       	mov    eax,ds:0xc001c31c
c001b371:	83 f8 ff             	cmp    eax,0xffffffff
c001b374:	74 1a                	je     c001b390 <__do_global_ctors_aux+0x24>
c001b376:	55                   	push   ebp
c001b377:	89 e5                	mov    ebp,esp
c001b379:	53                   	push   ebx
c001b37a:	52                   	push   edx
c001b37b:	bb 1c c3 01 c0       	mov    ebx,0xc001c31c
c001b380:	ff d0                	call   eax
c001b382:	83 eb 04             	sub    ebx,0x4
c001b385:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b387:	83 f8 ff             	cmp    eax,0xffffffff
c001b38a:	75 f4                	jne    c001b380 <__do_global_ctors_aux+0x14>
c001b38c:	58                   	pop    eax
c001b38d:	5b                   	pop    ebx
c001b38e:	5d                   	pop    ebp
c001b38f:	c3                   	ret    
c001b390:	c3                   	ret    
c001b391:	66 90                	xchg   ax,ax
c001b393:	90                   	nop

c001b394 <__divdi3>:
c001b394:	55                   	push   ebp
c001b395:	57                   	push   edi
c001b396:	56                   	push   esi
c001b397:	53                   	push   ebx
c001b398:	83 ec 1c             	sub    esp,0x1c
c001b39b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b39f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b3a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b3a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b3aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b3b2:	85 db                	test   ebx,ebx
c001b3b4:	0f 88 8e 00 00 00    	js     c001b448 <__divdi3+0xb4>
c001b3ba:	89 dd                	mov    ebp,ebx
c001b3bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b3c4:	89 d3                	mov    ebx,edx
c001b3c6:	85 d2                	test   edx,edx
c001b3c8:	79 0d                	jns    c001b3d7 <__divdi3+0x43>
c001b3ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b3ce:	f7 d8                	neg    eax
c001b3d0:	83 d2 00             	adc    edx,0x0
c001b3d3:	f7 da                	neg    edx
c001b3d5:	89 d3                	mov    ebx,edx
c001b3d7:	89 c7                	mov    edi,eax
c001b3d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b3dc:	85 db                	test   ebx,ebx
c001b3de:	75 48                	jne    c001b428 <__divdi3+0x94>
c001b3e0:	39 ef                	cmp    edi,ebp
c001b3e2:	76 24                	jbe    c001b408 <__divdi3+0x74>
c001b3e4:	89 ea                	mov    edx,ebp
c001b3e6:	f7 f7                	div    edi
c001b3e8:	89 c1                	mov    ecx,eax
c001b3ea:	31 f6                	xor    esi,esi
c001b3ec:	89 c8                	mov    eax,ecx
c001b3ee:	89 f2                	mov    edx,esi
c001b3f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3f4:	85 c9                	test   ecx,ecx
c001b3f6:	74 07                	je     c001b3ff <__divdi3+0x6b>
c001b3f8:	f7 d8                	neg    eax
c001b3fa:	83 d2 00             	adc    edx,0x0
c001b3fd:	f7 da                	neg    edx
c001b3ff:	83 c4 1c             	add    esp,0x1c
c001b402:	5b                   	pop    ebx
c001b403:	5e                   	pop    esi
c001b404:	5f                   	pop    edi
c001b405:	5d                   	pop    ebp
c001b406:	c3                   	ret    
c001b407:	90                   	nop
c001b408:	85 ff                	test   edi,edi
c001b40a:	75 0b                	jne    c001b417 <__divdi3+0x83>
c001b40c:	b8 01 00 00 00       	mov    eax,0x1
c001b411:	31 d2                	xor    edx,edx
c001b413:	f7 f3                	div    ebx
c001b415:	89 c7                	mov    edi,eax
c001b417:	31 d2                	xor    edx,edx
c001b419:	89 e8                	mov    eax,ebp
c001b41b:	f7 f7                	div    edi
c001b41d:	89 c6                	mov    esi,eax
c001b41f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b422:	f7 f7                	div    edi
c001b424:	89 c1                	mov    ecx,eax
c001b426:	eb c4                	jmp    c001b3ec <__divdi3+0x58>
c001b428:	39 eb                	cmp    ebx,ebp
c001b42a:	77 3c                	ja     c001b468 <__divdi3+0xd4>
c001b42c:	0f bd f3             	bsr    esi,ebx
c001b42f:	83 f6 1f             	xor    esi,0x1f
c001b432:	75 40                	jne    c001b474 <__divdi3+0xe0>
c001b434:	39 eb                	cmp    ebx,ebp
c001b436:	72 09                	jb     c001b441 <__divdi3+0xad>
c001b438:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b43b:	0f 87 97 00 00 00    	ja     c001b4d8 <__divdi3+0x144>
c001b441:	b9 01 00 00 00       	mov    ecx,0x1
c001b446:	eb a4                	jmp    c001b3ec <__divdi3+0x58>
c001b448:	f7 d9                	neg    ecx
c001b44a:	83 d3 00             	adc    ebx,0x0
c001b44d:	f7 db                	neg    ebx
c001b44f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b452:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b456:	89 dd                	mov    ebp,ebx
c001b458:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b460:	e9 5f ff ff ff       	jmp    c001b3c4 <__divdi3+0x30>
c001b465:	8d 76 00             	lea    esi,[esi+0x0]
c001b468:	31 f6                	xor    esi,esi
c001b46a:	31 c9                	xor    ecx,ecx
c001b46c:	e9 7b ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b471:	8d 76 00             	lea    esi,[esi+0x0]
c001b474:	b8 20 00 00 00       	mov    eax,0x20
c001b479:	29 f0                	sub    eax,esi
c001b47b:	89 f1                	mov    ecx,esi
c001b47d:	d3 e3                	shl    ebx,cl
c001b47f:	89 fa                	mov    edx,edi
c001b481:	88 c1                	mov    cl,al
c001b483:	d3 ea                	shr    edx,cl
c001b485:	09 da                	or     edx,ebx
c001b487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b48b:	89 f1                	mov    ecx,esi
c001b48d:	d3 e7                	shl    edi,cl
c001b48f:	89 eb                	mov    ebx,ebp
c001b491:	88 c1                	mov    cl,al
c001b493:	d3 eb                	shr    ebx,cl
c001b495:	89 f1                	mov    ecx,esi
c001b497:	d3 e5                	shl    ebp,cl
c001b499:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b49c:	88 c1                	mov    cl,al
c001b49e:	d3 ea                	shr    edx,cl
c001b4a0:	09 d5                	or     ebp,edx
c001b4a2:	89 e8                	mov    eax,ebp
c001b4a4:	89 da                	mov    edx,ebx
c001b4a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b4aa:	89 d3                	mov    ebx,edx
c001b4ac:	89 c5                	mov    ebp,eax
c001b4ae:	f7 e7                	mul    edi
c001b4b0:	39 d3                	cmp    ebx,edx
c001b4b2:	72 18                	jb     c001b4cc <__divdi3+0x138>
c001b4b4:	74 0a                	je     c001b4c0 <__divdi3+0x12c>
c001b4b6:	89 e9                	mov    ecx,ebp
c001b4b8:	31 f6                	xor    esi,esi
c001b4ba:	e9 2d ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b4bf:	90                   	nop
c001b4c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001b4c3:	89 f1                	mov    ecx,esi
c001b4c5:	d3 e7                	shl    edi,cl
c001b4c7:	39 c7                	cmp    edi,eax
c001b4c9:	73 eb                	jae    c001b4b6 <__divdi3+0x122>
c001b4cb:	90                   	nop
c001b4cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001b4cf:	31 f6                	xor    esi,esi
c001b4d1:	e9 16 ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b4d6:	66 90                	xchg   ax,ax
c001b4d8:	31 c9                	xor    ecx,ecx
c001b4da:	e9 0d ff ff ff       	jmp    c001b3ec <__divdi3+0x58>
c001b4df:	90                   	nop

c001b4e0 <__moddi3>:
c001b4e0:	55                   	push   ebp
c001b4e1:	57                   	push   edi
c001b4e2:	56                   	push   esi
c001b4e3:	53                   	push   ebx
c001b4e4:	83 ec 2c             	sub    esp,0x2c
c001b4e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b4eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001b4ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b4f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001b4f7:	85 db                	test   ebx,ebx
c001b4f9:	0f 88 85 00 00 00    	js     c001b584 <__moddi3+0xa4>
c001b4ff:	89 de                	mov    esi,ebx
c001b501:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b509:	89 d7                	mov    edi,edx
c001b50b:	85 d2                	test   edx,edx
c001b50d:	79 09                	jns    c001b518 <__moddi3+0x38>
c001b50f:	f7 d8                	neg    eax
c001b511:	83 d2 00             	adc    edx,0x0
c001b514:	f7 da                	neg    edx
c001b516:	89 d7                	mov    edi,edx
c001b518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b51c:	89 cd                	mov    ebp,ecx
c001b51e:	85 ff                	test   edi,edi
c001b520:	75 52                	jne    c001b574 <__moddi3+0x94>
c001b522:	89 c3                	mov    ebx,eax
c001b524:	39 f0                	cmp    eax,esi
c001b526:	76 24                	jbe    c001b54c <__moddi3+0x6c>
c001b528:	89 c8                	mov    eax,ecx
c001b52a:	89 f2                	mov    edx,esi
c001b52c:	f7 f3                	div    ebx
c001b52e:	89 d6                	mov    esi,edx
c001b530:	89 f0                	mov    eax,esi
c001b532:	31 d2                	xor    edx,edx
c001b534:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b538:	85 c9                	test   ecx,ecx
c001b53a:	74 07                	je     c001b543 <__moddi3+0x63>
c001b53c:	f7 d8                	neg    eax
c001b53e:	83 d2 00             	adc    edx,0x0
c001b541:	f7 da                	neg    edx
c001b543:	83 c4 2c             	add    esp,0x2c
c001b546:	5b                   	pop    ebx
c001b547:	5e                   	pop    esi
c001b548:	5f                   	pop    edi
c001b549:	5d                   	pop    ebp
c001b54a:	c3                   	ret    
c001b54b:	90                   	nop
c001b54c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b550:	85 db                	test   ebx,ebx
c001b552:	75 0d                	jne    c001b561 <__moddi3+0x81>
c001b554:	b8 01 00 00 00       	mov    eax,0x1
c001b559:	31 d2                	xor    edx,edx
c001b55b:	f7 f7                	div    edi
c001b55d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b561:	89 f0                	mov    eax,esi
c001b563:	31 d2                	xor    edx,edx
c001b565:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b569:	f7 f7                	div    edi
c001b56b:	89 e8                	mov    eax,ebp
c001b56d:	f7 f7                	div    edi
c001b56f:	89 d6                	mov    esi,edx
c001b571:	eb bd                	jmp    c001b530 <__moddi3+0x50>
c001b573:	90                   	nop
c001b574:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b578:	39 f7                	cmp    edi,esi
c001b57a:	76 20                	jbe    c001b59c <__moddi3+0xbc>
c001b57c:	89 c8                	mov    eax,ecx
c001b57e:	89 f2                	mov    edx,esi
c001b580:	eb b2                	jmp    c001b534 <__moddi3+0x54>
c001b582:	66 90                	xchg   ax,ax
c001b584:	f7 d9                	neg    ecx
c001b586:	83 d3 00             	adc    ebx,0x0
c001b589:	f7 db                	neg    ebx
c001b58b:	89 de                	mov    esi,ebx
c001b58d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001b595:	e9 6f ff ff ff       	jmp    c001b509 <__moddi3+0x29>
c001b59a:	66 90                	xchg   ax,ax
c001b59c:	0f bd c7             	bsr    eax,edi
c001b59f:	83 f0 1f             	xor    eax,0x1f
c001b5a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5a6:	75 24                	jne    c001b5cc <__moddi3+0xec>
c001b5a8:	39 f7                	cmp    edi,esi
c001b5aa:	72 06                	jb     c001b5b2 <__moddi3+0xd2>
c001b5ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001b5b0:	77 0c                	ja     c001b5be <__moddi3+0xde>
c001b5b2:	89 e9                	mov    ecx,ebp
c001b5b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001b5b8:	19 fe                	sbb    esi,edi
c001b5ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001b5be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5c2:	89 f2                	mov    edx,esi
c001b5c4:	e9 6b ff ff ff       	jmp    c001b534 <__moddi3+0x54>
c001b5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5cc:	b8 20 00 00 00       	mov    eax,0x20
c001b5d1:	89 c2                	mov    edx,eax
c001b5d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b5d7:	29 da                	sub    edx,ebx
c001b5d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001b5dd:	88 d9                	mov    cl,bl
c001b5df:	d3 e7                	shl    edi,cl
c001b5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5e5:	88 d1                	mov    cl,dl
c001b5e7:	d3 e8                	shr    eax,cl
c001b5e9:	09 c7                	or     edi,eax
c001b5eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001b5ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b5f3:	89 d8                	mov    eax,ebx
c001b5f5:	88 d9                	mov    cl,bl
c001b5f7:	d3 e7                	shl    edi,cl
c001b5f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b5fd:	89 f3                	mov    ebx,esi
c001b5ff:	88 d1                	mov    cl,dl
c001b601:	d3 eb                	shr    ebx,cl
c001b603:	89 c7                	mov    edi,eax
c001b605:	88 c1                	mov    cl,al
c001b607:	d3 e6                	shl    esi,cl
c001b609:	89 e8                	mov    eax,ebp
c001b60b:	88 d1                	mov    cl,dl
c001b60d:	d3 e8                	shr    eax,cl
c001b60f:	09 f0                	or     eax,esi
c001b611:	89 f9                	mov    ecx,edi
c001b613:	d3 e5                	shl    ebp,cl
c001b615:	89 da                	mov    edx,ebx
c001b617:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001b61b:	89 d3                	mov    ebx,edx
c001b61d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b621:	89 c6                	mov    esi,eax
c001b623:	89 d1                	mov    ecx,edx
c001b625:	39 d3                	cmp    ebx,edx
c001b627:	72 27                	jb     c001b650 <__moddi3+0x170>
c001b629:	74 21                	je     c001b64c <__moddi3+0x16c>
c001b62b:	29 f5                	sub    ebp,esi
c001b62d:	19 cb                	sbb    ebx,ecx
c001b62f:	89 de                	mov    esi,ebx
c001b631:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001b635:	d3 e6                	shl    esi,cl
c001b637:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b63b:	89 f9                	mov    ecx,edi
c001b63d:	d3 ed                	shr    ebp,cl
c001b63f:	09 ee                	or     esi,ebp
c001b641:	89 f0                	mov    eax,esi
c001b643:	d3 eb                	shr    ebx,cl
c001b645:	89 da                	mov    edx,ebx
c001b647:	e9 e8 fe ff ff       	jmp    c001b534 <__moddi3+0x54>
c001b64c:	39 c5                	cmp    ebp,eax
c001b64e:	73 db                	jae    c001b62b <__moddi3+0x14b>
c001b650:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b654:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001b658:	89 d1                	mov    ecx,edx
c001b65a:	89 c6                	mov    esi,eax
c001b65c:	eb cd                	jmp    c001b62b <__moddi3+0x14b>
c001b65e:	66 90                	xchg   ax,ax

c001b660 <__udivdi3>:
c001b660:	55                   	push   ebp
c001b661:	57                   	push   edi
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 1c             	sub    esp,0x1c
c001b667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b66b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b66f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b677:	85 d2                	test   edx,edx
c001b679:	75 41                	jne    c001b6bc <__udivdi3+0x5c>
c001b67b:	39 f7                	cmp    edi,esi
c001b67d:	76 15                	jbe    c001b694 <__udivdi3+0x34>
c001b67f:	89 e8                	mov    eax,ebp
c001b681:	89 f2                	mov    edx,esi
c001b683:	f7 f7                	div    edi
c001b685:	31 db                	xor    ebx,ebx
c001b687:	89 da                	mov    edx,ebx
c001b689:	83 c4 1c             	add    esp,0x1c
c001b68c:	5b                   	pop    ebx
c001b68d:	5e                   	pop    esi
c001b68e:	5f                   	pop    edi
c001b68f:	5d                   	pop    ebp
c001b690:	c3                   	ret    
c001b691:	8d 76 00             	lea    esi,[esi+0x0]
c001b694:	89 f9                	mov    ecx,edi
c001b696:	85 ff                	test   edi,edi
c001b698:	75 0b                	jne    c001b6a5 <__udivdi3+0x45>
c001b69a:	b8 01 00 00 00       	mov    eax,0x1
c001b69f:	31 d2                	xor    edx,edx
c001b6a1:	f7 f7                	div    edi
c001b6a3:	89 c1                	mov    ecx,eax
c001b6a5:	31 d2                	xor    edx,edx
c001b6a7:	89 f0                	mov    eax,esi
c001b6a9:	f7 f1                	div    ecx
c001b6ab:	89 c3                	mov    ebx,eax
c001b6ad:	89 e8                	mov    eax,ebp
c001b6af:	f7 f1                	div    ecx
c001b6b1:	89 da                	mov    edx,ebx
c001b6b3:	83 c4 1c             	add    esp,0x1c
c001b6b6:	5b                   	pop    ebx
c001b6b7:	5e                   	pop    esi
c001b6b8:	5f                   	pop    edi
c001b6b9:	5d                   	pop    ebp
c001b6ba:	c3                   	ret    
c001b6bb:	90                   	nop
c001b6bc:	39 f2                	cmp    edx,esi
c001b6be:	77 1c                	ja     c001b6dc <__udivdi3+0x7c>
c001b6c0:	0f bd da             	bsr    ebx,edx
c001b6c3:	83 f3 1f             	xor    ebx,0x1f
c001b6c6:	75 24                	jne    c001b6ec <__udivdi3+0x8c>
c001b6c8:	39 f2                	cmp    edx,esi
c001b6ca:	72 08                	jb     c001b6d4 <__udivdi3+0x74>
c001b6cc:	39 ef                	cmp    edi,ebp
c001b6ce:	0f 87 84 00 00 00    	ja     c001b758 <__udivdi3+0xf8>
c001b6d4:	b8 01 00 00 00       	mov    eax,0x1
c001b6d9:	eb ac                	jmp    c001b687 <__udivdi3+0x27>
c001b6db:	90                   	nop
c001b6dc:	31 db                	xor    ebx,ebx
c001b6de:	31 c0                	xor    eax,eax
c001b6e0:	89 da                	mov    edx,ebx
c001b6e2:	83 c4 1c             	add    esp,0x1c
c001b6e5:	5b                   	pop    ebx
c001b6e6:	5e                   	pop    esi
c001b6e7:	5f                   	pop    edi
c001b6e8:	5d                   	pop    ebp
c001b6e9:	c3                   	ret    
c001b6ea:	66 90                	xchg   ax,ax
c001b6ec:	b8 20 00 00 00       	mov    eax,0x20
c001b6f1:	29 d8                	sub    eax,ebx
c001b6f3:	88 d9                	mov    cl,bl
c001b6f5:	d3 e2                	shl    edx,cl
c001b6f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b6fb:	89 fa                	mov    edx,edi
c001b6fd:	88 c1                	mov    cl,al
c001b6ff:	d3 ea                	shr    edx,cl
c001b701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b705:	09 d1                	or     ecx,edx
c001b707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b70b:	88 d9                	mov    cl,bl
c001b70d:	d3 e7                	shl    edi,cl
c001b70f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b713:	89 f7                	mov    edi,esi
c001b715:	88 c1                	mov    cl,al
c001b717:	d3 ef                	shr    edi,cl
c001b719:	88 d9                	mov    cl,bl
c001b71b:	d3 e6                	shl    esi,cl
c001b71d:	89 ea                	mov    edx,ebp
c001b71f:	88 c1                	mov    cl,al
c001b721:	d3 ea                	shr    edx,cl
c001b723:	09 d6                	or     esi,edx
c001b725:	89 f0                	mov    eax,esi
c001b727:	89 fa                	mov    edx,edi
c001b729:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b72d:	89 d7                	mov    edi,edx
c001b72f:	89 c6                	mov    esi,eax
c001b731:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b735:	39 d7                	cmp    edi,edx
c001b737:	72 13                	jb     c001b74c <__udivdi3+0xec>
c001b739:	74 09                	je     c001b744 <__udivdi3+0xe4>
c001b73b:	89 f0                	mov    eax,esi
c001b73d:	31 db                	xor    ebx,ebx
c001b73f:	e9 43 ff ff ff       	jmp    c001b687 <__udivdi3+0x27>
c001b744:	88 d9                	mov    cl,bl
c001b746:	d3 e5                	shl    ebp,cl
c001b748:	39 c5                	cmp    ebp,eax
c001b74a:	73 ef                	jae    c001b73b <__udivdi3+0xdb>
c001b74c:	8d 46 ff             	lea    eax,[esi-0x1]
c001b74f:	31 db                	xor    ebx,ebx
c001b751:	e9 31 ff ff ff       	jmp    c001b687 <__udivdi3+0x27>
c001b756:	66 90                	xchg   ax,ax
c001b758:	31 c0                	xor    eax,eax
c001b75a:	e9 28 ff ff ff       	jmp    c001b687 <__udivdi3+0x27>
c001b75f:	90                   	nop

c001b760 <__umoddi3>:
c001b760:	55                   	push   ebp
c001b761:	57                   	push   edi
c001b762:	56                   	push   esi
c001b763:	53                   	push   ebx
c001b764:	83 ec 1c             	sub    esp,0x1c
c001b767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b76b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b76f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001b773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b777:	89 da                	mov    edx,ebx
c001b779:	85 c0                	test   eax,eax
c001b77b:	75 37                	jne    c001b7b4 <__umoddi3+0x54>
c001b77d:	39 df                	cmp    edi,ebx
c001b77f:	76 13                	jbe    c001b794 <__umoddi3+0x34>
c001b781:	89 f0                	mov    eax,esi
c001b783:	f7 f7                	div    edi
c001b785:	89 d0                	mov    eax,edx
c001b787:	31 d2                	xor    edx,edx
c001b789:	83 c4 1c             	add    esp,0x1c
c001b78c:	5b                   	pop    ebx
c001b78d:	5e                   	pop    esi
c001b78e:	5f                   	pop    edi
c001b78f:	5d                   	pop    ebp
c001b790:	c3                   	ret    
c001b791:	8d 76 00             	lea    esi,[esi+0x0]
c001b794:	89 fd                	mov    ebp,edi
c001b796:	85 ff                	test   edi,edi
c001b798:	75 0b                	jne    c001b7a5 <__umoddi3+0x45>
c001b79a:	b8 01 00 00 00       	mov    eax,0x1
c001b79f:	31 d2                	xor    edx,edx
c001b7a1:	f7 f7                	div    edi
c001b7a3:	89 c5                	mov    ebp,eax
c001b7a5:	89 d8                	mov    eax,ebx
c001b7a7:	31 d2                	xor    edx,edx
c001b7a9:	f7 f5                	div    ebp
c001b7ab:	89 f0                	mov    eax,esi
c001b7ad:	f7 f5                	div    ebp
c001b7af:	89 d0                	mov    eax,edx
c001b7b1:	eb d4                	jmp    c001b787 <__umoddi3+0x27>
c001b7b3:	90                   	nop
c001b7b4:	89 f1                	mov    ecx,esi
c001b7b6:	39 d8                	cmp    eax,ebx
c001b7b8:	76 0a                	jbe    c001b7c4 <__umoddi3+0x64>
c001b7ba:	89 f0                	mov    eax,esi
c001b7bc:	83 c4 1c             	add    esp,0x1c
c001b7bf:	5b                   	pop    ebx
c001b7c0:	5e                   	pop    esi
c001b7c1:	5f                   	pop    edi
c001b7c2:	5d                   	pop    ebp
c001b7c3:	c3                   	ret    
c001b7c4:	0f bd e8             	bsr    ebp,eax
c001b7c7:	83 f5 1f             	xor    ebp,0x1f
c001b7ca:	75 1c                	jne    c001b7e8 <__umoddi3+0x88>
c001b7cc:	39 d8                	cmp    eax,ebx
c001b7ce:	72 04                	jb     c001b7d4 <__umoddi3+0x74>
c001b7d0:	39 f7                	cmp    edi,esi
c001b7d2:	77 08                	ja     c001b7dc <__umoddi3+0x7c>
c001b7d4:	89 da                	mov    edx,ebx
c001b7d6:	29 fe                	sub    esi,edi
c001b7d8:	19 c2                	sbb    edx,eax
c001b7da:	89 f1                	mov    ecx,esi
c001b7dc:	89 c8                	mov    eax,ecx
c001b7de:	83 c4 1c             	add    esp,0x1c
c001b7e1:	5b                   	pop    ebx
c001b7e2:	5e                   	pop    esi
c001b7e3:	5f                   	pop    edi
c001b7e4:	5d                   	pop    ebp
c001b7e5:	c3                   	ret    
c001b7e6:	66 90                	xchg   ax,ax
c001b7e8:	ba 20 00 00 00       	mov    edx,0x20
c001b7ed:	29 ea                	sub    edx,ebp
c001b7ef:	89 e9                	mov    ecx,ebp
c001b7f1:	d3 e0                	shl    eax,cl
c001b7f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7f7:	89 f8                	mov    eax,edi
c001b7f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7fd:	88 d1                	mov    cl,dl
c001b7ff:	d3 e8                	shr    eax,cl
c001b801:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b805:	09 c1                	or     ecx,eax
c001b807:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b80b:	89 e9                	mov    ecx,ebp
c001b80d:	d3 e7                	shl    edi,cl
c001b80f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b813:	89 d8                	mov    eax,ebx
c001b815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b819:	88 d1                	mov    cl,dl
c001b81b:	d3 e8                	shr    eax,cl
c001b81d:	89 c7                	mov    edi,eax
c001b81f:	89 e9                	mov    ecx,ebp
c001b821:	d3 e3                	shl    ebx,cl
c001b823:	89 f0                	mov    eax,esi
c001b825:	88 d1                	mov    cl,dl
c001b827:	d3 e8                	shr    eax,cl
c001b829:	09 d8                	or     eax,ebx
c001b82b:	89 e9                	mov    ecx,ebp
c001b82d:	d3 e6                	shl    esi,cl
c001b82f:	89 f3                	mov    ebx,esi
c001b831:	89 fa                	mov    edx,edi
c001b833:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001b837:	89 d1                	mov    ecx,edx
c001b839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001b83d:	89 c6                	mov    esi,eax
c001b83f:	89 d7                	mov    edi,edx
c001b841:	39 d1                	cmp    ecx,edx
c001b843:	72 27                	jb     c001b86c <__umoddi3+0x10c>
c001b845:	74 21                	je     c001b868 <__umoddi3+0x108>
c001b847:	89 ca                	mov    edx,ecx
c001b849:	29 f3                	sub    ebx,esi
c001b84b:	19 fa                	sbb    edx,edi
c001b84d:	89 d0                	mov    eax,edx
c001b84f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001b853:	d3 e0                	shl    eax,cl
c001b855:	89 e9                	mov    ecx,ebp
c001b857:	d3 eb                	shr    ebx,cl
c001b859:	09 d8                	or     eax,ebx
c001b85b:	d3 ea                	shr    edx,cl
c001b85d:	83 c4 1c             	add    esp,0x1c
c001b860:	5b                   	pop    ebx
c001b861:	5e                   	pop    esi
c001b862:	5f                   	pop    edi
c001b863:	5d                   	pop    ebp
c001b864:	c3                   	ret    
c001b865:	8d 76 00             	lea    esi,[esi+0x0]
c001b868:	39 c3                	cmp    ebx,eax
c001b86a:	73 db                	jae    c001b847 <__umoddi3+0xe7>
c001b86c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001b870:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001b874:	89 d7                	mov    edi,edx
c001b876:	89 c6                	mov    esi,eax
c001b878:	eb cd                	jmp    c001b847 <__umoddi3+0xe7>

Disassembly of section .init:

c001b87a <_init>:
c001b87a:	55                   	push   ebp
c001b87b:	89 e5                	mov    ebp,esp
c001b87d:	e8 96 48 fe ff       	call   c0000118 <frame_dummy>
c001b882:	e8 e5 fa ff ff       	call   c001b36c <__do_global_ctors_aux>
c001b887:	5d                   	pop    ebp
c001b888:	c3                   	ret    

Disassembly of section .fini:

c001b889 <_fini>:
c001b889:	55                   	push   ebp
c001b88a:	89 e5                	mov    ebp,esp
c001b88c:	e8 17 48 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001b891:	5d                   	pop    ebp
c001b892:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001b894 <Computer::~Computer()>:
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	ba 90 cb 01 c0       	mov    edx,0xc001cb90
c001b89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a0:	89 10                	mov    DWORD PTR [eax],edx
c001b8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	50                   	push   eax
c001b8aa:	e8 b7 f3 fe ff       	call   c000ac66 <Device::~Device()>
c001b8af:	83 c4 10             	add    esp,0x10
c001b8b2:	90                   	nop
c001b8b3:	83 c4 0c             	add    esp,0xc
c001b8b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001b8b8 <Computer::~Computer()>:
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	83 ec 0c             	sub    esp,0xc
c001b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8c2:	e8 cd ff ff ff       	call   c001b894 <Computer::~Computer()>
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	83 ec 08             	sub    esp,0x8
c001b8cd:	68 70 01 00 00       	push   0x170
c001b8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8d6:	e8 53 df fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	83 c4 0c             	add    esp,0xc
c001b8e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001b8e2 <idleCommon()>:
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	fa                   	cli    
c001b8e6:	ff 05 08 29 02 c0    	inc    DWORD PTR ds:0xc0022908
c001b8ec:	e8 f7 6f ff ff       	call   c00128e8 <schedule()>
c001b8f1:	a1 08 29 02 c0       	mov    eax,ds:0xc0022908
c001b8f6:	48                   	dec    eax
c001b8f7:	a3 08 29 02 c0       	mov    ds:0xc0022908,eax
c001b8fc:	75 01                	jne    c001b8ff <idleCommon()+0x1d>
c001b8fe:	fb                   	sti    
c001b8ff:	83 c4 0c             	add    esp,0xc
c001b902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001b904 <LinkedList<UnixFile>::~LinkedList()>:
c001b904:	90                   	nop
c001b905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001b906 <LinkedList<UnixFile>::LinkedList()>:
c001b906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b90a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b92a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b93f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b946:	90                   	nop
c001b947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001b948 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b950:	75 10                	jne    c001b962 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001b952:	83 ec 0c             	sub    esp,0xc
c001b955:	68 e4 cd 01 c0       	push   0xc001cde4
c001b95a:	e8 14 3b ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001b95f:	83 c4 10             	add    esp,0x10
c001b962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b966:	8b 00                	mov    eax,DWORD PTR [eax]
c001b968:	85 c0                	test   eax,eax
c001b96a:	74 34                	je     c001b9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b973:	85 c0                	test   eax,eax
c001b975:	74 29                	je     c001b9a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001b977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b97e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b989:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b98d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b99e:	eb 65                	jmp    c001ba05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a6:	85 c0                	test   eax,eax
c001b9a8:	75 4b                	jne    c001b9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b9b1:	85 c0                	test   eax,eax
c001b9b3:	75 40                	jne    c001b9f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001b9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9bd:	89 10                	mov    DWORD PTR [eax],edx
c001b9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b9d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001b9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b9df:	85 c0                	test   eax,eax
c001b9e1:	74 22                	je     c001ba05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b9e3:	83 ec 0c             	sub    esp,0xc
c001b9e6:	68 06 ce 01 c0       	push   0xc001ce06
c001b9eb:	e8 83 3a ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	eb 10                	jmp    c001ba05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001b9f5:	83 ec 0c             	sub    esp,0xc
c001b9f8:	68 10 ce 01 c0       	push   0xc001ce10
c001b9fd:	e8 71 3a ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001ba02:	83 c4 10             	add    esp,0x10
c001ba05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ba0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ba16:	90                   	nop
c001ba17:	83 c4 0c             	add    esp,0xc
c001ba1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ba1c <LinkedList<UnixFile>::getFirstElement()>:
c001ba1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ba24 <LinkedList<UnixFile>::removeFirst()>:
c001ba24:	83 ec 0c             	sub    esp,0xc
c001ba27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba2d:	85 c0                	test   eax,eax
c001ba2f:	75 12                	jne    c001ba43 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ba31:	83 ec 0c             	sub    esp,0xc
c001ba34:	68 1c ce 01 c0       	push   0xc001ce1c
c001ba39:	e8 35 3a ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	eb 7e                	jmp    c001bac1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ba43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ba4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba4d:	85 c0                	test   eax,eax
c001ba4f:	74 10                	je     c001ba61 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ba51:	83 ec 0c             	sub    esp,0xc
c001ba54:	68 67 ce 01 c0       	push   0xc001ce67
c001ba59:	e8 15 3a ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001ba5e:	83 c4 10             	add    esp,0x10
c001ba61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba65:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba6a:	85 c0                	test   eax,eax
c001ba6c:	75 33                	jne    c001baa1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ba6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ba8a:	83 f8 01             	cmp    eax,0x1
c001ba8d:	74 21                	je     c001bab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ba8f:	83 ec 0c             	sub    esp,0xc
c001ba92:	68 40 ce 01 c0       	push   0xc001ce40
c001ba97:	e8 d7 39 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001ba9c:	83 c4 10             	add    esp,0x10
c001ba9f:	eb 0f                	jmp    c001bab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001baa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa5:	8b 00                	mov    eax,DWORD PTR [eax]
c001baa7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001baaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baae:	89 10                	mov    DWORD PTR [eax],edx
c001bab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bab7:	8d 50 ff             	lea    edx,[eax-0x1]
c001baba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bac1:	83 c4 0c             	add    esp,0xc
c001bac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001bac6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001bac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001baca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bacd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001bace <DriverlessDevice::~DriverlessDevice()>:
c001bace:	ba bc d4 01 c0       	mov    edx,0xc001d4bc
c001bad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bad7:	89 10                	mov    DWORD PTR [eax],edx
c001bad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001badd:	50                   	push   eax
c001bade:	e8 83 f1 fe ff       	call   c000ac66 <Device::~Device()>
c001bae3:	83 c4 04             	add    esp,0x4
c001bae6:	90                   	nop
c001bae7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001bae8 <DriverlessDevice::~DriverlessDevice()>:
c001bae8:	83 ec 0c             	sub    esp,0xc
c001baeb:	83 ec 0c             	sub    esp,0xc
c001baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baf2:	e8 d7 ff ff ff       	call   c001bace <DriverlessDevice::~DriverlessDevice()>
c001baf7:	83 c4 10             	add    esp,0x10
c001bafa:	83 ec 08             	sub    esp,0x8
c001bafd:	68 58 01 00 00       	push   0x158
c001bb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb06:	e8 23 dd fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	83 c4 0c             	add    esp,0xc
c001bb11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001bb12 <LinkedList<Device>::addElement(Device*)>:
c001bb12:	83 ec 0c             	sub    esp,0xc
c001bb15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bb1a:	75 10                	jne    c001bb2c <LinkedList<Device>::addElement(Device*)+0x1a>
c001bb1c:	83 ec 0c             	sub    esp,0xc
c001bb1f:	68 e4 cd 01 c0       	push   0xc001cde4
c001bb24:	e8 4a 39 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bb29:	83 c4 10             	add    esp,0x10
c001bb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb30:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb32:	85 c0                	test   eax,eax
c001bb34:	74 3a                	je     c001bb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb3d:	85 c0                	test   eax,eax
c001bb3f:	74 2f                	je     c001bb70 <LinkedList<Device>::addElement(Device*)+0x5e>
c001bb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001bb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bb6e:	eb 68                	jmp    c001bbd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb74:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb76:	85 c0                	test   eax,eax
c001bb78:	75 4e                	jne    c001bbc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb81:	85 c0                	test   eax,eax
c001bb83:	75 43                	jne    c001bbc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001bb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb8d:	89 10                	mov    DWORD PTR [eax],edx
c001bb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bba1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001bbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbb2:	85 c0                	test   eax,eax
c001bbb4:	74 22                	je     c001bbd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bbb6:	83 ec 0c             	sub    esp,0xc
c001bbb9:	68 06 ce 01 c0       	push   0xc001ce06
c001bbbe:	e8 b0 38 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bbc3:	83 c4 10             	add    esp,0x10
c001bbc6:	eb 10                	jmp    c001bbd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001bbc8:	83 ec 0c             	sub    esp,0xc
c001bbcb:	68 10 ce 01 c0       	push   0xc001ce10
c001bbd0:	e8 9e 38 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bbdf:	8d 50 01             	lea    edx,[eax+0x1]
c001bbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bbe9:	90                   	nop
c001bbea:	83 c4 0c             	add    esp,0xc
c001bbed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001bbee <LinkedList<Device>::LinkedList()>:
c001bbee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bc0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bc2e:	90                   	nop
c001bc2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001bc30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001bc30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc34:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc36:	85 c0                	test   eax,eax
c001bc38:	75 0e                	jne    c001bc48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc41:	85 c0                	test   eax,eax
c001bc43:	75 03                	jne    c001bc48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001bc45:	b0 01                	mov    al,0x1
c001bc47:	c3                   	ret    
c001bc48:	b0 00                	mov    al,0x0
c001bc4a:	90                   	nop
c001bc4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001bc4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001bc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc50:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001bc54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001bc54:	83 ec 0c             	sub    esp,0xc
c001bc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc5d:	85 c0                	test   eax,eax
c001bc5f:	75 17                	jne    c001bc78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001bc61:	83 ec 0c             	sub    esp,0xc
c001bc64:	68 1c ce 01 c0       	push   0xc001ce1c
c001bc69:	e8 05 38 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	e9 92 00 00 00       	jmp    c001bd08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001bc76:	66 90                	xchg   ax,ax
c001bc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc82:	85 c0                	test   eax,eax
c001bc84:	0f 95 c0             	setne  al
c001bc87:	84 c0                	test   al,al
c001bc89:	74 11                	je     c001bc9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001bc8b:	83 ec 0c             	sub    esp,0xc
c001bc8e:	68 67 ce 01 c0       	push   0xc001ce67
c001bc93:	e8 db 37 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	90                   	nop
c001bc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bca2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bca5:	85 c0                	test   eax,eax
c001bca7:	0f 94 c0             	sete   al
c001bcaa:	84 c0                	test   al,al
c001bcac:	74 36                	je     c001bce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001bcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bcca:	83 f8 01             	cmp    eax,0x1
c001bccd:	74 25                	je     c001bcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bccf:	83 ec 0c             	sub    esp,0xc
c001bcd2:	68 40 ce 01 c0       	push   0xc001ce40
c001bcd7:	e8 97 37 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	eb 13                	jmp    c001bcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001bce1:	8d 76 00             	lea    esi,[esi+0x0]
c001bce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bce8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf1:	89 10                	mov    DWORD PTR [eax],edx
c001bcf3:	90                   	nop
c001bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bcfb:	8d 50 ff             	lea    edx,[eax-0x1]
c001bcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bd05:	8d 76 00             	lea    esi,[esi+0x0]
c001bd08:	83 c4 0c             	add    esp,0xc
c001bd0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001bd0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001bd0c:	83 ec 0c             	sub    esp,0xc
c001bd0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bd14:	75 12                	jne    c001bd28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001bd16:	83 ec 0c             	sub    esp,0xc
c001bd19:	68 e4 cd 01 c0       	push   0xc001cde4
c001bd1e:	e8 50 37 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bd23:	83 c4 10             	add    esp,0x10
c001bd26:	66 90                	xchg   ax,ax
c001bd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd2e:	85 c0                	test   eax,eax
c001bd30:	74 36                	je     c001bd68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd39:	85 c0                	test   eax,eax
c001bd3b:	74 2b                	je     c001bd68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001bd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001bd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bd64:	eb 6a                	jmp    c001bdd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bd66:	66 90                	xchg   ax,ax
c001bd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd6e:	85 c0                	test   eax,eax
c001bd70:	75 4e                	jne    c001bdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd79:	85 c0                	test   eax,eax
c001bd7b:	75 43                	jne    c001bdc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001bd7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd85:	89 10                	mov    DWORD PTR [eax],edx
c001bd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bda4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bda7:	85 c0                	test   eax,eax
c001bda9:	74 25                	je     c001bdd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bdab:	83 ec 0c             	sub    esp,0xc
c001bdae:	68 06 ce 01 c0       	push   0xc001ce06
c001bdb3:	e8 bb 36 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bdb8:	83 c4 10             	add    esp,0x10
c001bdbb:	eb 13                	jmp    c001bdd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001bdbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc0:	83 ec 0c             	sub    esp,0xc
c001bdc3:	68 10 ce 01 c0       	push   0xc001ce10
c001bdc8:	e8 a6 36 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bdcd:	83 c4 10             	add    esp,0x10
c001bdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bdd7:	8d 50 01             	lea    edx,[eax+0x1]
c001bdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bde1:	90                   	nop
c001bde2:	83 c4 0c             	add    esp,0xc
c001bde5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001bde8 <ACPI::~ACPI()>:
c001bde8:	83 ec 0c             	sub    esp,0xc
c001bdeb:	ba 24 da 01 c0       	mov    edx,0xc001da24
c001bdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf4:	89 10                	mov    DWORD PTR [eax],edx
c001bdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdfa:	83 ec 0c             	sub    esp,0xc
c001bdfd:	50                   	push   eax
c001bdfe:	e8 63 ee fe ff       	call   c000ac66 <Device::~Device()>
c001be03:	83 c4 10             	add    esp,0x10
c001be06:	90                   	nop
c001be07:	83 c4 0c             	add    esp,0xc
c001be0a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001be0c <ACPI::~ACPI()>:
c001be0c:	83 ec 0c             	sub    esp,0xc
c001be0f:	83 ec 0c             	sub    esp,0xc
c001be12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be16:	e8 cd ff ff ff       	call   c001bde8 <ACPI::~ACPI()>
c001be1b:	83 c4 10             	add    esp,0x10
c001be1e:	83 ec 08             	sub    esp,0x8
c001be21:	68 64 12 00 00       	push   0x1264
c001be26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be2a:	e8 ff d9 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	83 c4 0c             	add    esp,0xc
c001be35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001be38 <LinkedList<Device>::~LinkedList()>:
c001be38:	90                   	nop
c001be39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001be3c <LinkedList<Device>::isEmpty()>:
c001be3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be40:	8b 00                	mov    eax,DWORD PTR [eax]
c001be42:	85 c0                	test   eax,eax
c001be44:	75 0e                	jne    c001be54 <LinkedList<Device>::isEmpty()+0x18>
c001be46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be4d:	85 c0                	test   eax,eax
c001be4f:	75 03                	jne    c001be54 <LinkedList<Device>::isEmpty()+0x18>
c001be51:	b0 01                	mov    al,0x1
c001be53:	c3                   	ret    
c001be54:	b0 00                	mov    al,0x0
c001be56:	90                   	nop
c001be57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001be58 <LinkedList<Device>::getFirstElement()>:
c001be58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001be5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001be60 <LinkedList<Device>::removeFirst()>:
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be67:	8b 00                	mov    eax,DWORD PTR [eax]
c001be69:	85 c0                	test   eax,eax
c001be6b:	75 17                	jne    c001be84 <LinkedList<Device>::removeFirst()+0x24>
c001be6d:	83 ec 0c             	sub    esp,0xc
c001be70:	68 1c ce 01 c0       	push   0xc001ce1c
c001be75:	e8 f9 35 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001be7a:	83 c4 10             	add    esp,0x10
c001be7d:	e9 92 00 00 00       	jmp    c001bf14 <LinkedList<Device>::removeFirst()+0xb4>
c001be82:	66 90                	xchg   ax,ax
c001be84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001be8b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001be91:	85 c0                	test   eax,eax
c001be93:	74 13                	je     c001bea8 <LinkedList<Device>::removeFirst()+0x48>
c001be95:	83 ec 0c             	sub    esp,0xc
c001be98:	68 67 ce 01 c0       	push   0xc001ce67
c001be9d:	e8 d1 35 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bea2:	83 c4 10             	add    esp,0x10
c001bea5:	8d 76 00             	lea    esi,[esi+0x0]
c001bea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beac:	8b 00                	mov    eax,DWORD PTR [eax]
c001beae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001beb4:	85 c0                	test   eax,eax
c001beb6:	75 34                	jne    c001beec <LinkedList<Device>::removeFirst()+0x8c>
c001beb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bebc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001becd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bed4:	83 f8 01             	cmp    eax,0x1
c001bed7:	74 27                	je     c001bf00 <LinkedList<Device>::removeFirst()+0xa0>
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	68 40 ce 01 c0       	push   0xc001ce40
c001bee1:	e8 8d 35 ff ff       	call   c000f473 <Krnl::panic(char const*)>
c001bee6:	83 c4 10             	add    esp,0x10
c001bee9:	eb 15                	jmp    c001bf00 <LinkedList<Device>::removeFirst()+0xa0>
c001beeb:	90                   	nop
c001beec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bef2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001bef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001befc:	89 10                	mov    DWORD PTR [eax],edx
c001befe:	66 90                	xchg   ax,ax
c001bf00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf07:	8d 50 ff             	lea    edx,[eax-0x1]
c001bf0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf11:	8d 76 00             	lea    esi,[esi+0x0]
c001bf14:	83 c4 0c             	add    esp,0xc
c001bf17:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001bf18 <CPU::~CPU()>:
c001bf18:	83 ec 0c             	sub    esp,0xc
c001bf1b:	ba c0 db 01 c0       	mov    edx,0xc001dbc0
c001bf20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf24:	89 10                	mov    DWORD PTR [eax],edx
c001bf26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf2a:	83 ec 0c             	sub    esp,0xc
c001bf2d:	50                   	push   eax
c001bf2e:	e8 33 ed fe ff       	call   c000ac66 <Device::~Device()>
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	90                   	nop
c001bf37:	83 c4 0c             	add    esp,0xc
c001bf3a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001bf3c <CPU::~CPU()>:
c001bf3c:	83 ec 0c             	sub    esp,0xc
c001bf3f:	83 ec 0c             	sub    esp,0xc
c001bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf46:	e8 cd ff ff ff       	call   c001bf18 <CPU::~CPU()>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	83 ec 08             	sub    esp,0x8
c001bf51:	68 94 11 00 00       	push   0x1194
c001bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf5a:	e8 cf d8 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001bf5f:	83 c4 10             	add    esp,0x10
c001bf62:	83 c4 0c             	add    esp,0xc
c001bf65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001bf68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001bf68:	90                   	nop
c001bf69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001bf6c <ThreadControlBlock::ThreadControlBlock()>:
c001bf6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf70:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001bf77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf7b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001bf82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf86:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001bf8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf91:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001bf98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf9c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001bfa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfa7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001bfab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfaf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001bfb3:	90                   	nop
c001bfb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001bfb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001bfb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfe6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bff1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bff8:	90                   	nop
c001bff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001bffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001bffc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c000:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c003:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c004 <PCI::~PCI()>:
c001c004:	83 ec 0c             	sub    esp,0xc
c001c007:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c001c00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c010:	89 10                	mov    DWORD PTR [eax],edx
c001c012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c016:	83 ec 0c             	sub    esp,0xc
c001c019:	50                   	push   eax
c001c01a:	e8 d1 e6 fe ff       	call   c000a6f0 <Bus::~Bus()>
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	90                   	nop
c001c023:	83 c4 0c             	add    esp,0xc
c001c026:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c028 <PCI::~PCI()>:
c001c028:	83 ec 0c             	sub    esp,0xc
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c032:	e8 cd ff ff ff       	call   c001c004 <PCI::~PCI()>
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	83 ec 08             	sub    esp,0x8
c001c03d:	68 5c 01 00 00       	push   0x15c
c001c042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c046:	e8 e3 d7 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c04b:	83 c4 10             	add    esp,0x10
c001c04e:	83 c4 0c             	add    esp,0xc
c001c051:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c052 <IDE::~IDE()>:
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	ba f4 e7 01 c0       	mov    edx,0xc001e7f4
c001c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c05e:	89 10                	mov    DWORD PTR [eax],edx
c001c060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c064:	83 ec 0c             	sub    esp,0xc
c001c067:	50                   	push   eax
c001c068:	e8 73 f0 fe ff       	call   c000b0e0 <HardDiskController::~HardDiskController()>
c001c06d:	83 c4 10             	add    esp,0x10
c001c070:	90                   	nop
c001c071:	83 c4 0c             	add    esp,0xc
c001c074:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c076 <IDE::~IDE()>:
c001c076:	83 ec 0c             	sub    esp,0xc
c001c079:	83 ec 0c             	sub    esp,0xc
c001c07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c080:	e8 cd ff ff ff       	call   c001c052 <IDE::~IDE()>
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	83 ec 08             	sub    esp,0x8
c001c08b:	68 70 02 00 00       	push   0x270
c001c090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c094:	e8 95 d7 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c099:	83 c4 10             	add    esp,0x10
c001c09c:	83 c4 0c             	add    esp,0xc
c001c09f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c0a0 <SATABus::~SATABus()>:
c001c0a0:	83 ec 0c             	sub    esp,0xc
c001c0a3:	ba 44 e8 01 c0       	mov    edx,0xc001e844
c001c0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ac:	89 10                	mov    DWORD PTR [eax],edx
c001c0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b2:	83 ec 0c             	sub    esp,0xc
c001c0b5:	50                   	push   eax
c001c0b6:	e8 25 f0 fe ff       	call   c000b0e0 <HardDiskController::~HardDiskController()>
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	90                   	nop
c001c0bf:	83 c4 0c             	add    esp,0xc
c001c0c2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c0c4 <SATABus::~SATABus()>:
c001c0c4:	83 ec 0c             	sub    esp,0xc
c001c0c7:	83 ec 0c             	sub    esp,0xc
c001c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0ce:	e8 cd ff ff ff       	call   c001c0a0 <SATABus::~SATABus()>
c001c0d3:	83 c4 10             	add    esp,0x10
c001c0d6:	83 ec 08             	sub    esp,0x8
c001c0d9:	68 64 01 00 00       	push   0x164
c001c0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0e2:	e8 47 d7 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	83 c4 0c             	add    esp,0xc
c001c0ed:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c0ee <ATA::~ATA()>:
c001c0ee:	83 ec 0c             	sub    esp,0xc
c001c0f1:	ba 84 e8 01 c0       	mov    edx,0xc001e884
c001c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fa:	89 10                	mov    DWORD PTR [eax],edx
c001c0fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c100:	83 ec 0c             	sub    esp,0xc
c001c103:	50                   	push   eax
c001c104:	e8 b9 f0 fe ff       	call   c000b1c2 <PhysicalDisk::~PhysicalDisk()>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	90                   	nop
c001c10d:	83 c4 0c             	add    esp,0xc
c001c110:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c112 <ATA::~ATA()>:
c001c112:	83 ec 0c             	sub    esp,0xc
c001c115:	83 ec 0c             	sub    esp,0xc
c001c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c11c:	e8 cd ff ff ff       	call   c001c0ee <ATA::~ATA()>
c001c121:	83 c4 10             	add    esp,0x10
c001c124:	83 ec 08             	sub    esp,0x8
c001c127:	68 7c 01 00 00       	push   0x17c
c001c12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c130:	e8 f9 d6 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c135:	83 c4 10             	add    esp,0x10
c001c138:	83 c4 0c             	add    esp,0xc
c001c13b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c13c <ATAPI::~ATAPI()>:
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	ba cc e8 01 c0       	mov    edx,0xc001e8cc
c001c144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c148:	89 10                	mov    DWORD PTR [eax],edx
c001c14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c14e:	83 ec 0c             	sub    esp,0xc
c001c151:	50                   	push   eax
c001c152:	e8 6b f0 fe ff       	call   c000b1c2 <PhysicalDisk::~PhysicalDisk()>
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	90                   	nop
c001c15b:	83 c4 0c             	add    esp,0xc
c001c15e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c160 <ATAPI::~ATAPI()>:
c001c160:	83 ec 0c             	sub    esp,0xc
c001c163:	83 ec 0c             	sub    esp,0xc
c001c166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c16a:	e8 cd ff ff ff       	call   c001c13c <ATAPI::~ATAPI()>
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	83 ec 08             	sub    esp,0x8
c001c175:	68 84 01 00 00       	push   0x184
c001c17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c17e:	e8 ab d6 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c183:	83 c4 10             	add    esp,0x10
c001c186:	83 c4 0c             	add    esp,0xc
c001c189:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c18a <SATA::~SATA()>:
c001c18a:	83 ec 0c             	sub    esp,0xc
c001c18d:	ba 80 e9 01 c0       	mov    edx,0xc001e980
c001c192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c196:	89 10                	mov    DWORD PTR [eax],edx
c001c198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19c:	83 ec 0c             	sub    esp,0xc
c001c19f:	50                   	push   eax
c001c1a0:	e8 1d f0 fe ff       	call   c000b1c2 <PhysicalDisk::~PhysicalDisk()>
c001c1a5:	83 c4 10             	add    esp,0x10
c001c1a8:	90                   	nop
c001c1a9:	83 c4 0c             	add    esp,0xc
c001c1ac:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c1ae <SATA::~SATA()>:
c001c1ae:	83 ec 0c             	sub    esp,0xc
c001c1b1:	83 ec 0c             	sub    esp,0xc
c001c1b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1b8:	e8 cd ff ff ff       	call   c001c18a <SATA::~SATA()>
c001c1bd:	83 c4 10             	add    esp,0x10
c001c1c0:	83 ec 08             	sub    esp,0x8
c001c1c3:	68 7c 01 00 00       	push   0x17c
c001c1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1cc:	e8 5d d6 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	83 c4 0c             	add    esp,0xc
c001c1d7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c1d8 <SATAPI::~SATAPI()>:
c001c1d8:	83 ec 0c             	sub    esp,0xc
c001c1db:	ba ec ea 01 c0       	mov    edx,0xc001eaec
c001c1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e4:	89 10                	mov    DWORD PTR [eax],edx
c001c1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ea:	83 ec 0c             	sub    esp,0xc
c001c1ed:	50                   	push   eax
c001c1ee:	e8 cf ef fe ff       	call   c000b1c2 <PhysicalDisk::~PhysicalDisk()>
c001c1f3:	83 c4 10             	add    esp,0x10
c001c1f6:	90                   	nop
c001c1f7:	83 c4 0c             	add    esp,0xc
c001c1fa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c1fc <SATAPI::~SATAPI()>:
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	83 ec 0c             	sub    esp,0xc
c001c202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c206:	e8 cd ff ff ff       	call   c001c1d8 <SATAPI::~SATAPI()>
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	83 ec 08             	sub    esp,0x8
c001c211:	68 84 01 00 00       	push   0x184
c001c216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c21a:	e8 0f d6 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c21f:	83 c4 10             	add    esp,0x10
c001c222:	83 c4 0c             	add    esp,0xc
c001c225:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c226 <IOAPIC::~IOAPIC()>:
c001c226:	83 ec 0c             	sub    esp,0xc
c001c229:	ba 2c eb 01 c0       	mov    edx,0xc001eb2c
c001c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c232:	89 10                	mov    DWORD PTR [eax],edx
c001c234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	50                   	push   eax
c001c23c:	e8 25 ea fe ff       	call   c000ac66 <Device::~Device()>
c001c241:	83 c4 10             	add    esp,0x10
c001c244:	90                   	nop
c001c245:	83 c4 0c             	add    esp,0xc
c001c248:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c24a <IOAPIC::~IOAPIC()>:
c001c24a:	83 ec 0c             	sub    esp,0xc
c001c24d:	83 ec 0c             	sub    esp,0xc
c001c250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c254:	e8 cd ff ff ff       	call   c001c226 <IOAPIC::~IOAPIC()>
c001c259:	83 c4 10             	add    esp,0x10
c001c25c:	83 ec 08             	sub    esp,0x8
c001c25f:	68 68 01 00 00       	push   0x168
c001c264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c268:	e8 c1 d5 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c26d:	83 c4 10             	add    esp,0x10
c001c270:	83 c4 0c             	add    esp,0xc
c001c273:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c274 <APICTimer::~APICTimer()>:
c001c274:	83 ec 0c             	sub    esp,0xc
c001c277:	ba 74 eb 01 c0       	mov    edx,0xc001eb74
c001c27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c280:	89 10                	mov    DWORD PTR [eax],edx
c001c282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c286:	83 ec 0c             	sub    esp,0xc
c001c289:	50                   	push   eax
c001c28a:	e8 d5 02 ff ff       	call   c000c564 <Timer::~Timer()>
c001c28f:	83 c4 10             	add    esp,0x10
c001c292:	90                   	nop
c001c293:	83 c4 0c             	add    esp,0xc
c001c296:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c298 <APICTimer::~APICTimer()>:
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	83 ec 0c             	sub    esp,0xc
c001c29e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2a2:	e8 cd ff ff ff       	call   c001c274 <APICTimer::~APICTimer()>
c001c2a7:	83 c4 10             	add    esp,0x10
c001c2aa:	83 ec 08             	sub    esp,0x8
c001c2ad:	68 60 01 00 00       	push   0x160
c001c2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2b6:	e8 73 d5 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c2bb:	83 c4 10             	add    esp,0x10
c001c2be:	83 c4 0c             	add    esp,0xc
c001c2c1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c2c4 <PIT::~PIT()>:
c001c2c4:	83 ec 0c             	sub    esp,0xc
c001c2c7:	ba c4 eb 01 c0       	mov    edx,0xc001ebc4
c001c2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d0:	89 10                	mov    DWORD PTR [eax],edx
c001c2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d6:	83 ec 0c             	sub    esp,0xc
c001c2d9:	50                   	push   eax
c001c2da:	e8 85 02 ff ff       	call   c000c564 <Timer::~Timer()>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	90                   	nop
c001c2e3:	83 c4 0c             	add    esp,0xc
c001c2e6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c2e8 <PIT::~PIT()>:
c001c2e8:	83 ec 0c             	sub    esp,0xc
c001c2eb:	83 ec 0c             	sub    esp,0xc
c001c2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2f2:	e8 cd ff ff ff       	call   c001c2c4 <PIT::~PIT()>
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	83 ec 08             	sub    esp,0x8
c001c2fd:	68 5c 01 00 00       	push   0x15c
c001c302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c306:	e8 23 d5 fe ff       	call   c000982e <operator delete(void*, unsigned long)>
c001c30b:	83 c4 10             	add    esp,0x10
c001c30e:	83 c4 0c             	add    esp,0xc
c001c311:	c3                   	ret    
