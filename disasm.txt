
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3d 98 00 00       	call   c000985d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 35 16 02 00       	call   c002165a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 06 21 02 c0       	mov    ebx,0xc0022106
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 14 21 02 c0    	cmp    ebx,0xc0022114
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 04 5d 02 c0       	mov    eax,0xc0025d04
c0000049:	3d 04 5d 02 c0       	cmp    eax,0xc0025d04
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 04 5d 02 c0       	push   0xc0025d04
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 04 5d 02 c0       	mov    eax,0xc0025d04
c0000075:	2d 04 5d 02 c0       	sub    eax,0xc0025d04
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 04 5d 02 c0       	push   0xc0025d04
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 8c 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025e8c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 1c 21 02 c0       	mov    ebx,0xc002211c
c00000bb:	81 eb 18 21 02 c0    	sub    ebx,0xc0022118
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 18 21 02 c0       	mov    esi,0xc0022118
c00000ca:	a1 90 5e 02 c0       	mov    eax,ds:0xc0025e90
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 90 5e 02 c0       	mov    ds:0xc0025e90,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 90 5e 02 c0       	mov    eax,ds:0xc0025e90
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 04 5d 02 c0       	push   0xc0025d04
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 8c 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025e8c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 94 5e 02 c0       	push   0xc0025e94
c000012c:	68 04 5d 02 c0       	push   0xc0025d04
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 68 55 01 00       	call   c0015838 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 6a c1 00 00       	call   c000c452 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 46 55 01 00       	call   c0015838 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 07 5a 01 00       	call   c0015d18 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 4a 60 01 00       	call   c0016364 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 d0 62 02 c0 	lgdtd  ds:0xc00262d0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 7c 83 00 00       	jmp    c000871e <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 ac 5e 02 c0       	mov    ds:0xc0025eac,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 ac 5e 02 c0    	mov    DWORD PTR ds:0xc0025eac,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d ac 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eac
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 20 21 02 c0 02 	test   BYTE PTR [edx-0x3ffddee0],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 20 21 02 c0 01 	test   BYTE PTR [edx-0x3ffddee0],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 20 21 02 c0 08 	test   BYTE PTR [edx-0x3ffddee0],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 20 21 02 c0 04 	test   BYTE PTR [ebx-0x3ffddee0],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 20 21 02 c0 01 	test   BYTE PTR [edx-0x3ffddee0],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d c0 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ec0
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d c0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ec0,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 c4 5e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda13c]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 c4 5e 02 c0 	mov    DWORD PTR [eax*4-0x3ffda13c],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d c0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ec0,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 ec 5e 02 c0    	cmp    DWORD PTR ds:0xc0025eec,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d fc 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025efc
c0000b90:	c7 42 0c f4 5e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025ef4
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 fc 5e 02 c0    	mov    DWORD PTR ds:0xc0025efc,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 ec 5e 02 c0    	mov    DWORD PTR ds:0xc0025eec,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 c0 5e 02 c0 02 	test   BYTE PTR ds:0xc0025ec0,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 ef 89 00 00       	call   c0009660 <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 31 89 00 00       	call   c0009660 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 1b 89 00 00       	call   c0009660 <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 f7 88 00 00       	call   c0009660 <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d c0 5e 02 c0    	mov    edi,DWORD PTR ds:0xc0025ec0
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 c4 5e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda13c]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 c4 5e 02 c0 	mov    DWORD PTR [edx*4-0x3ffda13c],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 f4 5e 02 c0 	lea    edx,[eax*8-0x3ffda10c]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d 00 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025f00
c0000f12:	81 fb f4 5e 02 c0    	cmp    ebx,0xc0025ef4
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d f4 5e 02 c0       	cmp    eax,0xc0025ef4
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d f0 5e 02 c0    	cmp    DWORD PTR ds:0xc0025ef0,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 fc 5e 02 c0       	mov    ds:0xc0025efc,eax
c0000f4e:	a3 00 5f 02 c0       	mov    ds:0xc0025f00,eax
c0000f53:	a3 f0 5e 02 c0       	mov    ds:0xc0025ef0,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 f4 5e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ef4
c0000f61:	c7 40 0c f4 5e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025ef4
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 00 5f 02 c0       	mov    ds:0xc0025f00,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 f4 5e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ef4
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 b8 5e 02 c0 	lea    ebp,[edx*4-0x3ffda148]
c0000fb2:	8b 14 95 c0 5e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda140]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 c0 5e 02 c0 	lea    ecx,[edx*4-0x3ffda140]
c0000fcd:	8b 14 95 c0 5e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda140]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd f4 61 02 c0 	or     DWORD PTR [edi*4-0x3ffd9e0c],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 f4 5e 02 c0 	lea    eax,[eax*8-0x3ffda10c]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d fc 5e 02 c0    	mov    DWORD PTR ds:0xc0025efc,ecx
c0001087:	89 0d 00 5f 02 c0    	mov    DWORD PTR ds:0xc0025f00,ecx
c000108d:	c7 41 08 f4 5e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025ef4
c0001094:	c7 41 0c f4 5e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025ef4
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd ec 5e 02 c0 	lea    edx,[ecx*8-0x3ffda114]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d f4 61 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9e0c]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d f4 61 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9e0c]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 ec 5e 02 c0 	lea    edx,[eax*4-0x3ffda114]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d f4 61 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9e0c],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d fc 5e 02 c0    	mov    DWORD PTR ds:0xc0025efc,edi
c000115a:	89 3d 00 5f 02 c0    	mov    DWORD PTR ds:0xc0025f00,edi
c0001160:	c7 47 08 f4 5e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025ef4
c0001167:	c7 47 0c f4 5e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025ef4
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d f0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ef0,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 ec 5e 02 c0       	mov    eax,ds:0xc0025eec
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d ec 5e 02 c0    	mov    DWORD PTR ds:0xc0025eec,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba c0 5e 02 c0       	mov    edx,0xc0025ec0
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d c0 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025ec0,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d 14 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026214
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 14 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026214,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d 14 62 02 c0    	mov    DWORD PTR ds:0xc0026214,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 ec 5e 02 c0    	cmp    DWORD PTR ds:0xc0025eec,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d ec 5e 02 c0    	mov    DWORD PTR ds:0xc0025eec,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d c0 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025ec0,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 1c 62 02 c0    	push   DWORD PTR ds:0xc002621c
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d c0 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025ec0,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 1c 62 02 c0       	mov    eax,ds:0xc002621c
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d ec 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eec,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 ec 5e 02 c0       	mov    eax,ds:0xc0025eec
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 c4 5e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda13c]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 f4 5e 02 c0       	mov    eax,0xc0025ef4
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d ec 61 02 c0       	cmp    eax,0xc00261ec
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 28 62 02 c0       	mov    eax,ds:0xc0026228
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 10 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026210
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 24 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026224
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 34 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026234
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 24 22 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddddc]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 c0 5e 02 c0       	mov    eax,ds:0xc0025ec0
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 c0 5e 02 c0       	mov    ds:0xc0025ec0,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d 04 62 02 c0    	mov    DWORD PTR ds:0xc0026204,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d 08 62 02 c0    	mov    DWORD PTR ds:0xc0026208,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d 0c 62 02 c0    	mov    DWORD PTR ds:0xc002620c,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 14 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026214,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 60 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66a0]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 62 94 01 00       	jmp    c001adac <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 60 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66a0]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 94 94 01 00       	jmp    c001adf4 <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 60 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66a0]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 bd 94 01 00       	jmp    c001ae3c <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <ld_qword>:
c00019a4:	57                   	push   edi
c00019a5:	56                   	push   esi
c00019a6:	53                   	push   ebx
c00019a7:	31 db                	xor    ebx,ebx
c00019a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019ac:	89 df                	mov    edi,ebx
c00019ae:	89 ce                	mov    esi,ecx
c00019b0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019b4:	0f a4 f7 08          	shld   edi,esi,0x8
c00019b8:	c1 e6 08             	shl    esi,0x8
c00019bb:	09 f2                	or     edx,esi
c00019bd:	89 d6                	mov    esi,edx
c00019bf:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019d9:	c1 e6 08             	shl    esi,0x8
c00019dc:	89 fb                	mov    ebx,edi
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d1                	mov    ecx,edx
c00019e2:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019e6:	c1 e1 08             	shl    ecx,0x8
c00019e9:	89 da                	mov    edx,ebx
c00019eb:	09 c8                	or     eax,ecx
c00019ed:	5b                   	pop    ebx
c00019ee:	5e                   	pop    esi
c00019ef:	5f                   	pop    edi
c00019f0:	c3                   	ret    

c00019f1 <st_word>:
c00019f1:	66 89 10             	mov    WORD PTR [eax],dx
c00019f4:	c3                   	ret    

c00019f5 <st_dword>:
c00019f5:	89 10                	mov    DWORD PTR [eax],edx
c00019f7:	c3                   	ret    

c00019f8 <st_qword>:
c00019f8:	89 10                	mov    DWORD PTR [eax],edx
c00019fa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00019fd:	c3                   	ret    

c00019fe <mem_cpy>:
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 10                	je     c0001a12 <mem_cpy+0x14>
c0001a02:	57                   	push   edi
c0001a03:	01 c1                	add    ecx,eax
c0001a05:	56                   	push   esi
c0001a06:	89 c7                	mov    edi,eax
c0001a08:	89 d6                	mov    esi,edx
c0001a0a:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0b:	39 f9                	cmp    ecx,edi
c0001a0d:	75 fb                	jne    c0001a0a <mem_cpy+0xc>
c0001a0f:	5e                   	pop    esi
c0001a10:	5f                   	pop    edi
c0001a11:	c3                   	ret    
c0001a12:	c3                   	ret    

c0001a13 <mem_set>:
c0001a13:	01 c1                	add    ecx,eax
c0001a15:	40                   	inc    eax
c0001a16:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a19:	39 c8                	cmp    eax,ecx
c0001a1b:	75 f8                	jne    c0001a15 <mem_set+0x2>
c0001a1d:	c3                   	ret    

c0001a1e <mem_cmp>:
c0001a1e:	57                   	push   edi
c0001a1f:	56                   	push   esi
c0001a20:	89 c6                	mov    esi,eax
c0001a22:	53                   	push   ebx
c0001a23:	46                   	inc    esi
c0001a24:	42                   	inc    edx
c0001a25:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a29:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a2d:	29 fb                	sub    ebx,edi
c0001a2f:	89 cf                	mov    edi,ecx
c0001a31:	29 f7                	sub    edi,esi
c0001a33:	01 c7                	add    edi,eax
c0001a35:	74 04                	je     c0001a3b <mem_cmp+0x1d>
c0001a37:	85 db                	test   ebx,ebx
c0001a39:	74 e8                	je     c0001a23 <mem_cmp+0x5>
c0001a3b:	89 d8                	mov    eax,ebx
c0001a3d:	5b                   	pop    ebx
c0001a3e:	5e                   	pop    esi
c0001a3f:	5f                   	pop    edi
c0001a40:	c3                   	ret    

c0001a41 <chk_chr>:
c0001a41:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a44:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a47:	74 07                	je     c0001a50 <chk_chr+0xf>
c0001a49:	39 d1                	cmp    ecx,edx
c0001a4b:	74 03                	je     c0001a50 <chk_chr+0xf>
c0001a4d:	40                   	inc    eax
c0001a4e:	eb f1                	jmp    c0001a41 <chk_chr>
c0001a50:	89 c8                	mov    eax,ecx
c0001a52:	c3                   	ret    

c0001a53 <dbc_1st>:
c0001a53:	31 c0                	xor    eax,eax
c0001a55:	c3                   	ret    

c0001a56 <dbc_2nd>:
c0001a56:	31 c0                	xor    eax,eax
c0001a58:	c3                   	ret    

c0001a59 <tchar2uni>:
c0001a59:	57                   	push   edi
c0001a5a:	89 c7                	mov    edi,eax
c0001a5c:	56                   	push   esi
c0001a5d:	53                   	push   ebx
c0001a5e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a60:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a62:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a65:	84 c9                	test   cl,cl
c0001a67:	78 0a                	js     c0001a73 <tchar2uni+0x1a>
c0001a69:	0f b6 d1             	movzx  edx,cl
c0001a6c:	89 f3                	mov    ebx,esi
c0001a6e:	e9 9f 00 00 00       	jmp    c0001b12 <tchar2uni+0xb9>
c0001a73:	88 ca                	mov    dl,cl
c0001a75:	83 e2 e0             	and    edx,0xffffffe0
c0001a78:	80 fa c0             	cmp    dl,0xc0
c0001a7b:	75 0c                	jne    c0001a89 <tchar2uni+0x30>
c0001a7d:	89 ca                	mov    edx,ecx
c0001a7f:	b9 01 00 00 00       	mov    ecx,0x1
c0001a84:	83 e2 1f             	and    edx,0x1f
c0001a87:	eb 2e                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a89:	88 ca                	mov    dl,cl
c0001a8b:	83 e2 f0             	and    edx,0xfffffff0
c0001a8e:	80 fa e0             	cmp    dl,0xe0
c0001a91:	75 0c                	jne    c0001a9f <tchar2uni+0x46>
c0001a93:	89 ca                	mov    edx,ecx
c0001a95:	b9 02 00 00 00       	mov    ecx,0x2
c0001a9a:	83 e2 0f             	and    edx,0xf
c0001a9d:	eb 18                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a9f:	88 ca                	mov    dl,cl
c0001aa1:	83 e2 f8             	and    edx,0xfffffff8
c0001aa4:	88 d0                	mov    al,dl
c0001aa6:	83 ca ff             	or     edx,0xffffffff
c0001aa9:	3c f0                	cmp    al,0xf0
c0001aab:	75 6c                	jne    c0001b19 <tchar2uni+0xc0>
c0001aad:	89 ca                	mov    edx,ecx
c0001aaf:	b9 03 00 00 00       	mov    ecx,0x3
c0001ab4:	83 e2 07             	and    edx,0x7
c0001ab7:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001abb:	46                   	inc    esi
c0001abc:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001abf:	88 c8                	mov    al,cl
c0001ac1:	83 e0 c0             	and    eax,0xffffffc0
c0001ac4:	3c 80                	cmp    al,0x80
c0001ac6:	75 4e                	jne    c0001b16 <tchar2uni+0xbd>
c0001ac8:	c1 e2 06             	shl    edx,0x6
c0001acb:	83 e1 3f             	and    ecx,0x3f
c0001ace:	09 ca                	or     edx,ecx
c0001ad0:	39 de                	cmp    esi,ebx
c0001ad2:	75 e7                	jne    c0001abb <tchar2uni+0x62>
c0001ad4:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ad7:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001add:	77 37                	ja     c0001b16 <tchar2uni+0xbd>
c0001adf:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ae5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001aeb:	76 29                	jbe    c0001b16 <tchar2uni+0xbd>
c0001aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001af3:	76 1d                	jbe    c0001b12 <tchar2uni+0xb9>
c0001af5:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001afb:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b01:	c1 e1 06             	shl    ecx,0x6
c0001b04:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b0a:	09 ca                	or     edx,ecx
c0001b0c:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b12:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b14:	eb 03                	jmp    c0001b19 <tchar2uni+0xc0>
c0001b16:	83 ca ff             	or     edx,0xffffffff
c0001b19:	5b                   	pop    ebx
c0001b1a:	89 d0                	mov    eax,edx
c0001b1c:	5e                   	pop    esi
c0001b1d:	5f                   	pop    edi
c0001b1e:	c3                   	ret    

c0001b1f <put_utf>:
c0001b1f:	53                   	push   ebx
c0001b20:	83 f8 7f             	cmp    eax,0x7f
c0001b23:	89 c3                	mov    ebx,eax
c0001b25:	b0 00                	mov    al,0x0
c0001b27:	77 11                	ja     c0001b3a <put_utf+0x1b>
c0001b29:	85 c9                	test   ecx,ecx
c0001b2b:	0f 84 e5 00 00 00    	je     c0001c16 <put_utf+0xf7>
c0001b31:	88 1a                	mov    BYTE PTR [edx],bl
c0001b33:	b0 01                	mov    al,0x1
c0001b35:	e9 dc 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b3a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b40:	77 23                	ja     c0001b65 <put_utf+0x46>
c0001b42:	83 f9 01             	cmp    ecx,0x1
c0001b45:	0f 86 cb 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b4b:	89 d8                	mov    eax,ebx
c0001b4d:	83 e3 3f             	and    ebx,0x3f
c0001b50:	c1 e8 06             	shr    eax,0x6
c0001b53:	83 cb 80             	or     ebx,0xffffff80
c0001b56:	83 c8 c0             	or     eax,0xffffffc0
c0001b59:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b5c:	88 02                	mov    BYTE PTR [edx],al
c0001b5e:	b0 02                	mov    al,0x2
c0001b60:	e9 b1 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b65:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b6b:	77 40                	ja     c0001bad <put_utf+0x8e>
c0001b6d:	83 f9 02             	cmp    ecx,0x2
c0001b70:	0f 86 a0 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b76:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b7c:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b82:	0f 86 8e 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b88:	89 d8                	mov    eax,ebx
c0001b8a:	c1 e8 0c             	shr    eax,0xc
c0001b8d:	83 c8 e0             	or     eax,0xffffffe0
c0001b90:	88 02                	mov    BYTE PTR [edx],al
c0001b92:	89 d8                	mov    eax,ebx
c0001b94:	83 e3 3f             	and    ebx,0x3f
c0001b97:	c1 e8 06             	shr    eax,0x6
c0001b9a:	83 cb 80             	or     ebx,0xffffff80
c0001b9d:	83 e0 3f             	and    eax,0x3f
c0001ba0:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ba3:	83 c8 80             	or     eax,0xffffff80
c0001ba6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ba9:	b0 03                	mov    al,0x3
c0001bab:	eb 69                	jmp    c0001c16 <put_utf+0xf7>
c0001bad:	83 f9 03             	cmp    ecx,0x3
c0001bb0:	76 64                	jbe    c0001c16 <put_utf+0xf7>
c0001bb2:	89 d9                	mov    ecx,ebx
c0001bb4:	0f b7 c3             	movzx  eax,bx
c0001bb7:	66 31 c9             	xor    cx,cx
c0001bba:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bc0:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bc6:	c1 e9 06             	shr    ecx,0x6
c0001bc9:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bcf:	77 43                	ja     c0001c14 <put_utf+0xf5>
c0001bd1:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001bd7:	77 3b                	ja     c0001c14 <put_utf+0xf5>
c0001bd9:	09 cb                	or     ebx,ecx
c0001bdb:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001be1:	89 d8                	mov    eax,ebx
c0001be3:	c1 e8 12             	shr    eax,0x12
c0001be6:	83 c8 f0             	or     eax,0xfffffff0
c0001be9:	88 02                	mov    BYTE PTR [edx],al
c0001beb:	89 d8                	mov    eax,ebx
c0001bed:	c1 e8 0c             	shr    eax,0xc
c0001bf0:	83 e0 3f             	and    eax,0x3f
c0001bf3:	83 c8 80             	or     eax,0xffffff80
c0001bf6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bf9:	89 d8                	mov    eax,ebx
c0001bfb:	83 e3 3f             	and    ebx,0x3f
c0001bfe:	c1 e8 06             	shr    eax,0x6
c0001c01:	83 cb 80             	or     ebx,0xffffff80
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c0a:	83 c8 80             	or     eax,0xffffff80
c0001c0d:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c10:	b0 04                	mov    al,0x4
c0001c12:	eb 02                	jmp    c0001c16 <put_utf+0xf7>
c0001c14:	31 c0                	xor    eax,eax
c0001c16:	5b                   	pop    ebx
c0001c17:	c3                   	ret    

c0001c18 <clst2sect>:
c0001c18:	89 c1                	mov    ecx,eax
c0001c1a:	83 ea 02             	sub    edx,0x2
c0001c1d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c20:	83 e8 02             	sub    eax,0x2
c0001c23:	39 d0                	cmp    eax,edx
c0001c25:	76 0d                	jbe    c0001c34 <clst2sect+0x1c>
c0001c27:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c2b:	f7 e2                	mul    edx
c0001c2d:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c30:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c33:	c3                   	ret    
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	31 d2                	xor    edx,edx
c0001c38:	c3                   	ret    

c0001c39 <clmt_clust>:
c0001c39:	57                   	push   edi
c0001c3a:	89 cf                	mov    edi,ecx
c0001c3c:	56                   	push   esi
c0001c3d:	89 d6                	mov    esi,edx
c0001c3f:	53                   	push   ebx
c0001c40:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c44:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c47:	89 f2                	mov    edx,esi
c0001c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c4b:	c1 ef 09             	shr    edi,0x9
c0001c4e:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c52:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c55:	89 f9                	mov    ecx,edi
c0001c57:	31 ff                	xor    edi,edi
c0001c59:	57                   	push   edi
c0001c5a:	56                   	push   esi
c0001c5b:	51                   	push   ecx
c0001c5c:	52                   	push   edx
c0001c5d:	e8 de f7 01 00       	call   c0021440 <__udivdi3>
c0001c62:	83 c4 10             	add    esp,0x10
c0001c65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c67:	85 d2                	test   edx,edx
c0001c69:	74 10                	je     c0001c7b <clmt_clust+0x42>
c0001c6b:	39 d0                	cmp    eax,edx
c0001c6d:	72 07                	jb     c0001c76 <clmt_clust+0x3d>
c0001c6f:	29 d0                	sub    eax,edx
c0001c71:	83 c3 08             	add    ebx,0x8
c0001c74:	eb ef                	jmp    c0001c65 <clmt_clust+0x2c>
c0001c76:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c79:	89 c2                	mov    edx,eax
c0001c7b:	5b                   	pop    ebx
c0001c7c:	89 d0                	mov    eax,edx
c0001c7e:	5e                   	pop    esi
c0001c7f:	5f                   	pop    edi
c0001c80:	c3                   	ret    

c0001c81 <pick_lfn>:
c0001c81:	55                   	push   ebp
c0001c82:	57                   	push   edi
c0001c83:	56                   	push   esi
c0001c84:	89 d6                	mov    esi,edx
c0001c86:	53                   	push   ebx
c0001c87:	89 c3                	mov    ebx,eax
c0001c89:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c8c:	e8 ee fc ff ff       	call   c000197f <ld_word>
c0001c91:	66 85 c0             	test   ax,ax
c0001c94:	74 04                	je     c0001c9a <pick_lfn+0x19>
c0001c96:	31 c0                	xor    eax,eax
c0001c98:	eb 5c                	jmp    c0001cf6 <pick_lfn+0x75>
c0001c9a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001c9d:	bd 01 00 00 00       	mov    ebp,0x1
c0001ca2:	83 e1 bf             	and    ecx,0xffffffbf
c0001ca5:	31 ff                	xor    edi,edi
c0001ca7:	49                   	dec    ecx
c0001ca8:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cab:	0f b6 87 40 23 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddcc0]
c0001cb2:	01 f0                	add    eax,esi
c0001cb4:	e8 c6 fc ff ff       	call   c000197f <ld_word>
c0001cb9:	66 85 ed             	test   bp,bp
c0001cbc:	74 11                	je     c0001ccf <pick_lfn+0x4e>
c0001cbe:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cc4:	77 d0                	ja     c0001c96 <pick_lfn+0x15>
c0001cc6:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cca:	89 c5                	mov    ebp,eax
c0001ccc:	41                   	inc    ecx
c0001ccd:	eb 04                	jmp    c0001cd3 <pick_lfn+0x52>
c0001ccf:	66 40                	inc    ax
c0001cd1:	75 c3                	jne    c0001c96 <pick_lfn+0x15>
c0001cd3:	47                   	inc    edi
c0001cd4:	83 ff 0d             	cmp    edi,0xd
c0001cd7:	75 d2                	jne    c0001cab <pick_lfn+0x2a>
c0001cd9:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cdc:	74 13                	je     c0001cf1 <pick_lfn+0x70>
c0001cde:	66 85 ed             	test   bp,bp
c0001ce1:	74 0e                	je     c0001cf1 <pick_lfn+0x70>
c0001ce3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ce9:	77 ab                	ja     c0001c96 <pick_lfn+0x15>
c0001ceb:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001cf1:	b8 01 00 00 00       	mov    eax,0x1
c0001cf6:	5b                   	pop    ebx
c0001cf7:	5e                   	pop    esi
c0001cf8:	5f                   	pop    edi
c0001cf9:	5d                   	pop    ebp
c0001cfa:	c3                   	ret    

c0001cfb <put_lfn>:
c0001cfb:	55                   	push   ebp
c0001cfc:	31 ed                	xor    ebp,ebp
c0001cfe:	57                   	push   edi
c0001cff:	89 d7                	mov    edi,edx
c0001d01:	56                   	push   esi
c0001d02:	31 f6                	xor    esi,esi
c0001d04:	53                   	push   ebx
c0001d05:	83 ec 08             	sub    esp,0x8
c0001d08:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d0b:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d13:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d19:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1f:	31 d2                	xor    edx,edx
c0001d21:	e8 cb fc ff ff       	call   c00019f1 <st_word>
c0001d26:	0f b6 d9             	movzx  ebx,cl
c0001d29:	4b                   	dec    ebx
c0001d2a:	6b db 0d             	imul   ebx,ebx,0xd
c0001d2d:	66 83 fe ff          	cmp    si,0xffff
c0001d31:	74 08                	je     c0001d3b <put_lfn+0x40>
c0001d33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d36:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d3a:	43                   	inc    ebx
c0001d3b:	0f b6 85 40 23 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddcc0]
c0001d42:	0f b7 d6             	movzx  edx,si
c0001d45:	01 f8                	add    eax,edi
c0001d47:	e8 a5 fc ff ff       	call   c00019f1 <st_word>
c0001d4c:	66 85 f6             	test   si,si
c0001d4f:	75 03                	jne    c0001d54 <put_lfn+0x59>
c0001d51:	83 ce ff             	or     esi,0xffffffff
c0001d54:	45                   	inc    ebp
c0001d55:	83 fd 0d             	cmp    ebp,0xd
c0001d58:	75 d3                	jne    c0001d2d <put_lfn+0x32>
c0001d5a:	66 46                	inc    si
c0001d5c:	74 0a                	je     c0001d68 <put_lfn+0x6d>
c0001d5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d61:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d66:	75 09                	jne    c0001d71 <put_lfn+0x76>
c0001d68:	88 c8                	mov    al,cl
c0001d6a:	83 c8 40             	or     eax,0x40
c0001d6d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d75:	88 07                	mov    BYTE PTR [edi],al
c0001d77:	83 c4 08             	add    esp,0x8
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <gen_numname>:
c0001d7f:	57                   	push   edi
c0001d80:	89 cf                	mov    edi,ecx
c0001d82:	56                   	push   esi
c0001d83:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d88:	53                   	push   ebx
c0001d89:	89 c6                	mov    esi,eax
c0001d8b:	83 ec 10             	sub    esp,0x10
c0001d8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001d92:	e8 67 fc ff ff       	call   c00019fe <mem_cpy>
c0001d97:	83 fb 05             	cmp    ebx,0x5
c0001d9a:	76 2d                	jbe    c0001dc9 <gen_numname+0x4a>
c0001d9c:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001d9f:	66 85 c0             	test   ax,ax
c0001da2:	74 25                	je     c0001dc9 <gen_numname+0x4a>
c0001da4:	83 c7 02             	add    edi,0x2
c0001da7:	ba 10 00 00 00       	mov    edx,0x10
c0001dac:	01 db                	add    ebx,ebx
c0001dae:	89 c1                	mov    ecx,eax
c0001db0:	66 d1 e8             	shr    ax,1
c0001db3:	83 e1 01             	and    ecx,0x1
c0001db6:	01 cb                	add    ebx,ecx
c0001db8:	0f ba e3 10          	bt     ebx,0x10
c0001dbc:	73 06                	jae    c0001dc4 <gen_numname+0x45>
c0001dbe:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dc4:	4a                   	dec    edx
c0001dc5:	75 e5                	jne    c0001dac <gen_numname+0x2d>
c0001dc7:	eb d3                	jmp    c0001d9c <gen_numname+0x1d>
c0001dc9:	b8 07 00 00 00       	mov    eax,0x7
c0001dce:	88 d9                	mov    cl,bl
c0001dd0:	83 e1 0f             	and    ecx,0xf
c0001dd3:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dd6:	80 fa 39             	cmp    dl,0x39
c0001dd9:	76 03                	jbe    c0001dde <gen_numname+0x5f>
c0001ddb:	8d 51 37             	lea    edx,[ecx+0x37]
c0001dde:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001de1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001de5:	89 da                	mov    edx,ebx
c0001de7:	c1 ea 04             	shr    edx,0x4
c0001dea:	83 fb 0f             	cmp    ebx,0xf
c0001ded:	76 06                	jbe    c0001df5 <gen_numname+0x76>
c0001def:	89 c8                	mov    eax,ecx
c0001df1:	89 d3                	mov    ebx,edx
c0001df3:	eb d9                	jmp    c0001dce <gen_numname+0x4f>
c0001df5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001dfa:	31 d2                	xor    edx,edx
c0001dfc:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001dff:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e02:	39 ca                	cmp    edx,ecx
c0001e04:	73 18                	jae    c0001e1e <gen_numname+0x9f>
c0001e06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e09:	3c 20                	cmp    al,0x20
c0001e0b:	74 11                	je     c0001e1e <gen_numname+0x9f>
c0001e0d:	e8 41 fc ff ff       	call   c0001a53 <dbc_1st>
c0001e12:	85 c0                	test   eax,eax
c0001e14:	74 05                	je     c0001e1b <gen_numname+0x9c>
c0001e16:	39 d3                	cmp    ebx,edx
c0001e18:	74 04                	je     c0001e1e <gen_numname+0x9f>
c0001e1a:	42                   	inc    edx
c0001e1b:	42                   	inc    edx
c0001e1c:	eb e1                	jmp    c0001dff <gen_numname+0x80>
c0001e1e:	b0 20                	mov    al,0x20
c0001e20:	83 f9 07             	cmp    ecx,0x7
c0001e23:	77 05                	ja     c0001e2a <gen_numname+0xab>
c0001e25:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e29:	41                   	inc    ecx
c0001e2a:	42                   	inc    edx
c0001e2b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e2f:	83 fa 07             	cmp    edx,0x7
c0001e32:	76 ea                	jbe    c0001e1e <gen_numname+0x9f>
c0001e34:	83 c4 10             	add    esp,0x10
c0001e37:	5b                   	pop    ebx
c0001e38:	5e                   	pop    esi
c0001e39:	5f                   	pop    edi
c0001e3a:	c3                   	ret    

c0001e3b <sum_sfn>:
c0001e3b:	31 c9                	xor    ecx,ecx
c0001e3d:	31 d2                	xor    edx,edx
c0001e3f:	d0 ca                	ror    dl,1
c0001e41:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e44:	41                   	inc    ecx
c0001e45:	83 f9 0b             	cmp    ecx,0xb
c0001e48:	75 f5                	jne    c0001e3f <sum_sfn+0x4>
c0001e4a:	88 d0                	mov    al,dl
c0001e4c:	c3                   	ret    

c0001e4d <xdir_sum>:
c0001e4d:	56                   	push   esi
c0001e4e:	31 c9                	xor    ecx,ecx
c0001e50:	53                   	push   ebx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e57:	43                   	inc    ebx
c0001e58:	c1 e3 05             	shl    ebx,0x5
c0001e5b:	83 fa 02             	cmp    edx,0x2
c0001e5e:	74 0b                	je     c0001e6b <xdir_sum+0x1e>
c0001e60:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e64:	66 d1 c9             	ror    cx,1
c0001e67:	01 f1                	add    ecx,esi
c0001e69:	eb 05                	jmp    c0001e70 <xdir_sum+0x23>
c0001e6b:	ba 03 00 00 00       	mov    edx,0x3
c0001e70:	42                   	inc    edx
c0001e71:	39 d3                	cmp    ebx,edx
c0001e73:	77 e6                	ja     c0001e5b <xdir_sum+0xe>
c0001e75:	89 c8                	mov    eax,ecx
c0001e77:	5b                   	pop    ebx
c0001e78:	5e                   	pop    esi
c0001e79:	c3                   	ret    

c0001e7a <xsum32>:
c0001e7a:	d1 ca                	ror    edx,1
c0001e7c:	0f b6 c0             	movzx  eax,al
c0001e7f:	01 d0                	add    eax,edx
c0001e81:	c3                   	ret    

c0001e82 <get_xfileinfo>:
c0001e82:	55                   	push   ebp
c0001e83:	31 c9                	xor    ecx,ecx
c0001e85:	57                   	push   edi
c0001e86:	bd 40 00 00 00       	mov    ebp,0x40
c0001e8b:	56                   	push   esi
c0001e8c:	31 ff                	xor    edi,edi
c0001e8e:	53                   	push   ebx
c0001e8f:	89 c6                	mov    esi,eax
c0001e91:	83 ec 0c             	sub    esp,0xc
c0001e94:	89 d3                	mov    ebx,edx
c0001e96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001e9d:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001ea1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001ea4:	76 6d                	jbe    c0001f13 <get_xfileinfo+0x91>
c0001ea6:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001eac:	76 0b                	jbe    c0001eb9 <get_xfileinfo+0x37>
c0001eae:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001eb2:	bf 01 00 00 00       	mov    edi,0x1
c0001eb7:	eb 63                	jmp    c0001f1c <get_xfileinfo+0x9a>
c0001eb9:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ebf:	75 03                	jne    c0001ec4 <get_xfileinfo+0x42>
c0001ec1:	83 c5 02             	add    ebp,0x2
c0001ec4:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ec7:	83 c5 02             	add    ebp,0x2
c0001eca:	e8 b0 fa ff ff       	call   c000197f <ld_word>
c0001ecf:	ff 04 24             	inc    DWORD PTR [esp]
c0001ed2:	66 85 c9             	test   cx,cx
c0001ed5:	75 0d                	jne    c0001ee4 <get_xfileinfo+0x62>
c0001ed7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001edd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ee2:	76 2b                	jbe    c0001f0f <get_xfileinfo+0x8d>
c0001ee4:	c1 e1 10             	shl    ecx,0x10
c0001ee7:	ba ff 00 00 00       	mov    edx,0xff
c0001eec:	0f b7 c0             	movzx  eax,ax
c0001eef:	29 fa                	sub    edx,edi
c0001ef1:	09 c8                	or     eax,ecx
c0001ef3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001ef7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001efb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001eff:	e8 1b fc ff ff       	call   c0001b1f <put_utf>
c0001f04:	84 c0                	test   al,al
c0001f06:	74 a6                	je     c0001eae <get_xfileinfo+0x2c>
c0001f08:	0f b6 c0             	movzx  eax,al
c0001f0b:	01 c7                	add    edi,eax
c0001f0d:	31 c0                	xor    eax,eax
c0001f0f:	89 c1                	mov    ecx,eax
c0001f11:	eb 8a                	jmp    c0001e9d <get_xfileinfo+0x1b>
c0001f13:	85 ff                	test   edi,edi
c0001f15:	74 97                	je     c0001eae <get_xfileinfo+0x2c>
c0001f17:	66 85 c9             	test   cx,cx
c0001f1a:	75 92                	jne    c0001eae <get_xfileinfo+0x2c>
c0001f1c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f27:	31 d2                	xor    edx,edx
c0001f29:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f2c:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f2f:	80 e1 10             	and    cl,0x10
c0001f32:	75 08                	jne    c0001f3c <get_xfileinfo+0xba>
c0001f34:	8d 46 38             	lea    eax,[esi+0x38]
c0001f37:	e8 68 fa ff ff       	call   c00019a4 <ld_qword>
c0001f3c:	89 03                	mov    DWORD PTR [ebx],eax
c0001f3e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f41:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f44:	e8 36 fa ff ff       	call   c000197f <ld_word>
c0001f49:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f4d:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f50:	e8 2a fa ff ff       	call   c000197f <ld_word>
c0001f55:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f59:	83 c4 0c             	add    esp,0xc
c0001f5c:	5b                   	pop    ebx
c0001f5d:	5e                   	pop    esi
c0001f5e:	5f                   	pop    edi
c0001f5f:	5d                   	pop    ebp
c0001f60:	c3                   	ret    

c0001f61 <get_ldnumber>:
c0001f61:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f63:	85 d2                	test   edx,edx
c0001f65:	74 14                	je     c0001f7b <get_ldnumber+0x1a>
c0001f67:	56                   	push   esi
c0001f68:	53                   	push   ebx
c0001f69:	89 d3                	mov    ebx,edx
c0001f6b:	43                   	inc    ebx
c0001f6c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f6f:	80 f9 1f             	cmp    cl,0x1f
c0001f72:	76 0d                	jbe    c0001f81 <get_ldnumber+0x20>
c0001f74:	80 f9 3a             	cmp    cl,0x3a
c0001f77:	75 f2                	jne    c0001f6b <get_ldnumber+0xa>
c0001f79:	eb 0a                	jmp    c0001f85 <get_ldnumber+0x24>
c0001f7b:	83 c9 ff             	or     ecx,0xffffffff
c0001f7e:	89 c8                	mov    eax,ecx
c0001f80:	c3                   	ret    
c0001f81:	31 c9                	xor    ecx,ecx
c0001f83:	eb 24                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001f85:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f88:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f8b:	80 f9 09             	cmp    cl,0x9
c0001f8e:	77 16                	ja     c0001fa6 <get_ldnumber+0x45>
c0001f90:	83 c2 02             	add    edx,0x2
c0001f93:	83 c9 ff             	or     ecx,0xffffffff
c0001f96:	39 d3                	cmp    ebx,edx
c0001f98:	75 0f                	jne    c0001fa9 <get_ldnumber+0x48>
c0001f9a:	89 f2                	mov    edx,esi
c0001f9c:	89 18                	mov    DWORD PTR [eax],ebx
c0001f9e:	0f be ca             	movsx  ecx,dl
c0001fa1:	83 e9 30             	sub    ecx,0x30
c0001fa4:	eb 03                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001fa6:	83 c9 ff             	or     ecx,0xffffffff
c0001fa9:	89 c8                	mov    eax,ecx
c0001fab:	5b                   	pop    ebx
c0001fac:	5e                   	pop    esi
c0001fad:	c3                   	ret    

c0001fae <crc32>:
c0001fae:	56                   	push   esi
c0001faf:	89 d6                	mov    esi,edx
c0001fb1:	53                   	push   ebx
c0001fb2:	b2 01                	mov    dl,0x1
c0001fb4:	bb 08 00 00 00       	mov    ebx,0x8
c0001fb9:	89 f1                	mov    ecx,esi
c0001fbb:	84 d1                	test   cl,dl
c0001fbd:	0f 95 c1             	setne  cl
c0001fc0:	0f b6 c9             	movzx  ecx,cl
c0001fc3:	31 c1                	xor    ecx,eax
c0001fc5:	89 c8                	mov    eax,ecx
c0001fc7:	d1 e8                	shr    eax,1
c0001fc9:	80 e1 01             	and    cl,0x1
c0001fcc:	74 05                	je     c0001fd3 <crc32+0x25>
c0001fce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fd3:	d1 e2                	shl    edx,1
c0001fd5:	4b                   	dec    ebx
c0001fd6:	75 e1                	jne    c0001fb9 <crc32+0xb>
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	c3                   	ret    

c0001fdb <test_gpt_header>:
c0001fdb:	55                   	push   ebp
c0001fdc:	b9 10 00 00 00       	mov    ecx,0x10
c0001fe1:	57                   	push   edi
c0001fe2:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0001fe7:	56                   	push   esi
c0001fe8:	31 ff                	xor    edi,edi
c0001fea:	53                   	push   ebx
c0001feb:	89 c3                	mov    ebx,eax
c0001fed:	e8 2c fa ff ff       	call   c0001a1e <mem_cmp>
c0001ff2:	85 c0                	test   eax,eax
c0001ff4:	75 55                	jne    c000204b <test_gpt_header+0x70>
c0001ff6:	89 c7                	mov    edi,eax
c0001ff8:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0001ffd:	83 ce ff             	or     esi,0xffffffff
c0002000:	31 d2                	xor    edx,edx
c0002002:	83 fd 03             	cmp    ebp,0x3
c0002005:	76 05                	jbe    c000200c <test_gpt_header+0x31>
c0002007:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000200c:	89 f0                	mov    eax,esi
c000200e:	45                   	inc    ebp
c000200f:	e8 9a ff ff ff       	call   c0001fae <crc32>
c0002014:	83 fd 4c             	cmp    ebp,0x4c
c0002017:	89 c6                	mov    esi,eax
c0002019:	75 e5                	jne    c0002000 <test_gpt_header+0x25>
c000201b:	8d 43 10             	lea    eax,[ebx+0x10]
c000201e:	f7 d6                	not    esi
c0002020:	e8 67 f9 ff ff       	call   c000198c <ld_dword>
c0002025:	39 c6                	cmp    esi,eax
c0002027:	75 22                	jne    c000204b <test_gpt_header+0x70>
c0002029:	8d 43 54             	lea    eax,[ebx+0x54]
c000202c:	e8 5b f9 ff ff       	call   c000198c <ld_dword>
c0002031:	83 c0 80             	add    eax,0xffffff80
c0002034:	75 15                	jne    c000204b <test_gpt_header+0x70>
c0002036:	8d 43 50             	lea    eax,[ebx+0x50]
c0002039:	e8 4e f9 ff ff       	call   c000198c <ld_dword>
c000203e:	3d 80 00 00 00       	cmp    eax,0x80
c0002043:	0f 96 c0             	setbe  al
c0002046:	0f b6 c0             	movzx  eax,al
c0002049:	89 c7                	mov    edi,eax
c000204b:	5b                   	pop    ebx
c000204c:	89 f8                	mov    eax,edi
c000204e:	5e                   	pop    esi
c000204f:	5f                   	pop    edi
c0002050:	5d                   	pop    ebp
c0002051:	c3                   	ret    

c0002052 <make_rand>:
c0002052:	56                   	push   esi
c0002053:	85 c0                	test   eax,eax
c0002055:	53                   	push   ebx
c0002056:	75 05                	jne    c000205d <make_rand+0xb>
c0002058:	b8 01 00 00 00       	mov    eax,0x1
c000205d:	01 d1                	add    ecx,edx
c000205f:	bb 08 00 00 00       	mov    ebx,0x8
c0002064:	89 c6                	mov    esi,eax
c0002066:	d1 e8                	shr    eax,1
c0002068:	83 e6 01             	and    esi,0x1
c000206b:	85 f6                	test   esi,esi
c000206d:	74 05                	je     c0002074 <make_rand+0x22>
c000206f:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002074:	4b                   	dec    ebx
c0002075:	75 ed                	jne    c0002064 <make_rand+0x12>
c0002077:	42                   	inc    edx
c0002078:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000207b:	39 ca                	cmp    edx,ecx
c000207d:	75 e0                	jne    c000205f <make_rand+0xd>
c000207f:	5b                   	pop    ebx
c0002080:	5e                   	pop    esi
c0002081:	c3                   	ret    

c0002082 <validate>:
c0002082:	56                   	push   esi
c0002083:	53                   	push   ebx
c0002084:	89 d6                	mov    esi,edx
c0002086:	51                   	push   ecx
c0002087:	85 c0                	test   eax,eax
c0002089:	75 09                	jne    c0002094 <validate+0x12>
c000208b:	b8 09 00 00 00       	mov    eax,0x9
c0002090:	31 c9                	xor    ecx,ecx
c0002092:	eb 2f                	jmp    c00020c3 <validate+0x41>
c0002094:	89 c3                	mov    ebx,eax
c0002096:	8b 00                	mov    eax,DWORD PTR [eax]
c0002098:	85 c0                	test   eax,eax
c000209a:	74 ef                	je     c000208b <validate+0x9>
c000209c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000209f:	74 ea                	je     c000208b <validate+0x9>
c00020a1:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020a5:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020a9:	75 e0                	jne    c000208b <validate+0x9>
c00020ab:	83 ec 0c             	sub    esp,0xc
c00020ae:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020b2:	50                   	push   eax
c00020b3:	e8 76 f8 ff ff       	call   c000192e <disk_status>
c00020b8:	83 c4 10             	add    esp,0x10
c00020bb:	a8 01                	test   al,0x1
c00020bd:	75 cc                	jne    c000208b <validate+0x9>
c00020bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020c1:	31 c0                	xor    eax,eax
c00020c3:	89 0e                	mov    DWORD PTR [esi],ecx
c00020c5:	5a                   	pop    edx
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	c3                   	ret    

c00020c9 <sync_window>:
c00020c9:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020cd:	0f 84 85 00 00 00    	je     c0002158 <sync_window+0x8f>
c00020d3:	55                   	push   ebp
c00020d4:	8d 68 54             	lea    ebp,[eax+0x54]
c00020d7:	57                   	push   edi
c00020d8:	56                   	push   esi
c00020d9:	53                   	push   ebx
c00020da:	89 c3                	mov    ebx,eax
c00020dc:	83 ec 28             	sub    esp,0x28
c00020df:	6a 01                	push   0x1
c00020e1:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020e4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020e7:	55                   	push   ebp
c00020e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020ec:	50                   	push   eax
c00020ed:	e8 58 f8 ff ff       	call   c000194a <disk_write>
c00020f2:	83 c4 20             	add    esp,0x20
c00020f5:	ba 01 00 00 00       	mov    edx,0x1
c00020fa:	85 c0                	test   eax,eax
c00020fc:	75 50                	jne    c000214e <sync_window+0x85>
c00020fe:	31 ff                	xor    edi,edi
c0002100:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002103:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002107:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000210b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000210e:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002111:	89 c6                	mov    esi,eax
c0002113:	89 d7                	mov    edi,edx
c0002115:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002118:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000211c:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000211f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002123:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002127:	73 23                	jae    c000214c <sync_window+0x83>
c0002129:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000212d:	75 1d                	jne    c000214c <sync_window+0x83>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	6a 01                	push   0x1
c0002134:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002138:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000213c:	52                   	push   edx
c000213d:	50                   	push   eax
c000213e:	55                   	push   ebp
c000213f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002143:	50                   	push   eax
c0002144:	e8 01 f8 ff ff       	call   c000194a <disk_write>
c0002149:	83 c4 20             	add    esp,0x20
c000214c:	31 d2                	xor    edx,edx
c000214e:	83 c4 1c             	add    esp,0x1c
c0002151:	89 d0                	mov    eax,edx
c0002153:	5b                   	pop    ebx
c0002154:	5e                   	pop    esi
c0002155:	5f                   	pop    edi
c0002156:	5d                   	pop    ebp
c0002157:	c3                   	ret    
c0002158:	31 d2                	xor    edx,edx
c000215a:	89 d0                	mov    eax,edx
c000215c:	c3                   	ret    

c000215d <move_window>:
c000215d:	56                   	push   esi
c000215e:	53                   	push   ebx
c000215f:	89 c3                	mov    ebx,eax
c0002161:	83 ec 14             	sub    esp,0x14
c0002164:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002167:	75 07                	jne    c0002170 <move_window+0x13>
c0002169:	31 f6                	xor    esi,esi
c000216b:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000216e:	74 59                	je     c00021c9 <move_window+0x6c>
c0002170:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002174:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002178:	89 d8                	mov    eax,ebx
c000217a:	e8 4a ff ff ff       	call   c00020c9 <sync_window>
c000217f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002183:	89 c6                	mov    esi,eax
c0002185:	85 c0                	test   eax,eax
c0002187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000218b:	75 3c                	jne    c00021c9 <move_window+0x6c>
c000218d:	83 ec 0c             	sub    esp,0xc
c0002190:	8d 43 54             	lea    eax,[ebx+0x54]
c0002193:	6a 01                	push   0x1
c0002195:	51                   	push   ecx
c0002196:	52                   	push   edx
c0002197:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000219b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000219f:	50                   	push   eax
c00021a0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021a4:	50                   	push   eax
c00021a5:	e8 8a f7 ff ff       	call   c0001934 <disk_read>
c00021aa:	83 c4 20             	add    esp,0x20
c00021ad:	85 c0                	test   eax,eax
c00021af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021b7:	74 0a                	je     c00021c3 <move_window+0x66>
c00021b9:	83 ca ff             	or     edx,0xffffffff
c00021bc:	be 01 00 00 00       	mov    esi,0x1
c00021c1:	89 d1                	mov    ecx,edx
c00021c3:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021c6:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021c9:	89 f0                	mov    eax,esi
c00021cb:	83 c4 14             	add    esp,0x14
c00021ce:	5b                   	pop    ebx
c00021cf:	5e                   	pop    esi
c00021d0:	c3                   	ret    

c00021d1 <check_fs>:
c00021d1:	53                   	push   ebx
c00021d2:	89 c3                	mov    ebx,eax
c00021d4:	83 ec 08             	sub    esp,0x8
c00021d7:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021db:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021e2:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021e9:	e8 6f ff ff ff       	call   c000215d <move_window>
c00021ee:	ba 04 00 00 00       	mov    edx,0x4
c00021f3:	85 c0                	test   eax,eax
c00021f5:	0f 85 89 00 00 00    	jne    c0002284 <check_fs+0xb3>
c00021fb:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002201:	e8 79 f7 ff ff       	call   c000197f <ld_word>
c0002206:	ba 03 00 00 00       	mov    edx,0x3
c000220b:	66 3d 55 aa          	cmp    ax,0xaa55
c000220f:	75 73                	jne    c0002284 <check_fs+0xb3>
c0002211:	ba 60 23 02 c0       	mov    edx,0xc0022360
c0002216:	8d 43 54             	lea    eax,[ebx+0x54]
c0002219:	b9 0b 00 00 00       	mov    ecx,0xb
c000221e:	e8 fb f7 ff ff       	call   c0001a1e <mem_cmp>
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	74 58                	je     c0002284 <check_fs+0xb3>
c000222c:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000222f:	8d 50 18             	lea    edx,[eax+0x18]
c0002232:	80 fa 01             	cmp    dl,0x1
c0002235:	76 09                	jbe    c0002240 <check_fs+0x6f>
c0002237:	ba 02 00 00 00       	mov    edx,0x2
c000223c:	3c eb                	cmp    al,0xeb
c000223e:	75 44                	jne    c0002284 <check_fs+0xb3>
c0002240:	ba b8 4b 02 c0       	mov    edx,0xc0024bb8
c0002245:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000224b:	b9 03 00 00 00       	mov    ecx,0x3
c0002250:	e8 c9 f7 ff ff       	call   c0001a1e <mem_cmp>
c0002255:	31 d2                	xor    edx,edx
c0002257:	85 c0                	test   eax,eax
c0002259:	74 29                	je     c0002284 <check_fs+0xb3>
c000225b:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c0002260:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002266:	b9 05 00 00 00       	mov    ecx,0x5
c000226b:	e8 ae f7 ff ff       	call   c0001a1e <mem_cmp>
c0002270:	31 d2                	xor    edx,edx
c0002272:	85 c0                	test   eax,eax
c0002274:	74 0e                	je     c0002284 <check_fs+0xb3>
c0002276:	31 d2                	xor    edx,edx
c0002278:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000227f:	0f 95 c2             	setne  dl
c0002282:	01 d2                	add    edx,edx
c0002284:	89 d0                	mov    eax,edx
c0002286:	83 c4 08             	add    esp,0x8
c0002289:	5b                   	pop    ebx
c000228a:	c3                   	ret    

c000228b <find_volume>:
c000228b:	55                   	push   ebp
c000228c:	31 c9                	xor    ecx,ecx
c000228e:	57                   	push   edi
c000228f:	56                   	push   esi
c0002290:	89 d6                	mov    esi,edx
c0002292:	53                   	push   ebx
c0002293:	31 d2                	xor    edx,edx
c0002295:	83 ec 3c             	sub    esp,0x3c
c0002298:	89 c3                	mov    ebx,eax
c000229a:	e8 32 ff ff ff       	call   c00021d1 <check_fs>
c000229f:	83 f8 02             	cmp    eax,0x2
c00022a2:	74 0e                	je     c00022b2 <find_volume+0x27>
c00022a4:	0f 87 5d 01 00 00    	ja     c0002407 <find_volume+0x17c>
c00022aa:	85 f6                	test   esi,esi
c00022ac:	0f 84 55 01 00 00    	je     c0002407 <find_volume+0x17c>
c00022b2:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022b9:	0f 85 dd 00 00 00    	jne    c000239c <find_volume+0x111>
c00022bf:	31 c9                	xor    ecx,ecx
c00022c1:	ba 01 00 00 00       	mov    edx,0x1
c00022c6:	89 d8                	mov    eax,ebx
c00022c8:	e8 90 fe ff ff       	call   c000215d <move_window>
c00022cd:	85 c0                	test   eax,eax
c00022cf:	74 0a                	je     c00022db <find_volume+0x50>
c00022d1:	b8 04 00 00 00       	mov    eax,0x4
c00022d6:	e9 2c 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022db:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022de:	89 e8                	mov    eax,ebp
c00022e0:	e8 f6 fc ff ff       	call   c0001fdb <test_gpt_header>
c00022e5:	85 c0                	test   eax,eax
c00022e7:	75 0a                	jne    c00022f3 <find_volume+0x68>
c00022e9:	b8 03 00 00 00       	mov    eax,0x3
c00022ee:	e9 14 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022f3:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00022f9:	e8 8e f6 ff ff       	call   c000198c <ld_dword>
c00022fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002302:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002308:	e8 97 f6 ff ff       	call   c00019a4 <ld_qword>
c000230d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000231d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002325:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002329:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000232d:	74 ba                	je     c00022e9 <find_volume+0x5e>
c000232f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002333:	31 c9                	xor    ecx,ecx
c0002335:	c1 e7 07             	shl    edi,0x7
c0002338:	89 d8                	mov    eax,ebx
c000233a:	89 fa                	mov    edx,edi
c000233c:	c1 ea 09             	shr    edx,0x9
c000233f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002343:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002347:	e8 11 fe ff ff       	call   c000215d <move_window>
c000234c:	85 c0                	test   eax,eax
c000234e:	75 81                	jne    c00022d1 <find_volume+0x46>
c0002350:	81 e7 80 01 00 00    	and    edi,0x180
c0002356:	b9 10 00 00 00       	mov    ecx,0x10
c000235b:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000235f:	ba 50 23 02 c0       	mov    edx,0xc0022350
c0002364:	e8 b5 f6 ff ff       	call   c0001a1e <mem_cmp>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 29                	jne    c0002396 <find_volume+0x10b>
c000236d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002371:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002375:	e8 2a f6 ff ff       	call   c00019a4 <ld_qword>
c000237a:	89 d1                	mov    ecx,edx
c000237c:	89 c2                	mov    edx,eax
c000237e:	89 d8                	mov    eax,ebx
c0002380:	e8 4c fe ff ff       	call   c00021d1 <check_fs>
c0002385:	85 f6                	test   esi,esi
c0002387:	75 07                	jne    c0002390 <find_volume+0x105>
c0002389:	83 f8 01             	cmp    eax,0x1
c000238c:	77 08                	ja     c0002396 <find_volume+0x10b>
c000238e:	eb 77                	jmp    c0002407 <find_volume+0x17c>
c0002390:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002394:	74 71                	je     c0002407 <find_volume+0x17c>
c0002396:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000239a:	eb 89                	jmp    c0002325 <find_volume+0x9a>
c000239c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023a0:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023a6:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023b0:	89 cd                	mov    ebp,ecx
c00023b2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023b6:	89 f8                	mov    eax,edi
c00023b8:	83 c7 10             	add    edi,0x10
c00023bb:	e8 cc f5 ff ff       	call   c000198c <ld_dword>
c00023c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023c4:	89 01                	mov    DWORD PTR [ecx],eax
c00023c6:	83 c1 04             	add    ecx,0x4
c00023c9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023cd:	75 e3                	jne    c00023b2 <find_volume+0x127>
c00023cf:	31 ff                	xor    edi,edi
c00023d1:	85 f6                	test   esi,esi
c00023d3:	74 03                	je     c00023d8 <find_volume+0x14d>
c00023d5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023d8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023dc:	85 d2                	test   edx,edx
c00023de:	74 14                	je     c00023f4 <find_volume+0x169>
c00023e0:	31 c9                	xor    ecx,ecx
c00023e2:	89 d8                	mov    eax,ebx
c00023e4:	e8 e8 fd ff ff       	call   c00021d1 <check_fs>
c00023e9:	83 f8 01             	cmp    eax,0x1
c00023ec:	76 19                	jbe    c0002407 <find_volume+0x17c>
c00023ee:	85 f6                	test   esi,esi
c00023f0:	74 0f                	je     c0002401 <find_volume+0x176>
c00023f2:	eb 13                	jmp    c0002407 <find_volume+0x17c>
c00023f4:	85 f6                	test   esi,esi
c00023f6:	0f 85 ed fe ff ff    	jne    c00022e9 <find_volume+0x5e>
c00023fc:	b8 03 00 00 00       	mov    eax,0x3
c0002401:	47                   	inc    edi
c0002402:	83 ff 03             	cmp    edi,0x3
c0002405:	76 d1                	jbe    c00023d8 <find_volume+0x14d>
c0002407:	83 c4 3c             	add    esp,0x3c
c000240a:	5b                   	pop    ebx
c000240b:	5e                   	pop    esi
c000240c:	5f                   	pop    edi
c000240d:	5d                   	pop    ebp
c000240e:	c3                   	ret    

c000240f <mount_volume>:
c000240f:	55                   	push   ebp
c0002410:	57                   	push   edi
c0002411:	89 cf                	mov    edi,ecx
c0002413:	56                   	push   esi
c0002414:	53                   	push   ebx
c0002415:	bb 0b 00 00 00       	mov    ebx,0xb
c000241a:	83 ec 3c             	sub    esp,0x3c
c000241d:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002423:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002427:	e8 35 fb ff ff       	call   c0001f61 <get_ldnumber>
c000242c:	85 c0                	test   eax,eax
c000242e:	0f 88 3a 05 00 00    	js     c000296e <mount_volume+0x55f>
c0002434:	8b 2c 85 60 62 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9da0]
c000243b:	89 c6                	mov    esi,eax
c000243d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002442:	85 ed                	test   ebp,ebp
c0002444:	0f 84 24 05 00 00    	je     c000296e <mount_volume+0x55f>
c000244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000244e:	83 e7 fe             	and    edi,0xfffffffe
c0002451:	89 2a                	mov    DWORD PTR [edx],ebp
c0002453:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002457:	74 32                	je     c000248b <mount_volume+0x7c>
c0002459:	83 ec 0c             	sub    esp,0xc
c000245c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002460:	50                   	push   eax
c0002461:	e8 c8 f4 ff ff       	call   c000192e <disk_status>
c0002466:	83 c4 10             	add    esp,0x10
c0002469:	a8 01                	test   al,0x1
c000246b:	75 1e                	jne    c000248b <mount_volume+0x7c>
c000246d:	31 db                	xor    ebx,ebx
c000246f:	89 f9                	mov    ecx,edi
c0002471:	84 c9                	test   cl,cl
c0002473:	0f 84 f5 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002479:	a8 04                	test   al,0x4
c000247b:	0f 84 ed 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002481:	bb 0a 00 00 00       	mov    ebx,0xa
c0002486:	e9 e3 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c000248b:	83 ec 0c             	sub    esp,0xc
c000248e:	89 f0                	mov    eax,esi
c0002490:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002494:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002497:	0f b6 f0             	movzx  esi,al
c000249a:	bb 03 00 00 00       	mov    ebx,0x3
c000249f:	56                   	push   esi
c00024a0:	e8 8c f4 ff ff       	call   c0001931 <disk_initialize>
c00024a5:	83 c4 10             	add    esp,0x10
c00024a8:	a8 01                	test   al,0x1
c00024aa:	0f 85 be 04 00 00    	jne    c000296e <mount_volume+0x55f>
c00024b0:	89 f9                	mov    ecx,edi
c00024b2:	84 c9                	test   cl,cl
c00024b4:	74 04                	je     c00024ba <mount_volume+0xab>
c00024b6:	a8 04                	test   al,0x4
c00024b8:	75 c7                	jne    c0002481 <mount_volume+0x72>
c00024ba:	31 d2                	xor    edx,edx
c00024bc:	89 e8                	mov    eax,ebp
c00024be:	e8 c8 fd ff ff       	call   c000228b <find_volume>
c00024c3:	83 f8 04             	cmp    eax,0x4
c00024c6:	75 0a                	jne    c00024d2 <mount_volume+0xc3>
c00024c8:	bb 01 00 00 00       	mov    ebx,0x1
c00024cd:	e9 9c 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024d2:	83 f8 01             	cmp    eax,0x1
c00024d5:	76 0a                	jbe    c00024e1 <mount_volume+0xd2>
c00024d7:	bb 0d 00 00 00       	mov    ebx,0xd
c00024dc:	e9 8d 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024e1:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024e4:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024ef:	75 17                	jne    c0002508 <mount_volume+0xf9>
c00024f1:	b8 0b 00 00 00       	mov    eax,0xb
c00024f6:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00024fb:	75 da                	jne    c00024d7 <mount_volume+0xc8>
c00024fd:	40                   	inc    eax
c00024fe:	83 f8 40             	cmp    eax,0x40
c0002501:	75 f3                	jne    c00024f6 <mount_volume+0xe7>
c0002503:	e9 5a 02 00 00       	jmp    c0002762 <mount_volume+0x353>
c0002508:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000250b:	e8 6f f4 ff ff       	call   c000197f <ld_word>
c0002510:	66 3d 00 02          	cmp    ax,0x200
c0002514:	75 c1                	jne    c00024d7 <mount_volume+0xc8>
c0002516:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002519:	e8 61 f4 ff ff       	call   c000197f <ld_word>
c000251e:	0f b7 c0             	movzx  eax,ax
c0002521:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002525:	85 c0                	test   eax,eax
c0002527:	75 0c                	jne    c0002535 <mount_volume+0x126>
c0002529:	8d 45 78             	lea    eax,[ebp+0x78]
c000252c:	e8 5b f4 ff ff       	call   c000198c <ld_dword>
c0002531:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002539:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000253c:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000253f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002543:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002546:	48                   	dec    eax
c0002547:	3c 01                	cmp    al,0x1
c0002549:	77 8c                	ja     c00024d7 <mount_volume+0xc8>
c000254b:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000254f:	89 c3                	mov    ebx,eax
c0002551:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002555:	66 85 c0             	test   ax,ax
c0002558:	0f 84 79 ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c000255e:	8d 40 ff             	lea    eax,[eax-0x1]
c0002561:	85 d8                	test   eax,ebx
c0002563:	0f 85 6e ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002569:	8d 45 65             	lea    eax,[ebp+0x65]
c000256c:	e8 0e f4 ff ff       	call   c000197f <ld_word>
c0002571:	89 c7                	mov    edi,eax
c0002573:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002577:	a8 0f                	test   al,0xf
c0002579:	0f 85 58 ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c000257f:	8d 45 67             	lea    eax,[ebp+0x67]
c0002582:	e8 f8 f3 ff ff       	call   c000197f <ld_word>
c0002587:	0f b7 f0             	movzx  esi,ax
c000258a:	85 f6                	test   esi,esi
c000258c:	75 0a                	jne    c0002598 <mount_volume+0x189>
c000258e:	8d 45 74             	lea    eax,[ebp+0x74]
c0002591:	e8 f6 f3 ff ff       	call   c000198c <ld_dword>
c0002596:	89 c6                	mov    esi,eax
c0002598:	8d 45 62             	lea    eax,[ebp+0x62]
c000259b:	e8 df f3 ff ff       	call   c000197f <ld_word>
c00025a0:	66 85 c0             	test   ax,ax
c00025a3:	0f 84 2e ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c00025a9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025ae:	0f b7 c8             	movzx  ecx,ax
c00025b1:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025ba:	89 fa                	mov    edx,edi
c00025bc:	66 c1 ea 04          	shr    dx,0x4
c00025c0:	0f b7 d2             	movzx  edx,dx
c00025c3:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025c7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025ce:	39 c6                	cmp    esi,eax
c00025d0:	0f 82 01 ff ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025d6:	29 c6                	sub    esi,eax
c00025d8:	31 d2                	xor    edx,edx
c00025da:	89 f0                	mov    eax,esi
c00025dc:	f7 f3                	div    ebx
c00025de:	39 de                	cmp    esi,ebx
c00025e0:	0f 82 f1 fe ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025e6:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025eb:	0f 87 e6 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00025f1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025f6:	0f 86 63 03 00 00    	jbe    c000295f <mount_volume+0x550>
c00025fc:	bb 03 00 00 00       	mov    ebx,0x3
c0002601:	8d 70 02             	lea    esi,[eax+0x2]
c0002604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000260f:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002612:	31 d2                	xor    edx,edx
c0002614:	89 c8                	mov    eax,ecx
c0002616:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002619:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000261d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002621:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002625:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002629:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000262f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002633:	31 d2                	xor    edx,edx
c0002635:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002639:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000263d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002640:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002643:	83 fb 03             	cmp    ebx,0x3
c0002646:	75 2b                	jne    c0002673 <mount_volume+0x264>
c0002648:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000264b:	e8 2f f3 ff ff       	call   c000197f <ld_word>
c0002650:	66 09 c7             	or     di,ax
c0002653:	0f 85 7e fe ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002659:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	e8 25 f3 ff ff       	call   c000198c <ld_dword>
c0002667:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000266e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002671:	eb 30                	jmp    c00026a3 <mount_volume+0x294>
c0002673:	66 85 ff             	test   di,di
c0002676:	0f 84 5b fe ff ff    	je     c00024d7 <mount_volume+0xc8>
c000267c:	31 d2                	xor    edx,edx
c000267e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002682:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002686:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000268a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000268d:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002690:	83 fb 02             	cmp    ebx,0x2
c0002693:	75 04                	jne    c0002699 <mount_volume+0x28a>
c0002695:	01 f6                	add    esi,esi
c0002697:	eb 0a                	jmp    c00026a3 <mount_volume+0x294>
c0002699:	8d 04 76             	lea    eax,[esi+esi*2]
c000269c:	83 e6 01             	and    esi,0x1
c000269f:	d1 e8                	shr    eax,1
c00026a1:	01 c6                	add    esi,eax
c00026a3:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026a9:	c1 ee 09             	shr    esi,0x9
c00026ac:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b0:	0f 87 21 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00026b6:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026bd:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026c4:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026c8:	83 fb 03             	cmp    ebx,0x3
c00026cb:	75 7a                	jne    c0002747 <mount_volume+0x338>
c00026cd:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d3:	e8 a7 f2 ff ff       	call   c000197f <ld_word>
c00026d8:	66 48                	dec    ax
c00026da:	75 6b                	jne    c0002747 <mount_volume+0x338>
c00026dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026e4:	83 c2 01             	add    edx,0x1
c00026e7:	89 e8                	mov    eax,ebp
c00026e9:	83 d1 00             	adc    ecx,0x0
c00026ec:	e8 6c fa ff ff       	call   c000215d <move_window>
c00026f1:	85 c0                	test   eax,eax
c00026f3:	75 52                	jne    c0002747 <mount_volume+0x338>
c00026f5:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026f9:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00026ff:	e8 7b f2 ff ff       	call   c000197f <ld_word>
c0002704:	66 3d 55 aa          	cmp    ax,0xaa55
c0002708:	75 3d                	jne    c0002747 <mount_volume+0x338>
c000270a:	8d 45 54             	lea    eax,[ebp+0x54]
c000270d:	e8 7a f2 ff ff       	call   c000198c <ld_dword>
c0002712:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002717:	75 2e                	jne    c0002747 <mount_volume+0x338>
c0002719:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000271f:	e8 68 f2 ff ff       	call   c000198c <ld_dword>
c0002724:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002729:	75 1c                	jne    c0002747 <mount_volume+0x338>
c000272b:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002731:	e8 56 f2 ff ff       	call   c000198c <ld_dword>
c0002736:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002739:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000273f:	e8 48 f2 ff ff       	call   c000198c <ld_dword>
c0002744:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002747:	66 a1 40 62 02 c0    	mov    ax,ds:0xc0026240
c000274d:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002750:	40                   	inc    eax
c0002751:	31 db                	xor    ebx,ebx
c0002753:	66 a3 40 62 02 c0    	mov    ds:0xc0026240,ax
c0002759:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000275d:	e9 0c 02 00 00       	jmp    c000296e <mount_volume+0x55f>
c0002762:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002768:	e8 12 f2 ff ff       	call   c000197f <ld_word>
c000276d:	66 3d 00 01          	cmp    ax,0x100
c0002771:	0f 85 60 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002777:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000277e:	0f 85 53 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002784:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000278a:	e8 15 f2 ff ff       	call   c00019a4 <ld_qword>
c000278f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002793:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002797:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279d:	e8 ea f1 ff ff       	call   c000198c <ld_dword>
c00027a2:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027a5:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ab:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ae:	fe c8                	dec    al
c00027b0:	0f 85 21 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c00027b6:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027bd:	bb 01 00 00 00       	mov    ebx,0x1
c00027c2:	d3 e3                	shl    ebx,cl
c00027c4:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027c8:	66 85 db             	test   bx,bx
c00027cb:	0f 84 06 fd ff ff    	je     c00024d7 <mount_volume+0xc8>
c00027d1:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027d7:	e8 b0 f1 ff ff       	call   c000198c <ld_dword>
c00027dc:	89 c6                	mov    esi,eax
c00027de:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e3:	0f 87 ee fc ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00027e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027ed:	8d 40 02             	lea    eax,[eax+0x2]
c00027f0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027f3:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fa:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fd:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002803:	e8 84 f1 ff ff       	call   c000198c <ld_dword>
c0002808:	31 d2                	xor    edx,edx
c000280a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002816:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000281a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002820:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002826:	e8 61 f1 ff ff       	call   c000198c <ld_dword>
c000282b:	31 d2                	xor    edx,edx
c000282d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002831:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002835:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002839:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000283c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000283f:	0f b7 c3             	movzx  eax,bx
c0002842:	31 d2                	xor    edx,edx
c0002844:	0f af f0             	imul   esi,eax
c0002847:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000284b:	89 f0                	mov    eax,esi
c000284d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002851:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002855:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002859:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000285d:	39 c1                	cmp    ecx,eax
c000285f:	89 df                	mov    edi,ebx
c0002861:	19 d7                	sbb    edi,edx
c0002863:	0f 82 6e fc ff ff    	jb     c00024d7 <mount_volume+0xc8>
c0002869:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000286f:	31 db                	xor    ebx,ebx
c0002871:	e8 16 f1 ff ff       	call   c000198c <ld_dword>
c0002876:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000287d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002880:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002888:	85 db                	test   ebx,ebx
c000288a:	75 39                	jne    c00028c5 <mount_volume+0x4b6>
c000288c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002890:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002894:	0f 86 3d fc ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c000289a:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000289d:	31 ff                	xor    edi,edi
c000289f:	89 e8                	mov    eax,ebp
c00028a1:	e8 72 f3 ff ff       	call   c0001c18 <clst2sect>
c00028a6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028aa:	01 c6                	add    esi,eax
c00028ac:	89 e8                	mov    eax,ebp
c00028ae:	11 d7                	adc    edi,edx
c00028b0:	89 f2                	mov    edx,esi
c00028b2:	89 f9                	mov    ecx,edi
c00028b4:	e8 a4 f8 ff ff       	call   c000215d <move_window>
c00028b9:	85 c0                	test   eax,eax
c00028bb:	0f 85 07 fc ff ff    	jne    c00024c8 <mount_volume+0xb9>
c00028c1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028c5:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028ca:	74 0b                	je     c00028d7 <mount_volume+0x4c8>
c00028cc:	83 c3 20             	add    ebx,0x20
c00028cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028d5:	eb b1                	jmp    c0002888 <mount_volume+0x479>
c00028d7:	8d 75 54             	lea    esi,[ebp+0x54]
c00028da:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028de:	e8 a9 f0 ff ff       	call   c000198c <ld_dword>
c00028e3:	89 c3                	mov    ebx,eax
c00028e5:	83 f8 01             	cmp    eax,0x1
c00028e8:	0f 86 e9 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028ee:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f1:	0f 86 e0 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028f7:	8d 53 fe             	lea    edx,[ebx-0x2]
c00028fa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00028fe:	0f af c2             	imul   eax,edx
c0002901:	31 d2                	xor    edx,edx
c0002903:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002906:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002909:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000290c:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000290f:	31 c9                	xor    ecx,ecx
c0002911:	89 da                	mov    edx,ebx
c0002913:	89 e8                	mov    eax,ebp
c0002915:	c1 ea 07             	shr    edx,0x7
c0002918:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000291b:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000291e:	e8 3a f8 ff ff       	call   c000215d <move_window>
c0002923:	85 c0                	test   eax,eax
c0002925:	0f 85 9d fb ff ff    	jne    c00024c8 <mount_volume+0xb9>
c000292b:	89 d8                	mov    eax,ebx
c000292d:	83 e0 7f             	and    eax,0x7f
c0002930:	8d 04 86             	lea    eax,[esi+eax*4]
c0002933:	e8 54 f0 ff ff       	call   c000198c <ld_dword>
c0002938:	83 f8 ff             	cmp    eax,0xffffffff
c000293b:	74 0a                	je     c0002947 <mount_volume+0x538>
c000293d:	43                   	inc    ebx
c000293e:	39 d8                	cmp    eax,ebx
c0002940:	74 cd                	je     c000290f <mount_volume+0x500>
c0002942:	e9 90 fb ff ff       	jmp    c00024d7 <mount_volume+0xc8>
c0002947:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000294e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002955:	bb 04 00 00 00       	mov    ebx,0x4
c000295a:	e9 e8 fd ff ff       	jmp    c0002747 <mount_volume+0x338>
c000295f:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002964:	19 db                	sbb    ebx,ebx
c0002966:	83 c3 02             	add    ebx,0x2
c0002969:	e9 93 fc ff ff       	jmp    c0002601 <mount_volume+0x1f2>
c000296e:	83 c4 3c             	add    esp,0x3c
c0002971:	89 d8                	mov    eax,ebx
c0002973:	5b                   	pop    ebx
c0002974:	5e                   	pop    esi
c0002975:	5f                   	pop    edi
c0002976:	5d                   	pop    ebp
c0002977:	c3                   	ret    

c0002978 <find_bitmap>:
c0002978:	55                   	push   ebp
c0002979:	57                   	push   edi
c000297a:	89 c7                	mov    edi,eax
c000297c:	56                   	push   esi
c000297d:	8d 72 fe             	lea    esi,[edx-0x2]
c0002980:	53                   	push   ebx
c0002981:	83 ec 1c             	sub    esp,0x1c
c0002984:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002987:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000298b:	83 e8 02             	sub    eax,0x2
c000298e:	39 f0                	cmp    eax,esi
c0002990:	77 02                	ja     c0002994 <find_bitmap+0x1c>
c0002992:	31 f6                	xor    esi,esi
c0002994:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002998:	89 f3                	mov    ebx,esi
c000299a:	31 ed                	xor    ebp,ebp
c000299c:	31 c9                	xor    ecx,ecx
c000299e:	89 da                	mov    edx,ebx
c00029a0:	89 f8                	mov    eax,edi
c00029a2:	c1 ea 0c             	shr    edx,0xc
c00029a5:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029a8:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ab:	e8 ad f7 ff ff       	call   c000215d <move_window>
c00029b0:	85 c0                	test   eax,eax
c00029b2:	75 68                	jne    c0002a1c <find_bitmap+0xa4>
c00029b4:	89 da                	mov    edx,ebx
c00029b6:	89 d9                	mov    ecx,ebx
c00029b8:	c1 ea 03             	shr    edx,0x3
c00029bb:	83 e1 07             	and    ecx,0x7
c00029be:	b8 01 00 00 00       	mov    eax,0x1
c00029c3:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029c9:	d3 e0                	shl    eax,cl
c00029cb:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029ce:	83 e9 02             	sub    ecx,0x2
c00029d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029d5:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029d9:	43                   	inc    ebx
c00029da:	21 c1                	and    ecx,eax
c00029dc:	d1 e0                	shl    eax,1
c00029de:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e2:	77 09                	ja     c00029ed <find_bitmap+0x75>
c00029e4:	31 db                	xor    ebx,ebx
c00029e6:	ba 00 02 00 00       	mov    edx,0x200
c00029eb:	31 c0                	xor    eax,eax
c00029ed:	84 c9                	test   cl,cl
c00029ef:	75 10                	jne    c0002a01 <find_bitmap+0x89>
c00029f1:	45                   	inc    ebp
c00029f2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029f6:	75 0f                	jne    c0002a07 <find_bitmap+0x8f>
c00029f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029fc:	83 c0 02             	add    eax,0x2
c00029ff:	eb 22                	jmp    c0002a23 <find_bitmap+0xab>
c0002a01:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a05:	31 ed                	xor    ebp,ebp
c0002a07:	39 de                	cmp    esi,ebx
c0002a09:	74 16                	je     c0002a21 <find_bitmap+0xa9>
c0002a0b:	84 c0                	test   al,al
c0002a0d:	75 c6                	jne    c00029d5 <find_bitmap+0x5d>
c0002a0f:	42                   	inc    edx
c0002a10:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a16:	77 84                	ja     c000299c <find_bitmap+0x24>
c0002a18:	b0 01                	mov    al,0x1
c0002a1a:	eb b9                	jmp    c00029d5 <find_bitmap+0x5d>
c0002a1c:	83 c8 ff             	or     eax,0xffffffff
c0002a1f:	eb 02                	jmp    c0002a23 <find_bitmap+0xab>
c0002a21:	31 c0                	xor    eax,eax
c0002a23:	83 c4 1c             	add    esp,0x1c
c0002a26:	5b                   	pop    ebx
c0002a27:	5e                   	pop    esi
c0002a28:	5f                   	pop    edi
c0002a29:	5d                   	pop    ebp
c0002a2a:	c3                   	ret    

c0002a2b <change_bitmap>:
c0002a2b:	55                   	push   ebp
c0002a2c:	89 cd                	mov    ebp,ecx
c0002a2e:	57                   	push   edi
c0002a2f:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a32:	56                   	push   esi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	53                   	push   ebx
c0002a36:	89 c8                	mov    eax,ecx
c0002a38:	83 ec 1c             	sub    esp,0x1c
c0002a3b:	31 d2                	xor    edx,edx
c0002a3d:	89 ce                	mov    esi,ecx
c0002a3f:	c1 e8 0c             	shr    eax,0xc
c0002a42:	bb 01 00 00 00       	mov    ebx,0x1
c0002a47:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4a:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a4d:	c1 ee 03             	shr    esi,0x3
c0002a50:	83 e1 07             	and    ecx,0x7
c0002a53:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a59:	d3 e3                	shl    ebx,cl
c0002a5b:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a5f:	89 c1                	mov    ecx,eax
c0002a61:	89 d3                	mov    ebx,edx
c0002a63:	83 c1 01             	add    ecx,0x1
c0002a66:	83 d3 00             	adc    ebx,0x0
c0002a69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a71:	89 d1                	mov    ecx,edx
c0002a73:	89 c2                	mov    edx,eax
c0002a75:	89 f8                	mov    eax,edi
c0002a77:	e8 e1 f6 ff ff       	call   c000215d <move_window>
c0002a7c:	89 c1                	mov    ecx,eax
c0002a7e:	85 c0                	test   eax,eax
c0002a80:	75 48                	jne    c0002aca <change_bitmap+0x9f>
c0002a82:	31 d2                	xor    edx,edx
c0002a84:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a88:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a8c:	0f 95 c2             	setne  dl
c0002a8f:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a93:	74 3c                	je     c0002ad1 <change_bitmap+0xa6>
c0002a95:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002a99:	4d                   	dec    ebp
c0002a9a:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002a9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa2:	74 32                	je     c0002ad6 <change_bitmap+0xab>
c0002aa4:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aa8:	75 d8                	jne    c0002a82 <change_bitmap+0x57>
c0002aaa:	8d 46 01             	lea    eax,[esi+0x1]
c0002aad:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab2:	89 c3                	mov    ebx,eax
c0002ab4:	31 f6                	xor    esi,esi
c0002ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002abe:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ac4:	74 99                	je     c0002a5f <change_bitmap+0x34>
c0002ac6:	89 de                	mov    esi,ebx
c0002ac8:	eb b8                	jmp    c0002a82 <change_bitmap+0x57>
c0002aca:	b9 01 00 00 00       	mov    ecx,0x1
c0002acf:	eb 05                	jmp    c0002ad6 <change_bitmap+0xab>
c0002ad1:	b9 02 00 00 00       	mov    ecx,0x2
c0002ad6:	83 c4 1c             	add    esp,0x1c
c0002ad9:	89 c8                	mov    eax,ecx
c0002adb:	5b                   	pop    ebx
c0002adc:	5e                   	pop    esi
c0002add:	5f                   	pop    edi
c0002ade:	5d                   	pop    ebp
c0002adf:	c3                   	ret    

c0002ae0 <put_fat>:
c0002ae0:	83 fa 01             	cmp    edx,0x1
c0002ae3:	0f 86 7b 01 00 00    	jbe    c0002c64 <put_fat+0x184>
c0002ae9:	55                   	push   ebp
c0002aea:	57                   	push   edi
c0002aeb:	89 cf                	mov    edi,ecx
c0002aed:	56                   	push   esi
c0002aee:	b9 02 00 00 00       	mov    ecx,0x2
c0002af3:	53                   	push   ebx
c0002af4:	89 c6                	mov    esi,eax
c0002af6:	83 ec 1c             	sub    esp,0x1c
c0002af9:	89 d3                	mov    ebx,edx
c0002afb:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002afe:	0f 86 68 01 00 00    	jbe    c0002c6c <put_fat+0x18c>
c0002b04:	8a 00                	mov    al,BYTE PTR [eax]
c0002b06:	3c 02                	cmp    al,0x2
c0002b08:	0f 84 c7 00 00 00    	je     c0002bd5 <put_fat+0xf5>
c0002b0e:	77 09                	ja     c0002b19 <put_fat+0x39>
c0002b10:	fe c8                	dec    al
c0002b12:	74 17                	je     c0002b2b <put_fat+0x4b>
c0002b14:	e9 53 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b19:	b9 02 00 00 00       	mov    ecx,0x2
c0002b1e:	3c 04                	cmp    al,0x4
c0002b20:	0f 86 e1 00 00 00    	jbe    c0002c07 <put_fat+0x127>
c0002b26:	e9 41 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b2b:	89 d5                	mov    ebp,edx
c0002b2d:	31 c9                	xor    ecx,ecx
c0002b2f:	d1 ed                	shr    ebp,1
c0002b31:	89 f0                	mov    eax,esi
c0002b33:	01 d5                	add    ebp,edx
c0002b35:	89 ea                	mov    edx,ebp
c0002b37:	c1 ea 09             	shr    edx,0x9
c0002b3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b40:	e8 18 f6 ff ff       	call   c000215d <move_window>
c0002b45:	89 c1                	mov    ecx,eax
c0002b47:	85 c0                	test   eax,eax
c0002b49:	0f 85 1d 01 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002b4f:	8d 46 54             	lea    eax,[esi+0x54]
c0002b52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b56:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b59:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b63:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b67:	89 f8                	mov    eax,edi
c0002b69:	83 e3 01             	and    ebx,0x1
c0002b6c:	74 0d                	je     c0002b7b <put_fat+0x9b>
c0002b6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b71:	89 fa                	mov    edx,edi
c0002b73:	83 e0 0f             	and    eax,0xf
c0002b76:	c1 e2 04             	shl    edx,0x4
c0002b79:	09 d0                	or     eax,edx
c0002b7b:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b82:	31 c9                	xor    ecx,ecx
c0002b84:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b88:	c1 ea 09             	shr    edx,0x9
c0002b8b:	89 f0                	mov    eax,esi
c0002b8d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b90:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b93:	e8 c5 f5 ff ff       	call   c000215d <move_window>
c0002b98:	89 c1                	mov    ecx,eax
c0002b9a:	85 c0                	test   eax,eax
c0002b9c:	0f 85 ca 00 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002ba2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ba6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bac:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb0:	85 db                	test   ebx,ebx
c0002bb2:	74 07                	je     c0002bbb <put_fat+0xdb>
c0002bb4:	c1 ef 04             	shr    edi,0x4
c0002bb7:	89 fa                	mov    edx,edi
c0002bb9:	eb 0e                	jmp    c0002bc9 <put_fat+0xe9>
c0002bbb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bbe:	c1 ef 08             	shr    edi,0x8
c0002bc1:	83 e2 f0             	and    edx,0xfffffff0
c0002bc4:	83 e7 0f             	and    edi,0xf
c0002bc7:	09 fa                	or     edx,edi
c0002bc9:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bcc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd0:	e9 97 00 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002bd5:	31 c9                	xor    ecx,ecx
c0002bd7:	c1 ea 08             	shr    edx,0x8
c0002bda:	89 f0                	mov    eax,esi
c0002bdc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bdf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be2:	e8 76 f5 ff ff       	call   c000215d <move_window>
c0002be7:	89 c1                	mov    ecx,eax
c0002be9:	85 c0                	test   eax,eax
c0002beb:	75 7f                	jne    c0002c6c <put_fat+0x18c>
c0002bed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bf1:	01 db                	add    ebx,ebx
c0002bf3:	0f b7 d7             	movzx  edx,di
c0002bf6:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bfc:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c00:	e8 ec ed ff ff       	call   c00019f1 <st_word>
c0002c05:	eb 53                	jmp    c0002c5a <put_fat+0x17a>
c0002c07:	31 c9                	xor    ecx,ecx
c0002c09:	c1 ea 07             	shr    edx,0x7
c0002c0c:	89 f0                	mov    eax,esi
c0002c0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c14:	e8 44 f5 ff ff       	call   c000215d <move_window>
c0002c19:	89 c1                	mov    ecx,eax
c0002c1b:	85 c0                	test   eax,eax
c0002c1d:	75 4d                	jne    c0002c6c <put_fat+0x18c>
c0002c1f:	c1 e3 02             	shl    ebx,0x2
c0002c22:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c2b:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c2f:	74 1c                	je     c0002c4d <put_fat+0x16d>
c0002c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c35:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3b:	89 d8                	mov    eax,ebx
c0002c3d:	e8 4a ed ff ff       	call   c000198c <ld_dword>
c0002c42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c46:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4b:	09 c7                	or     edi,eax
c0002c4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c51:	89 fa                	mov    edx,edi
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	e8 9b ed ff ff       	call   c00019f5 <st_dword>
c0002c5a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c62:	eb 08                	jmp    c0002c6c <put_fat+0x18c>
c0002c64:	b9 02 00 00 00       	mov    ecx,0x2
c0002c69:	89 c8                	mov    eax,ecx
c0002c6b:	c3                   	ret    
c0002c6c:	83 c4 1c             	add    esp,0x1c
c0002c6f:	89 c8                	mov    eax,ecx
c0002c71:	5b                   	pop    ebx
c0002c72:	5e                   	pop    esi
c0002c73:	5f                   	pop    edi
c0002c74:	5d                   	pop    ebp
c0002c75:	c3                   	ret    

c0002c76 <fill_last_frag>:
c0002c76:	57                   	push   edi
c0002c77:	89 cf                	mov    edi,ecx
c0002c79:	56                   	push   esi
c0002c7a:	89 d6                	mov    esi,edx
c0002c7c:	53                   	push   ebx
c0002c7d:	89 c3                	mov    ebx,eax
c0002c7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c82:	85 c0                	test   eax,eax
c0002c84:	74 21                	je     c0002ca7 <fill_last_frag+0x31>
c0002c86:	89 f9                	mov    ecx,edi
c0002c88:	83 f8 01             	cmp    eax,0x1
c0002c8b:	76 05                	jbe    c0002c92 <fill_last_frag+0x1c>
c0002c8d:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c90:	29 c1                	sub    ecx,eax
c0002c92:	8d 56 01             	lea    edx,[esi+0x1]
c0002c95:	29 c2                	sub    edx,eax
c0002c97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002c99:	e8 42 fe ff ff       	call   c0002ae0 <put_fat>
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	75 05                	jne    c0002ca7 <fill_last_frag+0x31>
c0002ca2:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002ca5:	eb d8                	jmp    c0002c7f <fill_last_frag+0x9>
c0002ca7:	5b                   	pop    ebx
c0002ca8:	5e                   	pop    esi
c0002ca9:	5f                   	pop    edi
c0002caa:	c3                   	ret    

c0002cab <fill_first_frag>:
c0002cab:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002caf:	75 2d                	jne    c0002cde <fill_first_frag+0x33>
c0002cb1:	57                   	push   edi
c0002cb2:	56                   	push   esi
c0002cb3:	53                   	push   ebx
c0002cb4:	89 c3                	mov    ebx,eax
c0002cb6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cb9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cbc:	01 d7                	add    edi,edx
c0002cbe:	39 fa                	cmp    edx,edi
c0002cc0:	74 14                	je     c0002cd6 <fill_first_frag+0x2b>
c0002cc2:	8d 72 01             	lea    esi,[edx+0x1]
c0002cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cc7:	89 f1                	mov    ecx,esi
c0002cc9:	e8 12 fe ff ff       	call   c0002ae0 <put_fat>
c0002cce:	89 f2                	mov    edx,esi
c0002cd0:	85 c0                	test   eax,eax
c0002cd2:	74 ea                	je     c0002cbe <fill_first_frag+0x13>
c0002cd4:	eb 0b                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cd6:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002cda:	31 c0                	xor    eax,eax
c0002cdc:	eb 03                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cde:	31 c0                	xor    eax,eax
c0002ce0:	c3                   	ret    
c0002ce1:	5b                   	pop    ebx
c0002ce2:	5e                   	pop    esi
c0002ce3:	5f                   	pop    edi
c0002ce4:	c3                   	ret    

c0002ce5 <get_fat>:
c0002ce5:	83 fa 01             	cmp    edx,0x1
c0002ce8:	0f 86 db 01 00 00    	jbe    c0002ec9 <get_fat+0x1e4>
c0002cee:	55                   	push   ebp
c0002cef:	b9 01 00 00 00       	mov    ecx,0x1
c0002cf4:	57                   	push   edi
c0002cf5:	56                   	push   esi
c0002cf6:	53                   	push   ebx
c0002cf7:	83 ec 1c             	sub    esp,0x1c
c0002cfa:	8b 38                	mov    edi,DWORD PTR [eax]
c0002cfc:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002cff:	0f 86 cc 01 00 00    	jbe    c0002ed1 <get_fat+0x1ec>
c0002d05:	89 c3                	mov    ebx,eax
c0002d07:	89 d6                	mov    esi,edx
c0002d09:	8a 07                	mov    al,BYTE PTR [edi]
c0002d0b:	3c 02                	cmp    al,0x2
c0002d0d:	0f 84 99 00 00 00    	je     c0002dac <get_fat+0xc7>
c0002d13:	77 09                	ja     c0002d1e <get_fat+0x39>
c0002d15:	fe c8                	dec    al
c0002d17:	74 1a                	je     c0002d33 <get_fat+0x4e>
c0002d19:	e9 b3 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d1e:	3c 03                	cmp    al,0x3
c0002d20:	0f 84 b5 00 00 00    	je     c0002ddb <get_fat+0xf6>
c0002d26:	3c 04                	cmp    al,0x4
c0002d28:	0f 84 e3 00 00 00    	je     c0002e11 <get_fat+0x12c>
c0002d2e:	e9 9e 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d33:	89 d3                	mov    ebx,edx
c0002d35:	31 c9                	xor    ecx,ecx
c0002d37:	d1 eb                	shr    ebx,1
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	01 d3                	add    ebx,edx
c0002d3d:	89 da                	mov    edx,ebx
c0002d3f:	c1 ea 09             	shr    edx,0x9
c0002d42:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d45:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d48:	e8 10 f4 ff ff       	call   c000215d <move_window>
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 08                	je     c0002d59 <get_fat+0x74>
c0002d51:	83 c9 ff             	or     ecx,0xffffffff
c0002d54:	e9 78 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d59:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d5c:	31 c9                	xor    ecx,ecx
c0002d5e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d64:	89 ea                	mov    edx,ebp
c0002d66:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d6a:	c1 ea 09             	shr    edx,0x9
c0002d6d:	89 f8                	mov    eax,edi
c0002d6f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d72:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d75:	e8 e3 f3 ff ff       	call   c000215d <move_window>
c0002d7a:	85 c0                	test   eax,eax
c0002d7c:	75 d3                	jne    c0002d51 <get_fat+0x6c>
c0002d7e:	0f b6 c3             	movzx  eax,bl
c0002d81:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d87:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d8c:	c1 e3 08             	shl    ebx,0x8
c0002d8f:	09 c3                	or     ebx,eax
c0002d91:	89 d9                	mov    ecx,ebx
c0002d93:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002d99:	83 e6 01             	and    esi,0x1
c0002d9c:	0f 84 2f 01 00 00    	je     c0002ed1 <get_fat+0x1ec>
c0002da2:	89 d9                	mov    ecx,ebx
c0002da4:	c1 e9 04             	shr    ecx,0x4
c0002da7:	e9 25 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002dac:	31 c9                	xor    ecx,ecx
c0002dae:	c1 ea 08             	shr    edx,0x8
c0002db1:	89 f8                	mov    eax,edi
c0002db3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002db6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002db9:	e8 9f f3 ff ff       	call   c000215d <move_window>
c0002dbe:	85 c0                	test   eax,eax
c0002dc0:	75 8f                	jne    c0002d51 <get_fat+0x6c>
c0002dc2:	01 f6                	add    esi,esi
c0002dc4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dce:	e8 ac eb ff ff       	call   c000197f <ld_word>
c0002dd3:	0f b7 c8             	movzx  ecx,ax
c0002dd6:	e9 f6 00 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f8                	mov    eax,edi
c0002de2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002de5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002de8:	e8 70 f3 ff ff       	call   c000215d <move_window>
c0002ded:	85 c0                	test   eax,eax
c0002def:	0f 85 5c ff ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002df5:	c1 e6 02             	shl    esi,0x2
c0002df8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002dfe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e02:	e8 85 eb ff ff       	call   c000198c <ld_dword>
c0002e07:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e0c:	e9 b4 00 00 00       	jmp    c0002ec5 <get_fat+0x1e0>
c0002e11:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e14:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e17:	89 d1                	mov    ecx,edx
c0002e19:	09 c1                	or     ecx,eax
c0002e1b:	74 06                	je     c0002e23 <get_fat+0x13e>
c0002e1d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e21:	75 0f                	jne    c0002e32 <get_fat+0x14d>
c0002e23:	b9 01 00 00 00       	mov    ecx,0x1
c0002e28:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e2c:	0f 85 9f 00 00 00    	jne    c0002ed1 <get_fat+0x1ec>
c0002e32:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e36:	89 f5                	mov    ebp,esi
c0002e38:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e3d:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e40:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e43:	80 f9 02             	cmp    cl,0x2
c0002e46:	75 35                	jne    c0002e7d <get_fat+0x198>
c0002e48:	83 c0 ff             	add    eax,0xffffffff
c0002e4b:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e50:	83 d2 ff             	adc    edx,0xffffffff
c0002e53:	31 db                	xor    ebx,ebx
c0002e55:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e59:	53                   	push   ebx
c0002e5a:	c1 ea 09             	shr    edx,0x9
c0002e5d:	51                   	push   ecx
c0002e5e:	52                   	push   edx
c0002e5f:	50                   	push   eax
c0002e60:	e8 db e5 01 00       	call   c0021440 <__udivdi3>
c0002e65:	83 c4 10             	add    esp,0x10
c0002e68:	b9 01 00 00 00       	mov    ecx,0x1
c0002e6d:	39 c5                	cmp    ebp,eax
c0002e6f:	77 60                	ja     c0002ed1 <get_fat+0x1ec>
c0002e71:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e76:	74 59                	je     c0002ed1 <get_fat+0x1ec>
c0002e78:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e7b:	eb 54                	jmp    c0002ed1 <get_fat+0x1ec>
c0002e7d:	80 f9 03             	cmp    cl,0x3
c0002e80:	75 05                	jne    c0002e87 <get_fat+0x1a2>
c0002e82:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e85:	77 f1                	ja     c0002e78 <get_fat+0x193>
c0002e87:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e8c:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e90:	75 3f                	jne    c0002ed1 <get_fat+0x1ec>
c0002e92:	31 c9                	xor    ecx,ecx
c0002e94:	89 f2                	mov    edx,esi
c0002e96:	89 f8                	mov    eax,edi
c0002e98:	c1 ea 07             	shr    edx,0x7
c0002e9b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 b7 f2 ff ff       	call   c000215d <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 a3 fe ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 cc ea ff ff       	call   c000198c <ld_dword>
c0002ec0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ec5:	89 c1                	mov    ecx,eax
c0002ec7:	eb 08                	jmp    c0002ed1 <get_fat+0x1ec>
c0002ec9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ece:	89 c8                	mov    eax,ecx
c0002ed0:	c3                   	ret    
c0002ed1:	83 c4 1c             	add    esp,0x1c
c0002ed4:	89 c8                	mov    eax,ecx
c0002ed6:	5b                   	pop    ebx
c0002ed7:	5e                   	pop    esi
c0002ed8:	5f                   	pop    edi
c0002ed9:	5d                   	pop    ebp
c0002eda:	c3                   	ret    

c0002edb <dir_sdi>:
c0002edb:	55                   	push   ebp
c0002edc:	57                   	push   edi
c0002edd:	56                   	push   esi
c0002ede:	53                   	push   ebx
c0002edf:	89 c3                	mov    ebx,eax
c0002ee1:	83 ec 1c             	sub    esp,0x1c
c0002ee4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee6:	31 c0                	xor    eax,eax
c0002ee8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002eeb:	0f 94 c0             	sete   al
c0002eee:	48                   	dec    eax
c0002eef:	25 00 00 20 f0       	and    eax,0xf0200000
c0002ef4:	05 00 00 00 10       	add    eax,0x10000000
c0002ef9:	39 d0                	cmp    eax,edx
c0002efb:	77 0a                	ja     c0002f07 <dir_sdi+0x2c>
c0002efd:	b8 02 00 00 00       	mov    eax,0x2
c0002f02:	e9 c4 00 00 00       	jmp    c0002fcb <dir_sdi+0xf0>
c0002f07:	89 d6                	mov    esi,edx
c0002f09:	f6 c2 1f             	test   dl,0x1f
c0002f0c:	75 ef                	jne    c0002efd <dir_sdi+0x22>
c0002f0e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f11:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f14:	85 c9                	test   ecx,ecx
c0002f16:	75 2d                	jne    c0002f45 <dir_sdi+0x6a>
c0002f18:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f1b:	77 1b                	ja     c0002f38 <dir_sdi+0x5d>
c0002f1d:	89 f2                	mov    edx,esi
c0002f1f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f23:	c1 ea 05             	shr    edx,0x5
c0002f26:	39 c2                	cmp    edx,eax
c0002f28:	73 d3                	jae    c0002efd <dir_sdi+0x22>
c0002f2a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f2d:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f30:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f33:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f36:	eb 4b                	jmp    c0002f83 <dir_sdi+0xa8>
c0002f38:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3b:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f3f:	85 c0                	test   eax,eax
c0002f41:	74 da                	je     c0002f1d <dir_sdi+0x42>
c0002f43:	89 c1                	mov    ecx,eax
c0002f45:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f49:	c1 e5 09             	shl    ebp,0x9
c0002f4c:	89 ca                	mov    edx,ecx
c0002f4e:	39 ee                	cmp    esi,ebp
c0002f50:	72 1c                	jb     c0002f6e <dir_sdi+0x93>
c0002f52:	89 d8                	mov    eax,ebx
c0002f54:	e8 8c fd ff ff       	call   c0002ce5 <get_fat>
c0002f59:	89 c1                	mov    ecx,eax
c0002f5b:	83 f8 ff             	cmp    eax,0xffffffff
c0002f5e:	74 66                	je     c0002fc6 <dir_sdi+0xeb>
c0002f60:	83 f8 01             	cmp    eax,0x1
c0002f63:	76 98                	jbe    c0002efd <dir_sdi+0x22>
c0002f65:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f68:	76 93                	jbe    c0002efd <dir_sdi+0x22>
c0002f6a:	29 ee                	sub    esi,ebp
c0002f6c:	eb de                	jmp    c0002f4c <dir_sdi+0x71>
c0002f6e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f72:	89 f8                	mov    eax,edi
c0002f74:	e8 9f ec ff ff       	call   c0001c18 <clst2sect>
c0002f79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f7d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f80:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f83:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f86:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f89:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8c:	89 d1                	mov    ecx,edx
c0002f8e:	09 c1                	or     ecx,eax
c0002f90:	0f 84 67 ff ff ff    	je     c0002efd <dir_sdi+0x22>
c0002f96:	89 f1                	mov    ecx,esi
c0002f98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa0:	c1 e9 09             	shr    ecx,0x9
c0002fa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fa7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fab:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002faf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fb8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fbb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fbf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc2:	31 c0                	xor    eax,eax
c0002fc4:	eb 05                	jmp    c0002fcb <dir_sdi+0xf0>
c0002fc6:	b8 01 00 00 00       	mov    eax,0x1
c0002fcb:	83 c4 1c             	add    esp,0x1c
c0002fce:	5b                   	pop    ebx
c0002fcf:	5e                   	pop    esi
c0002fd0:	5f                   	pop    edi
c0002fd1:	5d                   	pop    ebp
c0002fd2:	c3                   	ret    

c0002fd3 <create_chain>:
c0002fd3:	55                   	push   ebp
c0002fd4:	89 c5                	mov    ebp,eax
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	85 d2                	test   edx,edx
c0002fde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002fe2:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe4:	75 0e                	jne    c0002ff4 <create_chain+0x21>
c0002fe6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002fe9:	85 ff                	test   edi,edi
c0002feb:	74 39                	je     c0003026 <create_chain+0x53>
c0002fed:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff0:	77 39                	ja     c000302b <create_chain+0x58>
c0002ff2:	eb 32                	jmp    c0003026 <create_chain+0x53>
c0002ff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff8:	e8 e8 fc ff ff       	call   c0002ce5 <get_fat>
c0002ffd:	89 c3                	mov    ebx,eax
c0002fff:	83 f8 01             	cmp    eax,0x1
c0003002:	77 0a                	ja     c000300e <create_chain+0x3b>
c0003004:	bb 01 00 00 00       	mov    ebx,0x1
c0003009:	e9 ba 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c000300e:	83 f8 ff             	cmp    eax,0xffffffff
c0003011:	0f 84 62 01 00 00    	je     c0003179 <create_chain+0x1a6>
c0003017:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000301a:	0f 87 a8 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003020:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003024:	eb 05                	jmp    c000302b <create_chain+0x58>
c0003026:	bf 01 00 00 00       	mov    edi,0x1
c000302b:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000302f:	75 07                	jne    c0003038 <create_chain+0x65>
c0003031:	31 db                	xor    ebx,ebx
c0003033:	e9 90 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c0003038:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000303b:	75 74                	jne    c00030b1 <create_chain+0xde>
c000303d:	b9 01 00 00 00       	mov    ecx,0x1
c0003042:	89 fa                	mov    edx,edi
c0003044:	89 f0                	mov    eax,esi
c0003046:	e8 2d f9 ff ff       	call   c0002978 <find_bitmap>
c000304b:	89 c3                	mov    ebx,eax
c000304d:	8d 40 ff             	lea    eax,[eax-0x1]
c0003050:	83 f8 fd             	cmp    eax,0xfffffffd
c0003053:	0f 87 6f 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003059:	83 ec 0c             	sub    esp,0xc
c000305c:	b9 01 00 00 00       	mov    ecx,0x1
c0003061:	6a 01                	push   0x1
c0003063:	89 da                	mov    edx,ebx
c0003065:	89 f0                	mov    eax,esi
c0003067:	e8 bf f9 ff ff       	call   c0002a2b <change_bitmap>
c000306c:	83 c4 10             	add    esp,0x10
c000306f:	83 f8 02             	cmp    eax,0x2
c0003072:	74 90                	je     c0003004 <create_chain+0x31>
c0003074:	83 f8 01             	cmp    eax,0x1
c0003077:	0f 84 fc 00 00 00    	je     c0003179 <create_chain+0x1a6>
c000307d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003082:	75 09                	jne    c000308d <create_chain+0xba>
c0003084:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003088:	e9 0c 01 00 00       	jmp    c0003199 <create_chain+0x1c6>
c000308d:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003091:	0f 85 e7 00 00 00    	jne    c000317e <create_chain+0x1ab>
c0003097:	8d 57 01             	lea    edx,[edi+0x1]
c000309a:	39 da                	cmp    edx,ebx
c000309c:	0f 84 f7 00 00 00    	je     c0003199 <create_chain+0x1c6>
c00030a2:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030a5:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030a9:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030ac:	e9 cd 00 00 00       	jmp    c000317e <create_chain+0x1ab>
c00030b1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030b5:	75 41                	jne    c00030f8 <create_chain+0x125>
c00030b7:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030ba:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030bd:	77 05                	ja     c00030c4 <create_chain+0xf1>
c00030bf:	bb 02 00 00 00       	mov    ebx,0x2
c00030c4:	89 da                	mov    edx,ebx
c00030c6:	89 e8                	mov    eax,ebp
c00030c8:	e8 18 fc ff ff       	call   c0002ce5 <get_fat>
c00030cd:	83 f8 01             	cmp    eax,0x1
c00030d0:	0f 84 2e ff ff ff    	je     c0003004 <create_chain+0x31>
c00030d6:	83 f8 ff             	cmp    eax,0xffffffff
c00030d9:	0f 84 9a 00 00 00    	je     c0003179 <create_chain+0x1a6>
c00030df:	85 c0                	test   eax,eax
c00030e1:	74 11                	je     c00030f4 <create_chain+0x121>
c00030e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030e6:	83 f8 01             	cmp    eax,0x1
c00030e9:	76 0d                	jbe    c00030f8 <create_chain+0x125>
c00030eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ee:	76 08                	jbe    c00030f8 <create_chain+0x125>
c00030f0:	89 c7                	mov    edi,eax
c00030f2:	eb 04                	jmp    c00030f8 <create_chain+0x125>
c00030f4:	85 db                	test   ebx,ebx
c00030f6:	75 38                	jne    c0003130 <create_chain+0x15d>
c00030f8:	89 fb                	mov    ebx,edi
c00030fa:	43                   	inc    ebx
c00030fb:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030fe:	77 0e                	ja     c000310e <create_chain+0x13b>
c0003100:	83 ff 01             	cmp    edi,0x1
c0003103:	0f 86 28 ff ff ff    	jbe    c0003031 <create_chain+0x5e>
c0003109:	bb 02 00 00 00       	mov    ebx,0x2
c000310e:	89 da                	mov    edx,ebx
c0003110:	89 e8                	mov    eax,ebp
c0003112:	e8 ce fb ff ff       	call   c0002ce5 <get_fat>
c0003117:	85 c0                	test   eax,eax
c0003119:	74 15                	je     c0003130 <create_chain+0x15d>
c000311b:	83 f8 01             	cmp    eax,0x1
c000311e:	0f 84 e0 fe ff ff    	je     c0003004 <create_chain+0x31>
c0003124:	40                   	inc    eax
c0003125:	74 52                	je     c0003179 <create_chain+0x1a6>
c0003127:	39 fb                	cmp    ebx,edi
c0003129:	75 cf                	jne    c00030fa <create_chain+0x127>
c000312b:	e9 01 ff ff ff       	jmp    c0003031 <create_chain+0x5e>
c0003130:	83 c9 ff             	or     ecx,0xffffffff
c0003133:	89 da                	mov    edx,ebx
c0003135:	89 f0                	mov    eax,esi
c0003137:	e8 a4 f9 ff ff       	call   c0002ae0 <put_fat>
c000313c:	85 c0                	test   eax,eax
c000313e:	75 32                	jne    c0003172 <create_chain+0x19f>
c0003140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003145:	74 11                	je     c0003158 <create_chain+0x185>
c0003147:	89 d9                	mov    ecx,ebx
c0003149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000314d:	89 f0                	mov    eax,esi
c000314f:	e8 8c f9 ff ff       	call   c0002ae0 <put_fat>
c0003154:	85 c0                	test   eax,eax
c0003156:	75 1a                	jne    c0003172 <create_chain+0x19f>
c0003158:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000315b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315e:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003161:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003164:	39 d0                	cmp    eax,edx
c0003166:	77 04                	ja     c000316c <create_chain+0x199>
c0003168:	48                   	dec    eax
c0003169:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000316c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003170:	eb 56                	jmp    c00031c8 <create_chain+0x1f5>
c0003172:	48                   	dec    eax
c0003173:	0f 85 8b fe ff ff    	jne    c0003004 <create_chain+0x31>
c0003179:	83 cb ff             	or     ebx,0xffffffff
c000317c:	eb 4a                	jmp    c00031c8 <create_chain+0x1f5>
c000317e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003182:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003185:	41                   	inc    ecx
c0003186:	39 d9                	cmp    ecx,ebx
c0003188:	75 19                	jne    c00031a3 <create_chain+0x1d0>
c000318a:	b9 02 00 00 00       	mov    ecx,0x2
c000318f:	85 d2                	test   edx,edx
c0003191:	74 03                	je     c0003196 <create_chain+0x1c3>
c0003193:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003196:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003199:	85 c0                	test   eax,eax
c000319b:	0f 85 63 fe ff ff    	jne    c0003004 <create_chain+0x31>
c00031a1:	eb b5                	jmp    c0003158 <create_chain+0x185>
c00031a3:	85 d2                	test   edx,edx
c00031a5:	75 07                	jne    c00031ae <create_chain+0x1db>
c00031a7:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031ae:	89 d9                	mov    ecx,ebx
c00031b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031b4:	89 e8                	mov    eax,ebp
c00031b6:	e8 bb fa ff ff       	call   c0002c76 <fill_last_frag>
c00031bb:	85 c0                	test   eax,eax
c00031bd:	75 b3                	jne    c0003172 <create_chain+0x19f>
c00031bf:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031c6:	eb 90                	jmp    c0003158 <create_chain+0x185>
c00031c8:	83 c4 1c             	add    esp,0x1c
c00031cb:	89 d8                	mov    eax,ebx
c00031cd:	5b                   	pop    ebx
c00031ce:	5e                   	pop    esi
c00031cf:	5f                   	pop    edi
c00031d0:	5d                   	pop    ebp
c00031d1:	c3                   	ret    

c00031d2 <remove_chain>:
c00031d2:	55                   	push   ebp
c00031d3:	57                   	push   edi
c00031d4:	56                   	push   esi
c00031d5:	53                   	push   ebx
c00031d6:	83 ec 1c             	sub    esp,0x1c
c00031d9:	83 fa 01             	cmp    edx,0x1
c00031dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031e0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e2:	77 0a                	ja     c00031ee <remove_chain+0x1c>
c00031e4:	b8 02 00 00 00       	mov    eax,0x2
c00031e9:	e9 24 01 00 00       	jmp    c0003312 <remove_chain+0x140>
c00031ee:	89 d6                	mov    esi,edx
c00031f0:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031f3:	76 ef                	jbe    c00031e4 <remove_chain+0x12>
c00031f5:	89 c7                	mov    edi,eax
c00031f7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00031fc:	75 06                	jne    c0003204 <remove_chain+0x32>
c00031fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003202:	eb 54                	jmp    c0003258 <remove_chain+0x86>
c0003204:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003207:	75 06                	jne    c000320f <remove_chain+0x3d>
c0003209:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000320d:	74 ef                	je     c00031fe <remove_chain+0x2c>
c000320f:	83 c9 ff             	or     ecx,0xffffffff
c0003212:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 c3 f8 ff ff       	call   c0002ae0 <put_fat>
c000321d:	85 c0                	test   eax,eax
c000321f:	74 dd                	je     c00031fe <remove_chain+0x2c>
c0003221:	e9 ec 00 00 00       	jmp    c0003312 <remove_chain+0x140>
c0003226:	83 f8 01             	cmp    eax,0x1
c0003229:	74 b9                	je     c00031e4 <remove_chain+0x12>
c000322b:	83 f8 ff             	cmp    eax,0xffffffff
c000322e:	74 6d                	je     c000329d <remove_chain+0xcb>
c0003230:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003233:	75 6f                	jne    c00032a4 <remove_chain+0xd2>
c0003235:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003238:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000323b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000323e:	39 d0                	cmp    eax,edx
c0003240:	73 08                	jae    c000324a <remove_chain+0x78>
c0003242:	40                   	inc    eax
c0003243:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003247:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000324a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000324d:	39 e9                	cmp    ecx,ebp
c000324f:	75 64                	jne    c00032b5 <remove_chain+0xe3>
c0003251:	89 ee                	mov    esi,ebp
c0003253:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003256:	76 0f                	jbe    c0003267 <remove_chain+0x95>
c0003258:	89 f2                	mov    edx,esi
c000325a:	89 f8                	mov    eax,edi
c000325c:	e8 84 fa ff ff       	call   c0002ce5 <get_fat>
c0003261:	89 c5                	mov    ebp,eax
c0003263:	85 c0                	test   eax,eax
c0003265:	75 bf                	jne    c0003226 <remove_chain+0x54>
c0003267:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000326a:	0f 85 a0 00 00 00    	jne    c0003310 <remove_chain+0x13e>
c0003270:	eb 6c                	jmp    c00032de <remove_chain+0x10c>
c0003272:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003275:	84 c0                	test   al,al
c0003277:	75 7d                	jne    c00032f6 <remove_chain+0x124>
c0003279:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000327c:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003280:	0f 84 86 00 00 00    	je     c000330c <remove_chain+0x13a>
c0003286:	89 da                	mov    edx,ebx
c0003288:	89 f8                	mov    eax,edi
c000328a:	e8 56 fa ff ff       	call   c0002ce5 <get_fat>
c000328f:	83 f8 01             	cmp    eax,0x1
c0003292:	0f 86 4c ff ff ff    	jbe    c00031e4 <remove_chain+0x12>
c0003298:	83 f8 ff             	cmp    eax,0xffffffff
c000329b:	75 4e                	jne    c00032eb <remove_chain+0x119>
c000329d:	b8 01 00 00 00       	mov    eax,0x1
c00032a2:	eb 6e                	jmp    c0003312 <remove_chain+0x140>
c00032a4:	31 c9                	xor    ecx,ecx
c00032a6:	89 f2                	mov    edx,esi
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 31 f8 ff ff       	call   c0002ae0 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 82                	je     c0003235 <remove_chain+0x63>
c00032b3:	eb 5d                	jmp    c0003312 <remove_chain+0x140>
c00032b5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b8:	75 1b                	jne    c00032d5 <remove_chain+0x103>
c00032ba:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032be:	89 d8                	mov    eax,ebx
c00032c0:	83 ec 0c             	sub    esp,0xc
c00032c3:	6a 00                	push   0x0
c00032c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032c9:	e8 5d f7 ff ff       	call   c0002a2b <change_bitmap>
c00032ce:	83 c4 10             	add    esp,0x10
c00032d1:	85 c0                	test   eax,eax
c00032d3:	75 3d                	jne    c0003312 <remove_chain+0x140>
c00032d5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032d9:	e9 73 ff ff ff       	jmp    c0003251 <remove_chain+0x7f>
c00032de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e3:	75 8d                	jne    c0003272 <remove_chain+0xa0>
c00032e5:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032e9:	eb 25                	jmp    c0003310 <remove_chain+0x13e>
c00032eb:	8d 53 01             	lea    edx,[ebx+0x1]
c00032ee:	89 c3                	mov    ebx,eax
c00032f0:	39 c2                	cmp    edx,eax
c00032f2:	74 88                	je     c000327c <remove_chain+0xaa>
c00032f4:	eb 1a                	jmp    c0003310 <remove_chain+0x13e>
c00032f6:	3c 03                	cmp    al,0x3
c00032f8:	75 16                	jne    c0003310 <remove_chain+0x13e>
c00032fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00032fd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003301:	77 0d                	ja     c0003310 <remove_chain+0x13e>
c0003303:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	72 04                	jb     c0003310 <remove_chain+0x13e>
c000330c:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003310:	31 c0                	xor    eax,eax
c0003312:	83 c4 1c             	add    esp,0x1c
c0003315:	5b                   	pop    ebx
c0003316:	5e                   	pop    esi
c0003317:	5f                   	pop    edi
c0003318:	5d                   	pop    ebp
c0003319:	c3                   	ret    

c000331a <dir_clear>:
c000331a:	55                   	push   ebp
c000331b:	57                   	push   edi
c000331c:	56                   	push   esi
c000331d:	89 c6                	mov    esi,eax
c000331f:	53                   	push   ebx
c0003320:	83 ec 1c             	sub    esp,0x1c
c0003323:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003327:	e8 9d ed ff ff       	call   c00020c9 <sync_window>
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 85 de 00 00 00    	jne    c0003412 <dir_clear+0xf8>
c0003334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003338:	89 f0                	mov    eax,esi
c000333a:	8d 6e 54             	lea    ebp,[esi+0x54]
c000333d:	e8 d6 e8 ff ff       	call   c0001c18 <clst2sect>
c0003342:	b9 00 02 00 00       	mov    ecx,0x200
c0003347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000334f:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003352:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003355:	89 e8                	mov    eax,ebp
c0003357:	31 d2                	xor    edx,edx
c0003359:	e8 b5 e6 ff ff       	call   c0001a13 <mem_set>
c000335e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003362:	c1 e3 09             	shl    ebx,0x9
c0003365:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000336b:	76 1f                	jbe    c000338c <dir_clear+0x72>
c000336d:	bb 00 80 00 00       	mov    ebx,0x8000
c0003372:	eb 18                	jmp    c000338c <dir_clear+0x72>
c0003374:	83 ec 0c             	sub    esp,0xc
c0003377:	53                   	push   ebx
c0003378:	e8 6b 50 00 00       	call   c00083e8 <ff_memalloc>
c000337d:	83 c4 10             	add    esp,0x10
c0003380:	89 c7                	mov    edi,eax
c0003382:	85 c0                	test   eax,eax
c0003384:	0f 85 8f 00 00 00    	jne    c0003419 <dir_clear+0xff>
c000338a:	d1 eb                	shr    ebx,1
c000338c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003392:	77 e0                	ja     c0003374 <dir_clear+0x5a>
c0003394:	31 db                	xor    ebx,ebx
c0003396:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000339a:	39 d8                	cmp    eax,ebx
c000339c:	76 66                	jbe    c0003404 <dir_clear+0xea>
c000339e:	83 ec 0c             	sub    esp,0xc
c00033a1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033a5:	6a 01                	push   0x1
c00033a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033af:	55                   	push   ebp
c00033b0:	50                   	push   eax
c00033b1:	e8 94 e5 ff ff       	call   c000194a <disk_write>
c00033b6:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033bb:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c0:	83 c4 20             	add    esp,0x20
c00033c3:	85 c0                	test   eax,eax
c00033c5:	75 3d                	jne    c0003404 <dir_clear+0xea>
c00033c7:	43                   	inc    ebx
c00033c8:	eb cc                	jmp    c0003396 <dir_clear+0x7c>
c00033ca:	83 ec 0c             	sub    esp,0xc
c00033cd:	31 d2                	xor    edx,edx
c00033cf:	55                   	push   ebp
c00033d0:	89 d8                	mov    eax,ebx
c00033d2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033d6:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033da:	52                   	push   edx
c00033db:	50                   	push   eax
c00033dc:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e0:	57                   	push   edi
c00033e1:	50                   	push   eax
c00033e2:	e8 63 e5 ff ff       	call   c000194a <disk_write>
c00033e7:	83 c4 20             	add    esp,0x20
c00033ea:	85 c0                	test   eax,eax
c00033ec:	75 0a                	jne    c00033f8 <dir_clear+0xde>
c00033ee:	01 eb                	add    ebx,ebp
c00033f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033f4:	39 d8                	cmp    eax,ebx
c00033f6:	77 d2                	ja     c00033ca <dir_clear+0xb0>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	57                   	push   edi
c00033fc:	e8 ff 4f 00 00       	call   c0008400 <ff_memfree>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003408:	39 d8                	cmp    eax,ebx
c000340a:	0f 95 c0             	setne  al
c000340d:	0f b6 c0             	movzx  eax,al
c0003410:	eb 19                	jmp    c000342b <dir_clear+0x111>
c0003412:	b8 01 00 00 00       	mov    eax,0x1
c0003417:	eb 12                	jmp    c000342b <dir_clear+0x111>
c0003419:	89 d9                	mov    ecx,ebx
c000341b:	31 d2                	xor    edx,edx
c000341d:	c1 eb 09             	shr    ebx,0x9
c0003420:	e8 ee e5 ff ff       	call   c0001a13 <mem_set>
c0003425:	89 dd                	mov    ebp,ebx
c0003427:	31 db                	xor    ebx,ebx
c0003429:	eb c5                	jmp    c00033f0 <dir_clear+0xd6>
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	5b                   	pop    ebx
c000342f:	5e                   	pop    esi
c0003430:	5f                   	pop    edi
c0003431:	5d                   	pop    ebp
c0003432:	c3                   	ret    

c0003433 <dir_next>:
c0003433:	55                   	push   ebp
c0003434:	57                   	push   edi
c0003435:	56                   	push   esi
c0003436:	53                   	push   ebx
c0003437:	89 c3                	mov    ebx,eax
c0003439:	83 ec 1c             	sub    esp,0x1c
c000343c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000343e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003442:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003445:	8d 78 20             	lea    edi,[eax+0x20]
c0003448:	31 c0                	xor    eax,eax
c000344a:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000344e:	0f 94 c0             	sete   al
c0003451:	48                   	dec    eax
c0003452:	25 00 00 20 f0       	and    eax,0xf0200000
c0003457:	05 00 00 00 10       	add    eax,0x10000000
c000345c:	39 f8                	cmp    eax,edi
c000345e:	77 0e                	ja     c000346e <dir_next+0x3b>
c0003460:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003467:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000346e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003471:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003474:	b8 04 00 00 00       	mov    eax,0x4
c0003479:	89 ce                	mov    esi,ecx
c000347b:	09 d6                	or     esi,edx
c000347d:	0f 84 da 00 00 00    	je     c000355d <dir_next+0x12a>
c0003483:	89 f8                	mov    eax,edi
c0003485:	25 ff 01 00 00       	and    eax,0x1ff
c000348a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000348e:	0f 85 b9 00 00 00    	jne    c000354d <dir_next+0x11a>
c0003494:	83 c2 01             	add    edx,0x1
c0003497:	83 d1 00             	adc    ecx,0x0
c000349a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000349d:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a3:	85 d2                	test   edx,edx
c00034a5:	75 29                	jne    c00034d0 <dir_next+0x9d>
c00034a7:	89 fa                	mov    edx,edi
c00034a9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034ad:	c1 ea 05             	shr    edx,0x5
c00034b0:	39 c2                	cmp    edx,eax
c00034b2:	0f 82 95 00 00 00    	jb     c000354d <dir_next+0x11a>
c00034b8:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034bf:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034c6:	b8 04 00 00 00       	mov    eax,0x4
c00034cb:	e9 8d 00 00 00       	jmp    c000355d <dir_next+0x12a>
c00034d0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034d4:	89 f9                	mov    ecx,edi
c00034d6:	48                   	dec    eax
c00034d7:	c1 e9 09             	shr    ecx,0x9
c00034da:	85 c8                	test   eax,ecx
c00034dc:	75 6f                	jne    c000354d <dir_next+0x11a>
c00034de:	89 d8                	mov    eax,ebx
c00034e0:	e8 00 f8 ff ff       	call   c0002ce5 <get_fat>
c00034e5:	89 c6                	mov    esi,eax
c00034e7:	83 f8 01             	cmp    eax,0x1
c00034ea:	77 07                	ja     c00034f3 <dir_next+0xc0>
c00034ec:	b8 02 00 00 00       	mov    eax,0x2
c00034f1:	eb 6a                	jmp    c000355d <dir_next+0x12a>
c00034f3:	83 f8 ff             	cmp    eax,0xffffffff
c00034f6:	75 07                	jne    c00034ff <dir_next+0xcc>
c00034f8:	b8 01 00 00 00       	mov    eax,0x1
c00034fd:	eb 5e                	jmp    c000355d <dir_next+0x12a>
c00034ff:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003502:	77 37                	ja     c000353b <dir_next+0x108>
c0003504:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003509:	74 ad                	je     c00034b8 <dir_next+0x85>
c000350b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000350e:	89 d8                	mov    eax,ebx
c0003510:	e8 be fa ff ff       	call   c0002fd3 <create_chain>
c0003515:	89 c6                	mov    esi,eax
c0003517:	b8 07 00 00 00       	mov    eax,0x7
c000351c:	85 f6                	test   esi,esi
c000351e:	74 3d                	je     c000355d <dir_next+0x12a>
c0003520:	83 fe 01             	cmp    esi,0x1
c0003523:	74 c7                	je     c00034ec <dir_next+0xb9>
c0003525:	83 fe ff             	cmp    esi,0xffffffff
c0003528:	74 ce                	je     c00034f8 <dir_next+0xc5>
c000352a:	89 f2                	mov    edx,esi
c000352c:	89 e8                	mov    eax,ebp
c000352e:	e8 e7 fd ff ff       	call   c000331a <dir_clear>
c0003533:	85 c0                	test   eax,eax
c0003535:	75 c1                	jne    c00034f8 <dir_next+0xc5>
c0003537:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000353b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000353e:	89 f2                	mov    edx,esi
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 d1 e6 ff ff       	call   c0001c18 <clst2sect>
c0003547:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000354a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000354d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003551:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003554:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003558:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000355b:	31 c0                	xor    eax,eax
c000355d:	83 c4 1c             	add    esp,0x1c
c0003560:	5b                   	pop    ebx
c0003561:	5e                   	pop    esi
c0003562:	5f                   	pop    edi
c0003563:	5d                   	pop    ebp
c0003564:	c3                   	ret    

c0003565 <load_xdir>:
c0003565:	55                   	push   ebp
c0003566:	57                   	push   edi
c0003567:	56                   	push   esi
c0003568:	89 c6                	mov    esi,eax
c000356a:	53                   	push   ebx
c000356b:	83 ec 1c             	sub    esp,0x1c
c000356e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003570:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003573:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003576:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003579:	e8 df eb ff ff       	call   c000215d <move_window>
c000357e:	89 c3                	mov    ebx,eax
c0003580:	85 c0                	test   eax,eax
c0003582:	0f 85 0c 01 00 00    	jne    c0003694 <load_xdir+0x12f>
c0003588:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000358b:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000358e:	0f 85 fb 00 00 00    	jne    c000368f <load_xdir+0x12a>
c0003594:	89 f8                	mov    eax,edi
c0003596:	b9 20 00 00 00       	mov    ecx,0x20
c000359b:	e8 5e e4 ff ff       	call   c00019fe <mem_cpy>
c00035a0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035a4:	40                   	inc    eax
c00035a5:	c1 e0 05             	shl    eax,0x5
c00035a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035ac:	83 e8 60             	sub    eax,0x60
c00035af:	3d 00 02 00 00       	cmp    eax,0x200
c00035b4:	0f 87 d5 00 00 00    	ja     c000368f <load_xdir+0x12a>
c00035ba:	31 d2                	xor    edx,edx
c00035bc:	89 f0                	mov    eax,esi
c00035be:	e8 70 fe ff ff       	call   c0003433 <dir_next>
c00035c3:	89 c3                	mov    ebx,eax
c00035c5:	83 f8 04             	cmp    eax,0x4
c00035c8:	0f 84 c1 00 00 00    	je     c000368f <load_xdir+0x12a>
c00035ce:	85 c0                	test   eax,eax
c00035d0:	0f 85 be 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035d6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035d9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00035de:	e8 7a eb ff ff       	call   c000215d <move_window>
c00035e3:	89 c3                	mov    ebx,eax
c00035e5:	85 c0                	test   eax,eax
c00035e7:	0f 85 a7 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035ed:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f0:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035f3:	0f 85 96 00 00 00    	jne    c000368f <load_xdir+0x12a>
c00035f9:	8d 47 20             	lea    eax,[edi+0x20]
c00035fc:	b9 20 00 00 00       	mov    ecx,0x20
c0003601:	e8 f8 e3 ff ff       	call   c00019fe <mem_cpy>
c0003606:	31 d2                	xor    edx,edx
c0003608:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000360c:	b9 0f 00 00 00       	mov    ecx,0xf
c0003611:	83 c0 2c             	add    eax,0x2c
c0003614:	f7 f1                	div    ecx
c0003616:	c1 e0 05             	shl    eax,0x5
c0003619:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000361d:	77 70                	ja     c000368f <load_xdir+0x12a>
c000361f:	bd 40 00 00 00       	mov    ebp,0x40
c0003624:	31 d2                	xor    edx,edx
c0003626:	89 f0                	mov    eax,esi
c0003628:	e8 06 fe ff ff       	call   c0003433 <dir_next>
c000362d:	89 c3                	mov    ebx,eax
c000362f:	83 f8 04             	cmp    eax,0x4
c0003632:	74 5b                	je     c000368f <load_xdir+0x12a>
c0003634:	85 c0                	test   eax,eax
c0003636:	75 5c                	jne    c0003694 <load_xdir+0x12f>
c0003638:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003640:	e8 18 eb ff ff       	call   c000215d <move_window>
c0003645:	89 c3                	mov    ebx,eax
c0003647:	85 c0                	test   eax,eax
c0003649:	75 49                	jne    c0003694 <load_xdir+0x12f>
c000364b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364e:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003651:	75 3c                	jne    c000368f <load_xdir+0x12a>
c0003653:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003659:	77 0d                	ja     c0003668 <load_xdir+0x103>
c000365b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000365e:	b9 20 00 00 00       	mov    ecx,0x20
c0003663:	e8 96 e3 ff ff       	call   c00019fe <mem_cpy>
c0003668:	83 c5 20             	add    ebp,0x20
c000366b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000366f:	77 b3                	ja     c0003624 <load_xdir+0xbf>
c0003671:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003677:	77 1b                	ja     c0003694 <load_xdir+0x12f>
c0003679:	89 f8                	mov    eax,edi
c000367b:	e8 cd e7 ff ff       	call   c0001e4d <xdir_sum>
c0003680:	89 c1                	mov    ecx,eax
c0003682:	8d 47 02             	lea    eax,[edi+0x2]
c0003685:	e8 f5 e2 ff ff       	call   c000197f <ld_word>
c000368a:	66 39 c1             	cmp    cx,ax
c000368d:	74 05                	je     c0003694 <load_xdir+0x12f>
c000368f:	bb 02 00 00 00       	mov    ebx,0x2
c0003694:	83 c4 1c             	add    esp,0x1c
c0003697:	89 d8                	mov    eax,ebx
c0003699:	5b                   	pop    ebx
c000369a:	5e                   	pop    esi
c000369b:	5f                   	pop    edi
c000369c:	5d                   	pop    ebp
c000369d:	c3                   	ret    

c000369e <load_obj_xdir>:
c000369e:	53                   	push   ebx
c000369f:	89 c3                	mov    ebx,eax
c00036a1:	83 ec 08             	sub    esp,0x8
c00036a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00036a6:	89 03                	mov    DWORD PTR [ebx],eax
c00036a8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036ae:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b1:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036be:	30 c0                	xor    al,al
c00036c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036c7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036cf:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036d2:	e8 04 f8 ff ff       	call   c0002edb <dir_sdi>
c00036d7:	85 c0                	test   eax,eax
c00036d9:	75 0b                	jne    c00036e6 <load_obj_xdir+0x48>
c00036db:	89 d8                	mov    eax,ebx
c00036dd:	83 c4 08             	add    esp,0x8
c00036e0:	5b                   	pop    ebx
c00036e1:	e9 7f fe ff ff       	jmp    c0003565 <load_xdir>
c00036e6:	83 c4 08             	add    esp,0x8
c00036e9:	5b                   	pop    ebx
c00036ea:	c3                   	ret    

c00036eb <dir_read>:
c00036eb:	55                   	push   ebp
c00036ec:	bd 04 00 00 00       	mov    ebp,0x4
c00036f1:	57                   	push   edi
c00036f2:	56                   	push   esi
c00036f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00036f8:	53                   	push   ebx
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 ec 1c             	sub    esp,0x1c
c00036fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003702:	8b 38                	mov    edi,DWORD PTR [eax]
c0003704:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003709:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000370c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000370f:	89 c8                	mov    eax,ecx
c0003711:	09 d0                	or     eax,edx
c0003713:	0f 84 25 01 00 00    	je     c000383e <dir_read+0x153>
c0003719:	89 f8                	mov    eax,edi
c000371b:	e8 3d ea ff ff       	call   c000215d <move_window>
c0003720:	89 c5                	mov    ebp,eax
c0003722:	85 c0                	test   eax,eax
c0003724:	0f 85 23 01 00 00    	jne    c000384d <dir_read+0x162>
c000372a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000372d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000372f:	84 c9                	test   cl,cl
c0003731:	0f 84 11 01 00 00    	je     c0003848 <dir_read+0x15d>
c0003737:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000373a:	75 48                	jne    c0003784 <dir_read+0x99>
c000373c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003741:	74 10                	je     c0003753 <dir_read+0x68>
c0003743:	80 f9 83             	cmp    cl,0x83
c0003746:	0f 85 dd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000374c:	31 ed                	xor    ebp,ebp
c000374e:	e9 08 01 00 00       	jmp    c000385b <dir_read+0x170>
c0003753:	80 f9 85             	cmp    cl,0x85
c0003756:	0f 85 cd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000375c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000375f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003762:	89 d8                	mov    eax,ebx
c0003764:	e8 fc fd ff ff       	call   c0003565 <load_xdir>
c0003769:	89 c5                	mov    ebp,eax
c000376b:	85 c0                	test   eax,eax
c000376d:	0f 85 da 00 00 00    	jne    c000384d <dir_read+0x162>
c0003773:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003776:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003779:	83 e0 3f             	and    eax,0x3f
c000377c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000377f:	e9 d7 00 00 00       	jmp    c000385b <dir_read+0x170>
c0003784:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003787:	83 e0 3f             	and    eax,0x3f
c000378a:	80 f9 2e             	cmp    cl,0x2e
c000378d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003791:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003794:	0f 84 8a 00 00 00    	je     c0003824 <dir_read+0x139>
c000379a:	80 f9 e5             	cmp    cl,0xe5
c000379d:	0f 84 81 00 00 00    	je     c0003824 <dir_read+0x139>
c00037a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037a7:	83 e0 1f             	and    eax,0x1f
c00037aa:	83 f8 08             	cmp    eax,0x8
c00037ad:	0f 94 c0             	sete   al
c00037b0:	0f b6 c0             	movzx  eax,al
c00037b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037b7:	75 6b                	jne    c0003824 <dir_read+0x139>
c00037b9:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037be:	75 44                	jne    c0003804 <dir_read+0x119>
c00037c0:	f6 c1 40             	test   cl,0x40
c00037c3:	74 12                	je     c00037d7 <dir_read+0xec>
c00037c5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037c8:	83 e1 bf             	and    ecx,0xffffffbf
c00037cb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037cf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037d2:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037d5:	eb 06                	jmp    c00037dd <dir_read+0xf2>
c00037d7:	89 f0                	mov    eax,esi
c00037d9:	38 c8                	cmp    al,cl
c00037db:	75 47                	jne    c0003824 <dir_read+0x139>
c00037dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037e1:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e6:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037e9:	75 3e                	jne    c0003829 <dir_read+0x13e>
c00037eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037ef:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f2:	e8 8a e4 ff ff       	call   c0001c81 <pick_lfn>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	74 2e                	je     c0003829 <dir_read+0x13e>
c00037fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00037ff:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003802:	eb 25                	jmp    c0003829 <dir_read+0x13e>
c0003804:	89 f0                	mov    eax,esi
c0003806:	84 c0                	test   al,al
c0003808:	75 11                	jne    c000381b <dir_read+0x130>
c000380a:	89 d0                	mov    eax,edx
c000380c:	e8 2a e6 ff ff       	call   c0001e3b <sum_sfn>
c0003811:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003815:	0f 84 31 ff ff ff    	je     c000374c <dir_read+0x61>
c000381b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003822:	eb 37                	jmp    c000385b <dir_read+0x170>
c0003824:	be ff ff ff ff       	mov    esi,0xffffffff
c0003829:	31 d2                	xor    edx,edx
c000382b:	89 d8                	mov    eax,ebx
c000382d:	e8 01 fc ff ff       	call   c0003433 <dir_next>
c0003832:	89 c5                	mov    ebp,eax
c0003834:	85 c0                	test   eax,eax
c0003836:	0f 84 cd fe ff ff    	je     c0003709 <dir_read+0x1e>
c000383c:	eb 0f                	jmp    c000384d <dir_read+0x162>
c000383e:	85 ed                	test   ebp,ebp
c0003840:	0f 84 06 ff ff ff    	je     c000374c <dir_read+0x61>
c0003846:	eb 05                	jmp    c000384d <dir_read+0x162>
c0003848:	bd 04 00 00 00       	mov    ebp,0x4
c000384d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003854:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000385b:	83 c4 1c             	add    esp,0x1c
c000385e:	89 e8                	mov    eax,ebp
c0003860:	5b                   	pop    ebx
c0003861:	5e                   	pop    esi
c0003862:	5f                   	pop    edi
c0003863:	5d                   	pop    ebp
c0003864:	c3                   	ret    

c0003865 <dir_alloc>:
c0003865:	55                   	push   ebp
c0003866:	89 d5                	mov    ebp,edx
c0003868:	57                   	push   edi
c0003869:	31 d2                	xor    edx,edx
c000386b:	56                   	push   esi
c000386c:	53                   	push   ebx
c000386d:	89 c3                	mov    ebx,eax
c000386f:	83 ec 0c             	sub    esp,0xc
c0003872:	8b 38                	mov    edi,DWORD PTR [eax]
c0003874:	e8 62 f6 ff ff       	call   c0002edb <dir_sdi>
c0003879:	85 c0                	test   eax,eax
c000387b:	75 4e                	jne    c00038cb <dir_alloc+0x66>
c000387d:	31 f6                	xor    esi,esi
c000387f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003882:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003885:	89 f8                	mov    eax,edi
c0003887:	e8 d1 e8 ff ff       	call   c000215d <move_window>
c000388c:	85 c0                	test   eax,eax
c000388e:	75 3b                	jne    c00038cb <dir_alloc+0x66>
c0003890:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003893:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003896:	8a 12                	mov    dl,BYTE PTR [edx]
c0003898:	75 07                	jne    c00038a1 <dir_alloc+0x3c>
c000389a:	f7 d2                	not    edx
c000389c:	c0 ea 07             	shr    dl,0x7
c000389f:	eb 0d                	jmp    c00038ae <dir_alloc+0x49>
c00038a1:	84 d2                	test   dl,dl
c00038a3:	0f 94 c1             	sete   cl
c00038a6:	80 fa e5             	cmp    dl,0xe5
c00038a9:	0f 94 c2             	sete   dl
c00038ac:	09 ca                	or     edx,ecx
c00038ae:	84 d2                	test   dl,dl
c00038b0:	74 07                	je     c00038b9 <dir_alloc+0x54>
c00038b2:	46                   	inc    esi
c00038b3:	39 ee                	cmp    esi,ebp
c00038b5:	75 04                	jne    c00038bb <dir_alloc+0x56>
c00038b7:	eb 1c                	jmp    c00038d5 <dir_alloc+0x70>
c00038b9:	31 f6                	xor    esi,esi
c00038bb:	ba 01 00 00 00       	mov    edx,0x1
c00038c0:	89 d8                	mov    eax,ebx
c00038c2:	e8 6c fb ff ff       	call   c0003433 <dir_next>
c00038c7:	85 c0                	test   eax,eax
c00038c9:	74 b4                	je     c000387f <dir_alloc+0x1a>
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	75 05                	jne    c00038d5 <dir_alloc+0x70>
c00038d0:	b8 07 00 00 00       	mov    eax,0x7
c00038d5:	83 c4 0c             	add    esp,0xc
c00038d8:	5b                   	pop    ebx
c00038d9:	5e                   	pop    esi
c00038da:	5f                   	pop    edi
c00038db:	5d                   	pop    ebp
c00038dc:	c3                   	ret    

c00038dd <store_xdir>:
c00038dd:	55                   	push   ebp
c00038de:	57                   	push   edi
c00038df:	89 c7                	mov    edi,eax
c00038e1:	56                   	push   esi
c00038e2:	53                   	push   ebx
c00038e3:	83 ec 0c             	sub    esp,0xc
c00038e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038e8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038eb:	89 e8                	mov    eax,ebp
c00038ed:	e8 5b e5 ff ff       	call   c0001e4d <xdir_sum>
c00038f2:	0f b7 d0             	movzx  edx,ax
c00038f5:	8d 45 02             	lea    eax,[ebp+0x2]
c00038f8:	e8 f4 e0 ff ff       	call   c00019f1 <st_word>
c00038fd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003901:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003904:	89 f8                	mov    eax,edi
c0003906:	e8 d0 f5 ff ff       	call   c0002edb <dir_sdi>
c000390b:	89 c6                	mov    esi,eax
c000390d:	85 f6                	test   esi,esi
c000390f:	75 3d                	jne    c000394e <store_xdir+0x71>
c0003911:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003914:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003917:	8b 07                	mov    eax,DWORD PTR [edi]
c0003919:	e8 3f e8 ff ff       	call   c000215d <move_window>
c000391e:	89 c6                	mov    esi,eax
c0003920:	85 c0                	test   eax,eax
c0003922:	75 2a                	jne    c000394e <store_xdir+0x71>
c0003924:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003927:	b9 20 00 00 00       	mov    ecx,0x20
c000392c:	89 ea                	mov    edx,ebp
c000392e:	e8 cb e0 ff ff       	call   c00019fe <mem_cpy>
c0003933:	8b 07                	mov    eax,DWORD PTR [edi]
c0003935:	85 db                	test   ebx,ebx
c0003937:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000393b:	74 11                	je     c000394e <store_xdir+0x71>
c000393d:	31 d2                	xor    edx,edx
c000393f:	89 f8                	mov    eax,edi
c0003941:	83 c5 20             	add    ebp,0x20
c0003944:	e8 ea fa ff ff       	call   c0003433 <dir_next>
c0003949:	4b                   	dec    ebx
c000394a:	89 c6                	mov    esi,eax
c000394c:	eb bf                	jmp    c000390d <store_xdir+0x30>
c000394e:	89 f0                	mov    eax,esi
c0003950:	83 fe 02             	cmp    esi,0x2
c0003953:	76 05                	jbe    c000395a <store_xdir+0x7d>
c0003955:	b8 02 00 00 00       	mov    eax,0x2
c000395a:	83 c4 0c             	add    esp,0xc
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <dir_remove>:
c0003962:	57                   	push   edi
c0003963:	56                   	push   esi
c0003964:	53                   	push   ebx
c0003965:	89 c3                	mov    ebx,eax
c0003967:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000396a:	8b 30                	mov    esi,DWORD PTR [eax]
c000396c:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000396f:	83 fa ff             	cmp    edx,0xffffffff
c0003972:	74 09                	je     c000397d <dir_remove+0x1b>
c0003974:	e8 62 f5 ff ff       	call   c0002edb <dir_sdi>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 41                	jne    c00039be <dir_remove+0x5c>
c000397d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003980:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003983:	89 f0                	mov    eax,esi
c0003985:	e8 d3 e7 ff ff       	call   c000215d <move_window>
c000398a:	85 c0                	test   eax,eax
c000398c:	75 26                	jne    c00039b4 <dir_remove+0x52>
c000398e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003991:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003994:	75 05                	jne    c000399b <dir_remove+0x39>
c0003996:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003999:	eb 03                	jmp    c000399e <dir_remove+0x3c>
c000399b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000399e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039a2:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039a5:	73 17                	jae    c00039be <dir_remove+0x5c>
c00039a7:	31 d2                	xor    edx,edx
c00039a9:	89 d8                	mov    eax,ebx
c00039ab:	e8 83 fa ff ff       	call   c0003433 <dir_next>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 c9                	je     c000397d <dir_remove+0x1b>
c00039b4:	83 f8 04             	cmp    eax,0x4
c00039b7:	75 05                	jne    c00039be <dir_remove+0x5c>
c00039b9:	b8 02 00 00 00       	mov    eax,0x2
c00039be:	5b                   	pop    ebx
c00039bf:	5e                   	pop    esi
c00039c0:	5f                   	pop    edi
c00039c1:	c3                   	ret    

c00039c2 <create_name>:
c00039c2:	55                   	push   ebp
c00039c3:	89 d5                	mov    ebp,edx
c00039c5:	57                   	push   edi
c00039c6:	89 c7                	mov    edi,eax
c00039c8:	56                   	push   esi
c00039c9:	31 f6                	xor    esi,esi
c00039cb:	53                   	push   ebx
c00039cc:	83 ec 3c             	sub    esp,0x3c
c00039cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039de:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039e2:	e8 72 e0 ff ff       	call   c0001a59 <tchar2uni>
c00039e7:	89 c3                	mov    ebx,eax
c00039e9:	83 f8 ff             	cmp    eax,0xffffffff
c00039ec:	75 0a                	jne    c00039f8 <create_name+0x36>
c00039ee:	b8 06 00 00 00       	mov    eax,0x6
c00039f3:	e9 9e 02 00 00       	jmp    c0003c96 <create_name+0x2d4>
c00039f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00039fd:	76 0c                	jbe    c0003a0b <create_name+0x49>
c00039ff:	c1 e8 10             	shr    eax,0x10
c0003a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a06:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a0a:	46                   	inc    esi
c0003a0b:	66 83 fb 1f          	cmp    bx,0x1f
c0003a0f:	76 4f                	jbe    c0003a60 <create_name+0x9e>
c0003a11:	66 83 fb 5c          	cmp    bx,0x5c
c0003a15:	74 35                	je     c0003a4c <create_name+0x8a>
c0003a17:	66 83 fb 2f          	cmp    bx,0x2f
c0003a1b:	74 2f                	je     c0003a4c <create_name+0x8a>
c0003a1d:	66 83 fb 7f          	cmp    bx,0x7f
c0003a21:	77 11                	ja     c0003a34 <create_name+0x72>
c0003a23:	0f b7 d3             	movzx  edx,bx
c0003a26:	b8 72 23 02 c0       	mov    eax,0xc0022372
c0003a2b:	e8 11 e0 ff ff       	call   c0001a41 <chk_chr>
c0003a30:	85 c0                	test   eax,eax
c0003a32:	75 ba                	jne    c00039ee <create_name+0x2c>
c0003a34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a3a:	77 b2                	ja     c00039ee <create_name+0x2c>
c0003a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a40:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a44:	46                   	inc    esi
c0003a45:	eb 97                	jmp    c00039de <create_name+0x1c>
c0003a47:	40                   	inc    eax
c0003a48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a50:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a52:	80 fa 2f             	cmp    dl,0x2f
c0003a55:	74 f0                	je     c0003a47 <create_name+0x85>
c0003a57:	80 fa 5c             	cmp    dl,0x5c
c0003a5a:	74 eb                	je     c0003a47 <create_name+0x85>
c0003a5c:	31 db                	xor    ebx,ebx
c0003a5e:	eb 02                	jmp    c0003a62 <create_name+0xa0>
c0003a60:	b3 04                	mov    bl,0x4
c0003a62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a66:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a69:	85 f6                	test   esi,esi
c0003a6b:	74 18                	je     c0003a85 <create_name+0xc3>
c0003a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a71:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a76:	66 83 f8 20          	cmp    ax,0x20
c0003a7a:	74 06                	je     c0003a82 <create_name+0xc0>
c0003a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0003a80:	75 03                	jne    c0003a85 <create_name+0xc3>
c0003a82:	4e                   	dec    esi
c0003a83:	eb e4                	jmp    c0003a69 <create_name+0xa7>
c0003a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a89:	31 ed                	xor    ebp,ebp
c0003a8b:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003a91:	85 f6                	test   esi,esi
c0003a93:	0f 84 55 ff ff ff    	je     c00039ee <create_name+0x2c>
c0003a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a9d:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aa0:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003aa4:	66 83 f8 20          	cmp    ax,0x20
c0003aa8:	75 04                	jne    c0003aae <create_name+0xec>
c0003aaa:	89 d5                	mov    ebp,edx
c0003aac:	eb eb                	jmp    c0003a99 <create_name+0xd7>
c0003aae:	85 ed                	test   ebp,ebp
c0003ab0:	75 06                	jne    c0003ab8 <create_name+0xf6>
c0003ab2:	66 83 f8 2e          	cmp    ax,0x2e
c0003ab6:	75 08                	jne    c0003ac0 <create_name+0xfe>
c0003ab8:	83 cb 03             	or     ebx,0x3
c0003abb:	eb 03                	jmp    c0003ac0 <create_name+0xfe>
c0003abd:	4e                   	dec    esi
c0003abe:	74 0c                	je     c0003acc <create_name+0x10a>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003aca:	75 f1                	jne    c0003abd <create_name+0xfb>
c0003acc:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ad1:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ad4:	ba 20 00 00 00       	mov    edx,0x20
c0003ad9:	e8 35 df ff ff       	call   c0001a13 <mem_set>
c0003ade:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ae6:	31 c9                	xor    ecx,ecx
c0003ae8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003aed:	8d 45 01             	lea    eax,[ebp+0x1]
c0003af0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af8:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003afc:	66 85 ed             	test   bp,bp
c0003aff:	0f 84 30 01 00 00    	je     c0003c35 <create_name+0x273>
c0003b05:	66 83 fd 20          	cmp    bp,0x20
c0003b09:	74 10                	je     c0003b1b <create_name+0x159>
c0003b0b:	66 83 fd 2e          	cmp    bp,0x2e
c0003b0f:	75 13                	jne    c0003b24 <create_name+0x162>
c0003b11:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b15:	0f 84 6b 01 00 00    	je     c0003c86 <create_name+0x2c4>
c0003b1b:	83 cb 03             	or     ebx,0x3
c0003b1e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b22:	eb c9                	jmp    c0003aed <create_name+0x12b>
c0003b24:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b28:	73 0b                	jae    c0003b35 <create_name+0x173>
c0003b2a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b2e:	75 47                	jne    c0003b77 <create_name+0x1b5>
c0003b30:	e9 51 01 00 00       	jmp    c0003c86 <create_name+0x2c4>
c0003b35:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b3a:	75 10                	jne    c0003b4c <create_name+0x18a>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x273>
c0003b4c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x19d>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x273>
c0003b5f:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b64:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b68:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb a7                	jmp    c0003b1e <create_name+0x15c>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x223>
c0003b7d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b81:	88 da                	mov    dl,bl
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 81 48 00 00       	call   c0008418 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1f2>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad c0 22 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffddd40]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x21c>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x21c>
c0003bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x20d>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bca:	e9 4f ff ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x267>
c0003bde:	88 d3                	mov    bl,dl
c0003be0:	66 85 ed             	test   bp,bp
c0003be3:	74 19                	je     c0003bfe <create_name+0x23c>
c0003be5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003be9:	0f b7 d5             	movzx  edx,bp
c0003bec:	b8 7b 23 02 c0       	mov    eax,0xc002237b
c0003bf1:	e8 4b de ff ff       	call   c0001a41 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x246>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x267>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x256>
c0003c11:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x267>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x267>
c0003c21:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 e9 fe ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x27d>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x289>
c0003c46:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x29f>
c0003c56:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x2a4>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2bd>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2bd>
c0003c6b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2b3>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2bd>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	eb 10                	jmp    c0003c96 <create_name+0x2d4>
c0003c86:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c8b:	0f 85 ce fe ff ff    	jne    c0003b5f <create_name+0x19d>
c0003c91:	e9 a6 fe ff ff       	jmp    c0003b3c <create_name+0x17a>
c0003c96:	83 c4 3c             	add    esp,0x3c
c0003c99:	5b                   	pop    ebx
c0003c9a:	5e                   	pop    esi
c0003c9b:	5f                   	pop    edi
c0003c9c:	5d                   	pop    ebp
c0003c9d:	c3                   	ret    

c0003c9e <xname_sum>:
c0003c9e:	56                   	push   esi
c0003c9f:	53                   	push   ebx
c0003ca0:	89 c6                	mov    esi,eax
c0003ca2:	51                   	push   ecx
c0003ca3:	31 db                	xor    ebx,ebx
c0003ca5:	83 c6 02             	add    esi,0x2
c0003ca8:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cac:	66 85 c0             	test   ax,ax
c0003caf:	74 1f                	je     c0003cd0 <xname_sum+0x32>
c0003cb1:	83 ec 0c             	sub    esp,0xc
c0003cb4:	66 d1 cb             	ror    bx,1
c0003cb7:	50                   	push   eax
c0003cb8:	e8 67 48 00 00       	call   c0008524 <ff_wtoupper>
c0003cbd:	83 c4 10             	add    esp,0x10
c0003cc0:	0f b6 d0             	movzx  edx,al
c0003cc3:	66 c1 e8 08          	shr    ax,0x8
c0003cc7:	01 d3                	add    ebx,edx
c0003cc9:	66 d1 cb             	ror    bx,1
c0003ccc:	01 c3                	add    ebx,eax
c0003cce:	eb d5                	jmp    c0003ca5 <xname_sum+0x7>
c0003cd0:	89 d8                	mov    eax,ebx
c0003cd2:	5a                   	pop    edx
c0003cd3:	5b                   	pop    ebx
c0003cd4:	5e                   	pop    esi
c0003cd5:	c3                   	ret    

c0003cd6 <create_xdir>:
c0003cd6:	55                   	push   ebp
c0003cd7:	b9 40 00 00 00       	mov    ecx,0x40
c0003cdc:	57                   	push   edi
c0003cdd:	bd 01 00 00 00       	mov    ebp,0x1
c0003ce2:	56                   	push   esi
c0003ce3:	31 ff                	xor    edi,edi
c0003ce5:	53                   	push   ebx
c0003ce6:	be 40 00 00 00       	mov    esi,0x40
c0003ceb:	89 c3                	mov    ebx,eax
c0003ced:	83 ec 1c             	sub    esp,0x1c
c0003cf0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003cf4:	31 d2                	xor    edx,edx
c0003cf6:	e8 18 dd ff ff       	call   c0001a13 <mem_set>
c0003cfb:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cfe:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d02:	31 c9                	xor    ecx,ecx
c0003d04:	8d 46 01             	lea    eax,[esi+0x1]
c0003d07:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d0b:	83 c6 02             	add    esi,0x2
c0003d0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d12:	66 85 ed             	test   bp,bp
c0003d15:	74 12                	je     c0003d29 <create_xdir+0x53>
c0003d17:	0f b6 c1             	movzx  eax,cl
c0003d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d1e:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d22:	66 83 fd 01          	cmp    bp,0x1
c0003d26:	80 d9 ff             	sbb    cl,0xff
c0003d29:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d2c:	0f b7 d5             	movzx  edx,bp
c0003d2f:	83 c6 02             	add    esi,0x2
c0003d32:	e8 ba dc ff ff       	call   c00019f1 <st_word>
c0003d37:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d3d:	75 d3                	jne    c0003d12 <create_xdir+0x3c>
c0003d3f:	8d 47 01             	lea    eax,[edi+0x1]
c0003d42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d4a:	0f b6 c1             	movzx  eax,cl
c0003d4d:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d52:	74 07                	je     c0003d5b <create_xdir+0x85>
c0003d54:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d59:	eb a9                	jmp    c0003d04 <create_xdir+0x2e>
c0003d5b:	8d 47 02             	lea    eax,[edi+0x2]
c0003d5e:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d61:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d64:	89 d0                	mov    eax,edx
c0003d66:	e8 33 ff ff ff       	call   c0003c9e <xname_sum>
c0003d6b:	83 c4 1c             	add    esp,0x1c
c0003d6e:	0f b7 d0             	movzx  edx,ax
c0003d71:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d74:	5b                   	pop    ebx
c0003d75:	5e                   	pop    esi
c0003d76:	5f                   	pop    edi
c0003d77:	5d                   	pop    ebp
c0003d78:	e9 74 dc ff ff       	jmp    c00019f1 <st_word>

c0003d7d <cmp_lfn>:
c0003d7d:	55                   	push   ebp
c0003d7e:	57                   	push   edi
c0003d7f:	89 d7                	mov    edi,edx
c0003d81:	56                   	push   esi
c0003d82:	53                   	push   ebx
c0003d83:	83 ec 1c             	sub    esp,0x1c
c0003d86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d8d:	e8 ed db ff ff       	call   c000197f <ld_word>
c0003d92:	66 85 c0             	test   ax,ax
c0003d95:	74 07                	je     c0003d9e <cmp_lfn+0x21>
c0003d97:	31 c0                	xor    eax,eax
c0003d99:	e9 9a 00 00 00       	jmp    c0003e38 <cmp_lfn+0xbb>
c0003d9e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003da0:	bd 01 00 00 00       	mov    ebp,0x1
c0003da5:	83 e3 3f             	and    ebx,0x3f
c0003da8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003db0:	4b                   	dec    ebx
c0003db1:	6b db 0d             	imul   ebx,ebx,0xd
c0003db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003db8:	0f b6 80 40 23 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddcc0]
c0003dbf:	01 f8                	add    eax,edi
c0003dc1:	e8 b9 db ff ff       	call   c000197f <ld_word>
c0003dc6:	66 85 ed             	test   bp,bp
c0003dc9:	89 c6                	mov    esi,eax
c0003dcb:	74 3c                	je     c0003e09 <cmp_lfn+0x8c>
c0003dcd:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dd3:	77 c2                	ja     c0003d97 <cmp_lfn+0x1a>
c0003dd5:	83 ec 0c             	sub    esp,0xc
c0003dd8:	0f b7 c0             	movzx  eax,ax
c0003ddb:	50                   	push   eax
c0003ddc:	e8 43 47 00 00       	call   c0008524 <ff_wtoupper>
c0003de1:	89 c5                	mov    ebp,eax
c0003de3:	8d 43 01             	lea    eax,[ebx+0x1]
c0003de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dee:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003df2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003df5:	e8 2a 47 00 00       	call   c0008524 <ff_wtoupper>
c0003dfa:	83 c4 10             	add    esp,0x10
c0003dfd:	39 c5                	cmp    ebp,eax
c0003dff:	75 96                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e01:	89 f5                	mov    ebp,esi
c0003e03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e07:	eb 04                	jmp    c0003e0d <cmp_lfn+0x90>
c0003e09:	66 46                	inc    si
c0003e0b:	75 8a                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e0d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e11:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e16:	75 9c                	jne    c0003db4 <cmp_lfn+0x37>
c0003e18:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e1b:	74 16                	je     c0003e33 <cmp_lfn+0xb6>
c0003e1d:	66 85 ed             	test   bp,bp
c0003e20:	74 11                	je     c0003e33 <cmp_lfn+0xb6>
c0003e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e26:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e2b:	0f 94 c0             	sete   al
c0003e2e:	0f b6 c0             	movzx  eax,al
c0003e31:	eb 05                	jmp    c0003e38 <cmp_lfn+0xbb>
c0003e33:	b8 01 00 00 00       	mov    eax,0x1
c0003e38:	83 c4 1c             	add    esp,0x1c
c0003e3b:	5b                   	pop    ebx
c0003e3c:	5e                   	pop    esi
c0003e3d:	5f                   	pop    edi
c0003e3e:	5d                   	pop    ebp
c0003e3f:	c3                   	ret    

c0003e40 <dir_find>:
c0003e40:	55                   	push   ebp
c0003e41:	31 d2                	xor    edx,edx
c0003e43:	57                   	push   edi
c0003e44:	56                   	push   esi
c0003e45:	53                   	push   ebx
c0003e46:	89 c3                	mov    ebx,eax
c0003e48:	83 ec 1c             	sub    esp,0x1c
c0003e4b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e4d:	e8 89 f0 ff ff       	call   c0002edb <dir_sdi>
c0003e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e55:	85 c0                	test   eax,eax
c0003e57:	0f 85 9e 01 00 00    	jne    c0003ffb <dir_find+0x1bb>
c0003e5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e60:	0f 85 8d 00 00 00    	jne    c0003ef3 <dir_find+0xb3>
c0003e66:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e69:	e8 30 fe ff ff       	call   c0003c9e <xname_sum>
c0003e6e:	89 c7                	mov    edi,eax
c0003e70:	31 d2                	xor    edx,edx
c0003e72:	89 d8                	mov    eax,ebx
c0003e74:	e8 72 f8 ff ff       	call   c00036eb <dir_read>
c0003e79:	85 c0                	test   eax,eax
c0003e7b:	0f 85 5e 01 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003e81:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e84:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e87:	e8 f3 da ff ff       	call   c000197f <ld_word>
c0003e8c:	66 39 f8             	cmp    ax,di
c0003e8f:	75 df                	jne    c0003e70 <dir_find+0x30>
c0003e91:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003e94:	31 ed                	xor    ebp,ebp
c0003e96:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003e9a:	ba 40 00 00 00       	mov    edx,0x40
c0003e9f:	89 e9                	mov    ecx,ebp
c0003ea1:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003ea5:	0f 84 42 01 00 00    	je     c0003fed <dir_find+0x1ad>
c0003eab:	f6 c2 1f             	test   dl,0x1f
c0003eae:	75 03                	jne    c0003eb3 <dir_find+0x73>
c0003eb0:	83 c2 02             	add    edx,0x2
c0003eb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003eb7:	89 d0                	mov    eax,edx
c0003eb9:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ebc:	e8 be da ff ff       	call   c000197f <ld_word>
c0003ec1:	83 ec 0c             	sub    esp,0xc
c0003ec4:	0f b7 c0             	movzx  eax,ax
c0003ec7:	50                   	push   eax
c0003ec8:	e8 57 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ed1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ed4:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0003edb:	e8 44 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ee0:	83 c4 10             	add    esp,0x10
c0003ee3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ee7:	75 87                	jne    c0003e70 <dir_find+0x30>
c0003ee9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003eed:	45                   	inc    ebp
c0003eee:	83 c2 02             	add    edx,0x2
c0003ef1:	eb ac                	jmp    c0003e9f <dir_find+0x5f>
c0003ef3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003efa:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eff:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f04:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f07:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f0a:	89 f0                	mov    eax,esi
c0003f0c:	e8 4c e2 ff ff       	call   c000215d <move_window>
c0003f11:	85 c0                	test   eax,eax
c0003f13:	0f 85 c6 00 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003f19:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f1c:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f1f:	84 c9                	test   cl,cl
c0003f21:	0f 84 bd 00 00 00    	je     c0003fe4 <dir_find+0x1a4>
c0003f27:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f2a:	88 d0                	mov    al,dl
c0003f2c:	83 e0 3f             	and    eax,0x3f
c0003f2f:	80 f9 e5             	cmp    cl,0xe5
c0003f32:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f35:	0f 84 87 00 00 00    	je     c0003fc2 <dir_find+0x182>
c0003f3b:	80 e2 08             	and    dl,0x8
c0003f3e:	74 06                	je     c0003f46 <dir_find+0x106>
c0003f40:	3c 0f                	cmp    al,0xf
c0003f42:	75 7e                	jne    c0003fc2 <dir_find+0x182>
c0003f44:	eb 04                	jmp    c0003f4a <dir_find+0x10a>
c0003f46:	3c 0f                	cmp    al,0xf
c0003f48:	75 4c                	jne    c0003f96 <dir_find+0x156>
c0003f4a:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f4e:	75 7e                	jne    c0003fce <dir_find+0x18e>
c0003f50:	f6 c1 40             	test   cl,0x40
c0003f53:	74 12                	je     c0003f67 <dir_find+0x127>
c0003f55:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f58:	83 e1 bf             	and    ecx,0xffffffbf
c0003f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f62:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f65:	eb 06                	jmp    c0003f6d <dir_find+0x12d>
c0003f67:	89 f8                	mov    eax,edi
c0003f69:	38 c8                	cmp    al,cl
c0003f6b:	75 5c                	jne    c0003fc9 <dir_find+0x189>
c0003f6d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f71:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f76:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f79:	75 53                	jne    c0003fce <dir_find+0x18e>
c0003f7b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f7f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f82:	89 ea                	mov    edx,ebp
c0003f84:	e8 f4 fd ff ff       	call   c0003d7d <cmp_lfn>
c0003f89:	85 c0                	test   eax,eax
c0003f8b:	74 41                	je     c0003fce <dir_find+0x18e>
c0003f8d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003f91:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f94:	eb 38                	jmp    c0003fce <dir_find+0x18e>
c0003f96:	89 f8                	mov    eax,edi
c0003f98:	84 c0                	test   al,al
c0003f9a:	75 0d                	jne    c0003fa9 <dir_find+0x169>
c0003f9c:	89 e8                	mov    eax,ebp
c0003f9e:	e8 98 de ff ff       	call   c0001e3b <sum_sfn>
c0003fa3:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fa7:	74 52                	je     c0003ffb <dir_find+0x1bb>
c0003fa9:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fad:	75 13                	jne    c0003fc2 <dir_find+0x182>
c0003faf:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fb2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fb7:	89 e8                	mov    eax,ebp
c0003fb9:	e8 60 da ff ff       	call   c0001a1e <mem_cmp>
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	74 39                	je     c0003ffb <dir_find+0x1bb>
c0003fc2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fce:	31 d2                	xor    edx,edx
c0003fd0:	89 d8                	mov    eax,ebx
c0003fd2:	e8 5c f4 ff ff       	call   c0003433 <dir_next>
c0003fd7:	85 c0                	test   eax,eax
c0003fd9:	0f 84 25 ff ff ff    	je     c0003f04 <dir_find+0xc4>
c0003fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe2:	eb 17                	jmp    c0003ffb <dir_find+0x1bb>
c0003fe4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003feb:	eb 0e                	jmp    c0003ffb <dir_find+0x1bb>
c0003fed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ff0:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0003ff5:	0f 85 75 fe ff ff    	jne    c0003e70 <dir_find+0x30>
c0003ffb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003ffe:	83 c4 1c             	add    esp,0x1c
c0004001:	5b                   	pop    ebx
c0004002:	5e                   	pop    esi
c0004003:	5f                   	pop    edi
c0004004:	5d                   	pop    ebp
c0004005:	c3                   	ret    

c0004006 <dir_register>:
c0004006:	55                   	push   ebp
c0004007:	57                   	push   edi
c0004008:	56                   	push   esi
c0004009:	be 06 00 00 00       	mov    esi,0x6
c000400e:	53                   	push   ebx
c000400f:	83 ec 6c             	sub    esp,0x6c
c0004012:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004016:	0f 85 62 02 00 00    	jne    c000427e <dir_register+0x278>
c000401c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000401e:	31 ff                	xor    edi,edi
c0004020:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004023:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004028:	74 03                	je     c000402d <dir_register+0x27>
c000402a:	47                   	inc    edi
c000402b:	eb f6                	jmp    c0004023 <dir_register+0x1d>
c000402d:	89 c3                	mov    ebx,eax
c000402f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004033:	0f 85 e1 00 00 00    	jne    c000411a <dir_register+0x114>
c0004039:	83 c7 0e             	add    edi,0xe
c000403c:	b9 0f 00 00 00       	mov    ecx,0xf
c0004041:	89 f8                	mov    eax,edi
c0004043:	31 d2                	xor    edx,edx
c0004045:	f7 f1                	div    ecx
c0004047:	8d 50 02             	lea    edx,[eax+0x2]
c000404a:	89 c7                	mov    edi,eax
c000404c:	89 d8                	mov    eax,ebx
c000404e:	e8 12 f8 ff ff       	call   c0003865 <dir_alloc>
c0004053:	89 c6                	mov    esi,eax
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 21 02 00 00    	jne    c000427e <dir_register+0x278>
c000405d:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004063:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004066:	c1 e7 05             	shl    edi,0x5
c0004069:	29 f8                	sub    eax,edi
c000406b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000406e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004071:	a8 04                	test   al,0x4
c0004073:	0f 84 91 00 00 00    	je     c000410a <dir_register+0x104>
c0004079:	83 e0 fb             	and    eax,0xfffffffb
c000407c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000407f:	89 d8                	mov    eax,ebx
c0004081:	e8 25 ec ff ff       	call   c0002cab <fill_first_frag>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 85 ee 01 00 00    	jne    c000427c <dir_register+0x276>
c000408e:	83 c9 ff             	or     ecx,0xffffffff
c0004091:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004094:	89 d8                	mov    eax,ebx
c0004096:	e8 db eb ff ff       	call   c0002c76 <fill_last_frag>
c000409b:	85 c0                	test   eax,eax
c000409d:	0f 85 d9 01 00 00    	jne    c000427c <dir_register+0x276>
c00040a3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040a7:	74 61                	je     c000410a <dir_register+0x104>
c00040a9:	89 da                	mov    edx,ebx
c00040ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040af:	e8 ea f5 ff ff       	call   c000369e <load_obj_xdir>
c00040b4:	85 c0                	test   eax,eax
c00040b6:	0f 85 c0 01 00 00    	jne    c000427c <dir_register+0x276>
c00040bc:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040c0:	31 c9                	xor    ecx,ecx
c00040c2:	c1 e2 09             	shl    edx,0x9
c00040c5:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040c8:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040cb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040ce:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040d4:	83 c0 38             	add    eax,0x38
c00040d7:	e8 1c d9 ff ff       	call   c00019f8 <st_qword>
c00040dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040e2:	83 c0 28             	add    eax,0x28
c00040e5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040e8:	e8 0b d9 ff ff       	call   c00019f8 <st_qword>
c00040ed:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040f3:	83 c8 01             	or     eax,0x1
c00040f6:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040fd:	e8 db f7 ff ff       	call   c00038dd <store_xdir>
c0004102:	85 c0                	test   eax,eax
c0004104:	0f 85 72 01 00 00    	jne    c000427c <dir_register+0x276>
c000410a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000410d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004110:	e8 c1 fb ff ff       	call   c0003cd6 <create_xdir>
c0004115:	e9 64 01 00 00       	jmp    c000427e <dir_register+0x278>
c000411a:	8d 40 3c             	lea    eax,[eax+0x3c]
c000411d:	b9 0c 00 00 00       	mov    ecx,0xc
c0004122:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004126:	89 c2                	mov    edx,eax
c0004128:	8d 44 24 14          	lea    eax,[esp+0x14]
c000412c:	e8 cd d8 ff ff       	call   c00019fe <mem_cpy>
c0004131:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004136:	74 58                	je     c0004190 <dir_register+0x18a>
c0004138:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000413c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004144:	83 ec 0c             	sub    esp,0xc
c0004147:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000414a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000414e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004156:	e8 24 dc ff ff       	call   c0001d7f <gen_numname>
c000415b:	89 d8                	mov    eax,ebx
c000415d:	e8 de fc ff ff       	call   c0003e40 <dir_find>
c0004162:	83 c4 10             	add    esp,0x10
c0004165:	89 c6                	mov    esi,eax
c0004167:	85 c0                	test   eax,eax
c0004169:	75 15                	jne    c0004180 <dir_register+0x17a>
c000416b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000416f:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004174:	75 ce                	jne    c0004144 <dir_register+0x13e>
c0004176:	be 07 00 00 00       	mov    esi,0x7
c000417b:	e9 fe 00 00 00       	jmp    c000427e <dir_register+0x278>
c0004180:	83 f8 04             	cmp    eax,0x4
c0004183:	0f 85 f5 00 00 00    	jne    c000427e <dir_register+0x278>
c0004189:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000418d:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004190:	b9 01 00 00 00       	mov    ecx,0x1
c0004195:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000419a:	74 0f                	je     c00041ab <dir_register+0x1a5>
c000419c:	b9 0d 00 00 00       	mov    ecx,0xd
c00041a1:	8d 47 0c             	lea    eax,[edi+0xc]
c00041a4:	31 d2                	xor    edx,edx
c00041a6:	f7 f1                	div    ecx
c00041a8:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ab:	89 ca                	mov    edx,ecx
c00041ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b1:	89 d8                	mov    eax,ebx
c00041b3:	e8 ad f6 ff ff       	call   c0003865 <dir_alloc>
c00041b8:	89 c6                	mov    esi,eax
c00041ba:	85 c0                	test   eax,eax
c00041bc:	0f 85 bc 00 00 00    	jne    c000427e <dir_register+0x278>
c00041c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041c6:	49                   	dec    ecx
c00041c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041cb:	74 6a                	je     c0004237 <dir_register+0x231>
c00041cd:	89 c8                	mov    eax,ecx
c00041cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041d2:	c1 e0 05             	shl    eax,0x5
c00041d5:	29 c2                	sub    edx,eax
c00041d7:	89 d8                	mov    eax,ebx
c00041d9:	e8 fd ec ff ff       	call   c0002edb <dir_sdi>
c00041de:	89 c6                	mov    esi,eax
c00041e0:	85 c0                	test   eax,eax
c00041e2:	0f 85 96 00 00 00    	jne    c000427e <dir_register+0x278>
c00041e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041ec:	e8 4a dc ff ff       	call   c0001e3b <sum_sfn>
c00041f1:	0f b6 f8             	movzx  edi,al
c00041f4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041fa:	89 e8                	mov    eax,ebp
c00041fc:	e8 5c df ff ff       	call   c000215d <move_window>
c0004201:	89 c6                	mov    esi,eax
c0004203:	85 c0                	test   eax,eax
c0004205:	75 77                	jne    c000427e <dir_register+0x278>
c0004207:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000420c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004215:	57                   	push   edi
c0004216:	e8 e0 da ff ff       	call   c0001cfb <put_lfn>
c000421b:	31 d2                	xor    edx,edx
c000421d:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004221:	89 d8                	mov    eax,ebx
c0004223:	e8 0b f2 ff ff       	call   c0003433 <dir_next>
c0004228:	83 c4 10             	add    esp,0x10
c000422b:	89 c6                	mov    esi,eax
c000422d:	85 c0                	test   eax,eax
c000422f:	75 4d                	jne    c000427e <dir_register+0x278>
c0004231:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004235:	75 bd                	jne    c00041f4 <dir_register+0x1ee>
c0004237:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000423a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000423d:	89 e8                	mov    eax,ebp
c000423f:	e8 19 df ff ff       	call   c000215d <move_window>
c0004244:	89 c6                	mov    esi,eax
c0004246:	85 c0                	test   eax,eax
c0004248:	75 34                	jne    c000427e <dir_register+0x278>
c000424a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424d:	b9 20 00 00 00       	mov    ecx,0x20
c0004252:	31 d2                	xor    edx,edx
c0004254:	e8 ba d7 ff ff       	call   c0001a13 <mem_set>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004260:	b9 0b 00 00 00       	mov    ecx,0xb
c0004265:	e8 94 d7 ff ff       	call   c00019fe <mem_cpy>
c000426a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000426d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004270:	83 e0 18             	and    eax,0x18
c0004273:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004276:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000427a:	eb 02                	jmp    c000427e <dir_register+0x278>
c000427c:	89 c6                	mov    esi,eax
c000427e:	83 c4 6c             	add    esp,0x6c
c0004281:	89 f0                	mov    eax,esi
c0004283:	5b                   	pop    ebx
c0004284:	5e                   	pop    esi
c0004285:	5f                   	pop    edi
c0004286:	5d                   	pop    ebp
c0004287:	c3                   	ret    

c0004288 <sync_fs>:
c0004288:	56                   	push   esi
c0004289:	53                   	push   ebx
c000428a:	53                   	push   ebx
c000428b:	89 c3                	mov    ebx,eax
c000428d:	e8 37 de ff ff       	call   c00020c9 <sync_window>
c0004292:	85 c0                	test   eax,eax
c0004294:	0f 85 b1 00 00 00    	jne    c000434b <sync_fs+0xc3>
c000429a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000429d:	0f 85 8e 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042a3:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042a7:	0f 85 84 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042ad:	b9 00 02 00 00       	mov    ecx,0x200
c00042b2:	8d 73 54             	lea    esi,[ebx+0x54]
c00042b5:	31 d2                	xor    edx,edx
c00042b7:	89 f0                	mov    eax,esi
c00042b9:	e8 55 d7 ff ff       	call   c0001a13 <mem_set>
c00042be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042c4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042c9:	e8 23 d7 ff ff       	call   c00019f1 <st_word>
c00042ce:	ba 52 52 61 41       	mov    edx,0x41615252
c00042d3:	89 f0                	mov    eax,esi
c00042d5:	e8 1b d7 ff ff       	call   c00019f5 <st_dword>
c00042da:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042e0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042e5:	e8 0b d7 ff ff       	call   c00019f5 <st_dword>
c00042ea:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042ed:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042f3:	e8 fd d6 ff ff       	call   c00019f5 <st_dword>
c00042f8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042fb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004301:	e8 ef d6 ff ff       	call   c00019f5 <st_dword>
c0004306:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004309:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000430c:	83 c0 01             	add    eax,0x1
c000430f:	83 d2 00             	adc    edx,0x0
c0004312:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004315:	83 ec 0c             	sub    esp,0xc
c0004318:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000431b:	6a 01                	push   0x1
c000431d:	52                   	push   edx
c000431e:	50                   	push   eax
c000431f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004323:	56                   	push   esi
c0004324:	50                   	push   eax
c0004325:	e8 20 d6 ff ff       	call   c000194a <disk_write>
c000432a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000432e:	83 c4 20             	add    esp,0x20
c0004331:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004335:	51                   	push   ecx
c0004336:	6a 00                	push   0x0
c0004338:	6a 00                	push   0x0
c000433a:	50                   	push   eax
c000433b:	e8 20 d6 ff ff       	call   c0001960 <disk_ioctl>
c0004340:	83 c4 10             	add    esp,0x10
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 95 c0             	setne  al
c0004348:	0f b6 c0             	movzx  eax,al
c000434b:	5a                   	pop    edx
c000434c:	5b                   	pop    ebx
c000434d:	5e                   	pop    esi
c000434e:	c3                   	ret    

c000434f <create_partition>:
c000434f:	55                   	push   ebp
c0004350:	0f b6 c0             	movzx  eax,al
c0004353:	57                   	push   edi
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	83 ec 60             	sub    esp,0x60
c0004359:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000435d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004361:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004365:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004369:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000436d:	50                   	push   eax
c000436e:	6a 01                	push   0x1
c0004370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004374:	e8 e7 d5 ff ff       	call   c0001960 <disk_ioctl>
c0004379:	83 c4 10             	add    esp,0x10
c000437c:	85 c0                	test   eax,eax
c000437e:	74 0a                	je     c000438a <create_partition+0x3b>
c0004380:	b8 01 00 00 00       	mov    eax,0x1
c0004385:	e9 67 05 00 00       	jmp    c00048f1 <create_partition+0x5a2>
c000438a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000438e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004392:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004396:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000439a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000439f:	0f 86 ed 03 00 00    	jbe    c0004792 <create_partition+0x443>
c00043a5:	83 c0 df             	add    eax,0xffffffdf
c00043a8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043b0:	83 d2 ff             	adc    edx,0xffffffff
c00043b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043c3:	83 c0 bd             	add    eax,0xffffffbd
c00043c6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043cd:	83 d2 ff             	adc    edx,0xffffffff
c00043d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043e0:	be 22 00 00 00       	mov    esi,0x22
c00043e5:	31 ff                	xor    edi,edi
c00043e7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043ef:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043f7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004403:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004409:	75 0e                	jne    c0004419 <create_partition+0xca>
c000440b:	b9 00 02 00 00       	mov    ecx,0x200
c0004410:	31 d2                	xor    edx,edx
c0004412:	89 d8                	mov    eax,ebx
c0004414:	e8 fa d5 ff ff       	call   c0001a13 <mem_set>
c0004419:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000441d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004425:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004428:	0f 84 23 01 00 00    	je     c0004551 <create_partition+0x202>
c000442e:	89 f0                	mov    eax,esi
c0004430:	89 fa                	mov    edx,edi
c0004432:	05 ff 07 00 00       	add    eax,0x7ff
c0004437:	83 d2 00             	adc    edx,0x0
c000443a:	89 c1                	mov    ecx,eax
c000443c:	89 d7                	mov    edi,edx
c000443e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004444:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004448:	89 ce                	mov    esi,ecx
c000444a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000444e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004452:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004456:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004459:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000445d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004460:	b8 64 00 00 00       	mov    eax,0x64
c0004465:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004468:	b8 00 00 00 00       	mov    eax,0x0
c000446d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004471:	72 41                	jb     c00044b4 <create_partition+0x165>
c0004473:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000447b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000447f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004484:	01 c1                	add    ecx,eax
c0004486:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000448a:	f7 24 24             	mul    DWORD PTR [esp]
c000448d:	6a 00                	push   0x0
c000448f:	01 ca                	add    edx,ecx
c0004491:	6a 64                	push   0x64
c0004493:	52                   	push   edx
c0004494:	50                   	push   eax
c0004495:	e8 a6 cf 01 00       	call   c0021440 <__udivdi3>
c000449a:	83 c4 10             	add    esp,0x10
c000449d:	05 ff 07 00 00       	add    eax,0x7ff
c00044a2:	83 d2 00             	adc    edx,0x0
c00044a5:	89 c1                	mov    ecx,eax
c00044a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ab:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044bb:	01 f0                	add    eax,esi
c00044bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044c1:	11 fa                	adc    edx,edi
c00044c3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044c7:	19 d1                	sbb    ecx,edx
c00044c9:	73 2e                	jae    c00044f9 <create_partition+0x1aa>
c00044cb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044cf:	89 f8                	mov    eax,edi
c00044d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044d8:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044dc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044e4:	73 6b                	jae    c0004551 <create_partition+0x202>
c00044e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044ee:	29 f0                	sub    eax,esi
c00044f0:	19 fa                	sbb    edx,edi
c00044f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fd:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004500:	74 4f                	je     c0004551 <create_partition+0x202>
c0004502:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004505:	b9 10 00 00 00       	mov    ecx,0x10
c000450a:	ba 50 23 02 c0       	mov    edx,0xc0022350
c000450f:	e8 ea d4 ff ff       	call   c00019fe <mem_cpy>
c0004514:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004518:	b9 10 00 00 00       	mov    ecx,0x10
c000451d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004521:	e8 2c db ff ff       	call   c0002052 <make_rand>
c0004526:	89 f2                	mov    edx,esi
c0004528:	89 f9                	mov    ecx,edi
c000452a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000452e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004532:	e8 c1 d4 ff ff       	call   c00019f8 <st_qword>
c0004537:	03 34 24             	add    esi,DWORD PTR [esp]
c000453a:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004542:	89 f2                	mov    edx,esi
c0004544:	89 f9                	mov    ecx,edi
c0004546:	83 c2 ff             	add    edx,0xffffffff
c0004549:	83 d1 ff             	adc    ecx,0xffffffff
c000454c:	e8 a7 d4 ff ff       	call   c00019f8 <st_qword>
c0004551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004555:	83 e8 80             	sub    eax,0xffffff80
c0004558:	89 c5                	mov    ebp,eax
c000455a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000455e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004564:	75 6b                	jne    c00045d1 <create_partition+0x282>
c0004566:	45                   	inc    ebp
c0004567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000456b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004570:	e8 39 da ff ff       	call   c0001fae <crc32>
c0004575:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000457b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000457f:	75 e5                	jne    c0004566 <create_partition+0x217>
c0004581:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004585:	31 d2                	xor    edx,edx
c0004587:	83 ec 0c             	sub    esp,0xc
c000458a:	c1 ed 09             	shr    ebp,0x9
c000458d:	6a 01                	push   0x1
c000458f:	8d 45 02             	lea    eax,[ebp+0x2]
c0004592:	52                   	push   edx
c0004593:	50                   	push   eax
c0004594:	53                   	push   ebx
c0004595:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004599:	e8 ac d3 ff ff       	call   c000194a <disk_write>
c000459e:	83 c4 20             	add    esp,0x20
c00045a1:	85 c0                	test   eax,eax
c00045a3:	0f 85 d7 fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045a9:	83 ec 0c             	sub    esp,0xc
c00045ac:	31 d2                	xor    edx,edx
c00045ae:	6a 01                	push   0x1
c00045b0:	89 e8                	mov    eax,ebp
c00045b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045b6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045ba:	52                   	push   edx
c00045bb:	50                   	push   eax
c00045bc:	53                   	push   ebx
c00045bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045c1:	e8 84 d3 ff ff       	call   c000194a <disk_write>
c00045c6:	83 c4 20             	add    esp,0x20
c00045c9:	85 c0                	test   eax,eax
c00045cb:	0f 85 af fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045d9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045de:	74 0d                	je     c00045ed <create_partition+0x29e>
c00045e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e8:	e9 12 fe ff ff       	jmp    c00043ff <create_partition+0xb0>
c00045ed:	31 d2                	xor    edx,edx
c00045ef:	b9 00 02 00 00       	mov    ecx,0x200
c00045f4:	89 d8                	mov    eax,ebx
c00045f6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045f9:	e8 15 d4 ff ff       	call   c0001a13 <mem_set>
c00045fe:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004601:	b9 10 00 00 00       	mov    ecx,0x10
c0004606:	ba 40 22 02 c0       	mov    edx,0xc0022240
c000460b:	89 d8                	mov    eax,ebx
c000460d:	e8 ec d3 ff ff       	call   c00019fe <mem_cpy>
c0004612:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004616:	8d 43 58             	lea    eax,[ebx+0x58]
c0004619:	f7 d2                	not    edx
c000461b:	e8 d5 d3 ff ff       	call   c00019f5 <st_dword>
c0004620:	8d 43 18             	lea    eax,[ebx+0x18]
c0004623:	31 c9                	xor    ecx,ecx
c0004625:	89 04 24             	mov    DWORD PTR [esp],eax
c0004628:	ba 01 00 00 00       	mov    edx,0x1
c000462d:	e8 c6 d3 ff ff       	call   c00019f8 <st_qword>
c0004632:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004636:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000463a:	83 c2 ff             	add    edx,0xffffffff
c000463d:	89 e8                	mov    eax,ebp
c000463f:	83 d1 ff             	adc    ecx,0xffffffff
c0004642:	e8 b1 d3 ff ff       	call   c00019f8 <st_qword>
c0004647:	31 c9                	xor    ecx,ecx
c0004649:	8d 43 28             	lea    eax,[ebx+0x28]
c000464c:	ba 22 00 00 00       	mov    edx,0x22
c0004651:	e8 a2 d3 ff ff       	call   c00019f8 <st_qword>
c0004656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000465a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000465e:	83 c2 de             	add    edx,0xffffffde
c0004661:	8d 43 30             	lea    eax,[ebx+0x30]
c0004664:	83 d1 ff             	adc    ecx,0xffffffff
c0004667:	31 f6                	xor    esi,esi
c0004669:	e8 8a d3 ff ff       	call   c00019f8 <st_qword>
c000466e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004671:	ba 80 00 00 00       	mov    edx,0x80
c0004676:	e8 7a d3 ff ff       	call   c00019f5 <st_dword>
c000467b:	8d 43 50             	lea    eax,[ebx+0x50]
c000467e:	ba 80 00 00 00       	mov    edx,0x80
c0004683:	e8 6d d3 ff ff       	call   c00019f5 <st_dword>
c0004688:	ba 02 00 00 00       	mov    edx,0x2
c000468d:	89 f8                	mov    eax,edi
c000468f:	e8 61 d3 ff ff       	call   c00019f5 <st_dword>
c0004694:	8d 53 38             	lea    edx,[ebx+0x38]
c0004697:	b9 10 00 00 00       	mov    ecx,0x10
c000469c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046a0:	e8 ad d9 ff ff       	call   c0002052 <make_rand>
c00046a5:	83 c8 ff             	or     eax,0xffffffff
c00046a8:	46                   	inc    esi
c00046a9:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046ae:	e8 fb d8 ff ff       	call   c0001fae <crc32>
c00046b3:	83 fe 5c             	cmp    esi,0x5c
c00046b6:	75 f0                	jne    c00046a8 <create_partition+0x359>
c00046b8:	f7 d0                	not    eax
c00046ba:	8d 73 10             	lea    esi,[ebx+0x10]
c00046bd:	89 c2                	mov    edx,eax
c00046bf:	89 f0                	mov    eax,esi
c00046c1:	e8 2f d3 ff ff       	call   c00019f5 <st_dword>
c00046c6:	83 ec 0c             	sub    esp,0xc
c00046c9:	6a 01                	push   0x1
c00046cb:	6a 00                	push   0x0
c00046cd:	6a 01                	push   0x1
c00046cf:	53                   	push   ebx
c00046d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046d4:	e8 71 d2 ff ff       	call   c000194a <disk_write>
c00046d9:	83 c4 20             	add    esp,0x20
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 9c fc ff ff    	jne    c0004380 <create_partition+0x31>
c00046e4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046e8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046ec:	83 c2 ff             	add    edx,0xffffffff
c00046ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046f2:	83 d1 ff             	adc    ecx,0xffffffff
c00046f5:	e8 fe d2 ff ff       	call   c00019f8 <st_qword>
c00046fa:	ba 01 00 00 00       	mov    edx,0x1
c00046ff:	31 c9                	xor    ecx,ecx
c0004701:	89 e8                	mov    eax,ebp
c0004703:	e8 f0 d2 ff ff       	call   c00019f8 <st_qword>
c0004708:	89 f8                	mov    eax,edi
c000470a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000470e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004712:	31 ff                	xor    edi,edi
c0004714:	e8 df d2 ff ff       	call   c00019f8 <st_qword>
c0004719:	89 f0                	mov    eax,esi
c000471b:	31 d2                	xor    edx,edx
c000471d:	e8 d3 d2 ff ff       	call   c00019f5 <st_dword>
c0004722:	83 c8 ff             	or     eax,0xffffffff
c0004725:	47                   	inc    edi
c0004726:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000472b:	e8 7e d8 ff ff       	call   c0001fae <crc32>
c0004730:	83 ff 5c             	cmp    edi,0x5c
c0004733:	75 f0                	jne    c0004725 <create_partition+0x3d6>
c0004735:	f7 d0                	not    eax
c0004737:	89 c2                	mov    edx,eax
c0004739:	89 f0                	mov    eax,esi
c000473b:	e8 b5 d2 ff ff       	call   c00019f5 <st_dword>
c0004740:	83 ec 0c             	sub    esp,0xc
c0004743:	6a 01                	push   0x1
c0004745:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004749:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000474d:	83 c0 ff             	add    eax,0xffffffff
c0004750:	83 d2 ff             	adc    edx,0xffffffff
c0004753:	52                   	push   edx
c0004754:	50                   	push   eax
c0004755:	53                   	push   ebx
c0004756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000475a:	e8 eb d1 ff ff       	call   c000194a <disk_write>
c000475f:	83 c4 20             	add    esp,0x20
c0004762:	85 c0                	test   eax,eax
c0004764:	0f 85 16 fc ff ff    	jne    c0004380 <create_partition+0x31>
c000476a:	31 d2                	xor    edx,edx
c000476c:	89 d8                	mov    eax,ebx
c000476e:	b9 00 02 00 00       	mov    ecx,0x200
c0004773:	e8 9b d2 ff ff       	call   c0001a13 <mem_set>
c0004778:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000477e:	b9 10 00 00 00       	mov    ecx,0x10
c0004783:	ba 50 22 02 c0       	mov    edx,0xc0022250
c0004788:	e8 71 d2 ff ff       	call   c00019fe <mem_cpy>
c000478d:	e9 21 01 00 00       	jmp    c00048b3 <create_partition+0x564>
c0004792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004796:	b9 05 00 00 00       	mov    ecx,0x5
c000479b:	89 04 24             	mov    DWORD PTR [esp],eax
c000479e:	bf 08 00 00 00       	mov    edi,0x8
c00047a3:	89 f8                	mov    eax,edi
c00047a5:	31 d2                	xor    edx,edx
c00047a7:	0f b6 f0             	movzx  esi,al
c00047aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047ad:	f7 f6                	div    esi
c00047af:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047b4:	76 0a                	jbe    c00047c0 <create_partition+0x471>
c00047b6:	d1 e7                	shl    edi,1
c00047b8:	49                   	dec    ecx
c00047b9:	75 e8                	jne    c00047a3 <create_partition+0x454>
c00047bb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047c0:	b9 00 02 00 00       	mov    ecx,0x200
c00047c5:	31 d2                	xor    edx,edx
c00047c7:	89 d8                	mov    eax,ebx
c00047c9:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047cf:	e8 3f d2 ff ff       	call   c0001a13 <mem_set>
c00047d4:	b9 64 00 00 00       	mov    ecx,0x64
c00047d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047dc:	31 d2                	xor    edx,edx
c00047de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047e6:	f7 f1                	div    ecx
c00047e8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047f1:	89 f8                	mov    eax,edi
c00047f3:	0f b6 c0             	movzx  eax,al
c00047f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00047fa:	e9 80 00 00 00       	jmp    c000487f <create_partition+0x530>
c00047ff:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004802:	29 cf                	sub    edi,ecx
c0004804:	89 ca                	mov    edx,ecx
c0004806:	89 f0                	mov    eax,esi
c0004808:	bd 3f 00 00 00       	mov    ebp,0x3f
c000480d:	e8 e3 d1 ff ff       	call   c00019f5 <st_dword>
c0004812:	8d 46 04             	lea    eax,[esi+0x4]
c0004815:	89 fa                	mov    edx,edi
c0004817:	83 c6 10             	add    esi,0x10
c000481a:	e8 d6 d1 ff ff       	call   c00019f5 <st_dword>
c000481f:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004823:	31 d2                	xor    edx,edx
c0004825:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004828:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000482c:	89 c8                	mov    eax,ecx
c000482e:	01 f9                	add    ecx,edi
c0004830:	f7 f5                	div    ebp
c0004832:	89 d5                	mov    ebp,edx
c0004834:	31 d2                	xor    edx,edx
c0004836:	45                   	inc    ebp
c0004837:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000483b:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000483e:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004841:	89 c2                	mov    edx,eax
c0004843:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004846:	c1 ea 02             	shr    edx,0x2
c0004849:	83 e2 c0             	and    edx,0xffffffc0
c000484c:	09 ea                	or     edx,ebp
c000484e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004853:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004856:	31 d2                	xor    edx,edx
c0004858:	f7 f5                	div    ebp
c000485a:	89 d7                	mov    edi,edx
c000485c:	31 d2                	xor    edx,edx
c000485e:	47                   	inc    edi
c000485f:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004863:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004866:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004869:	89 c5                	mov    ebp,eax
c000486b:	c1 ed 02             	shr    ebp,0x2
c000486e:	83 e5 c0             	and    ebp,0xffffffc0
c0004871:	09 ef                	or     edi,ebp
c0004873:	89 fa                	mov    edx,edi
c0004875:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004878:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000487d:	74 34                	je     c00048b3 <create_partition+0x564>
c000487f:	85 c9                	test   ecx,ecx
c0004881:	74 30                	je     c00048b3 <create_partition+0x564>
c0004883:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004886:	76 2b                	jbe    c00048b3 <create_partition+0x564>
c0004888:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000488c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004890:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004893:	83 ff 64             	cmp    edi,0x64
c0004896:	76 4b                	jbe    c00048e3 <create_partition+0x594>
c0004898:	89 f8                	mov    eax,edi
c000489a:	01 c8                	add    eax,ecx
c000489c:	0f 82 5d ff ff ff    	jb     c00047ff <create_partition+0x4b0>
c00048a2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048a5:	0f 87 54 ff ff ff    	ja     c00047ff <create_partition+0x4b0>
c00048ab:	85 ff                	test   edi,edi
c00048ad:	0f 85 51 ff ff ff    	jne    c0004804 <create_partition+0x4b5>
c00048b3:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048b9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048be:	e8 2e d1 ff ff       	call   c00019f1 <st_word>
c00048c3:	83 ec 0c             	sub    esp,0xc
c00048c6:	6a 01                	push   0x1
c00048c8:	6a 00                	push   0x0
c00048ca:	6a 00                	push   0x0
c00048cc:	53                   	push   ebx
c00048cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048d1:	e8 74 d0 ff ff       	call   c000194a <disk_write>
c00048d6:	83 c4 20             	add    esp,0x20
c00048d9:	85 c0                	test   eax,eax
c00048db:	0f 95 c0             	setne  al
c00048de:	0f b6 c0             	movzx  eax,al
c00048e1:	eb 0e                	jmp    c00048f1 <create_partition+0x5a2>
c00048e3:	74 07                	je     c00048ec <create_partition+0x59d>
c00048e5:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048ea:	eb ac                	jmp    c0004898 <create_partition+0x549>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	eb a7                	jmp    c0004898 <create_partition+0x549>
c00048f1:	83 c4 5c             	add    esp,0x5c
c00048f4:	5b                   	pop    ebx
c00048f5:	5e                   	pop    esi
c00048f6:	5f                   	pop    edi
c00048f7:	5d                   	pop    ebp
c00048f8:	c3                   	ret    

c00048f9 <get_fileinfo>:
c00048f9:	55                   	push   ebp
c00048fa:	57                   	push   edi
c00048fb:	56                   	push   esi
c00048fc:	53                   	push   ebx
c00048fd:	83 ec 1c             	sub    esp,0x1c
c0004900:	8b 30                	mov    esi,DWORD PTR [eax]
c0004902:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004906:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000490a:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000490d:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004910:	0f 84 dc 01 00 00    	je     c0004af2 <get_fileinfo+0x1f9>
c0004916:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004919:	75 0f                	jne    c000492a <get_fileinfo+0x31>
c000491b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491e:	83 c4 1c             	add    esp,0x1c
c0004921:	5b                   	pop    ebx
c0004922:	5e                   	pop    esi
c0004923:	5f                   	pop    edi
c0004924:	5d                   	pop    ebp
c0004925:	e9 58 d5 ff ff       	jmp    c0001e82 <get_xfileinfo>
c000492a:	89 d3                	mov    ebx,edx
c000492c:	89 c6                	mov    esi,eax
c000492e:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004932:	74 6a                	je     c000499e <get_fileinfo+0xa5>
c0004934:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000493c:	31 ed                	xor    ebp,ebp
c000493e:	31 ff                	xor    edi,edi
c0004940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004944:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000494b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494f:	66 85 d2             	test   dx,dx
c0004952:	74 3e                	je     c0004992 <get_fileinfo+0x99>
c0004954:	66 85 ed             	test   bp,bp
c0004957:	75 0c                	jne    c0004965 <get_fileinfo+0x6c>
c0004959:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495f:	66 3d ff 07          	cmp    ax,0x7ff
c0004963:	76 22                	jbe    c0004987 <get_fileinfo+0x8e>
c0004965:	b9 ff 00 00 00       	mov    ecx,0xff
c000496a:	89 e8                	mov    eax,ebp
c000496c:	29 f9                	sub    ecx,edi
c000496e:	c1 e0 10             	shl    eax,0x10
c0004971:	09 d0                	or     eax,edx
c0004973:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004977:	e8 a3 d1 ff ff       	call   c0001b1f <put_utf>
c000497c:	84 c0                	test   al,al
c000497e:	74 10                	je     c0004990 <get_fileinfo+0x97>
c0004980:	0f b6 c0             	movzx  eax,al
c0004983:	31 d2                	xor    edx,edx
c0004985:	01 c7                	add    edi,eax
c0004987:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000498c:	89 d5                	mov    ebp,edx
c000498e:	eb b0                	jmp    c0004940 <get_fileinfo+0x47>
c0004990:	31 ff                	xor    edi,edi
c0004992:	66 85 ed             	test   bp,bp
c0004995:	74 02                	je     c0004999 <get_fileinfo+0xa0>
c0004997:	31 ff                	xor    edi,edi
c0004999:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499e:	31 ff                	xor    edi,edi
c00049a0:	31 c9                	xor    ecx,ecx
c00049a2:	83 f9 0a             	cmp    ecx,0xa
c00049a5:	0f 87 ad 00 00 00    	ja     c0004a58 <get_fileinfo+0x15f>
c00049ab:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049ae:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049b1:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b5:	66 83 fa 20          	cmp    dx,0x20
c00049b9:	0f 84 92 00 00 00    	je     c0004a51 <get_fileinfo+0x158>
c00049bf:	66 83 fa 05          	cmp    dx,0x5
c00049c3:	75 05                	jne    c00049ca <get_fileinfo+0xd1>
c00049c5:	ba e5 00 00 00       	mov    edx,0xe5
c00049ca:	83 ff 0b             	cmp    edi,0xb
c00049cd:	77 0b                	ja     c00049da <get_fileinfo+0xe1>
c00049cf:	83 fd 09             	cmp    ebp,0x9
c00049d2:	75 06                	jne    c00049da <get_fileinfo+0xe1>
c00049d4:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d9:	47                   	inc    edi
c00049da:	0f b7 c2             	movzx  eax,dx
c00049dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049e1:	e8 6d d0 ff ff       	call   c0001a53 <dbc_1st>
c00049e6:	85 c0                	test   eax,eax
c00049e8:	74 2f                	je     c0004a19 <get_fileinfo+0x120>
c00049ea:	83 fd 08             	cmp    ebp,0x8
c00049ed:	74 2a                	je     c0004a19 <get_fileinfo+0x120>
c00049ef:	83 fd 0b             	cmp    ebp,0xb
c00049f2:	74 25                	je     c0004a19 <get_fileinfo+0x120>
c00049f4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049fb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049ff:	e8 52 d0 ff ff       	call   c0001a56 <dbc_2nd>
c0004a04:	85 c0                	test   eax,eax
c0004a06:	74 11                	je     c0004a19 <get_fileinfo+0x120>
c0004a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a11:	c1 e2 08             	shl    edx,0x8
c0004a14:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a17:	09 c2                	or     edx,eax
c0004a19:	0f b7 d2             	movzx  edx,dx
c0004a1c:	50                   	push   eax
c0004a1d:	50                   	push   eax
c0004a1e:	68 b5 01 00 00       	push   0x1b5
c0004a23:	52                   	push   edx
c0004a24:	e8 87 3a 00 00       	call   c00084b0 <ff_oem2uni>
c0004a29:	83 c4 10             	add    esp,0x10
c0004a2c:	66 85 c0             	test   ax,ax
c0004a2f:	75 04                	jne    c0004a35 <get_fileinfo+0x13c>
c0004a31:	31 ff                	xor    edi,edi
c0004a33:	eb 23                	jmp    c0004a58 <get_fileinfo+0x15f>
c0004a35:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a3a:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3e:	29 f9                	sub    ecx,edi
c0004a40:	0f b7 c0             	movzx  eax,ax
c0004a43:	e8 d7 d0 ff ff       	call   c0001b1f <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 e5                	je     c0004a31 <get_fileinfo+0x138>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	01 c7                	add    edi,eax
c0004a51:	89 e9                	mov    ecx,ebp
c0004a53:	e9 4a ff ff ff       	jmp    c00049a2 <get_fileinfo+0xa9>
c0004a58:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a5d:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a61:	75 54                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004a63:	85 ff                	test   edi,edi
c0004a65:	75 0b                	jne    c0004a72 <get_fileinfo+0x179>
c0004a67:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a6b:	ba 01 00 00 00       	mov    edx,0x1
c0004a70:	eb 33                	jmp    c0004aa5 <get_fileinfo+0x1ac>
c0004a72:	b1 08                	mov    cl,0x8
c0004a74:	31 d2                	xor    edx,edx
c0004a76:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a7c:	84 c0                	test   al,al
c0004a7e:	74 25                	je     c0004aa5 <get_fileinfo+0x1ac>
c0004a80:	66 83 f8 2e          	cmp    ax,0x2e
c0004a84:	74 16                	je     c0004a9c <get_fileinfo+0x1a3>
c0004a86:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a89:	66 83 ff 19          	cmp    di,0x19
c0004a8d:	77 0f                	ja     c0004a9e <get_fileinfo+0x1a5>
c0004a8f:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a92:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a95:	74 07                	je     c0004a9e <get_fileinfo+0x1a5>
c0004a97:	83 c0 20             	add    eax,0x20
c0004a9a:	eb 02                	jmp    c0004a9e <get_fileinfo+0x1a5>
c0004a9c:	b1 10                	mov    cl,0x10
c0004a9e:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004aa2:	42                   	inc    edx
c0004aa3:	eb d1                	jmp    c0004a76 <get_fileinfo+0x17d>
c0004aa5:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aaa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aad:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ab1:	75 04                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004ab3:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aba:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004abd:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	83 c0 1c             	add    eax,0x1c
c0004ac6:	e8 c1 ce ff ff       	call   c000198c <ld_dword>
c0004acb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ad2:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad7:	83 c0 16             	add    eax,0x16
c0004ada:	e8 a0 ce ff ff       	call   c000197f <ld_word>
c0004adf:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 18             	add    eax,0x18
c0004ae9:	e8 91 ce ff ff       	call   c000197f <ld_word>
c0004aee:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	c3                   	ret    

c0004afa <ld_clust.isra.0>:
c0004afa:	56                   	push   esi
c0004afb:	89 c6                	mov    esi,eax
c0004afd:	53                   	push   ebx
c0004afe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b01:	89 d3                	mov    ebx,edx
c0004b03:	e8 77 ce ff ff       	call   c000197f <ld_word>
c0004b08:	0f b7 c8             	movzx  ecx,ax
c0004b0b:	89 f0                	mov    eax,esi
c0004b0d:	3c 03                	cmp    al,0x3
c0004b0f:	75 0d                	jne    c0004b1e <ld_clust.isra.0+0x24>
c0004b11:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b14:	e8 66 ce ff ff       	call   c000197f <ld_word>
c0004b19:	c1 e0 10             	shl    eax,0x10
c0004b1c:	09 c1                	or     ecx,eax
c0004b1e:	89 c8                	mov    eax,ecx
c0004b20:	5b                   	pop    ebx
c0004b21:	5e                   	pop    esi
c0004b22:	c3                   	ret    

c0004b23 <st_clust.isra.1>:
c0004b23:	56                   	push   esi
c0004b24:	89 c6                	mov    esi,eax
c0004b26:	53                   	push   ebx
c0004b27:	89 d3                	mov    ebx,edx
c0004b29:	0f b7 d1             	movzx  edx,cx
c0004b2c:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2f:	e8 bd ce ff ff       	call   c00019f1 <st_word>
c0004b34:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b37:	75 0f                	jne    c0004b48 <st_clust.isra.1+0x25>
c0004b39:	c1 e9 10             	shr    ecx,0x10
c0004b3c:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3f:	89 ca                	mov    edx,ecx
c0004b41:	5b                   	pop    ebx
c0004b42:	5e                   	pop    esi
c0004b43:	e9 a9 ce ff ff       	jmp    c00019f1 <st_word>
c0004b48:	5b                   	pop    ebx
c0004b49:	5e                   	pop    esi
c0004b4a:	c3                   	ret    

c0004b4b <init_alloc_info.isra.2>:
c0004b4b:	56                   	push   esi
c0004b4c:	53                   	push   ebx
c0004b4d:	89 c6                	mov    esi,eax
c0004b4f:	89 d3                	mov    ebx,edx
c0004b51:	51                   	push   ecx
c0004b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b54:	83 c0 34             	add    eax,0x34
c0004b57:	e8 30 ce ff ff       	call   c000198c <ld_dword>
c0004b5c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b61:	83 c0 38             	add    eax,0x38
c0004b64:	e8 3b ce ff ff       	call   c00019a4 <ld_qword>
c0004b69:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b6c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b71:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b7b:	83 e0 02             	and    eax,0x2
c0004b7e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b81:	5b                   	pop    ebx
c0004b82:	5b                   	pop    ebx
c0004b83:	5e                   	pop    esi
c0004b84:	c3                   	ret    

c0004b85 <follow_path>:
c0004b85:	56                   	push   esi
c0004b86:	53                   	push   ebx
c0004b87:	89 c3                	mov    ebx,eax
c0004b89:	83 ec 14             	sub    esp,0x14
c0004b8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b90:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b96:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b98:	80 fa 5c             	cmp    dl,0x5c
c0004b9b:	75 07                	jne    c0004ba4 <follow_path+0x1f>
c0004b9d:	40                   	inc    eax
c0004b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ba2:	eb ee                	jmp    c0004b92 <follow_path+0xd>
c0004ba4:	80 fa 2f             	cmp    dl,0x2f
c0004ba7:	74 f4                	je     c0004b9d <follow_path+0x18>
c0004ba9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bba:	77 52                	ja     c0004c0e <follow_path+0x89>
c0004bbc:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bc0:	31 d2                	xor    edx,edx
c0004bc2:	89 d8                	mov    eax,ebx
c0004bc4:	e8 12 e3 ff ff       	call   c0002edb <dir_sdi>
c0004bc9:	eb 7c                	jmp    c0004c47 <follow_path+0xc2>
c0004bcb:	89 d8                	mov    eax,ebx
c0004bcd:	e8 6e f2 ff ff       	call   c0003e40 <dir_find>
c0004bd2:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd5:	85 c0                	test   eax,eax
c0004bd7:	75 46                	jne    c0004c1f <follow_path+0x9a>
c0004bd9:	80 e2 04             	and    dl,0x4
c0004bdc:	75 69                	jne    c0004c47 <follow_path+0xc2>
c0004bde:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004be2:	74 5e                	je     c0004c42 <follow_path+0xbd>
c0004be4:	8a 06                	mov    al,BYTE PTR [esi]
c0004be6:	3c 04                	cmp    al,0x4
c0004be8:	75 41                	jne    c0004c2b <follow_path+0xa6>
c0004bea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bed:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bf1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf7:	30 c0                	xor    al,al
c0004bf9:	09 d0                	or     eax,edx
c0004bfb:	89 da                	mov    edx,ebx
c0004bfd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c00:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c03:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c06:	8d 46 10             	lea    eax,[esi+0x10]
c0004c09:	e8 3d ff ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004c0e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c12:	89 d8                	mov    eax,ebx
c0004c14:	e8 a9 ed ff ff       	call   c00039c2 <create_name>
c0004c19:	85 c0                	test   eax,eax
c0004c1b:	74 ae                	je     c0004bcb <follow_path+0x46>
c0004c1d:	eb 28                	jmp    c0004c47 <follow_path+0xc2>
c0004c1f:	83 f8 04             	cmp    eax,0x4
c0004c22:	75 23                	jne    c0004c47 <follow_path+0xc2>
c0004c24:	80 e2 04             	and    dl,0x4
c0004c27:	74 19                	je     c0004c42 <follow_path+0xbd>
c0004c29:	eb 1c                	jmp    c0004c47 <follow_path+0xc2>
c0004c2b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c34:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c38:	e8 bd fe ff ff       	call   c0004afa <ld_clust.isra.0>
c0004c3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c40:	eb cc                	jmp    c0004c0e <follow_path+0x89>
c0004c42:	b8 05 00 00 00       	mov    eax,0x5
c0004c47:	83 c4 14             	add    esp,0x14
c0004c4a:	5b                   	pop    ebx
c0004c4b:	5e                   	pop    esi
c0004c4c:	c3                   	ret    

c0004c4d <f_mount>:
c0004c4d:	53                   	push   ebx
c0004c4e:	83 ec 18             	sub    esp,0x18
c0004c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c55:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c61:	e8 fb d2 ff ff       	call   c0001f61 <get_ldnumber>
c0004c66:	89 c2                	mov    edx,eax
c0004c68:	b8 0b 00 00 00       	mov    eax,0xb
c0004c6d:	85 d2                	test   edx,edx
c0004c6f:	78 39                	js     c0004caa <f_mount+0x5d>
c0004c71:	8b 04 95 60 62 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9da0]
c0004c78:	85 c0                	test   eax,eax
c0004c7a:	74 03                	je     c0004c7f <f_mount+0x32>
c0004c7c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	74 03                	je     c0004c8a <f_mount+0x3d>
c0004c87:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8e:	89 04 95 60 62 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9da0],eax
c0004c95:	31 c0                	xor    eax,eax
c0004c97:	84 db                	test   bl,bl
c0004c99:	74 0f                	je     c0004caa <f_mount+0x5d>
c0004c9b:	31 c9                	xor    ecx,ecx
c0004c9d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ca1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca5:	e8 65 d7 ff ff       	call   c000240f <mount_volume>
c0004caa:	83 c4 18             	add    esp,0x18
c0004cad:	5b                   	pop    ebx
c0004cae:	c3                   	ret    

c0004caf <f_open>:
c0004caf:	55                   	push   ebp
c0004cb0:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb5:	57                   	push   edi
c0004cb6:	56                   	push   esi
c0004cb7:	53                   	push   ebx
c0004cb8:	83 ec 7c             	sub    esp,0x7c
c0004cbb:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cc2:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc9:	85 db                	test   ebx,ebx
c0004ccb:	0f 84 10 04 00 00    	je     c00050e1 <f_open+0x432>
c0004cd1:	89 fe                	mov    esi,edi
c0004cd3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd7:	83 e6 3f             	and    esi,0x3f
c0004cda:	89 f0                	mov    eax,esi
c0004cdc:	0f b6 c8             	movzx  ecx,al
c0004cdf:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce6:	e8 24 d7 ff ff       	call   c000240f <mount_volume>
c0004ceb:	89 c5                	mov    ebp,eax
c0004ced:	85 c0                	test   eax,eax
c0004cef:	0f 85 e6 03 00 00    	jne    c00050db <f_open+0x42c>
c0004cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf9:	bd 11 00 00 00       	mov    ebp,0x11
c0004cfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d02:	83 ec 0c             	sub    esp,0xc
c0004d05:	68 60 04 00 00       	push   0x460
c0004d0a:	e8 d9 36 00 00       	call   c00083e8 <ff_memalloc>
c0004d0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d1b:	0f 84 c0 03 00 00    	je     c00050e1 <f_open+0x432>
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d29:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2f:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d35:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d40:	e8 40 fe ff ff       	call   c0004b85 <follow_path>
c0004d45:	89 c5                	mov    ebp,eax
c0004d47:	85 c0                	test   eax,eax
c0004d49:	75 0c                	jne    c0004d57 <f_open+0xa8>
c0004d4b:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d50:	79 05                	jns    c0004d57 <f_open+0xa8>
c0004d52:	bd 06 00 00 00       	mov    ebp,0x6
c0004d57:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d5d:	0f 84 84 01 00 00    	je     c0004ee7 <f_open+0x238>
c0004d63:	85 ed                	test   ebp,ebp
c0004d65:	74 20                	je     c0004d87 <f_open+0xd8>
c0004d67:	83 fd 04             	cmp    ebp,0x4
c0004d6a:	0f 85 58 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d70:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d74:	83 ce 08             	or     esi,0x8
c0004d77:	e8 8a f2 ff ff       	call   c0004006 <dir_register>
c0004d7c:	89 c5                	mov    ebp,eax
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	74 2f                	je     c0004db1 <f_open+0x102>
c0004d82:	e9 41 03 00 00       	jmp    c00050c8 <f_open+0x419>
c0004d87:	bd 07 00 00 00       	mov    ebp,0x7
c0004d8c:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d91:	0f 85 31 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d97:	bd 08 00 00 00       	mov    ebp,0x8
c0004d9c:	f7 c7 04 00 00 00    	test   edi,0x4
c0004da2:	0f 85 20 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004da8:	83 e7 08             	and    edi,0x8
c0004dab:	0f 84 65 01 00 00    	je     c0004f16 <f_open+0x267>
c0004db1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db5:	8a 02                	mov    al,BYTE PTR [edx]
c0004db7:	3c 04                	cmp    al,0x4
c0004db9:	0f 85 97 00 00 00    	jne    c0004e56 <f_open+0x1a7>
c0004dbf:	8d 42 10             	lea    eax,[edx+0x10]
c0004dc2:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc4:	89 da                	mov    edx,ebx
c0004dc6:	e8 80 fd ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004dcb:	31 d2                	xor    edx,edx
c0004dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd1:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dd9:	83 c0 02             	add    eax,0x2
c0004ddc:	e8 32 cc ff ff       	call   c0001a13 <mem_set>
c0004de1:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de6:	31 d2                	xor    edx,edx
c0004de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004def:	83 c0 26             	add    eax,0x26
c0004df2:	e8 1c cc ff ff       	call   c0001a13 <mem_set>
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfe:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e07:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e0a:	83 c0 08             	add    eax,0x8
c0004e0d:	e8 e3 cb ff ff       	call   c00019f5 <st_dword>
c0004e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e21:	e8 b7 ea ff ff       	call   c00038dd <store_xdir>
c0004e26:	89 c5                	mov    ebp,eax
c0004e28:	85 c0                	test   eax,eax
c0004e2a:	0f 85 98 02 00 00    	jne    c00050c8 <f_open+0x419>
c0004e30:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e33:	85 d2                	test   edx,edx
c0004e35:	0f 84 db 00 00 00    	je     c0004f16 <f_open+0x267>
c0004e3b:	31 c9                	xor    ecx,ecx
c0004e3d:	89 d8                	mov    eax,ebx
c0004e3f:	e8 8e e3 ff ff       	call   c00031d2 <remove_chain>
c0004e44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e4d:	48                   	dec    eax
c0004e4e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e51:	e9 b8 00 00 00       	jmp    c0004f0e <f_open+0x25f>
c0004e56:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e5a:	89 ea                	mov    edx,ebp
c0004e5c:	e8 99 fc ff ff       	call   c0004afa <ld_clust.isra.0>
c0004e61:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e66:	89 c7                	mov    edi,eax
c0004e68:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e6b:	e8 85 cb ff ff       	call   c00019f5 <st_dword>
c0004e70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e82:	e8 9c fc ff ff       	call   c0004b23 <st_clust.isra.1>
c0004e87:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e8b:	31 d2                	xor    edx,edx
c0004e8d:	83 c0 1c             	add    eax,0x1c
c0004e90:	e8 60 cb ff ff       	call   c00019f5 <st_dword>
c0004e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e99:	85 ff                	test   edi,edi
c0004e9b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9f:	74 75                	je     c0004f16 <f_open+0x267>
c0004ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea5:	31 c9                	xor    ecx,ecx
c0004ea7:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eaa:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ebb:	e8 12 e3 ff ff       	call   c00031d2 <remove_chain>
c0004ec0:	89 c5                	mov    ebp,eax
c0004ec2:	85 c0                	test   eax,eax
c0004ec4:	0f 85 fe 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004ece:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed6:	4f                   	dec    edi
c0004ed7:	e8 81 d2 ff ff       	call   c000215d <move_window>
c0004edc:	89 c5                	mov    ebp,eax
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee5:	eb 27                	jmp    c0004f0e <f_open+0x25f>
c0004ee7:	85 ed                	test   ebp,ebp
c0004ee9:	0f 85 d9 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eef:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004ef3:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef8:	a8 10                	test   al,0x10
c0004efa:	0f 85 c8 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f00:	83 e7 02             	and    edi,0x2
c0004f03:	74 11                	je     c0004f16 <f_open+0x267>
c0004f05:	bd 07 00 00 00       	mov    ebp,0x7
c0004f0a:	a8 01                	test   al,0x1
c0004f0c:	eb 02                	jmp    c0004f10 <f_open+0x261>
c0004f0e:	85 ed                	test   ebp,ebp
c0004f10:	0f 85 b2 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f16:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f1c:	74 03                	je     c0004f21 <f_open+0x272>
c0004f1e:	83 ce 40             	or     esi,0x40
c0004f21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f25:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f28:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f2b:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f35:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f38:	8a 02                	mov    al,BYTE PTR [edx]
c0004f3a:	3c 04                	cmp    al,0x4
c0004f3c:	75 2a                	jne    c0004f68 <f_open+0x2b9>
c0004f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f42:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f4e:	30 c0                	xor    al,al
c0004f50:	09 c8                	or     eax,ecx
c0004f52:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f55:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f59:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f5c:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5f:	89 da                	mov    edx,ebx
c0004f61:	e8 e5 fb ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004f66:	eb 1c                	jmp    c0004f84 <f_open+0x2d5>
c0004f68:	89 fa                	mov    edx,edi
c0004f6a:	e8 8b fb ff ff       	call   c0004afa <ld_clust.isra.0>
c0004f6f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f72:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f75:	e8 12 ca ff ff       	call   c000198c <ld_dword>
c0004f7a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f81:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f88:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8f:	89 03                	mov    DWORD PTR [ebx],eax
c0004f91:	31 d2                	xor    edx,edx
c0004f93:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f97:	b9 00 02 00 00       	mov    ecx,0x200
c0004f9c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004fa0:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa4:	89 f0                	mov    eax,esi
c0004fa6:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fad:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fb0:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb7:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fba:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fc1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fcc:	e8 42 ca ff ff       	call   c0001a13 <mem_set>
c0004fd1:	83 e6 20             	and    esi,0x20
c0004fd4:	75 07                	jne    c0004fdd <f_open+0x32e>
c0004fd6:	31 ed                	xor    ebp,ebp
c0004fd8:	e9 eb 00 00 00       	jmp    c00050c8 <f_open+0x419>
c0004fdd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fe0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fef:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004ff3:	74 e1                	je     c0004fd6 <f_open+0x327>
c0004ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ffd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500a:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500e:	31 ff                	xor    edi,edi
c0005010:	c1 e5 09             	shl    ebp,0x9
c0005013:	89 ee                	mov    esi,ebp
c0005015:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005019:	89 f8                	mov    eax,edi
c000501b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501f:	73 22                	jae    c0005043 <f_open+0x394>
c0005021:	89 d8                	mov    eax,ebx
c0005023:	e8 bd dc ff ff       	call   c0002ce5 <get_fat>
c0005028:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000502c:	89 c2                	mov    edx,eax
c000502e:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005032:	83 f8 01             	cmp    eax,0x1
c0005035:	76 10                	jbe    c0005047 <f_open+0x398>
c0005037:	83 f8 ff             	cmp    eax,0xffffffff
c000503a:	75 d9                	jne    c0005015 <f_open+0x366>
c000503c:	bd 01 00 00 00       	mov    ebp,0x1
c0005041:	eb 09                	jmp    c000504c <f_open+0x39d>
c0005043:	31 ed                	xor    ebp,ebp
c0005045:	eb 05                	jmp    c000504c <f_open+0x39d>
c0005047:	bd 02 00 00 00       	mov    ebp,0x2
c000504c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504f:	85 ed                	test   ebp,ebp
c0005051:	75 75                	jne    c00050c8 <f_open+0x419>
c0005053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005057:	25 ff 01 00 00       	and    eax,0x1ff
c000505c:	0f 84 74 ff ff ff    	je     c0004fd6 <f_open+0x327>
c0005062:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005066:	bd 02 00 00 00       	mov    ebp,0x2
c000506b:	89 c8                	mov    eax,ecx
c000506d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005071:	e8 a2 cb ff ff       	call   c0001c18 <clst2sect>
c0005076:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000507a:	89 d7                	mov    edi,edx
c000507c:	09 c7                	or     edi,eax
c000507e:	74 48                	je     c00050c8 <f_open+0x419>
c0005080:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005084:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005088:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005090:	0f ac fe 09          	shrd   esi,edi,0x9
c0005094:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005098:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000509c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000509f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050a3:	83 ec 0c             	sub    esp,0xc
c00050a6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a9:	6a 01                	push   0x1
c00050ab:	52                   	push   edx
c00050ac:	50                   	push   eax
c00050ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b5:	50                   	push   eax
c00050b6:	e8 79 c8 ff ff       	call   c0001934 <disk_read>
c00050bb:	83 c4 20             	add    esp,0x20
c00050be:	85 c0                	test   eax,eax
c00050c0:	0f 95 c0             	setne  al
c00050c3:	0f b6 c0             	movzx  eax,al
c00050c6:	89 c5                	mov    ebp,eax
c00050c8:	83 ec 0c             	sub    esp,0xc
c00050cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cf:	e8 2c 33 00 00       	call   c0008400 <ff_memfree>
c00050d4:	83 c4 10             	add    esp,0x10
c00050d7:	85 ed                	test   ebp,ebp
c00050d9:	74 06                	je     c00050e1 <f_open+0x432>
c00050db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050e1:	83 c4 7c             	add    esp,0x7c
c00050e4:	89 e8                	mov    eax,ebp
c00050e6:	5b                   	pop    ebx
c00050e7:	5e                   	pop    esi
c00050e8:	5f                   	pop    edi
c00050e9:	5d                   	pop    ebp
c00050ea:	c3                   	ret    

c00050eb <f_read>:
c00050eb:	55                   	push   ebp
c00050ec:	57                   	push   edi
c00050ed:	56                   	push   esi
c00050ee:	53                   	push   ebx
c00050ef:	83 ec 2c             	sub    esp,0x2c
c00050f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005104:	89 d8                	mov    eax,ebx
c0005106:	e8 77 cf ff ff       	call   c0002082 <validate>
c000510b:	89 c5                	mov    ebp,eax
c000510d:	85 c0                	test   eax,eax
c000510f:	0f 85 4c 02 00 00    	jne    c0005361 <f_read+0x276>
c0005115:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005119:	85 ed                	test   ebp,ebp
c000511b:	0f 85 40 02 00 00    	jne    c0005361 <f_read+0x276>
c0005121:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005125:	0f 84 31 02 00 00    	je     c000535c <f_read+0x271>
c000512b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005131:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005134:	bf 00 00 00 00       	mov    edi,0x0
c0005139:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000513c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005140:	89 d1                	mov    ecx,edx
c0005142:	19 f9                	sbb    ecx,edi
c0005144:	0f 83 cf 00 00 00    	jae    c0005219 <f_read+0x12e>
c000514a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514e:	e9 c6 00 00 00       	jmp    c0005219 <f_read+0x12e>
c0005153:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005156:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005159:	89 d0                	mov    eax,edx
c000515b:	25 ff 01 00 00       	and    eax,0x1ff
c0005160:	0f 85 c9 01 00 00    	jne    c000532f <f_read+0x244>
c0005166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516a:	89 d6                	mov    esi,edx
c000516c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005170:	89 cf                	mov    edi,ecx
c0005172:	48                   	dec    eax
c0005173:	0f ac fe 09          	shrd   esi,edi,0x9
c0005177:	21 f0                	and    eax,esi
c0005179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000517d:	0f 84 a6 00 00 00    	je     c0005229 <f_read+0x13e>
c0005183:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005187:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000518a:	89 c8                	mov    eax,ecx
c000518c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518f:	e8 84 ca ff ff       	call   c0001c18 <clst2sect>
c0005194:	89 d7                	mov    edi,edx
c0005196:	09 c7                	or     edi,eax
c0005198:	0f 84 b4 00 00 00    	je     c0005252 <f_read+0x167>
c000519e:	31 ff                	xor    edi,edi
c00051a0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051a4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a7:	01 c6                	add    esi,eax
c00051a9:	11 d7                	adc    edi,edx
c00051ab:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051b3:	0f 86 fd 00 00 00    	jbe    c00052b6 <f_read+0x1cb>
c00051b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051c1:	c1 e8 09             	shr    eax,0x9
c00051c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051cb:	03 14 24             	add    edx,DWORD PTR [esp]
c00051ce:	39 c2                	cmp    edx,eax
c00051d0:	76 07                	jbe    c00051d9 <f_read+0xee>
c00051d2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d9:	83 ec 0c             	sub    esp,0xc
c00051dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051e0:	57                   	push   edi
c00051e1:	56                   	push   esi
c00051e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051ea:	50                   	push   eax
c00051eb:	e8 44 c7 ff ff       	call   c0001934 <disk_read>
c00051f0:	83 c4 20             	add    esp,0x20
c00051f3:	85 c0                	test   eax,eax
c00051f5:	75 6e                	jne    c0005265 <f_read+0x17a>
c00051f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051fb:	78 7e                	js     c000527b <f_read+0x190>
c00051fd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005200:	c1 e6 09             	shl    esi,0x9
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000520d:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005211:	01 30                	add    DWORD PTR [eax],esi
c0005213:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005216:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005219:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521e:	0f 85 2f ff ff ff    	jne    c0005153 <f_read+0x68>
c0005224:	e9 38 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005229:	89 c8                	mov    eax,ecx
c000522b:	09 d0                	or     eax,edx
c000522d:	75 05                	jne    c0005234 <f_read+0x149>
c000522f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005232:	eb 19                	jmp    c000524d <f_read+0x162>
c0005234:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005238:	74 09                	je     c0005243 <f_read+0x158>
c000523a:	89 d8                	mov    eax,ebx
c000523c:	e8 f8 c9 ff ff       	call   c0001c39 <clmt_clust>
c0005241:	eb 0a                	jmp    c000524d <f_read+0x162>
c0005243:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005246:	89 d8                	mov    eax,ebx
c0005248:	e8 98 da ff ff       	call   c0002ce5 <get_fat>
c000524d:	83 f8 01             	cmp    eax,0x1
c0005250:	77 0e                	ja     c0005260 <f_read+0x175>
c0005252:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005256:	bd 02 00 00 00       	mov    ebp,0x2
c000525b:	e9 01 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005260:	83 f8 ff             	cmp    eax,0xffffffff
c0005263:	75 0e                	jne    c0005273 <f_read+0x188>
c0005265:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005269:	bd 01 00 00 00       	mov    ebp,0x1
c000526e:	e9 ee 00 00 00       	jmp    c0005361 <f_read+0x276>
c0005273:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005276:	e9 08 ff ff ff       	jmp    c0005183 <f_read+0x98>
c000527b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005281:	29 f0                	sub    eax,esi
c0005283:	19 fa                	sbb    edx,edi
c0005285:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005288:	89 d7                	mov    edi,edx
c000528a:	ba 00 00 00 00       	mov    edx,0x0
c000528f:	89 f9                	mov    ecx,edi
c0005291:	19 d1                	sbb    ecx,edx
c0005293:	0f 83 64 ff ff ff    	jae    c00051fd <f_read+0x112>
c0005299:	89 c7                	mov    edi,eax
c000529b:	8d 53 50             	lea    edx,[ebx+0x50]
c000529e:	c1 e7 09             	shl    edi,0x9
c00052a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052a5:	b9 00 02 00 00       	mov    ecx,0x200
c00052aa:	01 f8                	add    eax,edi
c00052ac:	e8 4d c7 ff ff       	call   c00019fe <mem_cpy>
c00052b1:	e9 47 ff ff ff       	jmp    c00051fd <f_read+0x112>
c00052b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052c3:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c7:	75 05                	jne    c00052ce <f_read+0x1e3>
c00052c9:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052cc:	74 5b                	je     c0005329 <f_read+0x23e>
c00052ce:	8d 43 50             	lea    eax,[ebx+0x50]
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d9:	79 2a                	jns    c0005305 <f_read+0x21a>
c00052db:	83 ec 0c             	sub    esp,0xc
c00052de:	6a 01                	push   0x1
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052f0:	50                   	push   eax
c00052f1:	e8 54 c6 ff ff       	call   c000194a <disk_write>
c00052f6:	83 c4 20             	add    esp,0x20
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 64 ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005301:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	6a 01                	push   0x1
c000530a:	57                   	push   edi
c000530b:	56                   	push   esi
c000530c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005314:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005318:	50                   	push   eax
c0005319:	e8 16 c6 ff ff       	call   c0001934 <disk_read>
c000531e:	83 c4 20             	add    esp,0x20
c0005321:	85 c0                	test   eax,eax
c0005323:	0f 85 3c ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005329:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000532c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005332:	ba 00 02 00 00       	mov    edx,0x200
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005340:	29 c2                	sub    edx,eax
c0005342:	39 d6                	cmp    esi,edx
c0005344:	76 02                	jbe    c0005348 <f_read+0x25d>
c0005346:	89 d6                	mov    esi,edx
c0005348:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000534c:	89 f1                	mov    ecx,esi
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	e8 a7 c6 ff ff       	call   c00019fe <mem_cpy>
c0005357:	e9 a7 fe ff ff       	jmp    c0005203 <f_read+0x118>
c000535c:	bd 07 00 00 00       	mov    ebp,0x7
c0005361:	83 c4 2c             	add    esp,0x2c
c0005364:	89 e8                	mov    eax,ebp
c0005366:	5b                   	pop    ebx
c0005367:	5e                   	pop    esi
c0005368:	5f                   	pop    edi
c0005369:	5d                   	pop    ebp
c000536a:	c3                   	ret    

c000536b <f_write>:
c000536b:	55                   	push   ebp
c000536c:	57                   	push   edi
c000536d:	56                   	push   esi
c000536e:	53                   	push   ebx
c000536f:	83 ec 2c             	sub    esp,0x2c
c0005372:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005376:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005384:	89 d8                	mov    eax,ebx
c0005386:	e8 f7 cc ff ff       	call   c0002082 <validate>
c000538b:	89 c5                	mov    ebp,eax
c000538d:	85 c0                	test   eax,eax
c000538f:	0f 85 86 02 00 00    	jne    c000561b <f_write+0x2b0>
c0005395:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005399:	85 ed                	test   ebp,ebp
c000539b:	0f 85 7a 02 00 00    	jne    c000561b <f_write+0x2b0>
c00053a1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a5:	0f 84 6b 02 00 00    	je     c0005616 <f_write+0x2ab>
c00053ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053af:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053b2:	0f 84 43 01 00 00    	je     c00054fb <f_write+0x190>
c00053b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053bb:	89 c1                	mov    ecx,eax
c00053bd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053c1:	0f 83 34 01 00 00    	jae    c00054fb <f_write+0x190>
c00053c7:	f7 d0                	not    eax
c00053c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053cd:	e9 29 01 00 00       	jmp    c00054fb <f_write+0x190>
c00053d2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d8:	89 d0                	mov    eax,edx
c00053da:	25 ff 01 00 00       	and    eax,0x1ff
c00053df:	0f 85 00 02 00 00    	jne    c00055e5 <f_write+0x27a>
c00053e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e9:	89 d6                	mov    esi,edx
c00053eb:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ef:	89 cf                	mov    edi,ecx
c00053f1:	48                   	dec    eax
c00053f2:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f6:	21 f0                	and    eax,esi
c00053f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053fc:	0f 84 06 01 00 00    	je     c0005508 <f_write+0x19d>
c0005402:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005406:	0f 88 6e 01 00 00    	js     c000557a <f_write+0x20f>
c000540c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005410:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005413:	89 c8                	mov    eax,ecx
c0005415:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005419:	e8 fa c7 ff ff       	call   c0001c18 <clst2sect>
c000541e:	89 d1                	mov    ecx,edx
c0005420:	09 c1                	or     ecx,eax
c0005422:	0f 84 1c 01 00 00    	je     c0005544 <f_write+0x1d9>
c0005428:	31 ff                	xor    edi,edi
c000542a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000542e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005432:	01 c6                	add    esi,eax
c0005434:	11 d7                	adc    edi,edx
c0005436:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543e:	0f 86 63 01 00 00    	jbe    c00055a7 <f_write+0x23c>
c0005444:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000544c:	c1 e8 09             	shr    eax,0x9
c000544f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000545b:	39 c2                	cmp    edx,eax
c000545d:	76 08                	jbe    c0005467 <f_write+0xfc>
c000545f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005467:	83 ec 0c             	sub    esp,0xc
c000546a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546e:	57                   	push   edi
c000546f:	56                   	push   esi
c0005470:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005474:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005478:	50                   	push   eax
c0005479:	e8 cc c4 ff ff       	call   c000194a <disk_write>
c000547e:	83 c4 20             	add    esp,0x20
c0005481:	85 c0                	test   eax,eax
c0005483:	0f 85 ce 00 00 00    	jne    c0005557 <f_write+0x1ec>
c0005489:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548f:	29 f0                	sub    eax,esi
c0005491:	19 fa                	sbb    edx,edi
c0005493:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005497:	89 d7                	mov    edi,edx
c0005499:	ba 00 00 00 00       	mov    edx,0x0
c000549e:	89 f9                	mov    ecx,edi
c00054a0:	19 d1                	sbb    ecx,edx
c00054a2:	73 1c                	jae    c00054c0 <f_write+0x155>
c00054a4:	89 c7                	mov    edi,eax
c00054a6:	b9 00 02 00 00       	mov    ecx,0x200
c00054ab:	c1 e7 09             	shl    edi,0x9
c00054ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00054b1:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b5:	89 fa                	mov    edx,edi
c00054b7:	e8 42 c5 ff ff       	call   c00019fe <mem_cpy>
c00054bc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054cb:	31 ff                	xor    edi,edi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054d3:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054da:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054e0:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054e3:	89 c1                	mov    ecx,eax
c00054e5:	39 f2                	cmp    edx,esi
c00054e7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054ea:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054ed:	19 f9                	sbb    ecx,edi
c00054ef:	73 04                	jae    c00054f5 <f_write+0x18a>
c00054f1:	89 f2                	mov    edx,esi
c00054f3:	89 f8                	mov    eax,edi
c00054f5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 cc fe ff ff    	jne    c00053d2 <f_write+0x67>
c0005506:	eb 2e                	jmp    c0005536 <f_write+0x1cb>
c0005508:	89 c8                	mov    eax,ecx
c000550a:	09 d0                	or     eax,edx
c000550c:	75 0b                	jne    c0005519 <f_write+0x1ae>
c000550e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005511:	31 d2                	xor    edx,edx
c0005513:	85 c0                	test   eax,eax
c0005515:	75 28                	jne    c000553f <f_write+0x1d4>
c0005517:	eb 12                	jmp    c000552b <f_write+0x1c0>
c0005519:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551d:	74 09                	je     c0005528 <f_write+0x1bd>
c000551f:	89 d8                	mov    eax,ebx
c0005521:	e8 13 c7 ff ff       	call   c0001c39 <clmt_clust>
c0005526:	eb 0a                	jmp    c0005532 <f_write+0x1c7>
c0005528:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000552b:	89 d8                	mov    eax,ebx
c000552d:	e8 a1 da ff ff       	call   c0002fd3 <create_chain>
c0005532:	85 c0                	test   eax,eax
c0005534:	75 09                	jne    c000553f <f_write+0x1d4>
c0005536:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000553a:	e9 dc 00 00 00       	jmp    c000561b <f_write+0x2b0>
c000553f:	83 f8 01             	cmp    eax,0x1
c0005542:	75 0e                	jne    c0005552 <f_write+0x1e7>
c0005544:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005548:	bd 02 00 00 00       	mov    ebp,0x2
c000554d:	e9 c9 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005552:	83 f8 ff             	cmp    eax,0xffffffff
c0005555:	75 0e                	jne    c0005565 <f_write+0x1fa>
c0005557:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000555b:	bd 01 00 00 00       	mov    ebp,0x1
c0005560:	e9 b6 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005565:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005568:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000556c:	0f 85 90 fe ff ff    	jne    c0005402 <f_write+0x97>
c0005572:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005575:	e9 88 fe ff ff       	jmp    c0005402 <f_write+0x97>
c000557a:	83 ec 0c             	sub    esp,0xc
c000557d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005580:	6a 01                	push   0x1
c0005582:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005585:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005588:	50                   	push   eax
c0005589:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000558d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005591:	50                   	push   eax
c0005592:	e8 b3 c3 ff ff       	call   c000194a <disk_write>
c0005597:	83 c4 20             	add    esp,0x20
c000559a:	85 c0                	test   eax,eax
c000559c:	75 b9                	jne    c0005557 <f_write+0x1ec>
c000559e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055a2:	e9 65 fe ff ff       	jmp    c000540c <f_write+0xa1>
c00055a7:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055aa:	75 05                	jne    c00055b1 <f_write+0x246>
c00055ac:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055af:	74 2e                	je     c00055df <f_write+0x274>
c00055b1:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b7:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055ba:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055bd:	73 20                	jae    c00055df <f_write+0x274>
c00055bf:	83 ec 0c             	sub    esp,0xc
c00055c2:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c5:	6a 01                	push   0x1
c00055c7:	57                   	push   edi
c00055c8:	56                   	push   esi
c00055c9:	50                   	push   eax
c00055ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ce:	50                   	push   eax
c00055cf:	e8 60 c3 ff ff       	call   c0001934 <disk_read>
c00055d4:	83 c4 20             	add    esp,0x20
c00055d7:	85 c0                	test   eax,eax
c00055d9:	0f 85 78 ff ff ff    	jne    c0005557 <f_write+0x1ec>
c00055df:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055e2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e8:	ba 00 02 00 00       	mov    edx,0x200
c00055ed:	25 ff 01 00 00       	and    eax,0x1ff
c00055f2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f6:	29 c2                	sub    edx,eax
c00055f8:	39 d6                	cmp    esi,edx
c00055fa:	76 02                	jbe    c00055fe <f_write+0x293>
c00055fc:	89 d6                	mov    esi,edx
c00055fe:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005602:	89 f1                	mov    ecx,esi
c0005604:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005608:	e8 f1 c3 ff ff       	call   c00019fe <mem_cpy>
c000560d:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005611:	e9 b1 fe ff ff       	jmp    c00054c7 <f_write+0x15c>
c0005616:	bd 07 00 00 00       	mov    ebp,0x7
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 e8                	mov    eax,ebp
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_sync>:
c0005625:	56                   	push   esi
c0005626:	53                   	push   ebx
c0005627:	83 ec 64             	sub    esp,0x64
c000562a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 49 ca ff ff       	call   c0002082 <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	0f 85 ba 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005641:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005644:	f6 c2 40             	test   dl,0x40
c0005647:	0f 84 ae 01 00 00    	je     c00057fb <f_sync+0x1d6>
c000564d:	84 d2                	test   dl,dl
c000564f:	79 33                	jns    c0005684 <f_sync+0x5f>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000565c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565f:	50                   	push   eax
c0005660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005664:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005668:	50                   	push   eax
c0005669:	e8 dc c2 ff ff       	call   c000194a <disk_write>
c000566e:	83 c4 20             	add    esp,0x20
c0005671:	89 c2                	mov    edx,eax
c0005673:	b8 01 00 00 00       	mov    eax,0x1
c0005678:	85 d2                	test   edx,edx
c000567a:	0f 85 7b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005680:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005688:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000568b:	0f 85 11 01 00 00    	jne    c00057a2 <f_sync+0x17d>
c0005691:	89 d8                	mov    eax,ebx
c0005693:	e8 13 d6 ff ff       	call   c0002cab <fill_first_frag>
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 5b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056a0:	83 c9 ff             	or     ecx,0xffffffff
c00056a3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a6:	89 d8                	mov    eax,ebx
c00056a8:	e8 c9 d5 ff ff       	call   c0002c76 <fill_last_frag>
c00056ad:	85 c0                	test   eax,eax
c00056af:	0f 85 46 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056b5:	83 ec 0c             	sub    esp,0xc
c00056b8:	68 60 04 00 00       	push   0x460
c00056bd:	e8 26 2d 00 00       	call   c00083e8 <ff_memalloc>
c00056c2:	83 c4 10             	add    esp,0x10
c00056c5:	89 c6                	mov    esi,eax
c00056c7:	b8 11 00 00 00       	mov    eax,0x11
c00056cc:	85 f6                	test   esi,esi
c00056ce:	0f 84 27 01 00 00    	je     c00057fb <f_sync+0x1d6>
c00056d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056de:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056e4:	89 da                	mov    edx,ebx
c00056e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056ea:	e8 af df ff ff       	call   c000369e <load_obj_xdir>
c00056ef:	85 c0                	test   eax,eax
c00056f1:	0f 85 95 00 00 00    	jne    c000578c <f_sync+0x167>
c00056f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056fb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fe:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005702:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005705:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005708:	83 ca 01             	or     edx,0x1
c000570b:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005711:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005714:	83 c0 34             	add    eax,0x34
c0005717:	e8 d9 c2 ff ff       	call   c00019f5 <st_dword>
c000571c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005720:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005723:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005726:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005729:	83 c0 38             	add    eax,0x38
c000572c:	e8 c7 c2 ff ff       	call   c00019f8 <st_qword>
c0005731:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000573e:	83 c0 28             	add    eax,0x28
c0005741:	e8 b2 c2 ff ff       	call   c00019f8 <st_qword>
c0005746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000574a:	ba 00 00 21 50       	mov    edx,0x50210000
c000574f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005752:	83 c0 0c             	add    eax,0xc
c0005755:	e8 9b c2 ff ff       	call   c00019f5 <st_dword>
c000575a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005761:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005765:	31 d2                	xor    edx,edx
c0005767:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000576a:	83 c0 10             	add    eax,0x10
c000576d:	e8 83 c2 ff ff       	call   c00019f5 <st_dword>
c0005772:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005776:	e8 62 e1 ff ff       	call   c00038dd <store_xdir>
c000577b:	85 c0                	test   eax,eax
c000577d:	75 0d                	jne    c000578c <f_sync+0x167>
c000577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005783:	e8 00 eb ff ff       	call   c0004288 <sync_fs>
c0005788:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000578c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005790:	83 ec 0c             	sub    esp,0xc
c0005793:	56                   	push   esi
c0005794:	e8 67 2c 00 00       	call   c0008400 <ff_memfree>
c0005799:	83 c4 10             	add    esp,0x10
c000579c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057a0:	eb 59                	jmp    c00057fb <f_sync+0x1d6>
c00057a2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a5:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a8:	e8 b0 c9 ff ff       	call   c000215d <move_window>
c00057ad:	85 c0                	test   eax,eax
c00057af:	75 4a                	jne    c00057fb <f_sync+0x1d6>
c00057b1:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b4:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b8:	89 f2                	mov    edx,esi
c00057ba:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bf:	e8 5f f3 ff ff       	call   c0004b23 <st_clust.isra.1>
c00057c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c7:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057ca:	e8 26 c2 ff ff       	call   c00019f5 <st_dword>
c00057cf:	8d 46 16             	lea    eax,[esi+0x16]
c00057d2:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d7:	e8 19 c2 ff ff       	call   c00019f5 <st_dword>
c00057dc:	8d 46 12             	lea    eax,[esi+0x12]
c00057df:	31 d2                	xor    edx,edx
c00057e1:	e8 0b c2 ff ff       	call   c00019f1 <st_word>
c00057e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f2:	e8 91 ea ff ff       	call   c0004288 <sync_fs>
c00057f7:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057fb:	83 c4 64             	add    esp,0x64
c00057fe:	5b                   	pop    ebx
c00057ff:	5e                   	pop    esi
c0005800:	c3                   	ret    

c0005801 <f_close>:
c0005801:	53                   	push   ebx
c0005802:	83 ec 24             	sub    esp,0x24
c0005805:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005809:	53                   	push   ebx
c000580a:	e8 16 fe ff ff       	call   c0005625 <f_sync>
c000580f:	83 c4 10             	add    esp,0x10
c0005812:	85 c0                	test   eax,eax
c0005814:	75 15                	jne    c000582b <f_close+0x2a>
c0005816:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000581a:	89 d8                	mov    eax,ebx
c000581c:	e8 61 c8 ff ff       	call   c0002082 <validate>
c0005821:	85 c0                	test   eax,eax
c0005823:	75 06                	jne    c000582b <f_close+0x2a>
c0005825:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000582b:	83 c4 18             	add    esp,0x18
c000582e:	5b                   	pop    ebx
c000582f:	c3                   	ret    

c0005830 <f_lseek>:
c0005830:	55                   	push   ebp
c0005831:	57                   	push   edi
c0005832:	56                   	push   esi
c0005833:	53                   	push   ebx
c0005834:	83 ec 3c             	sub    esp,0x3c
c0005837:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000583b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005843:	89 04 24             	mov    DWORD PTR [esp],eax
c0005846:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000584a:	89 d8                	mov    eax,ebx
c000584c:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005850:	e8 2d c8 ff ff       	call   c0002082 <validate>
c0005855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005859:	85 c0                	test   eax,eax
c000585b:	0f 85 7a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005861:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005865:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005869:	85 c0                	test   eax,eax
c000586b:	0f 85 6a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005871:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005875:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005878:	74 0c                	je     c0005886 <f_lseek+0x56>
c000587a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000587d:	85 c0                	test   eax,eax
c000587f:	75 1f                	jne    c00058a0 <f_lseek+0x70>
c0005881:	e9 b5 01 00 00       	jmp    c0005a3b <f_lseek+0x20b>
c0005886:	83 c9 ff             	or     ecx,0xffffffff
c0005889:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000588c:	89 d8                	mov    eax,ebx
c000588e:	e8 e3 d3 ff ff       	call   c0002c76 <fill_last_frag>
c0005893:	85 c0                	test   eax,eax
c0005895:	74 e3                	je     c000587a <f_lseek+0x4a>
c0005897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000589b:	e9 3b 04 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058a0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a5:	0f 85 ac 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058ab:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058af:	0f 85 a2 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058b5:	8d 78 04             	lea    edi,[eax+0x4]
c00058b8:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00058bd:	be 02 00 00 00       	mov    esi,0x2
c00058c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c6:	85 ed                	test   ebp,ebp
c00058c8:	74 73                	je     c000593d <f_lseek+0x10d>
c00058ca:	89 e9                	mov    ecx,ebp
c00058cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 ca                	mov    edx,ecx
c00058d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	e8 02 d4 ff ff       	call   c0002ce5 <get_fat>
c00058e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e7:	83 f8 01             	cmp    eax,0x1
c00058ea:	77 11                	ja     c00058fd <f_lseek+0xcd>
c00058ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058f0:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00058f8:	e9 de 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058fd:	83 f8 ff             	cmp    eax,0xffffffff
c0005900:	75 11                	jne    c0005913 <f_lseek+0xe3>
c0005902:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005906:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000590e:	e9 c8 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005913:	8d 51 01             	lea    edx,[ecx+0x1]
c0005916:	89 c1                	mov    ecx,eax
c0005918:	39 c2                	cmp    edx,eax
c000591a:	74 b7                	je     c00058d3 <f_lseek+0xa3>
c000591c:	83 c6 02             	add    esi,0x2
c000591f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005923:	72 0b                	jb     c0005930 <f_lseek+0x100>
c0005925:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005928:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000592b:	89 0f                	mov    DWORD PTR [edi],ecx
c000592d:	83 c7 08             	add    edi,0x8
c0005930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005934:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005937:	76 04                	jbe    c000593d <f_lseek+0x10d>
c0005939:	89 c5                	mov    ebp,eax
c000593b:	eb 8d                	jmp    c00058ca <f_lseek+0x9a>
c000593d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005940:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005944:	89 30                	mov    DWORD PTR [eax],esi
c0005946:	0f 87 87 03 00 00    	ja     c0005cd3 <f_lseek+0x4a3>
c000594c:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005952:	e9 84 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005957:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000595a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000595d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005961:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005969:	39 04 24             	cmp    DWORD PTR [esp],eax
c000596c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005970:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005974:	73 0f                	jae    c0005985 <f_lseek+0x155>
c0005976:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005979:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000597d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000598d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005990:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005997:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000599b:	0f 84 3a 03 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059a1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059a9:	83 c6 ff             	add    esi,0xffffffff
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	83 d7 ff             	adc    edi,0xffffffff
c00059b1:	89 f2                	mov    edx,esi
c00059b3:	89 f9                	mov    ecx,edi
c00059b5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00059bc:	e8 78 c2 ff ff       	call   c0001c39 <clmt_clust>
c00059c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059c5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059c8:	89 c2                	mov    edx,eax
c00059ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059ce:	89 c8                	mov    eax,ecx
c00059d0:	e8 43 c2 ff ff       	call   c0001c18 <clst2sect>
c00059d5:	89 d7                	mov    edi,edx
c00059d7:	09 c7                	or     edi,eax
c00059d9:	0f 84 0d ff ff ff    	je     c00058ec <f_lseek+0xbc>
c00059df:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059e3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059e9:	0f 84 ec 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059f7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059fa:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059fe:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a02:	4d                   	dec    ebp
c0005a03:	31 ff                	xor    edi,edi
c0005a05:	21 ee                	and    esi,ebp
c0005a07:	01 c6                	add    esi,eax
c0005a09:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a0c:	11 d7                	adc    edi,edx
c0005a0e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a11:	39 fa                	cmp    edx,edi
c0005a13:	75 08                	jne    c0005a1d <f_lseek+0x1ed>
c0005a15:	39 f0                	cmp    eax,esi
c0005a17:	0f 84 be 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c0005a1d:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a20:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a24:	0f 89 80 02 00 00    	jns    c0005caa <f_lseek+0x47a>
c0005a2a:	83 ec 0c             	sub    esp,0xc
c0005a2d:	6a 01                	push   0x1
c0005a2f:	52                   	push   edx
c0005a30:	50                   	push   eax
c0005a31:	55                   	push   ebp
c0005a32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a36:	e9 5a 02 00 00       	jmp    c0005c95 <f_lseek+0x465>
c0005a3b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a3f:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a42:	74 16                	je     c0005a5a <f_lseek+0x22a>
c0005a44:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a49:	76 0f                	jbe    c0005a5a <f_lseek+0x22a>
c0005a4b:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a5d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a60:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a63:	89 c7                	mov    edi,eax
c0005a65:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a69:	73 0d                	jae    c0005a78 <f_lseek+0x248>
c0005a6b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a6f:	75 07                	jne    c0005a78 <f_lseek+0x248>
c0005a71:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a7b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a7e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a82:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a89:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a90:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a93:	75 09                	jne    c0005a9e <f_lseek+0x26e>
c0005a95:	31 f6                	xor    esi,esi
c0005a97:	31 ff                	xor    edi,edi
c0005a99:	e9 af 01 00 00       	jmp    c0005c4d <f_lseek+0x41d>
c0005a9e:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005aa2:	89 d7                	mov    edi,edx
c0005aa4:	c1 e1 09             	shl    ecx,0x9
c0005aa7:	09 c7                	or     edi,eax
c0005aa9:	89 cd                	mov    ebp,ecx
c0005aab:	74 6d                	je     c0005b1a <f_lseek+0x2ea>
c0005aad:	83 c0 ff             	add    eax,0xffffffff
c0005ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab4:	83 d2 ff             	adc    edx,0xffffffff
c0005ab7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005aba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005abe:	83 c0 ff             	add    eax,0xffffffff
c0005ac1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ac5:	83 d2 ff             	adc    edx,0xffffffff
c0005ac8:	31 ff                	xor    edi,edi
c0005aca:	57                   	push   edi
c0005acb:	51                   	push   ecx
c0005acc:	52                   	push   edx
c0005acd:	50                   	push   eax
c0005ace:	e8 6d b9 01 00       	call   c0021440 <__udivdi3>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ada:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ade:	57                   	push   edi
c0005adf:	55                   	push   ebp
c0005ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae8:	e8 53 b9 01 00       	call   c0021440 <__udivdi3>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005af4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005af8:	19 d1                	sbb    ecx,edx
c0005afa:	72 1e                	jb     c0005b1a <f_lseek+0x2ea>
c0005afc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b00:	89 e9                	mov    ecx,ebp
c0005b02:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b05:	f7 d9                	neg    ecx
c0005b07:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b0a:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b0e:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b11:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b14:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b18:	eb 28                	jmp    c0005b42 <f_lseek+0x312>
c0005b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	75 1e                	jne    c0005b3f <f_lseek+0x30f>
c0005b21:	31 d2                	xor    edx,edx
c0005b23:	89 d8                	mov    eax,ebx
c0005b25:	e8 a9 d4 ff ff       	call   c0002fd3 <create_chain>
c0005b2a:	83 f8 01             	cmp    eax,0x1
c0005b2d:	0f 84 b9 fd ff ff    	je     c00058ec <f_lseek+0xbc>
c0005b33:	83 f8 ff             	cmp    eax,0xffffffff
c0005b36:	0f 84 c6 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005b3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b3f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b42:	85 c0                	test   eax,eax
c0005b44:	0f 84 4b ff ff ff    	je     c0005a95 <f_lseek+0x265>
c0005b4a:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b56:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b60:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b63:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b67:	0f 83 9d 00 00 00    	jae    c0005c0a <f_lseek+0x3da>
c0005b6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b71:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b75:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b78:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b7c:	01 f2                	add    edx,esi
c0005b7e:	11 f9                	adc    ecx,edi
c0005b80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b88:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b8b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b8e:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005b91:	f6 c1 02             	test   cl,0x2
c0005b94:	74 35                	je     c0005bcb <f_lseek+0x39b>
c0005b96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005b9a:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005b9d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ba0:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ba4:	73 16                	jae    c0005bbc <f_lseek+0x38c>
c0005ba6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005baa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bae:	88 ca                	mov    dl,cl
c0005bb0:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bb3:	83 ca 40             	or     edx,0x40
c0005bb6:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bb9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bbc:	89 c2                	mov    edx,eax
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 0e d4 ff ff       	call   c0002fd3 <create_chain>
c0005bc5:	85 c0                	test   eax,eax
c0005bc7:	75 0b                	jne    c0005bd4 <f_lseek+0x3a4>
c0005bc9:	eb 30                	jmp    c0005bfb <f_lseek+0x3cb>
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 11 d1 ff ff       	call   c0002ce5 <get_fat>
c0005bd4:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd7:	0f 84 25 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005bdd:	83 f8 01             	cmp    eax,0x1
c0005be0:	0f 86 06 fd ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005be6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bea:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bed:	0f 86 f9 fc ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005bf3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bf6:	e9 5b ff ff ff       	jmp    c0005b56 <f_lseek+0x326>
c0005bfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c0a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c0d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c11:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c17:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c20:	0f 84 6f fe ff ff    	je     c0005a95 <f_lseek+0x265>
c0005c26:	89 c2                	mov    edx,eax
c0005c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c2c:	e8 e7 bf ff ff       	call   c0001c18 <clst2sect>
c0005c31:	89 d7                	mov    edi,edx
c0005c33:	09 c7                	or     edi,eax
c0005c35:	0f 84 b1 fc ff ff    	je     c00058ec <f_lseek+0xbc>
c0005c3b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c3f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c42:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c46:	c1 ef 09             	shr    edi,0x9
c0005c49:	01 c6                	add    esi,eax
c0005c4b:	11 d7                	adc    edi,edx
c0005c4d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c56:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c59:	19 d1                	sbb    ecx,edx
c0005c5b:	73 0a                	jae    c0005c67 <f_lseek+0x437>
c0005c5d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c60:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c63:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c67:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c6c:	74 6d                	je     c0005cdb <f_lseek+0x4ab>
c0005c6e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c71:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c74:	39 fa                	cmp    edx,edi
c0005c76:	75 04                	jne    c0005c7c <f_lseek+0x44c>
c0005c78:	39 f0                	cmp    eax,esi
c0005c7a:	74 5f                	je     c0005cdb <f_lseek+0x4ab>
c0005c7c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c7f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c83:	79 25                	jns    c0005caa <f_lseek+0x47a>
c0005c85:	83 ec 0c             	sub    esp,0xc
c0005c88:	6a 01                	push   0x1
c0005c8a:	52                   	push   edx
c0005c8b:	50                   	push   eax
c0005c8c:	55                   	push   ebp
c0005c8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c95:	50                   	push   eax
c0005c96:	e8 af bc ff ff       	call   c000194a <disk_write>
c0005c9b:	83 c4 20             	add    esp,0x20
c0005c9e:	85 c0                	test   eax,eax
c0005ca0:	0f 85 5c fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ca6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005caa:	83 ec 0c             	sub    esp,0xc
c0005cad:	6a 01                	push   0x1
c0005caf:	57                   	push   edi
c0005cb0:	56                   	push   esi
c0005cb1:	55                   	push   ebp
c0005cb2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cb6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cba:	50                   	push   eax
c0005cbb:	e8 74 bc ff ff       	call   c0001934 <disk_read>
c0005cc0:	83 c4 20             	add    esp,0x20
c0005cc3:	85 c0                	test   eax,eax
c0005cc5:	0f 85 37 fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ccb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005cd1:	eb 08                	jmp    c0005cdb <f_lseek+0x4ab>
c0005cd3:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cdf:	83 c4 3c             	add    esp,0x3c
c0005ce2:	5b                   	pop    ebx
c0005ce3:	5e                   	pop    esi
c0005ce4:	5f                   	pop    edi
c0005ce5:	5d                   	pop    ebp
c0005ce6:	c3                   	ret    

c0005ce7 <f_opendir>:
c0005ce7:	56                   	push   esi
c0005ce8:	b8 09 00 00 00       	mov    eax,0x9
c0005ced:	53                   	push   ebx
c0005cee:	83 ec 24             	sub    esp,0x24
c0005cf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005cf5:	85 db                	test   ebx,ebx
c0005cf7:	0f 84 e6 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005cfd:	31 c9                	xor    ecx,ecx
c0005cff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d03:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d07:	e8 03 c7 ff ff       	call   c000240f <mount_volume>
c0005d0c:	85 c0                	test   eax,eax
c0005d0e:	0f 85 c9 00 00 00    	jne    c0005ddd <f_opendir+0xf6>
c0005d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d18:	83 ec 0c             	sub    esp,0xc
c0005d1b:	89 03                	mov    DWORD PTR [ebx],eax
c0005d1d:	68 60 04 00 00       	push   0x460
c0005d22:	e8 c1 26 00 00       	call   c00083e8 <ff_memalloc>
c0005d27:	83 c4 10             	add    esp,0x10
c0005d2a:	89 c6                	mov    esi,eax
c0005d2c:	b8 11 00 00 00       	mov    eax,0x11
c0005d31:	85 f6                	test   esi,esi
c0005d33:	0f 84 aa 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d3d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d43:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d4d:	89 d8                	mov    eax,ebx
c0005d4f:	e8 31 ee ff ff       	call   c0004b85 <follow_path>
c0005d54:	85 c0                	test   eax,eax
c0005d56:	75 61                	jne    c0005db9 <f_opendir+0xd2>
c0005d58:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d5c:	78 46                	js     c0005da4 <f_opendir+0xbd>
c0005d5e:	b8 05 00 00 00       	mov    eax,0x5
c0005d63:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d67:	74 50                	je     c0005db9 <f_opendir+0xd2>
c0005d69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d6d:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d6f:	3c 04                	cmp    al,0x4
c0005d71:	75 26                	jne    c0005d99 <f_opendir+0xb2>
c0005d73:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d79:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d7c:	30 d2                	xor    dl,dl
c0005d7e:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d82:	09 c2                	or     edx,eax
c0005d84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d87:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d8a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d8d:	89 da                	mov    edx,ebx
c0005d8f:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d92:	e8 b4 ed ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0005d97:	eb 0b                	jmp    c0005da4 <f_opendir+0xbd>
c0005d99:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d9c:	e8 59 ed ff ff       	call   c0004afa <ld_clust.isra.0>
c0005da1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da8:	31 d2                	xor    edx,edx
c0005daa:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dae:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005db2:	89 d8                	mov    eax,ebx
c0005db4:	e8 22 d1 ff ff       	call   c0002edb <dir_sdi>
c0005db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dbd:	83 ec 0c             	sub    esp,0xc
c0005dc0:	56                   	push   esi
c0005dc1:	e8 3a 26 00 00       	call   c0008400 <ff_memfree>
c0005dc6:	83 c4 10             	add    esp,0x10
c0005dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dcd:	83 f8 04             	cmp    eax,0x4
c0005dd0:	74 06                	je     c0005dd8 <f_opendir+0xf1>
c0005dd2:	85 c0                	test   eax,eax
c0005dd4:	74 0d                	je     c0005de3 <f_opendir+0xfc>
c0005dd6:	eb 05                	jmp    c0005ddd <f_opendir+0xf6>
c0005dd8:	b8 05 00 00 00       	mov    eax,0x5
c0005ddd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005de3:	83 c4 24             	add    esp,0x24
c0005de6:	5b                   	pop    ebx
c0005de7:	5e                   	pop    esi
c0005de8:	c3                   	ret    

c0005de9 <f_closedir>:
c0005de9:	53                   	push   ebx
c0005dea:	83 ec 18             	sub    esp,0x18
c0005ded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005df1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 86 c2 ff ff       	call   c0002082 <validate>
c0005dfc:	85 c0                	test   eax,eax
c0005dfe:	75 06                	jne    c0005e06 <f_closedir+0x1d>
c0005e00:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e06:	83 c4 18             	add    esp,0x18
c0005e09:	5b                   	pop    ebx
c0005e0a:	c3                   	ret    

c0005e0b <f_readdir>:
c0005e0b:	57                   	push   edi
c0005e0c:	56                   	push   esi
c0005e0d:	53                   	push   ebx
c0005e0e:	83 ec 20             	sub    esp,0x20
c0005e11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e19:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e1d:	89 d8                	mov    eax,ebx
c0005e1f:	e8 5e c2 ff ff       	call   c0002082 <validate>
c0005e24:	85 c0                	test   eax,eax
c0005e26:	75 77                	jne    c0005e9f <f_readdir+0x94>
c0005e28:	85 ff                	test   edi,edi
c0005e2a:	75 0b                	jne    c0005e37 <f_readdir+0x2c>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	89 d8                	mov    eax,ebx
c0005e30:	e8 a6 d0 ff ff       	call   c0002edb <dir_sdi>
c0005e35:	eb 68                	jmp    c0005e9f <f_readdir+0x94>
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	68 60 04 00 00       	push   0x460
c0005e3f:	e8 a4 25 00 00       	call   c00083e8 <ff_memalloc>
c0005e44:	83 c4 10             	add    esp,0x10
c0005e47:	89 c6                	mov    esi,eax
c0005e49:	b8 11 00 00 00       	mov    eax,0x11
c0005e4e:	85 f6                	test   esi,esi
c0005e50:	74 4d                	je     c0005e9f <f_readdir+0x94>
c0005e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e56:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e5c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e5f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e62:	31 d2                	xor    edx,edx
c0005e64:	89 d8                	mov    eax,ebx
c0005e66:	e8 80 d8 ff ff       	call   c00036eb <dir_read>
c0005e6b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e70:	75 19                	jne    c0005e8b <f_readdir+0x80>
c0005e72:	89 fa                	mov    edx,edi
c0005e74:	89 d8                	mov    eax,ebx
c0005e76:	e8 7e ea ff ff       	call   c00048f9 <get_fileinfo>
c0005e7b:	31 d2                	xor    edx,edx
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 af d5 ff ff       	call   c0003433 <dir_next>
c0005e84:	83 f8 04             	cmp    eax,0x4
c0005e87:	75 02                	jne    c0005e8b <f_readdir+0x80>
c0005e89:	31 c0                	xor    eax,eax
c0005e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e8f:	83 ec 0c             	sub    esp,0xc
c0005e92:	56                   	push   esi
c0005e93:	e8 68 25 00 00       	call   c0008400 <ff_memfree>
c0005e98:	83 c4 10             	add    esp,0x10
c0005e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e9f:	83 c4 20             	add    esp,0x20
c0005ea2:	5b                   	pop    ebx
c0005ea3:	5e                   	pop    esi
c0005ea4:	5f                   	pop    edi
c0005ea5:	c3                   	ret    

c0005ea6 <f_stat>:
c0005ea6:	57                   	push   edi
c0005ea7:	31 c9                	xor    ecx,ecx
c0005ea9:	56                   	push   esi
c0005eaa:	53                   	push   ebx
c0005eab:	83 ec 50             	sub    esp,0x50
c0005eae:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005eb2:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005eb6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005eba:	e8 50 c5 ff ff       	call   c000240f <mount_volume>
c0005ebf:	89 c3                	mov    ebx,eax
c0005ec1:	85 c0                	test   eax,eax
c0005ec3:	75 67                	jne    c0005f2c <f_stat+0x86>
c0005ec5:	83 ec 0c             	sub    esp,0xc
c0005ec8:	bb 11 00 00 00       	mov    ebx,0x11
c0005ecd:	68 60 04 00 00       	push   0x460
c0005ed2:	e8 11 25 00 00       	call   c00083e8 <ff_memalloc>
c0005ed7:	83 c4 10             	add    esp,0x10
c0005eda:	89 c6                	mov    esi,eax
c0005edc:	85 c0                	test   eax,eax
c0005ede:	74 4c                	je     c0005f2c <f_stat+0x86>
c0005ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ee4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eea:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005eed:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005ef4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ef8:	e8 88 ec ff ff       	call   c0004b85 <follow_path>
c0005efd:	89 c3                	mov    ebx,eax
c0005eff:	85 c0                	test   eax,eax
c0005f01:	75 1d                	jne    c0005f20 <f_stat+0x7a>
c0005f03:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f08:	78 11                	js     c0005f1b <f_stat+0x75>
c0005f0a:	85 ff                	test   edi,edi
c0005f0c:	74 12                	je     c0005f20 <f_stat+0x7a>
c0005f0e:	89 fa                	mov    edx,edi
c0005f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f14:	e8 e0 e9 ff ff       	call   c00048f9 <get_fileinfo>
c0005f19:	eb 05                	jmp    c0005f20 <f_stat+0x7a>
c0005f1b:	bb 06 00 00 00       	mov    ebx,0x6
c0005f20:	83 ec 0c             	sub    esp,0xc
c0005f23:	56                   	push   esi
c0005f24:	e8 d7 24 00 00       	call   c0008400 <ff_memfree>
c0005f29:	83 c4 10             	add    esp,0x10
c0005f2c:	83 c4 50             	add    esp,0x50
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	5b                   	pop    ebx
c0005f32:	5e                   	pop    esi
c0005f33:	5f                   	pop    edi
c0005f34:	c3                   	ret    

c0005f35 <f_getfree>:
c0005f35:	55                   	push   ebp
c0005f36:	31 c9                	xor    ecx,ecx
c0005f38:	57                   	push   edi
c0005f39:	56                   	push   esi
c0005f3a:	53                   	push   ebx
c0005f3b:	83 ec 5c             	sub    esp,0x5c
c0005f3e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f42:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f46:	e8 c4 c4 ff ff       	call   c000240f <mount_volume>
c0005f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f4f:	85 c0                	test   eax,eax
c0005f51:	0f 85 9d 01 00 00    	jne    c00060f4 <f_getfree+0x1bf>
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f5f:	89 02                	mov    DWORD PTR [edx],eax
c0005f61:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f67:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f6a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f6e:	39 f2                	cmp    edx,esi
c0005f70:	77 0b                	ja     c0005f7d <f_getfree+0x48>
c0005f72:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f76:	89 10                	mov    DWORD PTR [eax],edx
c0005f78:	e9 77 01 00 00       	jmp    c00060f4 <f_getfree+0x1bf>
c0005f7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f7f:	80 fa 01             	cmp    dl,0x1
c0005f82:	75 3a                	jne    c0005fbe <f_getfree+0x89>
c0005f84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f88:	be 02 00 00 00       	mov    esi,0x2
c0005f8d:	31 db                	xor    ebx,ebx
c0005f8f:	89 f2                	mov    edx,esi
c0005f91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f95:	e8 4b cd ff ff       	call   c0002ce5 <get_fat>
c0005f9a:	83 f8 ff             	cmp    eax,0xffffffff
c0005f9d:	0f 84 28 01 00 00    	je     c00060cb <f_getfree+0x196>
c0005fa3:	83 f8 01             	cmp    eax,0x1
c0005fa6:	0f 84 29 01 00 00    	je     c00060d5 <f_getfree+0x1a0>
c0005fac:	83 d3 00             	adc    ebx,0x0
c0005faf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb3:	46                   	inc    esi
c0005fb4:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fb7:	77 d6                	ja     c0005f8f <f_getfree+0x5a>
c0005fb9:	e9 25 01 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c0005fbe:	80 fa 04             	cmp    dl,0x4
c0005fc1:	0f 85 88 00 00 00    	jne    c000604f <f_getfree+0x11a>
c0005fc7:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fca:	31 ed                	xor    ebp,ebp
c0005fcc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fcf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fd7:	31 db                	xor    ebx,ebx
c0005fd9:	85 ed                	test   ebp,ebp
c0005fdb:	75 3f                	jne    c000601c <f_getfree+0xe7>
c0005fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fe5:	83 c0 01             	add    eax,0x1
c0005fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005fec:	83 d2 00             	adc    edx,0x0
c0005fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005fff:	e8 59 c1 ff ff       	call   c000215d <move_window>
c0006004:	85 c0                	test   eax,eax
c0006006:	0f 85 d3 00 00 00    	jne    c00060df <f_getfree+0x1aa>
c000600c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006010:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006018:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000601c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006020:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006023:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006027:	89 cf                	mov    edi,ecx
c0006029:	85 f6                	test   esi,esi
c000602b:	74 12                	je     c000603f <f_getfree+0x10a>
c000602d:	88 c1                	mov    cl,al
c000602f:	83 e1 01             	and    ecx,0x1
c0006032:	80 f9 01             	cmp    cl,0x1
c0006035:	83 d3 00             	adc    ebx,0x0
c0006038:	d0 e8                	shr    al,1
c000603a:	4e                   	dec    esi
c000603b:	39 fe                	cmp    esi,edi
c000603d:	75 ea                	jne    c0006029 <f_getfree+0xf4>
c000603f:	45                   	inc    ebp
c0006040:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006046:	85 f6                	test   esi,esi
c0006048:	75 8f                	jne    c0005fd9 <f_getfree+0xa4>
c000604a:	e9 94 00 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c000604f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006052:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006055:	31 f6                	xor    esi,esi
c0006057:	31 db                	xor    ebx,ebx
c0006059:	85 f6                	test   esi,esi
c000605b:	75 1b                	jne    c0006078 <f_getfree+0x143>
c000605d:	89 d7                	mov    edi,edx
c000605f:	89 cd                	mov    ebp,ecx
c0006061:	83 c7 01             	add    edi,0x1
c0006064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006068:	83 d5 00             	adc    ebp,0x0
c000606b:	e8 ed c0 ff ff       	call   c000215d <move_window>
c0006070:	85 c0                	test   eax,eax
c0006072:	75 6b                	jne    c00060df <f_getfree+0x1aa>
c0006074:	89 fa                	mov    edx,edi
c0006076:	89 e9                	mov    ecx,ebp
c0006078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006080:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006084:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006087:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000608b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608f:	75 11                	jne    c00060a2 <f_getfree+0x16d>
c0006091:	e8 e9 b8 ff ff       	call   c000197f <ld_word>
c0006096:	66 83 f8 01          	cmp    ax,0x1
c000609a:	83 d3 00             	adc    ebx,0x0
c000609d:	83 c6 02             	add    esi,0x2
c00060a0:	eb 13                	jmp    c00060b5 <f_getfree+0x180>
c00060a2:	e8 e5 b8 ff ff       	call   c000198c <ld_dword>
c00060a7:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060ac:	83 f8 01             	cmp    eax,0x1
c00060af:	83 d3 00             	adc    ebx,0x0
c00060b2:	83 c6 04             	add    esi,0x4
c00060b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060c3:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060c7:	75 90                	jne    c0006059 <f_getfree+0x124>
c00060c9:	eb 18                	jmp    c00060e3 <f_getfree+0x1ae>
c00060cb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060d3:	eb 0e                	jmp    c00060e3 <f_getfree+0x1ae>
c00060d5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060dd:	eb 04                	jmp    c00060e3 <f_getfree+0x1ae>
c00060df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060e7:	89 18                	mov    DWORD PTR [eax],ebx
c00060e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ed:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060f0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f8:	83 c4 5c             	add    esp,0x5c
c00060fb:	5b                   	pop    ebx
c00060fc:	5e                   	pop    esi
c00060fd:	5f                   	pop    edi
c00060fe:	5d                   	pop    ebp
c00060ff:	c3                   	ret    

c0006100 <f_truncate>:
c0006100:	56                   	push   esi
c0006101:	53                   	push   ebx
c0006102:	83 ec 14             	sub    esp,0x14
c0006105:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006109:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000610d:	89 d8                	mov    eax,ebx
c000610f:	e8 6e bf ff ff       	call   c0002082 <validate>
c0006114:	89 c6                	mov    esi,eax
c0006116:	85 c0                	test   eax,eax
c0006118:	0f 85 d2 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000611e:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006122:	85 f6                	test   esi,esi
c0006124:	0f 85 c6 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000612a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000612e:	0f 84 b7 00 00 00    	je     c00061eb <f_truncate+0xeb>
c0006134:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006137:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000613a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000613d:	89 d1                	mov    ecx,edx
c000613f:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006142:	0f 83 a8 00 00 00    	jae    c00061f0 <f_truncate+0xf0>
c0006148:	09 c2                	or     edx,eax
c000614a:	75 15                	jne    c0006161 <f_truncate+0x61>
c000614c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	89 d8                	mov    eax,ebx
c0006153:	e8 7a d0 ff ff       	call   c00031d2 <remove_chain>
c0006158:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000615f:	eb 35                	jmp    c0006196 <f_truncate+0x96>
c0006161:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006164:	89 d8                	mov    eax,ebx
c0006166:	e8 7a cb ff ff       	call   c0002ce5 <get_fat>
c000616b:	89 c2                	mov    edx,eax
c000616d:	b8 01 00 00 00       	mov    eax,0x1
c0006172:	83 fa ff             	cmp    edx,0xffffffff
c0006175:	74 1f                	je     c0006196 <f_truncate+0x96>
c0006177:	b8 02 00 00 00       	mov    eax,0x2
c000617c:	83 fa 01             	cmp    edx,0x1
c000617f:	74 15                	je     c0006196 <f_truncate+0x96>
c0006181:	31 c0                	xor    eax,eax
c0006183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006187:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000618a:	76 0a                	jbe    c0006196 <f_truncate+0x96>
c000618c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 3c d0 ff ff       	call   c00031d2 <remove_chain>
c0006196:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006199:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000619c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000619f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061a2:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061a5:	83 ca 40             	or     edx,0x40
c00061a8:	85 c0                	test   eax,eax
c00061aa:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061ad:	75 35                	jne    c00061e4 <f_truncate+0xe4>
c00061af:	84 d2                	test   dl,dl
c00061b1:	79 3d                	jns    c00061f0 <f_truncate+0xf0>
c00061b3:	83 ec 0c             	sub    esp,0xc
c00061b6:	8d 43 50             	lea    eax,[ebx+0x50]
c00061b9:	6a 01                	push   0x1
c00061bb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061c1:	50                   	push   eax
c00061c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061ca:	50                   	push   eax
c00061cb:	e8 7a b7 ff ff       	call   c000194a <disk_write>
c00061d0:	83 c4 20             	add    esp,0x20
c00061d3:	85 c0                	test   eax,eax
c00061d5:	75 08                	jne    c00061df <f_truncate+0xdf>
c00061d7:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061db:	31 f6                	xor    esi,esi
c00061dd:	eb 11                	jmp    c00061f0 <f_truncate+0xf0>
c00061df:	b8 01 00 00 00       	mov    eax,0x1
c00061e4:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061e7:	89 c6                	mov    esi,eax
c00061e9:	eb 05                	jmp    c00061f0 <f_truncate+0xf0>
c00061eb:	be 07 00 00 00       	mov    esi,0x7
c00061f0:	89 f0                	mov    eax,esi
c00061f2:	83 c4 14             	add    esp,0x14
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	c3                   	ret    

c00061f8 <f_unlink>:
c00061f8:	56                   	push   esi
c00061f9:	b9 02 00 00 00       	mov    ecx,0x2
c00061fe:	53                   	push   ebx
c00061ff:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006205:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006209:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006210:	e8 fa c1 ff ff       	call   c000240f <mount_volume>
c0006215:	85 c0                	test   eax,eax
c0006217:	0f 85 55 01 00 00    	jne    c0006372 <f_unlink+0x17a>
c000621d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006221:	83 ec 0c             	sub    esp,0xc
c0006224:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006228:	68 60 04 00 00       	push   0x460
c000622d:	e8 b6 21 00 00       	call   c00083e8 <ff_memalloc>
c0006232:	83 c4 10             	add    esp,0x10
c0006235:	89 c3                	mov    ebx,eax
c0006237:	b8 11 00 00 00       	mov    eax,0x11
c000623c:	85 db                	test   ebx,ebx
c000623e:	0f 84 2e 01 00 00    	je     c0006372 <f_unlink+0x17a>
c0006244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006248:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000624e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006251:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006254:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000625b:	8d 44 24 48          	lea    eax,[esp+0x48]
c000625f:	e8 21 e9 ff ff       	call   c0004b85 <follow_path>
c0006264:	85 c0                	test   eax,eax
c0006266:	0f 85 f2 00 00 00    	jne    c000635e <f_unlink+0x166>
c000626c:	b8 06 00 00 00       	mov    eax,0x6
c0006271:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006279:	0f 88 df 00 00 00    	js     c000635e <f_unlink+0x166>
c000627f:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006284:	74 0a                	je     c0006290 <f_unlink+0x98>
c0006286:	b8 07 00 00 00       	mov    eax,0x7
c000628b:	e9 ce 00 00 00       	jmp    c000635e <f_unlink+0x166>
c0006290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006294:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006298:	8a 02                	mov    al,BYTE PTR [edx]
c000629a:	3c 04                	cmp    al,0x4
c000629c:	75 12                	jne    c00062b0 <f_unlink+0xb8>
c000629e:	8d 42 10             	lea    eax,[edx+0x10]
c00062a1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062a5:	e8 a1 e8 ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c00062aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062ae:	eb 0e                	jmp    c00062be <f_unlink+0xc6>
c00062b0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062b7:	e8 3e e8 ff ff       	call   c0004afa <ld_clust.isra.0>
c00062bc:	89 c6                	mov    esi,eax
c00062be:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062c3:	75 12                	jne    c00062d7 <f_unlink+0xdf>
c00062c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062c9:	e8 94 d6 ff ff       	call   c0003962 <dir_remove>
c00062ce:	85 c0                	test   eax,eax
c00062d0:	74 6c                	je     c000633e <f_unlink+0x146>
c00062d2:	e9 87 00 00 00       	jmp    c000635e <f_unlink+0x166>
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062e2:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062e9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062ec:	75 21                	jne    c000630f <f_unlink+0x117>
c00062ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062f6:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062fd:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006304:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006308:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000630f:	31 d2                	xor    edx,edx
c0006311:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006318:	e8 be cb ff ff       	call   c0002edb <dir_sdi>
c000631d:	85 c0                	test   eax,eax
c000631f:	75 3d                	jne    c000635e <f_unlink+0x166>
c0006321:	31 d2                	xor    edx,edx
c0006323:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000632a:	e8 bc d3 ff ff       	call   c00036eb <dir_read>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 84 4f ff ff ff    	je     c0006286 <f_unlink+0x8e>
c0006337:	83 f8 04             	cmp    eax,0x4
c000633a:	75 22                	jne    c000635e <f_unlink+0x166>
c000633c:	eb 87                	jmp    c00062c5 <f_unlink+0xcd>
c000633e:	85 f6                	test   esi,esi
c0006340:	75 0b                	jne    c000634d <f_unlink+0x155>
c0006342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006346:	e8 3d df ff ff       	call   c0004288 <sync_fs>
c000634b:	eb 11                	jmp    c000635e <f_unlink+0x166>
c000634d:	31 c9                	xor    ecx,ecx
c000634f:	89 f2                	mov    edx,esi
c0006351:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006355:	e8 78 ce ff ff       	call   c00031d2 <remove_chain>
c000635a:	85 c0                	test   eax,eax
c000635c:	74 e4                	je     c0006342 <f_unlink+0x14a>
c000635e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006362:	83 ec 0c             	sub    esp,0xc
c0006365:	53                   	push   ebx
c0006366:	e8 95 20 00 00       	call   c0008400 <ff_memfree>
c000636b:	83 c4 10             	add    esp,0x10
c000636e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006372:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006378:	5b                   	pop    ebx
c0006379:	5e                   	pop    esi
c000637a:	c3                   	ret    

c000637b <f_mkdir>:
c000637b:	57                   	push   edi
c000637c:	b9 02 00 00 00       	mov    ecx,0x2
c0006381:	56                   	push   esi
c0006382:	53                   	push   ebx
c0006383:	83 c4 80             	add    esp,0xffffff80
c0006386:	8d 54 24 08          	lea    edx,[esp+0x8]
c000638a:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006391:	e8 79 c0 ff ff       	call   c000240f <mount_volume>
c0006396:	89 c3                	mov    ebx,eax
c0006398:	85 c0                	test   eax,eax
c000639a:	0f 85 fe 01 00 00    	jne    c000659e <f_mkdir+0x223>
c00063a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063a4:	bb 11 00 00 00       	mov    ebx,0x11
c00063a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063ad:	83 ec 0c             	sub    esp,0xc
c00063b0:	68 60 04 00 00       	push   0x460
c00063b5:	e8 2e 20 00 00       	call   c00083e8 <ff_memalloc>
c00063ba:	83 c4 10             	add    esp,0x10
c00063bd:	89 c7                	mov    edi,eax
c00063bf:	85 c0                	test   eax,eax
c00063c1:	0f 84 d7 01 00 00    	je     c000659e <f_mkdir+0x223>
c00063c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cb:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063d1:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063de:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063e2:	e8 9e e7 ff ff       	call   c0004b85 <follow_path>
c00063e7:	89 c3                	mov    ebx,eax
c00063e9:	85 c0                	test   eax,eax
c00063eb:	74 3e                	je     c000642b <f_mkdir+0xb0>
c00063ed:	83 f8 04             	cmp    eax,0x4
c00063f0:	75 3e                	jne    c0006430 <f_mkdir+0xb5>
c00063f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063f6:	31 d2                	xor    edx,edx
c00063f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006400:	e8 ce cb ff ff       	call   c0002fd3 <create_chain>
c0006405:	89 c6                	mov    esi,eax
c0006407:	85 c0                	test   eax,eax
c0006409:	74 0c                	je     c0006417 <f_mkdir+0x9c>
c000640b:	bb 02 00 00 00       	mov    ebx,0x2
c0006410:	83 f8 01             	cmp    eax,0x1
c0006413:	74 07                	je     c000641c <f_mkdir+0xa1>
c0006415:	eb 2a                	jmp    c0006441 <f_mkdir+0xc6>
c0006417:	bb 07 00 00 00       	mov    ebx,0x7
c000641c:	31 c9                	xor    ecx,ecx
c000641e:	89 f2                	mov    edx,esi
c0006420:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006424:	e8 a9 cd ff ff       	call   c00031d2 <remove_chain>
c0006429:	eb 05                	jmp    c0006430 <f_mkdir+0xb5>
c000642b:	bb 08 00 00 00       	mov    ebx,0x8
c0006430:	83 ec 0c             	sub    esp,0xc
c0006433:	57                   	push   edi
c0006434:	e8 c7 1f 00 00       	call   c0008400 <ff_memfree>
c0006439:	83 c4 10             	add    esp,0x10
c000643c:	e9 5d 01 00 00       	jmp    c000659e <f_mkdir+0x223>
c0006441:	bb 01 00 00 00       	mov    ebx,0x1
c0006446:	83 f8 ff             	cmp    eax,0xffffffff
c0006449:	74 d1                	je     c000641c <f_mkdir+0xa1>
c000644b:	89 f2                	mov    edx,esi
c000644d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006451:	e8 c4 ce ff ff       	call   c000331a <dir_clear>
c0006456:	89 c3                	mov    ebx,eax
c0006458:	85 c0                	test   eax,eax
c000645a:	75 c0                	jne    c000641c <f_mkdir+0xa1>
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006463:	74 69                	je     c00064ce <f_mkdir+0x153>
c0006465:	b9 0b 00 00 00       	mov    ecx,0xb
c000646a:	83 c0 54             	add    eax,0x54
c000646d:	ba 20 00 00 00       	mov    edx,0x20
c0006472:	e8 9c b5 ff ff       	call   c0001a13 <mem_set>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006480:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006484:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006488:	83 c0 6a             	add    eax,0x6a
c000648b:	e8 65 b5 ff ff       	call   c00019f5 <st_dword>
c0006490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006494:	89 f1                	mov    ecx,esi
c0006496:	8d 50 54             	lea    edx,[eax+0x54]
c0006499:	e8 85 e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c000649e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a2:	b9 20 00 00 00       	mov    ecx,0x20
c00064a7:	8d 50 54             	lea    edx,[eax+0x54]
c00064aa:	83 c0 74             	add    eax,0x74
c00064ad:	e8 4c b5 ff ff       	call   c00019fe <mem_cpy>
c00064b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064ba:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064be:	8d 50 74             	lea    edx,[eax+0x74]
c00064c1:	e8 5d e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c00064c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ca:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064ce:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064d2:	e8 2f db ff ff       	call   c0004006 <dir_register>
c00064d7:	89 c3                	mov    ebx,eax
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 3b ff ff ff    	jne    c000641c <f_mkdir+0xa1>
c00064e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e8:	75 74                	jne    c000655e <f_mkdir+0x1e3>
c00064ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064ed:	ba 00 00 21 50       	mov    edx,0x50210000
c00064f2:	83 c0 0c             	add    eax,0xc
c00064f5:	e8 fb b4 ff ff       	call   c00019f5 <st_dword>
c00064fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fe:	89 f2                	mov    edx,esi
c0006500:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006503:	83 c0 34             	add    eax,0x34
c0006506:	e8 ea b4 ff ff       	call   c00019f5 <st_dword>
c000650b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006513:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006516:	c1 e2 09             	shl    edx,0x9
c0006519:	83 c0 38             	add    eax,0x38
c000651c:	e8 d4 b4 ff ff       	call   c00019f5 <st_dword>
c0006521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006525:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006529:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000652c:	c1 e2 09             	shl    edx,0x9
c000652f:	83 c0 28             	add    eax,0x28
c0006532:	e8 be b4 ff ff       	call   c00019f5 <st_dword>
c0006537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000653e:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006542:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006545:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006549:	8d 44 24 34          	lea    eax,[esp+0x34]
c000654d:	e8 8b d3 ff ff       	call   c00038dd <store_xdir>
c0006552:	89 c3                	mov    ebx,eax
c0006554:	85 c0                	test   eax,eax
c0006556:	0f 85 d4 fe ff ff    	jne    c0006430 <f_mkdir+0xb5>
c000655c:	eb 30                	jmp    c000658e <f_mkdir+0x213>
c000655e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006562:	ba 00 00 21 50       	mov    edx,0x50210000
c0006567:	83 c0 16             	add    eax,0x16
c000656a:	e8 86 b4 ff ff       	call   c00019f5 <st_dword>
c000656f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006573:	89 f1                	mov    ecx,esi
c0006575:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006579:	e8 a5 e5 ff ff       	call   c0004b23 <st_clust.isra.1>
c000657e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006582:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006592:	e8 f1 dc ff ff       	call   c0004288 <sync_fs>
c0006597:	89 c3                	mov    ebx,eax
c0006599:	e9 92 fe ff ff       	jmp    c0006430 <f_mkdir+0xb5>
c000659e:	83 ec 80             	sub    esp,0xffffff80
c00065a1:	89 d8                	mov    eax,ebx
c00065a3:	5b                   	pop    ebx
c00065a4:	5e                   	pop    esi
c00065a5:	5f                   	pop    edi
c00065a6:	c3                   	ret    

c00065a7 <f_rename>:
c00065a7:	55                   	push   ebp
c00065a8:	57                   	push   edi
c00065a9:	56                   	push   esi
c00065aa:	53                   	push   ebx
c00065ab:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065b8:	e8 a4 b9 ff ff       	call   c0001f61 <get_ldnumber>
c00065bd:	b9 02 00 00 00       	mov    ecx,0x2
c00065c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065c6:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065cd:	e8 3d be ff ff       	call   c000240f <mount_volume>
c00065d2:	85 c0                	test   eax,eax
c00065d4:	0f 85 b5 02 00 00    	jne    c000688f <f_rename+0x2e8>
c00065da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065de:	83 ec 0c             	sub    esp,0xc
c00065e1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065e5:	68 60 04 00 00       	push   0x460
c00065ea:	e8 f9 1d 00 00       	call   c00083e8 <ff_memalloc>
c00065ef:	83 c4 10             	add    esp,0x10
c00065f2:	89 c3                	mov    ebx,eax
c00065f4:	b8 11 00 00 00       	mov    eax,0x11
c00065f9:	85 db                	test   ebx,ebx
c00065fb:	0f 84 8e 02 00 00    	je     c000688f <f_rename+0x2e8>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000660b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000660e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006611:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006618:	8d 44 24 58          	lea    eax,[esp+0x58]
c000661c:	e8 64 e5 ff ff       	call   c0004b85 <follow_path>
c0006621:	85 c0                	test   eax,eax
c0006623:	0f 85 52 02 00 00    	jne    c000687b <f_rename+0x2d4>
c0006629:	b8 06 00 00 00       	mov    eax,0x6
c000662e:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006636:	0f 85 3f 02 00 00    	jne    c000687b <f_rename+0x2d4>
c000663c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006640:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006643:	0f 85 05 01 00 00    	jne    c000674e <f_rename+0x1a7>
c0006649:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000664c:	b9 40 00 00 00       	mov    ecx,0x40
c0006651:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006655:	e8 a4 b3 ff ff       	call   c00019fe <mem_cpy>
c000665a:	b9 4c 00 00 00       	mov    ecx,0x4c
c000665f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006663:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000666a:	e8 8f b3 ff ff       	call   c00019fe <mem_cpy>
c000666f:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006676:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000667d:	e8 03 e5 ff ff       	call   c0004b85 <follow_path>
c0006682:	85 c0                	test   eax,eax
c0006684:	75 29                	jne    c00066af <f_rename+0x108>
c0006686:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000668a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006691:	74 0a                	je     c000669d <f_rename+0xf6>
c0006693:	b8 08 00 00 00       	mov    eax,0x8
c0006698:	e9 de 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000669d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066a4:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ab:	75 e6                	jne    c0006693 <f_rename+0xec>
c00066ad:	eb 09                	jmp    c00066b8 <f_rename+0x111>
c00066af:	83 f8 04             	cmp    eax,0x4
c00066b2:	0f 85 c3 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066b8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066bf:	e8 42 d9 ff ff       	call   c0004006 <dir_register>
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 af 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066d3:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066d6:	89 c5                	mov    ebp,eax
c00066d8:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066df:	8d 46 24             	lea    eax,[esi+0x24]
c00066e2:	e8 98 b2 ff ff       	call   c000197f <ld_word>
c00066e7:	b9 40 00 00 00       	mov    ecx,0x40
c00066ec:	89 c7                	mov    edi,eax
c00066ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066f2:	89 f0                	mov    eax,esi
c00066f4:	e8 05 b3 ff ff       	call   c00019fe <mem_cpy>
c00066f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066fd:	89 e9                	mov    ecx,ebp
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006705:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006710:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006713:	0f b7 d7             	movzx  edx,di
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	83 c0 24             	add    eax,0x24
c000671c:	e8 d0 b2 ff ff       	call   c00019f1 <st_word>
c0006721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006725:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006728:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000672b:	a8 10                	test   al,0x10
c000672d:	75 06                	jne    c0006735 <f_rename+0x18e>
c000672f:	83 c8 20             	or     eax,0x20
c0006732:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006735:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673c:	e8 9c d1 ff ff       	call   c00038dd <store_xdir>
c0006741:	85 c0                	test   eax,eax
c0006743:	0f 84 1c 01 00 00    	je     c0006865 <f_rename+0x2be>
c0006749:	e9 2d 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000674e:	b9 20 00 00 00       	mov    ecx,0x20
c0006753:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000675a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000675e:	e8 9b b2 ff ff       	call   c00019fe <mem_cpy>
c0006763:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006768:	8d 54 24 58          	lea    edx,[esp+0x58]
c000676c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006773:	e8 86 b2 ff ff       	call   c00019fe <mem_cpy>
c0006778:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000677f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006786:	e8 fa e3 ff ff       	call   c0004b85 <follow_path>
c000678b:	85 c0                	test   eax,eax
c000678d:	75 27                	jne    c00067b6 <f_rename+0x20f>
c000678f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006793:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000679a:	0f 85 f3 fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067a0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067a7:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067ae:	0f 85 df fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067b4:	eb 09                	jmp    c00067bf <f_rename+0x218>
c00067b6:	83 f8 04             	cmp    eax,0x4
c00067b9:	0f 85 bc 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067bf:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c6:	e8 3b d8 ff ff       	call   c0004006 <dir_register>
c00067cb:	85 c0                	test   eax,eax
c00067cd:	0f 85 a8 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067d3:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067da:	b9 13 00 00 00       	mov    ecx,0x13
c00067df:	8d 46 0d             	lea    eax,[esi+0xd]
c00067e2:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067e6:	e8 13 b2 ff ff       	call   c00019fe <mem_cpy>
c00067eb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067ef:	a8 10                	test   al,0x10
c00067f1:	75 03                	jne    c00067f6 <f_rename+0x24f>
c00067f3:	83 c8 20             	or     eax,0x20
c00067f6:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006801:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006805:	74 5e                	je     c0006865 <f_rename+0x2be>
c0006807:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000680e:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006812:	74 51                	je     c0006865 <f_rename+0x2be>
c0006814:	89 f2                	mov    edx,esi
c0006816:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000681a:	8a 07                	mov    al,BYTE PTR [edi]
c000681c:	e8 d9 e2 ff ff       	call   c0004afa <ld_clust.isra.0>
c0006821:	89 c2                	mov    edx,eax
c0006823:	89 f8                	mov    eax,edi
c0006825:	e8 ee b3 ff ff       	call   c0001c18 <clst2sect>
c000682a:	89 c6                	mov    esi,eax
c000682c:	89 d1                	mov    ecx,edx
c000682e:	b8 02 00 00 00       	mov    eax,0x2
c0006833:	09 f2                	or     edx,esi
c0006835:	74 44                	je     c000687b <f_rename+0x2d4>
c0006837:	89 f2                	mov    edx,esi
c0006839:	89 f8                	mov    eax,edi
c000683b:	e8 1d b9 ff ff       	call   c000215d <move_window>
c0006840:	85 c0                	test   eax,eax
c0006842:	75 37                	jne    c000687b <f_rename+0x2d4>
c0006844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006848:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000684c:	75 17                	jne    c0006865 <f_rename+0x2be>
c000684e:	8d 50 74             	lea    edx,[eax+0x74]
c0006851:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006858:	e8 c6 e2 ff ff       	call   c0004b23 <st_clust.isra.1>
c000685d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006861:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006865:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006869:	e8 f4 d0 ff ff       	call   c0003962 <dir_remove>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 09                	jne    c000687b <f_rename+0x2d4>
c0006872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006876:	e8 0d da ff ff       	call   c0004288 <sync_fs>
c000687b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000687f:	83 ec 0c             	sub    esp,0xc
c0006882:	53                   	push   ebx
c0006883:	e8 78 1b 00 00       	call   c0008400 <ff_memfree>
c0006888:	83 c4 10             	add    esp,0x10
c000688b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000688f:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006895:	5b                   	pop    ebx
c0006896:	5e                   	pop    esi
c0006897:	5f                   	pop    edi
c0006898:	5d                   	pop    ebp
c0006899:	c3                   	ret    

c000689a <f_chmod>:
c000689a:	57                   	push   edi
c000689b:	b9 02 00 00 00       	mov    ecx,0x2
c00068a0:	56                   	push   esi
c00068a1:	53                   	push   ebx
c00068a2:	83 ec 60             	sub    esp,0x60
c00068a5:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068a9:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068b1:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068b5:	e8 55 bb ff ff       	call   c000240f <mount_volume>
c00068ba:	85 c0                	test   eax,eax
c00068bc:	0f 85 af 00 00 00    	jne    c0006971 <f_chmod+0xd7>
c00068c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068c6:	83 ec 0c             	sub    esp,0xc
c00068c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068cd:	68 60 04 00 00       	push   0x460
c00068d2:	e8 11 1b 00 00       	call   c00083e8 <ff_memalloc>
c00068d7:	83 c4 10             	add    esp,0x10
c00068da:	89 c6                	mov    esi,eax
c00068dc:	b8 11 00 00 00       	mov    eax,0x11
c00068e1:	85 f6                	test   esi,esi
c00068e3:	0f 84 88 00 00 00    	je     c0006971 <f_chmod+0xd7>
c00068e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068ed:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068f3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006901:	e8 7f e2 ff ff       	call   c0004b85 <follow_path>
c0006906:	85 c0                	test   eax,eax
c0006908:	75 53                	jne    c000695d <f_chmod+0xc3>
c000690a:	b8 06 00 00 00       	mov    eax,0x6
c000690f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006914:	75 47                	jne    c000695d <f_chmod+0xc3>
c0006916:	89 f9                	mov    ecx,edi
c0006918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691c:	83 e1 27             	and    ecx,0x27
c000691f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006922:	75 1d                	jne    c0006941 <f_chmod+0xa7>
c0006924:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006927:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692a:	21 cb                	and    ebx,ecx
c000692c:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692f:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006932:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006936:	e8 a2 cf ff ff       	call   c00038dd <store_xdir>
c000693b:	85 c0                	test   eax,eax
c000693d:	75 1e                	jne    c000695d <f_chmod+0xc3>
c000693f:	eb 13                	jmp    c0006954 <f_chmod+0xba>
c0006941:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006945:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006948:	21 cb                	and    ebx,ecx
c000694a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000694d:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006950:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	e8 2b d9 ff ff       	call   c0004288 <sync_fs>
c000695d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006961:	83 ec 0c             	sub    esp,0xc
c0006964:	56                   	push   esi
c0006965:	e8 96 1a 00 00       	call   c0008400 <ff_memfree>
c000696a:	83 c4 10             	add    esp,0x10
c000696d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006971:	83 c4 60             	add    esp,0x60
c0006974:	5b                   	pop    ebx
c0006975:	5e                   	pop    esi
c0006976:	5f                   	pop    edi
c0006977:	c3                   	ret    

c0006978 <f_utime>:
c0006978:	56                   	push   esi
c0006979:	b9 02 00 00 00       	mov    ecx,0x2
c000697e:	53                   	push   ebx
c000697f:	83 ec 64             	sub    esp,0x64
c0006982:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006986:	8d 54 24 10          	lea    edx,[esp+0x10]
c000698a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000698e:	e8 7c ba ff ff       	call   c000240f <mount_volume>
c0006993:	85 c0                	test   eax,eax
c0006995:	0f 85 b5 00 00 00    	jne    c0006a50 <f_utime+0xd8>
c000699b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699f:	83 ec 0c             	sub    esp,0xc
c00069a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a6:	68 60 04 00 00       	push   0x460
c00069ab:	e8 38 1a 00 00       	call   c00083e8 <ff_memalloc>
c00069b0:	83 c4 10             	add    esp,0x10
c00069b3:	89 c3                	mov    ebx,eax
c00069b5:	b8 11 00 00 00       	mov    eax,0x11
c00069ba:	85 db                	test   ebx,ebx
c00069bc:	0f 84 8e 00 00 00    	je     c0006a50 <f_utime+0xd8>
c00069c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069cc:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069d2:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069da:	e8 a6 e1 ff ff       	call   c0004b85 <follow_path>
c00069df:	85 c0                	test   eax,eax
c00069e1:	75 59                	jne    c0006a3c <f_utime+0xc4>
c00069e3:	b8 06 00 00 00       	mov    eax,0x6
c00069e8:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069ed:	75 4d                	jne    c0006a3c <f_utime+0xc4>
c00069ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f3:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069f7:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069fb:	c1 e2 10             	shl    edx,0x10
c00069fe:	09 ca                	or     edx,ecx
c0006a00:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a03:	75 1a                	jne    c0006a1f <f_utime+0xa7>
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	83 c0 0c             	add    eax,0xc
c0006a0b:	e8 e5 af ff ff       	call   c00019f5 <st_dword>
c0006a10:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a14:	e8 c4 ce ff ff       	call   c00038dd <store_xdir>
c0006a19:	85 c0                	test   eax,eax
c0006a1b:	75 1f                	jne    c0006a3c <f_utime+0xc4>
c0006a1d:	eb 14                	jmp    c0006a33 <f_utime+0xbb>
c0006a1f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a23:	83 c0 16             	add    eax,0x16
c0006a26:	e8 ca af ff ff       	call   c00019f5 <st_dword>
c0006a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a37:	e8 4c d8 ff ff       	call   c0004288 <sync_fs>
c0006a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a40:	83 ec 0c             	sub    esp,0xc
c0006a43:	53                   	push   ebx
c0006a44:	e8 b7 19 00 00       	call   c0008400 <ff_memfree>
c0006a49:	83 c4 10             	add    esp,0x10
c0006a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a50:	83 c4 64             	add    esp,0x64
c0006a53:	5b                   	pop    ebx
c0006a54:	5e                   	pop    esi
c0006a55:	c3                   	ret    

c0006a56 <f_getlabel>:
c0006a56:	55                   	push   ebp
c0006a57:	31 c9                	xor    ecx,ecx
c0006a59:	57                   	push   edi
c0006a5a:	56                   	push   esi
c0006a5b:	53                   	push   ebx
c0006a5c:	83 ec 6c             	sub    esp,0x6c
c0006a5f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a6a:	e8 a0 b9 ff ff       	call   c000240f <mount_volume>
c0006a6f:	89 c6                	mov    esi,eax
c0006a71:	85 c0                	test   eax,eax
c0006a73:	0f 85 c1 01 00 00    	jne    c0006c3a <f_getlabel+0x1e4>
c0006a79:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a81:	0f 84 5f 01 00 00    	je     c0006be6 <f_getlabel+0x190>
c0006a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8b:	31 d2                	xor    edx,edx
c0006a8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9d:	e8 39 c4 ff ff       	call   c0002edb <dir_sdi>
c0006aa2:	85 c0                	test   eax,eax
c0006aa4:	0f 85 2d 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006aaa:	ba 01 00 00 00       	mov    edx,0x1
c0006aaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab3:	e8 33 cc ff ff       	call   c00036eb <dir_read>
c0006ab8:	85 c0                	test   eax,eax
c0006aba:	0f 85 17 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac7:	74 09                	je     c0006ad2 <f_getlabel+0x7c>
c0006ac9:	31 db                	xor    ebx,ebx
c0006acb:	31 c9                	xor    ecx,ecx
c0006acd:	e9 c8 00 00 00       	jmp    c0006b9a <f_getlabel+0x144>
c0006ad2:	31 ed                	xor    ebp,ebp
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	31 ff                	xor    edi,edi
c0006ad8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006adc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ae0:	39 fa                	cmp    edx,edi
c0006ae2:	76 4b                	jbe    c0006b2f <f_getlabel+0xd9>
c0006ae4:	47                   	inc    edi
c0006ae5:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ae8:	01 d0                	add    eax,edx
c0006aea:	e8 90 ae ff ff       	call   c000197f <ld_word>
c0006aef:	66 85 ed             	test   bp,bp
c0006af2:	75 0d                	jne    c0006b01 <f_getlabel+0xab>
c0006af4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006afa:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006aff:	76 28                	jbe    c0006b29 <f_getlabel+0xd3>
c0006b01:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b08:	89 e9                	mov    ecx,ebp
c0006b0a:	01 da                	add    edx,ebx
c0006b0c:	c1 e1 10             	shl    ecx,0x10
c0006b0f:	0f b7 c0             	movzx  eax,ax
c0006b12:	09 c8                	or     eax,ecx
c0006b14:	b9 04 00 00 00       	mov    ecx,0x4
c0006b19:	e8 01 b0 ff ff       	call   c0001b1f <put_utf>
c0006b1e:	84 c0                	test   al,al
c0006b20:	74 0b                	je     c0006b2d <f_getlabel+0xd7>
c0006b22:	0f b6 c0             	movzx  eax,al
c0006b25:	01 c3                	add    ebx,eax
c0006b27:	31 c0                	xor    eax,eax
c0006b29:	89 c5                	mov    ebp,eax
c0006b2b:	eb ab                	jmp    c0006ad8 <f_getlabel+0x82>
c0006b2d:	31 db                	xor    ebx,ebx
c0006b2f:	66 85 ed             	test   bp,bp
c0006b32:	74 02                	je     c0006b36 <f_getlabel+0xe0>
c0006b34:	31 db                	xor    ebx,ebx
c0006b36:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b3d:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b41:	e9 a0 00 00 00       	jmp    c0006be6 <f_getlabel+0x190>
c0006b46:	83 ff 0b             	cmp    edi,0xb
c0006b49:	74 11                	je     c0006b5c <f_getlabel+0x106>
c0006b4b:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b54:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b57:	c1 e0 08             	shl    eax,0x8
c0006b5a:	09 c2                	or     edx,eax
c0006b5c:	0f b7 d2             	movzx  edx,dx
c0006b5f:	50                   	push   eax
c0006b60:	50                   	push   eax
c0006b61:	68 b5 01 00 00       	push   0x1b5
c0006b66:	52                   	push   edx
c0006b67:	e8 44 19 00 00       	call   c00084b0 <ff_oem2uni>
c0006b6c:	83 c4 10             	add    esp,0x10
c0006b6f:	66 85 c0             	test   ax,ax
c0006b72:	74 46                	je     c0006bba <f_getlabel+0x164>
c0006b74:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b7b:	0f b7 c0             	movzx  eax,ax
c0006b7e:	01 da                	add    edx,ebx
c0006b80:	b9 04 00 00 00       	mov    ecx,0x4
c0006b85:	e8 95 af ff ff       	call   c0001b1f <put_utf>
c0006b8a:	84 c0                	test   al,al
c0006b8c:	74 2c                	je     c0006bba <f_getlabel+0x164>
c0006b8e:	0f b6 c0             	movzx  eax,al
c0006b91:	01 c3                	add    ebx,eax
c0006b93:	83 ff 0b             	cmp    edi,0xb
c0006b96:	74 24                	je     c0006bbc <f_getlabel+0x166>
c0006b98:	89 f9                	mov    ecx,edi
c0006b9a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b9e:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ba1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ba6:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006baf:	e8 9f ae ff ff       	call   c0001a53 <dbc_1st>
c0006bb4:	85 c0                	test   eax,eax
c0006bb6:	74 a4                	je     c0006b5c <f_getlabel+0x106>
c0006bb8:	eb 8c                	jmp    c0006b46 <f_getlabel+0xf0>
c0006bba:	31 db                	xor    ebx,ebx
c0006bbc:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bc3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bc6:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bcd:	74 17                	je     c0006be6 <f_getlabel+0x190>
c0006bcf:	4b                   	dec    ebx
c0006bd0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006bd3:	74 ee                	je     c0006bc3 <f_getlabel+0x16d>
c0006bd5:	eb 0f                	jmp    c0006be6 <f_getlabel+0x190>
c0006bd7:	83 f8 04             	cmp    eax,0x4
c0006bda:	75 5c                	jne    c0006c38 <f_getlabel+0x1e2>
c0006bdc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006be3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006be6:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bee:	74 4a                	je     c0006c3a <f_getlabel+0x1e4>
c0006bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bf7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bfa:	e8 5e b5 ff ff       	call   c000215d <move_window>
c0006bff:	89 c6                	mov    esi,eax
c0006c01:	85 c0                	test   eax,eax
c0006c03:	75 35                	jne    c0006c3a <f_getlabel+0x1e4>
c0006c05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c09:	b8 43 00 00 00       	mov    eax,0x43
c0006c0e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c10:	80 f9 03             	cmp    cl,0x3
c0006c13:	74 0f                	je     c0006c24 <f_getlabel+0x1ce>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	80 f9 04             	cmp    cl,0x4
c0006c1a:	0f 94 c0             	sete   al
c0006c1d:	48                   	dec    eax
c0006c1e:	83 e0 c3             	and    eax,0xffffffc3
c0006c21:	83 c0 64             	add    eax,0x64
c0006c24:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c28:	e8 5f ad ff ff       	call   c000198c <ld_dword>
c0006c2d:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c34:	89 07                	mov    DWORD PTR [edi],eax
c0006c36:	eb 02                	jmp    c0006c3a <f_getlabel+0x1e4>
c0006c38:	89 c6                	mov    esi,eax
c0006c3a:	83 c4 6c             	add    esp,0x6c
c0006c3d:	89 f0                	mov    eax,esi
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	5f                   	pop    edi
c0006c42:	5d                   	pop    ebp
c0006c43:	c3                   	ret    

c0006c44 <f_setlabel>:
c0006c44:	56                   	push   esi
c0006c45:	b9 02 00 00 00       	mov    ecx,0x2
c0006c4a:	53                   	push   ebx
c0006c4b:	83 ec 74             	sub    esp,0x74
c0006c4e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c52:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c59:	e8 b1 b7 ff ff       	call   c000240f <mount_volume>
c0006c5e:	89 c6                	mov    esi,eax
c0006c60:	85 c0                	test   eax,eax
c0006c62:	0f 85 41 02 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c6f:	0f 85 8e 00 00 00    	jne    c0006d03 <f_setlabel+0xbf>
c0006c75:	b9 16 00 00 00       	mov    ecx,0x16
c0006c7a:	31 d2                	xor    edx,edx
c0006c7c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c80:	31 db                	xor    ebx,ebx
c0006c82:	e8 8c ad ff ff       	call   c0001a13 <mem_set>
c0006c87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c8e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c91:	0f 86 0a 01 00 00    	jbe    c0006da1 <f_setlabel+0x15d>
c0006c97:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c9e:	e8 b6 ad ff ff       	call   c0001a59 <tchar2uni>
c0006ca3:	89 c6                	mov    esi,eax
c0006ca5:	3d ff ff 00 00       	cmp    eax,0xffff
c0006caa:	76 2a                	jbe    c0006cd6 <f_setlabel+0x92>
c0006cac:	83 f8 ff             	cmp    eax,0xffffffff
c0006caf:	74 05                	je     c0006cb6 <f_setlabel+0x72>
c0006cb1:	83 fb 09             	cmp    ebx,0x9
c0006cb4:	76 0a                	jbe    c0006cc0 <f_setlabel+0x7c>
c0006cb6:	be 06 00 00 00       	mov    esi,0x6
c0006cbb:	e9 e9 01 00 00       	jmp    c0006ea9 <f_setlabel+0x265>
c0006cc0:	89 c2                	mov    edx,eax
c0006cc2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc6:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cc9:	c1 ea 10             	shr    edx,0x10
c0006ccc:	01 c8                	add    eax,ecx
c0006cce:	43                   	inc    ebx
c0006ccf:	e8 1d ad ff ff       	call   c00019f1 <st_word>
c0006cd4:	eb 04                	jmp    c0006cda <f_setlabel+0x96>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	74 dc                	je     c0006cb6 <f_setlabel+0x72>
c0006cda:	89 f2                	mov    edx,esi
c0006cdc:	b8 97 22 02 c0       	mov    eax,0xc0022297
c0006ce1:	e8 5b ad ff ff       	call   c0001a41 <chk_chr>
c0006ce6:	85 c0                	test   eax,eax
c0006ce8:	75 cc                	jne    c0006cb6 <f_setlabel+0x72>
c0006cea:	83 fb 0a             	cmp    ebx,0xa
c0006ced:	77 c7                	ja     c0006cb6 <f_setlabel+0x72>
c0006cef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cf2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cf6:	0f b7 d6             	movzx  edx,si
c0006cf9:	01 c8                	add    eax,ecx
c0006cfb:	43                   	inc    ebx
c0006cfc:	e8 f0 ac ff ff       	call   c00019f1 <st_word>
c0006d01:	eb 84                	jmp    c0006c87 <f_setlabel+0x43>
c0006d03:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d08:	ba 20 00 00 00       	mov    edx,0x20
c0006d0d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d11:	31 db                	xor    ebx,ebx
c0006d13:	e8 fb ac ff ff       	call   c0001a13 <mem_set>
c0006d18:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d1f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d22:	76 60                	jbe    c0006d84 <f_setlabel+0x140>
c0006d24:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2b:	e8 29 ad ff ff       	call   c0001a59 <tchar2uni>
c0006d30:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d35:	0f 87 7b ff ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006d3b:	83 ec 0c             	sub    esp,0xc
c0006d3e:	50                   	push   eax
c0006d3f:	e8 e0 17 00 00       	call   c0008524 <ff_wtoupper>
c0006d44:	5a                   	pop    edx
c0006d45:	59                   	pop    ecx
c0006d46:	68 b5 01 00 00       	push   0x1b5
c0006d4b:	50                   	push   eax
c0006d4c:	e8 c7 16 00 00       	call   c0008418 <ff_uni2oem>
c0006d51:	83 c4 10             	add    esp,0x10
c0006d54:	89 c6                	mov    esi,eax
c0006d56:	66 85 c0             	test   ax,ax
c0006d59:	0f 84 57 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d5f:	0f b7 d0             	movzx  edx,ax
c0006d62:	b8 90 22 02 c0       	mov    eax,0xc0022290
c0006d67:	e8 d5 ac ff ff       	call   c0001a41 <chk_chr>
c0006d6c:	85 c0                	test   eax,eax
c0006d6e:	0f 85 42 ff ff ff    	jne    c0006cb6 <f_setlabel+0x72>
c0006d74:	66 81 fe ff 00       	cmp    si,0xff
c0006d79:	0f 87 14 01 00 00    	ja     c0006e93 <f_setlabel+0x24f>
c0006d7f:	e9 fa 00 00 00       	jmp    c0006e7e <f_setlabel+0x23a>
c0006d84:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d89:	0f 84 27 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d8f:	85 db                	test   ebx,ebx
c0006d91:	74 0e                	je     c0006da1 <f_setlabel+0x15d>
c0006d93:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d96:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d9b:	75 04                	jne    c0006da1 <f_setlabel+0x15d>
c0006d9d:	89 c3                	mov    ebx,eax
c0006d9f:	eb ee                	jmp    c0006d8f <f_setlabel+0x14b>
c0006da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006da5:	31 d2                	xor    edx,edx
c0006da7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006db3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006db7:	e8 1f c1 ff ff       	call   c0002edb <dir_sdi>
c0006dbc:	89 c6                	mov    esi,eax
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 e3 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006dc6:	ba 01 00 00 00       	mov    edx,0x1
c0006dcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dcf:	e8 17 c9 ff ff       	call   c00036eb <dir_read>
c0006dd4:	85 c0                	test   eax,eax
c0006dd6:	75 21                	jne    c0006df9 <f_setlabel+0x1b5>
c0006dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ddc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006de0:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006de3:	74 5d                	je     c0006e42 <f_setlabel+0x1fe>
c0006de5:	85 db                	test   ebx,ebx
c0006de7:	74 0b                	je     c0006df4 <f_setlabel+0x1b0>
c0006de9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006df2:	eb 70                	jmp    c0006e64 <f_setlabel+0x220>
c0006df4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006df7:	eb 70                	jmp    c0006e69 <f_setlabel+0x225>
c0006df9:	83 f8 04             	cmp    eax,0x4
c0006dfc:	75 7c                	jne    c0006e7a <f_setlabel+0x236>
c0006dfe:	85 db                	test   ebx,ebx
c0006e00:	0f 84 a3 00 00 00    	je     c0006ea9 <f_setlabel+0x265>
c0006e06:	ba 01 00 00 00       	mov    edx,0x1
c0006e0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e0f:	e8 51 ca ff ff       	call   c0003865 <dir_alloc>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	85 c0                	test   eax,eax
c0006e18:	0f 85 8b 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006e1e:	31 d2                	xor    edx,edx
c0006e20:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e24:	b9 20 00 00 00       	mov    ecx,0x20
c0006e29:	e8 e5 ab ff ff       	call   c0001a13 <mem_set>
c0006e2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e32:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e39:	75 18                	jne    c0006e53 <f_setlabel+0x20f>
c0006e3b:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e3e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e42:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e45:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e4e:	83 c0 02             	add    eax,0x2
c0006e51:	eb 9b                	jmp    c0006dee <f_setlabel+0x1aa>
c0006e53:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e57:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e5c:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	e8 95 ab ff ff       	call   c00019fe <mem_cpy>
c0006e69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e6d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e75:	e8 0e d4 ff ff       	call   c0004288 <sync_fs>
c0006e7a:	89 c6                	mov    esi,eax
c0006e7c:	eb 2b                	jmp    c0006ea9 <f_setlabel+0x265>
c0006e7e:	83 fb 0a             	cmp    ebx,0xa
c0006e81:	0f 87 2f fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e87:	89 f0                	mov    eax,esi
c0006e89:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e8d:	43                   	inc    ebx
c0006e8e:	e9 85 fe ff ff       	jmp    c0006d18 <f_setlabel+0xd4>
c0006e93:	83 fb 09             	cmp    ebx,0x9
c0006e96:	0f 87 1a fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e9c:	89 f0                	mov    eax,esi
c0006e9e:	66 c1 e8 08          	shr    ax,0x8
c0006ea2:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ea6:	43                   	inc    ebx
c0006ea7:	eb de                	jmp    c0006e87 <f_setlabel+0x243>
c0006ea9:	89 f0                	mov    eax,esi
c0006eab:	83 c4 74             	add    esp,0x74
c0006eae:	5b                   	pop    ebx
c0006eaf:	5e                   	pop    esi
c0006eb0:	c3                   	ret    

c0006eb1 <f_expand>:
c0006eb1:	55                   	push   ebp
c0006eb2:	57                   	push   edi
c0006eb3:	56                   	push   esi
c0006eb4:	53                   	push   ebx
c0006eb5:	83 ec 3c             	sub    esp,0x3c
c0006eb8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006ebc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0006ec0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ec8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0006ed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006ed8:	89 d8                	mov    eax,ebx
c0006eda:	e8 a3 b1 ff ff       	call   c0002082 <validate>
c0006edf:	89 c5                	mov    ebp,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 f4 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ee9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eed:	85 ed                	test   ebp,ebp
c0006eef:	0f 85 e8 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006efd:	75 0a                	jne    c0006f09 <f_expand+0x58>
c0006eff:	bd 07 00 00 00       	mov    ebp,0x7
c0006f04:	e9 d4 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006f09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0006f0c:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c0006f0f:	75 ee                	jne    c0006eff <f_expand+0x4e>
c0006f11:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006f15:	74 e8                	je     c0006eff <f_expand+0x4e>
c0006f17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0006f1b:	8a 0e                	mov    cl,BYTE PTR [esi]
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	74 07                	je     c0006f29 <f_expand+0x78>
c0006f22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006f27:	77 d6                	ja     c0006eff <f_expand+0x4e>
c0006f29:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0006f2d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0006f31:	c1 e0 09             	shl    eax,0x9
c0006f34:	8d 50 ff             	lea    edx,[eax-0x1]
c0006f37:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0006f3b:	0f 95 c2             	setne  dl
c0006f3e:	0f b6 d2             	movzx  edx,dl
c0006f41:	89 d7                	mov    edi,edx
c0006f43:	31 d2                	xor    edx,edx
c0006f45:	52                   	push   edx
c0006f46:	50                   	push   eax
c0006f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4f:	e8 ec a4 01 00       	call   c0021440 <__udivdi3>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	01 f8                	add    eax,edi
c0006f59:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0006f5d:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0006f60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f64:	83 ff 01             	cmp    edi,0x1
c0006f67:	76 05                	jbe    c0006f6e <f_expand+0xbd>
c0006f69:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0006f6c:	77 05                	ja     c0006f73 <f_expand+0xc2>
c0006f6e:	bf 02 00 00 00       	mov    edi,0x2
c0006f73:	80 f9 04             	cmp    cl,0x4
c0006f76:	75 19                	jne    c0006f91 <f_expand+0xe0>
c0006f78:	89 f0                	mov    eax,esi
c0006f7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006f7e:	89 fa                	mov    edx,edi
c0006f80:	e8 f3 b9 ff ff       	call   c0002978 <find_bitmap>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	85 c0                	test   eax,eax
c0006f89:	0f 84 70 ff ff ff    	je     c0006eff <f_expand+0x4e>
c0006f8f:	eb 7f                	jmp    c0007010 <f_expand+0x15f>
c0006f91:	89 fe                	mov    esi,edi
c0006f93:	89 f9                	mov    ecx,edi
c0006f95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006f9d:	89 ca                	mov    edx,ecx
c0006f9f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006fa3:	89 d8                	mov    eax,ebx
c0006fa5:	e8 3b bd ff ff       	call   c0002ce5 <get_fat>
c0006faa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006fb2:	41                   	inc    ecx
c0006fb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006fb7:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0006fba:	77 05                	ja     c0006fc1 <f_expand+0x110>
c0006fbc:	b9 02 00 00 00       	mov    ecx,0x2
c0006fc1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0006fc6:	74 3e                	je     c0007006 <f_expand+0x155>
c0006fc8:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0006fcd:	75 0a                	jne    c0006fd9 <f_expand+0x128>
c0006fcf:	bd 01 00 00 00       	mov    ebp,0x1
c0006fd4:	e9 04 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006fd9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0006fde:	75 13                	jne    c0006ff3 <f_expand+0x142>
c0006fe0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006fe4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006fe8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0006fec:	75 0f                	jne    c0006ffd <f_expand+0x14c>
c0006fee:	e9 ce 00 00 00       	jmp    c00070c1 <f_expand+0x210>
c0006ff3:	89 ce                	mov    esi,ecx
c0006ff5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006ffd:	39 f9                	cmp    ecx,edi
c0006fff:	75 9c                	jne    c0006f9d <f_expand+0xec>
c0007001:	e9 f9 fe ff ff       	jmp    c0006eff <f_expand+0x4e>
c0007006:	bd 02 00 00 00       	mov    ebp,0x2
c000700b:	e9 cd 00 00 00       	jmp    c00070dd <f_expand+0x22c>
c0007010:	83 f8 ff             	cmp    eax,0xffffffff
c0007013:	74 ba                	je     c0006fcf <f_expand+0x11e>
c0007015:	8d 7e ff             	lea    edi,[esi-0x1]
c0007018:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000701c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007020:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007025:	74 51                	je     c0007078 <f_expand+0x1c7>
c0007027:	83 ec 0c             	sub    esp,0xc
c000702a:	89 f2                	mov    edx,esi
c000702c:	6a 01                	push   0x1
c000702e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007032:	e8 f4 b9 ff ff       	call   c0002a2b <change_bitmap>
c0007037:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000703b:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000703f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 2e                	je     c0007078 <f_expand+0x1c7>
c000704a:	eb 71                	jmp    c00070bd <f_expand+0x20c>
c000704c:	83 c9 ff             	or     ecx,0xffffffff
c000704f:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007054:	74 03                	je     c0007059 <f_expand+0x1a8>
c0007056:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007059:	89 fa                	mov    edx,edi
c000705b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000705f:	e8 7c ba ff ff       	call   c0002ae0 <put_fat>
c0007064:	85 c0                	test   eax,eax
c0007066:	75 55                	jne    c00070bd <f_expand+0x20c>
c0007068:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000706c:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007070:	47                   	inc    edi
c0007071:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007076:	75 d4                	jne    c000704c <f_expand+0x19b>
c0007078:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000707c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007080:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007085:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007088:	74 53                	je     c00070dd <f_expand+0x22c>
c000708a:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c000708d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007091:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007095:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000709d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00070a0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00070a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00070a6:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00070a9:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00070ac:	39 ca                	cmp    edx,ecx
c00070ae:	77 2d                	ja     c00070dd <f_expand+0x22c>
c00070b0:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00070b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00070b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00070bb:	eb 20                	jmp    c00070dd <f_expand+0x22c>
c00070bd:	89 c5                	mov    ebp,eax
c00070bf:	eb 1c                	jmp    c00070dd <f_expand+0x22c>
c00070c1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00070c6:	74 0c                	je     c00070d4 <f_expand+0x223>
c00070c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070cc:	89 f7                	mov    edi,esi
c00070ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00070d2:	eb 9d                	jmp    c0007071 <f_expand+0x1c0>
c00070d4:	8d 46 ff             	lea    eax,[esi-0x1]
c00070d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070db:	eb 9b                	jmp    c0007078 <f_expand+0x1c7>
c00070dd:	83 c4 3c             	add    esp,0x3c
c00070e0:	89 e8                	mov    eax,ebp
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	5f                   	pop    edi
c00070e5:	5d                   	pop    ebp
c00070e6:	c3                   	ret    

c00070e7 <f_forward>:
c00070e7:	55                   	push   ebp
c00070e8:	57                   	push   edi
c00070e9:	56                   	push   esi
c00070ea:	53                   	push   ebx
c00070eb:	83 ec 2c             	sub    esp,0x2c
c00070ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00070f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007100:	89 d8                	mov    eax,ebx
c0007102:	e8 7b af ff ff       	call   c0002082 <validate>
c0007107:	89 c5                	mov    ebp,eax
c0007109:	85 c0                	test   eax,eax
c000710b:	0f 85 aa 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c0007111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007115:	85 ed                	test   ebp,ebp
c0007117:	0f 85 9e 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c000711d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007121:	0f 84 8f 01 00 00    	je     c00072b6 <f_forward+0x1cf>
c0007127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000712a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000712d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007130:	bf 00 00 00 00       	mov    edi,0x0
c0007135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000713c:	89 d1                	mov    ecx,edx
c000713e:	19 f9                	sbb    ecx,edi
c0007140:	0f 83 cf 00 00 00    	jae    c0007215 <f_forward+0x12e>
c0007146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000714a:	e9 c6 00 00 00       	jmp    c0007215 <f_forward+0x12e>
c000714f:	50                   	push   eax
c0007150:	50                   	push   eax
c0007151:	6a 00                	push   0x0
c0007153:	6a 00                	push   0x0
c0007155:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007159:	83 c4 10             	add    esp,0x10
c000715c:	85 c0                	test   eax,eax
c000715e:	0f 84 57 01 00 00    	je     c00072bb <f_forward+0x1d4>
c0007164:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007167:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000716b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000716e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007172:	89 d7                	mov    edi,edx
c0007174:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007177:	89 c6                	mov    esi,eax
c0007179:	0f ac fe 09          	shrd   esi,edi,0x9
c000717d:	21 ce                	and    esi,ecx
c000717f:	89 c1                	mov    ecx,eax
c0007181:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007187:	0f 84 98 00 00 00    	je     c0007225 <f_forward+0x13e>
c000718d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007191:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007194:	89 c8                	mov    eax,ecx
c0007196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000719a:	e8 79 aa ff ff       	call   c0001c18 <clst2sect>
c000719f:	89 d7                	mov    edi,edx
c00071a1:	09 c7                	or     edi,eax
c00071a3:	0f 84 9e 00 00 00    	je     c0007247 <f_forward+0x160>
c00071a9:	31 ff                	xor    edi,edi
c00071ab:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00071ae:	01 c6                	add    esi,eax
c00071b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071b4:	11 d7                	adc    edi,edx
c00071b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00071b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00071bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00071c0:	39 fa                	cmp    edx,edi
c00071c2:	0f 85 a2 00 00 00    	jne    c000726a <f_forward+0x183>
c00071c8:	39 f0                	cmp    eax,esi
c00071ca:	0f 85 9a 00 00 00    	jne    c000726a <f_forward+0x183>
c00071d0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d3:	ba 00 02 00 00       	mov    edx,0x200
c00071d8:	25 ff 01 00 00       	and    eax,0x1ff
c00071dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00071e1:	29 c2                	sub    edx,eax
c00071e3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00071e6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00071e9:	39 d1                	cmp    ecx,edx
c00071eb:	76 02                	jbe    c00071ef <f_forward+0x108>
c00071ed:	89 d1                	mov    ecx,edx
c00071ef:	8d 73 50             	lea    esi,[ebx+0x50]
c00071f2:	52                   	push   edx
c00071f3:	01 c6                	add    esi,eax
c00071f5:	52                   	push   edx
c00071f6:	51                   	push   ecx
c00071f7:	56                   	push   esi
c00071f8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	85 c0                	test   eax,eax
c0007201:	74 44                	je     c0007247 <f_forward+0x160>
c0007203:	31 ff                	xor    edi,edi
c0007205:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007208:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000720b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000720f:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007213:	01 07                	add    DWORD PTR [edi],eax
c0007215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000721a:	0f 85 2f ff ff ff    	jne    c000714f <f_forward+0x68>
c0007220:	e9 96 00 00 00       	jmp    c00072bb <f_forward+0x1d4>
c0007225:	85 f6                	test   esi,esi
c0007227:	0f 85 60 ff ff ff    	jne    c000718d <f_forward+0xa6>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	75 05                	jne    c0007238 <f_forward+0x151>
c0007233:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007236:	eb 0a                	jmp    c0007242 <f_forward+0x15b>
c0007238:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000723b:	89 d8                	mov    eax,ebx
c000723d:	e8 a3 ba ff ff       	call   c0002ce5 <get_fat>
c0007242:	83 f8 01             	cmp    eax,0x1
c0007245:	77 0b                	ja     c0007252 <f_forward+0x16b>
c0007247:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000724b:	bd 02 00 00 00       	mov    ebp,0x2
c0007250:	eb 69                	jmp    c00072bb <f_forward+0x1d4>
c0007252:	83 f8 ff             	cmp    eax,0xffffffff
c0007255:	75 0b                	jne    c0007262 <f_forward+0x17b>
c0007257:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000725b:	bd 01 00 00 00       	mov    ebp,0x1
c0007260:	eb 59                	jmp    c00072bb <f_forward+0x1d4>
c0007262:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007265:	e9 23 ff ff ff       	jmp    c000718d <f_forward+0xa6>
c000726a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000726e:	79 20                	jns    c0007290 <f_forward+0x1a9>
c0007270:	83 ec 0c             	sub    esp,0xc
c0007273:	6a 01                	push   0x1
c0007275:	52                   	push   edx
c0007276:	50                   	push   eax
c0007277:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000727b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000727f:	50                   	push   eax
c0007280:	e8 c5 a6 ff ff       	call   c000194a <disk_write>
c0007285:	83 c4 20             	add    esp,0x20
c0007288:	85 c0                	test   eax,eax
c000728a:	75 cb                	jne    c0007257 <f_forward+0x170>
c000728c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007290:	83 ec 0c             	sub    esp,0xc
c0007293:	6a 01                	push   0x1
c0007295:	57                   	push   edi
c0007296:	56                   	push   esi
c0007297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000729b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000729f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00072a3:	50                   	push   eax
c00072a4:	e8 8b a6 ff ff       	call   c0001934 <disk_read>
c00072a9:	83 c4 20             	add    esp,0x20
c00072ac:	85 c0                	test   eax,eax
c00072ae:	0f 84 1c ff ff ff    	je     c00071d0 <f_forward+0xe9>
c00072b4:	eb a1                	jmp    c0007257 <f_forward+0x170>
c00072b6:	bd 07 00 00 00       	mov    ebp,0x7
c00072bb:	83 c4 2c             	add    esp,0x2c
c00072be:	89 e8                	mov    eax,ebp
c00072c0:	5b                   	pop    ebx
c00072c1:	5e                   	pop    esi
c00072c2:	5f                   	pop    edi
c00072c3:	5d                   	pop    ebp
c00072c4:	c3                   	ret    

c00072c5 <f_mkfs>:
c00072c5:	55                   	push   ebp
c00072c6:	57                   	push   edi
c00072c7:	56                   	push   esi
c00072c8:	53                   	push   ebx
c00072c9:	bb 0b 00 00 00       	mov    ebx,0xb
c00072ce:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00072d4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00072db:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00072e2:	e8 7a ac ff ff       	call   c0001f61 <get_ldnumber>
c00072e7:	85 c0                	test   eax,eax
c00072e9:	0f 88 ec 10 00 00    	js     c00083db <f_mkfs+0x1116>
c00072ef:	8b 14 85 60 62 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9da0]
c00072f6:	85 d2                	test   edx,edx
c00072f8:	74 03                	je     c00072fd <f_mkfs+0x38>
c00072fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00072fd:	85 f6                	test   esi,esi
c00072ff:	75 05                	jne    c0007306 <f_mkfs+0x41>
c0007301:	be 80 22 02 c0       	mov    esi,0xc0022280
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	0f b6 c0             	movzx  eax,al
c000730c:	bb 03 00 00 00       	mov    ebx,0x3
c0007311:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007319:	e8 13 a6 ff ff       	call   c0001931 <disk_initialize>
c000731e:	83 c4 10             	add    esp,0x10
c0007321:	a8 01                	test   al,0x1
c0007323:	0f 85 b2 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007329:	bb 0a 00 00 00       	mov    ebx,0xa
c000732e:	a8 04                	test   al,0x4
c0007330:	0f 85 a5 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007336:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007339:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000733d:	85 c0                	test   eax,eax
c000733f:	75 20                	jne    c0007361 <f_mkfs+0x9c>
c0007341:	51                   	push   ecx
c0007342:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007346:	50                   	push   eax
c0007347:	6a 03                	push   0x3
c0007349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734d:	e8 0e a6 ff ff       	call   c0001960 <disk_ioctl>
c0007352:	83 c4 10             	add    esp,0x10
c0007355:	85 c0                	test   eax,eax
c0007357:	74 08                	je     c0007361 <f_mkfs+0x9c>
c0007359:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007361:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007365:	8d 42 ff             	lea    eax,[edx-0x1]
c0007368:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000736d:	77 04                	ja     c0007373 <f_mkfs+0xae>
c000736f:	85 c2                	test   edx,eax
c0007371:	74 08                	je     c000737b <f_mkfs+0xb6>
c0007373:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000737b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000737e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007382:	48                   	dec    eax
c0007383:	3c 01                	cmp    al,0x1
c0007385:	76 05                	jbe    c000738c <f_mkfs+0xc7>
c0007387:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000738c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000738f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007393:	48                   	dec    eax
c0007394:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007399:	77 07                	ja     c00073a2 <f_mkfs+0xdd>
c000739b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00073a0:	74 08                	je     c00073aa <f_mkfs+0xe5>
c00073a2:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00073aa:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00073ad:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00073b3:	77 07                	ja     c00073bc <f_mkfs+0xf7>
c00073b5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00073b8:	85 d8                	test   eax,ebx
c00073ba:	74 02                	je     c00073be <f_mkfs+0xf9>
c00073bc:	31 db                	xor    ebx,ebx
c00073be:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00073c9:	77 0a                	ja     c00073d5 <f_mkfs+0x110>
c00073cb:	bb 11 00 00 00       	mov    ebx,0x11
c00073d0:	e9 06 10 00 00       	jmp    c00083db <f_mkfs+0x1116>
c00073d5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00073dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00073de:	85 ed                	test   ebp,ebp
c00073e0:	75 1e                	jne    c0007400 <f_mkfs+0x13b>
c00073e2:	83 ec 0c             	sub    esp,0xc
c00073e5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00073ec:	25 00 fe ff ff       	and    eax,0xfffffe00
c00073f1:	50                   	push   eax
c00073f2:	e8 f1 0f 00 00       	call   c00083e8 <ff_memalloc>
c00073f7:	83 c4 10             	add    esp,0x10
c00073fa:	89 c5                	mov    ebp,eax
c00073fc:	85 c0                	test   eax,eax
c00073fe:	74 cb                	je     c00073cb <f_mkfs+0x106>
c0007400:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007408:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007410:	52                   	push   edx
c0007411:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007415:	50                   	push   eax
c0007416:	6a 01                	push   0x1
c0007418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741c:	e8 3f a5 ff ff       	call   c0001960 <disk_ioctl>
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	85 c0                	test   eax,eax
c0007426:	0f 85 4a 0f 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000742c:	89 f1                	mov    ecx,esi
c000742e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007436:	83 e1 0f             	and    ecx,0xf
c0007439:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007441:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007445:	83 e6 08             	and    esi,0x8
c0007448:	75 56                	jne    c00074a0 <f_mkfs+0x1db>
c000744a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000744e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007452:	83 ff 00             	cmp    edi,0x0
c0007455:	76 20                	jbe    c0007477 <f_mkfs+0x1b2>
c0007457:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000745c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007464:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000746a:	83 d7 ff             	adc    edi,0xffffffff
c000746d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007471:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007475:	eb 21                	jmp    c0007498 <f_mkfs+0x1d3>
c0007477:	ba 3f 00 00 00       	mov    edx,0x3f
c000747c:	39 f2                	cmp    edx,esi
c000747e:	19 f8                	sbb    eax,edi
c0007480:	73 1e                	jae    c00074a0 <f_mkfs+0x1db>
c0007482:	83 c6 c1             	add    esi,0xffffffc1
c0007485:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000748d:	83 d7 ff             	adc    edi,0xffffffff
c0007490:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007494:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007498:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00074a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00074a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00074ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074af:	31 c0                	xor    eax,eax
c00074b1:	ba 7f 00 00 00       	mov    edx,0x7f
c00074b6:	89 c7                	mov    edi,eax
c00074b8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00074bb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00074bf:	0f 83 c5 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c00074c5:	89 df                	mov    edi,ebx
c00074c7:	c1 ef 09             	shr    edi,0x9
c00074ca:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00074ce:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00074d5:	c1 ef 09             	shr    edi,0x9
c00074d8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00074dd:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00074e1:	74 29                	je     c000750c <f_mkfs+0x247>
c00074e3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00074e9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00074ee:	0f 97 c2             	seta   dl
c00074f1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00074f4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00074f8:	0f 92 c0             	setb   al
c00074fb:	08 c2                	or     dl,al
c00074fd:	75 5b                	jne    c000755a <f_mkfs+0x295>
c00074ff:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007503:	83 e0 07             	and    eax,0x7
c0007506:	3c 04                	cmp    al,0x4
c0007508:	74 50                	je     c000755a <f_mkfs+0x295>
c000750a:	eb 1b                	jmp    c0007527 <f_mkfs+0x262>
c000750c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007511:	0f 87 73 0a 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007517:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000751d:	76 08                	jbe    c0007527 <f_mkfs+0x262>
c000751f:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007527:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000752b:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000752f:	83 e0 01             	and    eax,0x1
c0007532:	80 e1 02             	and    cl,0x2
c0007535:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007539:	74 0d                	je     c0007548 <f_mkfs+0x283>
c000753b:	84 c0                	test   al,al
c000753d:	0f 84 53 09 00 00    	je     c0007e96 <f_mkfs+0xbd1>
c0007543:	e9 12 08 00 00       	jmp    c0007d5a <f_mkfs+0xa95>
c0007548:	bb 13 00 00 00       	mov    ebx,0x13
c000754d:	84 c0                	test   al,al
c000754f:	0f 85 05 08 00 00    	jne    c0007d5a <f_mkfs+0xa95>
c0007555:	e9 39 0e 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c000755a:	31 c0                	xor    eax,eax
c000755c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007561:	89 c7                	mov    edi,eax
c0007563:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007566:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756a:	0f 83 1a 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c0007570:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007576:	77 39                	ja     c00075b1 <f_mkfs+0x2ec>
c0007578:	ba ff ff 07 00       	mov    edx,0x7ffff
c000757d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007585:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007588:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000758c:	73 08                	jae    c0007596 <f_mkfs+0x2d1>
c000758e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007596:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000759b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000759e:	b8 00 00 00 00       	mov    eax,0x0
c00075a3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a7:	73 08                	jae    c00075b1 <f_mkfs+0x2ec>
c00075a9:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00075b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b9:	83 c0 20             	add    eax,0x20
c00075bc:	83 d2 00             	adc    edx,0x0
c00075bf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075c3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00075c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075cb:	31 d2                	xor    edx,edx
c00075cd:	31 ff                	xor    edi,edi
c00075cf:	52                   	push   edx
c00075d0:	89 fb                	mov    ebx,edi
c00075d2:	50                   	push   eax
c00075d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075db:	e8 60 9e 01 00       	call   c0021440 <__udivdi3>
c00075e0:	83 c4 10             	add    esp,0x10
c00075e3:	c1 e0 02             	shl    eax,0x2
c00075e6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00075ea:	05 07 02 00 00       	add    eax,0x207
c00075ef:	89 f1                	mov    ecx,esi
c00075f1:	c1 e8 09             	shr    eax,0x9
c00075f4:	83 c1 ff             	add    ecx,0xffffffff
c00075f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00075fb:	83 d3 ff             	adc    ebx,0xffffffff
c00075fe:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007602:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007606:	31 d2                	xor    edx,edx
c0007608:	01 c8                	add    eax,ecx
c000760a:	11 da                	adc    edx,ebx
c000760c:	89 c1                	mov    ecx,eax
c000760e:	f7 de                	neg    esi
c0007610:	89 d0                	mov    eax,edx
c0007612:	83 d7 00             	adc    edi,0x0
c0007615:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007619:	f7 df                	neg    edi
c000761b:	21 f1                	and    ecx,esi
c000761d:	21 f8                	and    eax,edi
c000761f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007627:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000762b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000762f:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000763a:	0f ac d0 01          	shrd   eax,edx,0x1
c000763e:	89 df                	mov    edi,ebx
c0007640:	d1 ea                	shr    edx,1
c0007642:	39 c1                	cmp    ecx,eax
c0007644:	19 d7                	sbb    edi,edx
c0007646:	0f 83 3e 09 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c000764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007650:	31 d2                	xor    edx,edx
c0007652:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007656:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000765e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007661:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007665:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007669:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000766d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007671:	83 f8 0f             	cmp    eax,0xf
c0007674:	0f 86 10 09 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c000767a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007682:	0f 87 02 09 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007688:	31 d2                	xor    edx,edx
c000768a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000768e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007696:	83 c0 07             	add    eax,0x7
c0007699:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00076a1:	c1 e8 03             	shr    eax,0x3
c00076a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00076ab:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00076af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076b3:	c1 e0 09             	shl    eax,0x9
c00076b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ba:	48                   	dec    eax
c00076bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00076c3:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00076c7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076cb:	31 d2                	xor    edx,edx
c00076cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00076d1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00076d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076dc:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00076e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00076e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00076e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00076f1:	31 ff                	xor    edi,edi
c00076f3:	31 f6                	xor    esi,esi
c00076f5:	31 db                	xor    ebx,ebx
c00076f7:	85 ff                	test   edi,edi
c00076f9:	74 05                	je     c0007700 <f_mkfs+0x43b>
c00076fb:	4f                   	dec    edi
c00076fc:	74 44                	je     c0007742 <f_mkfs+0x47d>
c00076fe:	eb 4f                	jmp    c000774f <f_mkfs+0x48a>
c0007700:	83 ec 0c             	sub    esp,0xc
c0007703:	0f b7 c3             	movzx  eax,bx
c0007706:	50                   	push   eax
c0007707:	e8 18 0e 00 00       	call   c0008524 <ff_wtoupper>
c000770c:	83 c4 10             	add    esp,0x10
c000770f:	89 c1                	mov    ecx,eax
c0007711:	8d 53 01             	lea    edx,[ebx+0x1]
c0007714:	66 39 c3             	cmp    bx,ax
c0007717:	75 3e                	jne    c0007757 <f_mkfs+0x492>
c0007719:	be 01 00 00 00       	mov    esi,0x1
c000771e:	89 df                	mov    edi,ebx
c0007720:	66 01 f7             	add    di,si
c0007723:	75 07                	jne    c000772c <f_mkfs+0x467>
c0007725:	83 fe 7f             	cmp    esi,0x7f
c0007728:	77 31                	ja     c000775b <f_mkfs+0x496>
c000772a:	eb 16                	jmp    c0007742 <f_mkfs+0x47d>
c000772c:	83 ec 0c             	sub    esp,0xc
c000772f:	0f b7 ff             	movzx  edi,di
c0007732:	57                   	push   edi
c0007733:	e8 ec 0d 00 00       	call   c0008524 <ff_wtoupper>
c0007738:	83 c4 10             	add    esp,0x10
c000773b:	39 c7                	cmp    edi,eax
c000773d:	75 e6                	jne    c0007725 <f_mkfs+0x460>
c000773f:	46                   	inc    esi
c0007740:	eb dc                	jmp    c000771e <f_mkfs+0x459>
c0007742:	31 c0                	xor    eax,eax
c0007744:	89 d9                	mov    ecx,ebx
c0007746:	4e                   	dec    esi
c0007747:	0f 95 c0             	setne  al
c000774a:	43                   	inc    ebx
c000774b:	89 c7                	mov    edi,eax
c000774d:	eb 14                	jmp    c0007763 <f_mkfs+0x49e>
c000774f:	89 f1                	mov    ecx,esi
c0007751:	01 f3                	add    ebx,esi
c0007753:	31 ff                	xor    edi,edi
c0007755:	eb 0c                	jmp    c0007763 <f_mkfs+0x49e>
c0007757:	89 d3                	mov    ebx,edx
c0007759:	eb 08                	jmp    c0007763 <f_mkfs+0x49e>
c000775b:	bf 02 00 00 00       	mov    edi,0x2
c0007760:	83 c9 ff             	or     ecx,0xffffffff
c0007763:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007767:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000776a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000776e:	0f b6 c1             	movzx  eax,cl
c0007771:	e8 04 a7 ff ff       	call   c0001e7a <xsum32>
c0007776:	66 c1 e9 08          	shr    cx,0x8
c000777a:	89 c2                	mov    edx,eax
c000777c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000777f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007783:	0f b7 c1             	movzx  eax,cx
c0007786:	e8 ef a6 ff ff       	call   c0001e7a <xsum32>
c000778b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007790:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007794:	66 85 db             	test   bx,bx
c0007797:	74 1f                	je     c00077b8 <f_mkfs+0x4f3>
c0007799:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000779c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00077a3:	83 c0 02             	add    eax,0x2
c00077a6:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00077ac:	39 c2                	cmp    edx,eax
c00077ae:	74 08                	je     c00077b8 <f_mkfs+0x4f3>
c00077b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00077b3:	e9 3f ff ff ff       	jmp    c00076f7 <f_mkfs+0x432>
c00077b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077bb:	83 ec 0c             	sub    esp,0xc
c00077be:	05 01 02 00 00       	add    eax,0x201
c00077c3:	c1 e8 09             	shr    eax,0x9
c00077c6:	50                   	push   eax
c00077c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00077cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077cf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077d3:	55                   	push   ebp
c00077d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d8:	e8 6d a1 ff ff       	call   c000194a <disk_write>
c00077dd:	83 c4 20             	add    esp,0x20
c00077e0:	85 c0                	test   eax,eax
c00077e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00077e5:	0f 85 8b 0b 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00077eb:	89 d0                	mov    eax,edx
c00077ed:	31 d2                	xor    edx,edx
c00077ef:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00077f3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077f7:	66 85 db             	test   bx,bx
c00077fa:	74 04                	je     c0007800 <f_mkfs+0x53b>
c00077fc:	31 c0                	xor    eax,eax
c00077fe:	eb b0                	jmp    c00077b0 <f_mkfs+0x4eb>
c0007800:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007804:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007808:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000780c:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007812:	31 d2                	xor    edx,edx
c0007814:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000781f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007823:	c1 eb 09             	shr    ebx,0x9
c0007826:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000782d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007831:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007835:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007839:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000783d:	8d 70 01             	lea    esi,[eax+0x1]
c0007840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007848:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000784f:	31 d2                	xor    edx,edx
c0007851:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007856:	89 04 24             	mov    DWORD PTR [esp],eax
c0007859:	89 c1                	mov    ecx,eax
c000785b:	89 e8                	mov    eax,ebp
c000785d:	e8 b1 a1 ff ff       	call   c0001a13 <mem_set>
c0007862:	31 c0                	xor    eax,eax
c0007864:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007867:	76 10                	jbe    c0007879 <f_mkfs+0x5b4>
c0007869:	83 fe 07             	cmp    esi,0x7
c000786c:	76 0b                	jbe    c0007879 <f_mkfs+0x5b4>
c000786e:	40                   	inc    eax
c000786f:	83 ee 08             	sub    esi,0x8
c0007872:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007877:	eb eb                	jmp    c0007864 <f_mkfs+0x59f>
c0007879:	b2 01                	mov    dl,0x1
c000787b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000787f:	85 f6                	test   esi,esi
c0007881:	74 0c                	je     c000788f <f_mkfs+0x5ca>
c0007883:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007886:	76 07                	jbe    c000788f <f_mkfs+0x5ca>
c0007888:	08 11                	or     BYTE PTR [ecx],dl
c000788a:	4e                   	dec    esi
c000788b:	d1 e2                	shl    edx,1
c000788d:	eb f0                	jmp    c000787f <f_mkfs+0x5ba>
c000788f:	89 df                	mov    edi,ebx
c0007891:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007895:	76 04                	jbe    c000789b <f_mkfs+0x5d6>
c0007897:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000789b:	83 ec 0c             	sub    esp,0xc
c000789e:	57                   	push   edi
c000789f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a7:	55                   	push   ebp
c00078a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ac:	e8 99 a0 ff ff       	call   c000194a <disk_write>
c00078b1:	83 c4 20             	add    esp,0x20
c00078b4:	85 c0                	test   eax,eax
c00078b6:	0f 85 ba 0a 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00078bc:	31 d2                	xor    edx,edx
c00078be:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00078c2:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00078c6:	29 fb                	sub    ebx,edi
c00078c8:	0f 85 7a ff ff ff    	jne    c0007848 <f_mkfs+0x583>
c00078ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00078d2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00078da:	31 f6                	xor    esi,esi
c00078dc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078e0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	89 e8                	mov    eax,ebp
c00078e7:	e8 27 a1 ff ff       	call   c0001a13 <mem_set>
c00078ec:	31 c9                	xor    ecx,ecx
c00078ee:	85 db                	test   ebx,ebx
c00078f0:	75 40                	jne    c0007932 <f_mkfs+0x66d>
c00078f2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00078f7:	89 e8                	mov    eax,ebp
c00078f9:	bb 02 00 00 00       	mov    ebx,0x2
c00078fe:	e8 f2 a0 ff ff       	call   c00019f5 <st_dword>
c0007903:	8d 45 04             	lea    eax,[ebp+0x4]
c0007906:	83 ca ff             	or     edx,0xffffffff
c0007909:	e8 e7 a0 ff ff       	call   c00019f5 <st_dword>
c000790e:	b9 08 00 00 00       	mov    ecx,0x8
c0007913:	eb 1d                	jmp    c0007932 <f_mkfs+0x66d>
c0007915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007918:	76 3b                	jbe    c0007955 <f_mkfs+0x690>
c000791a:	43                   	inc    ebx
c000791b:	83 fe 01             	cmp    esi,0x1
c000791e:	89 da                	mov    edx,ebx
c0007920:	77 03                	ja     c0007925 <f_mkfs+0x660>
c0007922:	83 ca ff             	or     edx,0xffffffff
c0007925:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007929:	4e                   	dec    esi
c000792a:	e8 c6 a0 ff ff       	call   c00019f5 <st_dword>
c000792f:	83 c1 04             	add    ecx,0x4
c0007932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007936:	85 f6                	test   esi,esi
c0007938:	75 db                	jne    c0007915 <f_mkfs+0x650>
c000793a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000793f:	77 14                	ja     c0007955 <f_mkfs+0x690>
c0007941:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007945:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000794c:	85 f6                	test   esi,esi
c000794e:	74 05                	je     c0007955 <f_mkfs+0x690>
c0007950:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007953:	77 dd                	ja     c0007932 <f_mkfs+0x66d>
c0007955:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007959:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000795d:	39 cf                	cmp    edi,ecx
c000795f:	76 02                	jbe    c0007963 <f_mkfs+0x69e>
c0007961:	89 cf                	mov    edi,ecx
c0007963:	83 ec 0c             	sub    esp,0xc
c0007966:	57                   	push   edi
c0007967:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796f:	55                   	push   ebp
c0007970:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007974:	e8 d1 9f ff ff       	call   c000194a <disk_write>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 f2 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007984:	31 d2                	xor    edx,edx
c0007986:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000798a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000798e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007992:	0f 85 48 ff ff ff    	jne    c00078e0 <f_mkfs+0x61b>
c0007998:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000799b:	31 d2                	xor    edx,edx
c000799d:	89 e8                	mov    eax,ebp
c000799f:	31 ff                	xor    edi,edi
c00079a1:	e8 6d a0 ff ff       	call   c0001a13 <mem_set>
c00079a6:	8d 45 34             	lea    eax,[ebp+0x34]
c00079a9:	ba 02 00 00 00       	mov    edx,0x2
c00079ae:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00079b2:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00079b6:	e8 3a a0 ff ff       	call   c00019f5 <st_dword>
c00079bb:	8d 45 38             	lea    eax,[ebp+0x38]
c00079be:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00079c2:	e8 2e a0 ff ff       	call   c00019f5 <st_dword>
c00079c7:	8d 45 44             	lea    eax,[ebp+0x44]
c00079ca:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00079ce:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00079d2:	e8 1e a0 ff ff       	call   c00019f5 <st_dword>
c00079d7:	8d 45 54             	lea    eax,[ebp+0x54]
c00079da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00079de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079e2:	83 c2 02             	add    edx,0x2
c00079e5:	e8 0b a0 ff ff       	call   c00019f5 <st_dword>
c00079ea:	8d 45 58             	lea    eax,[ebp+0x58]
c00079ed:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00079f1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00079f5:	e8 fb 9f ff ff       	call   c00019f5 <st_dword>
c00079fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079fe:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a03:	89 c6                	mov    esi,eax
c0007a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a09:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a10:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a14:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a1b:	39 cb                	cmp    ebx,ecx
c0007a1d:	76 02                	jbe    c0007a21 <f_mkfs+0x75c>
c0007a1f:	89 cb                	mov    ebx,ecx
c0007a21:	83 ec 0c             	sub    esp,0xc
c0007a24:	53                   	push   ebx
c0007a25:	57                   	push   edi
c0007a26:	56                   	push   esi
c0007a27:	55                   	push   ebp
c0007a28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2c:	e8 19 9f ff ff       	call   c000194a <disk_write>
c0007a31:	83 c4 20             	add    esp,0x20
c0007a34:	85 c0                	test   eax,eax
c0007a36:	0f 85 3a 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007a3c:	31 d2                	xor    edx,edx
c0007a3e:	b9 00 02 00 00       	mov    ecx,0x200
c0007a43:	89 e8                	mov    eax,ebp
c0007a45:	e8 c9 9f ff ff       	call   c0001a13 <mem_set>
c0007a4a:	31 d2                	xor    edx,edx
c0007a4c:	01 de                	add    esi,ebx
c0007a4e:	11 d7                	adc    edi,edx
c0007a50:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007a53:	75 bf                	jne    c0007a14 <f_mkfs+0x74f>
c0007a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007a59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007a5d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007a65:	b9 00 02 00 00       	mov    ecx,0x200
c0007a6a:	31 d2                	xor    edx,edx
c0007a6c:	89 e8                	mov    eax,ebp
c0007a6e:	e8 a0 9f ff ff       	call   c0001a13 <mem_set>
c0007a73:	b9 0b 00 00 00       	mov    ecx,0xb
c0007a78:	ba 60 23 02 c0       	mov    edx,0xc0022360
c0007a7d:	89 e8                	mov    eax,ebp
c0007a7f:	e8 7a 9f ff ff       	call   c00019fe <mem_cpy>
c0007a84:	8d 45 40             	lea    eax,[ebp+0x40]
c0007a87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007a8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007a8f:	e8 64 9f ff ff       	call   c00019f8 <st_qword>
c0007a94:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007a98:	8d 45 48             	lea    eax,[ebp+0x48]
c0007a9b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007a9f:	e8 54 9f ff ff       	call   c00019f8 <st_qword>
c0007aa4:	8d 45 50             	lea    eax,[ebp+0x50]
c0007aa7:	ba 20 00 00 00       	mov    edx,0x20
c0007aac:	e8 44 9f ff ff       	call   c00019f5 <st_dword>
c0007ab1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ab5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ab9:	e8 37 9f ff ff       	call   c00019f5 <st_dword>
c0007abe:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007ac2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ac6:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007aca:	e8 26 9f ff ff       	call   c00019f5 <st_dword>
c0007acf:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ad2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ad6:	e8 1a 9f ff ff       	call   c00019f5 <st_dword>
c0007adb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007adf:	8d 50 02             	lea    edx,[eax+0x2]
c0007ae2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007ae5:	e8 0b 9f ff ff       	call   c00019f5 <st_dword>
c0007aea:	8d 45 64             	lea    eax,[ebp+0x64]
c0007aed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007af2:	e8 fe 9e ff ff       	call   c00019f5 <st_dword>
c0007af7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007afa:	ba 00 01 00 00       	mov    edx,0x100
c0007aff:	e8 ed 9e ff ff       	call   c00019f1 <st_word>
c0007b04:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b08:	b8 0a 00 00 00       	mov    eax,0xa
c0007b0d:	48                   	dec    eax
c0007b0e:	74 05                	je     c0007b15 <f_mkfs+0x850>
c0007b10:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b13:	eb f8                	jmp    c0007b0d <f_mkfs+0x848>
c0007b15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b19:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b21:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b25:	74 05                	je     c0007b2c <f_mkfs+0x867>
c0007b27:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b2a:	eb f5                	jmp    c0007b21 <f_mkfs+0x85c>
c0007b2c:	8d 45 78             	lea    eax,[ebp+0x78]
c0007b2f:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007b34:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007b3a:	31 db                	xor    ebx,ebx
c0007b3c:	e8 b0 9e ff ff       	call   c00019f1 <st_word>
c0007b41:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007b47:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b4f:	e8 9d 9e ff ff       	call   c00019f1 <st_word>
c0007b54:	31 c9                	xor    ecx,ecx
c0007b56:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007b59:	83 f8 01             	cmp    eax,0x1
c0007b5c:	76 13                	jbe    c0007b71 <f_mkfs+0x8ac>
c0007b5e:	83 f9 70             	cmp    ecx,0x70
c0007b61:	74 0e                	je     c0007b71 <f_mkfs+0x8ac>
c0007b63:	89 da                	mov    edx,ebx
c0007b65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007b6a:	e8 0b a3 ff ff       	call   c0001e7a <xsum32>
c0007b6f:	89 c3                	mov    ebx,eax
c0007b71:	41                   	inc    ecx
c0007b72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b78:	75 dc                	jne    c0007b56 <f_mkfs+0x891>
c0007b7a:	89 f0                	mov    eax,esi
c0007b7c:	89 fa                	mov    edx,edi
c0007b7e:	83 c0 01             	add    eax,0x1
c0007b81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b85:	83 d2 00             	adc    edx,0x0
c0007b88:	83 ec 0c             	sub    esp,0xc
c0007b8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007b8f:	6a 01                	push   0x1
c0007b91:	57                   	push   edi
c0007b92:	56                   	push   esi
c0007b93:	55                   	push   ebp
c0007b94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b98:	e8 ad 9d ff ff       	call   c000194a <disk_write>
c0007b9d:	83 c4 20             	add    esp,0x20
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	0f 85 ce 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007ba8:	31 d2                	xor    edx,edx
c0007baa:	b9 00 02 00 00       	mov    ecx,0x200
c0007baf:	89 e8                	mov    eax,ebp
c0007bb1:	e8 5d 9e ff ff       	call   c0001a13 <mem_set>
c0007bb6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bbe:	e8 2e 9e ff ff       	call   c00019f1 <st_word>
c0007bc3:	89 f0                	mov    eax,esi
c0007bc5:	89 fa                	mov    edx,edi
c0007bc7:	83 c0 09             	add    eax,0x9
c0007bca:	83 d2 00             	adc    edx,0x0
c0007bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007bd4:	31 c9                	xor    ecx,ecx
c0007bd6:	41                   	inc    ecx
c0007bd7:	89 da                	mov    edx,ebx
c0007bd9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007bde:	e8 97 a2 ff ff       	call   c0001e7a <xsum32>
c0007be3:	89 c3                	mov    ebx,eax
c0007be5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007beb:	75 e9                	jne    c0007bd6 <f_mkfs+0x911>
c0007bed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007bf5:	83 c0 01             	add    eax,0x1
c0007bf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007bfc:	83 d2 00             	adc    edx,0x0
c0007bff:	83 ec 0c             	sub    esp,0xc
c0007c02:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c06:	6a 01                	push   0x1
c0007c08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c10:	55                   	push   ebp
c0007c11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c15:	e8 30 9d ff ff       	call   c000194a <disk_write>
c0007c1a:	83 c4 20             	add    esp,0x20
c0007c1d:	85 c0                	test   eax,eax
c0007c1f:	0f 85 51 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007c25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c29:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c2d:	75 09                	jne    c0007c38 <f_mkfs+0x973>
c0007c2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c32:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007c36:	74 12                	je     c0007c4a <f_mkfs+0x985>
c0007c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c3c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007c48:	eb 8a                	jmp    c0007bd4 <f_mkfs+0x90f>
c0007c4a:	31 d2                	xor    edx,edx
c0007c4c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 bb 9d ff ff       	call   c0001a13 <mem_set>
c0007c58:	83 c6 0b             	add    esi,0xb
c0007c5b:	83 d7 00             	adc    edi,0x0
c0007c5e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007c62:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007c66:	31 c9                	xor    ecx,ecx
c0007c68:	41                   	inc    ecx
c0007c69:	89 da                	mov    edx,ebx
c0007c6b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c70:	e8 05 a2 ff ff       	call   c0001e7a <xsum32>
c0007c75:	89 c3                	mov    ebx,eax
c0007c77:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c7d:	75 e9                	jne    c0007c68 <f_mkfs+0x9a3>
c0007c7f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007c82:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007c86:	83 c6 01             	add    esi,0x1
c0007c89:	83 d7 00             	adc    edi,0x0
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	6a 01                	push   0x1
c0007c91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c99:	55                   	push   ebp
c0007c9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c9e:	e8 a7 9c ff ff       	call   c000194a <disk_write>
c0007ca3:	83 c4 20             	add    esp,0x20
c0007ca6:	85 c0                	test   eax,eax
c0007ca8:	0f 85 c8 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007cae:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007cb2:	75 06                	jne    c0007cba <f_mkfs+0x9f5>
c0007cb4:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007cb8:	74 09                	je     c0007cc3 <f_mkfs+0x9fe>
c0007cba:	89 34 24             	mov    DWORD PTR [esp],esi
c0007cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007cc1:	eb a3                	jmp    c0007c66 <f_mkfs+0x9a1>
c0007cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cc7:	89 da                	mov    edx,ebx
c0007cc9:	01 e8                	add    eax,ebp
c0007ccb:	e8 25 9d ff ff       	call   c00019f5 <st_dword>
c0007cd0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007cd5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007cdd:	75 e4                	jne    c0007cc3 <f_mkfs+0x9fe>
c0007cdf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ce2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ce6:	83 c6 02             	add    esi,0x2
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	83 ec 0c             	sub    esp,0xc
c0007cef:	6a 01                	push   0x1
c0007cf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf9:	55                   	push   ebp
c0007cfa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cfe:	e8 47 9c ff ff       	call   c000194a <disk_write>
c0007d03:	83 c4 20             	add    esp,0x20
c0007d06:	85 c0                	test   eax,eax
c0007d08:	0f 85 68 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007d0e:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d13:	74 0d                	je     c0007d22 <f_mkfs+0xa5d>
c0007d15:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d1d:	e9 43 fd ff ff       	jmp    c0007a65 <f_mkfs+0x7a0>
c0007d22:	b1 07                	mov    cl,0x7
c0007d24:	e9 e3 05 00 00       	jmp    c000830c <f_mkfs+0x1047>
c0007d29:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007d2e:	0f 85 4f 02 00 00    	jne    c0007f83 <f_mkfs+0xcbe>
c0007d34:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d39:	0f 86 22 02 00 00    	jbe    c0007f61 <f_mkfs+0xc9c>
c0007d3f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d44:	0f 85 81 06 00 00    	jne    c00083cb <f_mkfs+0x1106>
c0007d4a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d51:	83 f8 40             	cmp    eax,0x40
c0007d54:	0f 87 51 06 00 00    	ja     c00083ab <f_mkfs+0x10e6>
c0007d5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d5e:	85 ff                	test   edi,edi
c0007d60:	75 1c                	jne    c0007d7e <f_mkfs+0xab9>
c0007d62:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d65:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0007d6a:	c1 e9 0c             	shr    ecx,0xc
c0007d6d:	bf 01 00 00 00       	mov    edi,0x1
c0007d72:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d75:	66 85 c0             	test   ax,ax
c0007d78:	0f 85 95 01 00 00    	jne    c0007f13 <f_mkfs+0xc4e>
c0007d7e:	31 d2                	xor    edx,edx
c0007d80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d83:	f7 f7                	div    edi
c0007d85:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d8a:	0f 86 95 01 00 00    	jbe    c0007f25 <f_mkfs+0xc60>
c0007d90:	83 c0 02             	add    eax,0x2
c0007d93:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007d98:	01 c0                	add    eax,eax
c0007d9a:	05 ff 01 00 00       	add    eax,0x1ff
c0007d9f:	be 01 00 00 00       	mov    esi,0x1
c0007da4:	c1 e8 09             	shr    eax,0x9
c0007da7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007dab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007daf:	c1 e0 05             	shl    eax,0x5
c0007db2:	c1 e8 09             	shr    eax,0x9
c0007db5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007db9:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007dbe:	31 d2                	xor    edx,edx
c0007dc0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007dc4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007dc8:	89 f0                	mov    eax,esi
c0007dca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007dce:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007dd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007dd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007dde:	31 d2                	xor    edx,edx
c0007de0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007de5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007de9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ded:	31 db                	xor    ebx,ebx
c0007def:	01 c8                	add    eax,ecx
c0007df1:	11 da                	adc    edx,ebx
c0007df3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007df7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007dfb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007dff:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e03:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e07:	f7 da                	neg    edx
c0007e09:	21 d1                	and    ecx,edx
c0007e0b:	29 d9                	sub    ecx,ebx
c0007e0d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e12:	0f 85 20 01 00 00    	jne    c0007f38 <f_mkfs+0xc73>
c0007e18:	31 db                	xor    ebx,ebx
c0007e1a:	01 ce                	add    esi,ecx
c0007e1c:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e20:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e24:	31 d2                	xor    edx,edx
c0007e26:	89 f8                	mov    eax,edi
c0007e28:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e2c:	c1 e0 04             	shl    eax,0x4
c0007e2f:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007e33:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007e37:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007e3b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007e3f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007e42:	19 d3                	sbb    ebx,edx
c0007e44:	0f 82 40 01 00 00    	jb     c0007f8a <f_mkfs+0xcc5>
c0007e4a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e51:	89 c8                	mov    eax,ecx
c0007e53:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007e58:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007e5c:	29 f0                	sub    eax,esi
c0007e5e:	29 d0                	sub    eax,edx
c0007e60:	31 d2                	xor    edx,edx
c0007e62:	f7 f7                	div    edi
c0007e64:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e69:	89 c3                	mov    ebx,eax
c0007e6b:	0f 85 b8 fe ff ff    	jne    c0007d29 <f_mkfs+0xa64>
c0007e71:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e76:	0f 87 1d 01 00 00    	ja     c0007f99 <f_mkfs+0xcd4>
c0007e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e81:	0f 85 03 01 00 00    	jne    c0007f8a <f_mkfs+0xcc5>
c0007e87:	83 ff 01             	cmp    edi,0x1
c0007e8a:	0f 86 fa 00 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c0007e90:	d1 ef                	shr    edi,1
c0007e92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007e96:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007e9a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e9d:	85 db                	test   ebx,ebx
c0007e9f:	75 2d                	jne    c0007ece <f_mkfs+0xc09>
c0007ea1:	89 cb                	mov    ebx,ecx
c0007ea3:	ba 70 22 02 c0       	mov    edx,0xc0022270
c0007ea8:	c1 eb 11             	shr    ebx,0x11
c0007eab:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007eb3:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007eb6:	66 85 c0             	test   ax,ax
c0007eb9:	74 11                	je     c0007ecc <f_mkfs+0xc07>
c0007ebb:	83 c2 02             	add    edx,0x2
c0007ebe:	39 d8                	cmp    eax,ebx
c0007ec0:	77 0a                	ja     c0007ecc <f_mkfs+0xc07>
c0007ec2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007ec6:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007eca:	eb e7                	jmp    c0007eb3 <f_mkfs+0xbee>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	31 d2                	xor    edx,edx
c0007ed0:	89 c8                	mov    eax,ecx
c0007ed2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007ed6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007edd:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007ee2:	c1 ea 09             	shr    edx,0x9
c0007ee5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007eea:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007eee:	0f 87 96 00 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007ef4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ef8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f04:	be 20 00 00 00       	mov    esi,0x20
c0007f09:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f0e:	e9 a6 fe ff ff       	jmp    c0007db9 <f_mkfs+0xaf4>
c0007f13:	83 c2 02             	add    edx,0x2
c0007f16:	39 c8                	cmp    eax,ecx
c0007f18:	0f 87 60 fe ff ff    	ja     c0007d7e <f_mkfs+0xab9>
c0007f1e:	01 ff                	add    edi,edi
c0007f20:	e9 4d fe ff ff       	jmp    c0007d72 <f_mkfs+0xaad>
c0007f25:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f28:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f2d:	40                   	inc    eax
c0007f2e:	d1 e8                	shr    eax,1
c0007f30:	83 c0 03             	add    eax,0x3
c0007f33:	e9 62 fe ff ff       	jmp    c0007d9a <f_mkfs+0xad5>
c0007f38:	31 d2                	xor    edx,edx
c0007f3a:	89 c8                	mov    eax,ecx
c0007f3c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f40:	85 d2                	test   edx,edx
c0007f42:	74 0c                	je     c0007f50 <f_mkfs+0xc8b>
c0007f44:	49                   	dec    ecx
c0007f45:	46                   	inc    esi
c0007f46:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007f4b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007f50:	89 c8                	mov    eax,ecx
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f58:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007f5c:	e9 c3 fe ff ff       	jmp    c0007e24 <f_mkfs+0xb5f>
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	77 31                	ja     c0007f99 <f_mkfs+0xcd4>
c0007f68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f6d:	75 1b                	jne    c0007f8a <f_mkfs+0xcc5>
c0007f6f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f76:	3d 80 00 00 00       	cmp    eax,0x80
c0007f7b:	0f 86 d9 fd ff ff    	jbe    c0007d5a <f_mkfs+0xa95>
c0007f81:	eb 07                	jmp    c0007f8a <f_mkfs+0xcc5>
c0007f83:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f88:	76 0a                	jbe    c0007f94 <f_mkfs+0xccf>
c0007f8a:	bb 0e 00 00 00       	mov    ebx,0xe
c0007f8f:	e9 ff 03 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c0007f94:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f99:	31 d2                	xor    edx,edx
c0007f9b:	b9 00 02 00 00       	mov    ecx,0x200
c0007fa0:	89 e8                	mov    eax,ebp
c0007fa2:	e8 6c 9a ff ff       	call   c0001a13 <mem_set>
c0007fa7:	b9 0b 00 00 00       	mov    ecx,0xb
c0007fac:	ba 82 23 02 c0       	mov    edx,0xc0022382
c0007fb1:	89 e8                	mov    eax,ebp
c0007fb3:	e8 46 9a ff ff       	call   c00019fe <mem_cpy>
c0007fb8:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007fbb:	ba 00 02 00 00       	mov    edx,0x200
c0007fc0:	e8 2c 9a ff ff       	call   c00019f1 <st_word>
c0007fc5:	89 f8                	mov    eax,edi
c0007fc7:	0f b7 d6             	movzx  edx,si
c0007fca:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007fcd:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007fd0:	e8 1c 9a ff ff       	call   c00019f1 <st_word>
c0007fd5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007fd9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fde:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007fe1:	75 08                	jne    c0007feb <f_mkfs+0xd26>
c0007fe3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007feb:	8d 45 11             	lea    eax,[ebp+0x11]
c0007fee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ff2:	e8 fa 99 ff ff       	call   c00019f1 <st_word>
c0007ff7:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ffc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008000:	39 d0                	cmp    eax,edx
c0008002:	b8 00 00 00 00       	mov    eax,0x0
c0008007:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000800b:	72 0a                	jb     c0008017 <f_mkfs+0xd52>
c000800d:	8d 45 13             	lea    eax,[ebp+0x13]
c0008010:	e8 dc 99 ff ff       	call   c00019f1 <st_word>
c0008015:	eb 08                	jmp    c000801f <f_mkfs+0xd5a>
c0008017:	8d 45 20             	lea    eax,[ebp+0x20]
c000801a:	e8 d6 99 ff ff       	call   c00019f5 <st_dword>
c000801f:	8d 45 18             	lea    eax,[ebp+0x18]
c0008022:	ba 3f 00 00 00       	mov    edx,0x3f
c0008027:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000802b:	e8 c1 99 ff ff       	call   c00019f1 <st_word>
c0008030:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008033:	ba ff 00 00 00       	mov    edx,0xff
c0008038:	e8 b4 99 ff ff       	call   c00019f1 <st_word>
c000803d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008044:	e8 ac 99 ff ff       	call   c00019f5 <st_dword>
c0008049:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804e:	75 57                	jne    c00080a7 <f_mkfs+0xde2>
c0008050:	8d 45 43             	lea    eax,[ebp+0x43]
c0008053:	ba 00 00 21 50       	mov    edx,0x50210000
c0008058:	e8 98 99 ff ff       	call   c00019f5 <st_dword>
c000805d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008060:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008064:	e8 8c 99 ff ff       	call   c00019f5 <st_dword>
c0008069:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000806c:	ba 02 00 00 00       	mov    edx,0x2
c0008071:	e8 7f 99 ff ff       	call   c00019f5 <st_dword>
c0008076:	8d 45 30             	lea    eax,[ebp+0x30]
c0008079:	ba 01 00 00 00       	mov    edx,0x1
c000807e:	e8 6e 99 ff ff       	call   c00019f1 <st_word>
c0008083:	8d 45 32             	lea    eax,[ebp+0x32]
c0008086:	ba 06 00 00 00       	mov    edx,0x6
c000808b:	e8 61 99 ff ff       	call   c00019f1 <st_word>
c0008090:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008094:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008098:	8d 45 47             	lea    eax,[ebp+0x47]
c000809b:	b9 13 00 00 00       	mov    ecx,0x13
c00080a0:	ba 8e 23 02 c0       	mov    edx,0xc002238e
c00080a5:	eb 2f                	jmp    c00080d6 <f_mkfs+0xe11>
c00080a7:	8d 45 27             	lea    eax,[ebp+0x27]
c00080aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00080af:	e8 41 99 ff ff       	call   c00019f5 <st_dword>
c00080b4:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00080b9:	8d 45 16             	lea    eax,[ebp+0x16]
c00080bc:	e8 30 99 ff ff       	call   c00019f1 <st_word>
c00080c1:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00080c5:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00080c9:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00080cc:	b9 13 00 00 00       	mov    ecx,0x13
c00080d1:	ba a2 23 02 c0       	mov    edx,0xc00223a2
c00080d6:	e8 23 99 ff ff       	call   c00019fe <mem_cpy>
c00080db:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00080e1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00080e6:	89 f0                	mov    eax,esi
c00080e8:	e8 04 99 ff ff       	call   c00019f1 <st_word>
c00080ed:	83 ec 0c             	sub    esp,0xc
c00080f0:	6a 01                	push   0x1
c00080f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080fa:	55                   	push   ebp
c00080fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ff:	e8 46 98 ff ff       	call   c000194a <disk_write>
c0008104:	83 c4 20             	add    esp,0x20
c0008107:	85 c0                	test   eax,eax
c0008109:	0f 85 67 02 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000810f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008114:	0f 85 b7 00 00 00    	jne    c00081d1 <f_mkfs+0xf0c>
c000811a:	83 ec 0c             	sub    esp,0xc
c000811d:	6a 01                	push   0x1
c000811f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008123:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008127:	83 c0 06             	add    eax,0x6
c000812a:	83 d2 00             	adc    edx,0x0
c000812d:	52                   	push   edx
c000812e:	50                   	push   eax
c000812f:	55                   	push   ebp
c0008130:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008134:	e8 11 98 ff ff       	call   c000194a <disk_write>
c0008139:	83 c4 20             	add    esp,0x20
c000813c:	b9 00 02 00 00       	mov    ecx,0x200
c0008141:	31 d2                	xor    edx,edx
c0008143:	89 e8                	mov    eax,ebp
c0008145:	e8 c9 98 ff ff       	call   c0001a13 <mem_set>
c000814a:	ba 52 52 61 41       	mov    edx,0x41615252
c000814f:	89 e8                	mov    eax,ebp
c0008151:	e8 9f 98 ff ff       	call   c00019f5 <st_dword>
c0008156:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000815c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008161:	e8 8f 98 ff ff       	call   c00019f5 <st_dword>
c0008166:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008169:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000816f:	e8 81 98 ff ff       	call   c00019f5 <st_dword>
c0008174:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000817a:	ba 02 00 00 00       	mov    edx,0x2
c000817f:	e8 71 98 ff ff       	call   c00019f5 <st_dword>
c0008184:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008189:	89 f0                	mov    eax,esi
c000818b:	e8 61 98 ff ff       	call   c00019f1 <st_word>
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	6a 01                	push   0x1
c0008195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008199:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000819d:	83 c0 07             	add    eax,0x7
c00081a0:	83 d2 00             	adc    edx,0x0
c00081a3:	52                   	push   edx
c00081a4:	50                   	push   eax
c00081a5:	55                   	push   ebp
c00081a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081aa:	e8 9b 97 ff ff       	call   c000194a <disk_write>
c00081af:	83 c4 14             	add    esp,0x14
c00081b2:	6a 01                	push   0x1
c00081b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	83 d2 00             	adc    edx,0x0
c00081c2:	52                   	push   edx
c00081c3:	50                   	push   eax
c00081c4:	55                   	push   ebp
c00081c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c9:	e8 7c 97 ff ff       	call   c000194a <disk_write>
c00081ce:	83 c4 20             	add    esp,0x20
c00081d1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00081d8:	31 d2                	xor    edx,edx
c00081da:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00081e0:	31 db                	xor    ebx,ebx
c00081e2:	89 e8                	mov    eax,ebp
c00081e4:	e8 2a 98 ff ff       	call   c0001a13 <mem_set>
c00081e9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00081ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00081f5:	0f 94 c3             	sete   bl
c00081f8:	4b                   	dec    ebx
c00081f9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00081ff:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	75 21                	jne    c000822d <f_mkfs+0xf68>
c000820c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008211:	89 e8                	mov    eax,ebp
c0008213:	e8 dd 97 ff ff       	call   c00019f5 <st_dword>
c0008218:	8d 45 04             	lea    eax,[ebp+0x4]
c000821b:	83 ca ff             	or     edx,0xffffffff
c000821e:	e8 d2 97 ff ff       	call   c00019f5 <st_dword>
c0008223:	8d 45 08             	lea    eax,[ebp+0x8]
c0008226:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000822b:	eb 04                	jmp    c0008231 <f_mkfs+0xf6c>
c000822d:	89 da                	mov    edx,ebx
c000822f:	89 e8                	mov    eax,ebp
c0008231:	e8 bf 97 ff ff       	call   c00019f5 <st_dword>
c0008236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000823a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000823e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008242:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008246:	39 ce                	cmp    esi,ecx
c0008248:	76 02                	jbe    c000824c <f_mkfs+0xf87>
c000824a:	89 ce                	mov    esi,ecx
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	56                   	push   esi
c0008250:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008254:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008258:	55                   	push   ebp
c0008259:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825d:	e8 e8 96 ff ff       	call   c000194a <disk_write>
c0008262:	83 c4 20             	add    esp,0x20
c0008265:	85 c0                	test   eax,eax
c0008267:	0f 85 09 01 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000826d:	31 d2                	xor    edx,edx
c000826f:	b9 00 02 00 00       	mov    ecx,0x200
c0008274:	89 e8                	mov    eax,ebp
c0008276:	e8 98 97 ff ff       	call   c0001a13 <mem_set>
c000827b:	31 d2                	xor    edx,edx
c000827d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008281:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008285:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008289:	75 b3                	jne    c000823e <f_mkfs+0xf79>
c000828b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000828e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008295:	40                   	inc    eax
c0008296:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000829a:	0f 87 65 ff ff ff    	ja     c0008205 <f_mkfs+0xf40>
c00082a0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082a5:	74 04                	je     c00082ab <f_mkfs+0xfe6>
c00082a7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00082ab:	89 fb                	mov    ebx,edi
c00082ad:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00082b1:	76 04                	jbe    c00082b7 <f_mkfs+0xff2>
c00082b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082b7:	83 ec 0c             	sub    esp,0xc
c00082ba:	53                   	push   ebx
c00082bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c3:	55                   	push   ebp
c00082c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082c8:	e8 7d 96 ff ff       	call   c000194a <disk_write>
c00082cd:	83 c4 20             	add    esp,0x20
c00082d0:	85 c0                	test   eax,eax
c00082d2:	0f 85 9e 00 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00082d8:	31 d2                	xor    edx,edx
c00082da:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00082de:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082e2:	29 df                	sub    edi,ebx
c00082e4:	75 c5                	jne    c00082ab <f_mkfs+0xfe6>
c00082e6:	b1 0c                	mov    cl,0xc
c00082e8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082ed:	74 1d                	je     c000830c <f_mkfs+0x1047>
c00082ef:	b8 ff ff 00 00       	mov    eax,0xffff
c00082f4:	b1 06                	mov    cl,0x6
c00082f6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00082fa:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00082fe:	72 0c                	jb     c000830c <f_mkfs+0x1047>
c0008300:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008305:	0f 94 c1             	sete   cl
c0008308:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000830c:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008311:	75 4c                	jne    c000835f <f_mkfs+0x109a>
c0008313:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008317:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000831b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008322:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008329:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008334:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000833f:	0f b6 c9             	movzx  ecx,cl
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	55                   	push   ebp
c0008346:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000834d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008351:	e8 f9 bf ff ff       	call   c000434f <create_partition>
c0008356:	83 c4 10             	add    esp,0x10
c0008359:	89 c3                	mov    ebx,eax
c000835b:	85 c0                	test   eax,eax
c000835d:	75 34                	jne    c0008393 <f_mkfs+0x10ce>
c000835f:	31 db                	xor    ebx,ebx
c0008361:	50                   	push   eax
c0008362:	6a 00                	push   0x0
c0008364:	6a 00                	push   0x0
c0008366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000836a:	e8 f1 95 ff ff       	call   c0001960 <disk_ioctl>
c000836f:	83 c4 10             	add    esp,0x10
c0008372:	85 c0                	test   eax,eax
c0008374:	74 1d                	je     c0008393 <f_mkfs+0x10ce>
c0008376:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000837e:	75 0c                	jne    c000838c <f_mkfs+0x10c7>
c0008380:	83 ec 0c             	sub    esp,0xc
c0008383:	55                   	push   ebp
c0008384:	e8 77 00 00 00       	call   c0008400 <ff_memfree>
c0008389:	83 c4 10             	add    esp,0x10
c000838c:	bb 01 00 00 00       	mov    ebx,0x1
c0008391:	eb 48                	jmp    c00083db <f_mkfs+0x1116>
c0008393:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000839b:	75 3e                	jne    c00083db <f_mkfs+0x1116>
c000839d:	83 ec 0c             	sub    esp,0xc
c00083a0:	55                   	push   ebp
c00083a1:	e8 5a 00 00 00       	call   c0008400 <ff_memfree>
c00083a6:	83 c4 10             	add    esp,0x10
c00083a9:	eb 30                	jmp    c00083db <f_mkfs+0x1116>
c00083ab:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083b0:	0f 85 eb fa ff ff    	jne    c0007ea1 <f_mkfs+0xbdc>
c00083b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083ba:	81 ff 80 00 00 00    	cmp    edi,0x80
c00083c0:	0f 86 b8 f9 ff ff    	jbe    c0007d7e <f_mkfs+0xab9>
c00083c6:	e9 bf fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083cb:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083d0:	0f 85 c0 fa ff ff    	jne    c0007e96 <f_mkfs+0xbd1>
c00083d6:	e9 af fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083db:	81 c4 9c 00 00 00    	add    esp,0x9c
c00083e1:	89 d8                	mov    eax,ebx
c00083e3:	5b                   	pop    ebx
c00083e4:	5e                   	pop    esi
c00083e5:	5f                   	pop    edi
c00083e6:	5d                   	pop    ebp
c00083e7:	c3                   	ret    

c00083e8 <ff_memalloc>:
c00083e8:	83 ec 0c             	sub    esp,0xc
c00083eb:	83 ec 0c             	sub    esp,0xc
c00083ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083f2:	e8 a0 13 00 00       	call   c0009797 <malloc>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 c4 0c             	add    esp,0xc
c00083fd:	c3                   	ret    
c00083fe:	66 90                	xchg   ax,ax

c0008400 <ff_memfree>:
c0008400:	83 ec 0c             	sub    esp,0xc
c0008403:	83 ec 0c             	sub    esp,0xc
c0008406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000840a:	e8 98 13 00 00       	call   c00097a7 <free>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	90                   	nop
c0008413:	83 c4 0c             	add    esp,0xc
c0008416:	c3                   	ret    
c0008417:	90                   	nop

c0008418 <ff_uni2oem>:
c0008418:	83 ec 14             	sub    esp,0x14
c000841b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000841f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008423:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000842a:	c7 44 24 0c c0 26 02 c0 	mov    DWORD PTR [esp+0xc],0xc00226c0
c0008432:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008437:	77 0b                	ja     c0008444 <ff_uni2oem+0x2c>
c0008439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000843d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008442:	eb 60                	jmp    c00084a4 <ff_uni2oem+0x8c>
c0008444:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000844c:	77 56                	ja     c00084a4 <ff_uni2oem+0x8c>
c000844e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008454:	75 4e                	jne    c00084a4 <ff_uni2oem+0x8c>
c0008456:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000845d:	eb 0d                	jmp    c000846c <ff_uni2oem+0x54>
c000845f:	90                   	nop
c0008460:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008465:	40                   	inc    eax
c0008466:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000846b:	90                   	nop
c000846c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008472:	77 1c                	ja     c0008490 <ff_uni2oem+0x78>
c0008474:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008479:	01 c0                	add    eax,eax
c000847b:	89 c2                	mov    edx,eax
c000847d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008481:	01 d0                	add    eax,edx
c0008483:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008486:	0f b7 c0             	movzx  eax,ax
c0008489:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000848d:	75 d1                	jne    c0008460 <ff_uni2oem+0x48>
c000848f:	90                   	nop
c0008490:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008495:	83 e8 80             	sub    eax,0xffffff80
c0008498:	25 ff 00 00 00       	and    eax,0xff
c000849d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084a2:	66 90                	xchg   ax,ax
c00084a4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084a9:	83 c4 14             	add    esp,0x14
c00084ac:	c3                   	ret    
c00084ad:	8d 76 00             	lea    esi,[esi+0x0]

c00084b0 <ff_oem2uni>:
c00084b0:	83 ec 18             	sub    esp,0x18
c00084b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00084b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00084c0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084c4:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00084cb:	c7 44 24 10 c0 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc00226c0
c00084d3:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00084d9:	77 0d                	ja     c00084e8 <ff_oem2uni+0x38>
c00084db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084df:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00084e4:	eb 32                	jmp    c0008518 <ff_oem2uni+0x68>
c00084e6:	66 90                	xchg   ax,ax
c00084e8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084ee:	75 28                	jne    c0008518 <ff_oem2uni+0x68>
c00084f0:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00084f7:	77 1f                	ja     c0008518 <ff_oem2uni+0x68>
c00084f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00084fe:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008503:	01 c0                	add    eax,eax
c0008505:	89 c2                	mov    edx,eax
c0008507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850b:	01 d0                	add    eax,edx
c000850d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008510:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000851d:	83 c4 18             	add    esp,0x18
c0008520:	c3                   	ret    
c0008521:	8d 76 00             	lea    esi,[esi+0x0]

c0008524 <ff_wtoupper>:
c0008524:	83 ec 10             	sub    esp,0x10
c0008527:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000852f:	0f 87 4f 01 00 00    	ja     c0008684 <ff_wtoupper+0x160>
c0008535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008539:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000853e:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008545:	77 09                	ja     c0008550 <ff_wtoupper+0x2c>
c0008547:	b8 c0 24 02 c0       	mov    eax,0xc00224c0
c000854c:	eb 0a                	jmp    c0008558 <ff_wtoupper+0x34>
c000854e:	66 90                	xchg   ax,ax
c0008550:	b8 00 24 02 c0       	mov    eax,0xc0022400
c0008555:	8d 76 00             	lea    esi,[esi+0x0]
c0008558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000855c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008560:	8d 50 02             	lea    edx,[eax+0x2]
c0008563:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008567:	66 8b 00             	mov    ax,WORD PTR [eax]
c000856a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000856f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008575:	0f 84 fd 00 00 00    	je     c0008678 <ff_wtoupper+0x154>
c000857b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008580:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008585:	0f 82 ed 00 00 00    	jb     c0008678 <ff_wtoupper+0x154>
c000858b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000858f:	8d 50 02             	lea    edx,[eax+0x2]
c0008592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008599:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000859e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085a3:	66 c1 e8 08          	shr    ax,0x8
c00085a7:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00085ac:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00085b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00085b8:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00085bd:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00085c2:	01 ca                	add    edx,ecx
c00085c4:	39 d0                	cmp    eax,edx
c00085c6:	0f 8d 8c 00 00 00    	jge    c0008658 <ff_wtoupper+0x134>
c00085cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085d1:	83 f8 08             	cmp    eax,0x8
c00085d4:	0f 87 9a 00 00 00    	ja     c0008674 <ff_wtoupper+0x150>
c00085da:	8b 04 85 c0 23 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddc40]
c00085e1:	ff e0                	jmp    eax
c00085e3:	90                   	nop
c00085e4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00085e9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00085ee:	29 c2                	sub    edx,eax
c00085f0:	89 d0                	mov    eax,edx
c00085f2:	01 c0                	add    eax,eax
c00085f4:	89 c2                	mov    edx,eax
c00085f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fa:	01 d0                	add    eax,edx
c00085fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008604:	eb 4e                	jmp    c0008654 <ff_wtoupper+0x130>
c0008606:	66 90                	xchg   ax,ax
c0008608:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000860d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008611:	83 e0 01             	and    eax,0x1
c0008614:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008619:	eb 39                	jmp    c0008654 <ff_wtoupper+0x130>
c000861b:	90                   	nop
c000861c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008622:	eb 30                	jmp    c0008654 <ff_wtoupper+0x130>
c0008624:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000862a:	eb 28                	jmp    c0008654 <ff_wtoupper+0x130>
c000862c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008632:	eb 20                	jmp    c0008654 <ff_wtoupper+0x130>
c0008634:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000863a:	eb 18                	jmp    c0008654 <ff_wtoupper+0x130>
c000863c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008642:	eb 10                	jmp    c0008654 <ff_wtoupper+0x130>
c0008644:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000864a:	eb 08                	jmp    c0008654 <ff_wtoupper+0x130>
c000864c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008653:	90                   	nop
c0008654:	eb 1e                	jmp    c0008674 <ff_wtoupper+0x150>
c0008656:	66 90                	xchg   ax,ax
c0008658:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000865e:	0f 85 f8 fe ff ff    	jne    c000855c <ff_wtoupper+0x38>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	01 c0                	add    eax,eax
c000866b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000866f:	e9 e8 fe ff ff       	jmp    c000855c <ff_wtoupper+0x38>
c0008674:	90                   	nop
c0008675:	8d 76 00             	lea    esi,[esi+0x0]
c0008678:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000867d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008688:	83 c4 10             	add    esp,0x10
c000868b:	c3                   	ret    

c000868c <CPU::current()>:
c000868c:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0008691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008697:	c3                   	ret    

c0008698 <operator new(unsigned long)>:
c0008698:	e9 fa 10 00 00       	jmp    c0009797 <malloc>

c000869d <operator delete(void*)>:
c000869d:	e9 15 11 00 00       	jmp    c00097b7 <rfree>

c00086a2 <disableIRQs()>:
c00086a2:	fa                   	cli    
c00086a3:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00086a9:	c3                   	ret    

c00086aa <enableIRQs()>:
c00086aa:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00086af:	48                   	dec    eax
c00086b0:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00086b5:	75 01                	jne    c00086b8 <enableIRQs()+0xe>
c00086b7:	fb                   	sti    
c00086b8:	c3                   	ret    

c00086b9 <lockScheduler()>:
c00086b9:	fa                   	cli    
c00086ba:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00086c0:	c3                   	ret    

c00086c1 <unlockScheduler()>:
c00086c1:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00086c6:	48                   	dec    eax
c00086c7:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00086cc:	75 01                	jne    c00086cf <unlockScheduler()+0xe>
c00086ce:	fb                   	sti    
c00086cf:	c3                   	ret    

c00086d0 <lockStuff()>:
c00086d0:	fa                   	cli    
c00086d1:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00086d7:	ff 05 a4 97 02 c0    	inc    DWORD PTR ds:0xc00297a4
c00086dd:	c3                   	ret    

c00086de <unlockStuff()>:
c00086de:	83 ec 0c             	sub    esp,0xc
c00086e1:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c00086e6:	48                   	dec    eax
c00086e7:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c00086ec:	75 18                	jne    c0008706 <unlockStuff()+0x28>
c00086ee:	83 3d a0 97 02 c0 00 	cmp    DWORD PTR ds:0xc00297a0,0x0
c00086f5:	74 0f                	je     c0008706 <unlockStuff()+0x28>
c00086f7:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c0008701:	e8 7e d8 00 00       	call   c0015f84 <schedule()>
c0008706:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000870b:	48                   	dec    eax
c000870c:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0008711:	75 01                	jne    c0008714 <unlockStuff()+0x36>
c0008713:	fb                   	sti    
c0008714:	83 c4 0c             	add    esp,0xc
c0008717:	c3                   	ret    

c0008718 <Virt::getAKernelVAS()>:
c0008718:	a1 b4 63 02 c0       	mov    eax,ds:0xc00263b4
c000871d:	c3                   	ret    

c000871e <__not_memcpy>:
c000871e:	57                   	push   edi
c000871f:	56                   	push   esi
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000872c:	89 c7                	mov    edi,eax
c000872e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008730:	5e                   	pop    esi
c0008731:	5f                   	pop    edi
c0008732:	c3                   	ret    
c0008733:	90                   	nop

c0008734 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008734:	83 ec 0c             	sub    esp,0xc
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	68 c0 27 02 c0       	push   0xc00227c0
c000873f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008743:	e8 a8 7e ff ff       	call   c00005f0 <strcmp>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	0f 94 c0             	sete   al
c0008750:	84 c0                	test   al,al
c0008752:	74 0c                	je     c0008760 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008754:	b8 c8 62 02 c0       	mov    eax,0xc00262c8
c0008759:	e9 ea 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000875e:	66 90                	xchg   ax,ax
c0008760:	83 ec 08             	sub    esp,0x8
c0008763:	68 c9 27 02 c0       	push   0xc00227c9
c0008768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000876c:	e8 7f 7e ff ff       	call   c00005f0 <strcmp>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	85 c0                	test   eax,eax
c0008776:	0f 94 c0             	sete   al
c0008779:	84 c0                	test   al,al
c000877b:	74 0b                	je     c0008788 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c000877d:	b8 40 14 02 c0       	mov    eax,0xc0021440
c0008782:	e9 c1 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008787:	90                   	nop
c0008788:	83 ec 08             	sub    esp,0x8
c000878b:	68 d3 27 02 c0       	push   0xc00227d3
c0008790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008794:	e8 57 7e ff ff       	call   c00005f0 <strcmp>
c0008799:	83 c4 10             	add    esp,0x10
c000879c:	85 c0                	test   eax,eax
c000879e:	0f 94 c0             	sete   al
c00087a1:	84 c0                	test   al,al
c00087a3:	74 0b                	je     c00087b0 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c00087a5:	b8 74 11 02 c0       	mov    eax,0xc0021174
c00087aa:	e9 99 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087af:	90                   	nop
c00087b0:	83 ec 08             	sub    esp,0x8
c00087b3:	68 dc 27 02 c0       	push   0xc00227dc
c00087b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087bc:	e8 2f 7e ff ff       	call   c00005f0 <strcmp>
c00087c1:	83 c4 10             	add    esp,0x10
c00087c4:	85 c0                	test   eax,eax
c00087c6:	0f 94 c0             	sete   al
c00087c9:	84 c0                	test   al,al
c00087cb:	74 07                	je     c00087d4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00087cd:	b8 40 15 02 c0       	mov    eax,0xc0021540
c00087d2:	eb 74                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087d4:	83 ec 08             	sub    esp,0x8
c00087d7:	68 e6 27 02 c0       	push   0xc00227e6
c00087dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087e0:	e8 0b 7e ff ff       	call   c00005f0 <strcmp>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	85 c0                	test   eax,eax
c00087ea:	0f 94 c0             	sete   al
c00087ed:	84 c0                	test   al,al
c00087ef:	74 07                	je     c00087f8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00087f1:	b8 c0 12 02 c0       	mov    eax,0xc00212c0
c00087f6:	eb 50                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087f8:	83 ec 08             	sub    esp,0x8
c00087fb:	68 ef 27 02 c0       	push   0xc00227ef
c0008800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008804:	e8 e7 7d ff ff       	call   c00005f0 <strcmp>
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	85 c0                	test   eax,eax
c000880e:	0f 94 c0             	sete   al
c0008811:	84 c0                	test   al,al
c0008813:	74 07                	je     c000881c <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008815:	b8 cc 62 02 c0       	mov    eax,0xc00262cc
c000881a:	eb 2c                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000881c:	83 ec 08             	sub    esp,0x8
c000881f:	68 fc 27 02 c0       	push   0xc00227fc
c0008824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008828:	e8 c3 7d ff ff       	call   c00005f0 <strcmp>
c000882d:	83 c4 10             	add    esp,0x10
c0008830:	85 c0                	test   eax,eax
c0008832:	0f 94 c0             	sete   al
c0008835:	84 c0                	test   al,al
c0008837:	74 07                	je     c0008840 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008839:	b8 cd 62 02 c0       	mov    eax,0xc00262cd
c000883e:	eb 08                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008840:	b8 00 00 00 00       	mov    eax,0x0
c0008845:	8d 76 00             	lea    esi,[esi+0x0]
c0008848:	83 c4 0c             	add    esp,0xc
c000884b:	c3                   	ret    

c000884c <Computer::close(int, int, void*)>:
c000884c:	57                   	push   edi
c000884d:	56                   	push   esi
c000884e:	53                   	push   ebx
c000884f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008857:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008864:	e8 83 54 00 00       	call   c000dcec <Device::closeAll()>
c0008869:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000886f:	83 c4 10             	add    esp,0x10
c0008872:	8b 10                	mov    edx,DWORD PTR [eax]
c0008874:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008878:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008880:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008884:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008888:	5b                   	pop    ebx
c0008889:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000888c:	5e                   	pop    esi
c000888d:	5f                   	pop    edi
c000888e:	ff e0                	jmp    eax

c0008890 <Krnl::firstTask()>:
c0008890:	53                   	push   ebx
c0008891:	83 ec 14             	sub    esp,0x14
c0008894:	68 09 28 02 c0       	push   0xc0022809
c0008899:	e8 53 0f 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000889e:	fb                   	sti    
c000889f:	c7 04 24 20 28 02 c0 	mov    DWORD PTR [esp],0xc0022820
c00088a6:	e8 46 0f 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00088ab:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00088b2:	e8 e0 0e 00 00       	call   c0009797 <malloc>
c00088b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00088be:	89 c3                	mov    ebx,eax
c00088c0:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c00088c6:	68 39 28 02 c0       	push   0xc0022839
c00088cb:	6a 01                	push   0x1
c00088cd:	50                   	push   eax
c00088ce:	e8 8d d2 00 00       	call   c0015b60 <Process::Process(bool, char const*, Process*, char**)>
c00088d3:	83 c4 20             	add    esp,0x20
c00088d6:	68 ff 00 00 00       	push   0xff
c00088db:	6a 00                	push   0x0
c00088dd:	68 e1 91 00 c0       	push   0xc00091e1
c00088e2:	53                   	push   ebx
c00088e3:	e8 80 d4 00 00       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c00088e8:	6a 7a                	push   0x7a
c00088ea:	6a 00                	push   0x0
c00088ec:	68 ac 67 01 c0       	push   0xc00167ac
c00088f1:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c00088f7:	e8 6c d4 00 00       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c00088fc:	83 c4 14             	add    esp,0x14
c00088ff:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c0008904:	68 38 29 02 c0       	push   0xc0022938
c0008909:	c6 05 cd 62 02 c0 01 	mov    BYTE PTR ds:0xc00262cd,0x1
c0008910:	e8 dc 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008915:	e8 6d e2 00 00       	call   c0016b87 <Vm::initialise8086()>
c000891a:	e8 5d 41 00 00       	call   c000ca7c <Fs::initVFS()>
c000891f:	c7 04 24 46 28 02 c0 	mov    DWORD PTR [esp],0xc0022846
c0008926:	e8 c6 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000892b:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0008930:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008936:	8b 10                	mov    edx,DWORD PTR [eax]
c0008938:	6a 00                	push   0x0
c000893a:	6a 00                	push   0x0
c000893c:	6a 00                	push   0x0
c000893e:	50                   	push   eax
c000893f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008942:	83 c4 14             	add    esp,0x14
c0008945:	68 38 29 02 c0       	push   0xc0022938
c000894a:	e8 a2 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000894f:	e8 89 ba 00 00       	call   c00143dd <Sys::loadSyscalls()>
c0008954:	e8 ed 9f 00 00       	call   c0012946 <Krnl::loadSystemEnv()>
c0008959:	e8 3f a4 00 00       	call   c0012d9d <Krnl::setupPowerManager()>
c000895e:	83 c4 0c             	add    esp,0xc
c0008961:	6a 3a                	push   0x3a
c0008963:	68 60 28 02 c0       	push   0xc0022860
c0008968:	68 69 28 02 c0       	push   0xc0022869
c000896d:	e8 55 a9 00 00       	call   c00132c7 <Reg::readIntWithDefault(char*, char*, int)>
c0008972:	89 04 24             	mov    DWORD PTR [esp],eax
c0008975:	e8 5e 4c 00 00       	call   c000d5d8 <User::loadClockSettings(int)>
c000897a:	c7 04 24 5c 29 02 c0 	mov    DWORD PTR [esp],0xc002295c
c0008981:	e8 6b 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008986:	58                   	pop    eax
c0008987:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000898c:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008992:	e8 15 53 00 00       	call   c000dcac <Device::loadDriversForAll()>
c0008997:	c7 04 24 71 28 02 c0 	mov    DWORD PTR [esp],0xc0022871
c000899e:	e8 4e 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00089a3:	e8 06 9b 00 00       	call   c00124ae <Krnl::startCPUs()>
c00089a8:	c7 04 24 8b 28 02 c0 	mov    DWORD PTR [esp],0xc002288b
c00089af:	e8 3d 0e 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00089b4:	5a                   	pop    edx
c00089b5:	8b 1d c8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c8
c00089bb:	59                   	pop    ecx
c00089bc:	6a 01                	push   0x1
c00089be:	68 9c 28 02 c0       	push   0xc002289c
c00089c3:	e8 db cb 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c00089c8:	5a                   	pop    edx
c00089c9:	59                   	pop    ecx
c00089ca:	53                   	push   ebx
c00089cb:	50                   	push   eax
c00089cc:	e8 03 ce 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	83 ec 0c             	sub    esp,0xc
c00089d7:	6a 02                	push   0x2
c00089d9:	e8 9e d7 00 00       	call   c001617c <blockTask(TaskState)>
c00089de:	83 c4 10             	add    esp,0x10
c00089e1:	eb f1                	jmp    c00089d4 <Krnl::firstTask()+0x144>
c00089e3:	90                   	nop

c00089e4 <Computer::Computer()>:
c00089e4:	83 ec 0c             	sub    esp,0xc
c00089e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089eb:	83 ec 08             	sub    esp,0x8
c00089ee:	68 b8 28 02 c0       	push   0xc00228b8
c00089f3:	50                   	push   eax
c00089f4:	e8 6d 53 00 00       	call   c000dd66 <Device::Device(char const*)>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c0008a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a05:	89 10                	mov    DWORD PTR [eax],edx
c0008a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a19:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008a2d:	83 ca 04             	or     edx,0x4
c0008a30:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a40:	0f b6 d0             	movzx  edx,al
c0008a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a47:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a58:	0f b6 d0             	movzx  edx,al
c0008a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a68:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a6e:	8d 50 01             	lea    edx,[eax+0x1]
c0008a71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008a75:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008a7b:	0f b6 d0             	movzx  edx,al
c0008a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a82:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008a86:	83 e1 3f             	and    ecx,0x3f
c0008a89:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a97:	0f b6 d0             	movzx  edx,al
c0008a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a9e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aa9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aaf:	0f b6 d0             	movzx  edx,al
c0008ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ac5:	8d 50 01             	lea    edx,[eax+0x1]
c0008ac8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008acc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ad2:	0f b6 d0             	movzx  edx,al
c0008ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008add:	83 e1 3f             	and    ecx,0x3f
c0008ae0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aee:	0f b6 d0             	movzx  edx,al
c0008af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008af5:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b06:	0f b6 d0             	movzx  edx,al
c0008b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008b1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008b23:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008b29:	0f b6 d0             	movzx  edx,al
c0008b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b30:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008b34:	83 e1 3f             	and    ecx,0x3f
c0008b37:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008b3b:	90                   	nop
c0008b3c:	83 c4 0c             	add    esp,0xc
c0008b3f:	c3                   	ret    

c0008b40 <Computer::setBootMessage(char const*)>:
c0008b40:	c3                   	ret    
c0008b41:	90                   	nop

c0008b42 <Computer::detectFeatures()>:
c0008b42:	55                   	push   ebp
c0008b43:	57                   	push   edi
c0008b44:	56                   	push   esi
c0008b45:	53                   	push   ebx
c0008b46:	83 ec 1c             	sub    esp,0x1c
c0008b49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b4d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008b57:	e8 bd 76 ff ff       	call   c0000219 <detectCPUID>
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b64:	0f 95 c2             	setne  dl
c0008b67:	83 e0 fd             	and    eax,0xfffffffd
c0008b6a:	d1 e2                	shl    edx,1
c0008b6c:	09 d0                	or     eax,edx
c0008b6e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008b74:	a8 02                	test   al,0x2
c0008b76:	75 46                	jne    c0008bbe <Computer::detectFeatures()+0x7c>
c0008b78:	f6 05 e1 62 02 c0 04 	test   BYTE PTR ds:0xc00262e1,0x4
c0008b7f:	74 07                	je     c0008b88 <Computer::detectFeatures()+0x46>
c0008b81:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008b88:	e8 79 85 01 00       	call   c0021106 <x87Detect>
c0008b8d:	83 e0 01             	and    eax,0x1
c0008b90:	c1 e0 04             	shl    eax,0x4
c0008b93:	88 c2                	mov    dl,al
c0008b95:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b9b:	83 e0 ef             	and    eax,0xffffffef
c0008b9e:	09 d0                	or     eax,edx
c0008ba0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ba6:	a8 10                	test   al,0x10
c0008ba8:	0f 85 2a 01 00 00    	jne    c0008cd8 <Computer::detectFeatures()+0x196>
c0008bae:	84 c0                	test   al,al
c0008bb0:	0f 88 45 01 00 00    	js     c0008cfb <Computer::detectFeatures()+0x1b9>
c0008bb6:	83 c4 1c             	add    esp,0x1c
c0008bb9:	5b                   	pop    ebx
c0008bba:	5e                   	pop    esi
c0008bbb:	5f                   	pop    edi
c0008bbc:	5d                   	pop    ebp
c0008bbd:	c3                   	ret    
c0008bbe:	83 ec 0c             	sub    esp,0xc
c0008bc1:	6a 20                	push   0x20
c0008bc3:	e8 00 8b 00 00       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c0008bc8:	83 e0 01             	and    eax,0x1
c0008bcb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008bd2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008bd8:	83 e0 f7             	and    eax,0xfffffff7
c0008bdb:	09 d0                	or     eax,edx
c0008bdd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008be3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008bea:	e8 d9 8a 00 00       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c0008bef:	83 e0 01             	and    eax,0x1
c0008bf2:	88 c2                	mov    dl,al
c0008bf4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008bfa:	83 e0 fe             	and    eax,0xfffffffe
c0008bfd:	09 d0                	or     eax,edx
c0008bff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c05:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008c0c:	e8 b7 8a 00 00       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c0008c11:	c1 e0 07             	shl    eax,0x7
c0008c14:	88 c2                	mov    dl,al
c0008c16:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008c1c:	83 e0 7f             	and    eax,0x7f
c0008c1f:	09 d0                	or     eax,edx
c0008c21:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c27:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008c2e:	e8 95 8a 00 00       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c0008c33:	83 c4 10             	add    esp,0x10
c0008c36:	83 e0 01             	and    eax,0x1
c0008c39:	c1 e0 05             	shl    eax,0x5
c0008c3c:	88 c2                	mov    dl,al
c0008c3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c44:	83 e0 df             	and    eax,0xffffffdf
c0008c47:	09 d0                	or     eax,edx
c0008c49:	f7 05 e0 62 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00262e0,0x401
c0008c53:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c59:	0f 84 c2 00 00 00    	je     c0008d21 <Computer::detectFeatures()+0x1df>
c0008c5f:	83 e0 fe             	and    eax,0xfffffffe
c0008c62:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c68:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c6e:	88 c2                	mov    dl,al
c0008c70:	83 e2 09             	and    edx,0x9
c0008c73:	fe ca                	dec    dl
c0008c75:	75 09                	jne    c0008c80 <Computer::detectFeatures()+0x13e>
c0008c77:	83 e0 fe             	and    eax,0xfffffffe
c0008c7a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c80:	83 ec 0c             	sub    esp,0xc
c0008c83:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008c87:	50                   	push   eax
c0008c88:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008c8c:	55                   	push   ebp
c0008c8d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008c91:	57                   	push   edi
c0008c92:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008c96:	56                   	push   esi
c0008c97:	68 00 00 00 80       	push   0x80000000
c0008c9c:	e8 a3 89 00 00       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ca1:	83 c4 20             	add    esp,0x20
c0008ca4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008cab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008caf:	0f 86 c3 fe ff ff    	jbe    c0008b78 <Computer::detectFeatures()+0x36>
c0008cb5:	83 ec 0c             	sub    esp,0xc
c0008cb8:	50                   	push   eax
c0008cb9:	55                   	push   ebp
c0008cba:	57                   	push   edi
c0008cbb:	56                   	push   esi
c0008cbc:	68 01 00 00 80       	push   0x80000001
c0008cc1:	e8 7e 89 00 00       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008cc6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008cd0:	83 c4 20             	add    esp,0x20
c0008cd3:	e9 a0 fe ff ff       	jmp    c0008b78 <Computer::detectFeatures()+0x36>
c0008cd8:	e8 e3 83 01 00       	call   c00210c0 <absolutelyNoChanceInHell>
c0008cdd:	88 c2                	mov    dl,al
c0008cdf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ce5:	c1 e2 07             	shl    edx,0x7
c0008ce8:	83 e0 7f             	and    eax,0x7f
c0008ceb:	09 d0                	or     eax,edx
c0008ced:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008cf3:	84 c0                	test   al,al
c0008cf5:	0f 89 bb fe ff ff    	jns    c0008bb6 <Computer::detectFeatures()+0x74>
c0008cfb:	e8 40 81 01 00       	call   c0020e40 <avxDetect>
c0008d00:	83 e0 01             	and    eax,0x1
c0008d03:	c1 e0 05             	shl    eax,0x5
c0008d06:	88 c2                	mov    dl,al
c0008d08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008d0e:	83 e0 df             	and    eax,0xffffffdf
c0008d11:	09 d0                	or     eax,edx
c0008d13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	5b                   	pop    ebx
c0008d1d:	5e                   	pop    esi
c0008d1e:	5f                   	pop    edi
c0008d1f:	5d                   	pop    ebp
c0008d20:	c3                   	ret    
c0008d21:	83 ec 0c             	sub    esp,0xc
c0008d24:	68 00 02 00 00       	push   0x200
c0008d29:	e8 9a 89 00 00       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	83 e0 01             	and    eax,0x1
c0008d34:	88 c2                	mov    dl,al
c0008d36:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3c:	83 e0 fe             	and    eax,0xfffffffe
c0008d3f:	09 d0                	or     eax,edx
c0008d41:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d47:	e9 1c ff ff ff       	jmp    c0008c68 <Computer::detectFeatures()+0x126>

c0008d4c <Computer::displayFeatures()>:
c0008d4c:	c3                   	ret    
c0008d4d:	90                   	nop

c0008d4e <Computer::rdmsr(unsigned int)>:
c0008d4e:	83 ec 0c             	sub    esp,0xc
c0008d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d5c:	74 0a                	je     c0008d68 <Computer::rdmsr(unsigned int)+0x1a>
c0008d5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d62:	0f 32                	rdmsr  
c0008d64:	83 c4 0c             	add    esp,0xc
c0008d67:	c3                   	ret    
c0008d68:	83 ec 0c             	sub    esp,0xc
c0008d6b:	68 c1 28 02 c0       	push   0xc00228c1
c0008d70:	e8 da 9c 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	eb e4                	jmp    c0008d5e <Computer::rdmsr(unsigned int)+0x10>

c0008d7a <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008d7a:	57                   	push   edi
c0008d7b:	56                   	push   esi
c0008d7c:	52                   	push   edx
c0008d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008d85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008d89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d90:	74 0e                	je     c0008da0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008d92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d96:	89 f0                	mov    eax,esi
c0008d98:	89 fa                	mov    edx,edi
c0008d9a:	0f 30                	wrmsr  
c0008d9c:	58                   	pop    eax
c0008d9d:	5e                   	pop    esi
c0008d9e:	5f                   	pop    edi
c0008d9f:	c3                   	ret    
c0008da0:	83 ec 0c             	sub    esp,0xc
c0008da3:	68 c7 28 02 c0       	push   0xc00228c7
c0008da8:	e8 a2 9c 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0008dad:	83 c4 10             	add    esp,0x10
c0008db0:	eb e0                	jmp    c0008d92 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008db2 <Computer::shutdown()>:
c0008db2:	83 ec 0c             	sub    esp,0xc
c0008db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008db9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dbb:	6a 00                	push   0x0
c0008dbd:	6a 00                	push   0x0
c0008dbf:	6a 00                	push   0x0
c0008dc1:	50                   	push   eax
c0008dc2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008dc5:	83 c4 1c             	add    esp,0x1c
c0008dc8:	c3                   	ret    
c0008dc9:	90                   	nop

c0008dca <Computer::restart()>:
c0008dca:	83 ec 0c             	sub    esp,0xc
c0008dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dd3:	6a 00                	push   0x0
c0008dd5:	6a 00                	push   0x0
c0008dd7:	6a 01                	push   0x1
c0008dd9:	50                   	push   eax
c0008dda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008ddd:	83 c4 1c             	add    esp,0x1c
c0008de0:	c3                   	ret    
c0008de1:	90                   	nop

c0008de2 <Computer::sleep()>:
c0008de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008dec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008df0:	e9 2b 83 00 00       	jmp    c0011120 <ACPI::sleep()>
c0008df5:	90                   	nop

c0008df6 <Computer::nmiEnabled()>:
c0008df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dfa:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008e00:	c3                   	ret    
c0008e01:	90                   	nop

c0008e02 <Computer::readCMOS(unsigned char)>:
c0008e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008e0d:	19 c0                	sbb    eax,eax
c0008e0f:	83 e0 80             	and    eax,0xffffff80
c0008e12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008e16:	e6 70                	out    0x70,al
c0008e18:	e4 71                	in     al,0x71
c0008e1a:	c3                   	ret    
c0008e1b:	90                   	nop

c0008e1c <Computer::enableNMI(bool)>:
c0008e1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e24:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008e2a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008e32:	eb ce                	jmp    c0008e02 <Computer::readCMOS(unsigned char)>

c0008e34 <Computer::open(int, int, void*)>:
c0008e34:	56                   	push   esi
c0008e35:	53                   	push   ebx
c0008e36:	83 ec 10             	sub    esp,0x10
c0008e39:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e3d:	68 7c 29 02 c0       	push   0xc002297c
c0008e42:	e8 aa 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008e47:	f6 05 e0 62 02 c0 04 	test   BYTE PTR ds:0xc00262e0,0x4
c0008e4e:	c7 04 24 cd 28 02 c0 	mov    DWORD PTR [esp],0xc00228cd
c0008e55:	0f 94 05 60 59 02 c0 	sete   BYTE PTR ds:0xc0025960
c0008e5c:	e8 90 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008e61:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0008e68:	e8 2a 09 00 00       	call   c0009797 <malloc>
c0008e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e70:	89 c6                	mov    esi,eax
c0008e72:	e8 61 7b 00 00       	call   c00109d8 <ACPI::ACPI()>
c0008e77:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0008e7d:	58                   	pop    eax
c0008e7e:	5a                   	pop    edx
c0008e7f:	56                   	push   esi
c0008e80:	53                   	push   ebx
c0008e81:	e8 dc 4c 00 00       	call   c000db62 <Device::addChild(Device*)>
c0008e86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008e89:	e8 b4 fc ff ff       	call   c0008b42 <Computer::detectFeatures()>
c0008e8e:	59                   	pop    ecx
c0008e8f:	5e                   	pop    esi
c0008e90:	6a 01                	push   0x1
c0008e92:	53                   	push   ebx
c0008e93:	e8 84 ff ff ff       	call   c0008e1c <Computer::enableNMI(bool)>
c0008e98:	c7 04 24 71 28 02 c0 	mov    DWORD PTR [esp],0xc0022871
c0008e9f:	e8 4d 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008ea4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0008eab:	e8 e7 08 00 00       	call   c0009797 <malloc>
c0008eb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008eb3:	89 c6                	mov    esi,eax
c0008eb5:	e8 c6 88 00 00       	call   c0011780 <CPU::CPU()>
c0008eba:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0008ec0:	58                   	pop    eax
c0008ec1:	5a                   	pop    edx
c0008ec2:	56                   	push   esi
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 99 4c 00 00       	call   c000db62 <Device::addChild(Device*)>
c0008ec9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0008ecf:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008ed5:	6a 00                	push   0x0
c0008ed7:	6a 00                	push   0x0
c0008ed9:	50                   	push   eax
c0008eda:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008edd:	83 c4 14             	add    esp,0x14
c0008ee0:	68 a0 29 02 c0       	push   0xc00229a0
c0008ee5:	e8 07 09 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008eea:	e8 23 04 01 00       	call   c0019312 <Hal::initialiseCoprocessor()>
c0008eef:	c7 04 24 e5 28 02 c0 	mov    DWORD PTR [esp],0xc00228e5
c0008ef6:	e8 f6 08 00 00       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0008efb:	c7 04 24 90 88 00 c0 	mov    DWORD PTR [esp],0xc0008890
c0008f02:	e8 75 cf 00 00       	call   c0015e7c <setupMultitasking(void (*)())>
c0008f07:	83 c4 14             	add    esp,0x14
c0008f0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0008f0f:	5b                   	pop    ebx
c0008f10:	5e                   	pop    esi
c0008f11:	c3                   	ret    

c0008f12 <Computer::disableNMI()>:
c0008f12:	6a 00                	push   0x0
c0008f14:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008f18:	e8 ff fe ff ff       	call   c0008e1c <Computer::enableNMI(bool)>
c0008f1d:	58                   	pop    eax
c0008f1e:	5a                   	pop    edx
c0008f1f:	c3                   	ret    

c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0008f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f24:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f2b:	19 c0                	sbb    eax,eax
c0008f2d:	83 e0 80             	and    eax,0xffffff80
c0008f30:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008f34:	e6 70                	out    0x70,al
c0008f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f3a:	e6 71                	out    0x71,al
c0008f3c:	c3                   	ret    
c0008f3d:	90                   	nop

c0008f3e <Computer::handleNMI()>:
c0008f3e:	56                   	push   esi
c0008f3f:	53                   	push   ebx
c0008f40:	83 ec 10             	sub    esp,0x10
c0008f43:	e4 92                	in     al,0x92
c0008f45:	89 c6                	mov    esi,eax
c0008f47:	e4 61                	in     al,0x61
c0008f49:	68 00 29 02 c0       	push   0xc0022900
c0008f4e:	88 c3                	mov    bl,al
c0008f50:	e8 90 37 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	83 e6 10             	and    esi,0x10
c0008f5b:	75 0d                	jne    c0008f6a <Computer::handleNMI()+0x2c>
c0008f5d:	f6 c3 40             	test   bl,0x40
c0008f60:	75 1d                	jne    c0008f7f <Computer::handleNMI()+0x41>
c0008f62:	84 db                	test   bl,bl
c0008f64:	78 2d                	js     c0008f93 <Computer::handleNMI()+0x55>
c0008f66:	58                   	pop    eax
c0008f67:	5b                   	pop    ebx
c0008f68:	5e                   	pop    esi
c0008f69:	c3                   	ret    
c0008f6a:	83 ec 0c             	sub    esp,0xc
c0008f6d:	68 11 29 02 c0       	push   0xc0022911
c0008f72:	e8 d8 9a 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	f6 c3 40             	test   bl,0x40
c0008f7d:	74 e3                	je     c0008f62 <Computer::handleNMI()+0x24>
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	68 1e 29 02 c0       	push   0xc002291e
c0008f87:	e8 c3 9a 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	84 db                	test   bl,bl
c0008f91:	79 d3                	jns    c0008f66 <Computer::handleNMI()+0x28>
c0008f93:	c7 44 24 10 28 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022928
c0008f9b:	5a                   	pop    edx
c0008f9c:	5b                   	pop    ebx
c0008f9d:	5e                   	pop    esi
c0008f9e:	e9 ac 9a 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>
c0008fa3:	90                   	nop

c0008fa4 <Computer::setDiskActivityLight(int, bool)>:
c0008fa4:	56                   	push   esi
c0008fa5:	53                   	push   ebx
c0008fa6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008faa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0008faf:	77 1b                	ja     c0008fcc <Computer::setDiskActivityLight(int, bool)+0x28>
c0008fb1:	e4 92                	in     al,0x92
c0008fb3:	bb 40 00 00 00       	mov    ebx,0x40
c0008fb8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0008fbc:	89 da                	mov    edx,ebx
c0008fbe:	d3 e2                	shl    edx,cl
c0008fc0:	89 f1                	mov    ecx,esi
c0008fc2:	f7 d2                	not    edx
c0008fc4:	d3 e3                	shl    ebx,cl
c0008fc6:	21 d0                	and    eax,edx
c0008fc8:	09 d8                	or     eax,ebx
c0008fca:	e6 92                	out    0x92,al
c0008fcc:	5b                   	pop    ebx
c0008fcd:	5e                   	pop    esi
c0008fce:	c3                   	ret    
c0008fcf:	90                   	nop

c0008fd0 <GDTEntry::setBase(unsigned int)>:
c0008fd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008fd8:	89 c1                	mov    ecx,eax
c0008fda:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0008fde:	c1 e9 10             	shr    ecx,0x10
c0008fe1:	c1 e8 18             	shr    eax,0x18
c0008fe4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0008fe7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0008fea:	c3                   	ret    
c0008feb:	90                   	nop

c0008fec <GDTEntry::setLimit(unsigned int)>:
c0008fec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008ff4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0008ff7:	66 89 01             	mov    WORD PTR [ecx],ax
c0008ffa:	83 e2 f0             	and    edx,0xfffffff0
c0008ffd:	c1 e8 10             	shr    eax,0x10
c0009000:	83 e0 0f             	and    eax,0xf
c0009003:	09 d0                	or     eax,edx
c0009005:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009008:	c3                   	ret    
c0009009:	90                   	nop

c000900a <GDT::GDT()>:
c000900a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000900e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000901e:	90                   	nop
c000901f:	c3                   	ret    

c0009020 <GDT::addEntry(GDTEntry)>:
c0009020:	53                   	push   ebx
c0009021:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009025:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009029:	8b 02                	mov    eax,DWORD PTR [edx]
c000902b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000902f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009033:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009037:	8d 48 01             	lea    ecx,[eax+0x1]
c000903a:	c1 e0 03             	shl    eax,0x3
c000903d:	89 0a                	mov    DWORD PTR [edx],ecx
c000903f:	5b                   	pop    ebx
c0009040:	c3                   	ret    
c0009041:	90                   	nop

c0009042 <GDT::getNumberOfEntries()>:
c0009042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009046:	8b 00                	mov    eax,DWORD PTR [eax]
c0009048:	c3                   	ret    
c0009049:	90                   	nop

c000904a <GDT::flush()>:
c000904a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000904e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009050:	83 c0 04             	add    eax,0x4
c0009053:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000905a:	a3 d2 62 02 c0       	mov    ds:0xc00262d2,eax
c000905f:	66 89 15 d0 62 02 c0 	mov    WORD PTR ds:0xc00262d0,dx
c0009066:	e9 12 73 ff ff       	jmp    c000037d <loadGDT>
c000906b:	90                   	nop

c000906c <GDT::setup()>:
c000906c:	57                   	push   edi
c000906d:	56                   	push   esi
c000906e:	53                   	push   ebx
c000906f:	83 ec 40             	sub    esp,0x40
c0009072:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009076:	6a 00                	push   0x0
c0009078:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000907c:	56                   	push   esi
c000907d:	e8 4e ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c0009082:	6a 00                	push   0x0
c0009084:	56                   	push   esi
c0009085:	e8 62 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c000908a:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009092:	6a 00                	push   0x0
c0009094:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009098:	56                   	push   esi
c0009099:	e8 32 ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c000909e:	68 ff ff ff 00       	push   0xffffff
c00090a3:	56                   	push   esi
c00090a4:	e8 43 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c00090a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00090ad:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090b2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00090b7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00090bb:	83 c4 20             	add    esp,0x20
c00090be:	6a 00                	push   0x0
c00090c0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00090c4:	56                   	push   esi
c00090c5:	e8 06 ff ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c00090ca:	68 ff ff ff 00       	push   0xffffff
c00090cf:	56                   	push   esi
c00090d0:	e8 17 ff ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c00090d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00090d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00090dd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00090e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00090e5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090ee:	0d 00 92 c0 00       	or     eax,0xc09200
c00090f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00090f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090fb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00090ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009107:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000910b:	89 fa                	mov    edx,edi
c000910d:	80 cc 60             	or     ah,0x60
c0009110:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009116:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000911a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000911e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009122:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009126:	80 cc 60             	or     ah,0x60
c0009129:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000912d:	89 f8                	mov    eax,edi
c000912f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009134:	09 d0                	or     eax,edx
c0009136:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000913a:	89 c7                	mov    edi,eax
c000913c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009140:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009144:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009148:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009156:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000915b:	09 d0                	or     eax,edx
c000915d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009161:	83 c4 0c             	add    esp,0xc
c0009164:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009168:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000916c:	53                   	push   ebx
c000916d:	e8 ae fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009172:	83 c4 0c             	add    esp,0xc
c0009175:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009179:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000917d:	53                   	push   ebx
c000917e:	e8 9d fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009183:	83 c4 0c             	add    esp,0xc
c0009186:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000918a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000918e:	53                   	push   ebx
c000918f:	e8 8c fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c0009194:	83 c4 0c             	add    esp,0xc
c0009197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000919b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000919f:	53                   	push   ebx
c00091a0:	e8 7b fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091a5:	83 c4 0c             	add    esp,0xc
c00091a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00091ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00091b0:	53                   	push   ebx
c00091b1:	e8 6a fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091b6:	83 c4 0c             	add    esp,0xc
c00091b9:	57                   	push   edi
c00091ba:	56                   	push   esi
c00091bb:	53                   	push   ebx
c00091bc:	e8 5f fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091c1:	83 c4 0c             	add    esp,0xc
c00091c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091cc:	53                   	push   ebx
c00091cd:	e8 4e fe ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c00091d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091d5:	e8 70 fe ff ff       	call   c000904a <GDT::flush()>
c00091da:	83 c4 50             	add    esp,0x50
c00091dd:	5b                   	pop    ebx
c00091de:	5e                   	pop    esi
c00091df:	5f                   	pop    edi
c00091e0:	c3                   	ret    

c00091e1 <idleFunction(void*)>:
c00091e1:	83 ec 0c             	sub    esp,0xc
c00091e4:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00091e9:	48                   	dec    eax
c00091ea:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00091ef:	75 01                	jne    c00091f2 <idleFunction(void*)+0x11>
c00091f1:	fb                   	sti    
c00091f2:	f4                   	hlt    
c00091f3:	e8 ca 84 01 00       	call   c00216c2 <idleCommon()>
c00091f8:	eb f8                	jmp    c00091f2 <idleFunction(void*)+0x11>
c00091fa:	66 90                	xchg   ax,ax

c00091fc <IDTEntry::IDTEntry(bool)>:
c00091fc:	83 ec 04             	sub    esp,0x4
c00091ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009203:	88 04 24             	mov    BYTE PTR [esp],al
c0009206:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000920a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009214:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000921c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000921f:	83 e2 f0             	and    edx,0xfffffff0
c0009222:	83 ca 0e             	or     edx,0xe
c0009225:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009228:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000922c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000922f:	83 e2 ef             	and    edx,0xffffffef
c0009232:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009235:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009239:	74 05                	je     c0009240 <IDTEntry::IDTEntry(bool)+0x44>
c000923b:	b2 03                	mov    dl,0x3
c000923d:	eb 05                	jmp    c0009244 <IDTEntry::IDTEntry(bool)+0x48>
c000923f:	90                   	nop
c0009240:	b2 00                	mov    dl,0x0
c0009242:	66 90                	xchg   ax,ax
c0009244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009248:	83 e2 03             	and    edx,0x3
c000924b:	88 d1                	mov    cl,dl
c000924d:	c1 e1 05             	shl    ecx,0x5
c0009250:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009253:	83 e2 9f             	and    edx,0xffffff9f
c0009256:	09 ca                	or     edx,ecx
c0009258:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000925b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000925f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009262:	83 ca 80             	or     edx,0xffffff80
c0009265:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009268:	90                   	nop
c0009269:	83 c4 04             	add    esp,0x4
c000926c:	c3                   	ret    
c000926d:	90                   	nop

c000926e <IDTEntry::setOffset(unsigned int)>:
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009276:	66 89 02             	mov    WORD PTR [edx],ax
c0009279:	c1 e8 10             	shr    eax,0x10
c000927c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009280:	c3                   	ret    
c0009281:	90                   	nop
c0009282:	66 90                	xchg   ax,ax

c0009284 <IDT::IDT()>:
c0009284:	90                   	nop
c0009285:	c3                   	ret    

c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0009286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000928a:	83 c0 30             	add    eax,0x30
c000928d:	c3                   	ret    

c000928e <IDT::addEntry(IDTEntry, int)>:
c000928e:	53                   	push   ebx
c000928f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009293:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009297:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000929b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000929f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00092a2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00092a6:	5b                   	pop    ebx
c00092a7:	c3                   	ret    

c00092a8 <IDT::addEntry(int, void (*)(), bool)>:
c00092a8:	53                   	push   ebx
c00092a9:	83 ec 10             	sub    esp,0x10
c00092ac:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00092b1:	50                   	push   eax
c00092b2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00092b6:	53                   	push   ebx
c00092b7:	e8 40 ff ff ff       	call   c00091fc <IDTEntry::IDTEntry(bool)>
c00092bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092c0:	53                   	push   ebx
c00092c1:	e8 a8 ff ff ff       	call   c000926e <IDTEntry::setOffset(unsigned int)>
c00092c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00092d6:	e8 b3 ff ff ff       	call   c000928e <IDT::addEntry(IDTEntry, int)>
c00092db:	83 c4 30             	add    esp,0x30
c00092de:	5b                   	pop    ebx
c00092df:	c3                   	ret    

c00092e0 <IDT::flush()>:
c00092e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e4:	66 c7 05 d8 62 02 c0 ff 07 	mov    WORD PTR ds:0xc00262d8,0x7ff
c00092ed:	a3 da 62 02 c0       	mov    ds:0xc00262da,eax
c00092f2:	0f 01 1d d8 62 02 c0 	lidtd  ds:0xc00262d8
c00092f9:	c3                   	ret    

c00092fa <IDT::setup()>:
c00092fa:	57                   	push   edi
c00092fb:	56                   	push   esi
c00092fc:	53                   	push   ebx
c00092fd:	83 ec 10             	sub    esp,0x10
c0009300:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009304:	6a 00                	push   0x0
c0009306:	68 d0 0e 02 c0       	push   0xc0020ed0
c000930b:	6a 00                	push   0x0
c000930d:	53                   	push   ebx
c000930e:	e8 95 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009313:	6a 00                	push   0x0
c0009315:	68 e0 0e 02 c0       	push   0xc0020ee0
c000931a:	6a 01                	push   0x1
c000931c:	53                   	push   ebx
c000931d:	e8 86 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009322:	83 c4 20             	add    esp,0x20
c0009325:	6a 00                	push   0x0
c0009327:	68 ea 0e 02 c0       	push   0xc0020eea
c000932c:	6a 02                	push   0x2
c000932e:	53                   	push   ebx
c000932f:	e8 74 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009334:	6a 00                	push   0x0
c0009336:	68 f4 0e 02 c0       	push   0xc0020ef4
c000933b:	6a 03                	push   0x3
c000933d:	53                   	push   ebx
c000933e:	e8 65 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009343:	83 c4 20             	add    esp,0x20
c0009346:	6a 00                	push   0x0
c0009348:	68 fe 0e 02 c0       	push   0xc0020efe
c000934d:	6a 04                	push   0x4
c000934f:	53                   	push   ebx
c0009350:	e8 53 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009355:	6a 00                	push   0x0
c0009357:	68 08 0f 02 c0       	push   0xc0020f08
c000935c:	6a 05                	push   0x5
c000935e:	53                   	push   ebx
c000935f:	e8 44 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009364:	83 c4 20             	add    esp,0x20
c0009367:	6a 00                	push   0x0
c0009369:	68 12 0f 02 c0       	push   0xc0020f12
c000936e:	6a 06                	push   0x6
c0009370:	53                   	push   ebx
c0009371:	e8 32 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009376:	6a 00                	push   0x0
c0009378:	68 1c 0f 02 c0       	push   0xc0020f1c
c000937d:	6a 07                	push   0x7
c000937f:	53                   	push   ebx
c0009380:	e8 23 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009385:	83 c4 20             	add    esp,0x20
c0009388:	6a 00                	push   0x0
c000938a:	68 26 0f 02 c0       	push   0xc0020f26
c000938f:	6a 08                	push   0x8
c0009391:	53                   	push   ebx
c0009392:	e8 11 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009397:	6a 00                	push   0x0
c0009399:	68 2e 0f 02 c0       	push   0xc0020f2e
c000939e:	6a 09                	push   0x9
c00093a0:	53                   	push   ebx
c00093a1:	e8 02 ff ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093a6:	83 c4 20             	add    esp,0x20
c00093a9:	6a 00                	push   0x0
c00093ab:	68 38 0f 02 c0       	push   0xc0020f38
c00093b0:	6a 0a                	push   0xa
c00093b2:	53                   	push   ebx
c00093b3:	e8 f0 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093b8:	6a 00                	push   0x0
c00093ba:	68 40 0f 02 c0       	push   0xc0020f40
c00093bf:	6a 0b                	push   0xb
c00093c1:	53                   	push   ebx
c00093c2:	e8 e1 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	68 48 0f 02 c0       	push   0xc0020f48
c00093d1:	6a 0c                	push   0xc
c00093d3:	53                   	push   ebx
c00093d4:	e8 cf fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093d9:	6a 00                	push   0x0
c00093db:	68 50 0f 02 c0       	push   0xc0020f50
c00093e0:	6a 0d                	push   0xd
c00093e2:	53                   	push   ebx
c00093e3:	e8 c0 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093e8:	83 c4 20             	add    esp,0x20
c00093eb:	6a 00                	push   0x0
c00093ed:	68 58 0f 02 c0       	push   0xc0020f58
c00093f2:	6a 0e                	push   0xe
c00093f4:	53                   	push   ebx
c00093f5:	e8 ae fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00093fa:	6a 00                	push   0x0
c00093fc:	68 60 0f 02 c0       	push   0xc0020f60
c0009401:	6a 0f                	push   0xf
c0009403:	53                   	push   ebx
c0009404:	e8 9f fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009409:	83 c4 20             	add    esp,0x20
c000940c:	6a 00                	push   0x0
c000940e:	68 6a 0f 02 c0       	push   0xc0020f6a
c0009413:	6a 10                	push   0x10
c0009415:	53                   	push   ebx
c0009416:	e8 8d fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000941b:	6a 00                	push   0x0
c000941d:	68 74 0f 02 c0       	push   0xc0020f74
c0009422:	6a 11                	push   0x11
c0009424:	53                   	push   ebx
c0009425:	e8 7e fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000942a:	83 c4 20             	add    esp,0x20
c000942d:	6a 00                	push   0x0
c000942f:	68 7e 0f 02 c0       	push   0xc0020f7e
c0009434:	6a 12                	push   0x12
c0009436:	53                   	push   ebx
c0009437:	e8 6c fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000943c:	6a 01                	push   0x1
c000943e:	68 18 10 02 c0       	push   0xc0021018
c0009443:	6a 60                	push   0x60
c0009445:	53                   	push   ebx
c0009446:	e8 5d fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000944b:	83 c4 20             	add    esp,0x20
c000944e:	6a 00                	push   0x0
c0009450:	68 1f 10 02 c0       	push   0xc002101f
c0009455:	6a 20                	push   0x20
c0009457:	53                   	push   ebx
c0009458:	e8 4b fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000945d:	6a 00                	push   0x0
c000945f:	68 0a 10 02 c0       	push   0xc002100a
c0009464:	6a 21                	push   0x21
c0009466:	53                   	push   ebx
c0009467:	e8 3c fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000946c:	83 c4 20             	add    esp,0x20
c000946f:	6a 00                	push   0x0
c0009471:	68 11 10 02 c0       	push   0xc0021011
c0009476:	6a 22                	push   0x22
c0009478:	53                   	push   ebx
c0009479:	e8 2a fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000947e:	6a 00                	push   0x0
c0009480:	68 88 0f 02 c0       	push   0xc0020f88
c0009485:	6a 23                	push   0x23
c0009487:	53                   	push   ebx
c0009488:	e8 1b fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000948d:	83 c4 20             	add    esp,0x20
c0009490:	6a 00                	push   0x0
c0009492:	68 92 0f 02 c0       	push   0xc0020f92
c0009497:	6a 24                	push   0x24
c0009499:	53                   	push   ebx
c000949a:	e8 09 fe ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c000949f:	6a 00                	push   0x0
c00094a1:	68 9c 0f 02 c0       	push   0xc0020f9c
c00094a6:	6a 25                	push   0x25
c00094a8:	53                   	push   ebx
c00094a9:	e8 fa fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094ae:	83 c4 20             	add    esp,0x20
c00094b1:	6a 00                	push   0x0
c00094b3:	68 a6 0f 02 c0       	push   0xc0020fa6
c00094b8:	6a 26                	push   0x26
c00094ba:	53                   	push   ebx
c00094bb:	e8 e8 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094c0:	6a 00                	push   0x0
c00094c2:	68 b0 0f 02 c0       	push   0xc0020fb0
c00094c7:	6a 27                	push   0x27
c00094c9:	53                   	push   ebx
c00094ca:	e8 d9 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094cf:	83 c4 20             	add    esp,0x20
c00094d2:	6a 00                	push   0x0
c00094d4:	68 ba 0f 02 c0       	push   0xc0020fba
c00094d9:	6a 28                	push   0x28
c00094db:	53                   	push   ebx
c00094dc:	e8 c7 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094e1:	6a 00                	push   0x0
c00094e3:	68 c4 0f 02 c0       	push   0xc0020fc4
c00094e8:	6a 29                	push   0x29
c00094ea:	53                   	push   ebx
c00094eb:	e8 b8 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00094f0:	83 c4 20             	add    esp,0x20
c00094f3:	6a 00                	push   0x0
c00094f5:	68 ce 0f 02 c0       	push   0xc0020fce
c00094fa:	6a 2a                	push   0x2a
c00094fc:	53                   	push   ebx
c00094fd:	e8 a6 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009502:	6a 00                	push   0x0
c0009504:	68 d8 0f 02 c0       	push   0xc0020fd8
c0009509:	6a 2b                	push   0x2b
c000950b:	53                   	push   ebx
c000950c:	e8 97 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009511:	83 c4 20             	add    esp,0x20
c0009514:	6a 00                	push   0x0
c0009516:	68 e2 0f 02 c0       	push   0xc0020fe2
c000951b:	6a 2c                	push   0x2c
c000951d:	53                   	push   ebx
c000951e:	e8 85 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009523:	6a 00                	push   0x0
c0009525:	68 ec 0f 02 c0       	push   0xc0020fec
c000952a:	6a 2d                	push   0x2d
c000952c:	53                   	push   ebx
c000952d:	e8 76 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009532:	83 c4 20             	add    esp,0x20
c0009535:	6a 00                	push   0x0
c0009537:	68 f6 0f 02 c0       	push   0xc0020ff6
c000953c:	6a 2e                	push   0x2e
c000953e:	53                   	push   ebx
c000953f:	e8 64 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009544:	6a 00                	push   0x0
c0009546:	68 00 10 02 c0       	push   0xc0021000
c000954b:	6a 2f                	push   0x2f
c000954d:	53                   	push   ebx
c000954e:	e8 55 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009553:	83 c4 20             	add    esp,0x20
c0009556:	6a 00                	push   0x0
c0009558:	68 56 10 02 c0       	push   0xc0021056
c000955d:	6a 30                	push   0x30
c000955f:	53                   	push   ebx
c0009560:	e8 43 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009565:	6a 00                	push   0x0
c0009567:	68 60 10 02 c0       	push   0xc0021060
c000956c:	6a 31                	push   0x31
c000956e:	53                   	push   ebx
c000956f:	e8 34 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009574:	83 c4 20             	add    esp,0x20
c0009577:	6a 00                	push   0x0
c0009579:	68 6a 10 02 c0       	push   0xc002106a
c000957e:	6a 32                	push   0x32
c0009580:	53                   	push   ebx
c0009581:	e8 22 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009586:	6a 00                	push   0x0
c0009588:	68 74 10 02 c0       	push   0xc0021074
c000958d:	6a 33                	push   0x33
c000958f:	53                   	push   ebx
c0009590:	e8 13 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c0009595:	83 c4 20             	add    esp,0x20
c0009598:	6a 00                	push   0x0
c000959a:	68 7e 10 02 c0       	push   0xc002107e
c000959f:	6a 34                	push   0x34
c00095a1:	53                   	push   ebx
c00095a2:	e8 01 fd ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095a7:	6a 00                	push   0x0
c00095a9:	68 88 10 02 c0       	push   0xc0021088
c00095ae:	6a 35                	push   0x35
c00095b0:	53                   	push   ebx
c00095b1:	e8 f2 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095b6:	83 c4 20             	add    esp,0x20
c00095b9:	6a 00                	push   0x0
c00095bb:	68 92 10 02 c0       	push   0xc0021092
c00095c0:	6a 36                	push   0x36
c00095c2:	53                   	push   ebx
c00095c3:	e8 e0 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095c8:	6a 00                	push   0x0
c00095ca:	68 9c 10 02 c0       	push   0xc002109c
c00095cf:	6a 37                	push   0x37
c00095d1:	53                   	push   ebx
c00095d2:	e8 d1 fc ff ff       	call   c00092a8 <IDT::addEntry(int, void (*)(), bool)>
c00095d7:	83 c4 1c             	add    esp,0x1c
c00095da:	6a 03                	push   0x3
c00095dc:	6a 02                	push   0x2
c00095de:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c00095e4:	e8 0f 25 00 00       	call   c000baf8 <VAS::allocatePages(int, int)>
c00095e9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00095f0:	89 c6                	mov    esi,eax
c00095f2:	e8 a0 01 00 00       	call   c0009797 <malloc>
c00095f7:	81 c6 00 20 00 00    	add    esi,0x2000
c00095fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0009600:	89 c7                	mov    edi,eax
c0009602:	e8 c5 16 00 00       	call   c000accc <TSS::TSS()>
c0009607:	83 c4 0c             	add    esp,0xc
c000960a:	68 26 0f 02 c0       	push   0xc0020f26
c000960f:	56                   	push   esi
c0009610:	57                   	push   edi
c0009611:	e8 fa 16 00 00       	call   c000ad10 <TSS::setup(unsigned long, unsigned long)>
c0009616:	89 c6                	mov    esi,eax
c0009618:	58                   	pop    eax
c0009619:	5a                   	pop    edx
c000961a:	6a 00                	push   0x0
c000961c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009620:	50                   	push   eax
c0009621:	e8 d6 fb ff ff       	call   c00091fc <IDTEntry::IDTEntry(bool)>
c0009626:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000962a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000962f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009636:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000963c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009640:	80 ce 05             	or     dh,0x5
c0009643:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009646:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000964a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000964e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009654:	e8 87 fc ff ff       	call   c00092e0 <IDT::flush()>
c0009659:	83 c4 20             	add    esp,0x20
c000965c:	5b                   	pop    ebx
c000965d:	5e                   	pop    esi
c000965e:	5f                   	pop    edi
c000965f:	c3                   	ret    

c0009660 <sbrk>:
c0009660:	55                   	push   ebp
c0009661:	57                   	push   edi
c0009662:	56                   	push   esi
c0009663:	53                   	push   ebx
c0009664:	83 ec 24             	sub    esp,0x24
c0009667:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000966b:	53                   	push   ebx
c000966c:	68 f0 29 02 c0       	push   0xc00229f0
c0009671:	e8 6f 30 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009676:	83 c4 10             	add    esp,0x10
c0009679:	85 db                	test   ebx,ebx
c000967b:	74 5f                	je     c00096dc <sbrk+0x7c>
c000967d:	78 64                	js     c00096e3 <sbrk+0x83>
c000967f:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c0009684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009688:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000968e:	89 dd                	mov    ebp,ebx
c0009690:	78 69                	js     c00096fb <sbrk+0x9b>
c0009692:	c1 fd 0c             	sar    ebp,0xc
c0009695:	bb 00 00 00 00       	mov    ebx,0x0
c000969a:	8b 35 b4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263b4
c00096a0:	8b 3d e0 57 02 c0    	mov    edi,DWORD PTR ds:0xc00257e0
c00096a6:	e8 2b 05 00 00       	call   c0009bd6 <Phys::allocatePage()>
c00096ab:	68 01 04 00 00       	push   0x401
c00096b0:	57                   	push   edi
c00096b1:	50                   	push   eax
c00096b2:	56                   	push   esi
c00096b3:	e8 3c 23 00 00       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00096b8:	81 05 e0 57 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00257e0,0x1000
c00096c2:	43                   	inc    ebx
c00096c3:	83 c4 10             	add    esp,0x10
c00096c6:	39 dd                	cmp    ebp,ebx
c00096c8:	75 d0                	jne    c000969a <sbrk+0x3a>
c00096ca:	0f 20 d8             	mov    eax,cr3
c00096cd:	0f 22 d8             	mov    cr3,eax
c00096d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	5b                   	pop    ebx
c00096d8:	5e                   	pop    esi
c00096d9:	5f                   	pop    edi
c00096da:	5d                   	pop    ebp
c00096db:	c3                   	ret    
c00096dc:	a1 e0 57 02 c0       	mov    eax,ds:0xc00257e0
c00096e1:	eb f1                	jmp    c00096d4 <sbrk+0x74>
c00096e3:	83 ec 08             	sub    esp,0x8
c00096e6:	53                   	push   ebx
c00096e7:	68 1c 2a 02 c0       	push   0xc0022a1c
c00096ec:	e8 f4 2f 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00096f1:	83 c4 10             	add    esp,0x10
c00096f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096f9:	eb d9                	jmp    c00096d4 <sbrk+0x74>
c00096fb:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009701:	eb 8f                	jmp    c0009692 <sbrk+0x32>

c0009703 <mmap>:
c0009703:	83 ec 18             	sub    esp,0x18
c0009706:	68 0e 2a 02 c0       	push   0xc0022a0e
c000970b:	e8 3f 93 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0009710:	b8 00 00 00 00       	mov    eax,0x0
c0009715:	83 c4 1c             	add    esp,0x1c
c0009718:	c3                   	ret    

c0009719 <munmap>:
c0009719:	83 ec 18             	sub    esp,0x18
c000971c:	68 13 2a 02 c0       	push   0xc0022a13
c0009721:	e8 29 93 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0009726:	b8 00 00 00 00       	mov    eax,0x0
c000972b:	83 c4 1c             	add    esp,0x1c
c000972e:	c3                   	ret    

c000972f <liballoc_lock()>:
c000972f:	fa                   	cli    
c0009730:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0009736:	b8 00 00 00 00       	mov    eax,0x0
c000973b:	c3                   	ret    

c000973c <liballoc_unlock()>:
c000973c:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0009741:	48                   	dec    eax
c0009742:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0009747:	75 01                	jne    c000974a <liballoc_unlock()+0xe>
c0009749:	fb                   	sti    
c000974a:	b8 00 00 00 00       	mov    eax,0x0
c000974f:	c3                   	ret    

c0009750 <liballoc_alloc(int)>:
c0009750:	83 ec 10             	sub    esp,0x10
c0009753:	6a 01                	push   0x1
c0009755:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009759:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c000975f:	e8 94 23 00 00       	call   c000baf8 <VAS::allocatePages(int, int)>
c0009764:	83 c4 1c             	add    esp,0x1c
c0009767:	c3                   	ret    

c0009768 <liballoc_free(void*, int)>:
c0009768:	83 ec 14             	sub    esp,0x14
c000976b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000976f:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c0009775:	e8 26 20 00 00       	call   c000b7a0 <VAS::freeAllocatedPages(unsigned long)>
c000977a:	b8 00 00 00 00       	mov    eax,0x0
c000977f:	83 c4 1c             	add    esp,0x1c
c0009782:	c3                   	ret    

c0009783 <realloc>:
c0009783:	83 ec 14             	sub    esp,0x14
c0009786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000978a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000978e:	e8 f1 7b ff ff       	call   c0001384 <dlrealloc>
c0009793:	83 c4 1c             	add    esp,0x1c
c0009796:	c3                   	ret    

c0009797 <malloc>:
c0009797:	83 ec 18             	sub    esp,0x18
c000979a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979e:	e8 a4 76 ff ff       	call   c0000e47 <dlmalloc>
c00097a3:	83 c4 1c             	add    esp,0x1c
c00097a6:	c3                   	ret    

c00097a7 <free>:
c00097a7:	83 ec 18             	sub    esp,0x18
c00097aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097ae:	e8 39 73 ff ff       	call   c0000aec <dlfree>
c00097b3:	83 c4 1c             	add    esp,0x1c
c00097b6:	c3                   	ret    

c00097b7 <rfree>:
c00097b7:	83 ec 18             	sub    esp,0x18
c00097ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097be:	e8 29 73 ff ff       	call   c0000aec <dlfree>
c00097c3:	83 c4 1c             	add    esp,0x1c
c00097c6:	c3                   	ret    

c00097c7 <calloc>:
c00097c7:	56                   	push   esi
c00097c8:	53                   	push   ebx
c00097c9:	83 ec 10             	sub    esp,0x10
c00097cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00097d0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00097d5:	53                   	push   ebx
c00097d6:	e8 bc ff ff ff       	call   c0009797 <malloc>
c00097db:	89 c6                	mov    esi,eax
c00097dd:	83 c4 0c             	add    esp,0xc
c00097e0:	53                   	push   ebx
c00097e1:	6a 00                	push   0x0
c00097e3:	50                   	push   eax
c00097e4:	e8 bf 6c ff ff       	call   c00004a8 <memset>
c00097e9:	89 f0                	mov    eax,esi
c00097eb:	83 c4 14             	add    esp,0x14
c00097ee:	5b                   	pop    ebx
c00097ef:	5e                   	pop    esi
c00097f0:	c3                   	ret    

c00097f1 <Krnl::setBootMessage(char const*)>:
c00097f1:	57                   	push   edi
c00097f2:	56                   	push   esi
c00097f3:	53                   	push   ebx
c00097f4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00097fa:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009801:	68 9e 00 00 00       	push   0x9e
c0009806:	6a 00                	push   0x0
c0009808:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000980c:	56                   	push   esi
c000980d:	e8 96 6c ff ff       	call   c00004a8 <memset>
c0009812:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009815:	e8 aa 6c ff ff       	call   c00004c4 <strlen>
c000981a:	ba 50 00 00 00       	mov    edx,0x50
c000981f:	83 c4 10             	add    esp,0x10
c0009822:	29 c2                	sub    edx,eax
c0009824:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009828:	d1 ea                	shr    edx,1
c000982a:	84 c0                	test   al,al
c000982c:	74 19                	je     c0009847 <Krnl::setBootMessage(char const*)+0x56>
c000982e:	01 d2                	add    edx,edx
c0009830:	43                   	inc    ebx
c0009831:	01 f2                	add    edx,esi
c0009833:	80 cc 0f             	or     ah,0xf
c0009836:	83 c2 02             	add    edx,0x2
c0009839:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000983d:	43                   	inc    ebx
c000983e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009843:	84 c0                	test   al,al
c0009845:	75 ec                	jne    c0009833 <Krnl::setBootMessage(char const*)+0x42>
c0009847:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000984c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009851:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009853:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009859:	5b                   	pop    ebx
c000985a:	5e                   	pop    esi
c000985b:	5f                   	pop    edi
c000985c:	c3                   	ret    

c000985d <kernel_main>:
c000985d:	55                   	push   ebp
c000985e:	57                   	push   edi
c000985f:	bf f9 03 00 00       	mov    edi,0x3f9
c0009864:	56                   	push   esi
c0009865:	89 fa                	mov    edx,edi
c0009867:	53                   	push   ebx
c0009868:	31 f6                	xor    esi,esi
c000986a:	83 ec 38             	sub    esp,0x38
c000986d:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009872:	a3 e0 62 02 c0       	mov    ds:0xc00262e0,eax
c0009877:	89 f0                	mov    eax,esi
c0009879:	ee                   	out    dx,al
c000987a:	bb fb 03 00 00       	mov    ebx,0x3fb
c000987f:	b0 80                	mov    al,0x80
c0009881:	89 da                	mov    edx,ebx
c0009883:	ee                   	out    dx,al
c0009884:	b1 03                	mov    cl,0x3
c0009886:	ba f8 03 00 00       	mov    edx,0x3f8
c000988b:	88 c8                	mov    al,cl
c000988d:	ee                   	out    dx,al
c000988e:	89 f0                	mov    eax,esi
c0009890:	89 fa                	mov    edx,edi
c0009892:	ee                   	out    dx,al
c0009893:	88 c8                	mov    al,cl
c0009895:	89 da                	mov    edx,ebx
c0009897:	ee                   	out    dx,al
c0009898:	b0 c7                	mov    al,0xc7
c000989a:	ba fa 03 00 00       	mov    edx,0x3fa
c000989f:	ee                   	out    dx,al
c00098a0:	b0 0b                	mov    al,0xb
c00098a2:	ba fc 03 00 00       	mov    edx,0x3fc
c00098a7:	ee                   	out    dx,al
c00098a8:	68 4c 2a 02 c0       	push   0xc0022a4c
c00098ad:	e8 33 2e 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00098b2:	0f be 05 00 58 02 c0 	movsx  eax,BYTE PTR ds:0xc0025800
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	84 c0                	test   al,al
c00098be:	74 5c                	je     c000991c <kernel_main+0xbf>
c00098c0:	31 db                	xor    ebx,ebx
c00098c2:	bd 0a 00 00 00       	mov    ebp,0xa
c00098c7:	bf 05 00 00 00       	mov    edi,0x5
c00098cc:	31 f6                	xor    esi,esi
c00098ce:	eb 14                	jmp    c00098e4 <kernel_main+0x87>
c00098d0:	47                   	inc    edi
c00098d1:	bd 0a 00 00 00       	mov    ebp,0xa
c00098d6:	31 f6                	xor    esi,esi
c00098d8:	43                   	inc    ebx
c00098d9:	0f be 83 00 58 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffda800]
c00098e0:	84 c0                	test   al,al
c00098e2:	74 38                	je     c000991c <kernel_main+0xbf>
c00098e4:	80 be 36 58 02 c0 db 	cmp    BYTE PTR [esi-0x3ffda7ca],0xdb
c00098eb:	0f 84 a3 00 00 00    	je     c0009994 <kernel_main+0x137>
c00098f1:	3c 0d                	cmp    al,0xd
c00098f3:	74 e3                	je     c00098d8 <kernel_main+0x7b>
c00098f5:	3c 0a                	cmp    al,0xa
c00098f7:	74 d7                	je     c00098d0 <kernel_main+0x73>
c00098f9:	83 ec 0c             	sub    esp,0xc
c00098fc:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0009900:	57                   	push   edi
c0009901:	43                   	inc    ebx
c0009902:	52                   	push   edx
c0009903:	46                   	inc    esi
c0009904:	6a 00                	push   0x0
c0009906:	6a 0e                	push   0xe
c0009908:	50                   	push   eax
c0009909:	e8 a2 08 01 00       	call   c001a1b0 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000990e:	83 c4 20             	add    esp,0x20
c0009911:	0f be 83 00 58 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffda800]
c0009918:	84 c0                	test   al,al
c000991a:	75 c8                	jne    c00098e4 <kernel_main+0x87>
c000991c:	83 ec 0c             	sub    esp,0xc
c000991f:	68 64 2a 02 c0       	push   0xc0022a64
c0009924:	e8 c8 fe ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0009929:	a1 24 05 00 00       	mov    eax,ds:0x524
c000992e:	05 ff 0f 00 00       	add    eax,0xfff
c0009933:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009938:	89 04 24             	mov    DWORD PTR [esp],eax
c000993b:	e8 15 04 00 00       	call   c0009d55 <Phys::physicalMemorySetup(unsigned int)>
c0009940:	e8 03 1c 00 00       	call   c000b548 <Virt::virtualMemorySetup()>
c0009945:	58                   	pop    eax
c0009946:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000994a:	53                   	push   ebx
c000994b:	e8 d0 27 00 00       	call   c000c120 <VAS::VAS()>
c0009950:	89 1d b4 63 02 c0    	mov    DWORD PTR ds:0xc00263b4,ebx
c0009956:	e8 c5 66 ff ff       	call   c0000020 <callGlobalConstructors>
c000995b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009962:	e8 30 fe ff ff       	call   c0009797 <malloc>
c0009967:	89 04 24             	mov    DWORD PTR [esp],eax
c000996a:	89 c6                	mov    esi,eax
c000996c:	e8 73 f0 ff ff       	call   c00089e4 <Computer::Computer()>
c0009971:	6a 00                	push   0x0
c0009973:	89 35 c8 62 02 c0    	mov    DWORD PTR ds:0xc00262c8,esi
c0009979:	6a 00                	push   0x0
c000997b:	6a 00                	push   0x0
c000997d:	56                   	push   esi
c000997e:	e8 b1 f4 ff ff       	call   c0008e34 <Computer::open(int, int, void*)>
c0009983:	83 c4 14             	add    esp,0x14
c0009986:	53                   	push   ebx
c0009987:	e8 ec 1e 00 00       	call   c000b878 <VAS::~VAS()>
c000998c:	83 c4 3c             	add    esp,0x3c
c000998f:	5b                   	pop    ebx
c0009990:	5e                   	pop    esi
c0009991:	5f                   	pop    edi
c0009992:	5d                   	pop    ebp
c0009993:	c3                   	ret    
c0009994:	0f b6 96 35 58 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffda7cb]
c000999b:	83 e2 fe             	and    edx,0xfffffffe
c000999e:	81 fa ba 00 00 00    	cmp    edx,0xba
c00099a4:	0f 85 47 ff ff ff    	jne    c00098f1 <kernel_main+0x94>
c00099aa:	45                   	inc    ebp
c00099ab:	e9 41 ff ff ff       	jmp    c00098f1 <kernel_main+0x94>

c00099b0 <Phys::allocateDMA(unsigned long)>:
c00099b0:	55                   	push   ebp
c00099b1:	31 ed                	xor    ebp,ebp
c00099b3:	57                   	push   edi
c00099b4:	56                   	push   esi
c00099b5:	53                   	push   ebx
c00099b6:	31 db                	xor    ebx,ebx
c00099b8:	83 ec 28             	sub    esp,0x28
c00099bb:	68 83 2a 02 c0       	push   0xc0022a83
c00099c0:	e8 20 2d 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00099c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00099c9:	83 c4 10             	add    esp,0x10
c00099cc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00099d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00099da:	c1 ef 0c             	shr    edi,0xc
c00099dd:	31 c0                	xor    eax,eax
c00099df:	eb 19                	jmp    c00099fa <Phys::allocateDMA(unsigned long)+0x4a>
c00099e1:	85 c0                	test   eax,eax
c00099e3:	75 06                	jne    c00099eb <Phys::allocateDMA(unsigned long)+0x3b>
c00099e5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00099e9:	89 dd                	mov    ebp,ebx
c00099eb:	8d 70 01             	lea    esi,[eax+0x1]
c00099ee:	39 f7                	cmp    edi,esi
c00099f0:	74 3f                	je     c0009a31 <Phys::allocateDMA(unsigned long)+0x81>
c00099f2:	89 f0                	mov    eax,esi
c00099f4:	43                   	inc    ebx
c00099f5:	83 fb 0f             	cmp    ebx,0xf
c00099f8:	7f 11                	jg     c0009a0b <Phys::allocateDMA(unsigned long)+0x5b>
c00099fa:	80 bb fc 62 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9d04],0x0
c0009a01:	74 de                	je     c00099e1 <Phys::allocateDMA(unsigned long)+0x31>
c0009a03:	31 c0                	xor    eax,eax
c0009a05:	43                   	inc    ebx
c0009a06:	83 fb 0f             	cmp    ebx,0xf
c0009a09:	7e ef                	jle    c00099fa <Phys::allocateDMA(unsigned long)+0x4a>
c0009a0b:	83 ec 0c             	sub    esp,0xc
c0009a0e:	68 b3 2a 02 c0       	push   0xc0022ab3
c0009a13:	e8 cd 2c 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009a18:	c7 04 24 70 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b70
c0009a1f:	e8 2b 90 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0009a24:	83 c4 10             	add    esp,0x10
c0009a27:	31 c0                	xor    eax,eax
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	89 e9                	mov    ecx,ebp
c0009a33:	c1 f9 04             	sar    ecx,0x4
c0009a36:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a3a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009a3e:	89 ca                	mov    edx,ecx
c0009a40:	4a                   	dec    edx
c0009a41:	79 03                	jns    c0009a46 <Phys::allocateDMA(unsigned long)+0x96>
c0009a43:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009a46:	c1 fa 04             	sar    edx,0x4
c0009a49:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009a4d:	74 08                	je     c0009a57 <Phys::allocateDMA(unsigned long)+0xa7>
c0009a4f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009a53:	31 c0                	xor    eax,eax
c0009a55:	eb ae                	jmp    c0009a05 <Phys::allocateDMA(unsigned long)+0x55>
c0009a57:	85 f6                	test   esi,esi
c0009a59:	74 15                	je     c0009a70 <Phys::allocateDMA(unsigned long)+0xc0>
c0009a5b:	8d 95 fc 62 02 c0    	lea    edx,[ebp-0x3ffd9d04]
c0009a61:	8d 84 05 fd 62 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9d03]
c0009a68:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009a6b:	42                   	inc    edx
c0009a6c:	39 d0                	cmp    eax,edx
c0009a6e:	75 f8                	jne    c0009a68 <Phys::allocateDMA(unsigned long)+0xb8>
c0009a70:	83 ec 0c             	sub    esp,0xc
c0009a73:	01 3d f4 62 02 c0    	add    DWORD PTR ds:0xc00262f4,edi
c0009a79:	68 9c 2a 02 c0       	push   0xc0022a9c
c0009a7e:	e8 62 2c 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a8a:	85 c0                	test   eax,eax
c0009a8c:	74 23                	je     c0009ab1 <Phys::allocateDMA(unsigned long)+0x101>
c0009a8e:	83 ec 0c             	sub    esp,0xc
c0009a91:	68 90 56 02 c0       	push   0xc0025690
c0009a96:	e8 4a 2c 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009a9b:	c7 04 24 70 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b70
c0009aa2:	e8 a8 8f 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0009aa7:	83 c4 10             	add    esp,0x10
c0009aaa:	89 f0                	mov    eax,esi
c0009aac:	e9 43 ff ff ff       	jmp    c00099f4 <Phys::allocateDMA(unsigned long)+0x44>
c0009ab1:	c1 e5 0c             	shl    ebp,0xc
c0009ab4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009aba:	e9 6a ff ff ff       	jmp    c0009a29 <Phys::allocateDMA(unsigned long)+0x79>

c0009abf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009abf:	83 ec 18             	sub    esp,0x18
c0009ac2:	68 b7 2a 02 c0       	push   0xc0022ab7
c0009ac7:	e8 19 2c 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009acc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009ad0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ada:	c1 ea 0c             	shr    edx,0xc
c0009add:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009ae2:	29 15 f4 62 02 c0    	sub    DWORD PTR ds:0xc00262f4,edx
c0009ae8:	c1 e8 0c             	shr    eax,0xc
c0009aeb:	83 c4 10             	add    esp,0x10
c0009aee:	85 d2                	test   edx,edx
c0009af0:	74 0f                	je     c0009b01 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009af2:	05 fc 62 02 c0       	add    eax,0xc00262fc
c0009af7:	01 c2                	add    edx,eax
c0009af9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009afc:	40                   	inc    eax
c0009afd:	39 d0                	cmp    eax,edx
c0009aff:	75 f8                	jne    c0009af9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009b01:	83 c4 0c             	add    esp,0xc
c0009b04:	c3                   	ret    

c0009b05 <Phys::setPageState(unsigned long, bool)>:
c0009b05:	56                   	push   esi
c0009b06:	ba 01 00 00 00       	mov    edx,0x1
c0009b0b:	53                   	push   ebx
c0009b0c:	8b 35 44 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025944
c0009b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009b16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009b1a:	89 c8                	mov    eax,ecx
c0009b1c:	83 e1 07             	and    ecx,0x7
c0009b1f:	c1 e8 03             	shr    eax,0x3
c0009b22:	d3 e3                	shl    ebx,cl
c0009b24:	01 c6                	add    esi,eax
c0009b26:	d3 e2                	shl    edx,cl
c0009b28:	f7 d2                	not    edx
c0009b2a:	20 16                	and    BYTE PTR [esi],dl
c0009b2c:	03 05 44 59 02 c0    	add    eax,DWORD PTR ds:0xc0025944
c0009b32:	08 18                	or     BYTE PTR [eax],bl
c0009b34:	5b                   	pop    ebx
c0009b35:	5e                   	pop    esi
c0009b36:	c3                   	ret    

c0009b37 <Phys::getPageState(unsigned long)>:
c0009b37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b3b:	8b 15 44 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025944
c0009b41:	89 c8                	mov    eax,ecx
c0009b43:	83 e1 07             	and    ecx,0x7
c0009b46:	c1 e8 03             	shr    eax,0x3
c0009b49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009b4d:	d3 f8                	sar    eax,cl
c0009b4f:	83 e0 01             	and    eax,0x1
c0009b52:	c3                   	ret    

c0009b53 <Phys::freePage(unsigned long)>:
c0009b53:	53                   	push   ebx
c0009b54:	83 ec 10             	sub    esp,0x10
c0009b57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b5b:	53                   	push   ebx
c0009b5c:	68 cd 2a 02 c0       	push   0xc0022acd
c0009b61:	e8 7f 2b 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009b66:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009b6c:	83 c4 10             	add    esp,0x10
c0009b6f:	3d ff ff 00 00       	cmp    eax,0xffff
c0009b74:	76 3d                	jbe    c0009bb3 <Phys::freePage(unsigned long)+0x60>
c0009b76:	83 ec 0c             	sub    esp,0xc
c0009b79:	c1 eb 0c             	shr    ebx,0xc
c0009b7c:	53                   	push   ebx
c0009b7d:	e8 b5 ff ff ff       	call   c0009b37 <Phys::getPageState(unsigned long)>
c0009b82:	83 c4 10             	add    esp,0x10
c0009b85:	84 c0                	test   al,al
c0009b87:	74 19                	je     c0009ba2 <Phys::freePage(unsigned long)+0x4f>
c0009b89:	83 ec 08             	sub    esp,0x8
c0009b8c:	ff 0d f4 62 02 c0    	dec    DWORD PTR ds:0xc00262f4
c0009b92:	6a 00                	push   0x0
c0009b94:	53                   	push   ebx
c0009b95:	e8 6b ff ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009b9a:	83 c4 10             	add    esp,0x10
c0009b9d:	83 c4 08             	add    esp,0x8
c0009ba0:	5b                   	pop    ebx
c0009ba1:	c3                   	ret    
c0009ba2:	c7 44 24 10 f7 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022af7
c0009baa:	83 c4 08             	add    esp,0x8
c0009bad:	5b                   	pop    ebx
c0009bae:	e9 9c 8e 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>
c0009bb3:	83 ec 08             	sub    esp,0x8
c0009bb6:	53                   	push   ebx
c0009bb7:	68 e0 2a 02 c0       	push   0xc0022ae0
c0009bbc:	e8 24 2b 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009bc1:	58                   	pop    eax
c0009bc2:	5a                   	pop    edx
c0009bc3:	68 00 10 00 00       	push   0x1000
c0009bc8:	53                   	push   ebx
c0009bc9:	e8 f1 fe ff ff       	call   c0009abf <Phys::freeDMA(unsigned long, unsigned long)>
c0009bce:	83 c4 10             	add    esp,0x10
c0009bd1:	83 c4 08             	add    esp,0x8
c0009bd4:	5b                   	pop    ebx
c0009bd5:	c3                   	ret    

c0009bd6 <Phys::allocatePage()>:
c0009bd6:	56                   	push   esi
c0009bd7:	53                   	push   ebx
c0009bd8:	83 ec 14             	sub    esp,0x14
c0009bdb:	8b 35 e8 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262e8
c0009be1:	89 f3                	mov    ebx,esi
c0009be3:	eb 0a                	jmp    c0009bef <Phys::allocatePage()+0x19>
c0009be5:	89 1d e8 62 02 c0    	mov    DWORD PTR ds:0xc00262e8,ebx
c0009beb:	39 de                	cmp    esi,ebx
c0009bed:	74 24                	je     c0009c13 <Phys::allocatePage()+0x3d>
c0009bef:	53                   	push   ebx
c0009bf0:	e8 42 ff ff ff       	call   c0009b37 <Phys::getPageState(unsigned long)>
c0009bf5:	5a                   	pop    edx
c0009bf6:	84 c0                	test   al,al
c0009bf8:	74 69                	je     c0009c63 <Phys::allocatePage()+0x8d>
c0009bfa:	43                   	inc    ebx
c0009bfb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009c01:	75 e2                	jne    c0009be5 <Phys::allocatePage()+0xf>
c0009c03:	31 db                	xor    ebx,ebx
c0009c05:	c7 05 e8 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262e8,0x0
c0009c0f:	39 de                	cmp    esi,ebx
c0009c11:	75 dc                	jne    c0009bef <Phys::allocatePage()+0x19>
c0009c13:	83 ec 0c             	sub    esp,0xc
c0009c16:	80 35 0c 63 02 c0 01 	xor    BYTE PTR ds:0xc002630c,0x1
c0009c1d:	68 98 2b 02 c0       	push   0xc0022b98
c0009c22:	e8 be 2a 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009c27:	58                   	pop    eax
c0009c28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009c2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c30:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009c36:	e8 39 27 00 00       	call   c000c374 <VAS::scanForEviction()>
c0009c3b:	83 c4 10             	add    esp,0x10
c0009c3e:	85 c0                	test   eax,eax
c0009c40:	75 62                	jne    c0009ca4 <Phys::allocatePage()+0xce>
c0009c42:	83 ec 0c             	sub    esp,0xc
c0009c45:	68 bc 2b 02 c0       	push   0xc0022bbc
c0009c4a:	e8 00 8e 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0009c4f:	83 c4 10             	add    esp,0x10
c0009c52:	8b 1d e8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262e8
c0009c58:	53                   	push   ebx
c0009c59:	e8 d9 fe ff ff       	call   c0009b37 <Phys::getPageState(unsigned long)>
c0009c5e:	5a                   	pop    edx
c0009c5f:	84 c0                	test   al,al
c0009c61:	75 97                	jne    c0009bfa <Phys::allocatePage()+0x24>
c0009c63:	6a 01                	push   0x1
c0009c65:	53                   	push   ebx
c0009c66:	e8 9a fe ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009c6b:	5a                   	pop    edx
c0009c6c:	a1 f4 62 02 c0       	mov    eax,ds:0xc00262f4
c0009c71:	59                   	pop    ecx
c0009c72:	40                   	inc    eax
c0009c73:	8b 15 e8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262e8
c0009c79:	a3 f4 62 02 c0       	mov    ds:0xc00262f4,eax
c0009c7e:	c1 e2 0c             	shl    edx,0xc
c0009c81:	52                   	push   edx
c0009c82:	ff 35 f8 62 02 c0    	push   DWORD PTR ds:0xc00262f8
c0009c88:	50                   	push   eax
c0009c89:	68 0d 2b 02 c0       	push   0xc0022b0d
c0009c8e:	e8 52 2a 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009c93:	a1 e8 62 02 c0       	mov    eax,ds:0xc00262e8
c0009c98:	83 c4 10             	add    esp,0x10
c0009c9b:	c1 e0 0c             	shl    eax,0xc
c0009c9e:	83 c4 14             	add    esp,0x14
c0009ca1:	5b                   	pop    ebx
c0009ca2:	5e                   	pop    esi
c0009ca3:	c3                   	ret    
c0009ca4:	83 ec 08             	sub    esp,0x8
c0009ca7:	89 c2                	mov    edx,eax
c0009ca9:	6a 01                	push   0x1
c0009cab:	c1 ea 0c             	shr    edx,0xc
c0009cae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009cb2:	52                   	push   edx
c0009cb3:	e8 4d fe ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cbf:	eb dd                	jmp    c0009c9e <Phys::allocatePage()+0xc8>

c0009cc1 <Phys::allocateContiguousPages(int)>:
c0009cc1:	57                   	push   edi
c0009cc2:	56                   	push   esi
c0009cc3:	53                   	push   ebx
c0009cc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009cc8:	fa                   	cli    
c0009cc9:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0009ccf:	31 db                	xor    ebx,ebx
c0009cd1:	85 db                	test   ebx,ebx
c0009cd3:	75 11                	jne    c0009ce6 <Phys::allocateContiguousPages(int)+0x25>
c0009cd5:	e8 fc fe ff ff       	call   c0009bd6 <Phys::allocatePage()>
c0009cda:	83 fe 01             	cmp    esi,0x1
c0009cdd:	89 c7                	mov    edi,eax
c0009cdf:	74 21                	je     c0009d02 <Phys::allocateContiguousPages(int)+0x41>
c0009ce1:	bb 01 00 00 00       	mov    ebx,0x1
c0009ce6:	e8 eb fe ff ff       	call   c0009bd6 <Phys::allocatePage()>
c0009ceb:	89 da                	mov    edx,ebx
c0009ced:	c1 e2 0c             	shl    edx,0xc
c0009cf0:	01 fa                	add    edx,edi
c0009cf2:	39 c2                	cmp    edx,eax
c0009cf4:	74 20                	je     c0009d16 <Phys::allocateContiguousPages(int)+0x55>
c0009cf6:	bb 01 00 00 00       	mov    ebx,0x1
c0009cfb:	89 c7                	mov    edi,eax
c0009cfd:	83 fe 01             	cmp    esi,0x1
c0009d00:	75 e4                	jne    c0009ce6 <Phys::allocateContiguousPages(int)+0x25>
c0009d02:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0009d07:	48                   	dec    eax
c0009d08:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0009d0d:	75 01                	jne    c0009d10 <Phys::allocateContiguousPages(int)+0x4f>
c0009d0f:	fb                   	sti    
c0009d10:	89 f8                	mov    eax,edi
c0009d12:	5b                   	pop    ebx
c0009d13:	5e                   	pop    esi
c0009d14:	5f                   	pop    edi
c0009d15:	c3                   	ret    
c0009d16:	43                   	inc    ebx
c0009d17:	39 f3                	cmp    ebx,esi
c0009d19:	75 b6                	jne    c0009cd1 <Phys::allocateContiguousPages(int)+0x10>
c0009d1b:	eb e5                	jmp    c0009d02 <Phys::allocateContiguousPages(int)+0x41>

c0009d1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009d1d:	56                   	push   esi
c0009d1e:	53                   	push   ebx
c0009d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d23:	39 1d ec 62 02 c0    	cmp    DWORD PTR ds:0xc00262ec,ebx
c0009d29:	73 06                	jae    c0009d31 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009d2b:	89 1d ec 62 02 c0    	mov    DWORD PTR ds:0xc00262ec,ebx
c0009d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d35:	c1 eb 0c             	shr    ebx,0xc
c0009d38:	c1 e8 0c             	shr    eax,0xc
c0009d3b:	39 d8                	cmp    eax,ebx
c0009d3d:	73 13                	jae    c0009d52 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009d3f:	6a 00                	push   0x0
c0009d41:	8d 70 01             	lea    esi,[eax+0x1]
c0009d44:	50                   	push   eax
c0009d45:	e8 bb fd ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009d4a:	5a                   	pop    edx
c0009d4b:	89 f0                	mov    eax,esi
c0009d4d:	59                   	pop    ecx
c0009d4e:	39 f3                	cmp    ebx,esi
c0009d50:	75 ed                	jne    c0009d3f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009d52:	5b                   	pop    ebx
c0009d53:	5e                   	pop    esi
c0009d54:	c3                   	ret    

c0009d55 <Phys::physicalMemorySetup(unsigned int)>:
c0009d55:	55                   	push   ebp
c0009d56:	57                   	push   edi
c0009d57:	56                   	push   esi
c0009d58:	53                   	push   ebx
c0009d59:	31 db                	xor    ebx,ebx
c0009d5b:	83 ec 40             	sub    esp,0x40
c0009d5e:	6a 10                	push   0x10
c0009d60:	6a 00                	push   0x0
c0009d62:	68 fc 62 02 c0       	push   0xc00262fc
c0009d67:	e8 3c 67 ff ff       	call   c00004a8 <memset>
c0009d6c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009d70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d75:	05 00 10 00 00       	add    eax,0x1000
c0009d7a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009d7e:	5a                   	pop    edx
c0009d7f:	59                   	pop    ecx
c0009d80:	50                   	push   eax
c0009d81:	68 2b 2b 02 c0       	push   0xc0022b2b
c0009d86:	e8 5a 29 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009d8b:	83 c4 10             	add    esp,0x10
c0009d8e:	83 ec 08             	sub    esp,0x8
c0009d91:	6a 01                	push   0x1
c0009d93:	53                   	push   ebx
c0009d94:	43                   	inc    ebx
c0009d95:	e8 6b fd ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009d9a:	83 c4 10             	add    esp,0x10
c0009d9d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009da3:	75 e9                	jne    c0009d8e <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009da5:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009dac:	66 85 c0             	test   ax,ax
c0009daf:	0f 84 8e 01 00 00    	je     c0009f43 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009db5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009db9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009dc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009dc5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009dca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009dce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009dd6:	eb 15                	jmp    c0009ded <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009dd8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009ddc:	83 c3 18             	add    ebx,0x18
c0009ddf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009de3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009de7:	0f 84 66 01 00 00    	je     c0009f53 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009ded:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009df0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009df3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009df6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dfe:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009e00:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009e03:	01 f0                	add    eax,esi
c0009e05:	55                   	push   ebp
c0009e06:	11 fa                	adc    edx,edi
c0009e08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009e10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009e14:	56                   	push   esi
c0009e15:	68 ec 2b 02 c0       	push   0xc0022bec
c0009e1a:	e8 c6 28 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009e1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e23:	83 c4 10             	add    esp,0x10
c0009e26:	09 f8                	or     eax,edi
c0009e28:	0f 85 25 01 00 00    	jne    c0009f53 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009e2e:	4d                   	dec    ebp
c0009e2f:	75 a7                	jne    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e31:	ba 00 00 08 00       	mov    edx,0x80000
c0009e36:	89 c1                	mov    ecx,eax
c0009e38:	39 f2                	cmp    edx,esi
c0009e3a:	19 f9                	sbb    ecx,edi
c0009e3c:	0f 82 a7 00 00 00    	jb     c0009ee9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e42:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0009e46:	89 c1                	mov    ecx,eax
c0009e48:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0009e4c:	0f 83 97 00 00 00    	jae    c0009ee9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e52:	ba 00 00 0a 00       	mov    edx,0xa0000
c0009e57:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e5f:	39 fa                	cmp    edx,edi
c0009e61:	19 e8                	sbb    eax,ebp
c0009e63:	0f 82 9a 01 00 00    	jb     c000a003 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0009e69:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e71:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0009e77:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009e7c:	83 d5 ff             	adc    ebp,0xffffffff
c0009e7f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0009e83:	31 c0                	xor    eax,eax
c0009e85:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0009e89:	39 fa                	cmp    edx,edi
c0009e8b:	89 c1                	mov    ecx,eax
c0009e8d:	19 e9                	sbb    ecx,ebp
c0009e8f:	0f 83 43 ff ff ff    	jae    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e95:	be 00 00 08 00       	mov    esi,0x80000
c0009e9a:	51                   	push   ecx
c0009e9b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009e9f:	57                   	push   edi
c0009ea0:	56                   	push   esi
c0009ea1:	68 10 2c 02 c0       	push   0xc0022c10
c0009ea6:	e8 3a 28 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009eab:	5d                   	pop    ebp
c0009eac:	58                   	pop    eax
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	e8 69 fe ff ff       	call   c0009d1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0009eb4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009eb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009ebc:	83 c4 0c             	add    esp,0xc
c0009ebf:	0f ac d0 0c          	shrd   eax,edx,0xc
c0009ec3:	03 05 f8 62 02 c0    	add    eax,DWORD PTR ds:0xc00262f8
c0009ec9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009ed0:	a3 f8 62 02 c0       	mov    ds:0xc00262f8,eax
c0009ed5:	52                   	push   edx
c0009ed6:	50                   	push   eax
c0009ed7:	68 51 2b 02 c0       	push   0xc0022b51
c0009edc:	e8 04 28 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	e9 ef fe ff ff       	jmp    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009ee9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009eed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009ef5:	39 ea                	cmp    edx,ebp
c0009ef7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0009efb:	0f 82 d7 fe ff ff    	jb     c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009f01:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009f06:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0009f0a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0009f0e:	0f 83 c4 fe ff ff    	jae    c0009dd8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009f14:	39 ee                	cmp    esi,ebp
c0009f16:	89 f8                	mov    eax,edi
c0009f18:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0009f1c:	0f 83 78 ff ff ff    	jae    c0009e9a <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f2a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f2e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f32:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	e9 57 ff ff ff       	jmp    c0009e9a <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009f43:	83 ec 0c             	sub    esp,0xc
c0009f46:	68 43 2b 02 c0       	push   0xc0022b43
c0009f4b:	e8 ff 8a 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0009f50:	83 c4 10             	add    esp,0x10
c0009f53:	83 ec 08             	sub    esp,0x8
c0009f56:	bb 60 00 00 00       	mov    ebx,0x60
c0009f5b:	6a 00                	push   0x0
c0009f5d:	6a 06                	push   0x6
c0009f5f:	e8 a1 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009f64:	58                   	pop    eax
c0009f65:	5a                   	pop    edx
c0009f66:	6a 00                	push   0x0
c0009f68:	6a 07                	push   0x7
c0009f6a:	e8 96 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009f6f:	83 05 f8 62 02 c0 02 	add    DWORD PTR ds:0xc00262f8,0x2
c0009f76:	83 c4 10             	add    esp,0x10
c0009f79:	83 ec 08             	sub    esp,0x8
c0009f7c:	6a 00                	push   0x0
c0009f7e:	53                   	push   ebx
c0009f7f:	43                   	inc    ebx
c0009f80:	e8 80 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009f85:	83 c4 10             	add    esp,0x10
c0009f88:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0009f8e:	75 e9                	jne    c0009f79 <Phys::physicalMemorySetup(unsigned int)+0x224>
c0009f90:	a1 f8 62 02 c0       	mov    eax,ds:0xc00262f8
c0009f95:	bb 40 01 00 00       	mov    ebx,0x140
c0009f9a:	83 c0 20             	add    eax,0x20
c0009f9d:	a3 f8 62 02 c0       	mov    ds:0xc00262f8,eax
c0009fa2:	eb 22                	jmp    c0009fc6 <Phys::physicalMemorySetup(unsigned int)+0x271>
c0009fa4:	83 ec 08             	sub    esp,0x8
c0009fa7:	6a 00                	push   0x0
c0009fa9:	53                   	push   ebx
c0009faa:	43                   	inc    ebx
c0009fab:	e8 55 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009fb0:	a1 f8 62 02 c0       	mov    eax,ds:0xc00262f8
c0009fb5:	83 c4 10             	add    esp,0x10
c0009fb8:	40                   	inc    eax
c0009fb9:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0009fbf:	a3 f8 62 02 c0       	mov    ds:0xc00262f8,eax
c0009fc4:	74 07                	je     c0009fcd <Phys::physicalMemorySetup(unsigned int)+0x278>
c0009fc6:	3d ff 03 00 00       	cmp    eax,0x3ff
c0009fcb:	7e d7                	jle    c0009fa4 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0009fcd:	bb d0 01 00 00       	mov    ebx,0x1d0
c0009fd2:	3d ff 07 00 00       	cmp    eax,0x7ff
c0009fd7:	7f 22                	jg     c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c0009fd9:	83 ec 08             	sub    esp,0x8
c0009fdc:	6a 00                	push   0x0
c0009fde:	53                   	push   ebx
c0009fdf:	43                   	inc    ebx
c0009fe0:	e8 20 fb ff ff       	call   c0009b05 <Phys::setPageState(unsigned long, bool)>
c0009fe5:	a1 f8 62 02 c0       	mov    eax,ds:0xc00262f8
c0009fea:	83 c4 10             	add    esp,0x10
c0009fed:	40                   	inc    eax
c0009fee:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0009ff4:	a3 f8 62 02 c0       	mov    ds:0xc00262f8,eax
c0009ff9:	75 d7                	jne    c0009fd2 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0009ffb:	83 c4 3c             	add    esp,0x3c
c0009ffe:	5b                   	pop    ebx
c0009fff:	5e                   	pop    esi
c000a000:	5f                   	pop    edi
c000a001:	5d                   	pop    ebp
c000a002:	c3                   	ret    
c000a003:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a00b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a013:	e9 51 fe ff ff       	jmp    c0009e69 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a018 <Pipe::isAtty()>:
c000a018:	31 c0                	xor    eax,eax
c000a01a:	c3                   	ret    
c000a01b:	90                   	nop

c000a01c <Pipe::~Pipe()>:
c000a01c:	83 ec 0c             	sub    esp,0xc
c000a01f:	ba 7c 2c 02 c0       	mov    edx,0xc0022c7c
c000a024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a028:	89 10                	mov    DWORD PTR [eax],edx
c000a02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a02e:	83 ec 0c             	sub    esp,0xc
c000a031:	50                   	push   eax
c000a032:	e8 f1 10 00 00       	call   c000b128 <UnixFile::~UnixFile()>
c000a037:	83 c4 10             	add    esp,0x10
c000a03a:	90                   	nop
c000a03b:	83 c4 0c             	add    esp,0xc
c000a03e:	c3                   	ret    
c000a03f:	90                   	nop

c000a040 <Pipe::~Pipe()>:
c000a040:	83 ec 0c             	sub    esp,0xc
c000a043:	83 ec 0c             	sub    esp,0xc
c000a046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04a:	e8 cd ff ff ff       	call   c000a01c <Pipe::~Pipe()>
c000a04f:	83 c4 10             	add    esp,0x10
c000a052:	83 ec 08             	sub    esp,0x8
c000a055:	6a 20                	push   0x20
c000a057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a05b:	e8 a4 25 00 00       	call   c000c604 <operator delete(void*, unsigned long)>
c000a060:	83 c4 10             	add    esp,0x10
c000a063:	83 c4 0c             	add    esp,0xc
c000a066:	c3                   	ret    
c000a067:	90                   	nop

c000a068 <Pipe::write(unsigned long long, void*, int*)>:
c000a068:	55                   	push   ebp
c000a069:	57                   	push   edi
c000a06a:	56                   	push   esi
c000a06b:	53                   	push   ebx
c000a06c:	83 ec 1c             	sub    esp,0x1c
c000a06f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a073:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a077:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a07a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a07e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a081:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a085:	89 d8                	mov    eax,ebx
c000a087:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a08a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a08e:	89 d6                	mov    esi,edx
c000a090:	89 d7                	mov    edi,edx
c000a092:	c1 ff 1f             	sar    edi,0x1f
c000a095:	03 34 24             	add    esi,DWORD PTR [esp]
c000a098:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a09c:	c1 f8 1f             	sar    eax,0x1f
c000a09f:	39 f3                	cmp    ebx,esi
c000a0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0a9:	19 f8                	sbb    eax,edi
c000a0ab:	b8 01 00 00 00       	mov    eax,0x1
c000a0b0:	72 6e                	jb     c000a120 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a0b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a0b5:	01 d0                	add    eax,edx
c000a0b7:	99                   	cdq    
c000a0b8:	f7 fb                	idiv   ebx
c000a0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0be:	29 d3                	sub    ebx,edx
c000a0c0:	89 d7                	mov    edi,edx
c000a0c2:	89 de                	mov    esi,ebx
c000a0c4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a0c7:	c1 fb 1f             	sar    ebx,0x1f
c000a0ca:	39 f2                	cmp    edx,esi
c000a0cc:	19 d8                	sbb    eax,ebx
c000a0ce:	b8 00 00 00 00       	mov    eax,0x0
c000a0d3:	72 04                	jb     c000a0d9 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a0d5:	89 d0                	mov    eax,edx
c000a0d7:	29 f0                	sub    eax,esi
c000a0d9:	89 d3                	mov    ebx,edx
c000a0db:	29 c3                	sub    ebx,eax
c000a0dd:	74 0b                	je     c000a0ea <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a0df:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a0e2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a0e6:	89 d9                	mov    ecx,ebx
c000a0e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0ea:	85 c0                	test   eax,eax
c000a0ec:	74 0d                	je     c000a0fb <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a0ee:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a0f2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a0f5:	89 de                	mov    esi,ebx
c000a0f7:	89 c1                	mov    ecx,eax
c000a0f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0fb:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a0fe:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a103:	75 10                	jne    c000a115 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a105:	83 ec 0c             	sub    esp,0xc
c000a108:	68 39 2c 02 c0       	push   0xc0022c39
c000a10d:	e8 3d 89 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000a112:	83 c4 10             	add    esp,0x10
c000a115:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a119:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a11c:	89 08                	mov    DWORD PTR [eax],ecx
c000a11e:	31 c0                	xor    eax,eax
c000a120:	83 c4 1c             	add    esp,0x1c
c000a123:	5b                   	pop    ebx
c000a124:	5e                   	pop    esi
c000a125:	5f                   	pop    edi
c000a126:	5d                   	pop    ebp
c000a127:	c3                   	ret    

c000a128 <Pipe::read(unsigned long long, void*, int*)>:
c000a128:	55                   	push   ebp
c000a129:	57                   	push   edi
c000a12a:	56                   	push   esi
c000a12b:	53                   	push   ebx
c000a12c:	83 ec 1c             	sub    esp,0x1c
c000a12f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a133:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a137:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a13b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13e:	89 c8                	mov    eax,ecx
c000a140:	99                   	cdq    
c000a141:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a145:	74 24                	je     c000a16b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a147:	39 f9                	cmp    ecx,edi
c000a149:	89 d1                	mov    ecx,edx
c000a14b:	19 f1                	sbb    ecx,esi
c000a14d:	73 1c                	jae    c000a16b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a14f:	fa                   	cli    
c000a150:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c000a156:	e8 29 be 00 00       	call   c0015f84 <schedule()>
c000a15b:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000a160:	48                   	dec    eax
c000a161:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000a166:	75 d3                	jne    c000a13b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a168:	fb                   	sti    
c000a169:	eb d0                	jmp    c000a13b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a16b:	39 f8                	cmp    eax,edi
c000a16d:	89 d1                	mov    ecx,edx
c000a16f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a172:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a176:	19 f1                	sbb    ecx,esi
c000a178:	73 07                	jae    c000a181 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a17a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a17d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a181:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a184:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a187:	29 f7                	sub    edi,esi
c000a189:	89 f8                	mov    eax,edi
c000a18b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a18f:	99                   	cdq    
c000a190:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a197:	19 d0                	sbb    eax,edx
c000a199:	73 07                	jae    c000a1a2 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a19b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a19e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1a2:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a1a5:	89 ea                	mov    edx,ebp
c000a1a7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a1ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a1b0:	74 0d                	je     c000a1bf <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a1b2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a1b5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a1b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a1bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1bf:	85 d2                	test   edx,edx
c000a1c1:	74 11                	je     c000a1d4 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a1c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1c7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a1ca:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a1ce:	89 d1                	mov    ecx,edx
c000a1d0:	89 c7                	mov    edi,eax
c000a1d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1d7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a1da:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a1dd:	99                   	cdq    
c000a1de:	89 f7                	mov    edi,esi
c000a1e0:	03 04 24             	add    eax,DWORD PTR [esp]
c000a1e3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a1e7:	c1 ff 1f             	sar    edi,0x1f
c000a1ea:	57                   	push   edi
c000a1eb:	56                   	push   esi
c000a1ec:	52                   	push   edx
c000a1ed:	50                   	push   eax
c000a1ee:	e8 4d 73 01 00       	call   c0021540 <__umoddi3>
c000a1f3:	83 c4 10             	add    esp,0x10
c000a1f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1f9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a1fe:	75 10                	jne    c000a210 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a200:	83 ec 0c             	sub    esp,0xc
c000a203:	68 56 2c 02 c0       	push   0xc0022c56
c000a208:	e8 42 88 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000a20d:	83 c4 10             	add    esp,0x10
c000a210:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a214:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a217:	89 10                	mov    DWORD PTR [eax],edx
c000a219:	83 c4 1c             	add    esp,0x1c
c000a21c:	31 c0                	xor    eax,eax
c000a21e:	5b                   	pop    ebx
c000a21f:	5e                   	pop    esi
c000a220:	5f                   	pop    edi
c000a221:	5d                   	pop    ebp
c000a222:	c3                   	ret    
c000a223:	90                   	nop

c000a224 <Pipe::Pipe(int)>:
c000a224:	83 ec 0c             	sub    esp,0xc
c000a227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a22b:	83 ec 08             	sub    esp,0x8
c000a22e:	6a 00                	push   0x0
c000a230:	50                   	push   eax
c000a231:	e8 10 0d 00 00       	call   c000af46 <UnixFile::UnixFile(int)>
c000a236:	83 c4 10             	add    esp,0x10
c000a239:	ba 7c 2c 02 c0       	mov    edx,0xc0022c7c
c000a23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a242:	89 10                	mov    DWORD PTR [eax],edx
c000a244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a248:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a24c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a253:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a265:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a269:	83 ec 0c             	sub    esp,0xc
c000a26c:	50                   	push   eax
c000a26d:	e8 25 f5 ff ff       	call   c0009797 <malloc>
c000a272:	83 c4 10             	add    esp,0x10
c000a275:	89 c2                	mov    edx,eax
c000a277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a282:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a286:	90                   	nop
c000a287:	83 c4 0c             	add    esp,0xc
c000a28a:	c3                   	ret    
c000a28b:	90                   	nop

c000a28c <VgaText::isAtty()>:
c000a28c:	b0 01                	mov    al,0x1
c000a28e:	c3                   	ret    
c000a28f:	90                   	nop

c000a290 <VgaText::~VgaText()>:
c000a290:	83 ec 0c             	sub    esp,0xc
c000a293:	ba 04 2d 02 c0       	mov    edx,0xc0022d04
c000a298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a29c:	89 10                	mov    DWORD PTR [eax],edx
c000a29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2a2:	83 ec 0c             	sub    esp,0xc
c000a2a5:	50                   	push   eax
c000a2a6:	e8 7d 0e 00 00       	call   c000b128 <UnixFile::~UnixFile()>
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	90                   	nop
c000a2af:	83 c4 0c             	add    esp,0xc
c000a2b2:	c3                   	ret    
c000a2b3:	90                   	nop

c000a2b4 <VgaText::~VgaText()>:
c000a2b4:	83 ec 0c             	sub    esp,0xc
c000a2b7:	83 ec 0c             	sub    esp,0xc
c000a2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2be:	e8 cd ff ff ff       	call   c000a290 <VgaText::~VgaText()>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	83 ec 08             	sub    esp,0x8
c000a2c9:	68 b4 01 00 00       	push   0x1b4
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	e8 2d 23 00 00       	call   c000c604 <operator delete(void*, unsigned long)>
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	83 c4 0c             	add    esp,0xc
c000a2dd:	c3                   	ret    

c000a2de <VgaText::read(unsigned long long, void*, int*)>:
c000a2de:	83 ec 10             	sub    esp,0x10
c000a2e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ed:	e8 cf 46 00 00       	call   c000e9c1 <readKeyboard(VgaText*, char*, unsigned long)>
c000a2f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a2f6:	89 02                	mov    DWORD PTR [edx],eax
c000a2f8:	31 c0                	xor    eax,eax
c000a2fa:	83 c4 1c             	add    esp,0x1c
c000a2fd:	c3                   	ret    

c000a2fe <setTerminalScrollLock(bool)>:
c000a2fe:	c3                   	ret    

c000a2ff <doTerminalCycle()>:
c000a2ff:	c3                   	ret    

c000a300 <addToTerminalCycle(VgaText*)>:
c000a300:	c3                   	ret    

c000a301 <scrollTerminalScrollLock(int)>:
c000a301:	c3                   	ret    

c000a302 <VgaText::updateTitle()>:
c000a302:	c3                   	ret    
c000a303:	90                   	nop

c000a304 <VgaText::load()>:
c000a304:	c3                   	ret    
c000a305:	90                   	nop

c000a306 <VgaText::updateCursor()>:
c000a306:	83 ec 14             	sub    esp,0x14
c000a309:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a310:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a313:	e8 fc fe 00 00       	call   c001a214 <Hal::consoleCursorUpdate(int, int)>
c000a318:	83 c4 1c             	add    esp,0x1c
c000a31b:	c3                   	ret    

c000a31c <VgaText::doANSI_SGR(int)>:
c000a31c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a324:	85 d2                	test   edx,edx
c000a326:	75 0b                	jne    c000a333 <VgaText::doANSI_SGR(int)+0x17>
c000a328:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a32b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a32e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a331:	eb 59                	jmp    c000a38c <VgaText::doANSI_SGR(int)+0x70>
c000a333:	83 fa 07             	cmp    edx,0x7
c000a336:	75 0b                	jne    c000a343 <VgaText::doANSI_SGR(int)+0x27>
c000a338:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a33b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a33e:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a341:	eb 49                	jmp    c000a38c <VgaText::doANSI_SGR(int)+0x70>
c000a343:	83 fa 1b             	cmp    edx,0x1b
c000a346:	74 e0                	je     c000a328 <VgaText::doANSI_SGR(int)+0xc>
c000a348:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a34b:	83 f9 07             	cmp    ecx,0x7
c000a34e:	77 09                	ja     c000a359 <VgaText::doANSI_SGR(int)+0x3d>
c000a350:	8b 14 8d 80 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda680]
c000a357:	eb 20                	jmp    c000a379 <VgaText::doANSI_SGR(int)+0x5d>
c000a359:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a35c:	83 f9 07             	cmp    ecx,0x7
c000a35f:	77 09                	ja     c000a36a <VgaText::doANSI_SGR(int)+0x4e>
c000a361:	8b 14 8d 80 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda680]
c000a368:	eb 22                	jmp    c000a38c <VgaText::doANSI_SGR(int)+0x70>
c000a36a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a36d:	83 f9 07             	cmp    ecx,0x7
c000a370:	77 0b                	ja     c000a37d <VgaText::doANSI_SGR(int)+0x61>
c000a372:	8b 14 95 38 58 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda7c8]
c000a379:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a37c:	c3                   	ret    
c000a37d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a380:	83 f9 07             	cmp    ecx,0x7
c000a383:	77 0a                	ja     c000a38f <VgaText::doANSI_SGR(int)+0x73>
c000a385:	8b 14 95 10 58 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda7f0]
c000a38c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a38f:	c3                   	ret    

c000a390 <VgaText::setDefaultBgColour(VgaColour)>:
c000a390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a394:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a398:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a39b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a39e:	c3                   	ret    
c000a39f:	90                   	nop

c000a3a0 <VgaText::setDefaultFgColour(VgaColour)>:
c000a3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3a8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a3ab:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a3ae:	c3                   	ret    
c000a3af:	90                   	nop

c000a3b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a3b0:	53                   	push   ebx
c000a3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a3b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a3bd:	51                   	push   ecx
c000a3be:	e8 cd ff ff ff       	call   c000a390 <VgaText::setDefaultBgColour(VgaColour)>
c000a3c3:	58                   	pop    eax
c000a3c4:	5a                   	pop    edx
c000a3c5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a3c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	eb d0                	jmp    c000a3a0 <VgaText::setDefaultFgColour(VgaColour)>

c000a3d0 <VgaText::setTitleTextColour(VgaColour)>:
c000a3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3d8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a3db:	c3                   	ret    

c000a3dc <VgaText::setTitleColour(VgaColour)>:
c000a3dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a3e7:	c3                   	ret    

c000a3e8 <VgaText::setTitle(char*)>:
c000a3e8:	81 44 24 04 82 00 00 00 	add    DWORD PTR [esp+0x4],0x82
c000a3f0:	e9 6f 61 ff ff       	jmp    c0000564 <strcpy>
c000a3f5:	90                   	nop

c000a3f6 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a3f6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a3fa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a3ff:	83 e0 0f             	and    eax,0xf
c000a402:	c1 e2 04             	shl    edx,0x4
c000a405:	09 d0                	or     eax,edx
c000a407:	c3                   	ret    

c000a408 <VgaText::scrollScreen()>:
c000a408:	55                   	push   ebp
c000a409:	b9 01 00 00 00       	mov    ecx,0x1
c000a40e:	57                   	push   edi
c000a40f:	56                   	push   esi
c000a410:	53                   	push   ebx
c000a411:	83 ec 0c             	sub    esp,0xc
c000a414:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a418:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a41e:	31 ff                	xor    edi,edi
c000a420:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a423:	83 f9 18             	cmp    ecx,0x18
c000a426:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a429:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a430:	75 27                	jne    c000a459 <VgaText::scrollScreen()+0x51>
c000a432:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a435:	01 f5                	add    ebp,esi
c000a437:	f7 c7 01 00 00 00    	test   edi,0x1
c000a43d:	74 16                	je     c000a455 <VgaText::scrollScreen()+0x4d>
c000a43f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a443:	50                   	push   eax
c000a444:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a448:	50                   	push   eax
c000a449:	e8 a8 ff ff ff       	call   c000a3f6 <VgaText::combineColours(unsigned char, unsigned char)>
c000a44e:	5a                   	pop    edx
c000a44f:	5a                   	pop    edx
c000a450:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a453:	eb 04                	jmp    c000a459 <VgaText::scrollScreen()+0x51>
c000a455:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a459:	47                   	inc    edi
c000a45a:	46                   	inc    esi
c000a45b:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a461:	75 bd                	jne    c000a420 <VgaText::scrollScreen()+0x18>
c000a463:	41                   	inc    ecx
c000a464:	83 f9 19             	cmp    ecx,0x19
c000a467:	75 af                	jne    c000a418 <VgaText::scrollScreen()+0x10>
c000a469:	39 1d 14 63 02 c0    	cmp    DWORD PTR ds:0xc0026314,ebx
c000a46f:	75 1f                	jne    c000a490 <VgaText::scrollScreen()+0x88>
c000a471:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a475:	74 05                	je     c000a47c <VgaText::scrollScreen()+0x74>
c000a477:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a47a:	eb 14                	jmp    c000a490 <VgaText::scrollScreen()+0x88>
c000a47c:	50                   	push   eax
c000a47d:	50                   	push   eax
c000a47e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a482:	50                   	push   eax
c000a483:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a487:	50                   	push   eax
c000a488:	e8 1b fc 00 00       	call   c001a0a8 <Hal::consoleScroll(int, int)>
c000a48d:	83 c4 10             	add    esp,0x10
c000a490:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a494:	83 c4 0c             	add    esp,0xc
c000a497:	5b                   	pop    ebx
c000a498:	5e                   	pop    esi
c000a499:	5f                   	pop    edi
c000a49a:	5d                   	pop    ebp
c000a49b:	e9 66 fe ff ff       	jmp    c000a306 <VgaText::updateCursor()>

c000a4a0 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a4a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a4a5:	c1 e0 08             	shl    eax,0x8
c000a4a8:	89 c2                	mov    edx,eax
c000a4aa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a4af:	09 d0                	or     eax,edx
c000a4b1:	c3                   	ret    

c000a4b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a4b2:	55                   	push   ebp
c000a4b3:	57                   	push   edi
c000a4b4:	56                   	push   esi
c000a4b5:	53                   	push   ebx
c000a4b6:	83 ec 1c             	sub    esp,0x1c
c000a4b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a4bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4c1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a4cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a4d1:	0f b6 c3             	movzx  eax,bl
c000a4d4:	50                   	push   eax
c000a4d5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000a4da:	50                   	push   eax
c000a4db:	e8 16 ff ff ff       	call   c000a3f6 <VgaText::combineColours(unsigned char, unsigned char)>
c000a4e0:	5a                   	pop    edx
c000a4e1:	0f b6 c0             	movzx  eax,al
c000a4e4:	59                   	pop    ecx
c000a4e5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000a4ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a4ee:	50                   	push   eax
c000a4ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a4f3:	e8 a8 ff ff ff       	call   c000a4a0 <VgaText::combineCharAndColour(char, unsigned char)>
c000a4f8:	5a                   	pop    edx
c000a4f9:	66 6b d7 50          	imul   dx,di,0x50
c000a4fd:	59                   	pop    ecx
c000a4fe:	01 f2                	add    edx,esi
c000a500:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a503:	0f b7 d2             	movzx  edx,dx
c000a506:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000a50a:	39 2d 14 63 02 c0    	cmp    DWORD PTR ds:0xc0026314,ebp
c000a510:	75 28                	jne    c000a53a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000a512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a516:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000a51a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000a51e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000a522:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a52a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a52e:	83 c4 1c             	add    esp,0x1c
c000a531:	5b                   	pop    ebx
c000a532:	5e                   	pop    esi
c000a533:	5f                   	pop    edi
c000a534:	5d                   	pop    ebp
c000a535:	e9 76 fc 00 00       	jmp    c001a1b0 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000a53a:	83 c4 1c             	add    esp,0x1c
c000a53d:	5b                   	pop    ebx
c000a53e:	5e                   	pop    esi
c000a53f:	5f                   	pop    edi
c000a540:	5d                   	pop    ebp
c000a541:	c3                   	ret    

c000a542 <VgaText::getCursorX()>:
c000a542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a546:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a549:	c3                   	ret    

c000a54a <VgaText::getCursorY()>:
c000a54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a54e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a551:	c3                   	ret    

c000a552 <VgaText::setCursor(int, int)>:
c000a552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a556:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a55a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a55d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a561:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a564:	e9 9d fd ff ff       	jmp    c000a306 <VgaText::updateCursor()>

c000a569 <setActiveTerminal(VgaText*)>:
c000a569:	53                   	push   ebx
c000a56a:	83 ec 08             	sub    esp,0x8
c000a56d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a571:	85 db                	test   ebx,ebx
c000a573:	75 11                	jne    c000a586 <setActiveTerminal(VgaText*)+0x1d>
c000a575:	c7 44 24 10 90 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022c90
c000a57d:	83 c4 08             	add    esp,0x8
c000a580:	5b                   	pop    ebx
c000a581:	e9 c9 84 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>
c000a586:	a1 14 63 02 c0       	mov    eax,ds:0xc0026314
c000a58b:	85 c0                	test   eax,eax
c000a58d:	74 0c                	je     c000a59b <setActiveTerminal(VgaText*)+0x32>
c000a58f:	83 ec 0c             	sub    esp,0xc
c000a592:	50                   	push   eax
c000a593:	e8 6e fd ff ff       	call   c000a306 <VgaText::updateCursor()>
c000a598:	83 c4 10             	add    esp,0x10
c000a59b:	89 1d 14 63 02 c0    	mov    DWORD PTR ds:0xc0026314,ebx
c000a5a1:	50                   	push   eax
c000a5a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a5a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a5a8:	53                   	push   ebx
c000a5a9:	e8 a4 ff ff ff       	call   c000a552 <VgaText::setCursor(int, int)>
c000a5ae:	83 c4 18             	add    esp,0x18
c000a5b1:	5b                   	pop    ebx
c000a5b2:	c3                   	ret    
c000a5b3:	90                   	nop

c000a5b4 <VgaText::clearScreen()>:
c000a5b4:	57                   	push   edi
c000a5b5:	56                   	push   esi
c000a5b6:	31 f6                	xor    esi,esi
c000a5b8:	53                   	push   ebx
c000a5b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5bd:	52                   	push   edx
c000a5be:	6a 00                	push   0x0
c000a5c0:	6a 00                	push   0x0
c000a5c2:	53                   	push   ebx
c000a5c3:	e8 8a ff ff ff       	call   c000a552 <VgaText::setCursor(int, int)>
c000a5c8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a5cf:	83 c4 10             	add    esp,0x10
c000a5d2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000a5d5:	7e 20                	jle    c000a5f7 <VgaText::clearScreen()+0x43>
c000a5d7:	31 ff                	xor    edi,edi
c000a5d9:	50                   	push   eax
c000a5da:	50                   	push   eax
c000a5db:	56                   	push   esi
c000a5dc:	57                   	push   edi
c000a5dd:	47                   	inc    edi
c000a5de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a5e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a5e4:	6a 20                	push   0x20
c000a5e6:	53                   	push   ebx
c000a5e7:	e8 c6 fe ff ff       	call   c000a4b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a5ec:	83 c4 20             	add    esp,0x20
c000a5ef:	83 ff 50             	cmp    edi,0x50
c000a5f2:	75 e5                	jne    c000a5d9 <VgaText::clearScreen()+0x25>
c000a5f4:	46                   	inc    esi
c000a5f5:	eb db                	jmp    c000a5d2 <VgaText::clearScreen()+0x1e>
c000a5f7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000a5fe:	5b                   	pop    ebx
c000a5ff:	5e                   	pop    esi
c000a600:	5f                   	pop    edi
c000a601:	c3                   	ret    

c000a602 <VgaText::setCursorX(int)>:
c000a602:	83 ec 10             	sub    esp,0x10
c000a605:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a609:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a610:	50                   	push   eax
c000a611:	e8 3c ff ff ff       	call   c000a552 <VgaText::setCursor(int, int)>
c000a616:	83 c4 1c             	add    esp,0x1c
c000a619:	c3                   	ret    

c000a61a <VgaText::setCursorY(int)>:
c000a61a:	83 ec 10             	sub    esp,0x10
c000a61d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a621:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a625:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a628:	50                   	push   eax
c000a629:	e8 24 ff ff ff       	call   c000a552 <VgaText::setCursor(int, int)>
c000a62e:	83 c4 1c             	add    esp,0x1c
c000a631:	c3                   	ret    

c000a632 <VgaText::incrementCursor(bool)>:
c000a632:	56                   	push   esi
c000a633:	53                   	push   ebx
c000a634:	51                   	push   ecx
c000a635:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a639:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a63d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a640:	40                   	inc    eax
c000a641:	83 f8 50             	cmp    eax,0x50
c000a644:	74 05                	je     c000a64b <VgaText::incrementCursor(bool)+0x19>
c000a646:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a649:	eb 24                	jmp    c000a66f <VgaText::incrementCursor(bool)+0x3d>
c000a64b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a64e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a655:	8d 50 01             	lea    edx,[eax+0x1]
c000a658:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a65b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a65e:	75 0f                	jne    c000a66f <VgaText::incrementCursor(bool)+0x3d>
c000a660:	83 ec 0c             	sub    esp,0xc
c000a663:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a666:	53                   	push   ebx
c000a667:	e8 9c fd ff ff       	call   c000a408 <VgaText::scrollScreen()>
c000a66c:	83 c4 10             	add    esp,0x10
c000a66f:	89 f0                	mov    eax,esi
c000a671:	84 c0                	test   al,al
c000a673:	74 0c                	je     c000a681 <VgaText::incrementCursor(bool)+0x4f>
c000a675:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a679:	5a                   	pop    edx
c000a67a:	5b                   	pop    ebx
c000a67b:	5e                   	pop    esi
c000a67c:	e9 85 fc ff ff       	jmp    c000a306 <VgaText::updateCursor()>
c000a681:	58                   	pop    eax
c000a682:	5b                   	pop    ebx
c000a683:	5e                   	pop    esi
c000a684:	c3                   	ret    
c000a685:	90                   	nop

c000a686 <VgaText::decrementCursor(bool)>:
c000a686:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a68a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a68e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a691:	85 c0                	test   eax,eax
c000a693:	74 04                	je     c000a699 <VgaText::decrementCursor(bool)+0x13>
c000a695:	48                   	dec    eax
c000a696:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a699:	84 c9                	test   cl,cl
c000a69b:	74 09                	je     c000a6a6 <VgaText::decrementCursor(bool)+0x20>
c000a69d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6a1:	e9 60 fc ff ff       	jmp    c000a306 <VgaText::updateCursor()>
c000a6a6:	c3                   	ret    
c000a6a7:	90                   	nop

c000a6a8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a6a8:	53                   	push   ebx
c000a6a9:	83 ec 08             	sub    esp,0x8
c000a6ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a6b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a6b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a6bc:	3c 07                	cmp    al,0x7
c000a6be:	75 21                	jne    c000a6e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000a6c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a6c8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000a6d0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000a6d8:	83 c4 08             	add    esp,0x8
c000a6db:	5b                   	pop    ebx
c000a6dc:	e9 9e 2e 00 00       	jmp    c000d57f <Krnl::beep(int, int, bool)>
c000a6e1:	3c 0d                	cmp    al,0xd
c000a6e3:	75 09                	jne    c000a6ee <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000a6e5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6ec:	eb 2c                	jmp    c000a71a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000a6ee:	3c 0a                	cmp    al,0xa
c000a6f0:	75 31                	jne    c000a723 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a6f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a6f5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6fc:	8d 50 01             	lea    edx,[eax+0x1]
c000a6ff:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a702:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a705:	75 0f                	jne    c000a716 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a70d:	53                   	push   ebx
c000a70e:	e8 f5 fc ff ff       	call   c000a408 <VgaText::scrollScreen()>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a71a:	83 c4 08             	add    esp,0x8
c000a71d:	5b                   	pop    ebx
c000a71e:	e9 e3 fb ff ff       	jmp    c000a306 <VgaText::updateCursor()>
c000a723:	3c 08                	cmp    al,0x8
c000a725:	75 25                	jne    c000a74c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000a727:	50                   	push   eax
c000a728:	50                   	push   eax
c000a729:	6a 01                	push   0x1
c000a72b:	53                   	push   ebx
c000a72c:	e8 55 ff ff ff       	call   c000a686 <VgaText::decrementCursor(bool)>
c000a731:	5a                   	pop    edx
c000a732:	59                   	pop    ecx
c000a733:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a736:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a739:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a73c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a73f:	6a 20                	push   0x20
c000a741:	53                   	push   ebx
c000a742:	e8 6b fd ff ff       	call   c000a4b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a747:	83 c4 28             	add    esp,0x28
c000a74a:	5b                   	pop    ebx
c000a74b:	c3                   	ret    
c000a74c:	83 ec 08             	sub    esp,0x8
c000a74f:	0f be c0             	movsx  eax,al
c000a752:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a755:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a758:	51                   	push   ecx
c000a759:	52                   	push   edx
c000a75a:	50                   	push   eax
c000a75b:	53                   	push   ebx
c000a75c:	e8 51 fd ff ff       	call   c000a4b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a761:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a765:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a76d:	83 c4 28             	add    esp,0x28
c000a770:	5b                   	pop    ebx
c000a771:	e9 bc fe ff ff       	jmp    c000a632 <VgaText::incrementCursor(bool)>

c000a776 <VgaText::putchar(char)>:
c000a776:	56                   	push   esi
c000a777:	53                   	push   ebx
c000a778:	83 ec 14             	sub    esp,0x14
c000a77b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a77f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a783:	3c 5b                	cmp    al,0x5b
c000a785:	75 18                	jne    c000a79f <VgaText::putchar(char)+0x29>
c000a787:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000a78b:	74 1f                	je     c000a7ac <VgaText::putchar(char)+0x36>
c000a78d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000a793:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000a79a:	e9 bd 00 00 00       	jmp    c000a85c <VgaText::putchar(char)+0xe6>
c000a79f:	3c 1b                	cmp    al,0x1b
c000a7a1:	75 09                	jne    c000a7ac <VgaText::putchar(char)+0x36>
c000a7a3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000a7a7:	e9 b0 00 00 00       	jmp    c000a85c <VgaText::putchar(char)+0xe6>
c000a7ac:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000a7af:	84 c9                	test   cl,cl
c000a7b1:	0f 84 92 00 00 00    	je     c000a849 <VgaText::putchar(char)+0xd3>
c000a7b7:	8d 50 c0             	lea    edx,[eax-0x40]
c000a7ba:	80 fa 3e             	cmp    dl,0x3e
c000a7bd:	77 76                	ja     c000a835 <VgaText::putchar(char)+0xbf>
c000a7bf:	3c 6d                	cmp    al,0x6d
c000a7c1:	75 47                	jne    c000a80a <VgaText::putchar(char)+0x94>
c000a7c3:	31 f6                	xor    esi,esi
c000a7c5:	31 d2                	xor    edx,edx
c000a7c7:	31 c0                	xor    eax,eax
c000a7c9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000a7cc:	7e 2d                	jle    c000a7fb <VgaText::putchar(char)+0x85>
c000a7ce:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000a7d3:	80 fa 3b             	cmp    dl,0x3b
c000a7d6:	75 17                	jne    c000a7ef <VgaText::putchar(char)+0x79>
c000a7d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000a7dc:	50                   	push   eax
c000a7dd:	53                   	push   ebx
c000a7de:	e8 39 fb ff ff       	call   c000a31c <VgaText::doANSI_SGR(int)>
c000a7e3:	59                   	pop    ecx
c000a7e4:	31 d2                	xor    edx,edx
c000a7e6:	58                   	pop    eax
c000a7e7:	31 c0                	xor    eax,eax
c000a7e9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000a7ed:	eb 09                	jmp    c000a7f8 <VgaText::putchar(char)+0x82>
c000a7ef:	6b c0 0a             	imul   eax,eax,0xa
c000a7f2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000a7f6:	88 ca                	mov    dl,cl
c000a7f8:	46                   	inc    esi
c000a7f9:	eb ce                	jmp    c000a7c9 <VgaText::putchar(char)+0x53>
c000a7fb:	84 d2                	test   dl,dl
c000a7fd:	74 2e                	je     c000a82d <VgaText::putchar(char)+0xb7>
c000a7ff:	50                   	push   eax
c000a800:	53                   	push   ebx
c000a801:	e8 16 fb ff ff       	call   c000a31c <VgaText::doANSI_SGR(int)>
c000a806:	58                   	pop    eax
c000a807:	5a                   	pop    edx
c000a808:	eb 23                	jmp    c000a82d <VgaText::putchar(char)+0xb7>
c000a80a:	3c 4a                	cmp    al,0x4a
c000a80c:	75 1f                	jne    c000a82d <VgaText::putchar(char)+0xb7>
c000a80e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000a812:	75 19                	jne    c000a82d <VgaText::putchar(char)+0xb7>
c000a814:	83 ec 0c             	sub    esp,0xc
c000a817:	53                   	push   ebx
c000a818:	e8 97 fd ff ff       	call   c000a5b4 <VgaText::clearScreen()>
c000a81d:	83 c4 0c             	add    esp,0xc
c000a820:	6a 00                	push   0x0
c000a822:	6a 00                	push   0x0
c000a824:	53                   	push   ebx
c000a825:	e8 28 fd ff ff       	call   c000a552 <VgaText::setCursor(int, int)>
c000a82a:	83 c4 10             	add    esp,0x10
c000a82d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000a833:	eb 27                	jmp    c000a85c <VgaText::putchar(char)+0xe6>
c000a835:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000a838:	83 fa 0e             	cmp    edx,0xe
c000a83b:	7f 1f                	jg     c000a85c <VgaText::putchar(char)+0xe6>
c000a83d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a840:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000a843:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000a847:	eb 13                	jmp    c000a85c <VgaText::putchar(char)+0xe6>
c000a849:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a84c:	0f be c0             	movsx  eax,al
c000a84f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a852:	50                   	push   eax
c000a853:	53                   	push   ebx
c000a854:	e8 4f fe ff ff       	call   c000a6a8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 c4 14             	add    esp,0x14
c000a85f:	5b                   	pop    ebx
c000a860:	5e                   	pop    esi
c000a861:	c3                   	ret    

c000a862 <VgaText::putx(unsigned int)>:
c000a862:	57                   	push   edi
c000a863:	b9 11 00 00 00       	mov    ecx,0x11
c000a868:	56                   	push   esi
c000a869:	be 9e 2c 02 c0       	mov    esi,0xc0022c9e
c000a86e:	53                   	push   ebx
c000a86f:	83 ec 20             	sub    esp,0x20
c000a872:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a876:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000a87a:	fc                   	cld    
c000a87b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a87d:	be 08 00 00 00       	mov    esi,0x8
c000a882:	50                   	push   eax
c000a883:	50                   	push   eax
c000a884:	89 d8                	mov    eax,ebx
c000a886:	c1 e3 04             	shl    ebx,0x4
c000a889:	c1 e8 1c             	shr    eax,0x1c
c000a88c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000a891:	50                   	push   eax
c000a892:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a896:	e8 db fe ff ff       	call   c000a776 <VgaText::putchar(char)>
c000a89b:	83 c4 10             	add    esp,0x10
c000a89e:	4e                   	dec    esi
c000a89f:	75 e1                	jne    c000a882 <VgaText::putx(unsigned int)+0x20>
c000a8a1:	83 c4 20             	add    esp,0x20
c000a8a4:	5b                   	pop    ebx
c000a8a5:	5e                   	pop    esi
c000a8a6:	5f                   	pop    edi
c000a8a7:	c3                   	ret    

c000a8a8 <VgaText::puts(char const*)>:
c000a8a8:	53                   	push   ebx
c000a8a9:	83 ec 08             	sub    esp,0x8
c000a8ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a8b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b3:	84 c0                	test   al,al
c000a8b5:	74 12                	je     c000a8c9 <VgaText::puts(char const*)+0x21>
c000a8b7:	43                   	inc    ebx
c000a8b8:	51                   	push   ecx
c000a8b9:	51                   	push   ecx
c000a8ba:	50                   	push   eax
c000a8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8bf:	e8 b2 fe ff ff       	call   c000a776 <VgaText::putchar(char)>
c000a8c4:	83 c4 10             	add    esp,0x10
c000a8c7:	eb e7                	jmp    c000a8b0 <VgaText::puts(char const*)+0x8>
c000a8c9:	83 c4 08             	add    esp,0x8
c000a8cc:	5b                   	pop    ebx
c000a8cd:	c3                   	ret    

c000a8ce <VgaText::write(unsigned long long, void*, int*)>:
c000a8ce:	55                   	push   ebp
c000a8cf:	57                   	push   edi
c000a8d0:	56                   	push   esi
c000a8d1:	53                   	push   ebx
c000a8d2:	83 ec 0c             	sub    esp,0xc
c000a8d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a8d9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a8dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a8e1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000a8e8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000a8eb:	39 eb                	cmp    ebx,ebp
c000a8ed:	74 13                	je     c000a902 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000a8ef:	43                   	inc    ebx
c000a8f0:	50                   	push   eax
c000a8f1:	50                   	push   eax
c000a8f2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000a8f6:	50                   	push   eax
c000a8f7:	56                   	push   esi
c000a8f8:	e8 79 fe ff ff       	call   c000a776 <VgaText::putchar(char)>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	eb e9                	jmp    c000a8eb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000a902:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000a909:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a90d:	89 38                	mov    DWORD PTR [eax],edi
c000a90f:	83 c4 0c             	add    esp,0xc
c000a912:	31 c0                	xor    eax,eax
c000a914:	5b                   	pop    ebx
c000a915:	5e                   	pop    esi
c000a916:	5f                   	pop    edi
c000a917:	5d                   	pop    ebp
c000a918:	c3                   	ret    
c000a919:	90                   	nop

c000a91a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a91a:	55                   	push   ebp
c000a91b:	57                   	push   edi
c000a91c:	56                   	push   esi
c000a91d:	53                   	push   ebx
c000a91e:	83 ec 0c             	sub    esp,0xc
c000a921:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a925:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a92a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a931:	50                   	push   eax
c000a932:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a937:	50                   	push   eax
c000a938:	e8 b9 fa ff ff       	call   c000a3f6 <VgaText::combineColours(unsigned char, unsigned char)>
c000a93d:	5a                   	pop    edx
c000a93e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a943:	59                   	pop    ecx
c000a944:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a947:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a94b:	0f b7 f6             	movzx  esi,si
c000a94e:	0f b6 e8             	movzx  ebp,al
c000a951:	01 f6                	add    esi,esi
c000a953:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a956:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a959:	84 c0                	test   al,al
c000a95b:	0f 84 ef 00 00 00    	je     c000aa50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c000a961:	3c 0d                	cmp    al,0xd
c000a963:	75 0c                	jne    c000a971 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c000a965:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a96c:	e9 d9 00 00 00       	jmp    c000aa4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a971:	3c 0a                	cmp    al,0xa
c000a973:	75 45                	jne    c000a9ba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c000a975:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a978:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a97f:	8d 48 01             	lea    ecx,[eax+0x1]
c000a982:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a985:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a988:	75 0f                	jne    c000a999 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c000a98a:	83 ec 0c             	sub    esp,0xc
c000a98d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a990:	53                   	push   ebx
c000a991:	e8 72 fa ff ff       	call   c000a408 <VgaText::scrollScreen()>
c000a996:	83 c4 10             	add    esp,0x10
c000a999:	83 ec 0c             	sub    esp,0xc
c000a99c:	53                   	push   ebx
c000a99d:	e8 64 f9 ff ff       	call   c000a306 <VgaText::updateCursor()>
c000a9a2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9a7:	83 c4 10             	add    esp,0x10
c000a9aa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9ad:	0f b7 f6             	movzx  esi,si
c000a9b0:	01 f6                	add    esi,esi
c000a9b2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9b5:	e9 90 00 00 00       	jmp    c000aa4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a9ba:	3c 08                	cmp    al,0x8
c000a9bc:	75 35                	jne    c000a9f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c000a9be:	51                   	push   ecx
c000a9bf:	51                   	push   ecx
c000a9c0:	6a 01                	push   0x1
c000a9c2:	53                   	push   ebx
c000a9c3:	e8 be fc ff ff       	call   c000a686 <VgaText::decrementCursor(bool)>
c000a9c8:	5e                   	pop    esi
c000a9c9:	58                   	pop    eax
c000a9ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9d0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a9d3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a9d6:	6a 20                	push   0x20
c000a9d8:	53                   	push   ebx
c000a9d9:	e8 d4 fa ff ff       	call   c000a4b2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9de:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9e3:	83 c4 20             	add    esp,0x20
c000a9e6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9e9:	0f b7 f6             	movzx  esi,si
c000a9ec:	01 f6                	add    esi,esi
c000a9ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9f1:	eb 57                	jmp    c000aa4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a9f3:	52                   	push   edx
c000a9f4:	52                   	push   edx
c000a9f5:	55                   	push   ebp
c000a9f6:	50                   	push   eax
c000a9f7:	e8 a4 fa ff ff       	call   c000a4a0 <VgaText::combineCharAndColour(char, unsigned char)>
c000a9fc:	83 c4 10             	add    esp,0x10
c000a9ff:	66 89 06             	mov    WORD PTR [esi],ax
c000aa02:	39 1d 14 63 02 c0    	cmp    DWORD PTR ds:0xc0026314,ebx
c000aa08:	75 1d                	jne    c000aa27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c000aa0a:	83 ec 0c             	sub    esp,0xc
c000aa0d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa10:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa13:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000aa17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000aa1b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa1e:	50                   	push   eax
c000aa1f:	e8 8c f7 00 00       	call   c001a1b0 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000aa24:	83 c4 20             	add    esp,0x20
c000aa27:	83 c6 02             	add    esi,0x2
c000aa2a:	50                   	push   eax
c000aa2b:	50                   	push   eax
c000aa2c:	6a 00                	push   0x0
c000aa2e:	53                   	push   ebx
c000aa2f:	e8 fe fb ff ff       	call   c000a632 <VgaText::incrementCursor(bool)>
c000aa34:	83 c4 10             	add    esp,0x10
c000aa37:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aa3b:	75 0d                	jne    c000aa4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000aa3d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa42:	0f b7 f6             	movzx  esi,si
c000aa45:	01 f6                	add    esi,esi
c000aa47:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa4a:	47                   	inc    edi
c000aa4b:	e9 06 ff ff ff       	jmp    c000a956 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c000aa50:	83 ec 0c             	sub    esp,0xc
c000aa53:	53                   	push   ebx
c000aa54:	e8 ad f8 ff ff       	call   c000a306 <VgaText::updateCursor()>
c000aa59:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aa60:	83 c4 1c             	add    esp,0x1c
c000aa63:	5b                   	pop    ebx
c000aa64:	5e                   	pop    esi
c000aa65:	5f                   	pop    edi
c000aa66:	5d                   	pop    ebp
c000aa67:	c3                   	ret    

c000aa68 <VgaText::VgaText(char const*)>:
c000aa68:	56                   	push   esi
c000aa69:	53                   	push   ebx
c000aa6a:	83 ec 04             	sub    esp,0x4
c000aa6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa71:	83 ec 08             	sub    esp,0x8
c000aa74:	6a 00                	push   0x0
c000aa76:	50                   	push   eax
c000aa77:	e8 ca 04 00 00       	call   c000af46 <UnixFile::UnixFile(int)>
c000aa7c:	83 c4 10             	add    esp,0x10
c000aa7f:	ba 04 2d 02 c0       	mov    edx,0xc0022d04
c000aa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa88:	89 10                	mov    DWORD PTR [eax],edx
c000aa8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000aa95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa99:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000aaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000aaa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaac:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000aab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000aabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000aad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000aadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae0:	05 82 00 00 00       	add    eax,0x82
c000aae5:	83 ec 08             	sub    esp,0x8
c000aae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaec:	50                   	push   eax
c000aaed:	e8 72 5a ff ff       	call   c0000564 <strcpy>
c000aaf2:	83 c4 10             	add    esp,0x10
c000aaf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf9:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000ab00:	83 ec 0c             	sub    esp,0xc
c000ab03:	6a 01                	push   0x1
c000ab05:	e8 7f 08 00 00       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c000ab0a:	83 c4 10             	add    esp,0x10
c000ab0d:	89 c2                	mov    edx,eax
c000ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab16:	8b 1d b4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b4
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab23:	89 c6                	mov    esi,eax
c000ab25:	e8 ac f0 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000ab2a:	68 05 0c 00 00       	push   0xc05
c000ab2f:	56                   	push   esi
c000ab30:	50                   	push   eax
c000ab31:	53                   	push   ebx
c000ab32:	e8 bd 0e 00 00       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab41:	83 ec 04             	sub    esp,0x4
c000ab44:	68 a0 0f 00 00       	push   0xfa0
c000ab49:	6a 00                	push   0x0
c000ab4b:	50                   	push   eax
c000ab4c:	e8 57 59 ff ff       	call   c00004a8 <memset>
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	83 ec 04             	sub    esp,0x4
c000ab57:	6a 00                	push   0x0
c000ab59:	6a 07                	push   0x7
c000ab5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab5f:	e8 4c f8 ff ff       	call   c000a3b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ab64:	83 c4 10             	add    esp,0x10
c000ab67:	83 ec 04             	sub    esp,0x4
c000ab6a:	6a 00                	push   0x0
c000ab6c:	6a 00                	push   0x0
c000ab6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab72:	e8 db f9 ff ff       	call   c000a552 <VgaText::setCursor(int, int)>
c000ab77:	83 c4 10             	add    esp,0x10
c000ab7a:	83 ec 0c             	sub    esp,0xc
c000ab7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab81:	e8 2e fa ff ff       	call   c000a5b4 <VgaText::clearScreen()>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ab91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab95:	05 02 01 00 00       	add    eax,0x102
c000ab9a:	83 ec 04             	sub    esp,0x4
c000ab9d:	6a 30                	push   0x30
c000ab9f:	6a 00                	push   0x0
c000aba1:	50                   	push   eax
c000aba2:	e8 01 59 ff ff       	call   c00004a8 <memset>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abae:	05 32 01 00 00       	add    eax,0x132
c000abb3:	83 ec 04             	sub    esp,0x4
c000abb6:	68 80 00 00 00       	push   0x80
c000abbb:	6a 00                	push   0x0
c000abbd:	50                   	push   eax
c000abbe:	e8 e5 58 ff ff       	call   c00004a8 <memset>
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	90                   	nop
c000abc7:	83 c4 04             	add    esp,0x4
c000abca:	5b                   	pop    ebx
c000abcb:	5e                   	pop    esi
c000abcc:	c3                   	ret    
c000abcd:	90                   	nop

c000abce <VgaText::receiveKey(unsigned char)>:
c000abce:	57                   	push   edi
c000abcf:	56                   	push   esi
c000abd0:	53                   	push   ebx
c000abd1:	83 ec 10             	sub    esp,0x10
c000abd4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000abd8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000abdc:	84 db                	test   bl,bl
c000abde:	0f 84 ba 00 00 00    	je     c000ac9e <VgaText::receiveKey(unsigned char)+0xd0>
c000abe4:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000abea:	80 fb 08             	cmp    bl,0x8
c000abed:	75 2c                	jne    c000ac1b <VgaText::receiveKey(unsigned char)+0x4d>
c000abef:	83 ec 0c             	sub    esp,0xc
c000abf2:	57                   	push   edi
c000abf3:	e8 cc 58 ff ff       	call   c00004c4 <strlen>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	85 c0                	test   eax,eax
c000abfd:	74 41                	je     c000ac40 <VgaText::receiveKey(unsigned char)+0x72>
c000abff:	50                   	push   eax
c000ac00:	50                   	push   eax
c000ac01:	6a 08                	push   0x8
c000ac03:	56                   	push   esi
c000ac04:	e8 6d fb ff ff       	call   c000a776 <VgaText::putchar(char)>
c000ac09:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ac0c:	e8 b3 58 ff ff       	call   c00004c4 <strlen>
c000ac11:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000ac19:	eb 22                	jmp    c000ac3d <VgaText::receiveKey(unsigned char)+0x6f>
c000ac1b:	0f be c3             	movsx  eax,bl
c000ac1e:	52                   	push   edx
c000ac1f:	52                   	push   edx
c000ac20:	50                   	push   eax
c000ac21:	56                   	push   esi
c000ac22:	e8 4f fb ff ff       	call   c000a776 <VgaText::putchar(char)>
c000ac27:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ac2b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac30:	59                   	pop    ecx
c000ac31:	58                   	pop    eax
c000ac32:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ac36:	50                   	push   eax
c000ac37:	57                   	push   edi
c000ac38:	e8 67 5a ff ff       	call   c00006a4 <strcat>
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000ac47:	75 05                	jne    c000ac4e <VgaText::receiveKey(unsigned char)+0x80>
c000ac49:	80 fb 0a             	cmp    bl,0xa
c000ac4c:	75 50                	jne    c000ac9e <VgaText::receiveKey(unsigned char)+0xd0>
c000ac4e:	83 ec 0c             	sub    esp,0xc
c000ac51:	81 c6 32 01 00 00    	add    esi,0x132
c000ac57:	56                   	push   esi
c000ac58:	e8 67 58 ff ff       	call   c00004c4 <strlen>
c000ac5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ac60:	89 c3                	mov    ebx,eax
c000ac62:	e8 5d 58 ff ff       	call   c00004c4 <strlen>
c000ac67:	83 c4 10             	add    esp,0x10
c000ac6a:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000ac6e:	3d 80 00 00 00       	cmp    eax,0x80
c000ac73:	76 10                	jbe    c000ac85 <VgaText::receiveKey(unsigned char)+0xb7>
c000ac75:	83 ec 0c             	sub    esp,0xc
c000ac78:	68 af 2c 02 c0       	push   0xc0022caf
c000ac7d:	e8 cd 7d 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	50                   	push   eax
c000ac86:	50                   	push   eax
c000ac87:	57                   	push   edi
c000ac88:	56                   	push   esi
c000ac89:	e8 16 5a ff ff       	call   c00006a4 <strcat>
c000ac8e:	83 c4 0c             	add    esp,0xc
c000ac91:	6a 30                	push   0x30
c000ac93:	6a 00                	push   0x0
c000ac95:	57                   	push   edi
c000ac96:	e8 0d 58 ff ff       	call   c00004a8 <memset>
c000ac9b:	83 c4 10             	add    esp,0x10
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	5b                   	pop    ebx
c000aca2:	5e                   	pop    esi
c000aca3:	5f                   	pop    edi
c000aca4:	c3                   	ret    
c000aca5:	90                   	nop

c000aca6 <VgaText::doUpdate()>:
c000aca6:	c3                   	ret    

c000aca7 <newTerminal(char*)>:
c000aca7:	83 ec 28             	sub    esp,0x28
c000acaa:	68 b4 01 00 00       	push   0x1b4
c000acaf:	e8 e3 ea ff ff       	call   c0009797 <malloc>
c000acb4:	5a                   	pop    edx
c000acb5:	59                   	pop    ecx
c000acb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000acba:	50                   	push   eax
c000acbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000acbf:	e8 a4 fd ff ff       	call   c000aa68 <VgaText::VgaText(char const*)>
c000acc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000acc8:	83 c4 2c             	add    esp,0x2c
c000accb:	c3                   	ret    

c000accc <TSS::TSS()>:
c000accc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000acd7:	90                   	nop
c000acd8:	c3                   	ret    
c000acd9:	90                   	nop
c000acda:	66 90                	xchg   ax,ax

c000acdc <TSS::setESP(unsigned long)>:
c000acdc:	55                   	push   ebp
c000acdd:	89 e5                	mov    ebp,esp
c000acdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ace2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ace5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ace8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000aceb:	90                   	nop
c000acec:	5d                   	pop    ebp
c000aced:	c3                   	ret    
c000acee:	66 90                	xchg   ax,ax

c000acf0 <TSS::flush()>:
c000acf0:	55                   	push   ebp
c000acf1:	89 e5                	mov    ebp,esp
c000acf3:	83 ec 10             	sub    esp,0x10
c000acf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000acfb:	83 c8 03             	or     eax,0x3
c000acfe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000ad02:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000ad06:	66 89 d0             	mov    ax,dx
c000ad09:	0f 00 d8             	ltr    ax
c000ad0c:	90                   	nop
c000ad0d:	c9                   	leave  
c000ad0e:	c3                   	ret    
c000ad0f:	90                   	nop

c000ad10 <TSS::setup(unsigned long, unsigned long)>:
c000ad10:	55                   	push   ebp
c000ad11:	89 e5                	mov    ebp,esp
c000ad13:	83 ec 18             	sub    esp,0x18
c000ad16:	83 ec 0c             	sub    esp,0xc
c000ad19:	6a 68                	push   0x68
c000ad1b:	e8 77 ea ff ff       	call   c0009797 <malloc>
c000ad20:	83 c4 10             	add    esp,0x10
c000ad23:	89 c2                	mov    edx,eax
c000ad25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad31:	83 ec 04             	sub    esp,0x4
c000ad34:	6a 68                	push   0x68
c000ad36:	6a 00                	push   0x0
c000ad38:	50                   	push   eax
c000ad39:	e8 6a 57 ff ff       	call   c00004a8 <memset>
c000ad3e:	83 c4 10             	add    esp,0x10
c000ad41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad47:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000ad4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad53:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000ad59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ad62:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad6b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000ad71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad77:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000ad7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad83:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000ad89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad8f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000ad95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad9b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000ada1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ada4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ada7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000adad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adb3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000adb6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000adb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000adc2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000adc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adcb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000add2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000add5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000add8:	0f 20 da             	mov    edx,cr3
c000addb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000adde:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000ade1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000ade4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ade7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adea:	83 ec 08             	sub    esp,0x8
c000aded:	50                   	push   eax
c000adee:	8d 45 ec             	lea    eax,[ebp-0x14]
c000adf1:	50                   	push   eax
c000adf2:	e8 d9 e1 ff ff       	call   c0008fd0 <GDTEntry::setBase(unsigned int)>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	83 ec 08             	sub    esp,0x8
c000adfd:	6a 68                	push   0x68
c000adff:	8d 45 ec             	lea    eax,[ebp-0x14]
c000ae02:	50                   	push   eax
c000ae03:	e8 e4 e1 ff ff       	call   c0008fec <GDTEntry::setLimit(unsigned int)>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000ae0f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ae12:	83 e0 0f             	and    eax,0xf
c000ae15:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ae18:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000ae1b:	83 c8 40             	or     eax,0x40
c000ae1e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000ae21:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000ae26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae2c:	05 78 01 00 00       	add    eax,0x178
c000ae31:	83 ec 04             	sub    esp,0x4
c000ae34:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ae37:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000ae3a:	50                   	push   eax
c000ae3b:	e8 e0 e1 ff ff       	call   c0009020 <GDT::addEntry(GDTEntry)>
c000ae40:	83 c4 10             	add    esp,0x10
c000ae43:	89 c2                	mov    edx,eax
c000ae45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae48:	89 10                	mov    DWORD PTR [eax],edx
c000ae4a:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000ae4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae55:	05 78 01 00 00       	add    eax,0x178
c000ae5a:	83 ec 0c             	sub    esp,0xc
c000ae5d:	50                   	push   eax
c000ae5e:	e8 e7 e1 ff ff       	call   c000904a <GDT::flush()>
c000ae63:	83 c4 10             	add    esp,0x10
c000ae66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae69:	8b 00                	mov    eax,DWORD PTR [eax]
c000ae6b:	c9                   	leave  
c000ae6c:	c3                   	ret    
c000ae6d:	90                   	nop

c000ae6e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000ae6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ae76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae79:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000ae7e:	75 08                	jne    c000ae88 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000ae80:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000ae86:	eb 38                	jmp    c000aec0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000ae88:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000ae8d:	75 17                	jne    c000aea6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000ae8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ae94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ae97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000ae9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aea3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000aea6:	89 c1                	mov    ecx,eax
c000aea8:	83 e1 fd             	and    ecx,0xfffffffd
c000aeab:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000aeb1:	74 cd                	je     c000ae80 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000aeb3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000aeb8:	83 e0 ef             	and    eax,0xffffffef
c000aebb:	83 f8 08             	cmp    eax,0x8
c000aebe:	76 c0                	jbe    c000ae80 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000aec0:	31 c0                	xor    eax,eax
c000aec2:	c3                   	ret    
c000aec3:	90                   	nop

c000aec4 <ReservedFilename::isAtty()>:
c000aec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aec8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000aecb:	31 c0                	xor    eax,eax
c000aecd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000aed3:	74 09                	je     c000aede <ReservedFilename::isAtty()+0x1a>
c000aed5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000aedb:	0f 94 c0             	sete   al
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000aee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aee4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aeeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aeef:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000aef4:	75 08                	jne    c000aefe <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000aef6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000aefc:	eb 3d                	jmp    c000af3b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000aefe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000af03:	75 17                	jne    c000af1c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000af05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000af0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000af0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000af13:	8b 10                	mov    edx,DWORD PTR [eax]
c000af15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af19:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000af1c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000af21:	75 04                	jne    c000af27 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000af23:	89 0a                	mov    DWORD PTR [edx],ecx
c000af25:	eb 14                	jmp    c000af3b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000af27:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000af2c:	74 c8                	je     c000aef6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af2e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000af33:	83 e0 ef             	and    eax,0xffffffef
c000af36:	83 f8 08             	cmp    eax,0x8
c000af39:	76 bb                	jbe    c000aef6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af3b:	31 c0                	xor    eax,eax
c000af3d:	c3                   	ret    

c000af3e <UnixFile::getFileDescriptor()>:
c000af3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000af45:	c3                   	ret    

c000af46 <UnixFile::UnixFile(int)>:
c000af46:	53                   	push   ebx
c000af47:	83 ec 28             	sub    esp,0x28
c000af4a:	ba cc 2d 02 c0       	mov    edx,0xc0022dcc
c000af4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af53:	89 10                	mov    DWORD PTR [eax],edx
c000af55:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000af5d:	0f 8f 8c 01 00 00    	jg     c000b0ef <UnixFile::UnixFile(int)+0x1a9>
c000af63:	a1 c0 59 02 c0       	mov    eax,ds:0xc00259c0
c000af68:	8d 50 01             	lea    edx,[eax+0x1]
c000af6b:	89 15 c0 59 02 c0    	mov    DWORD PTR ds:0xc00259c0,edx
c000af71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000af75:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000af78:	83 ec 08             	sub    esp,0x8
c000af7b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af7f:	68 98 63 02 c0       	push   0xc0026398
c000af84:	e8 9f 67 01 00       	call   c0021728 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000af89:	83 c4 10             	add    esp,0x10
c000af8c:	a0 94 63 02 c0       	mov    al,ds:0xc0026394
c000af91:	83 f0 01             	xor    eax,0x1
c000af94:	84 c0                	test   al,al
c000af96:	0f 84 54 01 00 00    	je     c000b0f0 <UnixFile::UnixFile(int)+0x1aa>
c000af9c:	c6 05 94 63 02 c0 01 	mov    BYTE PTR ds:0xc0026394,0x1
c000afa3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000afab:	83 ec 0c             	sub    esp,0xc
c000afae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afb2:	e8 e0 e7 ff ff       	call   c0009797 <malloc>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 c3                	mov    ebx,eax
c000afbc:	83 ec 08             	sub    esp,0x8
c000afbf:	68 03 ff ff 0f       	push   0xfffff03
c000afc4:	53                   	push   ebx
c000afc5:	e8 2c 01 00 00       	call   c000b0f6 <ReservedFilename::ReservedFilename(int)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	89 1d 8c 63 02 c0    	mov    DWORD PTR ds:0xc002638c,ebx
c000afd3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	e8 b0 e7 ff ff       	call   c0009797 <malloc>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	89 c3                	mov    ebx,eax
c000afec:	83 ec 08             	sub    esp,0x8
c000afef:	68 01 ff ff 0f       	push   0xfffff01
c000aff4:	53                   	push   ebx
c000aff5:	e8 fc 00 00 00       	call   c000b0f6 <ReservedFilename::ReservedFilename(int)>
c000affa:	83 c4 10             	add    esp,0x10
c000affd:	89 1d 90 63 02 c0    	mov    DWORD PTR ds:0xc0026390,ebx
c000b003:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b00b:	83 ec 0c             	sub    esp,0xc
c000b00e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b012:	e8 80 e7 ff ff       	call   c0009797 <malloc>
c000b017:	83 c4 10             	add    esp,0x10
c000b01a:	89 c3                	mov    ebx,eax
c000b01c:	83 ec 08             	sub    esp,0x8
c000b01f:	68 00 ff ff 0f       	push   0xfffff00
c000b024:	53                   	push   ebx
c000b025:	e8 cc 00 00 00       	call   c000b0f6 <ReservedFilename::ReservedFilename(int)>
c000b02a:	83 c4 10             	add    esp,0x10
c000b02d:	89 1d 84 63 02 c0    	mov    DWORD PTR ds:0xc0026384,ebx
c000b033:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b042:	e8 50 e7 ff ff       	call   c0009797 <malloc>
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	89 c3                	mov    ebx,eax
c000b04c:	83 ec 08             	sub    esp,0x8
c000b04f:	68 02 ff ff 0f       	push   0xfffff02
c000b054:	53                   	push   ebx
c000b055:	e8 9c 00 00 00       	call   c000b0f6 <ReservedFilename::ReservedFilename(int)>
c000b05a:	83 c4 10             	add    esp,0x10
c000b05d:	89 1d 88 63 02 c0    	mov    DWORD PTR ds:0xc0026388,ebx
c000b063:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b06b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b070:	7f 7e                	jg     c000b0f0 <UnixFile::UnixFile(int)+0x1aa>
c000b072:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b081:	e8 11 e7 ff ff       	call   c0009797 <malloc>
c000b086:	83 c4 10             	add    esp,0x10
c000b089:	89 c3                	mov    ebx,eax
c000b08b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b08f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b094:	83 ec 08             	sub    esp,0x8
c000b097:	50                   	push   eax
c000b098:	53                   	push   ebx
c000b099:	e8 58 00 00 00       	call   c000b0f6 <ReservedFilename::ReservedFilename(int)>
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0a5:	89 1c 85 60 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ca0],ebx
c000b0ac:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	e8 d7 e6 ff ff       	call   c0009797 <malloc>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	89 c3                	mov    ebx,eax
c000b0c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0c9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b0ce:	83 ec 08             	sub    esp,0x8
c000b0d1:	50                   	push   eax
c000b0d2:	53                   	push   ebx
c000b0d3:	e8 1e 00 00 00       	call   c000b0f6 <ReservedFilename::ReservedFilename(int)>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0df:	89 1c 85 20 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ce0],ebx
c000b0e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b0ea:	e9 7c ff ff ff       	jmp    c000b06b <UnixFile::UnixFile(int)+0x125>
c000b0ef:	90                   	nop
c000b0f0:	83 c4 28             	add    esp,0x28
c000b0f3:	5b                   	pop    ebx
c000b0f4:	c3                   	ret    
c000b0f5:	90                   	nop

c000b0f6 <ReservedFilename::ReservedFilename(int)>:
c000b0f6:	83 ec 0c             	sub    esp,0xc
c000b0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fd:	83 ec 08             	sub    esp,0x8
c000b100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b104:	50                   	push   eax
c000b105:	e8 3c fe ff ff       	call   c000af46 <UnixFile::UnixFile(int)>
c000b10a:	83 c4 10             	add    esp,0x10
c000b10d:	ba e8 2d 02 c0       	mov    edx,0xc0022de8
c000b112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b116:	89 10                	mov    DWORD PTR [eax],edx
c000b118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b11c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b120:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b123:	90                   	nop
c000b124:	83 c4 0c             	add    esp,0xc
c000b127:	c3                   	ret    

c000b128 <UnixFile::~UnixFile()>:
c000b128:	83 ec 1c             	sub    esp,0x1c
c000b12b:	ba cc 2d 02 c0       	mov    edx,0xc0022dcc
c000b130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b134:	89 10                	mov    DWORD PTR [eax],edx
c000b136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b13a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b13d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b142:	7f 73                	jg     c000b1b7 <UnixFile::~UnixFile()+0x8f>
c000b144:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b14c:	83 ec 0c             	sub    esp,0xc
c000b14f:	68 98 63 02 c0       	push   0xc0026398
c000b154:	e8 a3 66 01 00       	call   c00217fc <LinkedList<UnixFile>::getFirstElement()>
c000b159:	83 c4 10             	add    esp,0x10
c000b15c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b160:	83 ec 0c             	sub    esp,0xc
c000b163:	68 98 63 02 c0       	push   0xc0026398
c000b168:	e8 97 66 01 00       	call   c0021804 <LinkedList<UnixFile>::removeFirst()>
c000b16d:	83 c4 10             	add    esp,0x10
c000b170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b174:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b178:	74 40                	je     c000b1ba <UnixFile::~UnixFile()+0x92>
c000b17a:	83 ec 08             	sub    esp,0x8
c000b17d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b181:	68 98 63 02 c0       	push   0xc0026398
c000b186:	e8 9d 65 01 00       	call   c0021728 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b192:	8d 50 01             	lea    edx,[eax+0x1]
c000b195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b199:	3d 88 13 00 00       	cmp    eax,0x1388
c000b19e:	0f 94 c0             	sete   al
c000b1a1:	84 c0                	test   al,al
c000b1a3:	74 a7                	je     c000b14c <UnixFile::~UnixFile()+0x24>
c000b1a5:	83 ec 0c             	sub    esp,0xc
c000b1a8:	68 a4 2d 02 c0       	push   0xc0022da4
c000b1ad:	e8 9d 78 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	eb 95                	jmp    c000b14c <UnixFile::~UnixFile()+0x24>
c000b1b7:	90                   	nop
c000b1b8:	eb 01                	jmp    c000b1bb <UnixFile::~UnixFile()+0x93>
c000b1ba:	90                   	nop
c000b1bb:	90                   	nop
c000b1bc:	83 c4 1c             	add    esp,0x1c
c000b1bf:	c3                   	ret    

c000b1c0 <UnixFile::~UnixFile()>:
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	83 ec 0c             	sub    esp,0xc
c000b1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1ca:	e8 59 ff ff ff       	call   c000b128 <UnixFile::~UnixFile()>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	83 ec 08             	sub    esp,0x8
c000b1d5:	6a 0c                	push   0xc
c000b1d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1db:	e8 24 14 00 00       	call   c000c604 <operator delete(void*, unsigned long)>
c000b1e0:	83 c4 10             	add    esp,0x10
c000b1e3:	83 c4 0c             	add    esp,0xc
c000b1e6:	c3                   	ret    
c000b1e7:	90                   	nop

c000b1e8 <ReservedFilename::~ReservedFilename()>:
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	ba e8 2d 02 c0       	mov    edx,0xc0022de8
c000b1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f4:	89 10                	mov    DWORD PTR [eax],edx
c000b1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fa:	83 ec 0c             	sub    esp,0xc
c000b1fd:	50                   	push   eax
c000b1fe:	e8 25 ff ff ff       	call   c000b128 <UnixFile::~UnixFile()>
c000b203:	83 c4 10             	add    esp,0x10
c000b206:	90                   	nop
c000b207:	83 c4 0c             	add    esp,0xc
c000b20a:	c3                   	ret    
c000b20b:	90                   	nop

c000b20c <ReservedFilename::~ReservedFilename()>:
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b216:	e8 cd ff ff ff       	call   c000b1e8 <ReservedFilename::~ReservedFilename()>
c000b21b:	83 c4 10             	add    esp,0x10
c000b21e:	83 ec 08             	sub    esp,0x8
c000b221:	6a 0c                	push   0xc
c000b223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b227:	e8 d8 13 00 00       	call   c000c604 <operator delete(void*, unsigned long)>
c000b22c:	83 c4 10             	add    esp,0x10
c000b22f:	83 c4 0c             	add    esp,0xc
c000b232:	c3                   	ret    

c000b233 <getFromFileDescriptor(int)>:
c000b233:	53                   	push   ebx
c000b234:	83 ec 08             	sub    esp,0x8
c000b237:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b23b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b241:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b247:	7f 2c                	jg     c000b275 <getFromFileDescriptor(int)+0x42>
c000b249:	83 ec 0c             	sub    esp,0xc
c000b24c:	68 98 63 02 c0       	push   0xc0026398
c000b251:	e8 a6 65 01 00       	call   c00217fc <LinkedList<UnixFile>::getFirstElement()>
c000b256:	83 c4 10             	add    esp,0x10
c000b259:	85 c0                	test   eax,eax
c000b25b:	75 04                	jne    c000b261 <getFromFileDescriptor(int)+0x2e>
c000b25d:	31 c0                	xor    eax,eax
c000b25f:	eb 6e                	jmp    c000b2cf <getFromFileDescriptor(int)+0x9c>
c000b261:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b264:	74 69                	je     c000b2cf <getFromFileDescriptor(int)+0x9c>
c000b266:	52                   	push   edx
c000b267:	52                   	push   edx
c000b268:	50                   	push   eax
c000b269:	68 98 63 02 c0       	push   0xc0026398
c000b26e:	e8 33 66 01 00       	call   c00218a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b273:	eb e1                	jmp    c000b256 <getFromFileDescriptor(int)+0x23>
c000b275:	a1 8c 63 02 c0       	mov    eax,ds:0xc002638c
c000b27a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b280:	74 4d                	je     c000b2cf <getFromFileDescriptor(int)+0x9c>
c000b282:	a1 90 63 02 c0       	mov    eax,ds:0xc0026390
c000b287:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b28d:	74 40                	je     c000b2cf <getFromFileDescriptor(int)+0x9c>
c000b28f:	a1 88 63 02 c0       	mov    eax,ds:0xc0026388
c000b294:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b29a:	74 33                	je     c000b2cf <getFromFileDescriptor(int)+0x9c>
c000b29c:	a1 84 63 02 c0       	mov    eax,ds:0xc0026384
c000b2a1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b2a7:	74 26                	je     c000b2cf <getFromFileDescriptor(int)+0x9c>
c000b2a9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b2af:	83 f8 08             	cmp    eax,0x8
c000b2b2:	77 09                	ja     c000b2bd <getFromFileDescriptor(int)+0x8a>
c000b2b4:	8b 04 85 60 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ca0]
c000b2bb:	eb 12                	jmp    c000b2cf <getFromFileDescriptor(int)+0x9c>
c000b2bd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b2c3:	83 fb 08             	cmp    ebx,0x8
c000b2c6:	77 95                	ja     c000b25d <getFromFileDescriptor(int)+0x2a>
c000b2c8:	8b 04 9d 20 63 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9ce0]
c000b2cf:	83 c4 08             	add    esp,0x8
c000b2d2:	5b                   	pop    ebx
c000b2d3:	c3                   	ret    

c000b2d4 <__static_initialization_and_destruction_0(int, int)>:
c000b2d4:	83 ec 0c             	sub    esp,0xc
c000b2d7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b2dc:	75 34                	jne    c000b312 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b2de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b2e6:	75 2a                	jne    c000b312 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	68 98 63 02 c0       	push   0xc0026398
c000b2f0:	e8 f1 63 01 00       	call   c00216e6 <LinkedList<UnixFile>::LinkedList()>
c000b2f5:	83 c4 10             	add    esp,0x10
c000b2f8:	83 ec 04             	sub    esp,0x4
c000b2fb:	68 dc 57 02 c0       	push   0xc00257dc
c000b300:	68 98 63 02 c0       	push   0xc0026398
c000b305:	68 e4 16 02 c0       	push   0xc00216e4
c000b30a:	e8 6f 12 00 00       	call   c000c57e <__cxa_atexit>
c000b30f:	83 c4 10             	add    esp,0x10
c000b312:	90                   	nop
c000b313:	83 c4 0c             	add    esp,0xc
c000b316:	c3                   	ret    

c000b317 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b317:	83 ec 0c             	sub    esp,0xc
c000b31a:	83 ec 08             	sub    esp,0x8
c000b31d:	68 ff ff 00 00       	push   0xffff
c000b322:	6a 01                	push   0x1
c000b324:	e8 ab ff ff ff       	call   c000b2d4 <__static_initialization_and_destruction_0(int, int)>
c000b329:	83 c4 10             	add    esp,0x10
c000b32c:	83 c4 0c             	add    esp,0xc
c000b32f:	c3                   	ret    

c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b330:	53                   	push   ebx
c000b331:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b335:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b339:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b33f:	89 c8                	mov    eax,ecx
c000b341:	d1 e8                	shr    eax,1
c000b343:	03 05 c8 59 02 c0    	add    eax,DWORD PTR ds:0xc00259c8
c000b349:	83 e1 01             	and    ecx,0x1
c000b34c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b34e:	75 09                	jne    c000b359 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b350:	83 e2 f0             	and    edx,0xfffffff0
c000b353:	09 da                	or     edx,ebx
c000b355:	88 10                	mov    BYTE PTR [eax],dl
c000b357:	5b                   	pop    ebx
c000b358:	c3                   	ret    
c000b359:	c1 e3 04             	shl    ebx,0x4
c000b35c:	83 e2 0f             	and    edx,0xf
c000b35f:	09 da                	or     edx,ebx
c000b361:	88 10                	mov    BYTE PTR [eax],dl
c000b363:	5b                   	pop    ebx
c000b364:	c3                   	ret    

c000b365 <Virt::getPageState(unsigned long)>:
c000b365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b369:	8b 0d c8 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259c8
c000b36f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b375:	89 d0                	mov    eax,edx
c000b377:	d1 e8                	shr    eax,1
c000b379:	83 e2 01             	and    edx,0x1
c000b37c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b37f:	75 04                	jne    c000b385 <Virt::getPageState(unsigned long)+0x20>
c000b381:	83 e0 0f             	and    eax,0xf
c000b384:	c3                   	ret    
c000b385:	c0 e8 04             	shr    al,0x4
c000b388:	c3                   	ret    

c000b389 <Virt::allocateKernelVirtualPages(int)>:
c000b389:	55                   	push   ebp
c000b38a:	31 ed                	xor    ebp,ebp
c000b38c:	57                   	push   edi
c000b38d:	56                   	push   esi
c000b38e:	53                   	push   ebx
c000b38f:	31 db                	xor    ebx,ebx
c000b391:	83 ec 1c             	sub    esp,0x1c
c000b394:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b398:	8b 3d c4 59 02 c0    	mov    edi,DWORD PTR ds:0xc00259c4
c000b39e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b3a3:	57                   	push   edi
c000b3a4:	e8 bc ff ff ff       	call   c000b365 <Virt::getPageState(unsigned long)>
c000b3a9:	5a                   	pop    edx
c000b3aa:	84 c0                	test   al,al
c000b3ac:	75 3a                	jne    c000b3e8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b3ae:	85 db                	test   ebx,ebx
c000b3b0:	75 02                	jne    c000b3b4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b3b2:	89 fd                	mov    ebp,edi
c000b3b4:	43                   	inc    ebx
c000b3b5:	39 f3                	cmp    ebx,esi
c000b3b7:	74 5a                	je     c000b413 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b3b9:	47                   	inc    edi
c000b3ba:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b3c0:	76 31                	jbe    c000b3f3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b3c2:	c7 05 c4 59 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00259c4,0xc8000
c000b3cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b3d1:	75 28                	jne    c000b3fb <Virt::allocateKernelVirtualPages(int)+0x72>
c000b3d3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b3d8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b3dd:	57                   	push   edi
c000b3de:	e8 82 ff ff ff       	call   c000b365 <Virt::getPageState(unsigned long)>
c000b3e3:	5a                   	pop    edx
c000b3e4:	84 c0                	test   al,al
c000b3e6:	74 c6                	je     c000b3ae <Virt::allocateKernelVirtualPages(int)+0x25>
c000b3e8:	31 db                	xor    ebx,ebx
c000b3ea:	47                   	inc    edi
c000b3eb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b3f1:	77 cf                	ja     c000b3c2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b3f3:	89 3d c4 59 02 c0    	mov    DWORD PTR ds:0xc00259c4,edi
c000b3f9:	eb a8                	jmp    c000b3a3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	68 fc 2d 02 c0       	push   0xc0022dfc
c000b403:	e8 47 76 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000b408:	8b 3d c4 59 02 c0    	mov    edi,DWORD PTR ds:0xc00259c4
c000b40e:	83 c4 10             	add    esp,0x10
c000b411:	eb 90                	jmp    c000b3a3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b413:	89 2d c4 59 02 c0    	mov    DWORD PTR ds:0xc00259c4,ebp
c000b419:	4b                   	dec    ebx
c000b41a:	74 5f                	je     c000b47b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b41c:	85 f6                	test   esi,esi
c000b41e:	74 3d                	je     c000b45d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b420:	89 e8                	mov    eax,ebp
c000b422:	31 db                	xor    ebx,ebx
c000b424:	8d 7e ff             	lea    edi,[esi-0x1]
c000b427:	eb 14                	jmp    c000b43d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b429:	6a 01                	push   0x1
c000b42b:	43                   	inc    ebx
c000b42c:	50                   	push   eax
c000b42d:	e8 fe fe ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b432:	58                   	pop    eax
c000b433:	39 f3                	cmp    ebx,esi
c000b435:	5a                   	pop    edx
c000b436:	74 25                	je     c000b45d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b438:	a1 c4 59 02 c0       	mov    eax,ds:0xc00259c4
c000b43d:	8d 50 01             	lea    edx,[eax+0x1]
c000b440:	85 db                	test   ebx,ebx
c000b442:	89 15 c4 59 02 c0    	mov    DWORD PTR ds:0xc00259c4,edx
c000b448:	74 20                	je     c000b46a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b44a:	39 df                	cmp    edi,ebx
c000b44c:	75 db                	jne    c000b429 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b44e:	6a 03                	push   0x3
c000b450:	43                   	inc    ebx
c000b451:	50                   	push   eax
c000b452:	e8 d9 fe ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b457:	59                   	pop    ecx
c000b458:	39 f3                	cmp    ebx,esi
c000b45a:	58                   	pop    eax
c000b45b:	75 db                	jne    c000b438 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b45d:	83 c4 1c             	add    esp,0x1c
c000b460:	89 e8                	mov    eax,ebp
c000b462:	5b                   	pop    ebx
c000b463:	c1 e0 0c             	shl    eax,0xc
c000b466:	5e                   	pop    esi
c000b467:	5f                   	pop    edi
c000b468:	5d                   	pop    ebp
c000b469:	c3                   	ret    
c000b46a:	6a 02                	push   0x2
c000b46c:	bb 01 00 00 00       	mov    ebx,0x1
c000b471:	50                   	push   eax
c000b472:	e8 b9 fe ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b477:	58                   	pop    eax
c000b478:	5a                   	pop    edx
c000b479:	eb bd                	jmp    c000b438 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b47b:	6a 04                	push   0x4
c000b47d:	8d 45 01             	lea    eax,[ebp+0x1]
c000b480:	55                   	push   ebp
c000b481:	a3 c4 59 02 c0       	mov    ds:0xc00259c4,eax
c000b486:	e8 a5 fe ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b48b:	59                   	pop    ecx
c000b48c:	89 e8                	mov    eax,ebp
c000b48e:	5b                   	pop    ebx
c000b48f:	c1 e0 0c             	shl    eax,0xc
c000b492:	83 c4 1c             	add    esp,0x1c
c000b495:	5b                   	pop    ebx
c000b496:	5e                   	pop    esi
c000b497:	5f                   	pop    edi
c000b498:	5d                   	pop    ebp
c000b499:	c3                   	ret    

c000b49a <Virt::freeSwapfilePage(unsigned long)>:
c000b49a:	53                   	push   ebx
c000b49b:	8b 15 b0 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263b0
c000b4a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4a5:	b8 01 00 00 00       	mov    eax,0x1
c000b4aa:	89 cb                	mov    ebx,ecx
c000b4ac:	d3 e0                	shl    eax,cl
c000b4ae:	c1 eb 05             	shr    ebx,0x5
c000b4b1:	f7 d0                	not    eax
c000b4b3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b4b6:	5b                   	pop    ebx
c000b4b7:	c3                   	ret    

c000b4b8 <Virt::swapIDToSector(unsigned long)>:
c000b4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4bc:	0f af 05 cc 59 02 c0 	imul   eax,DWORD PTR ds:0xc00259cc
c000b4c3:	03 05 d4 59 02 c0    	add    eax,DWORD PTR ds:0xc00259d4
c000b4c9:	c3                   	ret    

c000b4ca <Virt::allocateSwapfilePage()>:
c000b4ca:	55                   	push   ebp
c000b4cb:	31 d2                	xor    edx,edx
c000b4cd:	57                   	push   edi
c000b4ce:	56                   	push   esi
c000b4cf:	53                   	push   ebx
c000b4d0:	83 ec 0c             	sub    esp,0xc
c000b4d3:	8b 0d cc 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259cc
c000b4d9:	a1 d0 59 02 c0       	mov    eax,ds:0xc00259d0
c000b4de:	f7 f1                	div    ecx
c000b4e0:	39 0d d0 59 02 c0    	cmp    DWORD PTR ds:0xc00259d0,ecx
c000b4e6:	72 2d                	jb     c000b515 <Virt::allocateSwapfilePage()+0x4b>
c000b4e8:	8b 35 b0 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263b0
c000b4ee:	8b 16                	mov    edx,DWORD PTR [esi]
c000b4f0:	f6 c2 01             	test   dl,0x1
c000b4f3:	74 3c                	je     c000b531 <Virt::allocateSwapfilePage()+0x67>
c000b4f5:	31 c9                	xor    ecx,ecx
c000b4f7:	bf 01 00 00 00       	mov    edi,0x1
c000b4fc:	eb 12                	jmp    c000b510 <Virt::allocateSwapfilePage()+0x46>
c000b4fe:	89 fd                	mov    ebp,edi
c000b500:	89 ca                	mov    edx,ecx
c000b502:	d3 e5                	shl    ebp,cl
c000b504:	c1 ea 05             	shr    edx,0x5
c000b507:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b50a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b50c:	85 ea                	test   edx,ebp
c000b50e:	74 2a                	je     c000b53a <Virt::allocateSwapfilePage()+0x70>
c000b510:	41                   	inc    ecx
c000b511:	39 c8                	cmp    eax,ecx
c000b513:	77 e9                	ja     c000b4fe <Virt::allocateSwapfilePage()+0x34>
c000b515:	83 ec 0c             	sub    esp,0xc
c000b518:	68 b4 2f 02 c0       	push   0xc0022fb4
c000b51d:	e8 2d 75 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	31 c9                	xor    ecx,ecx
c000b527:	83 c4 0c             	add    esp,0xc
c000b52a:	89 c8                	mov    eax,ecx
c000b52c:	5b                   	pop    ebx
c000b52d:	5e                   	pop    esi
c000b52e:	5f                   	pop    edi
c000b52f:	5d                   	pop    ebp
c000b530:	c3                   	ret    
c000b531:	89 f3                	mov    ebx,esi
c000b533:	bd 01 00 00 00       	mov    ebp,0x1
c000b538:	31 c9                	xor    ecx,ecx
c000b53a:	09 ea                	or     edx,ebp
c000b53c:	89 c8                	mov    eax,ecx
c000b53e:	89 13                	mov    DWORD PTR [ebx],edx
c000b540:	83 c4 0c             	add    esp,0xc
c000b543:	5b                   	pop    ebx
c000b544:	5e                   	pop    esi
c000b545:	5f                   	pop    edi
c000b546:	5d                   	pop    ebp
c000b547:	c3                   	ret    

c000b548 <Virt::virtualMemorySetup()>:
c000b548:	53                   	push   ebx
c000b549:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b54e:	6a 0f                	push   0xf
c000b550:	53                   	push   ebx
c000b551:	43                   	inc    ebx
c000b552:	e8 d9 fd ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b557:	58                   	pop    eax
c000b558:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b55e:	5a                   	pop    edx
c000b55f:	75 ed                	jne    c000b54e <Virt::virtualMemorySetup()+0x6>
c000b561:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b566:	6a 00                	push   0x0
c000b568:	53                   	push   ebx
c000b569:	43                   	inc    ebx
c000b56a:	e8 c1 fd ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b56f:	59                   	pop    ecx
c000b570:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b576:	58                   	pop    eax
c000b577:	75 ed                	jne    c000b566 <Virt::virtualMemorySetup()+0x1e>
c000b579:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b57e:	6a 0f                	push   0xf
c000b580:	53                   	push   ebx
c000b581:	43                   	inc    ebx
c000b582:	e8 a9 fd ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b587:	58                   	pop    eax
c000b588:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b58e:	5a                   	pop    edx
c000b58f:	75 ed                	jne    c000b57e <Virt::virtualMemorySetup()+0x36>
c000b591:	5b                   	pop    ebx
c000b592:	c3                   	ret    

c000b593 <Virt::setupPageSwapping(int)>:
c000b593:	53                   	push   ebx
c000b594:	83 ec 0c             	sub    esp,0xc
c000b597:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b59b:	a1 48 88 02 c0       	mov    eax,ds:0xc0028848
c000b5a0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b5a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5a8:	53                   	push   ebx
c000b5a9:	c1 e3 0b             	shl    ebx,0xb
c000b5ac:	68 cb 2f 02 c0       	push   0xc0022fcb
c000b5b1:	50                   	push   eax
c000b5b2:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b5b5:	89 1d d0 59 02 c0    	mov    DWORD PTR ds:0xc00259d0,ebx
c000b5bb:	c6 05 d8 59 02 c0 43 	mov    BYTE PTR ds:0xc00259d8,0x43
c000b5c2:	c1 eb 08             	shr    ebx,0x8
c000b5c5:	a3 d4 59 02 c0       	mov    ds:0xc00259d4,eax
c000b5ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5cd:	c7 05 cc 59 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00259cc,0x8
c000b5d7:	e8 bb e1 ff ff       	call   c0009797 <malloc>
c000b5dc:	83 c4 0c             	add    esp,0xc
c000b5df:	89 c1                	mov    ecx,eax
c000b5e1:	a3 b0 63 02 c0       	mov    ds:0xc00263b0,eax
c000b5e6:	31 d2                	xor    edx,edx
c000b5e8:	a1 d0 59 02 c0       	mov    eax,ds:0xc00259d0
c000b5ed:	f7 35 cc 59 02 c0    	div    DWORD PTR ds:0xc00259cc
c000b5f3:	c1 e8 05             	shr    eax,0x5
c000b5f6:	50                   	push   eax
c000b5f7:	6a 00                	push   0x0
c000b5f9:	51                   	push   ecx
c000b5fa:	e8 a9 4e ff ff       	call   c00004a8 <memset>
c000b5ff:	83 c4 18             	add    esp,0x18
c000b602:	5b                   	pop    ebx
c000b603:	c3                   	ret    

c000b604 <VAS::VAS(VAS*)>:
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b60b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b616:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b61d:	83 ec 0c             	sub    esp,0xc
c000b620:	68 1c 2e 02 c0       	push   0xc0022e1c
c000b625:	e8 25 74 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	90                   	nop
c000b62e:	83 c4 0c             	add    esp,0xc
c000b631:	c3                   	ret    

c000b632 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b636:	89 c2                	mov    edx,eax
c000b638:	c1 e8 0a             	shr    eax,0xa
c000b63b:	c1 ea 16             	shr    edx,0x16
c000b63e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b643:	19 c9                	sbb    ecx,ecx
c000b645:	c1 e2 0c             	shl    edx,0xc
c000b648:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b64e:	25 fc 0f 00 00       	and    eax,0xffc
c000b653:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b65a:	01 d0                	add    eax,edx
c000b65c:	c3                   	ret    
c000b65d:	90                   	nop

c000b65e <VAS::getPageTableEntry(unsigned long)>:
c000b65e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b662:	89 ca                	mov    edx,ecx
c000b664:	c1 e9 0a             	shr    ecx,0xa
c000b667:	c1 ea 16             	shr    edx,0x16
c000b66a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b670:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b676:	c1 e0 0c             	shl    eax,0xc
c000b679:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b67c:	c3                   	ret    

c000b67d <Virt::freeKernelVirtualPages(unsigned long)>:
c000b67d:	57                   	push   edi
c000b67e:	56                   	push   esi
c000b67f:	be 01 00 00 00       	mov    esi,0x1
c000b684:	53                   	push   ebx
c000b685:	83 ec 10             	sub    esp,0x10
c000b688:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b68c:	c1 eb 0c             	shr    ebx,0xc
c000b68f:	eb 3f                	jmp    c000b6d0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b691:	83 ec 08             	sub    esp,0x8
c000b694:	57                   	push   edi
c000b695:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c000b69b:	e8 be ff ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000b6a0:	83 c4 10             	add    esp,0x10
c000b6a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6a5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b6a9:	f6 c4 04             	test   ah,0x4
c000b6ac:	75 5f                	jne    c000b70d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b6ae:	80 fa 04             	cmp    dl,0x4
c000b6b1:	74 78                	je     c000b72b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b6b3:	80 fa 02             	cmp    dl,0x2
c000b6b6:	0f 84 88 00 00 00    	je     c000b744 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b6bc:	80 fa 03             	cmp    dl,0x3
c000b6bf:	0f 84 ad 00 00 00    	je     c000b772 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b6c5:	fe ca                	dec    dl
c000b6c7:	0f 84 92 00 00 00    	je     c000b75f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b6cd:	43                   	inc    ebx
c000b6ce:	31 f6                	xor    esi,esi
c000b6d0:	53                   	push   ebx
c000b6d1:	89 df                	mov    edi,ebx
c000b6d3:	e8 8d fc ff ff       	call   c000b365 <Virt::getPageState(unsigned long)>
c000b6d8:	c1 e7 0c             	shl    edi,0xc
c000b6db:	59                   	pop    ecx
c000b6dc:	84 c0                	test   al,al
c000b6de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b6e2:	75 ad                	jne    c000b691 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b6e4:	83 ec 0c             	sub    esp,0xc
c000b6e7:	68 e2 2f 02 c0       	push   0xc0022fe2
c000b6ec:	e8 5e 73 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000b6f1:	58                   	pop    eax
c000b6f2:	5a                   	pop    edx
c000b6f3:	57                   	push   edi
c000b6f4:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c000b6fa:	e8 5f ff ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000b6ff:	83 c4 10             	add    esp,0x10
c000b702:	8b 00                	mov    eax,DWORD PTR [eax]
c000b704:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b708:	f6 c4 04             	test   ah,0x4
c000b70b:	74 c0                	je     c000b6cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b70d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000b711:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b716:	83 ec 0c             	sub    esp,0xc
c000b719:	50                   	push   eax
c000b71a:	e8 34 e4 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000b71f:	83 c4 10             	add    esp,0x10
c000b722:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b726:	80 fa 04             	cmp    dl,0x4
c000b729:	75 88                	jne    c000b6b3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000b72b:	89 f0                	mov    eax,esi
c000b72d:	84 c0                	test   al,al
c000b72f:	75 47                	jne    c000b778 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000b731:	c7 44 24 20 40 2e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022e40
c000b739:	83 c4 10             	add    esp,0x10
c000b73c:	5b                   	pop    ebx
c000b73d:	5e                   	pop    esi
c000b73e:	5f                   	pop    edi
c000b73f:	e9 0b 73 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>
c000b744:	89 f0                	mov    eax,esi
c000b746:	84 c0                	test   al,al
c000b748:	75 15                	jne    c000b75f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b74a:	83 ec 0c             	sub    esp,0xc
c000b74d:	68 fe 2f 02 c0       	push   0xc0022ffe
c000b752:	e8 f8 72 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000b757:	83 c4 10             	add    esp,0x10
c000b75a:	e9 6e ff ff ff       	jmp    c000b6cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b75f:	83 ec 08             	sub    esp,0x8
c000b762:	6a 00                	push   0x0
c000b764:	53                   	push   ebx
c000b765:	e8 c6 fb ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b76a:	83 c4 10             	add    esp,0x10
c000b76d:	e9 5b ff ff ff       	jmp    c000b6cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b772:	89 f0                	mov    eax,esi
c000b774:	84 c0                	test   al,al
c000b776:	75 15                	jne    c000b78d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000b778:	83 ec 08             	sub    esp,0x8
c000b77b:	6a 00                	push   0x0
c000b77d:	53                   	push   ebx
c000b77e:	e8 ad fb ff ff       	call   c000b330 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b783:	83 c4 10             	add    esp,0x10
c000b786:	83 c4 10             	add    esp,0x10
c000b789:	5b                   	pop    ebx
c000b78a:	5e                   	pop    esi
c000b78b:	5f                   	pop    edi
c000b78c:	c3                   	ret    
c000b78d:	c7 44 24 20 1a 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc002301a
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	5b                   	pop    ebx
c000b799:	5e                   	pop    esi
c000b79a:	5f                   	pop    edi
c000b79b:	e9 af 72 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>

c000b7a0 <VAS::freeAllocatedPages(unsigned long)>:
c000b7a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7a8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000b7ac:	74 09                	je     c000b7b7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000b7ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b7b2:	e9 c6 fe ff ff       	jmp    c000b67d <Virt::freeKernelVirtualPages(unsigned long)>
c000b7b7:	c7 44 24 04 64 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022e64
c000b7bf:	e9 21 0f 00 00       	jmp    c000c6e5 <Dbg::kprintf(char const*, ...)>

c000b7c4 <VAS::virtualToPhysical(unsigned long)>:
c000b7c4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b7c8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b7cc:	e8 8d fe ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000b7d1:	5a                   	pop    edx
c000b7d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7d4:	59                   	pop    ecx
c000b7d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b7da:	c3                   	ret    
c000b7db:	90                   	nop

c000b7dc <VAS::reflagRange(unsigned long, int, int, int)>:
c000b7dc:	55                   	push   ebp
c000b7dd:	57                   	push   edi
c000b7de:	56                   	push   esi
c000b7df:	53                   	push   ebx
c000b7e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000b7e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b7ec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b7f0:	85 db                	test   ebx,ebx
c000b7f2:	7e 22                	jle    c000b816 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000b7f4:	c1 e3 0c             	shl    ebx,0xc
c000b7f7:	01 f3                	add    ebx,esi
c000b7f9:	56                   	push   esi
c000b7fa:	81 c6 00 10 00 00    	add    esi,0x1000
c000b800:	55                   	push   ebp
c000b801:	e8 58 fe ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000b806:	5a                   	pop    edx
c000b807:	59                   	pop    ecx
c000b808:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b80a:	21 f9                	and    ecx,edi
c000b80c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000b810:	39 f3                	cmp    ebx,esi
c000b812:	89 08                	mov    DWORD PTR [eax],ecx
c000b814:	75 e3                	jne    c000b7f9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000b816:	5b                   	pop    ebx
c000b817:	5e                   	pop    esi
c000b818:	5f                   	pop    edi
c000b819:	5d                   	pop    ebp
c000b81a:	c3                   	ret    
c000b81b:	90                   	nop

c000b81c <VAS::setToWriteCombining(unsigned long, int)>:
c000b81c:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000b821:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b827:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000b82e:	75 01                	jne    c000b831 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000b830:	c3                   	ret    
c000b831:	68 80 00 00 00       	push   0x80
c000b836:	6a ff                	push   0xffffffff
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 93 ff ff ff       	call   c000b7dc <VAS::reflagRange(unsigned long, int, int, int)>
c000b849:	83 c4 14             	add    esp,0x14
c000b84c:	c3                   	ret    
c000b84d:	90                   	nop

c000b84e <VAS::mapOtherVASIn(bool, VAS*)>:
c000b84e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b857:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000b85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000b861:	19 c0                	sbb    eax,eax
c000b863:	83 ca 03             	or     edx,0x3
c000b866:	83 e0 fc             	and    eax,0xfffffffc
c000b869:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000b870:	0f 20 d8             	mov    eax,cr3
c000b873:	0f 22 d8             	mov    cr3,eax
c000b876:	c3                   	ret    
c000b877:	90                   	nop

c000b878 <VAS::~VAS()>:
c000b878:	83 ec 2c             	sub    esp,0x2c
c000b87b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b883:	fa                   	cli    
c000b884:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000b889:	40                   	inc    eax
c000b88a:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000b88f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b894:	8b 00                	mov    eax,DWORD PTR [eax]
c000b896:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b899:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b89f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b8a3:	6a 01                	push   0x1
c000b8a5:	50                   	push   eax
c000b8a6:	e8 a3 ff ff ff       	call   c000b84e <VAS::mapOtherVASIn(bool, VAS*)>
c000b8ab:	83 c4 0c             	add    esp,0xc
c000b8ae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b8b6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000b8be:	0f 8f d4 00 00 00    	jg     c000b998 <VAS::~VAS()+0x120>
c000b8c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b8cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b8cf:	c1 e2 02             	shl    edx,0x2
c000b8d2:	01 d0                	add    eax,edx
c000b8d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000b8d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8de:	83 e0 01             	and    eax,0x1
c000b8e1:	0f 84 a8 00 00 00    	je     c000b98f <VAS::~VAS()+0x117>
c000b8e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b8ef:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000b8f7:	7f 72                	jg     c000b96b <VAS::~VAS()+0xf3>
c000b8f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b8fd:	c1 e0 0a             	shl    eax,0xa
c000b900:	89 c2                	mov    edx,eax
c000b902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b906:	01 d0                	add    eax,edx
c000b908:	c1 e0 0c             	shl    eax,0xc
c000b90b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b90f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b914:	8b 00                	mov    eax,DWORD PTR [eax]
c000b916:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b919:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b91f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b923:	6a 01                	push   0x1
c000b925:	50                   	push   eax
c000b926:	e8 07 fd ff ff       	call   c000b632 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000b92b:	83 c4 0c             	add    esp,0xc
c000b92e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b936:	8b 00                	mov    eax,DWORD PTR [eax]
c000b938:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b940:	25 01 04 00 00       	and    eax,0x401
c000b945:	3d 01 04 00 00       	cmp    eax,0x401
c000b94a:	75 19                	jne    c000b965 <VAS::~VAS()+0xed>
c000b94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b950:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b955:	83 ec 0c             	sub    esp,0xc
c000b958:	50                   	push   eax
c000b959:	e8 f5 e1 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000b95e:	83 c4 10             	add    esp,0x10
c000b961:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b965:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b969:	eb 84                	jmp    c000b8ef <VAS::~VAS()+0x77>
c000b96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b96f:	25 00 04 00 00       	and    eax,0x400
c000b974:	74 19                	je     c000b98f <VAS::~VAS()+0x117>
c000b976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b97a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b97f:	83 ec 0c             	sub    esp,0xc
c000b982:	50                   	push   eax
c000b983:	e8 cb e1 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000b988:	83 c4 10             	add    esp,0x10
c000b98b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b98f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b993:	e9 1e ff ff ff       	jmp    c000b8b6 <VAS::~VAS()+0x3e>
c000b998:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b99c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b99f:	83 ec 0c             	sub    esp,0xc
c000b9a2:	50                   	push   eax
c000b9a3:	e8 d5 fc ff ff       	call   c000b67d <Virt::freeKernelVirtualPages(unsigned long)>
c000b9a8:	83 c4 10             	add    esp,0x10
c000b9ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b9b2:	83 ec 0c             	sub    esp,0xc
c000b9b5:	50                   	push   eax
c000b9b6:	e8 98 e1 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9c6:	c1 e0 02             	shl    eax,0x2
c000b9c9:	83 ec 08             	sub    esp,0x8
c000b9cc:	50                   	push   eax
c000b9cd:	68 88 2e 02 c0       	push   0xc0022e88
c000b9d2:	e8 0e 0d 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000b9df:	48                   	dec    eax
c000b9e0:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000b9e5:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000b9ea:	85 c0                	test   eax,eax
c000b9ec:	75 01                	jne    c000b9ef <VAS::~VAS()+0x177>
c000b9ee:	fb                   	sti    
c000b9ef:	90                   	nop
c000b9f0:	83 c4 2c             	add    esp,0x2c
c000b9f3:	c3                   	ret    

c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000b9f4:	55                   	push   ebp
c000b9f5:	57                   	push   edi
c000b9f6:	56                   	push   esi
c000b9f7:	53                   	push   ebx
c000b9f8:	83 ec 1c             	sub    esp,0x1c
c000b9fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b9ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ba03:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000ba09:	77 0b                	ja     c000ba16 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000ba0b:	0f 20 d8             	mov    eax,cr3
c000ba0e:	0f 20 d8             	mov    eax,cr3
c000ba11:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000ba14:	75 47                	jne    c000ba5d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000ba16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ba1a:	09 d8                	or     eax,ebx
c000ba1c:	a9 ff 0f 00 00       	test   eax,0xfff
c000ba21:	75 57                	jne    c000ba7a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000ba23:	89 de                	mov    esi,ebx
c000ba25:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba28:	c1 ee 16             	shr    esi,0x16
c000ba2b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000ba32:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000ba36:	74 54                	je     c000ba8c <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000ba38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ba3c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000ba42:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ba46:	c1 e6 0c             	shl    esi,0xc
c000ba49:	c1 eb 0a             	shr    ebx,0xa
c000ba4c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000ba52:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000ba55:	83 c4 1c             	add    esp,0x1c
c000ba58:	5b                   	pop    ebx
c000ba59:	5e                   	pop    esi
c000ba5a:	5f                   	pop    edi
c000ba5b:	5d                   	pop    ebp
c000ba5c:	c3                   	ret    
c000ba5d:	83 ec 0c             	sub    esp,0xc
c000ba60:	68 a8 2e 02 c0       	push   0xc0022ea8
c000ba65:	e8 7b 0c 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ba71:	09 d8                	or     eax,ebx
c000ba73:	a9 ff 0f 00 00       	test   eax,0xfff
c000ba78:	74 a9                	je     c000ba23 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000ba7a:	83 ec 0c             	sub    esp,0xc
c000ba7d:	68 10 2f 02 c0       	push   0xc0022f10
c000ba82:	e8 c8 6f 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000ba87:	83 c4 10             	add    esp,0x10
c000ba8a:	eb 97                	jmp    c000ba23 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000ba8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba90:	e8 41 e1 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000ba95:	83 ec 0c             	sub    esp,0xc
c000ba98:	89 c5                	mov    ebp,eax
c000ba9a:	8b 0d b4 63 02 c0    	mov    ecx,DWORD PTR ds:0xc00263b4
c000baa0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000baa4:	6a 01                	push   0x1
c000baa6:	e8 de f8 ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c000baab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000bab2:	6a 01                	push   0x1
c000bab4:	50                   	push   eax
c000bab5:	55                   	push   ebp
c000bab6:	81 cd 07 04 00 00    	or     ebp,0x407
c000babc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bac0:	51                   	push   ecx
c000bac1:	e8 26 02 00 00       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bac6:	83 c4 1c             	add    esp,0x1c
c000bac9:	68 00 10 00 00       	push   0x1000
c000bace:	6a 00                	push   0x0
c000bad0:	50                   	push   eax
c000bad1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bad5:	e8 ce 49 ff ff       	call   c00004a8 <memset>
c000bada:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bade:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000bae1:	e8 97 fb ff ff       	call   c000b67d <Virt::freeKernelVirtualPages(unsigned long)>
c000bae6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000baea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baed:	83 c4 10             	add    esp,0x10
c000baf0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000baf3:	e9 40 ff ff ff       	jmp    c000ba38 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000baf8 <VAS::allocatePages(int, int)>:
c000baf8:	55                   	push   ebp
c000baf9:	57                   	push   edi
c000bafa:	56                   	push   esi
c000bafb:	53                   	push   ebx
c000bafc:	83 ec 1c             	sub    esp,0x1c
c000baff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bb03:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000bb08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bb0e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bb14:	83 e0 01             	and    eax,0x1
c000bb17:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bb1b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bb1f:	0f 85 cc 00 00 00    	jne    c000bbf1 <VAS::allocatePages(int, int)+0xf9>
c000bb25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bb28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bb2c:	85 c0                	test   eax,eax
c000bb2e:	0f 84 a1 00 00 00    	je     c000bbd5 <VAS::allocatePages(int, int)+0xdd>
c000bb34:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bb38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bb3c:	c1 e6 0c             	shl    esi,0xc
c000bb3f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bb43:	85 c0                	test   eax,eax
c000bb45:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bb48:	7e 33                	jle    c000bb7d <VAS::allocatePages(int, int)+0x85>
c000bb4a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb4e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bb52:	81 cd 00 04 00 00    	or     ebp,0x400
c000bb58:	e8 79 e0 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000bb5d:	55                   	push   ebp
c000bb5e:	53                   	push   ebx
c000bb5f:	50                   	push   eax
c000bb60:	57                   	push   edi
c000bb61:	e8 8e fe ff ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bb6e:	74 03                	je     c000bb73 <VAS::allocatePages(int, int)+0x7b>
c000bb70:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb73:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb79:	39 de                	cmp    esi,ebx
c000bb7b:	75 db                	jne    c000bb58 <VAS::allocatePages(int, int)+0x60>
c000bb7d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bb82:	75 12                	jne    c000bb96 <VAS::allocatePages(int, int)+0x9e>
c000bb84:	0f 20 d8             	mov    eax,cr3
c000bb87:	0f 22 d8             	mov    cr3,eax
c000bb8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb8e:	83 c4 1c             	add    esp,0x1c
c000bb91:	5b                   	pop    ebx
c000bb92:	5e                   	pop    esi
c000bb93:	5f                   	pop    edi
c000bb94:	5d                   	pop    ebp
c000bb95:	c3                   	ret    
c000bb96:	c1 ee 0a             	shr    esi,0xa
c000bb99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bb9d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bba3:	c1 eb 0a             	shr    ebx,0xa
c000bba6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bbac:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bbb2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bbb8:	39 c3                	cmp    ebx,eax
c000bbba:	77 ce                	ja     c000bb8a <VAS::allocatePages(int, int)+0x92>
c000bbbc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bbbf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bbc5:	39 d8                	cmp    eax,ebx
c000bbc7:	73 f3                	jae    c000bbbc <VAS::allocatePages(int, int)+0xc4>
c000bbc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbcd:	83 c4 1c             	add    esp,0x1c
c000bbd0:	5b                   	pop    ebx
c000bbd1:	5e                   	pop    esi
c000bbd2:	5f                   	pop    edi
c000bbd3:	5d                   	pop    ebp
c000bbd4:	c3                   	ret    
c000bbd5:	83 ec 0c             	sub    esp,0xc
c000bbd8:	68 34 2f 02 c0       	push   0xc0022f34
c000bbdd:	e8 6d 6e 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000bbe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbe5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbe9:	83 c4 10             	add    esp,0x10
c000bbec:	e9 43 ff ff ff       	jmp    c000bb34 <VAS::allocatePages(int, int)+0x3c>
c000bbf1:	83 ec 0c             	sub    esp,0xc
c000bbf4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bbf8:	e8 8c f7 ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c000bbfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bc01:	83 c4 10             	add    esp,0x10
c000bc04:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bc09:	0f 87 9b 00 00 00    	ja     c000bcaa <VAS::allocatePages(int, int)+0x1b2>
c000bc0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bc13:	85 d2                	test   edx,edx
c000bc15:	7e 3c                	jle    c000bc53 <VAS::allocatePages(int, int)+0x15b>
c000bc17:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bc1b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bc1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc23:	c1 e5 0c             	shl    ebp,0xc
c000bc26:	81 ce 00 04 00 00    	or     esi,0x400
c000bc2c:	01 dd                	add    ebp,ebx
c000bc2e:	e8 a3 df ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000bc33:	56                   	push   esi
c000bc34:	53                   	push   ebx
c000bc35:	50                   	push   eax
c000bc36:	57                   	push   edi
c000bc37:	e8 b8 fd ff ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bc3c:	83 c4 10             	add    esp,0x10
c000bc3f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc44:	74 03                	je     c000bc49 <VAS::allocatePages(int, int)+0x151>
c000bc46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc49:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc4f:	39 dd                	cmp    ebp,ebx
c000bc51:	75 db                	jne    c000bc2e <VAS::allocatePages(int, int)+0x136>
c000bc53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc58:	0f 84 26 ff ff ff    	je     c000bb84 <VAS::allocatePages(int, int)+0x8c>
c000bc5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc66:	89 d3                	mov    ebx,edx
c000bc68:	c1 e0 0c             	shl    eax,0xc
c000bc6b:	c1 eb 0a             	shr    ebx,0xa
c000bc6e:	01 d0                	add    eax,edx
c000bc70:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bc76:	c1 e8 0a             	shr    eax,0xa
c000bc79:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bc7f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc84:	2d 00 00 40 00       	sub    eax,0x400000
c000bc89:	39 c3                	cmp    ebx,eax
c000bc8b:	0f 87 f9 fe ff ff    	ja     c000bb8a <VAS::allocatePages(int, int)+0x92>
c000bc91:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc94:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc9a:	39 d8                	cmp    eax,ebx
c000bc9c:	73 f3                	jae    c000bc91 <VAS::allocatePages(int, int)+0x199>
c000bc9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bca2:	83 c4 1c             	add    esp,0x1c
c000bca5:	5b                   	pop    ebx
c000bca6:	5e                   	pop    esi
c000bca7:	5f                   	pop    edi
c000bca8:	5d                   	pop    ebp
c000bca9:	c3                   	ret    
c000bcaa:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000bcaf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bcb5:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000bcbc:	0f 84 4d ff ff ff    	je     c000bc0f <VAS::allocatePages(int, int)+0x117>
c000bcc2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bcca:	e9 40 ff ff ff       	jmp    c000bc0f <VAS::allocatePages(int, int)+0x117>
c000bccf:	90                   	nop

c000bcd0 <VAS::setCPUSpecific(unsigned long)>:
c000bcd0:	83 ec 0c             	sub    esp,0xc
c000bcd3:	6a 05                	push   0x5
c000bcd5:	68 00 00 40 c2       	push   0xc2400000
c000bcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce2:	e8 0d fd ff ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bce7:	83 c4 1c             	add    esp,0x1c
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bcec:	55                   	push   ebp
c000bced:	57                   	push   edi
c000bcee:	56                   	push   esi
c000bcef:	53                   	push   ebx
c000bcf0:	83 ec 1c             	sub    esp,0x1c
c000bcf3:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000bcf8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bcfc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bd02:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bd06:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bd0c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000bd10:	83 e0 01             	and    eax,0x1
c000bd13:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bd17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd1b:	85 c0                	test   eax,eax
c000bd1d:	7e 39                	jle    c000bd58 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000bd1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd23:	89 f3                	mov    ebx,esi
c000bd25:	c1 e0 0c             	shl    eax,0xc
c000bd28:	01 f0                	add    eax,esi
c000bd2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd2e:	55                   	push   ebp
c000bd2f:	53                   	push   ebx
c000bd30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd34:	29 f0                	sub    eax,esi
c000bd36:	01 d8                	add    eax,ebx
c000bd38:	50                   	push   eax
c000bd39:	57                   	push   edi
c000bd3a:	e8 b5 fc ff ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bd3f:	83 c4 10             	add    esp,0x10
c000bd42:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bd47:	74 03                	je     c000bd4c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000bd49:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bd4c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bd52:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000bd56:	75 d6                	jne    c000bd2e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000bd58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bd5d:	75 10                	jne    c000bd6f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000bd5f:	0f 20 d8             	mov    eax,cr3
c000bd62:	0f 22 d8             	mov    cr3,eax
c000bd65:	83 c4 1c             	add    esp,0x1c
c000bd68:	89 f0                	mov    eax,esi
c000bd6a:	5b                   	pop    ebx
c000bd6b:	5e                   	pop    esi
c000bd6c:	5f                   	pop    edi
c000bd6d:	5d                   	pop    ebp
c000bd6e:	c3                   	ret    
c000bd6f:	89 f3                	mov    ebx,esi
c000bd71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd75:	c1 eb 0a             	shr    ebx,0xa
c000bd78:	c1 e0 0c             	shl    eax,0xc
c000bd7b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bd81:	01 f0                	add    eax,esi
c000bd83:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bd89:	c1 e8 0a             	shr    eax,0xa
c000bd8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd91:	2d 00 00 40 00       	sub    eax,0x400000
c000bd96:	39 c3                	cmp    ebx,eax
c000bd98:	77 cb                	ja     c000bd65 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000bd9a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bd9d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bda3:	39 d8                	cmp    eax,ebx
c000bda5:	73 f3                	jae    c000bd9a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000bda7:	83 c4 1c             	add    esp,0x1c
c000bdaa:	89 f0                	mov    eax,esi
c000bdac:	5b                   	pop    ebx
c000bdad:	5e                   	pop    esi
c000bdae:	5f                   	pop    edi
c000bdaf:	5d                   	pop    ebp
c000bdb0:	c3                   	ret    
c000bdb1:	90                   	nop

c000bdb2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000bdb2:	55                   	push   ebp
c000bdb3:	57                   	push   edi
c000bdb4:	56                   	push   esi
c000bdb5:	53                   	push   ebx
c000bdb6:	83 ec 1c             	sub    esp,0x1c
c000bdb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdbd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bdc1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000bdc5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000bdc9:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdce:	75 4a                	jne    c000be1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000bdd0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000bdd4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdd7:	c1 eb 16             	shr    ebx,0x16
c000bdda:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000bde1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000bde5:	74 4d                	je     c000be34 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000bde7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdeb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000bdef:	c1 e8 0a             	shr    eax,0xa
c000bdf2:	80 fa 01             	cmp    dl,0x1
c000bdf5:	19 d2                	sbb    edx,edx
c000bdf7:	c1 e3 0c             	shl    ebx,0xc
c000bdfa:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000bdfe:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000be04:	25 fc 0f 00 00       	and    eax,0xffc
c000be09:	01 d8                	add    eax,ebx
c000be0b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000be12:	83 c4 1c             	add    esp,0x1c
c000be15:	5b                   	pop    ebx
c000be16:	5e                   	pop    esi
c000be17:	5f                   	pop    edi
c000be18:	5d                   	pop    ebp
c000be19:	c3                   	ret    
c000be1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be1e:	83 ec 0c             	sub    esp,0xc
c000be21:	68 60 2f 02 c0       	push   0xc0022f60
c000be26:	e8 24 6c 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000be2b:	83 c4 10             	add    esp,0x10
c000be2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be32:	eb 9c                	jmp    c000bdd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000be34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be38:	e8 99 dd ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000be3d:	83 ec 0c             	sub    esp,0xc
c000be40:	89 c5                	mov    ebp,eax
c000be42:	8b 0d b4 63 02 c0    	mov    ecx,DWORD PTR ds:0xc00263b4
c000be48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be4c:	6a 01                	push   0x1
c000be4e:	e8 36 f5 ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c000be53:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be5a:	6a 01                	push   0x1
c000be5c:	50                   	push   eax
c000be5d:	55                   	push   ebp
c000be5e:	81 cd 07 04 00 00    	or     ebp,0x407
c000be64:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be68:	51                   	push   ecx
c000be69:	e8 7e fe ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be6e:	83 c4 1c             	add    esp,0x1c
c000be71:	68 00 10 00 00       	push   0x1000
c000be76:	6a 00                	push   0x0
c000be78:	50                   	push   eax
c000be79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be7d:	e8 26 46 ff ff       	call   c00004a8 <memset>
c000be82:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be86:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be89:	e8 ef f7 ff ff       	call   c000b67d <Virt::freeKernelVirtualPages(unsigned long)>
c000be8e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be91:	83 c4 10             	add    esp,0x10
c000be94:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000be97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be9b:	e9 47 ff ff ff       	jmp    c000bde7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000bea0 <VAS::VAS(bool)>:
c000bea0:	53                   	push   ebx
c000bea1:	83 ec 28             	sub    esp,0x28
c000bea4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bea8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000beac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000beb0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000beb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bebb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000beca:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000becd:	e8 04 dd ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000bed2:	89 c2                	mov    edx,eax
c000bed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bed8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000bedb:	8b 1d b4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b4
c000bee1:	83 ec 0c             	sub    esp,0xc
c000bee4:	6a 01                	push   0x1
c000bee6:	e8 9e f4 ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c000beeb:	83 c4 10             	add    esp,0x10
c000beee:	89 c2                	mov    edx,eax
c000bef0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bef4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bef7:	83 ec 0c             	sub    esp,0xc
c000befa:	6a 03                	push   0x3
c000befc:	6a 01                	push   0x1
c000befe:	52                   	push   edx
c000beff:	50                   	push   eax
c000bf00:	53                   	push   ebx
c000bf01:	e8 e6 fd ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bf06:	83 c4 20             	add    esp,0x20
c000bf09:	89 c2                	mov    edx,eax
c000bf0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf0f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000bf12:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf1a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000bf22:	7f 1c                	jg     c000bf40 <VAS::VAS(bool)+0xa0>
c000bf24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf2f:	c1 e2 02             	shl    edx,0x2
c000bf32:	01 d0                	add    eax,edx
c000bf34:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bf3a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf3e:	eb da                	jmp    c000bf1a <VAS::VAS(bool)+0x7a>
c000bf40:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000bf48:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000bf50:	7f 7a                	jg     c000bfcc <VAS::VAS(bool)+0x12c>
c000bf52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf56:	2d 00 02 00 00       	sub    eax,0x200
c000bf5b:	c1 e0 0c             	shl    eax,0xc
c000bf5e:	83 c8 03             	or     eax,0x3
c000bf61:	89 c2                	mov    edx,eax
c000bf63:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000bf68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bf6e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bf74:	83 e0 10             	and    eax,0x10
c000bf77:	84 c0                	test   al,al
c000bf79:	74 07                	je     c000bf82 <VAS::VAS(bool)+0xe2>
c000bf7b:	b8 00 01 00 00       	mov    eax,0x100
c000bf80:	eb 05                	jmp    c000bf87 <VAS::VAS(bool)+0xe7>
c000bf82:	b8 00 00 00 00       	mov    eax,0x0
c000bf87:	09 d0                	or     eax,edx
c000bf89:	89 c1                	mov    ecx,eax
c000bf8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf96:	c1 e2 02             	shl    edx,0x2
c000bf99:	01 d0                	add    eax,edx
c000bf9b:	89 ca                	mov    edx,ecx
c000bf9d:	89 10                	mov    DWORD PTR [eax],edx
c000bf9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfa3:	2d 40 03 00 00       	sub    eax,0x340
c000bfa8:	83 f8 7f             	cmp    eax,0x7f
c000bfab:	77 16                	ja     c000bfc3 <VAS::VAS(bool)+0x123>
c000bfad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfb1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bfb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bfb8:	c1 e2 02             	shl    edx,0x2
c000bfbb:	01 d0                	add    eax,edx
c000bfbd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bfc3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bfc7:	e9 7c ff ff ff       	jmp    c000bf48 <VAS::VAS(bool)+0xa8>
c000bfcc:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000bfd1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfd7:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bfdd:	83 e0 10             	and    eax,0x10
c000bfe0:	84 c0                	test   al,al
c000bfe2:	74 07                	je     c000bfeb <VAS::VAS(bool)+0x14b>
c000bfe4:	b8 03 41 00 00       	mov    eax,0x4103
c000bfe9:	eb 05                	jmp    c000bff0 <VAS::VAS(bool)+0x150>
c000bfeb:	b8 03 40 00 00       	mov    eax,0x4003
c000bff0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bff4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000bff7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000bffd:	89 02                	mov    DWORD PTR [edx],eax
c000bfff:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000c004:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c00a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c010:	83 ec 08             	sub    esp,0x8
c000c013:	50                   	push   eax
c000c014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c018:	e8 b3 fc ff ff       	call   c000bcd0 <VAS::setCPUSpecific(unsigned long)>
c000c01d:	83 c4 10             	add    esp,0x10
c000c020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c024:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c027:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000c02c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c032:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c038:	83 e0 10             	and    eax,0x10
c000c03b:	84 c0                	test   al,al
c000c03d:	74 07                	je     c000c046 <VAS::VAS(bool)+0x1a6>
c000c03f:	b8 00 01 00 00       	mov    eax,0x100
c000c044:	eb 05                	jmp    c000c04b <VAS::VAS(bool)+0x1ab>
c000c046:	b8 00 00 00 00       	mov    eax,0x0
c000c04b:	09 c2                	or     edx,eax
c000c04d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c051:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c054:	05 fc 0f 00 00       	add    eax,0xffc
c000c059:	83 ca 03             	or     edx,0x3
c000c05c:	89 10                	mov    DWORD PTR [eax],edx
c000c05e:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000c063:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c069:	83 ec 0c             	sub    esp,0xc
c000c06c:	50                   	push   eax
c000c06d:	e8 f0 1d 00 00       	call   c000de62 <Device::getName()>
c000c072:	83 c4 10             	add    esp,0x10
c000c075:	83 ec 08             	sub    esp,0x8
c000c078:	68 34 30 02 c0       	push   0xc0023034
c000c07d:	50                   	push   eax
c000c07e:	e8 6d 45 ff ff       	call   c00005f0 <strcmp>
c000c083:	83 c4 10             	add    esp,0x10
c000c086:	85 c0                	test   eax,eax
c000c088:	0f 94 c0             	sete   al
c000c08b:	84 c0                	test   al,al
c000c08d:	0f 84 87 00 00 00    	je     c000c11a <VAS::VAS(bool)+0x27a>
c000c093:	fa                   	cli    
c000c094:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000c099:	40                   	inc    eax
c000c09a:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000c09f:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000c0a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0aa:	05 7c 09 00 00       	add    eax,0x97c
c000c0af:	83 ec 0c             	sub    esp,0xc
c000c0b2:	50                   	push   eax
c000c0b3:	e8 ce d1 ff ff       	call   c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0c0:	89 c3                	mov    ebx,eax
c000c0c2:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000c0c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0cd:	05 7c 09 00 00       	add    eax,0x97c
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	50                   	push   eax
c000c0d6:	e8 ab d1 ff ff       	call   c0009286 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	83 ec 08             	sub    esp,0x8
c000c0e1:	50                   	push   eax
c000c0e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0e6:	e8 73 f5 ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0f0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0f5:	6a 11                	push   0x11
c000c0f7:	53                   	push   ebx
c000c0f8:	50                   	push   eax
c000c0f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fd:	e8 f2 f8 ff ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c102:	83 c4 10             	add    esp,0x10
c000c105:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000c10a:	48                   	dec    eax
c000c10b:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000c110:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000c115:	85 c0                	test   eax,eax
c000c117:	75 01                	jne    c000c11a <VAS::VAS(bool)+0x27a>
c000c119:	fb                   	sti    
c000c11a:	90                   	nop
c000c11b:	83 c4 28             	add    esp,0x28
c000c11e:	5b                   	pop    ebx
c000c11f:	c3                   	ret    

c000c120 <VAS::VAS()>:
c000c120:	53                   	push   ebx
c000c121:	83 ec 18             	sub    esp,0x18
c000c124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c128:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c133:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c13a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c13e:	a3 b4 63 02 c0       	mov    ds:0xc00263b4,eax
c000c143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c147:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c14b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c14f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c156:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c15d:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000c165:	83 ec 0c             	sub    esp,0xc
c000c168:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c16c:	e8 26 d6 ff ff       	call   c0009797 <malloc>
c000c171:	83 c4 10             	add    esp,0x10
c000c174:	89 c3                	mov    ebx,eax
c000c176:	83 ec 08             	sub    esp,0x8
c000c179:	6a 01                	push   0x1
c000c17b:	53                   	push   ebx
c000c17c:	e8 1f fd ff ff       	call   c000bea0 <VAS::VAS(bool)>
c000c181:	83 c4 10             	add    esp,0x10
c000c184:	89 1d ac 63 02 c0    	mov    DWORD PTR ds:0xc00263ac,ebx
c000c18a:	90                   	nop
c000c18b:	83 c4 18             	add    esp,0x18
c000c18e:	5b                   	pop    ebx
c000c18f:	c3                   	ret    

c000c190 <VAS::evict(unsigned long)>:
c000c190:	55                   	push   ebp
c000c191:	57                   	push   edi
c000c192:	56                   	push   esi
c000c193:	53                   	push   ebx
c000c194:	83 ec 1c             	sub    esp,0x1c
c000c197:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c19b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c19f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1a3:	e8 22 f3 ff ff       	call   c000b4ca <Virt::allocateSwapfilePage()>
c000c1a8:	89 c7                	mov    edi,eax
c000c1aa:	a1 cc 59 02 c0       	mov    eax,ds:0xc00259cc
c000c1af:	85 c0                	test   eax,eax
c000c1b1:	7e 3d                	jle    c000c1f0 <VAS::evict(unsigned long)+0x60>
c000c1b3:	89 ee                	mov    esi,ebp
c000c1b5:	31 db                	xor    ebx,ebx
c000c1b7:	83 ec 0c             	sub    esp,0xc
c000c1ba:	57                   	push   edi
c000c1bb:	e8 f8 f2 ff ff       	call   c000b4b8 <Virt::swapIDToSector(unsigned long)>
c000c1c0:	89 34 24             	mov    DWORD PTR [esp],esi
c000c1c3:	01 d8                	add    eax,ebx
c000c1c5:	6a 01                	push   0x1
c000c1c7:	31 d2                	xor    edx,edx
c000c1c9:	43                   	inc    ebx
c000c1ca:	52                   	push   edx
c000c1cb:	81 c6 00 02 00 00    	add    esi,0x200
c000c1d1:	50                   	push   eax
c000c1d2:	0f be 05 d8 59 02 c0 	movsx  eax,BYTE PTR ds:0xc00259d8
c000c1d9:	ff 34 85 3c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78c4]
c000c1e0:	e8 15 2d 00 00       	call   c000eefa <LogicalDisk::write(unsigned long long, int, void*)>
c000c1e5:	83 c4 20             	add    esp,0x20
c000c1e8:	39 1d cc 59 02 c0    	cmp    DWORD PTR ds:0xc00259cc,ebx
c000c1ee:	7f c7                	jg     c000c1b7 <VAS::evict(unsigned long)+0x27>
c000c1f0:	83 ec 08             	sub    esp,0x8
c000c1f3:	c1 e7 0b             	shl    edi,0xb
c000c1f6:	55                   	push   ebp
c000c1f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1fb:	e8 5e f4 ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000c200:	8b 10                	mov    edx,DWORD PTR [eax]
c000c202:	89 d3                	mov    ebx,edx
c000c204:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c20a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c210:	09 d7                	or     edi,edx
c000c212:	89 38                	mov    DWORD PTR [eax],edi
c000c214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c217:	ff 05 a8 63 02 c0    	inc    DWORD PTR ds:0xc00263a8
c000c21d:	e8 31 d9 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c000c222:	0f 20 d8             	mov    eax,cr3
c000c225:	0f 22 d8             	mov    cr3,eax
c000c228:	ff 35 a8 63 02 c0    	push   DWORD PTR ds:0xc00263a8
c000c22e:	55                   	push   ebp
c000c22f:	53                   	push   ebx
c000c230:	68 84 2f 02 c0       	push   0xc0022f84
c000c235:	e8 ab 04 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c23a:	a1 a4 63 02 c0       	mov    eax,ds:0xc00263a4
c000c23f:	c7 44 24 50 42 30 02 c0 	mov    DWORD PTR [esp+0x50],0xc0023042
c000c247:	8d 50 01             	lea    edx,[eax+0x1]
c000c24a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c24e:	89 15 a4 63 02 c0    	mov    DWORD PTR ds:0xc00263a4,edx
c000c254:	83 c4 3c             	add    esp,0x3c
c000c257:	5b                   	pop    ebx
c000c258:	5e                   	pop    esi
c000c259:	5f                   	pop    edi
c000c25a:	5d                   	pop    ebp
c000c25b:	e9 85 04 00 00       	jmp    c000c6e5 <Dbg::kprintf(char const*, ...)>

c000c260 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c260:	55                   	push   ebp
c000c261:	57                   	push   edi
c000c262:	56                   	push   esi
c000c263:	53                   	push   ebx
c000c264:	83 ec 14             	sub    esp,0x14
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	68 53 30 02 c0       	push   0xc0023053
c000c270:	e8 70 04 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c27c:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c282:	74 20                	je     c000c2a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c284:	83 ec 08             	sub    esp,0x8
c000c287:	55                   	push   ebp
c000c288:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28c:	e8 cd f3 ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000c291:	83 c4 10             	add    esp,0x10
c000c294:	89 c3                	mov    ebx,eax
c000c296:	85 c0                	test   eax,eax
c000c298:	74 0a                	je     c000c2a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c29a:	8b 38                	mov    edi,DWORD PTR [eax]
c000c29c:	f7 c7 01 00 00 00    	test   edi,0x1
c000c2a2:	74 0a                	je     c000c2ae <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c2a4:	31 c0                	xor    eax,eax
c000c2a6:	83 c4 0c             	add    esp,0xc
c000c2a9:	5b                   	pop    ebx
c000c2aa:	5e                   	pop    esi
c000c2ab:	5f                   	pop    edi
c000c2ac:	5d                   	pop    ebp
c000c2ad:	c3                   	ret    
c000c2ae:	e8 23 d9 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000c2b3:	c1 ef 0b             	shr    edi,0xb
c000c2b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c2b8:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c2be:	09 c2                	or     edx,eax
c000c2c0:	81 ca 01 08 00 00    	or     edx,0x801
c000c2c6:	89 13                	mov    DWORD PTR [ebx],edx
c000c2c8:	8b 0d cc 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259cc
c000c2ce:	85 c9                	test   ecx,ecx
c000c2d0:	7e 3d                	jle    c000c30f <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c2d2:	89 ee                	mov    esi,ebp
c000c2d4:	31 db                	xor    ebx,ebx
c000c2d6:	83 ec 0c             	sub    esp,0xc
c000c2d9:	57                   	push   edi
c000c2da:	e8 d9 f1 ff ff       	call   c000b4b8 <Virt::swapIDToSector(unsigned long)>
c000c2df:	89 34 24             	mov    DWORD PTR [esp],esi
c000c2e2:	01 d8                	add    eax,ebx
c000c2e4:	6a 01                	push   0x1
c000c2e6:	31 d2                	xor    edx,edx
c000c2e8:	43                   	inc    ebx
c000c2e9:	52                   	push   edx
c000c2ea:	81 c6 00 02 00 00    	add    esi,0x200
c000c2f0:	50                   	push   eax
c000c2f1:	0f be 05 d8 59 02 c0 	movsx  eax,BYTE PTR ds:0xc00259d8
c000c2f8:	ff 34 85 3c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78c4]
c000c2ff:	e8 8a 2b 00 00       	call   c000ee8e <LogicalDisk::read(unsigned long long, int, void*)>
c000c304:	83 c4 20             	add    esp,0x20
c000c307:	39 1d cc 59 02 c0    	cmp    DWORD PTR ds:0xc00259cc,ebx
c000c30d:	7f c7                	jg     c000c2d6 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c30f:	a1 a8 63 02 c0       	mov    eax,ds:0xc00263a8
c000c314:	48                   	dec    eax
c000c315:	52                   	push   edx
c000c316:	a3 a8 63 02 c0       	mov    ds:0xc00263a8,eax
c000c31b:	50                   	push   eax
c000c31c:	55                   	push   ebp
c000c31d:	68 66 30 02 c0       	push   0xc0023066
c000c322:	e8 be 03 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c327:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c32a:	e8 6b f1 ff ff       	call   c000b49a <Virt::freeSwapfilePage(unsigned long)>
c000c32f:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	48                   	dec    eax
c000c338:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000c33d:	85 c0                	test   eax,eax
c000c33f:	74 1d                	je     c000c35e <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c341:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c345:	25 ff 0f 00 00       	and    eax,0xfff
c000c34a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c34f:	77 10                	ja     c000c361 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c351:	0f 20 d8             	mov    eax,cr3
c000c354:	0f 22 d8             	mov    cr3,eax
c000c357:	b0 01                	mov    al,0x1
c000c359:	e9 48 ff ff ff       	jmp    c000c2a6 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c35e:	fb                   	sti    
c000c35f:	eb e0                	jmp    c000c341 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c361:	83 ec 0c             	sub    esp,0xc
c000c364:	68 7b 30 02 c0       	push   0xc002307b
c000c369:	e8 77 03 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c36e:	83 c4 10             	add    esp,0x10
c000c371:	eb de                	jmp    c000c351 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c373:	90                   	nop

c000c374 <VAS::scanForEviction()>:
c000c374:	57                   	push   edi
c000c375:	31 ff                	xor    edi,edi
c000c377:	56                   	push   esi
c000c378:	53                   	push   ebx
c000c379:	83 ec 10             	sub    esp,0x10
c000c37c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c380:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c383:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c389:	75 0e                	jne    c000c399 <VAS::scanForEviction()+0x25>
c000c38b:	89 da                	mov    edx,ebx
c000c38d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c390:	c1 ea 16             	shr    edx,0x16
c000c393:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c397:	74 4e                	je     c000c3e7 <VAS::scanForEviction()+0x73>
c000c399:	53                   	push   ebx
c000c39a:	56                   	push   esi
c000c39b:	e8 be f2 ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000c3a0:	5a                   	pop    edx
c000c3a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000c3a3:	59                   	pop    ecx
c000c3a4:	89 d1                	mov    ecx,edx
c000c3a6:	81 e1 01 08 00 00    	and    ecx,0x801
c000c3ac:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c3b2:	74 3e                	je     c000c3f2 <VAS::scanForEviction()+0x7e>
c000c3b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3ba:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c3c0:	76 2b                	jbe    c000c3ed <VAS::scanForEviction()+0x79>
c000c3c2:	47                   	inc    edi
c000c3c3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c3ca:	83 ff 03             	cmp    edi,0x3
c000c3cd:	74 32                	je     c000c401 <VAS::scanForEviction()+0x8d>
c000c3cf:	31 db                	xor    ebx,ebx
c000c3d1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c3d7:	75 c0                	jne    c000c399 <VAS::scanForEviction()+0x25>
c000c3d9:	89 da                	mov    edx,ebx
c000c3db:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c3de:	c1 ea 16             	shr    edx,0x16
c000c3e1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c3e5:	75 b2                	jne    c000c399 <VAS::scanForEviction()+0x25>
c000c3e7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c3ed:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c3f0:	eb 91                	jmp    c000c383 <VAS::scanForEviction()+0xf>
c000c3f2:	f6 c2 20             	test   dl,0x20
c000c3f5:	74 13                	je     c000c40a <VAS::scanForEviction()+0x96>
c000c3f7:	83 e2 df             	and    edx,0xffffffdf
c000c3fa:	89 10                	mov    DWORD PTR [eax],edx
c000c3fc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c3ff:	eb b3                	jmp    c000c3b4 <VAS::scanForEviction()+0x40>
c000c401:	83 c4 10             	add    esp,0x10
c000c404:	31 c0                	xor    eax,eax
c000c406:	5b                   	pop    ebx
c000c407:	5e                   	pop    esi
c000c408:	5f                   	pop    edi
c000c409:	c3                   	ret    
c000c40a:	83 ec 08             	sub    esp,0x8
c000c40d:	89 d0                	mov    eax,edx
c000c40f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c414:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c418:	53                   	push   ebx
c000c419:	68 8b 30 02 c0       	push   0xc002308b
c000c41e:	e8 c2 02 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c423:	58                   	pop    eax
c000c424:	5a                   	pop    edx
c000c425:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c428:	56                   	push   esi
c000c429:	e8 62 fd ff ff       	call   c000c190 <VAS::evict(unsigned long)>
c000c42e:	59                   	pop    ecx
c000c42f:	5b                   	pop    ebx
c000c430:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c433:	68 9f 30 02 c0       	push   0xc002309f
c000c438:	e8 a8 02 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c43d:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	5b                   	pop    ebx
c000c44f:	5e                   	pop    esi
c000c450:	5f                   	pop    edi
c000c451:	c3                   	ret    

c000c452 <mapVASFirstTime>:
c000c452:	55                   	push   ebp
c000c453:	57                   	push   edi
c000c454:	56                   	push   esi
c000c455:	53                   	push   ebx
c000c456:	83 ec 0c             	sub    esp,0xc
c000c459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c45e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c461:	4a                   	dec    edx
c000c462:	0f 84 fe 00 00 00    	je     c000c566 <mapVASFirstTime+0x114>
c000c468:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c46b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c46e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c473:	c1 e5 15             	shl    ebp,0x15
c000c476:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c47b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c481:	29 eb                	sub    ebx,ebp
c000c483:	29 ef                	sub    edi,ebp
c000c485:	83 ec 08             	sub    esp,0x8
c000c488:	53                   	push   ebx
c000c489:	68 cb 30 02 c0       	push   0xc00230cb
c000c48e:	e8 52 02 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c493:	e8 3e d7 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000c498:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c49f:	6a 01                	push   0x1
c000c4a1:	53                   	push   ebx
c000c4a2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c4a8:	50                   	push   eax
c000c4a9:	56                   	push   esi
c000c4aa:	e8 3d f8 ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4af:	83 c4 20             	add    esp,0x20
c000c4b2:	39 fb                	cmp    ebx,edi
c000c4b4:	75 cf                	jne    c000c485 <mapVASFirstTime+0x33>
c000c4b6:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c4bb:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c4c0:	29 eb                	sub    ebx,ebp
c000c4c2:	29 ef                	sub    edi,ebp
c000c4c4:	83 ec 08             	sub    esp,0x8
c000c4c7:	53                   	push   ebx
c000c4c8:	68 e7 30 02 c0       	push   0xc00230e7
c000c4cd:	e8 13 02 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c4d2:	58                   	pop    eax
c000c4d3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c4d7:	5a                   	pop    edx
c000c4d8:	19 c0                	sbb    eax,eax
c000c4da:	83 e0 04             	and    eax,0x4
c000c4dd:	05 03 04 00 00       	add    eax,0x403
c000c4e2:	50                   	push   eax
c000c4e3:	68 fb 30 02 c0       	push   0xc00230fb
c000c4e8:	e8 f8 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c4ed:	e8 e4 d6 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c000c4f2:	59                   	pop    ecx
c000c4f3:	89 c5                	mov    ebp,eax
c000c4f5:	58                   	pop    eax
c000c4f6:	55                   	push   ebp
c000c4f7:	68 09 31 02 c0       	push   0xc0023109
c000c4fc:	e8 e4 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c501:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c505:	19 d2                	sbb    edx,edx
c000c507:	83 e2 04             	and    edx,0x4
c000c50a:	81 c2 03 04 00 00    	add    edx,0x403
c000c510:	89 14 24             	mov    DWORD PTR [esp],edx
c000c513:	6a 01                	push   0x1
c000c515:	53                   	push   ebx
c000c516:	55                   	push   ebp
c000c517:	56                   	push   esi
c000c518:	e8 cf f7 ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c51d:	83 c4 18             	add    esp,0x18
c000c520:	53                   	push   ebx
c000c521:	56                   	push   esi
c000c522:	e8 37 f1 ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c000c527:	5a                   	pop    edx
c000c528:	59                   	pop    ecx
c000c529:	ff 30                	push   DWORD PTR [eax]
c000c52b:	68 25 31 02 c0       	push   0xc0023125
c000c530:	e8 b0 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c535:	0f 20 d8             	mov    eax,cr3
c000c538:	83 c4 0c             	add    esp,0xc
c000c53b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c541:	56                   	push   esi
c000c542:	50                   	push   eax
c000c543:	68 30 31 02 c0       	push   0xc0023130
c000c548:	e8 98 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	39 df                	cmp    edi,ebx
c000c552:	0f 85 6c ff ff ff    	jne    c000c4c4 <mapVASFirstTime+0x72>
c000c558:	0f 20 d8             	mov    eax,cr3
c000c55b:	0f 22 d8             	mov    cr3,eax
c000c55e:	83 c4 0c             	add    esp,0xc
c000c561:	5b                   	pop    ebx
c000c562:	5e                   	pop    esi
c000c563:	5f                   	pop    edi
c000c564:	5d                   	pop    ebp
c000c565:	c3                   	ret    
c000c566:	83 ec 0c             	sub    esp,0xc
c000c569:	68 b2 30 02 c0       	push   0xc00230b2
c000c56e:	e8 72 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c573:	83 c4 10             	add    esp,0x10
c000c576:	83 c4 0c             	add    esp,0xc
c000c579:	5b                   	pop    ebx
c000c57a:	5e                   	pop    esi
c000c57b:	5f                   	pop    edi
c000c57c:	5d                   	pop    ebp
c000c57d:	c3                   	ret    

c000c57e <__cxa_atexit>:
c000c57e:	31 c0                	xor    eax,eax
c000c580:	c3                   	ret    

c000c581 <__cxa_finalize>:
c000c581:	c3                   	ret    

c000c582 <__stack_chk_fail>:
c000c582:	55                   	push   ebp
c000c583:	89 e5                	mov    ebp,esp
c000c585:	83 ec 14             	sub    esp,0x14
c000c588:	68 48 31 02 c0       	push   0xc0023148
c000c58d:	e8 53 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c592:	58                   	pop    eax
c000c593:	5a                   	pop    edx
c000c594:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c597:	68 98 31 02 c0       	push   0xc0023198
c000c59c:	e8 44 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c5a1:	59                   	pop    ecx
c000c5a2:	58                   	pop    eax
c000c5a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5a6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5a9:	68 98 31 02 c0       	push   0xc0023198
c000c5ae:	e8 32 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c5b3:	5a                   	pop    edx
c000c5b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5b7:	59                   	pop    ecx
c000c5b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5ba:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5bd:	68 98 31 02 c0       	push   0xc0023198
c000c5c2:	e8 1e 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c5c7:	5a                   	pop    edx
c000c5c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5cb:	59                   	pop    ecx
c000c5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5d0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5d3:	68 98 31 02 c0       	push   0xc0023198
c000c5d8:	e8 08 01 00 00       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000c5dd:	c7 04 24 a0 31 02 c0 	mov    DWORD PTR [esp],0xc00231a0
c000c5e4:	e8 66 64 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	c9                   	leave  
c000c5ed:	c3                   	ret    

c000c5ee <__cxa_pure_virtual>:
c000c5ee:	83 ec 18             	sub    esp,0x18
c000c5f1:	68 b8 31 02 c0       	push   0xc00231b8
c000c5f6:	e8 54 64 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000c5fb:	83 c4 1c             	add    esp,0x1c
c000c5fe:	c3                   	ret    

c000c5ff <operator new[](unsigned long)>:
c000c5ff:	e9 93 d1 ff ff       	jmp    c0009797 <malloc>

c000c604 <operator delete(void*, unsigned long)>:
c000c604:	e9 ae d1 ff ff       	jmp    c00097b7 <rfree>

c000c609 <operator delete[](void*)>:
c000c609:	e9 a9 d1 ff ff       	jmp    c00097b7 <rfree>

c000c60e <operator delete[](void*, unsigned long)>:
c000c60e:	e9 a4 d1 ff ff       	jmp    c00097b7 <rfree>

c000c613 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c613:	55                   	push   ebp
c000c614:	b9 11 00 00 00       	mov    ecx,0x11
c000c619:	57                   	push   edi
c000c61a:	56                   	push   esi
c000c61b:	be 9e 2c 02 c0       	mov    esi,0xc0022c9e
c000c620:	53                   	push   ebx
c000c621:	83 ec 20             	sub    esp,0x20
c000c624:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c628:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c62c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c630:	fc                   	cld    
c000c631:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c633:	89 ee                	mov    esi,ebp
c000c635:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c639:	eb 02                	jmp    c000c63d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c63b:	89 c6                	mov    esi,eax
c000c63d:	31 d2                	xor    edx,edx
c000c63f:	41                   	inc    ecx
c000c640:	89 f0                	mov    eax,esi
c000c642:	f7 f3                	div    ebx
c000c644:	39 de                	cmp    esi,ebx
c000c646:	73 f3                	jae    c000c63b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c648:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c64b:	eb 02                	jmp    c000c64f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c64d:	89 c5                	mov    ebp,eax
c000c64f:	31 d2                	xor    edx,edx
c000c651:	49                   	dec    ecx
c000c652:	89 e8                	mov    eax,ebp
c000c654:	f7 f3                	div    ebx
c000c656:	39 dd                	cmp    ebp,ebx
c000c658:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c65c:	88 11                	mov    BYTE PTR [ecx],dl
c000c65e:	73 ed                	jae    c000c64d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c660:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c664:	83 c4 20             	add    esp,0x20
c000c667:	5b                   	pop    ebx
c000c668:	5e                   	pop    esi
c000c669:	5f                   	pop    edi
c000c66a:	5d                   	pop    ebp
c000c66b:	c3                   	ret    

c000c66c <Dbg::logc(char)>:
c000c66c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c670:	f6 05 e0 62 02 c0 10 	test   BYTE PTR ds:0xc00262e0,0x10
c000c677:	75 12                	jne    c000c68b <Dbg::logc(char)+0x1f>
c000c679:	ba fd 03 00 00       	mov    edx,0x3fd
c000c67e:	ec                   	in     al,dx
c000c67f:	a8 20                	test   al,0x20
c000c681:	74 fb                	je     c000c67e <Dbg::logc(char)+0x12>
c000c683:	ba f8 03 00 00       	mov    edx,0x3f8
c000c688:	88 c8                	mov    al,cl
c000c68a:	ee                   	out    dx,al
c000c68b:	c3                   	ret    

c000c68c <Dbg::logs(char*)>:
c000c68c:	53                   	push   ebx
c000c68d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c691:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c694:	84 c0                	test   al,al
c000c696:	74 0f                	je     c000c6a7 <Dbg::logs(char*)+0x1b>
c000c698:	50                   	push   eax
c000c699:	43                   	inc    ebx
c000c69a:	e8 cd ff ff ff       	call   c000c66c <Dbg::logc(char)>
c000c69f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c6a2:	5a                   	pop    edx
c000c6a3:	84 c0                	test   al,al
c000c6a5:	75 f1                	jne    c000c698 <Dbg::logs(char*)+0xc>
c000c6a7:	5b                   	pop    ebx
c000c6a8:	c3                   	ret    

c000c6a9 <Dbg::logWriteInt(unsigned int)>:
c000c6a9:	83 ec 10             	sub    esp,0x10
c000c6ac:	6a 0a                	push   0xa
c000c6ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c6b2:	50                   	push   eax
c000c6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b7:	e8 57 ff ff ff       	call   c000c613 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c6bc:	50                   	push   eax
c000c6bd:	e8 ca ff ff ff       	call   c000c68c <Dbg::logs(char*)>
c000c6c2:	83 c4 20             	add    esp,0x20
c000c6c5:	c3                   	ret    

c000c6c6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000c6c6:	83 ec 10             	sub    esp,0x10
c000c6c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c6d1:	50                   	push   eax
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	e8 38 ff ff ff       	call   c000c613 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c6db:	50                   	push   eax
c000c6dc:	e8 ab ff ff ff       	call   c000c68c <Dbg::logs(char*)>
c000c6e1:	83 c4 20             	add    esp,0x20
c000c6e4:	c3                   	ret    

c000c6e5 <Dbg::kprintf(char const*, ...)>:
c000c6e5:	55                   	push   ebp
c000c6e6:	57                   	push   edi
c000c6e7:	56                   	push   esi
c000c6e8:	53                   	push   ebx
c000c6e9:	83 ec 0c             	sub    esp,0xc
c000c6ec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c6f0:	f6 05 e0 62 02 c0 10 	test   BYTE PTR ds:0xc00262e0,0x10
c000c6f7:	74 08                	je     c000c701 <Dbg::kprintf(char const*, ...)+0x1c>
c000c6f9:	83 c4 0c             	add    esp,0xc
c000c6fc:	5b                   	pop    ebx
c000c6fd:	5e                   	pop    esi
c000c6fe:	5f                   	pop    edi
c000c6ff:	5d                   	pop    ebp
c000c700:	c3                   	ret    
c000c701:	8d 44 24 24          	lea    eax,[esp+0x24]
c000c705:	31 db                	xor    ebx,ebx
c000c707:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c70b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000c70e:	84 c0                	test   al,al
c000c710:	74 e7                	je     c000c6f9 <Dbg::kprintf(char const*, ...)+0x14>
c000c712:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c715:	3c 25                	cmp    al,0x25
c000c717:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c71a:	75 44                	jne    c000c760 <Dbg::kprintf(char const*, ...)+0x7b>
c000c71c:	83 c3 02             	add    ebx,0x2
c000c71f:	8a 07                	mov    al,BYTE PTR [edi]
c000c721:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000c724:	83 e8 25             	sub    eax,0x25
c000c727:	3c 53                	cmp    al,0x53
c000c729:	0f 87 c9 00 00 00    	ja     c000c7f8 <Dbg::kprintf(char const*, ...)+0x113>
c000c72f:	0f b6 c0             	movzx  eax,al
c000c732:	ff 24 85 cc 31 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdce34]
c000c739:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c73d:	89 c8                	mov    eax,ecx
c000c73f:	83 c1 04             	add    ecx,0x4
c000c742:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c746:	ff 30                	push   DWORD PTR [eax]
c000c748:	e8 5c ff ff ff       	call   c000c6a9 <Dbg::logWriteInt(unsigned int)>
c000c74d:	5f                   	pop    edi
c000c74e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000c752:	84 c0                	test   al,al
c000c754:	74 a3                	je     c000c6f9 <Dbg::kprintf(char const*, ...)+0x14>
c000c756:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c759:	3c 25                	cmp    al,0x25
c000c75b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c75e:	74 bc                	je     c000c71c <Dbg::kprintf(char const*, ...)+0x37>
c000c760:	50                   	push   eax
c000c761:	89 eb                	mov    ebx,ebp
c000c763:	e8 04 ff ff ff       	call   c000c66c <Dbg::logc(char)>
c000c768:	89 fd                	mov    ebp,edi
c000c76a:	58                   	pop    eax
c000c76b:	eb e1                	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c76d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c771:	89 c8                	mov    eax,ecx
c000c773:	83 c1 04             	add    ecx,0x4
c000c776:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c77a:	ff 30                	push   DWORD PTR [eax]
c000c77c:	e8 0b ff ff ff       	call   c000c68c <Dbg::logs(char*)>
c000c781:	58                   	pop    eax
c000c782:	eb ca                	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c784:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c788:	89 d0                	mov    eax,edx
c000c78a:	83 c2 04             	add    edx,0x4
c000c78d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c791:	ff 30                	push   DWORD PTR [eax]
c000c793:	e8 11 ff ff ff       	call   c000c6a9 <Dbg::logWriteInt(unsigned int)>
c000c798:	58                   	pop    eax
c000c799:	eb b3                	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c79b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c79f:	89 d0                	mov    eax,edx
c000c7a1:	83 c2 04             	add    edx,0x4
c000c7a4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000c7a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7ab:	50                   	push   eax
c000c7ac:	e8 bb fe ff ff       	call   c000c66c <Dbg::logc(char)>
c000c7b1:	58                   	pop    eax
c000c7b2:	eb 9a                	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c7b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c7b8:	89 c8                	mov    eax,ecx
c000c7ba:	83 c1 04             	add    ecx,0x4
c000c7bd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c7c1:	6a 10                	push   0x10
c000c7c3:	ff 30                	push   DWORD PTR [eax]
c000c7c5:	e8 fc fe ff ff       	call   c000c6c6 <Dbg::logWriteIntBase(unsigned int, int)>
c000c7ca:	59                   	pop    ecx
c000c7cb:	5f                   	pop    edi
c000c7cc:	eb 80                	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c7ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7d2:	89 d0                	mov    eax,edx
c000c7d4:	83 c2 08             	add    edx,0x8
c000c7d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7db:	6a 10                	push   0x10
c000c7dd:	ff 30                	push   DWORD PTR [eax]
c000c7df:	e8 e2 fe ff ff       	call   c000c6c6 <Dbg::logWriteIntBase(unsigned int, int)>
c000c7e4:	58                   	pop    eax
c000c7e5:	5a                   	pop    edx
c000c7e6:	e9 63 ff ff ff       	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c7eb:	6a 25                	push   0x25
c000c7ed:	e8 7a fe ff ff       	call   c000c66c <Dbg::logc(char)>
c000c7f2:	58                   	pop    eax
c000c7f3:	e9 56 ff ff ff       	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c7f8:	6a 25                	push   0x25
c000c7fa:	e8 6d fe ff ff       	call   c000c66c <Dbg::logc(char)>
c000c7ff:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000c802:	50                   	push   eax
c000c803:	e8 64 fe ff ff       	call   c000c66c <Dbg::logc(char)>
c000c808:	5a                   	pop    edx
c000c809:	59                   	pop    ecx
c000c80a:	e9 3f ff ff ff       	jmp    c000c74e <Dbg::kprintf(char const*, ...)+0x69>
c000c80f:	90                   	nop

c000c810 <File::read(unsigned long long, void*, int*)>:
c000c810:	53                   	push   ebx
c000c811:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c815:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c819:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c820:	3c 19                	cmp    al,0x19
c000c822:	77 35                	ja     c000c859 <File::read(unsigned long long, void*, int*)+0x49>
c000c824:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000c82b:	85 c0                	test   eax,eax
c000c82d:	74 2a                	je     c000c859 <File::read(unsigned long long, void*, int*)+0x49>
c000c82f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c835:	85 c0                	test   eax,eax
c000c837:	74 20                	je     c000c859 <File::read(unsigned long long, void*, int*)+0x49>
c000c839:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c83d:	74 21                	je     c000c860 <File::read(unsigned long long, void*, int*)+0x50>
c000c83f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c841:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c845:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c84b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c84f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c853:	5b                   	pop    ebx
c000c854:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000c857:	ff e0                	jmp    eax
c000c859:	b8 0b 00 00 00       	mov    eax,0xb
c000c85e:	eb 05                	jmp    c000c865 <File::read(unsigned long long, void*, int*)+0x55>
c000c860:	b8 05 00 00 00       	mov    eax,0x5
c000c865:	5b                   	pop    ebx
c000c866:	c3                   	ret    
c000c867:	90                   	nop

c000c868 <File::write(unsigned long long, void*, int*)>:
c000c868:	53                   	push   ebx
c000c869:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c86d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c871:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c878:	3c 19                	cmp    al,0x19
c000c87a:	77 35                	ja     c000c8b1 <File::write(unsigned long long, void*, int*)+0x49>
c000c87c:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000c883:	85 c0                	test   eax,eax
c000c885:	74 2a                	je     c000c8b1 <File::write(unsigned long long, void*, int*)+0x49>
c000c887:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c88d:	85 c0                	test   eax,eax
c000c88f:	74 20                	je     c000c8b1 <File::write(unsigned long long, void*, int*)+0x49>
c000c891:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c895:	74 21                	je     c000c8b8 <File::write(unsigned long long, void*, int*)+0x50>
c000c897:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c899:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c89d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c8a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ab:	5b                   	pop    ebx
c000c8ac:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000c8af:	ff e0                	jmp    eax
c000c8b1:	b8 0b 00 00 00       	mov    eax,0xb
c000c8b6:	eb 05                	jmp    c000c8bd <File::write(unsigned long long, void*, int*)+0x55>
c000c8b8:	b8 05 00 00 00       	mov    eax,0x5
c000c8bd:	5b                   	pop    ebx
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <Directory::read(unsigned long long, void*, int*)>:
c000c8c0:	53                   	push   ebx
c000c8c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c8c9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c8d0:	3c 19                	cmp    al,0x19
c000c8d2:	77 35                	ja     c000c909 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c8d4:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000c8db:	85 c0                	test   eax,eax
c000c8dd:	74 2a                	je     c000c909 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c8df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c8e5:	85 c0                	test   eax,eax
c000c8e7:	74 20                	je     c000c909 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c8e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c8ed:	74 21                	je     c000c910 <Directory::read(unsigned long long, void*, int*)+0x50>
c000c8ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c8f1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c8f5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c8fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c903:	5b                   	pop    ebx
c000c904:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000c907:	ff e0                	jmp    eax
c000c909:	b8 0b 00 00 00       	mov    eax,0xb
c000c90e:	eb 05                	jmp    c000c915 <Directory::read(unsigned long long, void*, int*)+0x55>
c000c910:	b8 05 00 00 00       	mov    eax,0x5
c000c915:	5b                   	pop    ebx
c000c916:	c3                   	ret    
c000c917:	90                   	nop

c000c918 <Directory::write(unsigned long long, void*, int*)>:
c000c918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c91c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000c923:	b8 0b 00 00 00       	mov    eax,0xb
c000c928:	80 fa 19             	cmp    dl,0x19
c000c92b:	77 18                	ja     c000c945 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c92d:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c000c934:	85 d2                	test   edx,edx
c000c936:	74 0d                	je     c000c945 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c938:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000c93f:	19 c0                	sbb    eax,eax
c000c941:	83 e0 0a             	and    eax,0xa
c000c944:	40                   	inc    eax
c000c945:	c3                   	ret    

c000c946 <File::isAtty()>:
c000c946:	31 c0                	xor    eax,eax
c000c948:	c3                   	ret    
c000c949:	90                   	nop

c000c94a <Directory::isAtty()>:
c000c94a:	31 c0                	xor    eax,eax
c000c94c:	c3                   	ret    
c000c94d:	90                   	nop

c000c94e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000c94e:	b8 0a 00 00 00       	mov    eax,0xa
c000c953:	c3                   	ret    

c000c954 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000c954:	b8 0a 00 00 00       	mov    eax,0xa
c000c959:	c3                   	ret    

c000c95a <Filesystem::allocateSwapfile(char const*, int)>:
c000c95a:	31 c0                	xor    eax,eax
c000c95c:	31 d2                	xor    edx,edx
c000c95e:	c3                   	ret    
c000c95f:	90                   	nop

c000c960 <File::~File()>:
c000c960:	83 ec 0c             	sub    esp,0xc
c000c963:	ba 08 34 02 c0       	mov    edx,0xc0023408
c000c968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96c:	89 10                	mov    DWORD PTR [eax],edx
c000c96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c972:	83 ec 0c             	sub    esp,0xc
c000c975:	50                   	push   eax
c000c976:	e8 ad e7 ff ff       	call   c000b128 <UnixFile::~UnixFile()>
c000c97b:	83 c4 10             	add    esp,0x10
c000c97e:	90                   	nop
c000c97f:	83 c4 0c             	add    esp,0xc
c000c982:	c3                   	ret    
c000c983:	90                   	nop

c000c984 <File::~File()>:
c000c984:	83 ec 0c             	sub    esp,0xc
c000c987:	83 ec 0c             	sub    esp,0xc
c000c98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98e:	e8 cd ff ff ff       	call   c000c960 <File::~File()>
c000c993:	83 c4 10             	add    esp,0x10
c000c996:	83 ec 08             	sub    esp,0x8
c000c999:	68 14 01 00 00       	push   0x114
c000c99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a2:	e8 5d fc ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000c9a7:	83 c4 10             	add    esp,0x10
c000c9aa:	83 c4 0c             	add    esp,0xc
c000c9ad:	c3                   	ret    

c000c9ae <Directory::~Directory()>:
c000c9ae:	83 ec 0c             	sub    esp,0xc
c000c9b1:	ba 24 34 02 c0       	mov    edx,0xc0023424
c000c9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ba:	89 10                	mov    DWORD PTR [eax],edx
c000c9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c0:	83 ec 0c             	sub    esp,0xc
c000c9c3:	50                   	push   eax
c000c9c4:	e8 5f e7 ff ff       	call   c000b128 <UnixFile::~UnixFile()>
c000c9c9:	83 c4 10             	add    esp,0x10
c000c9cc:	90                   	nop
c000c9cd:	83 c4 0c             	add    esp,0xc
c000c9d0:	c3                   	ret    
c000c9d1:	90                   	nop

c000c9d2 <Directory::~Directory()>:
c000c9d2:	83 ec 0c             	sub    esp,0xc
c000c9d5:	83 ec 0c             	sub    esp,0xc
c000c9d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9dc:	e8 cd ff ff ff       	call   c000c9ae <Directory::~Directory()>
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	83 ec 08             	sub    esp,0x8
c000c9e7:	68 14 01 00 00       	push   0x114
c000c9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f0:	e8 0f fc ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000c9f5:	83 c4 10             	add    esp,0x10
c000c9f8:	83 c4 0c             	add    esp,0xc
c000c9fb:	c3                   	ret    

c000c9fc <Filesystem::Filesystem()>:
c000c9fc:	ba a0 33 02 c0       	mov    edx,0xc00233a0
c000ca01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca05:	89 10                	mov    DWORD PTR [eax],edx
c000ca07:	8b 15 b8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263b8
c000ca0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ca14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca18:	a3 b8 63 02 c0       	mov    ds:0xc00263b8,eax
c000ca1d:	90                   	nop
c000ca1e:	c3                   	ret    
c000ca1f:	90                   	nop

c000ca20 <Filesystem::~Filesystem()>:
c000ca20:	ba a0 33 02 c0       	mov    edx,0xc00233a0
c000ca25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca29:	89 10                	mov    DWORD PTR [eax],edx
c000ca2b:	90                   	nop
c000ca2c:	c3                   	ret    
c000ca2d:	90                   	nop

c000ca2e <Filesystem::~Filesystem()>:
c000ca2e:	83 ec 0c             	sub    esp,0xc
c000ca31:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ca35:	e8 e6 ff ff ff       	call   c000ca20 <Filesystem::~Filesystem()>
c000ca3a:	83 c4 04             	add    esp,0x4
c000ca3d:	83 ec 08             	sub    esp,0x8
c000ca40:	6a 08                	push   0x8
c000ca42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca46:	e8 b9 fb ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000ca4b:	83 c4 10             	add    esp,0x10
c000ca4e:	83 c4 0c             	add    esp,0xc
c000ca51:	c3                   	ret    

c000ca52 <Fs::getcwd(Process*, char*, int)>:
c000ca52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca56:	31 c0                	xor    eax,eax
c000ca58:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ca5f:	7d 15                	jge    c000ca76 <Fs::getcwd(Process*, char*, int)+0x24>
c000ca61:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca65:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ca6c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ca6f:	84 c9                	test   cl,cl
c000ca71:	74 06                	je     c000ca79 <Fs::getcwd(Process*, char*, int)+0x27>
c000ca73:	40                   	inc    eax
c000ca74:	eb e2                	jmp    c000ca58 <Fs::getcwd(Process*, char*, int)+0x6>
c000ca76:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ca79:	31 c0                	xor    eax,eax
c000ca7b:	c3                   	ret    

c000ca7c <Fs::initVFS()>:
c000ca7c:	83 ec 18             	sub    esp,0x18
c000ca7f:	6a 08                	push   0x8
c000ca81:	e8 11 cd ff ff       	call   c0009797 <malloc>
c000ca86:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca89:	e8 be e4 00 00       	call   c001af4c <FAT::FAT()>
c000ca8e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ca95:	e8 fd cc ff ff       	call   c0009797 <malloc>
c000ca9a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca9d:	e8 3a f7 00 00       	call   c001c1dc <ISO9660::ISO9660()>
c000caa2:	83 c4 1c             	add    esp,0x1c
c000caa5:	c3                   	ret    

c000caa6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000caa6:	55                   	push   ebp
c000caa7:	57                   	push   edi
c000caa8:	56                   	push   esi
c000caa9:	53                   	push   ebx
c000caaa:	81 ec 10 04 00 00    	sub    esp,0x410
c000cab0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000cab7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000cabe:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000cac5:	68 00 04 00 00       	push   0x400
c000caca:	6a 00                	push   0x0
c000cacc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000cad0:	56                   	push   esi
c000cad1:	e8 d2 39 ff ff       	call   c00004a8 <memset>
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000cadd:	75 0b                	jne    c000caea <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000cadf:	50                   	push   eax
c000cae0:	50                   	push   eax
c000cae1:	57                   	push   edi
c000cae2:	56                   	push   esi
c000cae3:	e8 7c 3a ff ff       	call   c0000564 <strcpy>
c000cae8:	eb 41                	jmp    c000cb2b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000caea:	8a 07                	mov    al,BYTE PTR [edi]
c000caec:	3c 5c                	cmp    al,0x5c
c000caee:	74 04                	je     c000caf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000caf0:	3c 2f                	cmp    al,0x2f
c000caf2:	75 18                	jne    c000cb0c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000caf4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000caf7:	3c 60                	cmp    al,0x60
c000caf9:	7e 03                	jle    c000cafe <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000cafb:	83 e8 20             	sub    eax,0x20
c000cafe:	88 04 24             	mov    BYTE PTR [esp],al
c000cb01:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cb08:	50                   	push   eax
c000cb09:	50                   	push   eax
c000cb0a:	eb 18                	jmp    c000cb24 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cb0c:	50                   	push   eax
c000cb0d:	50                   	push   eax
c000cb0e:	55                   	push   ebp
c000cb0f:	56                   	push   esi
c000cb10:	e8 4f 3a ff ff       	call   c0000564 <strcpy>
c000cb15:	5a                   	pop    edx
c000cb16:	59                   	pop    ecx
c000cb17:	68 b3 44 02 c0       	push   0xc00244b3
c000cb1c:	56                   	push   esi
c000cb1d:	e8 82 3b ff ff       	call   c00006a4 <strcat>
c000cb22:	5d                   	pop    ebp
c000cb23:	58                   	pop    eax
c000cb24:	57                   	push   edi
c000cb25:	56                   	push   esi
c000cb26:	e8 79 3b ff ff       	call   c00006a4 <strcat>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cb31:	3c 60                	cmp    al,0x60
c000cb33:	7e 03                	jle    c000cb38 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cb35:	83 e8 20             	sub    eax,0x20
c000cb38:	88 04 24             	mov    BYTE PTR [esp],al
c000cb3b:	88 03                	mov    BYTE PTR [ebx],al
c000cb3d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cb44:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cb4a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cb4e:	bf 03 00 00 00       	mov    edi,0x3
c000cb53:	b8 03 00 00 00       	mov    eax,0x3
c000cb58:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cb5b:	84 d2                	test   dl,dl
c000cb5d:	0f 84 91 00 00 00    	je     c000cbf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cb63:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cb66:	80 fa 5c             	cmp    dl,0x5c
c000cb69:	74 05                	je     c000cb70 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cb6b:	80 fa 2f             	cmp    dl,0x2f
c000cb6e:	75 12                	jne    c000cb82 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cb70:	89 c5                	mov    ebp,eax
c000cb72:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cb77:	74 09                	je     c000cb82 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cb79:	40                   	inc    eax
c000cb7a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cb7e:	89 cf                	mov    edi,ecx
c000cb80:	eb d6                	jmp    c000cb58 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cb82:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cb87:	75 5b                	jne    c000cbe4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cb89:	80 fa 2e             	cmp    dl,0x2e
c000cb8c:	75 56                	jne    c000cbe4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cb8e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cb92:	74 19                	je     c000cbad <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cb94:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cb99:	74 53                	je     c000cbee <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cb9b:	89 f9                	mov    ecx,edi
c000cb9d:	41                   	inc    ecx
c000cb9e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cba1:	80 fa 2f             	cmp    dl,0x2f
c000cba4:	74 f7                	je     c000cb9d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cba6:	80 fa 5c             	cmp    dl,0x5c
c000cba9:	74 f2                	je     c000cb9d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cbab:	eb d1                	jmp    c000cb7e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbad:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cbb2:	74 3a                	je     c000cbee <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cbb4:	83 f8 03             	cmp    eax,0x3
c000cbb7:	74 c5                	je     c000cb7e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbb9:	41                   	inc    ecx
c000cbba:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cbbd:	80 fa 2f             	cmp    dl,0x2f
c000cbc0:	74 f7                	je     c000cbb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cbc2:	80 fa 5c             	cmp    dl,0x5c
c000cbc5:	74 f2                	je     c000cbb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cbc7:	48                   	dec    eax
c000cbc8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cbcc:	75 06                	jne    c000cbd4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cbce:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cbd2:	eb f3                	jmp    c000cbc7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cbd4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cbd8:	74 07                	je     c000cbe1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cbda:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cbde:	48                   	dec    eax
c000cbdf:	eb f3                	jmp    c000cbd4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cbe1:	40                   	inc    eax
c000cbe2:	eb 9a                	jmp    c000cb7e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbe4:	80 fa 2f             	cmp    dl,0x2f
c000cbe7:	74 95                	je     c000cb7e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbe9:	80 fa 5c             	cmp    dl,0x5c
c000cbec:	74 90                	je     c000cb7e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbee:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cbf1:	40                   	inc    eax
c000cbf2:	eb 8a                	jmp    c000cb7e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbf4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cbf8:	83 ec 0c             	sub    esp,0xc
c000cbfb:	53                   	push   ebx
c000cbfc:	e8 c3 38 ff ff       	call   c00004c4 <strlen>
c000cc01:	83 c4 10             	add    esp,0x10
c000cc04:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cc09:	75 26                	jne    c000cc31 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cc0b:	83 ec 0c             	sub    esp,0xc
c000cc0e:	53                   	push   ebx
c000cc0f:	e8 b0 38 ff ff       	call   c00004c4 <strlen>
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cc1c:	74 26                	je     c000cc44 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cc1e:	83 ec 0c             	sub    esp,0xc
c000cc21:	53                   	push   ebx
c000cc22:	e8 9d 38 ff ff       	call   c00004c4 <strlen>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cc2f:	eb c7                	jmp    c000cbf8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cc31:	83 ec 0c             	sub    esp,0xc
c000cc34:	53                   	push   ebx
c000cc35:	e8 8a 38 ff ff       	call   c00004c4 <strlen>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cc42:	74 c7                	je     c000cc0b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cc44:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cc4a:	5b                   	pop    ebx
c000cc4b:	5e                   	pop    esi
c000cc4c:	5f                   	pop    edi
c000cc4d:	5d                   	pop    ebp
c000cc4e:	c3                   	ret    
c000cc4f:	90                   	nop

c000cc50 <File::File(char const*, Process*)>:
c000cc50:	83 ec 0c             	sub    esp,0xc
c000cc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc57:	83 ec 08             	sub    esp,0x8
c000cc5a:	6a 00                	push   0x0
c000cc5c:	50                   	push   eax
c000cc5d:	e8 e4 e2 ff ff       	call   c000af46 <UnixFile::UnixFile(int)>
c000cc62:	83 c4 10             	add    esp,0x10
c000cc65:	ba 08 34 02 c0       	mov    edx,0xc0023408
c000cc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc6e:	89 10                	mov    DWORD PTR [eax],edx
c000cc70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cc74:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7e:	83 c0 0d             	add    eax,0xd
c000cc81:	83 ec 04             	sub    esp,0x4
c000cc84:	52                   	push   edx
c000cc85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc89:	50                   	push   eax
c000cc8a:	e8 17 fe ff ff       	call   c000caa6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc96:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000cc99:	8d 50 bf             	lea    edx,[eax-0x41]
c000cc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccaa:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ccae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ccb8:	0f b6 c0             	movzx  eax,al
c000ccbb:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000ccc2:	85 c0                	test   eax,eax
c000ccc4:	74 5e                	je     c000cd24 <File::File(char const*, Process*)+0xd4>
c000ccc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ccd0:	0f b6 c0             	movzx  eax,al
c000ccd3:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000ccda:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cce0:	85 c0                	test   eax,eax
c000cce2:	75 40                	jne    c000cd24 <File::File(char const*, Process*)+0xd4>
c000cce4:	83 ec 0c             	sub    esp,0xc
c000cce7:	68 44 33 02 c0       	push   0xc0023344
c000ccec:	e8 f4 f9 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000ccf1:	83 c4 10             	add    esp,0x10
c000ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ccfe:	0f b6 c0             	movzx  eax,al
c000cd01:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	50                   	push   eax
c000cd0c:	e8 7b 20 00 00       	call   c000ed8c <LogicalDisk::mount()>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	68 ff 52 02 c0       	push   0xc00252ff
c000cd1c:	e8 c4 f9 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	90                   	nop
c000cd25:	83 c4 0c             	add    esp,0xc
c000cd28:	c3                   	ret    
c000cd29:	90                   	nop

c000cd2a <File::open(FileOpenMode)>:
c000cd2a:	53                   	push   ebx
c000cd2b:	b8 0b 00 00 00       	mov    eax,0xb
c000cd30:	83 ec 08             	sub    esp,0x8
c000cd33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd37:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000cd3e:	80 fa 19             	cmp    dl,0x19
c000cd41:	77 40                	ja     c000cd83 <File::open(FileOpenMode)+0x59>
c000cd43:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c000cd4a:	85 d2                	test   edx,edx
c000cd4c:	74 35                	je     c000cd83 <File::open(FileOpenMode)+0x59>
c000cd4e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cd54:	85 d2                	test   edx,edx
c000cd56:	74 2b                	je     c000cd83 <File::open(FileOpenMode)+0x59>
c000cd58:	b8 06 00 00 00       	mov    eax,0x6
c000cd5d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000cd61:	75 20                	jne    c000cd83 <File::open(FileOpenMode)+0x59>
c000cd63:	8b 02                	mov    eax,DWORD PTR [edx]
c000cd65:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000cd6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6f:	51                   	push   ecx
c000cd70:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000cd73:	51                   	push   ecx
c000cd74:	52                   	push   edx
c000cd75:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cd78:	83 c4 10             	add    esp,0x10
c000cd7b:	85 c0                	test   eax,eax
c000cd7d:	75 04                	jne    c000cd83 <File::open(FileOpenMode)+0x59>
c000cd7f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000cd83:	83 c4 08             	add    esp,0x8
c000cd86:	5b                   	pop    ebx
c000cd87:	c3                   	ret    

c000cd88 <File::close()>:
c000cd88:	53                   	push   ebx
c000cd89:	b8 0b 00 00 00       	mov    eax,0xb
c000cd8e:	83 ec 08             	sub    esp,0x8
c000cd91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cd95:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000cd9c:	80 fa 19             	cmp    dl,0x19
c000cd9f:	77 41                	ja     c000cde2 <File::close()+0x5a>
c000cda1:	8b 1c 95 40 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd77c0]
c000cda8:	85 db                	test   ebx,ebx
c000cdaa:	74 36                	je     c000cde2 <File::close()+0x5a>
c000cdac:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000cdb3:	74 2d                	je     c000cde2 <File::close()+0x5a>
c000cdb5:	b8 05 00 00 00       	mov    eax,0x5
c000cdba:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000cdbe:	74 22                	je     c000cde2 <File::close()+0x5a>
c000cdc0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000cdc4:	8b 04 95 40 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77c0]
c000cdcb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cdd1:	53                   	push   ebx
c000cdd2:	53                   	push   ebx
c000cdd3:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdd5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000cddb:	50                   	push   eax
c000cddc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	83 c4 08             	add    esp,0x8
c000cde5:	5b                   	pop    ebx
c000cde6:	c3                   	ret    
c000cde7:	90                   	nop

c000cde8 <File::seek(unsigned long long)>:
c000cde8:	56                   	push   esi
c000cde9:	53                   	push   ebx
c000cdea:	b8 0b 00 00 00       	mov    eax,0xb
c000cdef:	51                   	push   ecx
c000cdf0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdf4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdf8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000cdff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce03:	80 fa 19             	cmp    dl,0x19
c000ce06:	77 31                	ja     c000ce39 <File::seek(unsigned long long)+0x51>
c000ce08:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c000ce0f:	85 d2                	test   edx,edx
c000ce11:	74 26                	je     c000ce39 <File::seek(unsigned long long)+0x51>
c000ce13:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ce19:	85 d2                	test   edx,edx
c000ce1b:	74 1c                	je     c000ce39 <File::seek(unsigned long long)+0x51>
c000ce1d:	b8 05 00 00 00       	mov    eax,0x5
c000ce22:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ce26:	74 11                	je     c000ce39 <File::seek(unsigned long long)+0x51>
c000ce28:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce2a:	53                   	push   ebx
c000ce2b:	51                   	push   ecx
c000ce2c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ce32:	52                   	push   edx
c000ce33:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce36:	83 c4 10             	add    esp,0x10
c000ce39:	5a                   	pop    edx
c000ce3a:	5b                   	pop    ebx
c000ce3b:	5e                   	pop    esi
c000ce3c:	c3                   	ret    
c000ce3d:	90                   	nop

c000ce3e <File::tell(unsigned long long*)>:
c000ce3e:	83 ec 0c             	sub    esp,0xc
c000ce41:	b8 0b 00 00 00       	mov    eax,0xb
c000ce46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce4a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ce51:	80 fa 19             	cmp    dl,0x19
c000ce54:	77 34                	ja     c000ce8a <File::tell(unsigned long long*)+0x4c>
c000ce56:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c000ce5d:	85 d2                	test   edx,edx
c000ce5f:	74 29                	je     c000ce8a <File::tell(unsigned long long*)+0x4c>
c000ce61:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ce67:	85 d2                	test   edx,edx
c000ce69:	74 1f                	je     c000ce8a <File::tell(unsigned long long*)+0x4c>
c000ce6b:	b8 05 00 00 00       	mov    eax,0x5
c000ce70:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ce74:	74 14                	je     c000ce8a <File::tell(unsigned long long*)+0x4c>
c000ce76:	50                   	push   eax
c000ce77:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce7d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ce83:	52                   	push   edx
c000ce84:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce87:	83 c4 10             	add    esp,0x10
c000ce8a:	83 c4 0c             	add    esp,0xc
c000ce8d:	c3                   	ret    

c000ce8e <File::rewind()>:
c000ce8e:	83 ec 10             	sub    esp,0x10
c000ce91:	6a 00                	push   0x0
c000ce93:	6a 00                	push   0x0
c000ce95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce99:	e8 4a ff ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c000ce9e:	83 c4 1c             	add    esp,0x1c
c000cea1:	c3                   	ret    

c000cea2 <File::unlink()>:
c000cea2:	83 ec 0c             	sub    esp,0xc
c000cea5:	b8 0b 00 00 00       	mov    eax,0xb
c000ceaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ceae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ceb5:	80 f9 19             	cmp    cl,0x19
c000ceb8:	77 2f                	ja     c000cee9 <File::unlink()+0x47>
c000ceba:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000cec1:	85 c9                	test   ecx,ecx
c000cec3:	74 24                	je     c000cee9 <File::unlink()+0x47>
c000cec5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cecb:	85 c9                	test   ecx,ecx
c000cecd:	74 1a                	je     c000cee9 <File::unlink()+0x47>
c000cecf:	b8 06 00 00 00       	mov    eax,0x6
c000ced4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ced8:	75 0f                	jne    c000cee9 <File::unlink()+0x47>
c000ceda:	83 c2 0d             	add    edx,0xd
c000cedd:	50                   	push   eax
c000cede:	50                   	push   eax
c000cedf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cee1:	52                   	push   edx
c000cee2:	51                   	push   ecx
c000cee3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000cee6:	83 c4 10             	add    esp,0x10
c000cee9:	83 c4 0c             	add    esp,0xc
c000ceec:	c3                   	ret    
c000ceed:	90                   	nop

c000ceee <File::rename(char const*)>:
c000ceee:	83 ec 0c             	sub    esp,0xc
c000cef1:	b8 0b 00 00 00       	mov    eax,0xb
c000cef6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cefa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf01:	80 f9 19             	cmp    cl,0x19
c000cf04:	77 32                	ja     c000cf38 <File::rename(char const*)+0x4a>
c000cf06:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000cf0d:	85 c9                	test   ecx,ecx
c000cf0f:	74 27                	je     c000cf38 <File::rename(char const*)+0x4a>
c000cf11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf17:	85 c9                	test   ecx,ecx
c000cf19:	74 1d                	je     c000cf38 <File::rename(char const*)+0x4a>
c000cf1b:	b8 06 00 00 00       	mov    eax,0x6
c000cf20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf24:	75 12                	jne    c000cf38 <File::rename(char const*)+0x4a>
c000cf26:	83 c2 0d             	add    edx,0xd
c000cf29:	50                   	push   eax
c000cf2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cf2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf30:	52                   	push   edx
c000cf31:	51                   	push   ecx
c000cf32:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	83 c4 0c             	add    esp,0xc
c000cf3b:	c3                   	ret    

c000cf3c <File::chfatattr(unsigned char, unsigned char)>:
c000cf3c:	57                   	push   edi
c000cf3d:	b8 0b 00 00 00       	mov    eax,0xb
c000cf42:	56                   	push   esi
c000cf43:	53                   	push   ebx
c000cf44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf53:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000cf57:	80 f9 19             	cmp    cl,0x19
c000cf5a:	77 37                	ja     c000cf93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf5c:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000cf63:	85 c9                	test   ecx,ecx
c000cf65:	74 2c                	je     c000cf93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf6d:	85 c9                	test   ecx,ecx
c000cf6f:	74 22                	je     c000cf93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf71:	b8 06 00 00 00       	mov    eax,0x6
c000cf76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf7a:	75 17                	jne    c000cf93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf7c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000cf7e:	89 f0                	mov    eax,esi
c000cf80:	83 c2 0d             	add    edx,0xd
c000cf83:	0f b6 f0             	movzx  esi,al
c000cf86:	0f b6 db             	movzx  ebx,bl
c000cf89:	56                   	push   esi
c000cf8a:	53                   	push   ebx
c000cf8b:	52                   	push   edx
c000cf8c:	51                   	push   ecx
c000cf8d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	5b                   	pop    ebx
c000cf94:	5e                   	pop    esi
c000cf95:	5f                   	pop    edi
c000cf96:	c3                   	ret    
c000cf97:	90                   	nop

c000cf98 <File::exists()>:
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	31 c0                	xor    eax,eax
c000cf9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cfa1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cfa8:	80 f9 19             	cmp    cl,0x19
c000cfab:	77 24                	ja     c000cfd1 <File::exists()+0x39>
c000cfad:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000cfb4:	85 c9                	test   ecx,ecx
c000cfb6:	74 19                	je     c000cfd1 <File::exists()+0x39>
c000cfb8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cfbe:	85 c9                	test   ecx,ecx
c000cfc0:	74 0f                	je     c000cfd1 <File::exists()+0x39>
c000cfc2:	83 c2 0d             	add    edx,0xd
c000cfc5:	50                   	push   eax
c000cfc6:	50                   	push   eax
c000cfc7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cfc9:	52                   	push   edx
c000cfca:	51                   	push   ecx
c000cfcb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000cfce:	83 c4 10             	add    esp,0x10
c000cfd1:	83 c4 0c             	add    esp,0xc
c000cfd4:	c3                   	ret    
c000cfd5:	90                   	nop

c000cfd6 <File::stat(unsigned long long*, bool*)>:
c000cfd6:	56                   	push   esi
c000cfd7:	53                   	push   ebx
c000cfd8:	50                   	push   eax
c000cfd9:	b8 0b 00 00 00       	mov    eax,0xb
c000cfde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cfe2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cfe6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cfed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cff1:	80 f9 19             	cmp    cl,0x19
c000cff4:	77 3d                	ja     c000d033 <File::stat(unsigned long long*, bool*)+0x5d>
c000cff6:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000cffd:	85 c9                	test   ecx,ecx
c000cfff:	74 32                	je     c000d033 <File::stat(unsigned long long*, bool*)+0x5d>
c000d001:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d007:	85 c9                	test   ecx,ecx
c000d009:	74 28                	je     c000d033 <File::stat(unsigned long long*, bool*)+0x5d>
c000d00b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d00d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d011:	74 13                	je     c000d026 <File::stat(unsigned long long*, bool*)+0x50>
c000d013:	83 ec 04             	sub    esp,0x4
c000d016:	56                   	push   esi
c000d017:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d01d:	51                   	push   ecx
c000d01e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d021:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d024:	eb 0a                	jmp    c000d030 <File::stat(unsigned long long*, bool*)+0x5a>
c000d026:	53                   	push   ebx
c000d027:	83 c2 0d             	add    edx,0xd
c000d02a:	56                   	push   esi
c000d02b:	52                   	push   edx
c000d02c:	51                   	push   ecx
c000d02d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d030:	83 c4 10             	add    esp,0x10
c000d033:	5a                   	pop    edx
c000d034:	5b                   	pop    ebx
c000d035:	5e                   	pop    esi
c000d036:	c3                   	ret    

c000d037 <Fs::setcwd(Process*, char*)>:
c000d037:	55                   	push   ebp
c000d038:	57                   	push   edi
c000d039:	56                   	push   esi
c000d03a:	53                   	push   ebx
c000d03b:	81 ec 20 02 00 00    	sub    esp,0x220
c000d041:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d048:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d04e:	57                   	push   edi
c000d04f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d056:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d05a:	56                   	push   esi
c000d05b:	e8 46 fa ff ff       	call   c000caa6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d060:	89 34 24             	mov    DWORD PTR [esp],esi
c000d063:	e8 5c 34 ff ff       	call   c00004c4 <strlen>
c000d068:	83 c4 10             	add    esp,0x10
c000d06b:	83 f8 02             	cmp    eax,0x2
c000d06e:	77 15                	ja     c000d085 <Fs::setcwd(Process*, char*)+0x4e>
c000d070:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d075:	83 eb 41             	sub    ebx,0x41
c000d078:	8b 04 9d 40 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd77c0]
c000d07f:	85 c0                	test   eax,eax
c000d081:	75 1c                	jne    c000d09f <Fs::setcwd(Process*, char*)+0x68>
c000d083:	eb 4c                	jmp    c000d0d1 <Fs::setcwd(Process*, char*)+0x9a>
c000d085:	83 ec 0c             	sub    esp,0xc
c000d088:	56                   	push   esi
c000d089:	e8 36 34 ff ff       	call   c00004c4 <strlen>
c000d08e:	83 c4 10             	add    esp,0x10
c000d091:	83 f8 03             	cmp    eax,0x3
c000d094:	75 74                	jne    c000d10a <Fs::setcwd(Process*, char*)+0xd3>
c000d096:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d09b:	75 6d                	jne    c000d10a <Fs::setcwd(Process*, char*)+0xd3>
c000d09d:	eb d1                	jmp    c000d070 <Fs::setcwd(Process*, char*)+0x39>
c000d09f:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d0a6:	75 29                	jne    c000d0d1 <Fs::setcwd(Process*, char*)+0x9a>
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	68 1c 33 02 c0       	push   0xc002331c
c000d0b0:	e8 30 f6 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000d0b5:	5a                   	pop    edx
c000d0b6:	ff 34 9d 40 88 02 c0 	push   DWORD PTR [ebx*4-0x3ffd77c0]
c000d0bd:	e8 ca 1c 00 00       	call   c000ed8c <LogicalDisk::mount()>
c000d0c2:	c7 04 24 ff 52 02 c0 	mov    DWORD PTR [esp],0xc00252ff
c000d0c9:	e8 17 f6 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000d0ce:	83 c4 10             	add    esp,0x10
c000d0d1:	b8 03 00 00 00       	mov    eax,0x3
c000d0d6:	83 fb 19             	cmp    ebx,0x19
c000d0d9:	0f 87 c6 00 00 00    	ja     c000d1a5 <Fs::setcwd(Process*, char*)+0x16e>
c000d0df:	8b 14 9d 40 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd77c0]
c000d0e6:	b8 05 00 00 00       	mov    eax,0x5
c000d0eb:	85 d2                	test   edx,edx
c000d0ed:	0f 84 b2 00 00 00    	je     c000d1a5 <Fs::setcwd(Process*, char*)+0x16e>
c000d0f3:	b8 06 00 00 00       	mov    eax,0x6
c000d0f8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d0ff:	0f 85 92 00 00 00    	jne    c000d197 <Fs::setcwd(Process*, char*)+0x160>
c000d105:	e9 9b 00 00 00       	jmp    c000d1a5 <Fs::setcwd(Process*, char*)+0x16e>
c000d10a:	83 ec 0c             	sub    esp,0xc
c000d10d:	68 14 01 00 00       	push   0x114
c000d112:	e8 80 c6 ff ff       	call   c0009797 <malloc>
c000d117:	83 c4 0c             	add    esp,0xc
c000d11a:	89 c3                	mov    ebx,eax
c000d11c:	55                   	push   ebp
c000d11d:	56                   	push   esi
c000d11e:	50                   	push   eax
c000d11f:	e8 2c fb ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c000d124:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d129:	83 c4 0c             	add    esp,0xc
c000d12c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d130:	50                   	push   eax
c000d131:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d135:	50                   	push   eax
c000d136:	53                   	push   ebx
c000d137:	e8 9a fe ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	83 f8 02             	cmp    eax,0x2
c000d142:	74 04                	je     c000d148 <Fs::setcwd(Process*, char*)+0x111>
c000d144:	85 c0                	test   eax,eax
c000d146:	74 1c                	je     c000d164 <Fs::setcwd(Process*, char*)+0x12d>
c000d148:	b8 01 00 00 00       	mov    eax,0x1
c000d14d:	85 db                	test   ebx,ebx
c000d14f:	74 54                	je     c000d1a5 <Fs::setcwd(Process*, char*)+0x16e>
c000d151:	83 ec 0c             	sub    esp,0xc
c000d154:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d156:	53                   	push   ebx
c000d157:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d15a:	83 c4 10             	add    esp,0x10
c000d15d:	b8 01 00 00 00       	mov    eax,0x1
c000d162:	eb 41                	jmp    c000d1a5 <Fs::setcwd(Process*, char*)+0x16e>
c000d164:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d169:	75 1c                	jne    c000d187 <Fs::setcwd(Process*, char*)+0x150>
c000d16b:	b8 02 00 00 00       	mov    eax,0x2
c000d170:	85 db                	test   ebx,ebx
c000d172:	74 31                	je     c000d1a5 <Fs::setcwd(Process*, char*)+0x16e>
c000d174:	83 ec 0c             	sub    esp,0xc
c000d177:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d179:	53                   	push   ebx
c000d17a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d17d:	83 c4 10             	add    esp,0x10
c000d180:	b8 02 00 00 00       	mov    eax,0x2
c000d185:	eb 1e                	jmp    c000d1a5 <Fs::setcwd(Process*, char*)+0x16e>
c000d187:	85 db                	test   ebx,ebx
c000d189:	74 0c                	je     c000d197 <Fs::setcwd(Process*, char*)+0x160>
c000d18b:	83 ec 0c             	sub    esp,0xc
c000d18e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d190:	53                   	push   ebx
c000d191:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d194:	83 c4 10             	add    esp,0x10
c000d197:	50                   	push   eax
c000d198:	50                   	push   eax
c000d199:	56                   	push   esi
c000d19a:	57                   	push   edi
c000d19b:	e8 c4 33 ff ff       	call   c0000564 <strcpy>
c000d1a0:	83 c4 10             	add    esp,0x10
c000d1a3:	31 c0                	xor    eax,eax
c000d1a5:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d1ab:	5b                   	pop    ebx
c000d1ac:	5e                   	pop    esi
c000d1ad:	5f                   	pop    edi
c000d1ae:	5d                   	pop    ebp
c000d1af:	c3                   	ret    

c000d1b0 <Directory::Directory(char const*, Process*)>:
c000d1b0:	83 ec 0c             	sub    esp,0xc
c000d1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b7:	83 ec 08             	sub    esp,0x8
c000d1ba:	6a 00                	push   0x0
c000d1bc:	50                   	push   eax
c000d1bd:	e8 84 dd ff ff       	call   c000af46 <UnixFile::UnixFile(int)>
c000d1c2:	83 c4 10             	add    esp,0x10
c000d1c5:	ba 24 34 02 c0       	mov    edx,0xc0023424
c000d1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ce:	89 10                	mov    DWORD PTR [eax],edx
c000d1d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1d4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1de:	83 c0 0d             	add    eax,0xd
c000d1e1:	83 ec 04             	sub    esp,0x4
c000d1e4:	52                   	push   edx
c000d1e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e9:	50                   	push   eax
c000d1ea:	e8 b7 f8 ff ff       	call   c000caa6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d1f9:	8d 50 bf             	lea    edx,[eax-0x41]
c000d1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d200:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d212:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d218:	0f b6 c0             	movzx  eax,al
c000d21b:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000d222:	85 c0                	test   eax,eax
c000d224:	74 5e                	je     c000d284 <Directory::Directory(char const*, Process*)+0xd4>
c000d226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d22a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d230:	0f b6 c0             	movzx  eax,al
c000d233:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000d23a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d240:	85 c0                	test   eax,eax
c000d242:	75 40                	jne    c000d284 <Directory::Directory(char const*, Process*)+0xd4>
c000d244:	83 ec 0c             	sub    esp,0xc
c000d247:	68 6c 33 02 c0       	push   0xc002336c
c000d24c:	e8 94 f4 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000d251:	83 c4 10             	add    esp,0x10
c000d254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d258:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d25e:	0f b6 c0             	movzx  eax,al
c000d261:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c000d268:	83 ec 0c             	sub    esp,0xc
c000d26b:	50                   	push   eax
c000d26c:	e8 1b 1b 00 00       	call   c000ed8c <LogicalDisk::mount()>
c000d271:	83 c4 10             	add    esp,0x10
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	68 ff 52 02 c0       	push   0xc00252ff
c000d27c:	e8 64 f4 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	90                   	nop
c000d285:	83 c4 0c             	add    esp,0xc
c000d288:	c3                   	ret    
c000d289:	90                   	nop

c000d28a <Directory::open()>:
c000d28a:	53                   	push   ebx
c000d28b:	b8 0b 00 00 00       	mov    eax,0xb
c000d290:	83 ec 08             	sub    esp,0x8
c000d293:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d297:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d29e:	80 fa 19             	cmp    dl,0x19
c000d2a1:	77 3d                	ja     c000d2e0 <Directory::open()+0x56>
c000d2a3:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c000d2aa:	85 d2                	test   edx,edx
c000d2ac:	74 32                	je     c000d2e0 <Directory::open()+0x56>
c000d2ae:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d2b4:	85 d2                	test   edx,edx
c000d2b6:	74 28                	je     c000d2e0 <Directory::open()+0x56>
c000d2b8:	b8 06 00 00 00       	mov    eax,0x6
c000d2bd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d2c1:	75 1d                	jne    c000d2e0 <Directory::open()+0x56>
c000d2c3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d2c9:	50                   	push   eax
c000d2ca:	8b 02                	mov    eax,DWORD PTR [edx]
c000d2cc:	51                   	push   ecx
c000d2cd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d2d0:	51                   	push   ecx
c000d2d1:	52                   	push   edx
c000d2d2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	85 c0                	test   eax,eax
c000d2da:	75 04                	jne    c000d2e0 <Directory::open()+0x56>
c000d2dc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d2e0:	83 c4 08             	add    esp,0x8
c000d2e3:	5b                   	pop    ebx
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop

c000d2e6 <Directory::close()>:
c000d2e6:	53                   	push   ebx
c000d2e7:	b8 0b 00 00 00       	mov    eax,0xb
c000d2ec:	83 ec 08             	sub    esp,0x8
c000d2ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d2f3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d2fa:	80 fa 19             	cmp    dl,0x19
c000d2fd:	77 41                	ja     c000d340 <Directory::close()+0x5a>
c000d2ff:	8b 1c 95 40 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd77c0]
c000d306:	85 db                	test   ebx,ebx
c000d308:	74 36                	je     c000d340 <Directory::close()+0x5a>
c000d30a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d311:	74 2d                	je     c000d340 <Directory::close()+0x5a>
c000d313:	b8 05 00 00 00       	mov    eax,0x5
c000d318:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d31c:	74 22                	je     c000d340 <Directory::close()+0x5a>
c000d31e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d322:	8b 04 95 40 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77c0]
c000d329:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d32f:	53                   	push   ebx
c000d330:	53                   	push   ebx
c000d331:	8b 10                	mov    edx,DWORD PTR [eax]
c000d333:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d339:	50                   	push   eax
c000d33a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d33d:	83 c4 10             	add    esp,0x10
c000d340:	83 c4 08             	add    esp,0x8
c000d343:	5b                   	pop    ebx
c000d344:	c3                   	ret    
c000d345:	90                   	nop

c000d346 <Directory::unlink()>:
c000d346:	83 ec 0c             	sub    esp,0xc
c000d349:	b8 0b 00 00 00       	mov    eax,0xb
c000d34e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d352:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d359:	80 f9 19             	cmp    cl,0x19
c000d35c:	77 2f                	ja     c000d38d <Directory::unlink()+0x47>
c000d35e:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000d365:	85 c9                	test   ecx,ecx
c000d367:	74 24                	je     c000d38d <Directory::unlink()+0x47>
c000d369:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d36f:	85 c9                	test   ecx,ecx
c000d371:	74 1a                	je     c000d38d <Directory::unlink()+0x47>
c000d373:	b8 06 00 00 00       	mov    eax,0x6
c000d378:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d37c:	75 0f                	jne    c000d38d <Directory::unlink()+0x47>
c000d37e:	83 c2 0d             	add    edx,0xd
c000d381:	50                   	push   eax
c000d382:	50                   	push   eax
c000d383:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d385:	52                   	push   edx
c000d386:	51                   	push   ecx
c000d387:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	83 c4 0c             	add    esp,0xc
c000d390:	c3                   	ret    
c000d391:	90                   	nop

c000d392 <Directory::rename(char const*)>:
c000d392:	83 ec 0c             	sub    esp,0xc
c000d395:	b8 0b 00 00 00       	mov    eax,0xb
c000d39a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d39e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d3a5:	80 f9 19             	cmp    cl,0x19
c000d3a8:	77 32                	ja     c000d3dc <Directory::rename(char const*)+0x4a>
c000d3aa:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000d3b1:	85 c9                	test   ecx,ecx
c000d3b3:	74 27                	je     c000d3dc <Directory::rename(char const*)+0x4a>
c000d3b5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3bb:	85 c9                	test   ecx,ecx
c000d3bd:	74 1d                	je     c000d3dc <Directory::rename(char const*)+0x4a>
c000d3bf:	b8 06 00 00 00       	mov    eax,0x6
c000d3c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d3c8:	75 12                	jne    c000d3dc <Directory::rename(char const*)+0x4a>
c000d3ca:	83 c2 0d             	add    edx,0xd
c000d3cd:	50                   	push   eax
c000d3ce:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d3d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3d4:	52                   	push   edx
c000d3d5:	51                   	push   ecx
c000d3d6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	83 c4 0c             	add    esp,0xc
c000d3df:	c3                   	ret    

c000d3e0 <Directory::exists()>:
c000d3e0:	83 ec 0c             	sub    esp,0xc
c000d3e3:	31 c0                	xor    eax,eax
c000d3e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3e9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d3f0:	80 f9 19             	cmp    cl,0x19
c000d3f3:	77 24                	ja     c000d419 <Directory::exists()+0x39>
c000d3f5:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000d3fc:	85 c9                	test   ecx,ecx
c000d3fe:	74 19                	je     c000d419 <Directory::exists()+0x39>
c000d400:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d406:	85 c9                	test   ecx,ecx
c000d408:	74 0f                	je     c000d419 <Directory::exists()+0x39>
c000d40a:	83 c2 0d             	add    edx,0xd
c000d40d:	50                   	push   eax
c000d40e:	50                   	push   eax
c000d40f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d411:	52                   	push   edx
c000d412:	51                   	push   ecx
c000d413:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d416:	83 c4 10             	add    esp,0x10
c000d419:	83 c4 0c             	add    esp,0xc
c000d41c:	c3                   	ret    
c000d41d:	90                   	nop

c000d41e <Directory::read(dirent*)>:
c000d41e:	83 ec 1c             	sub    esp,0x1c
c000d421:	b8 0b 00 00 00       	mov    eax,0xb
c000d426:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d42a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d431:	80 fa 19             	cmp    dl,0x19
c000d434:	77 30                	ja     c000d466 <Directory::read(dirent*)+0x48>
c000d436:	8b 14 95 40 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77c0]
c000d43d:	85 d2                	test   edx,edx
c000d43f:	74 25                	je     c000d466 <Directory::read(dirent*)+0x48>
c000d441:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d448:	74 1c                	je     c000d466 <Directory::read(dirent*)+0x48>
c000d44a:	83 ec 0c             	sub    esp,0xc
c000d44d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d44f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d453:	52                   	push   edx
c000d454:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d458:	6a 00                	push   0x0
c000d45a:	68 10 01 00 00       	push   0x110
c000d45f:	51                   	push   ecx
c000d460:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d463:	83 c4 20             	add    esp,0x20
c000d466:	83 c4 1c             	add    esp,0x1c
c000d469:	c3                   	ret    

c000d46a <Directory::create()>:
c000d46a:	83 ec 0c             	sub    esp,0xc
c000d46d:	b8 0b 00 00 00       	mov    eax,0xb
c000d472:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d476:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d47d:	80 f9 19             	cmp    cl,0x19
c000d480:	77 2f                	ja     c000d4b1 <Directory::create()+0x47>
c000d482:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c000d489:	85 c9                	test   ecx,ecx
c000d48b:	74 24                	je     c000d4b1 <Directory::create()+0x47>
c000d48d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d493:	85 c9                	test   ecx,ecx
c000d495:	74 1a                	je     c000d4b1 <Directory::create()+0x47>
c000d497:	b8 06 00 00 00       	mov    eax,0x6
c000d49c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4a0:	75 0f                	jne    c000d4b1 <Directory::create()+0x47>
c000d4a2:	83 c2 0d             	add    edx,0xd
c000d4a5:	50                   	push   eax
c000d4a6:	50                   	push   eax
c000d4a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4a9:	52                   	push   edx
c000d4aa:	51                   	push   ecx
c000d4ab:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d4ae:	83 c4 10             	add    esp,0x10
c000d4b1:	83 c4 0c             	add    esp,0xc
c000d4b4:	c3                   	ret    
c000d4b5:	90                   	nop

c000d4b6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d4b6:	b8 0a 00 00 00       	mov    eax,0xa
c000d4bb:	c3                   	ret    

c000d4bc <Bus::Bus(char const*)>:
c000d4bc:	83 ec 0c             	sub    esp,0xc
c000d4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c3:	83 ec 08             	sub    esp,0x8
c000d4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ca:	50                   	push   eax
c000d4cb:	e8 96 08 00 00       	call   c000dd66 <Device::Device(char const*)>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	ba 40 34 02 c0       	mov    edx,0xc0023440
c000d4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4dc:	89 10                	mov    DWORD PTR [eax],edx
c000d4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d4ec:	90                   	nop
c000d4ed:	83 c4 0c             	add    esp,0xc
c000d4f0:	c3                   	ret    
c000d4f1:	90                   	nop
c000d4f2:	66 90                	xchg   ax,ax

c000d4f4 <Bus::~Bus()>:
c000d4f4:	83 ec 0c             	sub    esp,0xc
c000d4f7:	ba 40 34 02 c0       	mov    edx,0xc0023440
c000d4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d500:	89 10                	mov    DWORD PTR [eax],edx
c000d502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d506:	83 ec 0c             	sub    esp,0xc
c000d509:	50                   	push   eax
c000d50a:	e8 55 05 00 00       	call   c000da64 <Device::~Device()>
c000d50f:	83 c4 10             	add    esp,0x10
c000d512:	90                   	nop
c000d513:	83 c4 0c             	add    esp,0xc
c000d516:	c3                   	ret    
c000d517:	90                   	nop

c000d518 <Bus::~Bus()>:
c000d518:	83 ec 0c             	sub    esp,0xc
c000d51b:	83 ec 0c             	sub    esp,0xc
c000d51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d522:	e8 cd ff ff ff       	call   c000d4f4 <Bus::~Bus()>
c000d527:	83 c4 10             	add    esp,0x10
c000d52a:	83 ec 08             	sub    esp,0x8
c000d52d:	68 58 01 00 00       	push   0x158
c000d532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d536:	e8 c9 f0 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000d53b:	83 c4 10             	add    esp,0x10
c000d53e:	83 c4 0c             	add    esp,0xc
c000d541:	c3                   	ret    

c000d542 <beepThread(void*)>:
c000d542:	83 ec 0c             	sub    esp,0xc
c000d545:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000d54a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d54e:	48                   	dec    eax
c000d54f:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000d554:	75 01                	jne    c000d557 <beepThread(void*)+0x15>
c000d556:	fb                   	sti    
c000d557:	83 ec 0c             	sub    esp,0xc
c000d55a:	6b c2 0a             	imul   eax,edx,0xa
c000d55d:	50                   	push   eax
c000d55e:	e8 19 8d 00 00       	call   c001627c <milliTenthSleep(unsigned int)>
c000d563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d56a:	e8 ca c0 00 00       	call   c0019639 <Hal::makeBeep(int)>
c000d56f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d577:	83 c4 1c             	add    esp,0x1c
c000d57a:	e9 fd 8b 00 00       	jmp    c001617c <blockTask(TaskState)>

c000d57f <Krnl::beep(int, int, bool)>:
c000d57f:	56                   	push   esi
c000d580:	53                   	push   ebx
c000d581:	83 ec 10             	sub    esp,0x10
c000d584:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d588:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d590:	e8 a4 c0 00 00       	call   c0019639 <Hal::makeBeep(int)>
c000d595:	83 c4 10             	add    esp,0x10
c000d598:	89 f0                	mov    eax,esi
c000d59a:	84 c0                	test   al,al
c000d59c:	74 1e                	je     c000d5bc <Krnl::beep(int, int, bool)+0x3d>
c000d59e:	83 ec 0c             	sub    esp,0xc
c000d5a1:	6b db 0a             	imul   ebx,ebx,0xa
c000d5a4:	53                   	push   ebx
c000d5a5:	e8 d2 8c 00 00       	call   c001627c <milliTenthSleep(unsigned int)>
c000d5aa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d5b2:	83 c4 14             	add    esp,0x14
c000d5b5:	5b                   	pop    ebx
c000d5b6:	5e                   	pop    esi
c000d5b7:	e9 7d c0 00 00       	jmp    c0019639 <Hal::makeBeep(int)>
c000d5bc:	68 e6 00 00 00       	push   0xe6
c000d5c1:	53                   	push   ebx
c000d5c2:	68 42 d5 00 c0       	push   0xc000d542
c000d5c7:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c000d5cd:	e8 96 87 00 00       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c000d5d2:	83 c4 14             	add    esp,0x14
c000d5d5:	5b                   	pop    ebx
c000d5d6:	5e                   	pop    esi
c000d5d7:	c3                   	ret    

c000d5d8 <User::loadClockSettings(int)>:
c000d5d8:	53                   	push   ebx
c000d5d9:	83 ec 14             	sub    esp,0x14
c000d5dc:	68 14 01 00 00       	push   0x114
c000d5e1:	e8 b1 c1 ff ff       	call   c0009797 <malloc>
c000d5e6:	83 c4 0c             	add    esp,0xc
c000d5e9:	89 c3                	mov    ebx,eax
c000d5eb:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c000d5f1:	68 64 34 02 c0       	push   0xc0023464
c000d5f6:	50                   	push   eax
c000d5f7:	e8 54 f6 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c000d5fc:	58                   	pop    eax
c000d5fd:	5a                   	pop    edx
c000d5fe:	6a 01                	push   0x1
c000d600:	53                   	push   ebx
c000d601:	e8 24 f7 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c000d606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d609:	e8 7a f7 ff ff       	call   c000cd88 <File::close()>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	85 db                	test   ebx,ebx
c000d613:	74 0f                	je     c000d624 <User::loadClockSettings(int)+0x4c>
c000d615:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d617:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d61b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d61e:	83 c4 08             	add    esp,0x8
c000d621:	5b                   	pop    ebx
c000d622:	ff e0                	jmp    eax
c000d624:	83 c4 08             	add    esp,0x8
c000d627:	5b                   	pop    ebx
c000d628:	c3                   	ret    
c000d629:	90                   	nop

c000d62a <Clock::Clock(char const*)>:
c000d62a:	83 ec 0c             	sub    esp,0xc
c000d62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d631:	83 ec 08             	sub    esp,0x8
c000d634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d638:	50                   	push   eax
c000d639:	e8 28 07 00 00       	call   c000dd66 <Device::Device(char const*)>
c000d63e:	83 c4 10             	add    esp,0x10
c000d641:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c000d646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d64a:	89 10                	mov    DWORD PTR [eax],edx
c000d64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d650:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d65a:	90                   	nop
c000d65b:	83 c4 0c             	add    esp,0xc
c000d65e:	c3                   	ret    
c000d65f:	90                   	nop

c000d660 <Clock::~Clock()>:
c000d660:	83 ec 0c             	sub    esp,0xc
c000d663:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c000d668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66c:	89 10                	mov    DWORD PTR [eax],edx
c000d66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d672:	83 ec 0c             	sub    esp,0xc
c000d675:	50                   	push   eax
c000d676:	e8 e9 03 00 00       	call   c000da64 <Device::~Device()>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	90                   	nop
c000d67f:	83 c4 0c             	add    esp,0xc
c000d682:	c3                   	ret    
c000d683:	90                   	nop

c000d684 <Clock::~Clock()>:
c000d684:	83 ec 0c             	sub    esp,0xc
c000d687:	83 ec 0c             	sub    esp,0xc
c000d68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d68e:	e8 cd ff ff ff       	call   c000d660 <Clock::~Clock()>
c000d693:	83 c4 10             	add    esp,0x10
c000d696:	83 ec 08             	sub    esp,0x8
c000d699:	68 58 01 00 00       	push   0x158
c000d69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a2:	e8 5d ef ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000d6a7:	83 c4 10             	add    esp,0x10
c000d6aa:	83 c4 0c             	add    esp,0xc
c000d6ad:	c3                   	ret    

c000d6ae <Clock::timeInSecondsLocal()>:
c000d6ae:	53                   	push   ebx
c000d6af:	83 ec 14             	sub    esp,0x14
c000d6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d6b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6b8:	50                   	push   eax
c000d6b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d6bc:	0f b6 0d bc 63 02 c0 	movzx  ecx,BYTE PTR ds:0xc00263bc
c000d6c3:	03 0d c0 63 02 c0    	add    ecx,DWORD PTR ds:0xc00263c0
c000d6c9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d6cf:	89 cb                	mov    ebx,ecx
c000d6d1:	c1 fb 1f             	sar    ebx,0x1f
c000d6d4:	01 c8                	add    eax,ecx
c000d6d6:	11 da                	adc    edx,ebx
c000d6d8:	83 c4 10             	add    esp,0x10
c000d6db:	31 c9                	xor    ecx,ecx
c000d6dd:	80 3d bd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263bd,0x0
c000d6e4:	74 05                	je     c000d6eb <Clock::timeInSecondsLocal()+0x3d>
c000d6e6:	b9 08 07 00 00       	mov    ecx,0x708
c000d6eb:	31 db                	xor    ebx,ebx
c000d6ed:	01 c8                	add    eax,ecx
c000d6ef:	11 da                	adc    edx,ebx
c000d6f1:	83 c4 08             	add    esp,0x8
c000d6f4:	5b                   	pop    ebx
c000d6f5:	c3                   	ret    

c000d6f6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d6f6:	57                   	push   edi
c000d6f7:	56                   	push   esi
c000d6f8:	53                   	push   ebx
c000d6f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d701:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d703:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d707:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d70a:	0f b6 05 bc 63 02 c0 	movzx  eax,BYTE PTR ds:0xc00263bc
c000d711:	03 05 c0 63 02 c0    	add    eax,DWORD PTR ds:0xc00263c0
c000d717:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d71d:	99                   	cdq    
c000d71e:	29 c6                	sub    esi,eax
c000d720:	19 d7                	sbb    edi,edx
c000d722:	89 f0                	mov    eax,esi
c000d724:	89 fa                	mov    edx,edi
c000d726:	31 f6                	xor    esi,esi
c000d728:	80 3d bd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263bd,0x0
c000d72f:	74 05                	je     c000d736 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000d731:	be 08 07 00 00       	mov    esi,0x708
c000d736:	31 ff                	xor    edi,edi
c000d738:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000d73c:	29 f0                	sub    eax,esi
c000d73e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d742:	19 fa                	sbb    edx,edi
c000d744:	89 d8                	mov    eax,ebx
c000d746:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d74a:	5b                   	pop    ebx
c000d74b:	5e                   	pop    esi
c000d74c:	5f                   	pop    edi
c000d74d:	ff e0                	jmp    eax

c000d74f <datetimeToSeconds(datetime_t)>:
c000d74f:	55                   	push   ebp
c000d750:	57                   	push   edi
c000d751:	56                   	push   esi
c000d752:	53                   	push   ebx
c000d753:	83 ec 14             	sub    esp,0x14
c000d756:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d75a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d75e:	89 d3                	mov    ebx,edx
c000d760:	0f b6 c6             	movzx  eax,dh
c000d763:	c1 eb 10             	shr    ebx,0x10
c000d766:	48                   	dec    eax
c000d767:	66 81 eb 6c 07       	sub    bx,0x76c
c000d76c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d770:	0f b6 f5             	movzx  esi,ch
c000d773:	89 cf                	mov    edi,ecx
c000d775:	6b f6 3c             	imul   esi,esi,0x3c
c000d778:	c1 ef 10             	shr    edi,0x10
c000d77b:	0f b6 c9             	movzx  ecx,cl
c000d77e:	89 f8                	mov    eax,edi
c000d780:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d786:	0f b6 f8             	movzx  edi,al
c000d789:	0f b6 d2             	movzx  edx,dl
c000d78c:	01 fe                	add    esi,edi
c000d78e:	01 f1                	add    ecx,esi
c000d790:	0f b7 f3             	movzx  esi,bx
c000d793:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d797:	c1 f9 1f             	sar    ecx,0x1f
c000d79a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000d79f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d7a3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000d7a8:	8b 0c 8d c0 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcb40]
c000d7af:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000d7b3:	76 29                	jbe    c000d7de <datetimeToSeconds(datetime_t)+0x8f>
c000d7b5:	f6 c3 03             	test   bl,0x3
c000d7b8:	75 24                	jne    c000d7de <datetimeToSeconds(datetime_t)+0x8f>
c000d7ba:	31 d2                	xor    edx,edx
c000d7bc:	bf 64 00 00 00       	mov    edi,0x64
c000d7c1:	89 d8                	mov    eax,ebx
c000d7c3:	66 f7 f7             	div    di
c000d7c6:	66 85 d2             	test   dx,dx
c000d7c9:	75 12                	jne    c000d7dd <datetimeToSeconds(datetime_t)+0x8e>
c000d7cb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000d7d1:	bf 90 01 00 00       	mov    edi,0x190
c000d7d6:	99                   	cdq    
c000d7d7:	f7 ff                	idiv   edi
c000d7d9:	85 d2                	test   edx,edx
c000d7db:	75 01                	jne    c000d7de <datetimeToSeconds(datetime_t)+0x8f>
c000d7dd:	41                   	inc    ecx
c000d7de:	66 83 fb 46          	cmp    bx,0x46
c000d7e2:	76 45                	jbe    c000d829 <datetimeToSeconds(datetime_t)+0xda>
c000d7e4:	bb 46 00 00 00       	mov    ebx,0x46
c000d7e9:	bf 64 00 00 00       	mov    edi,0x64
c000d7ee:	bd 90 01 00 00       	mov    ebp,0x190
c000d7f3:	b8 6d 01 00 00       	mov    eax,0x16d
c000d7f8:	f6 c3 03             	test   bl,0x3
c000d7fb:	75 23                	jne    c000d820 <datetimeToSeconds(datetime_t)+0xd1>
c000d7fd:	89 d8                	mov    eax,ebx
c000d7ff:	99                   	cdq    
c000d800:	f7 ff                	idiv   edi
c000d802:	b8 6e 01 00 00       	mov    eax,0x16e
c000d807:	85 d2                	test   edx,edx
c000d809:	75 15                	jne    c000d820 <datetimeToSeconds(datetime_t)+0xd1>
c000d80b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000d811:	99                   	cdq    
c000d812:	f7 fd                	idiv   ebp
c000d814:	83 fa 01             	cmp    edx,0x1
c000d817:	19 c0                	sbb    eax,eax
c000d819:	f7 d0                	not    eax
c000d81b:	05 6e 01 00 00       	add    eax,0x16e
c000d820:	01 c1                	add    ecx,eax
c000d822:	43                   	inc    ebx
c000d823:	39 f3                	cmp    ebx,esi
c000d825:	7c cc                	jl     c000d7f3 <datetimeToSeconds(datetime_t)+0xa4>
c000d827:	eb 35                	jmp    c000d85e <datetimeToSeconds(datetime_t)+0x10f>
c000d829:	74 33                	je     c000d85e <datetimeToSeconds(datetime_t)+0x10f>
c000d82b:	b8 45 00 00 00       	mov    eax,0x45
c000d830:	89 c2                	mov    edx,eax
c000d832:	83 e2 03             	and    edx,0x3
c000d835:	39 f0                	cmp    eax,esi
c000d837:	7e 0f                	jle    c000d848 <datetimeToSeconds(datetime_t)+0xf9>
c000d839:	83 fa 01             	cmp    edx,0x1
c000d83c:	19 d2                	sbb    edx,edx
c000d83e:	48                   	dec    eax
c000d83f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000d846:	eb e8                	jmp    c000d830 <datetimeToSeconds(datetime_t)+0xe1>
c000d848:	b8 6d 01 00 00       	mov    eax,0x16d
c000d84d:	85 d2                	test   edx,edx
c000d84f:	75 0b                	jne    c000d85c <datetimeToSeconds(datetime_t)+0x10d>
c000d851:	66 83 fb 01          	cmp    bx,0x1
c000d855:	19 c0                	sbb    eax,eax
c000d857:	05 6e 01 00 00       	add    eax,0x16e
c000d85c:	29 c1                	sub    ecx,eax
c000d85e:	b8 80 51 01 00       	mov    eax,0x15180
c000d863:	f7 e9                	imul   ecx
c000d865:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d869:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000d86d:	83 c4 14             	add    esp,0x14
c000d870:	5b                   	pop    ebx
c000d871:	5e                   	pop    esi
c000d872:	5f                   	pop    edi
c000d873:	5d                   	pop    ebp
c000d874:	c3                   	ret    
c000d875:	90                   	nop

c000d876 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000d876:	57                   	push   edi
c000d877:	56                   	push   esi
c000d878:	53                   	push   ebx
c000d879:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d87d:	8b 06                	mov    eax,DWORD PTR [esi]
c000d87f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000d882:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d886:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d88a:	e8 c0 fe ff ff       	call   c000d74f <datetimeToSeconds(datetime_t)>
c000d88f:	59                   	pop    ecx
c000d890:	0f b6 0d bc 63 02 c0 	movzx  ecx,BYTE PTR ds:0xc00263bc
c000d897:	5b                   	pop    ebx
c000d898:	03 0d c0 63 02 c0    	add    ecx,DWORD PTR ds:0xc00263c0
c000d89e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d8a4:	89 cb                	mov    ebx,ecx
c000d8a6:	c1 fb 1f             	sar    ebx,0x1f
c000d8a9:	29 c8                	sub    eax,ecx
c000d8ab:	19 da                	sbb    edx,ebx
c000d8ad:	31 c9                	xor    ecx,ecx
c000d8af:	80 3d bd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263bd,0x0
c000d8b6:	74 05                	je     c000d8bd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000d8b8:	b9 08 07 00 00       	mov    ecx,0x708
c000d8bd:	31 db                	xor    ebx,ebx
c000d8bf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d8c3:	29 c8                	sub    eax,ecx
c000d8c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d8c9:	19 da                	sbb    edx,ebx
c000d8cb:	89 f8                	mov    eax,edi
c000d8cd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d8d1:	5b                   	pop    ebx
c000d8d2:	5e                   	pop    esi
c000d8d3:	5f                   	pop    edi
c000d8d4:	ff e0                	jmp    eax

c000d8d6 <secondsToDatetime(unsigned long long)>:
c000d8d6:	55                   	push   ebp
c000d8d7:	57                   	push   edi
c000d8d8:	56                   	push   esi
c000d8d9:	53                   	push   ebx
c000d8da:	83 ec 1c             	sub    esp,0x1c
c000d8dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d8e5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d8e9:	6a 00                	push   0x0
c000d8eb:	68 80 51 01 00       	push   0x15180
c000d8f0:	55                   	push   ebp
c000d8f1:	57                   	push   edi
c000d8f2:	e8 49 3b 01 00       	call   c0021440 <__udivdi3>
c000d8f7:	83 c4 10             	add    esp,0x10
c000d8fa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000d900:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d904:	6a 00                	push   0x0
c000d906:	68 80 51 01 00       	push   0x15180
c000d90b:	55                   	push   ebp
c000d90c:	57                   	push   edi
c000d90d:	bf 10 0e 00 00       	mov    edi,0xe10
c000d912:	e8 29 3c 01 00       	call   c0021540 <__umoddi3>
c000d917:	83 c4 10             	add    esp,0x10
c000d91a:	99                   	cdq    
c000d91b:	f7 ff                	idiv   edi
c000d91d:	bf 3c 00 00 00       	mov    edi,0x3c
c000d922:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000d925:	89 d0                	mov    eax,edx
c000d927:	99                   	cdq    
c000d928:	f7 ff                	idiv   edi
c000d92a:	85 db                	test   ebx,ebx
c000d92c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000d92f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000d932:	79 11                	jns    c000d945 <secondsToDatetime(unsigned long long)+0x6f>
c000d934:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d938:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000d93e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d943:	eb 07                	jmp    c000d94c <secondsToDatetime(unsigned long long)+0x76>
c000d945:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d94a:	89 d8                	mov    eax,ebx
c000d94c:	bf b4 05 00 00       	mov    edi,0x5b4
c000d951:	99                   	cdq    
c000d952:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000d957:	f7 f9                	idiv   ecx
c000d959:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000d95e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d962:	31 d2                	xor    edx,edx
c000d964:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000d96c:	01 c3                	add    ebx,eax
c000d96e:	89 d8                	mov    eax,ebx
c000d970:	f7 f1                	div    ecx
c000d972:	31 d2                	xor    edx,edx
c000d974:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000d977:	89 d8                	mov    eax,ebx
c000d979:	f7 f7                	div    edi
c000d97b:	31 d2                	xor    edx,edx
c000d97d:	29 c1                	sub    ecx,eax
c000d97f:	89 d8                	mov    eax,ebx
c000d981:	f7 f5                	div    ebp
c000d983:	bd 6d 01 00 00       	mov    ebp,0x16d
c000d988:	29 c1                	sub    ecx,eax
c000d98a:	31 d2                	xor    edx,edx
c000d98c:	89 c8                	mov    eax,ecx
c000d98e:	f7 f5                	div    ebp
c000d990:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000d995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d999:	31 d2                	xor    edx,edx
c000d99b:	89 c8                	mov    eax,ecx
c000d99d:	f7 f5                	div    ebp
c000d99f:	31 d2                	xor    edx,edx
c000d9a1:	01 c3                	add    ebx,eax
c000d9a3:	89 c8                	mov    eax,ecx
c000d9a5:	f7 f7                	div    edi
c000d9a7:	bf 99 00 00 00       	mov    edi,0x99
c000d9ac:	29 c3                	sub    ebx,eax
c000d9ae:	31 d2                	xor    edx,edx
c000d9b0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000d9b8:	29 c3                	sub    ebx,eax
c000d9ba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d9bd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d9c0:	bb 05 00 00 00       	mov    ebx,0x5
c000d9c5:	83 c1 02             	add    ecx,0x2
c000d9c8:	89 c8                	mov    eax,ecx
c000d9ca:	f7 f7                	div    edi
c000d9cc:	31 d2                	xor    edx,edx
c000d9ce:	89 c7                	mov    edi,eax
c000d9d0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000d9d6:	83 c0 02             	add    eax,0x2
c000d9d9:	f7 f3                	div    ebx
c000d9db:	89 eb                	mov    ebx,ebp
c000d9dd:	29 c3                	sub    ebx,eax
c000d9df:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000d9e5:	88 1e                	mov    BYTE PTR [esi],bl
c000d9e7:	19 c0                	sbb    eax,eax
c000d9e9:	31 d2                	xor    edx,edx
c000d9eb:	83 e0 0c             	and    eax,0xc
c000d9ee:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000d9f2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000d9fa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d9fe:	83 f9 01             	cmp    ecx,0x1
c000da01:	0f 96 c2             	setbe  dl
c000da04:	41                   	inc    ecx
c000da05:	01 d0                	add    eax,edx
c000da07:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000da0a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000da0e:	83 c4 1c             	add    esp,0x1c
c000da11:	89 f0                	mov    eax,esi
c000da13:	5b                   	pop    ebx
c000da14:	5e                   	pop    esi
c000da15:	5f                   	pop    edi
c000da16:	5d                   	pop    ebp
c000da17:	c2 04 00             	ret    0x4

c000da1a <Clock::timeInDatetimeLocal()>:
c000da1a:	53                   	push   ebx
c000da1b:	83 ec 14             	sub    esp,0x14
c000da1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000da22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da26:	e8 83 fc ff ff       	call   c000d6ae <Clock::timeInSecondsLocal()>
c000da2b:	83 c4 0c             	add    esp,0xc
c000da2e:	52                   	push   edx
c000da2f:	50                   	push   eax
c000da30:	53                   	push   ebx
c000da31:	e8 a0 fe ff ff       	call   c000d8d6 <secondsToDatetime(unsigned long long)>
c000da36:	89 d8                	mov    eax,ebx
c000da38:	83 c4 14             	add    esp,0x14
c000da3b:	5b                   	pop    ebx
c000da3c:	c2 04 00             	ret    0x4
c000da3f:	90                   	nop

c000da40 <Device::hibernate()>:
c000da40:	c3                   	ret    
c000da41:	90                   	nop

c000da42 <Device::wake()>:
c000da42:	c3                   	ret    
c000da43:	90                   	nop

c000da44 <Device::detect()>:
c000da44:	c3                   	ret    
c000da45:	90                   	nop

c000da46 <Device::disableLegacy()>:
c000da46:	c3                   	ret    
c000da47:	90                   	nop

c000da48 <Device::powerSaving(PowerSavingLevel)>:
c000da48:	c3                   	ret    
c000da49:	90                   	nop

c000da4a <DriverlessDevice::close(int, int, void*)>:
c000da4a:	31 c0                	xor    eax,eax
c000da4c:	c3                   	ret    
c000da4d:	90                   	nop

c000da4e <DriverlessDevice::detect()>:
c000da4e:	c3                   	ret    
c000da4f:	90                   	nop

c000da50 <DriverlessDevice::open(int, int, void*)>:
c000da50:	83 ec 18             	sub    esp,0x18
c000da53:	68 f0 34 02 c0       	push   0xc00234f0
c000da58:	e8 f2 4f 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000da5d:	83 c8 ff             	or     eax,0xffffffff
c000da60:	83 c4 1c             	add    esp,0x1c
c000da63:	c3                   	ret    

c000da64 <Device::~Device()>:
c000da64:	ba 50 35 02 c0       	mov    edx,0xc0023550
c000da69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da6d:	89 10                	mov    DWORD PTR [eax],edx
c000da6f:	90                   	nop
c000da70:	c3                   	ret    
c000da71:	90                   	nop

c000da72 <Device::~Device()>:
c000da72:	83 ec 0c             	sub    esp,0xc
c000da75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da79:	e8 e6 ff ff ff       	call   c000da64 <Device::~Device()>
c000da7e:	83 c4 04             	add    esp,0x4
c000da81:	83 ec 08             	sub    esp,0x8
c000da84:	68 58 01 00 00       	push   0x158
c000da89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8d:	e8 72 eb ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000da92:	83 c4 10             	add    esp,0x10
c000da95:	83 c4 0c             	add    esp,0xc
c000da98:	c3                   	ret    
c000da99:	90                   	nop

c000da9a <Device::findAndLoadDriver()>:
c000da9a:	c7 44 24 04 0e 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc002350e
c000daa2:	e9 3e ec ff ff       	jmp    c000c6e5 <Dbg::kprintf(char const*, ...)>
c000daa7:	90                   	nop

c000daa8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000daa8:	57                   	push   edi
c000daa9:	b9 09 00 00 00       	mov    ecx,0x9
c000daae:	56                   	push   esi
c000daaf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dab3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000dab7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000dac1:	81 c7 18 01 00 00    	add    edi,0x118
c000dac7:	fc                   	cld    
c000dac8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000daca:	5e                   	pop    esi
c000dacb:	5f                   	pop    edi
c000dacc:	c3                   	ret    
c000dacd:	90                   	nop

c000dace <Device::preOpenACPI(void*, char*, char*)>:
c000dace:	57                   	push   edi
c000dacf:	b9 1e 00 00 00       	mov    ecx,0x1e
c000dad4:	56                   	push   esi
c000dad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dad9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dadd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000dae7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000daed:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000daf3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000daf7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000daf9:	b9 0e 00 00 00       	mov    ecx,0xe
c000dafe:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000db04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000db08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db0a:	5e                   	pop    esi
c000db0b:	5f                   	pop    edi
c000db0c:	c3                   	ret    
c000db0d:	90                   	nop

c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000db0e:	53                   	push   ebx
c000db0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db1b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db1f:	0f b6 c0             	movzx  eax,al
c000db22:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db2e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000db32:	5b                   	pop    ebx
c000db33:	e9 10 06 00 00       	jmp    c000e148 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000db38 <Device::getParent()>:
c000db38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db3c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000db42:	c3                   	ret    
c000db43:	90                   	nop

c000db44 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000db44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db4c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000db51:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000db55:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db5d:	e9 45 07 00 00       	jmp    c000e2a7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000db62 <Device::addChild(Device*)>:
c000db62:	53                   	push   ebx
c000db63:	83 ec 08             	sub    esp,0x8
c000db66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db6e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000db74:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000db7a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000db7c:	85 d2                	test   edx,edx
c000db7e:	74 04                	je     c000db84 <Device::addChild(Device*)+0x22>
c000db80:	89 d3                	mov    ebx,edx
c000db82:	eb f6                	jmp    c000db7a <Device::addChild(Device*)+0x18>
c000db84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000db87:	83 ec 0c             	sub    esp,0xc
c000db8a:	6a 08                	push   0x8
c000db8c:	e8 06 bc ff ff       	call   c0009797 <malloc>
c000db91:	89 03                	mov    DWORD PTR [ebx],eax
c000db93:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dba0:	83 c4 18             	add    esp,0x18
c000dba3:	5b                   	pop    ebx
c000dba4:	c3                   	ret    
c000dba5:	90                   	nop

c000dba6 <Device::removeAllChildren()>:
c000dba6:	56                   	push   esi
c000dba7:	53                   	push   ebx
c000dba8:	52                   	push   edx
c000dba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbad:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000dbb3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dbb6:	74 17                	je     c000dbcf <Device::removeAllChildren()+0x29>
c000dbb8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dbbb:	85 c0                	test   eax,eax
c000dbbd:	74 0c                	je     c000dbcb <Device::removeAllChildren()+0x25>
c000dbbf:	83 ec 0c             	sub    esp,0xc
c000dbc2:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbc4:	50                   	push   eax
c000dbc5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000dbc8:	83 c4 10             	add    esp,0x10
c000dbcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dbcd:	eb e4                	jmp    c000dbb3 <Device::removeAllChildren()+0xd>
c000dbcf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dbd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dbdb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dbe1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dbe8:	58                   	pop    eax
c000dbe9:	5b                   	pop    ebx
c000dbea:	5e                   	pop    esi
c000dbeb:	c3                   	ret    

c000dbec <Device::hibernateAll()>:
c000dbec:	53                   	push   ebx
c000dbed:	83 ec 14             	sub    esp,0x14
c000dbf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dbf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbf6:	53                   	push   ebx
c000dbf7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dbfa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc00:	83 c4 10             	add    esp,0x10
c000dc03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc06:	74 0f                	je     c000dc17 <Device::hibernateAll()+0x2b>
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc0e:	e8 d9 ff ff ff       	call   c000dbec <Device::hibernateAll()>
c000dc13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc15:	eb e9                	jmp    c000dc00 <Device::hibernateAll()+0x14>
c000dc17:	83 c4 08             	add    esp,0x8
c000dc1a:	5b                   	pop    ebx
c000dc1b:	c3                   	ret    

c000dc1c <Device::wakeAll()>:
c000dc1c:	53                   	push   ebx
c000dc1d:	83 ec 14             	sub    esp,0x14
c000dc20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc24:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc26:	53                   	push   ebx
c000dc27:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dc2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc30:	83 c4 10             	add    esp,0x10
c000dc33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc36:	74 0f                	je     c000dc47 <Device::wakeAll()+0x2b>
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3e:	e8 d9 ff ff ff       	call   c000dc1c <Device::wakeAll()>
c000dc43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc45:	eb e9                	jmp    c000dc30 <Device::wakeAll()+0x14>
c000dc47:	83 c4 08             	add    esp,0x8
c000dc4a:	5b                   	pop    ebx
c000dc4b:	c3                   	ret    

c000dc4c <Device::detectAll()>:
c000dc4c:	53                   	push   ebx
c000dc4d:	83 ec 14             	sub    esp,0x14
c000dc50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc54:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc56:	53                   	push   ebx
c000dc57:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dc5a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc60:	83 c4 10             	add    esp,0x10
c000dc63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc66:	74 0f                	je     c000dc77 <Device::detectAll()+0x2b>
c000dc68:	83 ec 0c             	sub    esp,0xc
c000dc6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc6e:	e8 d9 ff ff ff       	call   c000dc4c <Device::detectAll()>
c000dc73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc75:	eb e9                	jmp    c000dc60 <Device::detectAll()+0x14>
c000dc77:	83 c4 08             	add    esp,0x8
c000dc7a:	5b                   	pop    ebx
c000dc7b:	c3                   	ret    

c000dc7c <Device::disableLegacyAll()>:
c000dc7c:	53                   	push   ebx
c000dc7d:	83 ec 14             	sub    esp,0x14
c000dc80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc84:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc86:	53                   	push   ebx
c000dc87:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dc8a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc90:	83 c4 10             	add    esp,0x10
c000dc93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc96:	74 0f                	je     c000dca7 <Device::disableLegacyAll()+0x2b>
c000dc98:	83 ec 0c             	sub    esp,0xc
c000dc9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc9e:	e8 d9 ff ff ff       	call   c000dc7c <Device::disableLegacyAll()>
c000dca3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dca5:	eb e9                	jmp    c000dc90 <Device::disableLegacyAll()+0x14>
c000dca7:	83 c4 08             	add    esp,0x8
c000dcaa:	5b                   	pop    ebx
c000dcab:	c3                   	ret    

c000dcac <Device::loadDriversForAll()>:
c000dcac:	53                   	push   ebx
c000dcad:	83 ec 08             	sub    esp,0x8
c000dcb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcb4:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000dcbb:	75 0c                	jne    c000dcc9 <Device::loadDriversForAll()+0x1d>
c000dcbd:	83 ec 0c             	sub    esp,0xc
c000dcc0:	53                   	push   ebx
c000dcc1:	e8 d4 fd ff ff       	call   c000da9a <Device::findAndLoadDriver()>
c000dcc6:	83 c4 10             	add    esp,0x10
c000dcc9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dccf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dcd2:	74 12                	je     c000dce6 <Device::loadDriversForAll()+0x3a>
c000dcd4:	83 ec 0c             	sub    esp,0xc
c000dcd7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dcda:	e8 cd ff ff ff       	call   c000dcac <Device::loadDriversForAll()>
c000dcdf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dce1:	83 c4 10             	add    esp,0x10
c000dce4:	eb e9                	jmp    c000dccf <Device::loadDriversForAll()+0x23>
c000dce6:	83 c4 08             	add    esp,0x8
c000dce9:	5b                   	pop    ebx
c000dcea:	c3                   	ret    
c000dceb:	90                   	nop

c000dcec <Device::closeAll()>:
c000dcec:	53                   	push   ebx
c000dced:	83 ec 08             	sub    esp,0x8
c000dcf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcf6:	6a 00                	push   0x0
c000dcf8:	6a 00                	push   0x0
c000dcfa:	6a 00                	push   0x0
c000dcfc:	53                   	push   ebx
c000dcfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd06:	83 c4 10             	add    esp,0x10
c000dd09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd0c:	74 0f                	je     c000dd1d <Device::closeAll()+0x31>
c000dd0e:	83 ec 0c             	sub    esp,0xc
c000dd11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd14:	e8 d3 ff ff ff       	call   c000dcec <Device::closeAll()>
c000dd19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd1b:	eb e9                	jmp    c000dd06 <Device::closeAll()+0x1a>
c000dd1d:	83 c4 08             	add    esp,0x8
c000dd20:	5b                   	pop    ebx
c000dd21:	c3                   	ret    

c000dd22 <Device::powerSavingAll(PowerSavingLevel)>:
c000dd22:	56                   	push   esi
c000dd23:	53                   	push   ebx
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dd2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd31:	56                   	push   esi
c000dd32:	53                   	push   ebx
c000dd33:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000dd36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd3c:	83 c4 10             	add    esp,0x10
c000dd3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd42:	74 0f                	je     c000dd53 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000dd44:	52                   	push   edx
c000dd45:	52                   	push   edx
c000dd46:	56                   	push   esi
c000dd47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd4a:	e8 d3 ff ff ff       	call   c000dd22 <Device::powerSavingAll(PowerSavingLevel)>
c000dd4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd51:	eb e9                	jmp    c000dd3c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000dd53:	58                   	pop    eax
c000dd54:	5b                   	pop    ebx
c000dd55:	5e                   	pop    esi
c000dd56:	c3                   	ret    
c000dd57:	90                   	nop

c000dd58 <Device::setName(char const*)>:
c000dd58:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000dd60:	e9 ff 27 ff ff       	jmp    c0000564 <strcpy>
c000dd65:	90                   	nop

c000dd66 <Device::Device(char const*)>:
c000dd66:	83 ec 1c             	sub    esp,0x1c
c000dd69:	ba 50 35 02 c0       	mov    edx,0xc0023550
c000dd6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd72:	89 10                	mov    DWORD PTR [eax],edx
c000dd74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd78:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000dd82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd86:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000dd90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd94:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000dd9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dda2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ddac:	83 ec 08             	sub    esp,0x8
c000ddaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddb7:	e8 9c ff ff ff       	call   c000dd58 <Device::setName(char const*)>
c000ddbc:	83 c4 10             	add    esp,0x10
c000ddbf:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000ddc7:	83 ec 0c             	sub    esp,0xc
c000ddca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddce:	e8 c4 b9 ff ff       	call   c0009797 <malloc>
c000ddd3:	83 c4 10             	add    esp,0x10
c000ddd6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dddc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dde3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dde7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000dded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ddf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ddfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de01:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000de07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de12:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000de19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de1d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000de24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de28:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000de32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de36:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000de40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de44:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000de4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de52:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000de5c:	90                   	nop
c000de5d:	83 c4 1c             	add    esp,0x1c
c000de60:	c3                   	ret    
c000de61:	90                   	nop

c000de62 <Device::getName()>:
c000de62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de66:	05 d0 00 00 00       	add    eax,0xd0
c000de6b:	c3                   	ret    

c000de6c <DriverlessDevice::DriverlessDevice(char const*)>:
c000de6c:	83 ec 0c             	sub    esp,0xc
c000de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de73:	83 ec 08             	sub    esp,0x8
c000de76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7a:	50                   	push   eax
c000de7b:	e8 e6 fe ff ff       	call   c000dd66 <Device::Device(char const*)>
c000de80:	83 c4 10             	add    esp,0x10
c000de83:	ba 7c 35 02 c0       	mov    edx,0xc002357c
c000de88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de8c:	89 10                	mov    DWORD PTR [eax],edx
c000de8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de92:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000de9c:	90                   	nop
c000de9d:	83 c4 0c             	add    esp,0xc
c000dea0:	c3                   	ret    
c000dea1:	90                   	nop

c000dea2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000dea2:	57                   	push   edi
c000dea3:	56                   	push   esi
c000dea4:	53                   	push   ebx
c000dea5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dea9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dead:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000deb1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000deb7:	75 0c                	jne    c000dec5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000deb9:	52                   	push   edx
c000deba:	52                   	push   edx
c000debb:	53                   	push   ebx
c000debc:	56                   	push   esi
c000debd:	e8 30 3a 01 00       	call   c00218f2 <LinkedList<Device>::addElement(Device*)>
c000dec2:	83 c4 10             	add    esp,0x10
c000dec5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000decb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dece:	74 12                	je     c000dee2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ded0:	50                   	push   eax
c000ded1:	57                   	push   edi
c000ded2:	56                   	push   esi
c000ded3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ded6:	e8 c7 ff ff ff       	call   c000dea2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000dedb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dedd:	83 c4 10             	add    esp,0x10
c000dee0:	eb e9                	jmp    c000decb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000dee2:	5b                   	pop    ebx
c000dee3:	5e                   	pop    esi
c000dee4:	5f                   	pop    edi
c000dee5:	c3                   	ret    

c000dee6 <getDevicesOfType(DeviceType)>:
c000dee6:	53                   	push   ebx
c000dee7:	83 ec 14             	sub    esp,0x14
c000deea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000deee:	53                   	push   ebx
c000deef:	e8 da 3a 01 00       	call   c00219ce <LinkedList<Device>::LinkedList()>
c000def4:	83 c4 0c             	add    esp,0xc
c000def7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000defb:	53                   	push   ebx
c000defc:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c000df02:	e8 9b ff ff ff       	call   c000dea2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000df07:	89 d8                	mov    eax,ebx
c000df09:	83 c4 18             	add    esp,0x18
c000df0c:	5b                   	pop    ebx
c000df0d:	c2 04 00             	ret    0x4

c000df10 <HardDiskController::HardDiskController(char const*)>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df17:	83 ec 08             	sub    esp,0x8
c000df1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1e:	50                   	push   eax
c000df1f:	e8 42 fe ff ff       	call   c000dd66 <Device::Device(char const*)>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	ba a8 35 02 c0       	mov    edx,0xc00235a8
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	89 10                	mov    DWORD PTR [eax],edx
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000df40:	90                   	nop
c000df41:	83 c4 0c             	add    esp,0xc
c000df44:	c3                   	ret    
c000df45:	90                   	nop
c000df46:	66 90                	xchg   ax,ax

c000df48 <HardDiskController::~HardDiskController()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	ba a8 35 02 c0       	mov    edx,0xc00235a8
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	50                   	push   eax
c000df5e:	e8 01 fb ff ff       	call   c000da64 <Device::~Device()>
c000df63:	83 c4 10             	add    esp,0x10
c000df66:	90                   	nop
c000df67:	83 c4 0c             	add    esp,0xc
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <HardDiskController::~HardDiskController()>:
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	83 ec 0c             	sub    esp,0xc
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	e8 cd ff ff ff       	call   c000df48 <HardDiskController::~HardDiskController()>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	83 ec 08             	sub    esp,0x8
c000df81:	68 58 01 00 00       	push   0x158
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 75 e6 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	83 c4 0c             	add    esp,0xc
c000df95:	c3                   	ret    

c000df96 <PhysicalDisk::eject()>:
c000df96:	83 c8 ff             	or     eax,0xffffffff
c000df99:	c3                   	ret    

c000df9a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000df9a:	83 ec 0c             	sub    esp,0xc
c000df9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa1:	83 ec 08             	sub    esp,0x8
c000dfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa8:	50                   	push   eax
c000dfa9:	e8 b8 fd ff ff       	call   c000dd66 <Device::Device(char const*)>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	ba d4 35 02 c0       	mov    edx,0xc00235d4
c000dfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfba:	89 10                	mov    DWORD PTR [eax],edx
c000dfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000dfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dfe8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000dfee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000dffc:	90                   	nop
c000dffd:	83 c4 0c             	add    esp,0xc
c000e000:	c3                   	ret    
c000e001:	90                   	nop

c000e002 <PhysicalDisk::startCache()>:
c000e002:	56                   	push   esi
c000e003:	53                   	push   ebx
c000e004:	83 ec 10             	sub    esp,0x10
c000e007:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e00b:	6a 44                	push   0x44
c000e00d:	e8 85 b7 ff ff       	call   c0009797 <malloc>
c000e012:	89 c6                	mov    esi,eax
c000e014:	58                   	pop    eax
c000e015:	5a                   	pop    edx
c000e016:	53                   	push   ebx
c000e017:	56                   	push   esi
c000e018:	e8 c7 15 00 00       	call   c000f5e4 <VCache::VCache(PhysicalDisk*)>
c000e01d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e023:	83 c4 14             	add    esp,0x14
c000e026:	5b                   	pop    ebx
c000e027:	5e                   	pop    esi
c000e028:	c3                   	ret    
c000e029:	90                   	nop

c000e02a <PhysicalDisk::~PhysicalDisk()>:
c000e02a:	83 ec 0c             	sub    esp,0xc
c000e02d:	ba d4 35 02 c0       	mov    edx,0xc00235d4
c000e032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e036:	89 10                	mov    DWORD PTR [eax],edx
c000e038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	50                   	push   eax
c000e040:	e8 1f fa ff ff       	call   c000da64 <Device::~Device()>
c000e045:	83 c4 10             	add    esp,0x10
c000e048:	90                   	nop
c000e049:	83 c4 0c             	add    esp,0xc
c000e04c:	c3                   	ret    
c000e04d:	90                   	nop

c000e04e <PhysicalDisk::~PhysicalDisk()>:
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	83 ec 0c             	sub    esp,0xc
c000e054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e058:	e8 cd ff ff ff       	call   c000e02a <PhysicalDisk::~PhysicalDisk()>
c000e05d:	83 c4 10             	add    esp,0x10
c000e060:	83 ec 08             	sub    esp,0x8
c000e063:	68 6c 01 00 00       	push   0x16c
c000e068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06c:	e8 93 e5 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000e071:	83 c4 10             	add    esp,0x10
c000e074:	83 c4 0c             	add    esp,0xc
c000e077:	c3                   	ret    

c000e078 <int_handler>:
c000e078:	55                   	push   ebp
c000e079:	57                   	push   edi
c000e07a:	56                   	push   esi
c000e07b:	53                   	push   ebx
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e083:	80 3d 64 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d64,0x0
c000e08a:	74 0b                	je     c000e097 <int_handler+0x1f>
c000e08c:	fa                   	cli    
c000e08d:	f4                   	hlt    
c000e08e:	80 3d 64 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d64,0x0
c000e095:	75 f5                	jne    c000e08c <int_handler+0x14>
c000e097:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000e09a:	8d 46 e0             	lea    eax,[esi-0x20]
c000e09d:	83 f8 17             	cmp    eax,0x17
c000e0a0:	76 3e                	jbe    c000e0e0 <int_handler+0x68>
c000e0a2:	c1 e6 04             	shl    esi,0x4
c000e0a5:	31 db                	xor    ebx,ebx
c000e0a7:	8d ae e0 73 02 c0    	lea    ebp,[esi-0x3ffd8c20]
c000e0ad:	81 c6 e0 63 02 c0    	add    esi,0xc00263e0
c000e0b3:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e0b7:	85 c0                	test   eax,eax
c000e0b9:	74 13                	je     c000e0ce <int_handler+0x56>
c000e0bb:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000e0be:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000e0c2:	74 2a                	je     c000e0ee <int_handler+0x76>
c000e0c4:	83 ec 08             	sub    esp,0x8
c000e0c7:	52                   	push   edx
c000e0c8:	57                   	push   edi
c000e0c9:	ff d0                	call   eax
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	43                   	inc    ebx
c000e0cf:	83 fb 04             	cmp    ebx,0x4
c000e0d2:	75 df                	jne    c000e0b3 <int_handler+0x3b>
c000e0d4:	83 c4 0c             	add    esp,0xc
c000e0d7:	31 c0                	xor    eax,eax
c000e0d9:	5b                   	pop    ebx
c000e0da:	31 d2                	xor    edx,edx
c000e0dc:	5e                   	pop    esi
c000e0dd:	5f                   	pop    edi
c000e0de:	5d                   	pop    ebp
c000e0df:	c3                   	ret    
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	50                   	push   eax
c000e0e4:	e8 8d b5 00 00       	call   c0019676 <Hal::endOfInterrupt(int)>
c000e0e9:	83 c4 10             	add    esp,0x10
c000e0ec:	eb b4                	jmp    c000e0a2 <int_handler+0x2a>
c000e0ee:	83 ec 08             	sub    esp,0x8
c000e0f1:	52                   	push   edx
c000e0f2:	57                   	push   edi
c000e0f3:	ff d0                	call   eax
c000e0f5:	83 c4 10             	add    esp,0x10
c000e0f8:	83 c4 0c             	add    esp,0xc
c000e0fb:	5b                   	pop    ebx
c000e0fc:	5e                   	pop    esi
c000e0fd:	5f                   	pop    edi
c000e0fe:	5d                   	pop    ebp
c000e0ff:	c3                   	ret    

c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e100:	56                   	push   esi
c000e101:	31 c0                	xor    eax,eax
c000e103:	53                   	push   ebx
c000e104:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e108:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e10c:	89 ca                	mov    edx,ecx
c000e10e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e112:	c1 e2 04             	shl    edx,0x4
c000e115:	83 bc 82 e0 73 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8c20],0x0
c000e11d:	74 15                	je     c000e134 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000e11f:	40                   	inc    eax
c000e120:	83 f8 04             	cmp    eax,0x4
c000e123:	75 f0                	jne    c000e115 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000e125:	c7 44 24 0c 04 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023604
c000e12d:	5b                   	pop    ebx
c000e12e:	5e                   	pop    esi
c000e12f:	e9 1b 49 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>
c000e134:	8d 04 88             	lea    eax,[eax+ecx*4]
c000e137:	89 1c 85 e0 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c20],ebx
c000e13e:	89 34 85 e0 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c20],esi
c000e145:	5b                   	pop    ebx
c000e146:	5e                   	pop    esi
c000e147:	c3                   	ret    

c000e148 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e148:	57                   	push   edi
c000e149:	8b 15 c8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c8
c000e14f:	56                   	push   esi
c000e150:	53                   	push   ebx
c000e151:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e159:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e160:	74 55                	je     c000e1b7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e162:	89 c7                	mov    edi,eax
c000e164:	84 c0                	test   al,al
c000e166:	74 1e                	je     c000e186 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e168:	83 fe 0f             	cmp    esi,0xf
c000e16b:	0f 8f cc 00 00 00    	jg     c000e23d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000e171:	0f b6 b6 e0 59 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda620]
c000e178:	66 8b bc 36 80 8b 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd7480]
c000e180:	66 d1 ef             	shr    di,1
c000e183:	83 e7 01             	and    edi,0x1
c000e186:	83 ec 08             	sub    esp,0x8
c000e189:	31 db                	xor    ebx,ebx
c000e18b:	ff 35 00 a2 02 c0    	push   DWORD PTR ds:0xc002a200
c000e191:	68 11 36 02 c0       	push   0xc0023611
c000e196:	e8 4a e5 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000e19b:	83 c4 10             	add    esp,0x10
c000e19e:	a1 00 a2 02 c0       	mov    eax,ds:0xc002a200
c000e1a3:	85 c0                	test   eax,eax
c000e1a5:	7f 51                	jg     c000e1f8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000e1a7:	83 ec 0c             	sub    esp,0xc
c000e1aa:	68 28 36 02 c0       	push   0xc0023628
c000e1af:	e8 9b 48 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000e1b4:	83 c4 10             	add    esp,0x10
c000e1b7:	8d 4e 20             	lea    ecx,[esi+0x20]
c000e1ba:	31 d2                	xor    edx,edx
c000e1bc:	89 c8                	mov    eax,ecx
c000e1be:	c1 e0 04             	shl    eax,0x4
c000e1c1:	8b 9c 90 e0 73 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffd8c20]
c000e1c8:	85 db                	test   ebx,ebx
c000e1ca:	0f 84 84 00 00 00    	je     c000e254 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000e1d0:	42                   	inc    edx
c000e1d1:	83 fa 04             	cmp    edx,0x4
c000e1d4:	75 eb                	jne    c000e1c1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000e1d6:	83 ec 0c             	sub    esp,0xc
c000e1d9:	68 7c 36 02 c0       	push   0xc002367c
c000e1de:	e8 6c 48 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000e1e3:	83 c4 10             	add    esp,0x10
c000e1e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e1eb:	5b                   	pop    ebx
c000e1ec:	5e                   	pop    esi
c000e1ed:	5f                   	pop    edi
c000e1ee:	c3                   	ret    
c000e1ef:	43                   	inc    ebx
c000e1f0:	39 1d 00 a2 02 c0    	cmp    DWORD PTR ds:0xc002a200,ebx
c000e1f6:	7e af                	jle    c000e1a7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000e1f8:	83 ec 08             	sub    esp,0x8
c000e1fb:	56                   	push   esi
c000e1fc:	ff 34 9d 20 a2 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5de0]
c000e203:	e8 24 27 01 00       	call   c002092c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000e208:	83 c4 10             	add    esp,0x10
c000e20b:	84 c0                	test   al,al
c000e20d:	74 e0                	je     c000e1ef <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000e20f:	50                   	push   eax
c000e210:	89 f8                	mov    eax,edi
c000e212:	0f b6 f8             	movzx  edi,al
c000e215:	8d 46 20             	lea    eax,[esi+0x20]
c000e218:	57                   	push   edi
c000e219:	0f b6 c0             	movzx  eax,al
c000e21c:	6a 00                	push   0x0
c000e21e:	50                   	push   eax
c000e21f:	89 f0                	mov    eax,esi
c000e221:	6a 00                	push   0x0
c000e223:	0f b6 c0             	movzx  eax,al
c000e226:	6a 00                	push   0x0
c000e228:	50                   	push   eax
c000e229:	ff 34 9d 20 a2 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5de0]
c000e230:	e8 73 28 01 00       	call   c0020aa8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000e235:	83 c4 20             	add    esp,0x20
c000e238:	e9 7a ff ff ff       	jmp    c000e1b7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e23d:	83 ec 0c             	sub    esp,0xc
c000e240:	31 ff                	xor    edi,edi
c000e242:	68 44 36 02 c0       	push   0xc0023644
c000e247:	e8 03 48 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000e24c:	83 c4 10             	add    esp,0x10
c000e24f:	e9 32 ff ff ff       	jmp    c000e186 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e254:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000e257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e25b:	89 14 85 e0 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c20],edx
c000e262:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e266:	5b                   	pop    ebx
c000e267:	89 14 85 e0 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c20],edx
c000e26e:	89 f0                	mov    eax,esi
c000e270:	5e                   	pop    esi
c000e271:	5f                   	pop    edi
c000e272:	c3                   	ret    

c000e273 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e277:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e27b:	c1 e0 04             	shl    eax,0x4
c000e27e:	8d 50 10             	lea    edx,[eax+0x10]
c000e281:	39 88 e0 73 02 c0    	cmp    DWORD PTR [eax-0x3ffd8c20],ecx
c000e287:	74 08                	je     c000e291 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000e289:	83 c0 04             	add    eax,0x4
c000e28c:	39 d0                	cmp    eax,edx
c000e28e:	75 f1                	jne    c000e281 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000e290:	c3                   	ret    
c000e291:	c7 80 e0 73 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c20],0x0
c000e29b:	c7 80 e0 63 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c20],0x0
c000e2a5:	eb e2                	jmp    c000e289 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000e2a7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e2a7:	53                   	push   ebx
c000e2a8:	83 ec 08             	sub    esp,0x8
c000e2ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e2af:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e2b4:	74 0e                	je     c000e2c4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e2b6:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000e2bb:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000e2c2:	75 37                	jne    c000e2fb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000e2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c8:	83 c0 20             	add    eax,0x20
c000e2cb:	c1 e0 04             	shl    eax,0x4
c000e2ce:	8d 50 10             	lea    edx,[eax+0x10]
c000e2d1:	39 98 e0 73 02 c0    	cmp    DWORD PTR [eax-0x3ffd8c20],ebx
c000e2d7:	74 0c                	je     c000e2e5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000e2d9:	83 c0 04             	add    eax,0x4
c000e2dc:	39 d0                	cmp    eax,edx
c000e2de:	75 f1                	jne    c000e2d1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000e2e0:	83 c4 08             	add    esp,0x8
c000e2e3:	5b                   	pop    ebx
c000e2e4:	c3                   	ret    
c000e2e5:	c7 80 e0 73 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c20],0x0
c000e2ef:	c7 80 e0 63 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c20],0x0
c000e2f9:	eb de                	jmp    c000e2d9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000e2fb:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000e300:	7f 11                	jg     c000e313 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000e302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e306:	0f b6 80 e0 59 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda620]
c000e30d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e311:	eb b1                	jmp    c000e2c4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e313:	83 ec 0c             	sub    esp,0xc
c000e316:	68 35 36 02 c0       	push   0xc0023635
c000e31b:	e8 2f 47 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000e320:	83 c4 10             	add    esp,0x10
c000e323:	eb 9f                	jmp    c000e2c4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000e325 <setupINTS()>:
c000e325:	31 c0                	xor    eax,eax
c000e327:	c7 80 e0 73 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c20],0x0
c000e331:	c7 80 e0 63 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c20],0x0
c000e33b:	c7 80 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c1c],0x0
c000e345:	c7 80 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c1c],0x0
c000e34f:	c7 80 e8 73 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c18],0x0
c000e359:	c7 80 e8 63 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c18],0x0
c000e363:	c7 80 ec 73 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c14],0x0
c000e36d:	c7 80 ec 63 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c14],0x0
c000e377:	83 c0 10             	add    eax,0x10
c000e37a:	3d 00 10 00 00       	cmp    eax,0x1000
c000e37f:	75 a6                	jne    c000e327 <setupINTS()+0x2>
c000e381:	c3                   	ret    

c000e382 <convertLegacyIRQNumber(int)>:
c000e382:	83 ec 0c             	sub    esp,0xc
c000e385:	8b 15 c8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c8
c000e38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e396:	74 0c                	je     c000e3a4 <convertLegacyIRQNumber(int)+0x22>
c000e398:	83 f8 0f             	cmp    eax,0xf
c000e39b:	7f 0b                	jg     c000e3a8 <convertLegacyIRQNumber(int)+0x26>
c000e39d:	0f b6 80 e0 59 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda620]
c000e3a4:	83 c4 0c             	add    esp,0xc
c000e3a7:	c3                   	ret    
c000e3a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e3ac:	83 ec 0c             	sub    esp,0xc
c000e3af:	68 44 36 02 c0       	push   0xc0023644
c000e3b4:	e8 96 46 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000e3b9:	83 c4 10             	add    esp,0x10
c000e3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c0:	83 c4 0c             	add    esp,0xc
c000e3c3:	c3                   	ret    

c000e3c4 <startGUI(void*)>:
c000e3c4:	55                   	push   ebp
c000e3c5:	89 e5                	mov    ebp,esp
c000e3c7:	53                   	push   ebx
c000e3c8:	83 ec 04             	sub    esp,0x4
c000e3cb:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000e3d0:	48                   	dec    eax
c000e3d1:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000e3d6:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000e3db:	85 c0                	test   eax,eax
c000e3dd:	75 01                	jne    c000e3e0 <startGUI(void*)+0x1c>
c000e3df:	fb                   	sti    
c000e3e0:	8b 1d c8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c8
c000e3e6:	83 ec 08             	sub    esp,0x8
c000e3e9:	6a 01                	push   0x1
c000e3eb:	68 a1 36 02 c0       	push   0xc00236a1
c000e3f0:	e8 ae 71 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c000e3f5:	83 c4 10             	add    esp,0x10
c000e3f8:	83 ec 08             	sub    esp,0x8
c000e3fb:	53                   	push   ebx
c000e3fc:	50                   	push   eax
c000e3fd:	e8 d2 73 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c000e402:	83 c4 10             	add    esp,0x10
c000e405:	8b 1d c8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c8
c000e40b:	83 ec 08             	sub    esp,0x8
c000e40e:	6a 01                	push   0x1
c000e410:	68 bb 36 02 c0       	push   0xc00236bb
c000e415:	e8 89 71 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c000e41a:	83 c4 10             	add    esp,0x10
c000e41d:	83 ec 08             	sub    esp,0x8
c000e420:	53                   	push   ebx
c000e421:	50                   	push   eax
c000e422:	e8 ad 73 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c000e427:	83 c4 10             	add    esp,0x10
c000e42a:	90                   	nop
c000e42b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e42e:	c9                   	leave  
c000e42f:	c3                   	ret    

c000e430 <startGUIVESA(void*)>:
c000e430:	55                   	push   ebp
c000e431:	89 e5                	mov    ebp,esp
c000e433:	53                   	push   ebx
c000e434:	83 ec 04             	sub    esp,0x4
c000e437:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000e43c:	48                   	dec    eax
c000e43d:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000e442:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000e447:	85 c0                	test   eax,eax
c000e449:	75 01                	jne    c000e44c <startGUIVESA(void*)+0x1c>
c000e44b:	fb                   	sti    
c000e44c:	8b 1d c8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c8
c000e452:	83 ec 08             	sub    esp,0x8
c000e455:	6a 01                	push   0x1
c000e457:	68 d9 36 02 c0       	push   0xc00236d9
c000e45c:	e8 42 71 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c000e461:	83 c4 10             	add    esp,0x10
c000e464:	83 ec 08             	sub    esp,0x8
c000e467:	53                   	push   ebx
c000e468:	50                   	push   eax
c000e469:	e8 66 73 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	8b 1d c8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c8
c000e477:	83 ec 08             	sub    esp,0x8
c000e47a:	6a 01                	push   0x1
c000e47c:	68 bb 36 02 c0       	push   0xc00236bb
c000e481:	e8 1d 71 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c000e486:	83 c4 10             	add    esp,0x10
c000e489:	83 ec 08             	sub    esp,0x8
c000e48c:	53                   	push   ebx
c000e48d:	50                   	push   eax
c000e48e:	e8 41 73 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c000e493:	83 c4 10             	add    esp,0x10
c000e496:	90                   	nop
c000e497:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e49a:	c9                   	leave  
c000e49b:	c3                   	ret    

c000e49c <sendKeyToTerminal(unsigned char)>:
c000e49c:	55                   	push   ebp
c000e49d:	89 e5                	mov    ebp,esp
c000e49f:	83 ec 28             	sub    esp,0x28
c000e4a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e4a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000e4a8:	a1 14 63 02 c0       	mov    eax,ds:0xc0026314
c000e4ad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000e4b1:	83 ec 08             	sub    esp,0x8
c000e4b4:	52                   	push   edx
c000e4b5:	50                   	push   eax
c000e4b6:	e8 13 c7 ff ff       	call   c000abce <VgaText::receiveKey(unsigned char)>
c000e4bb:	83 c4 10             	add    esp,0x10
c000e4be:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000e4c2:	0f 85 8f 00 00 00    	jne    c000e557 <sendKeyToTerminal(unsigned char)+0xbb>
c000e4c8:	fa                   	cli    
c000e4c9:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000e4ce:	40                   	inc    eax
c000e4cf:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000e4d4:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c000e4d9:	40                   	inc    eax
c000e4da:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c000e4df:	a1 e0 83 02 c0       	mov    eax,ds:0xc00283e0
c000e4e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e4e7:	c7 05 e0 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e0,0x0
c000e4f1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000e4f5:	74 1f                	je     c000e516 <sendKeyToTerminal(unsigned char)+0x7a>
c000e4f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000e4fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000e4fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e500:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e503:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000e50c:	e8 2f 7f 00 00       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	eb db                	jmp    c000e4f1 <sendKeyToTerminal(unsigned char)+0x55>
c000e516:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c000e51b:	48                   	dec    eax
c000e51c:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c000e521:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c000e526:	85 c0                	test   eax,eax
c000e528:	75 18                	jne    c000e542 <sendKeyToTerminal(unsigned char)+0xa6>
c000e52a:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c000e52f:	85 c0                	test   eax,eax
c000e531:	74 0f                	je     c000e542 <sendKeyToTerminal(unsigned char)+0xa6>
c000e533:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c000e53d:	e8 42 7a 00 00       	call   c0015f84 <schedule()>
c000e542:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000e547:	48                   	dec    eax
c000e548:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000e54d:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000e552:	85 c0                	test   eax,eax
c000e554:	75 01                	jne    c000e557 <sendKeyToTerminal(unsigned char)+0xbb>
c000e556:	fb                   	sti    
c000e557:	90                   	nop
c000e558:	c9                   	leave  
c000e559:	c3                   	ret    

c000e55a <sendKeyboardToken(KeyboardToken)>:
c000e55a:	55                   	push   ebp
c000e55b:	89 e5                	mov    ebp,esp
c000e55d:	83 ec 18             	sub    esp,0x18
c000e560:	e8 c3 47 00 00       	call   c0012d28 <Krnl::userIOReceived()>
c000e565:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000e568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e56b:	0f b7 c0             	movzx  eax,ax
c000e56e:	83 f2 01             	xor    edx,0x1
c000e571:	88 90 00 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7c00],dl
c000e577:	a1 e8 83 02 c0       	mov    eax,ds:0xc00283e8
c000e57c:	85 c0                	test   eax,eax
c000e57e:	74 24                	je     c000e5a4 <sendKeyboardToken(KeyboardToken)+0x4a>
c000e580:	8b 0d e8 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283e8
c000e586:	83 ec 04             	sub    esp,0x4
c000e589:	68 00 84 02 c0       	push   0xc0028400
c000e58e:	83 ec 08             	sub    esp,0x8
c000e591:	89 e2                	mov    edx,esp
c000e593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e596:	89 02                	mov    DWORD PTR [edx],eax
c000e598:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000e59b:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e59f:	ff d1                	call   ecx
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000e5a8:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000e5ab:	a0 08 88 02 c0       	mov    al,ds:0xc0028808
c000e5b0:	38 c2                	cmp    dl,al
c000e5b2:	74 1c                	je     c000e5d0 <sendKeyboardToken(KeyboardToken)+0x76>
c000e5b4:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000e5b7:	a2 08 88 02 c0       	mov    ds:0xc0028808,al
c000e5bc:	a0 08 88 02 c0       	mov    al,ds:0xc0028808
c000e5c1:	0f b6 c0             	movzx  eax,al
c000e5c4:	83 ec 0c             	sub    esp,0xc
c000e5c7:	50                   	push   eax
c000e5c8:	e8 31 bd ff ff       	call   c000a2fe <setTerminalScrollLock(bool)>
c000e5cd:	83 c4 10             	add    esp,0x10
c000e5d0:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000e5d3:	84 c0                	test   al,al
c000e5d5:	0f 84 ae 00 00 00    	je     c000e689 <sendKeyboardToken(KeyboardToken)+0x12f>
c000e5db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5de:	66 3d 10 03          	cmp    ax,0x310
c000e5e2:	75 06                	jne    c000e5ea <sendKeyboardToken(KeyboardToken)+0x90>
c000e5e4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000e5ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5ed:	66 3d 11 03          	cmp    ax,0x311
c000e5f1:	75 06                	jne    c000e5f9 <sendKeyboardToken(KeyboardToken)+0x9f>
c000e5f3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000e5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5fc:	66 3d 12 03          	cmp    ax,0x312
c000e600:	75 06                	jne    c000e608 <sendKeyboardToken(KeyboardToken)+0xae>
c000e602:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000e608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e60b:	66 3d 13 03          	cmp    ax,0x313
c000e60f:	75 06                	jne    c000e617 <sendKeyboardToken(KeyboardToken)+0xbd>
c000e611:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000e617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e61a:	66 3d 14 03          	cmp    ax,0x314
c000e61e:	75 06                	jne    c000e626 <sendKeyboardToken(KeyboardToken)+0xcc>
c000e620:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000e626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e629:	66 3d 15 03          	cmp    ax,0x315
c000e62d:	75 06                	jne    c000e635 <sendKeyboardToken(KeyboardToken)+0xdb>
c000e62f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e638:	66 3d 16 03          	cmp    ax,0x316
c000e63c:	75 06                	jne    c000e644 <sendKeyboardToken(KeyboardToken)+0xea>
c000e63e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000e644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e647:	66 3d 17 03          	cmp    ax,0x317
c000e64b:	75 06                	jne    c000e653 <sendKeyboardToken(KeyboardToken)+0xf9>
c000e64d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000e653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e656:	66 3d 18 03          	cmp    ax,0x318
c000e65a:	75 06                	jne    c000e662 <sendKeyboardToken(KeyboardToken)+0x108>
c000e65c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000e662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e665:	66 3d 19 03          	cmp    ax,0x319
c000e669:	75 06                	jne    c000e671 <sendKeyboardToken(KeyboardToken)+0x117>
c000e66b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000e671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e674:	66 3d 1a 03          	cmp    ax,0x31a
c000e678:	0f 85 c9 00 00 00    	jne    c000e747 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e67e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000e684:	e9 be 00 00 00       	jmp    c000e747 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e68c:	66 3d 10 03          	cmp    ax,0x310
c000e690:	75 0a                	jne    c000e69c <sendKeyboardToken(KeyboardToken)+0x142>
c000e692:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000e698:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e69c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e69f:	66 3d 11 03          	cmp    ax,0x311
c000e6a3:	75 0a                	jne    c000e6af <sendKeyboardToken(KeyboardToken)+0x155>
c000e6a5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000e6ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6b2:	66 3d 12 03          	cmp    ax,0x312
c000e6b6:	75 0a                	jne    c000e6c2 <sendKeyboardToken(KeyboardToken)+0x168>
c000e6b8:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000e6be:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6c5:	66 3d 13 03          	cmp    ax,0x313
c000e6c9:	75 0a                	jne    c000e6d5 <sendKeyboardToken(KeyboardToken)+0x17b>
c000e6cb:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000e6d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6d8:	66 3d 14 03          	cmp    ax,0x314
c000e6dc:	75 0a                	jne    c000e6e8 <sendKeyboardToken(KeyboardToken)+0x18e>
c000e6de:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000e6e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6eb:	66 3d 15 03          	cmp    ax,0x315
c000e6ef:	75 0a                	jne    c000e6fb <sendKeyboardToken(KeyboardToken)+0x1a1>
c000e6f1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e6f7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6fe:	66 3d 16 03          	cmp    ax,0x316
c000e702:	75 0a                	jne    c000e70e <sendKeyboardToken(KeyboardToken)+0x1b4>
c000e704:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000e70a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e711:	66 3d 17 03          	cmp    ax,0x317
c000e715:	75 0a                	jne    c000e721 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000e717:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000e71d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e724:	66 3d 18 03          	cmp    ax,0x318
c000e728:	75 0a                	jne    c000e734 <sendKeyboardToken(KeyboardToken)+0x1da>
c000e72a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000e730:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e737:	66 3d 19 03          	cmp    ax,0x319
c000e73b:	75 0a                	jne    c000e747 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e73d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000e743:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e74a:	66 3d 00 02          	cmp    ax,0x200
c000e74e:	75 2c                	jne    c000e77c <sendKeyboardToken(KeyboardToken)+0x222>
c000e750:	a0 00 88 02 c0       	mov    al,ds:0xc0028800
c000e755:	83 f0 01             	xor    eax,0x1
c000e758:	84 c0                	test   al,al
c000e75a:	74 20                	je     c000e77c <sendKeyboardToken(KeyboardToken)+0x222>
c000e75c:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c000e761:	6a 01                	push   0x1
c000e763:	6a 00                	push   0x0
c000e765:	68 c4 e3 00 c0       	push   0xc000e3c4
c000e76a:	50                   	push   eax
c000e76b:	e8 f8 75 00 00       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c000e770:	83 c4 10             	add    esp,0x10
c000e773:	c6 05 00 88 02 c0 01 	mov    BYTE PTR ds:0xc0028800,0x1
c000e77a:	eb 33                	jmp    c000e7af <sendKeyboardToken(KeyboardToken)+0x255>
c000e77c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e77f:	66 3d 01 02          	cmp    ax,0x201
c000e783:	75 2a                	jne    c000e7af <sendKeyboardToken(KeyboardToken)+0x255>
c000e785:	a0 00 88 02 c0       	mov    al,ds:0xc0028800
c000e78a:	83 f0 01             	xor    eax,0x1
c000e78d:	84 c0                	test   al,al
c000e78f:	74 1e                	je     c000e7af <sendKeyboardToken(KeyboardToken)+0x255>
c000e791:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c000e796:	6a 01                	push   0x1
c000e798:	6a 00                	push   0x0
c000e79a:	68 30 e4 00 c0       	push   0xc000e430
c000e79f:	50                   	push   eax
c000e7a0:	e8 c3 75 00 00       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c000e7a5:	83 c4 10             	add    esp,0x10
c000e7a8:	c6 05 00 88 02 c0 01 	mov    BYTE PTR ds:0xc0028800,0x1
c000e7af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7b2:	66 3d 1d 03          	cmp    ax,0x31d
c000e7b6:	75 06                	jne    c000e7be <sendKeyboardToken(KeyboardToken)+0x264>
c000e7b8:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000e7be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7c1:	66 3d 1c 03          	cmp    ax,0x31c
c000e7c5:	75 06                	jne    c000e7cd <sendKeyboardToken(KeyboardToken)+0x273>
c000e7c7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000e7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7d0:	66 3d 1b 03          	cmp    ax,0x31b
c000e7d4:	75 06                	jne    c000e7dc <sendKeyboardToken(KeyboardToken)+0x282>
c000e7d6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000e7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7df:	66 3d 1e 03          	cmp    ax,0x31e
c000e7e3:	75 06                	jne    c000e7eb <sendKeyboardToken(KeyboardToken)+0x291>
c000e7e5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000e7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7ee:	66 3d 1f 03          	cmp    ax,0x31f
c000e7f2:	75 06                	jne    c000e7fa <sendKeyboardToken(KeyboardToken)+0x2a0>
c000e7f4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000e7fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7fd:	66 3d 1a 03          	cmp    ax,0x31a
c000e801:	75 06                	jne    c000e809 <sendKeyboardToken(KeyboardToken)+0x2af>
c000e803:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000e809:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000e80d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e810:	83 f0 01             	xor    eax,0x1
c000e813:	84 c0                	test   al,al
c000e815:	74 77                	je     c000e88e <sendKeyboardToken(KeyboardToken)+0x334>
c000e817:	a0 01 85 02 c0       	mov    al,ds:0xc0028501
c000e81c:	84 c0                	test   al,al
c000e81e:	74 41                	je     c000e861 <sendKeyboardToken(KeyboardToken)+0x307>
c000e820:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e824:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000e828:	74 2b                	je     c000e855 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000e82a:	8b 15 04 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028804
c000e830:	89 d0                	mov    eax,edx
c000e832:	c1 e0 02             	shl    eax,0x2
c000e835:	01 d0                	add    eax,edx
c000e837:	01 c0                	add    eax,eax
c000e839:	a3 04 88 02 c0       	mov    ds:0xc0028804,eax
c000e83e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e841:	0f b7 c0             	movzx  eax,ax
c000e844:	8d 50 d0             	lea    edx,[eax-0x30]
c000e847:	a1 04 88 02 c0       	mov    eax,ds:0xc0028804
c000e84c:	01 d0                	add    eax,edx
c000e84e:	a3 04 88 02 c0       	mov    ds:0xc0028804,eax
c000e853:	eb 6d                	jmp    c000e8c2 <sendKeyboardToken(KeyboardToken)+0x368>
c000e855:	c7 05 04 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028804,0x0
c000e85f:	eb 61                	jmp    c000e8c2 <sendKeyboardToken(KeyboardToken)+0x368>
c000e861:	a1 04 88 02 c0       	mov    eax,ds:0xc0028804
c000e866:	85 c0                	test   eax,eax
c000e868:	74 18                	je     c000e882 <sendKeyboardToken(KeyboardToken)+0x328>
c000e86a:	a1 04 88 02 c0       	mov    eax,ds:0xc0028804
c000e86f:	0f b6 c0             	movzx  eax,al
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	50                   	push   eax
c000e876:	e8 21 fc ff ff       	call   c000e49c <sendKeyToTerminal(unsigned char)>
c000e87b:	83 c4 10             	add    esp,0x10
c000e87e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e882:	c7 05 04 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028804,0x0
c000e88c:	eb 34                	jmp    c000e8c2 <sendKeyboardToken(KeyboardToken)+0x368>
c000e88e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e891:	66 3d 01 01          	cmp    ax,0x101
c000e895:	75 2b                	jne    c000e8c2 <sendKeyboardToken(KeyboardToken)+0x368>
c000e897:	a1 04 88 02 c0       	mov    eax,ds:0xc0028804
c000e89c:	85 c0                	test   eax,eax
c000e89e:	74 18                	je     c000e8b8 <sendKeyboardToken(KeyboardToken)+0x35e>
c000e8a0:	a1 04 88 02 c0       	mov    eax,ds:0xc0028804
c000e8a5:	0f b6 c0             	movzx  eax,al
c000e8a8:	83 ec 0c             	sub    esp,0xc
c000e8ab:	50                   	push   eax
c000e8ac:	e8 eb fb ff ff       	call   c000e49c <sendKeyToTerminal(unsigned char)>
c000e8b1:	83 c4 10             	add    esp,0x10
c000e8b4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e8b8:	c7 05 04 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028804,0x0
c000e8c2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e8c5:	83 f0 01             	xor    eax,0x1
c000e8c8:	84 c0                	test   al,al
c000e8ca:	74 4c                	je     c000e918 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e8cc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e8cf:	83 f0 01             	xor    eax,0x1
c000e8d2:	84 c0                	test   al,al
c000e8d4:	74 42                	je     c000e918 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e8d6:	a0 00 85 02 c0       	mov    al,ds:0xc0028500
c000e8db:	83 f0 01             	xor    eax,0x1
c000e8de:	84 c0                	test   al,al
c000e8e0:	74 36                	je     c000e918 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e8e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8e5:	66 83 f8 1f          	cmp    ax,0x1f
c000e8e9:	76 09                	jbe    c000e8f4 <sendKeyboardToken(KeyboardToken)+0x39a>
c000e8eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8ee:	66 83 f8 7e          	cmp    ax,0x7e
c000e8f2:	76 12                	jbe    c000e906 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e8f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8f7:	66 83 f8 0a          	cmp    ax,0xa
c000e8fb:	74 09                	je     c000e906 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e8fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e900:	66 83 f8 08          	cmp    ax,0x8
c000e904:	75 12                	jne    c000e918 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e909:	0f b6 c0             	movzx  eax,al
c000e90c:	83 ec 0c             	sub    esp,0xc
c000e90f:	50                   	push   eax
c000e910:	e8 87 fb ff ff       	call   c000e49c <sendKeyToTerminal(unsigned char)>
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e91b:	83 f0 01             	xor    eax,0x1
c000e91e:	84 c0                	test   al,al
c000e920:	74 4f                	je     c000e971 <sendKeyboardToken(KeyboardToken)+0x417>
c000e922:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e925:	83 f0 01             	xor    eax,0x1
c000e928:	84 c0                	test   al,al
c000e92a:	74 45                	je     c000e971 <sendKeyboardToken(KeyboardToken)+0x417>
c000e92c:	a0 00 85 02 c0       	mov    al,ds:0xc0028500
c000e931:	84 c0                	test   al,al
c000e933:	74 3c                	je     c000e971 <sendKeyboardToken(KeyboardToken)+0x417>
c000e935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e938:	66 83 f8 3f          	cmp    ax,0x3f
c000e93c:	76 33                	jbe    c000e971 <sendKeyboardToken(KeyboardToken)+0x417>
c000e93e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e941:	66 83 f8 7f          	cmp    ax,0x7f
c000e945:	77 2a                	ja     c000e971 <sendKeyboardToken(KeyboardToken)+0x417>
c000e947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e94a:	88 c2                	mov    dl,al
c000e94c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e94f:	66 83 f8 5f          	cmp    ax,0x5f
c000e953:	76 04                	jbe    c000e959 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000e955:	b0 20                	mov    al,0x20
c000e957:	eb 02                	jmp    c000e95b <sendKeyboardToken(KeyboardToken)+0x401>
c000e959:	b0 00                	mov    al,0x0
c000e95b:	29 c2                	sub    edx,eax
c000e95d:	88 d0                	mov    al,dl
c000e95f:	83 e8 40             	sub    eax,0x40
c000e962:	0f b6 c0             	movzx  eax,al
c000e965:	83 ec 0c             	sub    esp,0xc
c000e968:	50                   	push   eax
c000e969:	e8 2e fb ff ff       	call   c000e49c <sendKeyToTerminal(unsigned char)>
c000e96e:	83 c4 10             	add    esp,0x10
c000e971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e974:	66 3d 00 03          	cmp    ax,0x300
c000e978:	75 0f                	jne    c000e989 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e97a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e97d:	83 f0 01             	xor    eax,0x1
c000e980:	84 c0                	test   al,al
c000e982:	74 05                	je     c000e989 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e984:	e8 76 b9 ff ff       	call   c000a2ff <doTerminalCycle()>
c000e989:	90                   	nop
c000e98a:	c9                   	leave  
c000e98b:	c3                   	ret    

c000e98c <clearInternalKeybuffer(VgaText*)>:
c000e98c:	55                   	push   ebp
c000e98d:	89 e5                	mov    ebp,esp
c000e98f:	83 ec 08             	sub    esp,0x8
c000e992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e995:	05 32 01 00 00       	add    eax,0x132
c000e99a:	83 ec 0c             	sub    esp,0xc
c000e99d:	50                   	push   eax
c000e99e:	e8 21 1b ff ff       	call   c00004c4 <strlen>
c000e9a3:	83 c4 10             	add    esp,0x10
c000e9a6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e9a9:	81 c2 32 01 00 00    	add    edx,0x132
c000e9af:	83 ec 04             	sub    esp,0x4
c000e9b2:	50                   	push   eax
c000e9b3:	6a 00                	push   0x0
c000e9b5:	52                   	push   edx
c000e9b6:	e8 ed 1a ff ff       	call   c00004a8 <memset>
c000e9bb:	83 c4 10             	add    esp,0x10
c000e9be:	90                   	nop
c000e9bf:	c9                   	leave  
c000e9c0:	c3                   	ret    

c000e9c1 <readKeyboard(VgaText*, char*, unsigned long)>:
c000e9c1:	55                   	push   ebp
c000e9c2:	89 e5                	mov    ebp,esp
c000e9c4:	83 ec 18             	sub    esp,0x18
c000e9c7:	a1 e8 83 02 c0       	mov    eax,ds:0xc00283e8
c000e9cc:	85 c0                	test   eax,eax
c000e9ce:	74 2a                	je     c000e9fa <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000e9d0:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000e9d6:	8b 0d e8 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283e8
c000e9dc:	83 ec 04             	sub    esp,0x4
c000e9df:	68 00 84 02 c0       	push   0xc0028400
c000e9e4:	83 ec 08             	sub    esp,0x8
c000e9e7:	89 e2                	mov    edx,esp
c000e9e9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000e9ec:	89 02                	mov    DWORD PTR [edx],eax
c000e9ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e9f1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e9f5:	ff d1                	call   ecx
c000e9f7:	83 c4 10             	add    esp,0x10
c000e9fa:	fb                   	sti    
c000e9fb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ea02:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ea06:	0f 84 a1 00 00 00    	je     c000eaad <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ea0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea0f:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000ea15:	84 c0                	test   al,al
c000ea17:	75 28                	jne    c000ea41 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ea19:	fa                   	cli    
c000ea1a:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000ea1f:	40                   	inc    eax
c000ea20:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000ea25:	e8 5a 75 00 00       	call   c0015f84 <schedule()>
c000ea2a:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000ea2f:	48                   	dec    eax
c000ea30:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000ea35:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000ea3a:	85 c0                	test   eax,eax
c000ea3c:	75 ce                	jne    c000ea0c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea3e:	fb                   	sti    
c000ea3f:	eb cb                	jmp    c000ea0c <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ea44:	8d 50 01             	lea    edx,[eax+0x1]
c000ea47:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ea4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea4d:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000ea53:	88 10                	mov    BYTE PTR [eax],dl
c000ea55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea58:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000ea5e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ea61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea64:	05 32 01 00 00       	add    eax,0x132
c000ea69:	83 ec 0c             	sub    esp,0xc
c000ea6c:	50                   	push   eax
c000ea6d:	e8 52 1a ff ff       	call   c00004c4 <strlen>
c000ea72:	83 c4 10             	add    esp,0x10
c000ea75:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea78:	81 c2 32 01 00 00    	add    edx,0x132
c000ea7e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea81:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea84:	81 c2 32 01 00 00    	add    edx,0x132
c000ea8a:	83 ec 04             	sub    esp,0x4
c000ea8d:	50                   	push   eax
c000ea8e:	51                   	push   ecx
c000ea8f:	52                   	push   edx
c000ea90:	e8 4b 19 ff ff       	call   c00003e0 <memmove>
c000ea95:	83 c4 10             	add    esp,0x10
c000ea98:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ea9b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ea9e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000eaa2:	0f 85 5a ff ff ff    	jne    c000ea02 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000eaa8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eaab:	eb 03                	jmp    c000eab0 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000eaad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eab0:	c9                   	leave  
c000eab1:	c3                   	ret    

c000eab2 <Keyboard::Keyboard(char const*)>:
c000eab2:	83 ec 0c             	sub    esp,0xc
c000eab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab9:	83 ec 08             	sub    esp,0x8
c000eabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac0:	50                   	push   eax
c000eac1:	e8 a0 f2 ff ff       	call   c000dd66 <Device::Device(char const*)>
c000eac6:	83 c4 10             	add    esp,0x10
c000eac9:	ba fc 36 02 c0       	mov    edx,0xc00236fc
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	89 10                	mov    DWORD PTR [eax],edx
c000ead4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000eae2:	c6 05 e4 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e4,0x1
c000eae9:	90                   	nop
c000eaea:	83 c4 0c             	add    esp,0xc
c000eaed:	c3                   	ret    

c000eaee <Keyboard::~Keyboard()>:
c000eaee:	83 ec 0c             	sub    esp,0xc
c000eaf1:	ba fc 36 02 c0       	mov    edx,0xc00236fc
c000eaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eafa:	89 10                	mov    DWORD PTR [eax],edx
c000eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	50                   	push   eax
c000eb04:	e8 5b ef ff ff       	call   c000da64 <Device::~Device()>
c000eb09:	83 c4 10             	add    esp,0x10
c000eb0c:	90                   	nop
c000eb0d:	83 c4 0c             	add    esp,0xc
c000eb10:	c3                   	ret    
c000eb11:	90                   	nop

c000eb12 <Keyboard::~Keyboard()>:
c000eb12:	83 ec 0c             	sub    esp,0xc
c000eb15:	83 ec 0c             	sub    esp,0xc
c000eb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb1c:	e8 cd ff ff ff       	call   c000eaee <Keyboard::~Keyboard()>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	83 ec 08             	sub    esp,0x8
c000eb27:	68 5c 01 00 00       	push   0x15c
c000eb2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb30:	e8 cf da ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	83 c4 0c             	add    esp,0xc
c000eb3b:	c3                   	ret    

c000eb3c <LogicalDisk::close(int, int, void*)>:
c000eb3c:	83 c8 ff             	or     eax,0xffffffff
c000eb3f:	c3                   	ret    

c000eb40 <LogicalDisk::~LogicalDisk()>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	ba cc 37 02 c0       	mov    edx,0xc00237cc
c000eb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4c:	89 10                	mov    DWORD PTR [eax],edx
c000eb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb52:	83 ec 0c             	sub    esp,0xc
c000eb55:	50                   	push   eax
c000eb56:	e8 09 ef ff ff       	call   c000da64 <Device::~Device()>
c000eb5b:	83 c4 10             	add    esp,0x10
c000eb5e:	90                   	nop
c000eb5f:	83 c4 0c             	add    esp,0xc
c000eb62:	c3                   	ret    
c000eb63:	90                   	nop

c000eb64 <LogicalDisk::~LogicalDisk()>:
c000eb64:	83 ec 0c             	sub    esp,0xc
c000eb67:	83 ec 0c             	sub    esp,0xc
c000eb6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6e:	e8 cd ff ff ff       	call   c000eb40 <LogicalDisk::~LogicalDisk()>
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	83 ec 08             	sub    esp,0x8
c000eb79:	68 74 01 00 00       	push   0x174
c000eb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb82:	e8 7d da ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000eb87:	83 c4 10             	add    esp,0x10
c000eb8a:	83 c4 0c             	add    esp,0xc
c000eb8d:	c3                   	ret    

c000eb8e <LogicalDisk::open(int, int, void*)>:
c000eb8e:	83 ec 18             	sub    esp,0x18
c000eb91:	68 28 37 02 c0       	push   0xc0023728
c000eb96:	e8 b4 3e 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000eb9b:	83 c8 ff             	or     eax,0xffffffff
c000eb9e:	83 c4 1c             	add    esp,0x1c
c000eba1:	c3                   	ret    

c000eba2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000eba2:	53                   	push   ebx
c000eba3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000eba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ebaf:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ebb5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ebbb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ebc1:	77 10                	ja     c000ebd3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ebc3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ebc9:	89 d3                	mov    ebx,edx
c000ebcb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ebd1:	72 05                	jb     c000ebd8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ebd3:	83 c8 ff             	or     eax,0xffffffff
c000ebd6:	89 c2                	mov    edx,eax
c000ebd8:	5b                   	pop    ebx
c000ebd9:	c3                   	ret    

c000ebda <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ebda:	56                   	push   esi
c000ebdb:	83 c8 ff             	or     eax,0xffffffff
c000ebde:	53                   	push   ebx
c000ebdf:	89 c2                	mov    edx,eax
c000ebe1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ebe5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ebe9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ebed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ebf3:	77 27                	ja     c000ec1c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ebf5:	89 d8                	mov    eax,ebx
c000ebf7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ebfd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ec03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec08:	89 c2                	mov    edx,eax
c000ec0a:	73 10                	jae    c000ec1c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ec0c:	89 c8                	mov    eax,ecx
c000ec0e:	89 da                	mov    edx,ebx
c000ec10:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ec16:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ec1c:	5b                   	pop    ebx
c000ec1d:	5e                   	pop    esi
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ec20:	83 ec 1c             	sub    esp,0x1c
c000ec23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec37:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ec42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec46:	83 ec 08             	sub    esp,0x8
c000ec49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec4d:	50                   	push   eax
c000ec4e:	e8 13 f1 ff ff       	call   c000dd66 <Device::Device(char const*)>
c000ec53:	83 c4 10             	add    esp,0x10
c000ec56:	ba cc 37 02 c0       	mov    edx,0xc00237cc
c000ec5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec5f:	89 10                	mov    DWORD PTR [eax],edx
c000ec61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec65:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ec6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec70:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ec77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec7b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ec85:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ec89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec91:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ec97:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ec9d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000eca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000eca4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eca8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ecae:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ecb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecbc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ecc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecc6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ecd0:	90                   	nop
c000ecd1:	83 c4 1c             	add    esp,0x1c
c000ecd4:	c3                   	ret    
c000ecd5:	90                   	nop

c000ecd6 <LogicalDisk::assignDriveLetter()>:
c000ecd6:	55                   	push   ebp
c000ecd7:	57                   	push   edi
c000ecd8:	56                   	push   esi
c000ecd9:	53                   	push   ebx
c000ecda:	83 ec 14             	sub    esp,0x14
c000ecdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ece1:	8b 3d 20 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028820
c000ece7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000eced:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ecf1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ecf7:	8b 3d 24 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028824
c000ecfd:	3c 01                	cmp    al,0x1
c000ecff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ed03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ed07:	19 c0                	sbb    eax,eax
c000ed09:	83 e0 02             	and    eax,0x2
c000ed0c:	83 c0 41             	add    eax,0x41
c000ed0f:	0f be e8             	movsx  ebp,al
c000ed12:	3c 43                	cmp    al,0x43
c000ed14:	75 10                	jne    c000ed26 <LogicalDisk::assignDriveLetter()+0x50>
c000ed16:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ed1d:	75 5d                	jne    c000ed7c <LogicalDisk::assignDriveLetter()+0xa6>
c000ed1f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ed24:	75 56                	jne    c000ed7c <LogicalDisk::assignDriveLetter()+0xa6>
c000ed26:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ed29:	ba 01 00 00 00       	mov    edx,0x1
c000ed2e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ed32:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ed36:	d3 e2                	shl    edx,cl
c000ed38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed3c:	89 d7                	mov    edi,edx
c000ed3e:	89 d6                	mov    esi,edx
c000ed40:	c1 ff 1f             	sar    edi,0x1f
c000ed43:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ed47:	21 f9                	and    ecx,edi
c000ed49:	09 d1                	or     ecx,edx
c000ed4b:	75 2f                	jne    c000ed7c <LogicalDisk::assignDriveLetter()+0xa6>
c000ed4d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ed51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed55:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ed5b:	09 f2                	or     edx,esi
c000ed5d:	89 15 20 88 02 c0    	mov    DWORD PTR ds:0xc0028820,edx
c000ed63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed67:	09 fa                	or     edx,edi
c000ed69:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ed6d:	89 15 24 88 02 c0    	mov    DWORD PTR ds:0xc0028824,edx
c000ed73:	89 1c bd 40 88 02 c0 	mov    DWORD PTR [edi*4-0x3ffd77c0],ebx
c000ed7a:	eb 08                	jmp    c000ed84 <LogicalDisk::assignDriveLetter()+0xae>
c000ed7c:	45                   	inc    ebp
c000ed7d:	40                   	inc    eax
c000ed7e:	3c 5b                	cmp    al,0x5b
c000ed80:	75 90                	jne    c000ed12 <LogicalDisk::assignDriveLetter()+0x3c>
c000ed82:	31 c0                	xor    eax,eax
c000ed84:	83 c4 14             	add    esp,0x14
c000ed87:	5b                   	pop    ebx
c000ed88:	5e                   	pop    esi
c000ed89:	5f                   	pop    edi
c000ed8a:	5d                   	pop    ebp
c000ed8b:	c3                   	ret    

c000ed8c <LogicalDisk::mount()>:
c000ed8c:	56                   	push   esi
c000ed8d:	53                   	push   ebx
c000ed8e:	83 ec 1c             	sub    esp,0x1c
c000ed91:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000ed95:	8b 1d b8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b8
c000ed9b:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000eda2:	50                   	push   eax
c000eda3:	68 4c 37 02 c0       	push   0xc002374c
c000eda8:	e8 38 d9 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000edad:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000edb7:	83 c4 10             	add    esp,0x10
c000edba:	85 db                	test   ebx,ebx
c000edbc:	74 4e                	je     c000ee0c <LogicalDisk::mount()+0x80>
c000edbe:	83 ec 0c             	sub    esp,0xc
c000edc1:	68 6d 37 02 c0       	push   0xc002376d
c000edc6:	e8 1a d9 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000edcb:	83 c4 0c             	add    esp,0xc
c000edce:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000edd5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000edd7:	83 e8 41             	sub    eax,0x41
c000edda:	50                   	push   eax
c000eddb:	56                   	push   esi
c000eddc:	53                   	push   ebx
c000eddd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ede0:	83 c4 10             	add    esp,0x10
c000ede3:	84 c0                	test   al,al
c000ede5:	74 20                	je     c000ee07 <LogicalDisk::mount()+0x7b>
c000ede7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000edeb:	83 ec 0c             	sub    esp,0xc
c000edee:	68 89 37 02 c0       	push   0xc0023789
c000edf3:	e8 ed d8 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000edf8:	83 c4 10             	add    esp,0x10
c000edfb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000ee01:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ee05:	eb 07                	jmp    c000ee0e <LogicalDisk::mount()+0x82>
c000ee07:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ee0a:	eb ae                	jmp    c000edba <LogicalDisk::mount()+0x2e>
c000ee0c:	31 c0                	xor    eax,eax
c000ee0e:	83 c4 14             	add    esp,0x14
c000ee11:	5b                   	pop    ebx
c000ee12:	5e                   	pop    esi
c000ee13:	c3                   	ret    

c000ee14 <LogicalDisk::unmount()>:
c000ee14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee18:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ee22:	c3                   	ret    
c000ee23:	90                   	nop

c000ee24 <LogicalDisk::eject()>:
c000ee24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee28:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee2e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee34:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ee37:	90                   	nop

c000ee38 <LogicalDisk::unassignDriveLetter()>:
c000ee38:	57                   	push   edi
c000ee39:	56                   	push   esi
c000ee3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee3e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ee45:	84 c9                	test   cl,cl
c000ee47:	75 0f                	jne    c000ee58 <LogicalDisk::unassignDriveLetter()+0x20>
c000ee49:	c7 44 24 0c a2 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc00237a2
c000ee51:	5e                   	pop    esi
c000ee52:	5f                   	pop    edi
c000ee53:	e9 f7 3b 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>
c000ee58:	83 e9 41             	sub    ecx,0x41
c000ee5b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ee62:	b8 01 00 00 00       	mov    eax,0x1
c000ee67:	c7 04 8d 40 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd77c0],0x0
c000ee72:	d3 e0                	shl    eax,cl
c000ee74:	89 c7                	mov    edi,eax
c000ee76:	f7 d0                	not    eax
c000ee78:	c1 ff 1f             	sar    edi,0x1f
c000ee7b:	21 05 20 88 02 c0    	and    DWORD PTR ds:0xc0028820,eax
c000ee81:	89 fe                	mov    esi,edi
c000ee83:	f7 d6                	not    esi
c000ee85:	21 35 24 88 02 c0    	and    DWORD PTR ds:0xc0028824,esi
c000ee8b:	5e                   	pop    esi
c000ee8c:	5f                   	pop    edi
c000ee8d:	c3                   	ret    

c000ee8e <LogicalDisk::read(unsigned long long, int, void*)>:
c000ee8e:	57                   	push   edi
c000ee8f:	56                   	push   esi
c000ee90:	53                   	push   ebx
c000ee91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee99:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eea1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000eea7:	77 41                	ja     c000eeea <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000eea9:	99                   	cdq    
c000eeaa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000eeb0:	01 c8                	add    eax,ecx
c000eeb2:	11 da                	adc    edx,ebx
c000eeb4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000eeba:	19 d7                	sbb    edi,edx
c000eebc:	72 33                	jb     c000eef1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000eebe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000eec4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000eeca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eece:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000eed2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000eed8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000eede:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eee2:	5b                   	pop    ebx
c000eee3:	5e                   	pop    esi
c000eee4:	5f                   	pop    edi
c000eee5:	e9 34 0a 00 00       	jmp    c000f91e <VCache::read(unsigned long long, int, void*)>
c000eeea:	b8 05 00 00 00       	mov    eax,0x5
c000eeef:	eb 05                	jmp    c000eef6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000eef1:	b8 07 00 00 00       	mov    eax,0x7
c000eef6:	5b                   	pop    ebx
c000eef7:	5e                   	pop    esi
c000eef8:	5f                   	pop    edi
c000eef9:	c3                   	ret    

c000eefa <LogicalDisk::write(unsigned long long, int, void*)>:
c000eefa:	57                   	push   edi
c000eefb:	56                   	push   esi
c000eefc:	53                   	push   ebx
c000eefd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ef01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef0d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ef13:	77 41                	ja     c000ef56 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ef15:	99                   	cdq    
c000ef16:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ef1c:	01 c8                	add    eax,ecx
c000ef1e:	11 da                	adc    edx,ebx
c000ef20:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ef26:	19 d7                	sbb    edi,edx
c000ef28:	72 33                	jb     c000ef5d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ef2a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ef30:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ef36:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ef3a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ef3e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ef44:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ef4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef4e:	5b                   	pop    ebx
c000ef4f:	5e                   	pop    esi
c000ef50:	5f                   	pop    edi
c000ef51:	e9 ce 08 00 00       	jmp    c000f824 <VCache::write(unsigned long long, int, void*)>
c000ef56:	b8 05 00 00 00       	mov    eax,0x5
c000ef5b:	eb 05                	jmp    c000ef62 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ef5d:	b8 07 00 00 00       	mov    eax,0x7
c000ef62:	5b                   	pop    ebx
c000ef63:	5e                   	pop    esi
c000ef64:	5f                   	pop    edi
c000ef65:	c3                   	ret    
c000ef66:	66 90                	xchg   ax,ax

c000ef68 <Mouse::Mouse(char const*)>:
c000ef68:	83 ec 0c             	sub    esp,0xc
c000ef6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef6f:	83 ec 08             	sub    esp,0x8
c000ef72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef76:	50                   	push   eax
c000ef77:	e8 ea ed ff ff       	call   c000dd66 <Device::Device(char const*)>
c000ef7c:	83 c4 10             	add    esp,0x10
c000ef7f:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c000ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef88:	89 10                	mov    DWORD PTR [eax],edx
c000ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef8e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ef98:	90                   	nop
c000ef99:	83 c4 0c             	add    esp,0xc
c000ef9c:	c3                   	ret    
c000ef9d:	90                   	nop
c000ef9e:	66 90                	xchg   ax,ax

c000efa0 <Mouse::~Mouse()>:
c000efa0:	83 ec 0c             	sub    esp,0xc
c000efa3:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c000efa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efac:	89 10                	mov    DWORD PTR [eax],edx
c000efae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efb2:	83 ec 0c             	sub    esp,0xc
c000efb5:	50                   	push   eax
c000efb6:	e8 a9 ea ff ff       	call   c000da64 <Device::~Device()>
c000efbb:	83 c4 10             	add    esp,0x10
c000efbe:	90                   	nop
c000efbf:	83 c4 0c             	add    esp,0xc
c000efc2:	c3                   	ret    
c000efc3:	90                   	nop

c000efc4 <Mouse::~Mouse()>:
c000efc4:	83 ec 0c             	sub    esp,0xc
c000efc7:	83 ec 0c             	sub    esp,0xc
c000efca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efce:	e8 cd ff ff ff       	call   c000efa0 <Mouse::~Mouse()>
c000efd3:	83 c4 10             	add    esp,0x10
c000efd6:	83 ec 08             	sub    esp,0x8
c000efd9:	68 58 01 00 00       	push   0x158
c000efde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efe2:	e8 1d d6 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000efe7:	83 c4 10             	add    esp,0x10
c000efea:	83 c4 0c             	add    esp,0xc
c000efed:	c3                   	ret    

c000efee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000efee:	55                   	push   ebp
c000efef:	57                   	push   edi
c000eff0:	56                   	push   esi
c000eff1:	53                   	push   ebx
c000eff2:	81 ec 28 01 00 00    	sub    esp,0x128
c000eff8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000efff:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000f006:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000f00d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000f014:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f018:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f01c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f023:	e8 3a ee ff ff       	call   c000de62 <Device::getName()>
c000f028:	5a                   	pop    edx
c000f029:	59                   	pop    ecx
c000f02a:	50                   	push   eax
c000f02b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000f02f:	55                   	push   ebp
c000f030:	e8 2f 15 ff ff       	call   c0000564 <strcpy>
c000f035:	5b                   	pop    ebx
c000f036:	58                   	pop    eax
c000f037:	68 1c 38 02 c0       	push   0xc002381c
c000f03c:	55                   	push   ebp
c000f03d:	e8 62 16 ff ff       	call   c00006a4 <strcat>
c000f042:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000f049:	e8 49 a7 ff ff       	call   c0009797 <malloc>
c000f04e:	83 c4 0c             	add    esp,0xc
c000f051:	89 c3                	mov    ebx,eax
c000f053:	57                   	push   edi
c000f054:	56                   	push   esi
c000f055:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f05d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000f064:	55                   	push   ebp
c000f065:	50                   	push   eax
c000f066:	e8 b5 fb ff ff       	call   c000ec20 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000f06b:	83 c4 14             	add    esp,0x14
c000f06e:	53                   	push   ebx
c000f06f:	e8 62 fc ff ff       	call   c000ecd6 <LogicalDisk::assignDriveLetter()>
c000f074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f077:	e8 10 fd ff ff       	call   c000ed8c <LogicalDisk::mount()>
c000f07c:	58                   	pop    eax
c000f07d:	5a                   	pop    edx
c000f07e:	53                   	push   ebx
c000f07f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f086:	e8 d7 ea ff ff       	call   c000db62 <Device::addChild(Device*)>
c000f08b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f091:	5b                   	pop    ebx
c000f092:	5e                   	pop    esi
c000f093:	5f                   	pop    edi
c000f094:	5d                   	pop    ebp
c000f095:	c3                   	ret    

c000f096 <createPartitionsForDisk(PhysicalDisk*)>:
c000f096:	55                   	push   ebp
c000f097:	57                   	push   edi
c000f098:	56                   	push   esi
c000f099:	53                   	push   ebx
c000f09a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000f0a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000f0a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f0ad:	3d 00 02 00 00       	cmp    eax,0x200
c000f0b2:	74 27                	je     c000f0db <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000f0b4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000f0ba:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000f0c0:	83 ec 10             	sub    esp,0x10
c000f0c3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000f0c7:	99                   	cdq    
c000f0c8:	c1 e6 0a             	shl    esi,0xa
c000f0cb:	52                   	push   edx
c000f0cc:	89 fd                	mov    ebp,edi
c000f0ce:	50                   	push   eax
c000f0cf:	55                   	push   ebp
c000f0d0:	56                   	push   esi
c000f0d1:	e8 6a 23 01 00       	call   c0021440 <__udivdi3>
c000f0d6:	e9 b1 00 00 00       	jmp    c000f18c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f0db:	83 ec 0c             	sub    esp,0xc
c000f0de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0e0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000f0e4:	56                   	push   esi
c000f0e5:	6a 01                	push   0x1
c000f0e7:	6a 00                	push   0x0
c000f0e9:	6a 00                	push   0x0
c000f0eb:	53                   	push   ebx
c000f0ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f0ef:	83 c4 20             	add    esp,0x20
c000f0f2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000f0fa:	75 0a                	jne    c000f106 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000f0fc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000f104:	74 2c                	je     c000f132 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000f106:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f10c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f112:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f118:	83 ec 10             	sub    esp,0x10
c000f11b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f11f:	89 f7                	mov    edi,esi
c000f121:	c1 e0 0a             	shl    eax,0xa
c000f124:	c1 ff 1f             	sar    edi,0x1f
c000f127:	57                   	push   edi
c000f128:	56                   	push   esi
c000f129:	52                   	push   edx
c000f12a:	50                   	push   eax
c000f12b:	e8 10 23 01 00       	call   c0021440 <__udivdi3>
c000f130:	eb 5a                	jmp    c000f18c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f132:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000f139:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000f140:	83 e1 7f             	and    ecx,0x7f
c000f143:	83 e0 7f             	and    eax,0x7f
c000f146:	01 c1                	add    ecx,eax
c000f148:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000f14f:	83 e0 7f             	and    eax,0x7f
c000f152:	01 c1                	add    ecx,eax
c000f154:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000f15b:	83 e0 7f             	and    eax,0x7f
c000f15e:	00 c1                	add    cl,al
c000f160:	74 41                	je     c000f1a3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000f162:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f168:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f16e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f174:	83 ec 10             	sub    esp,0x10
c000f177:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f17b:	89 f7                	mov    edi,esi
c000f17d:	c1 e0 0a             	shl    eax,0xa
c000f180:	c1 ff 1f             	sar    edi,0x1f
c000f183:	57                   	push   edi
c000f184:	56                   	push   esi
c000f185:	52                   	push   edx
c000f186:	50                   	push   eax
c000f187:	e8 b4 22 01 00       	call   c0021440 <__udivdi3>
c000f18c:	83 c4 14             	add    esp,0x14
c000f18f:	52                   	push   edx
c000f190:	50                   	push   eax
c000f191:	6a 00                	push   0x0
c000f193:	6a 00                	push   0x0
c000f195:	53                   	push   ebx
c000f196:	e8 53 fe ff ff       	call   c000efee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f19b:	83 c4 20             	add    esp,0x20
c000f19e:	e9 79 01 00 00       	jmp    c000f31c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000f1a3:	89 f0                	mov    eax,esi
c000f1a5:	31 f6                	xor    esi,esi
c000f1a7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000f1ae:	75 02                	jne    c000f1b2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000f1b0:	89 f1                	mov    ecx,esi
c000f1b2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000f1b9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000f1c0:	c1 e2 08             	shl    edx,0x8
c000f1c3:	c1 e7 10             	shl    edi,0x10
c000f1c6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000f1ce:	09 fa                	or     edx,edi
c000f1d0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000f1d8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000f1df:	83 c0 10             	add    eax,0x10
c000f1e2:	09 fa                	or     edx,edi
c000f1e4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000f1eb:	c1 e7 18             	shl    edi,0x18
c000f1ee:	09 fa                	or     edx,edi
c000f1f0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000f1f7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000f1fb:	c1 e7 10             	shl    edi,0x10
c000f1fe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000f205:	c1 e2 08             	shl    edx,0x8
c000f208:	09 fa                	or     edx,edi
c000f20a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000f211:	09 fa                	or     edx,edi
c000f213:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000f21a:	c1 e7 18             	shl    edi,0x18
c000f21d:	09 fa                	or     edx,edi
c000f21f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000f223:	46                   	inc    esi
c000f224:	83 fe 04             	cmp    esi,0x4
c000f227:	0f 85 7a ff ff ff    	jne    c000f1a7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000f22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f231:	83 f0 01             	xor    eax,0x1
c000f234:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f238:	75 57                	jne    c000f291 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f23e:	83 f0 01             	xor    eax,0x1
c000f241:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000f245:	75 4a                	jne    c000f291 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f247:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000f24b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000f253:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f25b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f261:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f267:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f26d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f271:	89 f7                	mov    edi,esi
c000f273:	c1 e0 0a             	shl    eax,0xa
c000f276:	c1 ff 1f             	sar    edi,0x1f
c000f279:	57                   	push   edi
c000f27a:	56                   	push   esi
c000f27b:	52                   	push   edx
c000f27c:	50                   	push   eax
c000f27d:	e8 be 21 01 00       	call   c0021440 <__udivdi3>
c000f282:	83 c4 10             	add    esp,0x10
c000f285:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f289:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f28d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000f291:	84 c9                	test   cl,cl
c000f293:	74 53                	je     c000f2e8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000f295:	0f b6 c9             	movzx  ecx,cl
c000f298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f29c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f2a4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f2a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2b0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000f2b4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000f2b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f2bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2c8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000f2cc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000f2d0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000f2d4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000f2d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f2e0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000f2e4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000f2e8:	31 ed                	xor    ebp,ebp
c000f2ea:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000f2ee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000f2f2:	89 f8                	mov    eax,edi
c000f2f4:	09 f0                	or     eax,esi
c000f2f6:	74 1e                	je     c000f316 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f2f8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000f2fc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000f300:	89 d1                	mov    ecx,edx
c000f302:	09 c1                	or     ecx,eax
c000f304:	74 10                	je     c000f316 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f306:	83 ec 0c             	sub    esp,0xc
c000f309:	57                   	push   edi
c000f30a:	56                   	push   esi
c000f30b:	52                   	push   edx
c000f30c:	50                   	push   eax
c000f30d:	53                   	push   ebx
c000f30e:	e8 db fc ff ff       	call   c000efee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f313:	83 c4 20             	add    esp,0x20
c000f316:	45                   	inc    ebp
c000f317:	83 fd 04             	cmp    ebp,0x4
c000f31a:	75 ce                	jne    c000f2ea <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000f31c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000f322:	5b                   	pop    ebx
c000f323:	5e                   	pop    esi
c000f324:	5f                   	pop    edi
c000f325:	5d                   	pop    ebp
c000f326:	c3                   	ret    
c000f327:	90                   	nop

c000f328 <Serial::Serial(char const*)>:
c000f328:	83 ec 0c             	sub    esp,0xc
c000f32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f32f:	83 ec 08             	sub    esp,0x8
c000f332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f336:	50                   	push   eax
c000f337:	e8 2a ea ff ff       	call   c000dd66 <Device::Device(char const*)>
c000f33c:	83 c4 10             	add    esp,0x10
c000f33f:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000f344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f348:	89 10                	mov    DWORD PTR [eax],edx
c000f34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f34e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000f358:	90                   	nop
c000f359:	83 c4 0c             	add    esp,0xc
c000f35c:	c3                   	ret    
c000f35d:	90                   	nop
c000f35e:	66 90                	xchg   ax,ax

c000f360 <Serial::~Serial()>:
c000f360:	83 ec 0c             	sub    esp,0xc
c000f363:	ba 30 38 02 c0       	mov    edx,0xc0023830
c000f368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f36c:	89 10                	mov    DWORD PTR [eax],edx
c000f36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f372:	83 ec 0c             	sub    esp,0xc
c000f375:	50                   	push   eax
c000f376:	e8 e9 e6 ff ff       	call   c000da64 <Device::~Device()>
c000f37b:	83 c4 10             	add    esp,0x10
c000f37e:	90                   	nop
c000f37f:	83 c4 0c             	add    esp,0xc
c000f382:	c3                   	ret    
c000f383:	90                   	nop

c000f384 <Serial::~Serial()>:
c000f384:	83 ec 0c             	sub    esp,0xc
c000f387:	83 ec 0c             	sub    esp,0xc
c000f38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f38e:	e8 cd ff ff ff       	call   c000f360 <Serial::~Serial()>
c000f393:	83 c4 10             	add    esp,0x10
c000f396:	83 ec 08             	sub    esp,0x8
c000f399:	68 58 01 00 00       	push   0x158
c000f39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3a2:	e8 5d d2 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000f3a7:	83 c4 10             	add    esp,0x10
c000f3aa:	83 c4 0c             	add    esp,0xc
c000f3ad:	c3                   	ret    
c000f3ae:	66 90                	xchg   ax,ax

c000f3b0 <Timer::Timer(char const*)>:
c000f3b0:	83 ec 0c             	sub    esp,0xc
c000f3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b7:	83 ec 08             	sub    esp,0x8
c000f3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3be:	50                   	push   eax
c000f3bf:	e8 a2 e9 ff ff       	call   c000dd66 <Device::Device(char const*)>
c000f3c4:	83 c4 10             	add    esp,0x10
c000f3c7:	ba 74 38 02 c0       	mov    edx,0xc0023874
c000f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d0:	89 10                	mov    DWORD PTR [eax],edx
c000f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000f3e0:	90                   	nop
c000f3e1:	83 c4 0c             	add    esp,0xc
c000f3e4:	c3                   	ret    
c000f3e5:	90                   	nop
c000f3e6:	66 90                	xchg   ax,ax

c000f3e8 <Timer::~Timer()>:
c000f3e8:	83 ec 0c             	sub    esp,0xc
c000f3eb:	ba 74 38 02 c0       	mov    edx,0xc0023874
c000f3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3f4:	89 10                	mov    DWORD PTR [eax],edx
c000f3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3fa:	83 ec 0c             	sub    esp,0xc
c000f3fd:	50                   	push   eax
c000f3fe:	e8 61 e6 ff ff       	call   c000da64 <Device::~Device()>
c000f403:	83 c4 10             	add    esp,0x10
c000f406:	90                   	nop
c000f407:	83 c4 0c             	add    esp,0xc
c000f40a:	c3                   	ret    
c000f40b:	90                   	nop

c000f40c <Timer::~Timer()>:
c000f40c:	83 ec 0c             	sub    esp,0xc
c000f40f:	83 ec 0c             	sub    esp,0xc
c000f412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f416:	e8 cd ff ff ff       	call   c000f3e8 <Timer::~Timer()>
c000f41b:	83 c4 10             	add    esp,0x10
c000f41e:	83 ec 08             	sub    esp,0x8
c000f421:	68 5c 01 00 00       	push   0x15c
c000f426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f42a:	e8 d5 d1 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000f42f:	83 c4 10             	add    esp,0x10
c000f432:	83 c4 0c             	add    esp,0xc
c000f435:	c3                   	ret    

c000f436 <Timer::read()>:
c000f436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f43a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f440:	c3                   	ret    

c000f441 <setupTimer(int)>:
c000f441:	53                   	push   ebx
c000f442:	83 ec 14             	sub    esp,0x14
c000f445:	68 5c 01 00 00       	push   0x15c
c000f44a:	e8 48 a3 ff ff       	call   c0009797 <malloc>
c000f44f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f452:	89 c3                	mov    ebx,eax
c000f454:	e8 5f 19 01 00       	call   c0020db8 <PIT::PIT()>
c000f459:	58                   	pop    eax
c000f45a:	5a                   	pop    edx
c000f45b:	53                   	push   ebx
c000f45c:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c000f462:	e8 fb e6 ff ff       	call   c000db62 <Device::addChild(Device*)>
c000f467:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f469:	6a 00                	push   0x0
c000f46b:	6a 00                	push   0x0
c000f46d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f471:	53                   	push   ebx
c000f472:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f475:	89 d8                	mov    eax,ebx
c000f477:	83 c4 28             	add    esp,0x28
c000f47a:	5b                   	pop    ebx
c000f47b:	c3                   	ret    

c000f47c <timerHandler(unsigned int)>:
c000f47c:	56                   	push   esi
c000f47d:	53                   	push   ebx
c000f47e:	51                   	push   ecx
c000f47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f483:	01 05 ac 88 02 c0    	add    DWORD PTR ds:0xc00288ac,eax
c000f489:	80 3d cd 62 02 c0 00 	cmp    BYTE PTR ds:0xc00262cd,0x0
c000f490:	0f 84 4a 01 00 00    	je     c000f5e0 <timerHandler(unsigned int)+0x164>
c000f496:	fa                   	cli    
c000f497:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c000f49d:	83 ec 0c             	sub    esp,0xc
c000f4a0:	ff 05 a4 97 02 c0    	inc    DWORD PTR ds:0xc00297a4
c000f4a6:	68 b8 97 02 c0       	push   0xc00297b8
c000f4ab:	e8 60 25 01 00       	call   c0021a10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f4b0:	83 c4 10             	add    esp,0x10
c000f4b3:	84 c0                	test   al,al
c000f4b5:	0f 85 a1 00 00 00    	jne    c000f55c <timerHandler(unsigned int)+0xe0>
c000f4bb:	83 ec 0c             	sub    esp,0xc
c000f4be:	68 b8 97 02 c0       	push   0xc00297b8
c000f4c3:	e8 64 25 01 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f4c8:	83 c4 10             	add    esp,0x10
c000f4cb:	89 c6                	mov    esi,eax
c000f4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d0:	83 ec 0c             	sub    esp,0xc
c000f4d3:	68 b8 97 02 c0       	push   0xc00297b8
c000f4d8:	e8 4f 25 01 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f4dd:	c7 04 24 b8 97 02 c0 	mov    DWORD PTR [esp],0xc00297b8
c000f4e4:	89 c3                	mov    ebx,eax
c000f4e6:	e8 49 25 01 00       	call   c0021a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000f4eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	3b 05 ac 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ac
c000f4f7:	77 23                	ja     c000f51c <timerHandler(unsigned int)+0xa0>
c000f4f9:	83 ec 0c             	sub    esp,0xc
c000f4fc:	53                   	push   ebx
c000f4fd:	e8 3e 6f 00 00       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c000f502:	83 c4 10             	add    esp,0x10
c000f505:	39 de                	cmp    esi,ebx
c000f507:	75 27                	jne    c000f530 <timerHandler(unsigned int)+0xb4>
c000f509:	83 ec 0c             	sub    esp,0xc
c000f50c:	68 b8 97 02 c0       	push   0xc00297b8
c000f511:	e8 16 25 01 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f516:	89 c6                	mov    esi,eax
c000f518:	eb 12                	jmp    c000f52c <timerHandler(unsigned int)+0xb0>
c000f51a:	66 90                	xchg   ax,ax
c000f51c:	52                   	push   edx
c000f51d:	52                   	push   edx
c000f51e:	53                   	push   ebx
c000f51f:	68 b8 97 02 c0       	push   0xc00297b8
c000f524:	e8 c3 25 01 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000f529:	8d 76 00             	lea    esi,[esi+0x0]
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	90                   	nop
c000f530:	83 ec 0c             	sub    esp,0xc
c000f533:	68 b8 97 02 c0       	push   0xc00297b8
c000f538:	e8 d3 24 01 00       	call   c0021a10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f53d:	83 c4 10             	add    esp,0x10
c000f540:	84 c0                	test   al,al
c000f542:	75 18                	jne    c000f55c <timerHandler(unsigned int)+0xe0>
c000f544:	83 ec 0c             	sub    esp,0xc
c000f547:	68 b8 97 02 c0       	push   0xc00297b8
c000f54c:	e8 db 24 01 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	39 f0                	cmp    eax,esi
c000f556:	0f 85 74 ff ff ff    	jne    c000f4d0 <timerHandler(unsigned int)+0x54>
c000f55c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f561:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000f565:	74 41                	je     c000f5a8 <timerHandler(unsigned int)+0x12c>
c000f567:	80 3d cc 62 02 c0 00 	cmp    BYTE PTR ds:0xc00262cc,0x0
c000f56e:	74 38                	je     c000f5a8 <timerHandler(unsigned int)+0x12c>
c000f570:	fa                   	cli    
c000f571:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c000f577:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c000f57c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f582:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000f585:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f58b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000f58e:	72 08                	jb     c000f598 <timerHandler(unsigned int)+0x11c>
c000f590:	e8 ef 69 00 00       	call   c0015f84 <schedule()>
c000f595:	8d 76 00             	lea    esi,[esi+0x0]
c000f598:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000f59d:	48                   	dec    eax
c000f59e:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000f5a3:	75 03                	jne    c000f5a8 <timerHandler(unsigned int)+0x12c>
c000f5a5:	fb                   	sti    
c000f5a6:	66 90                	xchg   ax,ax
c000f5a8:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c000f5ad:	48                   	dec    eax
c000f5ae:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c000f5b3:	75 1b                	jne    c000f5d0 <timerHandler(unsigned int)+0x154>
c000f5b5:	83 3d a0 97 02 c0 00 	cmp    DWORD PTR ds:0xc00297a0,0x0
c000f5bc:	74 12                	je     c000f5d0 <timerHandler(unsigned int)+0x154>
c000f5be:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c000f5c8:	e8 b7 69 00 00       	call   c0015f84 <schedule()>
c000f5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d0:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c000f5d5:	48                   	dec    eax
c000f5d6:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c000f5db:	75 03                	jne    c000f5e0 <timerHandler(unsigned int)+0x164>
c000f5dd:	fb                   	sti    
c000f5de:	66 90                	xchg   ax,ax
c000f5e0:	58                   	pop    eax
c000f5e1:	5b                   	pop    ebx
c000f5e2:	5e                   	pop    esi
c000f5e3:	c3                   	ret    

c000f5e4 <VCache::VCache(PhysicalDisk*)>:
c000f5e4:	53                   	push   ebx
c000f5e5:	83 ec 18             	sub    esp,0x18
c000f5e8:	ba a4 38 02 c0       	mov    edx,0xc00238a4
c000f5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5f1:	89 10                	mov    DWORD PTR [eax],edx
c000f5f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5f7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000f5fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f602:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000f609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f60d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000f614:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000f61b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f61f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000f626:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000f62d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f631:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000f638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f63c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f644:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000f64b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000f652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f656:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f65a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f65e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000f662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f666:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f66a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f66e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f675:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000f67d:	83 ec 0c             	sub    esp,0xc
c000f680:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f684:	e8 0e a1 ff ff       	call   c0009797 <malloc>
c000f689:	83 c4 10             	add    esp,0x10
c000f68c:	89 c3                	mov    ebx,eax
c000f68e:	83 ec 0c             	sub    esp,0xc
c000f691:	53                   	push   ebx
c000f692:	e8 bd 66 00 00       	call   c0015d54 <Mutex::Mutex()>
c000f697:	83 c4 10             	add    esp,0x10
c000f69a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f69e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f6a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6b0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000f6b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6bb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000f6c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f6c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6cc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000f6d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f6d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f6dc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000f6df:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000f6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f6ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6ee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f6f4:	05 00 01 00 00       	add    eax,0x100
c000f6f9:	c1 e0 04             	shl    eax,0x4
c000f6fc:	83 ec 0c             	sub    esp,0xc
c000f6ff:	50                   	push   eax
c000f700:	e8 92 a0 ff ff       	call   c0009797 <malloc>
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	89 c2                	mov    edx,eax
c000f70a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f70e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f715:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f71c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f720:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f724:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f728:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f72e:	c1 e0 06             	shl    eax,0x6
c000f731:	83 ec 0c             	sub    esp,0xc
c000f734:	50                   	push   eax
c000f735:	e8 5d a0 ff ff       	call   c0009797 <malloc>
c000f73a:	83 c4 10             	add    esp,0x10
c000f73d:	89 c2                	mov    edx,eax
c000f73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f743:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000f746:	90                   	nop
c000f747:	83 c4 18             	add    esp,0x18
c000f74a:	5b                   	pop    ebx
c000f74b:	c3                   	ret    

c000f74c <VCache::invalidateReadBuffer()>:
c000f74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f750:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000f756:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f75a:	c3                   	ret    
c000f75b:	90                   	nop

c000f75c <VCache::writeWriteBuffer()>:
c000f75c:	53                   	push   ebx
c000f75d:	83 ec 08             	sub    esp,0x8
c000f760:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f764:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f768:	74 1e                	je     c000f788 <VCache::writeWriteBuffer()+0x2c>
c000f76a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f76d:	83 ec 0c             	sub    esp,0xc
c000f770:	8b 10                	mov    edx,DWORD PTR [eax]
c000f772:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f775:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f778:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f77b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f77e:	50                   	push   eax
c000f77f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f782:	83 c4 20             	add    esp,0x20
c000f785:	8d 76 00             	lea    esi,[esi+0x0]
c000f788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000f78f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000f796:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000f79a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000f7a1:	83 c4 08             	add    esp,0x8
c000f7a4:	5b                   	pop    ebx
c000f7a5:	c3                   	ret    
c000f7a6:	66 90                	xchg   ax,ax

c000f7a8 <VCache::~VCache()>:
c000f7a8:	83 ec 0c             	sub    esp,0xc
c000f7ab:	ba a4 38 02 c0       	mov    edx,0xc00238a4
c000f7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b4:	89 10                	mov    DWORD PTR [eax],edx
c000f7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000f7bd:	84 c0                	test   al,al
c000f7bf:	74 0f                	je     c000f7d0 <VCache::~VCache()+0x28>
c000f7c1:	83 ec 0c             	sub    esp,0xc
c000f7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7c8:	e8 8f ff ff ff       	call   c000f75c <VCache::writeWriteBuffer()>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f7d7:	83 ec 0c             	sub    esp,0xc
c000f7da:	50                   	push   eax
c000f7db:	e8 c7 9f ff ff       	call   c00097a7 <free>
c000f7e0:	83 c4 10             	add    esp,0x10
c000f7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	50                   	push   eax
c000f7ee:	e8 b4 9f ff ff       	call   c00097a7 <free>
c000f7f3:	83 c4 10             	add    esp,0x10
c000f7f6:	90                   	nop
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    
c000f7fb:	90                   	nop

c000f7fc <VCache::~VCache()>:
c000f7fc:	83 ec 0c             	sub    esp,0xc
c000f7ff:	83 ec 0c             	sub    esp,0xc
c000f802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f806:	e8 9d ff ff ff       	call   c000f7a8 <VCache::~VCache()>
c000f80b:	83 c4 10             	add    esp,0x10
c000f80e:	83 ec 08             	sub    esp,0x8
c000f811:	6a 44                	push   0x44
c000f813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f817:	e8 e8 cd ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000f81c:	83 c4 10             	add    esp,0x10
c000f81f:	83 c4 0c             	add    esp,0xc
c000f822:	c3                   	ret    
c000f823:	90                   	nop

c000f824 <VCache::write(unsigned long long, int, void*)>:
c000f824:	55                   	push   ebp
c000f825:	31 c0                	xor    eax,eax
c000f827:	57                   	push   edi
c000f828:	56                   	push   esi
c000f829:	53                   	push   ebx
c000f82a:	83 ec 0c             	sub    esp,0xc
c000f82d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f831:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f835:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f839:	8d 76 00             	lea    esi,[esi+0x0]
c000f83c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000f840:	7d 1a                	jge    c000f85c <VCache::write(unsigned long long, int, void*)+0x38>
c000f842:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f845:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f84b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f84f:	0f af c8             	imul   ecx,eax
c000f852:	01 ca                	add    edx,ecx
c000f854:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f856:	40                   	inc    eax
c000f857:	eb e3                	jmp    c000f83c <VCache::write(unsigned long long, int, void*)+0x18>
c000f859:	8d 76 00             	lea    esi,[esi+0x0]
c000f85c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f860:	74 0a                	je     c000f86c <VCache::write(unsigned long long, int, void*)+0x48>
c000f862:	53                   	push   ebx
c000f863:	e8 e4 fe ff ff       	call   c000f74c <VCache::invalidateReadBuffer()>
c000f868:	58                   	pop    eax
c000f869:	8d 76 00             	lea    esi,[esi+0x0]
c000f86c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f870:	74 5e                	je     c000f8d0 <VCache::write(unsigned long long, int, void*)+0xac>
c000f872:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000f875:	89 e8                	mov    eax,ebp
c000f877:	99                   	cdq    
c000f878:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000f87b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000f87e:	89 c1                	mov    ecx,eax
c000f880:	89 d0                	mov    eax,edx
c000f882:	31 f1                	xor    ecx,esi
c000f884:	31 f8                	xor    eax,edi
c000f886:	09 c1                	or     ecx,eax
c000f888:	75 3a                	jne    c000f8c4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f88a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000f88f:	75 33                	jne    c000f8c4 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f891:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f894:	89 ef                	mov    edi,ebp
c000f896:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f89c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f8a0:	0f af f9             	imul   edi,ecx
c000f8a3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000f8a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000f8ab:	40                   	inc    eax
c000f8ac:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000f8af:	83 f8 40             	cmp    eax,0x40
c000f8b2:	75 60                	jne    c000f914 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f8b4:	83 ec 0c             	sub    esp,0xc
c000f8b7:	53                   	push   ebx
c000f8b8:	e8 9f fe ff ff       	call   c000f75c <VCache::writeWriteBuffer()>
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	eb 52                	jmp    c000f914 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f8c2:	66 90                	xchg   ax,ax
c000f8c4:	83 ec 0c             	sub    esp,0xc
c000f8c7:	53                   	push   ebx
c000f8c8:	e8 8f fe ff ff       	call   c000f75c <VCache::writeWriteBuffer()>
c000f8cd:	83 c4 10             	add    esp,0x10
c000f8d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8d3:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000f8d8:	7f 22                	jg     c000f8fc <VCache::write(unsigned long long, int, void*)+0xd8>
c000f8da:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000f8dd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000f8e0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f8e4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000f8e8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000f8eb:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000f8ee:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f8f4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f8f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8fa:	eb 18                	jmp    c000f914 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f8fc:	83 ec 0c             	sub    esp,0xc
c000f8ff:	8b 10                	mov    edx,DWORD PTR [eax]
c000f901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f909:	57                   	push   edi
c000f90a:	56                   	push   esi
c000f90b:	50                   	push   eax
c000f90c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f90f:	83 c4 20             	add    esp,0x20
c000f912:	66 90                	xchg   ax,ax
c000f914:	83 c4 0c             	add    esp,0xc
c000f917:	31 c0                	xor    eax,eax
c000f919:	5b                   	pop    ebx
c000f91a:	5e                   	pop    esi
c000f91b:	5f                   	pop    edi
c000f91c:	5d                   	pop    ebp
c000f91d:	c3                   	ret    

c000f91e <VCache::read(unsigned long long, int, void*)>:
c000f91e:	55                   	push   ebp
c000f91f:	31 c0                	xor    eax,eax
c000f921:	57                   	push   edi
c000f922:	56                   	push   esi
c000f923:	53                   	push   ebx
c000f924:	83 ec 1c             	sub    esp,0x1c
c000f927:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f92b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000f92f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000f933:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f937:	90                   	nop
c000f938:	39 e8                	cmp    eax,ebp
c000f93a:	7d 18                	jge    c000f954 <VCache::read(unsigned long long, int, void*)+0x36>
c000f93c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f93f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f945:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f949:	0f af c8             	imul   ecx,eax
c000f94c:	01 ca                	add    edx,ecx
c000f94e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f950:	40                   	inc    eax
c000f951:	eb e5                	jmp    c000f938 <VCache::read(unsigned long long, int, void*)+0x1a>
c000f953:	90                   	nop
c000f954:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f958:	74 0e                	je     c000f968 <VCache::read(unsigned long long, int, void*)+0x4a>
c000f95a:	83 ec 0c             	sub    esp,0xc
c000f95d:	53                   	push   ebx
c000f95e:	e8 f9 fd ff ff       	call   c000f75c <VCache::writeWriteBuffer()>
c000f963:	83 c4 10             	add    esp,0x10
c000f966:	66 90                	xchg   ax,ax
c000f968:	83 fd 01             	cmp    ebp,0x1
c000f96b:	0f 85 87 00 00 00    	jne    c000f9f8 <VCache::read(unsigned long long, int, void*)+0xda>
c000f971:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f978:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000f97f:	75 77                	jne    c000f9f8 <VCache::read(unsigned long long, int, void*)+0xda>
c000f981:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000f984:	89 e9                	mov    ecx,ebp
c000f986:	f7 d9                	neg    ecx
c000f988:	89 c8                	mov    eax,ecx
c000f98a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f98e:	c1 f8 1f             	sar    eax,0x1f
c000f991:	21 f1                	and    ecx,esi
c000f993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f997:	89 c8                	mov    eax,ecx
c000f999:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f99d:	21 f9                	and    ecx,edi
c000f99f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f9a3:	89 ca                	mov    edx,ecx
c000f9a5:	74 0d                	je     c000f9b4 <VCache::read(unsigned long long, int, void*)+0x96>
c000f9a7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000f9aa:	75 08                	jne    c000f9b4 <VCache::read(unsigned long long, int, void*)+0x96>
c000f9ac:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000f9af:	74 27                	je     c000f9d8 <VCache::read(unsigned long long, int, void*)+0xba>
c000f9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9b4:	83 ec 0c             	sub    esp,0xc
c000f9b7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000f9bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f9bf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000f9c2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000f9c5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000f9c7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f9ca:	55                   	push   ebp
c000f9cb:	52                   	push   edx
c000f9cc:	50                   	push   eax
c000f9cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f9d1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f9d4:	83 c4 20             	add    esp,0x20
c000f9d7:	90                   	nop
c000f9d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f9db:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000f9df:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f9e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000f9e8:	48                   	dec    eax
c000f9e9:	21 c6                	and    esi,eax
c000f9eb:	0f af f1             	imul   esi,ecx
c000f9ee:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000f9f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9f3:	eb 23                	jmp    c000fa18 <VCache::read(unsigned long long, int, void*)+0xfa>
c000f9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9f8:	83 ec 0c             	sub    esp,0xc
c000f9fb:	53                   	push   ebx
c000f9fc:	e8 4b fd ff ff       	call   c000f74c <VCache::invalidateReadBuffer()>
c000fa01:	5a                   	pop    edx
c000fa02:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fa05:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fa0b:	55                   	push   ebp
c000fa0c:	57                   	push   edi
c000fa0d:	56                   	push   esi
c000fa0e:	50                   	push   eax
c000fa0f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000fa12:	83 c4 20             	add    esp,0x20
c000fa15:	8d 76 00             	lea    esi,[esi+0x0]
c000fa18:	83 c4 1c             	add    esp,0x1c
c000fa1b:	31 c0                	xor    eax,eax
c000fa1d:	5b                   	pop    ebx
c000fa1e:	5e                   	pop    esi
c000fa1f:	5f                   	pop    edi
c000fa20:	5d                   	pop    ebp
c000fa21:	c3                   	ret    

c000fa22 <Video::putrect(int, int, int, int, unsigned int)>:
c000fa22:	55                   	push   ebp
c000fa23:	57                   	push   edi
c000fa24:	56                   	push   esi
c000fa25:	53                   	push   ebx
c000fa26:	83 ec 1c             	sub    esp,0x1c
c000fa29:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fa2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000fa35:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fa39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fa3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa41:	01 df                	add    edi,ebx
c000fa43:	39 fb                	cmp    ebx,edi
c000fa45:	7d 1f                	jge    c000fa66 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000fa47:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fa4b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000fa4f:	7d 12                	jge    c000fa63 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000fa51:	8b 16                	mov    edx,DWORD PTR [esi]
c000fa53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fa57:	53                   	push   ebx
c000fa58:	55                   	push   ebp
c000fa59:	45                   	inc    ebp
c000fa5a:	56                   	push   esi
c000fa5b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fa5e:	83 c4 10             	add    esp,0x10
c000fa61:	eb e8                	jmp    c000fa4b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000fa63:	43                   	inc    ebx
c000fa64:	eb dd                	jmp    c000fa43 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000fa66:	83 c4 1c             	add    esp,0x1c
c000fa69:	5b                   	pop    ebx
c000fa6a:	5e                   	pop    esi
c000fa6b:	5f                   	pop    edi
c000fa6c:	5d                   	pop    ebp
c000fa6d:	c3                   	ret    

c000fa6e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000fa6e:	55                   	push   ebp
c000fa6f:	57                   	push   edi
c000fa70:	31 ff                	xor    edi,edi
c000fa72:	56                   	push   esi
c000fa73:	53                   	push   ebx
c000fa74:	83 ec 1c             	sub    esp,0x1c
c000fa77:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000fa7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fa7f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000fa86:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000fa8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa8f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000fa93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fa97:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000fa9a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fa9e:	01 f9                	add    ecx,edi
c000faa0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000faa4:	7d 2f                	jge    c000fad5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000faa6:	31 f6                	xor    esi,esi
c000faa8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000faac:	01 f2                	add    edx,esi
c000faae:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000fab2:	7d 1a                	jge    c000face <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000fab4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fab7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000faba:	46                   	inc    esi
c000fabb:	51                   	push   ecx
c000fabc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fac0:	52                   	push   edx
c000fac1:	55                   	push   ebp
c000fac2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fac5:	83 c4 10             	add    esp,0x10
c000fac8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000facc:	eb da                	jmp    c000faa8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000face:	47                   	inc    edi
c000facf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000fad3:	eb c5                	jmp    c000fa9a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000fad5:	83 c4 1c             	add    esp,0x1c
c000fad8:	5b                   	pop    ebx
c000fad9:	5e                   	pop    esi
c000fada:	5f                   	pop    edi
c000fadb:	5d                   	pop    ebp
c000fadc:	c3                   	ret    
c000fadd:	90                   	nop

c000fade <Video::blit(unsigned int*, int, int, int, int)>:
c000fade:	55                   	push   ebp
c000fadf:	57                   	push   edi
c000fae0:	56                   	push   esi
c000fae1:	53                   	push   ebx
c000fae2:	83 ec 1c             	sub    esp,0x1c
c000fae5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000faed:	85 c0                	test   eax,eax
c000faef:	79 02                	jns    c000faf3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000faf1:	31 c0                	xor    eax,eax
c000faf3:	c1 e0 02             	shl    eax,0x2
c000faf6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000fafa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fafe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fb02:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000fb06:	39 d8                	cmp    eax,ebx
c000fb08:	7e 49                	jle    c000fb53 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000fb0a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000fb10:	7c 41                	jl     c000fb53 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000fb12:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000fb16:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fb1a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fb1e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000fb22:	39 f9                	cmp    ecx,edi
c000fb24:	7e 22                	jle    c000fb48 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000fb26:	83 c5 04             	add    ebp,0x4
c000fb29:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fb2f:	7c 14                	jl     c000fb45 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000fb31:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000fb33:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000fb36:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb3e:	56                   	push   esi
c000fb3f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	47                   	inc    edi
c000fb46:	eb d2                	jmp    c000fb1a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000fb48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4c:	43                   	inc    ebx
c000fb4d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000fb51:	eb ab                	jmp    c000fafe <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000fb53:	83 c4 1c             	add    esp,0x1c
c000fb56:	5b                   	pop    ebx
c000fb57:	5e                   	pop    esi
c000fb58:	5f                   	pop    edi
c000fb59:	5d                   	pop    ebp
c000fb5a:	c3                   	ret    
c000fb5b:	90                   	nop

c000fb5c <Video::clearScreen(unsigned int)>:
c000fb5c:	57                   	push   edi
c000fb5d:	56                   	push   esi
c000fb5e:	53                   	push   ebx
c000fb5f:	31 db                	xor    ebx,ebx
c000fb61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb65:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000fb6b:	7e 1f                	jle    c000fb8c <Video::clearScreen(unsigned int)+0x30>
c000fb6d:	31 ff                	xor    edi,edi
c000fb6f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fb75:	7e 12                	jle    c000fb89 <Video::clearScreen(unsigned int)+0x2d>
c000fb77:	8b 06                	mov    eax,DWORD PTR [esi]
c000fb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb7d:	53                   	push   ebx
c000fb7e:	57                   	push   edi
c000fb7f:	47                   	inc    edi
c000fb80:	56                   	push   esi
c000fb81:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fb84:	83 c4 10             	add    esp,0x10
c000fb87:	eb e6                	jmp    c000fb6f <Video::clearScreen(unsigned int)+0x13>
c000fb89:	43                   	inc    ebx
c000fb8a:	eb d9                	jmp    c000fb65 <Video::clearScreen(unsigned int)+0x9>
c000fb8c:	5b                   	pop    ebx
c000fb8d:	5e                   	pop    esi
c000fb8e:	5f                   	pop    edi
c000fb8f:	c3                   	ret    

c000fb90 <Video::putpixel(int, int, unsigned int)>:
c000fb90:	c7 44 24 04 ac 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc00238ac
c000fb98:	e9 b2 2e 00 00       	jmp    c0012a4f <Krnl::panic(char const*)>
c000fb9d:	90                   	nop

c000fb9e <Video::Video(char const*)>:
c000fb9e:	83 ec 0c             	sub    esp,0xc
c000fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba5:	83 ec 08             	sub    esp,0x8
c000fba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbac:	50                   	push   eax
c000fbad:	e8 b4 e1 ff ff       	call   c000dd66 <Device::Device(char const*)>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	ba 1c 39 02 c0       	mov    edx,0xc002391c
c000fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbbe:	89 10                	mov    DWORD PTR [eax],edx
c000fbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbc4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000fbce:	90                   	nop
c000fbcf:	83 c4 0c             	add    esp,0xc
c000fbd2:	c3                   	ret    
c000fbd3:	90                   	nop

c000fbd4 <Video::~Video()>:
c000fbd4:	83 ec 0c             	sub    esp,0xc
c000fbd7:	ba 1c 39 02 c0       	mov    edx,0xc002391c
c000fbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbe0:	89 10                	mov    DWORD PTR [eax],edx
c000fbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbe6:	83 ec 0c             	sub    esp,0xc
c000fbe9:	50                   	push   eax
c000fbea:	e8 75 de ff ff       	call   c000da64 <Device::~Device()>
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	90                   	nop
c000fbf3:	83 c4 0c             	add    esp,0xc
c000fbf6:	c3                   	ret    
c000fbf7:	90                   	nop

c000fbf8 <Video::~Video()>:
c000fbf8:	83 ec 0c             	sub    esp,0xc
c000fbfb:	83 ec 0c             	sub    esp,0xc
c000fbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc02:	e8 cd ff ff ff       	call   c000fbd4 <Video::~Video()>
c000fc07:	83 c4 10             	add    esp,0x10
c000fc0a:	83 ec 08             	sub    esp,0x8
c000fc0d:	68 64 01 00 00       	push   0x164
c000fc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc16:	e8 e9 c9 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c000fc1b:	83 c4 10             	add    esp,0x10
c000fc1e:	83 c4 0c             	add    esp,0xc
c000fc21:	c3                   	ret    

c000fc22 <Video::isMonochrome()>:
c000fc22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc26:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000fc2c:	c3                   	ret    
c000fc2d:	90                   	nop

c000fc2e <Video::getWidth()>:
c000fc2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc32:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000fc38:	c3                   	ret    
c000fc39:	90                   	nop

c000fc3a <Video::getHeight()>:
c000fc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc3e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc44:	c3                   	ret    
c000fc45:	90                   	nop

c000fc46 <Video::drawCursor(int, int, unsigned char*, int)>:
c000fc46:	55                   	push   ebp
c000fc47:	57                   	push   edi
c000fc48:	56                   	push   esi
c000fc49:	53                   	push   ebx
c000fc4a:	83 ec 2c             	sub    esp,0x2c
c000fc4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fc51:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fc55:	83 f8 01             	cmp    eax,0x1
c000fc58:	19 c9                	sbb    ecx,ecx
c000fc5a:	31 db                	xor    ebx,ebx
c000fc5c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fc60:	89 cd                	mov    ebp,ecx
c000fc62:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000fc6a:	f7 d5                	not    ebp
c000fc6c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000fc72:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000fc76:	01 d8                	add    eax,ebx
c000fc78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc7c:	56                   	push   esi
c000fc7d:	e8 b8 ff ff ff       	call   c000fc3a <Video::getHeight()>
c000fc82:	59                   	pop    ecx
c000fc83:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fc87:	7e 70                	jle    c000fcf9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000fc89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fc8d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000fc91:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000fc94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fc98:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fc9c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000fca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fca7:	89 f8                	mov    eax,edi
c000fca9:	83 c0 20             	add    eax,0x20
c000fcac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fcb0:	56                   	push   esi
c000fcb1:	e8 78 ff ff ff       	call   c000fc2e <Video::getWidth()>
c000fcb6:	5a                   	pop    edx
c000fcb7:	39 c7                	cmp    edi,eax
c000fcb9:	7d 34                	jge    c000fcef <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000fcbb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000fcc0:	74 05                	je     c000fcc7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000fcc2:	8b 06                	mov    eax,DWORD PTR [esi]
c000fcc4:	55                   	push   ebp
c000fcc5:	eb 0d                	jmp    c000fcd4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000fcc7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000fccc:	74 12                	je     c000fce0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000fcce:	8b 06                	mov    eax,DWORD PTR [esi]
c000fcd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcd4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcd8:	57                   	push   edi
c000fcd9:	56                   	push   esi
c000fcda:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000fce4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000fce8:	47                   	inc    edi
c000fce9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000fced:	75 c1                	jne    c000fcb0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000fcef:	43                   	inc    ebx
c000fcf0:	83 fb 20             	cmp    ebx,0x20
c000fcf3:	0f 85 79 ff ff ff    	jne    c000fc72 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000fcf9:	83 c4 2c             	add    esp,0x2c
c000fcfc:	5b                   	pop    ebx
c000fcfd:	5e                   	pop    esi
c000fcfe:	5f                   	pop    edi
c000fcff:	5d                   	pop    ebp
c000fd00:	c3                   	ret    
c000fd01:	90                   	nop

c000fd02 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000fd02:	55                   	push   ebp
c000fd03:	57                   	push   edi
c000fd04:	56                   	push   esi
c000fd05:	53                   	push   ebx
c000fd06:	83 ec 28             	sub    esp,0x28
c000fd09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000fd0d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000fd11:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000fd15:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000fd19:	c1 e6 08             	shl    esi,0x8
c000fd1c:	01 c6                	add    esi,eax
c000fd1e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000fd22:	c1 e0 08             	shl    eax,0x8
c000fd25:	01 d0                	add    eax,edx
c000fd27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd2f:	0f af c6             	imul   eax,esi
c000fd32:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000fd39:	50                   	push   eax
c000fd3a:	e8 58 9a ff ff       	call   c0009797 <malloc>
c000fd3f:	83 c4 10             	add    esp,0x10
c000fd42:	89 c7                	mov    edi,eax
c000fd44:	85 c0                	test   eax,eax
c000fd46:	75 10                	jne    c000fd58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000fd48:	83 ec 0c             	sub    esp,0xc
c000fd4b:	68 cd 38 02 c0       	push   0xc00238cd
c000fd50:	e8 fa 2c 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000fd5b:	ba 12 00 00 00       	mov    edx,0x12
c000fd60:	84 c0                	test   al,al
c000fd62:	74 11                	je     c000fd75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000fd64:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000fd68:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000fd6c:	c1 fa 03             	sar    edx,0x3
c000fd6f:	0f af d1             	imul   edx,ecx
c000fd72:	83 c2 12             	add    edx,0x12
c000fd75:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000fd79:	74 04                	je     c000fd7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000fd7b:	85 f6                	test   esi,esi
c000fd7d:	75 12                	jne    c000fd91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000fd7f:	83 ec 0c             	sub    esp,0xc
c000fd82:	68 dd 38 02 c0       	push   0xc00238dd
c000fd87:	e8 59 c9 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000fd8c:	e9 b8 00 00 00       	jmp    c000fe49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000fd91:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000fd95:	80 f9 02             	cmp    cl,0x2
c000fd98:	0f 85 96 00 00 00    	jne    c000fe34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000fd9e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000fda3:	75 0e                	jne    c000fdb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fda5:	84 c0                	test   al,al
c000fda7:	75 0a                	jne    c000fdb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fda9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000fdac:	83 e8 18             	sub    eax,0x18
c000fdaf:	a8 f7                	test   al,0xf7
c000fdb1:	74 0a                	je     c000fdbd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000fdb3:	83 ec 0c             	sub    esp,0xc
c000fdb6:	68 f2 38 02 c0       	push   0xc00238f2
c000fdbb:	eb 7f                	jmp    c000fe3c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000fdbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fdc5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000fdcd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000fdd1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdd9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000fddd:	75 0c                	jne    c000fdeb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000fddf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000fde4:	c1 e0 18             	shl    eax,0x18
c000fde7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdeb:	45                   	inc    ebp
c000fdec:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000fdf1:	c1 e1 10             	shl    ecx,0x10
c000fdf4:	89 c8                	mov    eax,ecx
c000fdf6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000fdfb:	c1 e1 08             	shl    ecx,0x8
c000fdfe:	09 c1                	or     ecx,eax
c000fe00:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000fe04:	09 c1                	or     ecx,eax
c000fe06:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000fe0a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000fe0e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000fe12:	c1 f8 03             	sar    eax,0x3
c000fe15:	01 c2                	add    edx,eax
c000fe17:	89 e8                	mov    eax,ebp
c000fe19:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000fe1d:	39 c6                	cmp    esi,eax
c000fe1f:	7f b0                	jg     c000fdd1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000fe21:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fe25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe29:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000fe2c:	7e 22                	jle    c000fe50 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000fe2e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000fe32:	eb 99                	jmp    c000fdcd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000fe34:	50                   	push   eax
c000fe35:	50                   	push   eax
c000fe36:	51                   	push   ecx
c000fe37:	68 00 39 02 c0       	push   0xc0023900
c000fe3c:	e8 a4 c8 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c000fe41:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fe44:	e8 5e 99 ff ff       	call   c00097a7 <free>
c000fe49:	83 c4 10             	add    esp,0x10
c000fe4c:	31 ff                	xor    edi,edi
c000fe4e:	eb 0f                	jmp    c000fe5f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000fe50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 30                	mov    DWORD PTR [eax],esi
c000fe56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe5a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fe5d:	89 30                	mov    DWORD PTR [eax],esi
c000fe5f:	83 c4 1c             	add    esp,0x1c
c000fe62:	89 f8                	mov    eax,edi
c000fe64:	5b                   	pop    ebx
c000fe65:	5e                   	pop    esi
c000fe66:	5f                   	pop    edi
c000fe67:	5d                   	pop    ebp
c000fe68:	c3                   	ret    
c000fe69:	90                   	nop

c000fe6a <Video::putTGA(int, int, unsigned char*, int)>:
c000fe6a:	55                   	push   ebp
c000fe6b:	57                   	push   edi
c000fe6c:	56                   	push   esi
c000fe6d:	53                   	push   ebx
c000fe6e:	83 ec 28             	sub    esp,0x28
c000fe71:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fe75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fe79:	50                   	push   eax
c000fe7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fe7e:	50                   	push   eax
c000fe7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fe83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fe87:	56                   	push   esi
c000fe88:	e8 75 fe ff ff       	call   c000fd02 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000fe8d:	83 c4 20             	add    esp,0x20
c000fe90:	85 c0                	test   eax,eax
c000fe92:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fe96:	74 35                	je     c000fecd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fe98:	89 c7                	mov    edi,eax
c000fe9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000fe9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000fea2:	39 d8                	cmp    eax,ebx
c000fea4:	7e 27                	jle    c000fecd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fea6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000feaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000feb2:	39 e8                	cmp    eax,ebp
c000feb4:	7e 14                	jle    c000feca <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000feb6:	8b 06                	mov    eax,DWORD PTR [esi]
c000feb8:	83 c7 04             	add    edi,0x4
c000febb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000febe:	53                   	push   ebx
c000febf:	55                   	push   ebp
c000fec0:	45                   	inc    ebp
c000fec1:	56                   	push   esi
c000fec2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb e0                	jmp    c000feaa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000feca:	43                   	inc    ebx
c000fecb:	eb cd                	jmp    c000fe9a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000fecd:	83 c4 1c             	add    esp,0x1c
c000fed0:	5b                   	pop    ebx
c000fed1:	5e                   	pop    esi
c000fed2:	5f                   	pop    edi
c000fed3:	5d                   	pop    ebp
c000fed4:	c3                   	ret    
c000fed5:	66 90                	xchg   ax,ax
c000fed7:	90                   	nop

c000fed8 <ACPI::close(int, int, void*)>:
c000fed8:	83 ec 1c             	sub    esp,0x1c
c000fedb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000fee3:	74 0b                	je     c000fef0 <ACPI::close(int, int, void*)+0x18>
c000fee5:	b8 00 00 00 00       	mov    eax,0x0
c000feea:	e9 99 00 00 00       	jmp    c000ff88 <ACPI::close(int, int, void*)+0xb0>
c000feef:	90                   	nop
c000fef0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fef5:	75 29                	jne    c000ff20 <ACPI::close(int, int, void*)+0x48>
c000fef7:	a1 c8 88 02 c0       	mov    eax,ds:0xc00288c8
c000fefc:	85 c0                	test   eax,eax
c000fefe:	74 08                	je     c000ff08 <ACPI::close(int, int, void*)+0x30>
c000ff00:	a1 c8 88 02 c0       	mov    eax,ds:0xc00288c8
c000ff05:	ff d0                	call   eax
c000ff07:	90                   	nop
c000ff08:	83 ec 0c             	sub    esp,0xc
c000ff0b:	68 5c 39 02 c0       	push   0xc002395c
c000ff10:	e8 3a 2b 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c000ff15:	83 c4 10             	add    esp,0x10
c000ff18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff1d:	eb 69                	jmp    c000ff88 <ACPI::close(int, int, void*)+0xb0>
c000ff1f:	90                   	nop
c000ff20:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ff25:	75 59                	jne    c000ff80 <ACPI::close(int, int, void*)+0xa8>
c000ff27:	a1 c4 88 02 c0       	mov    eax,ds:0xc00288c4
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 08                	je     c000ff38 <ACPI::close(int, int, void*)+0x60>
c000ff30:	a1 c4 88 02 c0       	mov    eax,ds:0xc00288c4
c000ff35:	ff d0                	call   eax
c000ff37:	90                   	nop
c000ff38:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ff3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ff45:	83 e0 02             	and    eax,0x2
c000ff48:	74 1e                	je     c000ff68 <ACPI::close(int, int, void*)+0x90>
c000ff4a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ff51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff55:	89 c2                	mov    edx,eax
c000ff57:	ec                   	in     al,dx
c000ff58:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ff5c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ff60:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ff64:	eb da                	jmp    c000ff40 <ACPI::close(int, int, void*)+0x68>
c000ff66:	66 90                	xchg   ax,ax
c000ff68:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ff6f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ff74:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ff78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff7c:	ee                   	out    dx,al
c000ff7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff85:	8d 76 00             	lea    esi,[esi+0x0]
c000ff88:	83 c4 1c             	add    esp,0x1c
c000ff8b:	c3                   	ret    

c000ff8c <findRSDP()>:
c000ff8c:	83 ec 1c             	sub    esp,0x1c
c000ff8f:	83 ec 0c             	sub    esp,0xc
c000ff92:	68 7f 3a 02 c0       	push   0xc0023a7f
c000ff97:	e8 55 98 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000ff9c:	83 c4 10             	add    esp,0x10
c000ff9f:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000ffa4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000ffaa:	83 e0 04             	and    eax,0x4
c000ffad:	84 c0                	test   al,al
c000ffaf:	75 0b                	jne    c000ffbc <findRSDP()+0x30>
c000ffb1:	b8 00 00 00 00       	mov    eax,0x0
c000ffb6:	e9 a1 00 00 00       	jmp    c001005c <findRSDP()+0xd0>
c000ffbb:	90                   	nop
c000ffbc:	a1 f8 62 02 c0       	mov    eax,ds:0xc00262f8
c000ffc1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ffc6:	7f 1c                	jg     c000ffe4 <findRSDP()+0x58>
c000ffc8:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000ffcd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ffd3:	83 e2 fb             	and    edx,0xfffffffb
c000ffd6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ffdc:	b8 00 00 00 00       	mov    eax,0x0
c000ffe1:	eb 79                	jmp    c001005c <findRSDP()+0xd0>
c000ffe3:	90                   	nop
c000ffe4:	83 ec 0c             	sub    esp,0xc
c000ffe7:	68 8f 3a 02 c0       	push   0xc0023a8f
c000ffec:	e8 00 98 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000fffc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0010004:	77 3e                	ja     c0010044 <findRSDP()+0xb8>
c0010006:	83 ec 04             	sub    esp,0x4
c0010009:	6a 08                	push   0x8
c001000b:	68 a8 3a 02 c0       	push   0xc0023aa8
c0010010:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010014:	e8 8b 03 ff ff       	call   c00003a4 <memcmp>
c0010019:	83 c4 10             	add    esp,0x10
c001001c:	85 c0                	test   eax,eax
c001001e:	0f 94 c0             	sete   al
c0010021:	84 c0                	test   al,al
c0010023:	74 17                	je     c001003c <findRSDP()+0xb0>
c0010025:	83 ec 0c             	sub    esp,0xc
c0010028:	68 b1 3a 02 c0       	push   0xc0023ab1
c001002d:	e8 bf 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010032:	83 c4 10             	add    esp,0x10
c0010035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010039:	eb 21                	jmp    c001005c <findRSDP()+0xd0>
c001003b:	90                   	nop
c001003c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0010041:	eb b9                	jmp    c000fffc <findRSDP()+0x70>
c0010043:	90                   	nop
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	68 bf 3a 02 c0       	push   0xc0023abf
c001004c:	e8 a0 97 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	b8 00 00 00 00       	mov    eax,0x0
c0010059:	8d 76 00             	lea    esi,[esi+0x0]
c001005c:	83 c4 1c             	add    esp,0x1c
c001005f:	c3                   	ret    

c0010060 <loadACPITables(unsigned char*)>:
c0010060:	57                   	push   edi
c0010061:	56                   	push   esi
c0010062:	53                   	push   ebx
c0010063:	83 ec 60             	sub    esp,0x60
c0010066:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001006b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010071:	83 e0 04             	and    eax,0x4
c0010074:	84 c0                	test   al,al
c0010076:	0f 84 3c 02 00 00    	je     c00102b8 <loadACPITables(unsigned char*)+0x258>
c001007c:	a0 e0 8a 02 c0       	mov    al,ds:0xc0028ae0
c0010081:	84 c0                	test   al,al
c0010083:	74 77                	je     c00100fc <loadACPITables(unsigned char*)+0x9c>
c0010085:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010089:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001008d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010091:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010094:	83 e8 24             	sub    eax,0x24
c0010097:	c1 e8 03             	shr    eax,0x3
c001009a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001009e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00100a6:	66 90                	xchg   ax,ax
c00100a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00100ac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00100b0:	0f 8d b6 00 00 00    	jge    c001016c <loadACPITables(unsigned char*)+0x10c>
c00100b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00100ba:	83 c0 24             	add    eax,0x24
c00100bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00100c1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00100c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00100c9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00100cd:	c1 e0 03             	shl    eax,0x3
c00100d0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00100d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00100d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00100db:	8b 00                	mov    eax,DWORD PTR [eax]
c00100dd:	89 c1                	mov    ecx,eax
c00100df:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c00100e4:	8d 50 01             	lea    edx,[eax+0x1]
c00100e7:	89 15 cc 88 02 c0    	mov    DWORD PTR ds:0xc00288cc,edx
c00100ed:	89 ca                	mov    edx,ecx
c00100ef:	89 14 c5 e4 88 02 c0 	mov    DWORD PTR [eax*8-0x3ffd771c],edx
c00100f6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00100fa:	eb ac                	jmp    c00100a8 <loadACPITables(unsigned char*)+0x48>
c00100fc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010100:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010104:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001010b:	83 e8 24             	sub    eax,0x24
c001010e:	c1 e8 02             	shr    eax,0x2
c0010111:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010115:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001011d:	8d 76 00             	lea    esi,[esi+0x0]
c0010120:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010124:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0010128:	7d 42                	jge    c001016c <loadACPITables(unsigned char*)+0x10c>
c001012a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001012e:	83 c0 24             	add    eax,0x24
c0010131:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010135:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010139:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001013d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010141:	c1 e0 02             	shl    eax,0x2
c0010144:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010148:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001014c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001014e:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c0010153:	8d 50 01             	lea    edx,[eax+0x1]
c0010156:	89 15 cc 88 02 c0    	mov    DWORD PTR ds:0xc00288cc,edx
c001015c:	89 ca                	mov    edx,ecx
c001015e:	89 14 c5 e4 88 02 c0 	mov    DWORD PTR [eax*8-0x3ffd771c],edx
c0010165:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0010169:	eb b5                	jmp    c0010120 <loadACPITables(unsigned char*)+0xc0>
c001016b:	90                   	nop
c001016c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0010174:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c0010179:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001017d:	0f 8d 39 01 00 00    	jge    c00102bc <loadACPITables(unsigned char*)+0x25c>
c0010183:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010187:	8b 04 c5 e4 88 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd771c]
c001018e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010196:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001019a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001019e:	25 ff 0f 00 00       	and    eax,0xfff
c00101a3:	89 c6                	mov    esi,eax
c00101a5:	8b 1d b4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b4
c00101ab:	83 ec 0c             	sub    esp,0xc
c00101ae:	6a 01                	push   0x1
c00101b0:	e8 d4 b1 ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c00101b5:	83 c4 10             	add    esp,0x10
c00101b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00101c2:	83 ec 0c             	sub    esp,0xc
c00101c5:	6a 01                	push   0x1
c00101c7:	6a 01                	push   0x1
c00101c9:	50                   	push   eax
c00101ca:	52                   	push   edx
c00101cb:	53                   	push   ebx
c00101cc:	e8 1b bb ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00101d1:	83 c4 20             	add    esp,0x20
c00101d4:	09 f0                	or     eax,esi
c00101d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00101da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00101de:	c1 e0 03             	shl    eax,0x3
c00101e1:	05 e0 88 02 c0       	add    eax,0xc00288e0
c00101e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101f2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00101fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010202:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010206:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001020a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001020e:	89 c6                	mov    esi,eax
c0010210:	89 d7                	mov    edi,edx
c0010212:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010214:	89 c8                	mov    eax,ecx
c0010216:	89 fa                	mov    edx,edi
c0010218:	89 f3                	mov    ebx,esi
c001021a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001021e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010222:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001022a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001022d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010231:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010235:	05 00 10 00 00       	add    eax,0x1000
c001023a:	c1 e8 0c             	shr    eax,0xc
c001023d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010245:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001024d:	25 ff 0f 00 00       	and    eax,0xfff
c0010252:	89 c6                	mov    esi,eax
c0010254:	8b 1d b4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b4
c001025a:	83 ec 0c             	sub    esp,0xc
c001025d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010261:	e8 23 b1 ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c0010266:	83 c4 10             	add    esp,0x10
c0010269:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001026d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010273:	83 ec 0c             	sub    esp,0xc
c0010276:	6a 01                	push   0x1
c0010278:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001027c:	50                   	push   eax
c001027d:	52                   	push   edx
c001027e:	53                   	push   ebx
c001027f:	e8 68 ba ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010284:	83 c4 20             	add    esp,0x20
c0010287:	09 f0                	or     eax,esi
c0010289:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001028d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010291:	83 ec 0c             	sub    esp,0xc
c0010294:	50                   	push   eax
c0010295:	e8 e3 b3 ff ff       	call   c000b67d <Virt::freeKernelVirtualPages(unsigned long)>
c001029a:	83 c4 10             	add    esp,0x10
c001029d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00102a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102a5:	89 14 c5 e4 88 02 c0 	mov    DWORD PTR [eax*8-0x3ffd771c],edx
c00102ac:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00102b0:	e9 bf fe ff ff       	jmp    c0010174 <loadACPITables(unsigned char*)+0x114>
c00102b5:	8d 76 00             	lea    esi,[esi+0x0]
c00102b8:	90                   	nop
c00102b9:	8d 76 00             	lea    esi,[esi+0x0]
c00102bc:	83 c4 60             	add    esp,0x60
c00102bf:	5b                   	pop    ebx
c00102c0:	5e                   	pop    esi
c00102c1:	5f                   	pop    edi
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <findRSDT(unsigned char*)>:
c00102c4:	57                   	push   edi
c00102c5:	56                   	push   esi
c00102c6:	53                   	push   ebx
c00102c7:	83 ec 50             	sub    esp,0x50
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	68 d3 3a 02 c0       	push   0xc0023ad3
c00102d2:	e8 1a 95 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00102d7:	83 c4 10             	add    esp,0x10
c00102da:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c00102df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00102e5:	83 e0 04             	and    eax,0x4
c00102e8:	84 c0                	test   al,al
c00102ea:	75 0c                	jne    c00102f8 <findRSDT(unsigned char*)+0x34>
c00102ec:	b8 00 00 00 00       	mov    eax,0x0
c00102f1:	e9 86 01 00 00       	jmp    c001047c <findRSDT(unsigned char*)+0x1b8>
c00102f6:	66 90                	xchg   ax,ax
c00102f8:	83 ec 0c             	sub    esp,0xc
c00102fb:	68 e5 3a 02 c0       	push   0xc0023ae5
c0010300:	e8 ec 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010305:	83 c4 10             	add    esp,0x10
c0010308:	89 e0                	mov    eax,esp
c001030a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001030e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010312:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010316:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001031e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010322:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010326:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001032a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001032e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0010332:	89 c6                	mov    esi,eax
c0010334:	89 d7                	mov    edi,edx
c0010336:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010338:	89 c8                	mov    eax,ecx
c001033a:	89 fa                	mov    edx,edi
c001033c:	89 f3                	mov    ebx,esi
c001033e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010342:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010346:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	68 f7 3a 02 c0       	push   0xc0023af7
c0010352:	e8 9a 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010357:	83 c4 10             	add    esp,0x10
c001035a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001035e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0010362:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001036a:	83 ec 0c             	sub    esp,0xc
c001036d:	68 09 3b 02 c0       	push   0xc0023b09
c0010372:	e8 7a 94 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010377:	83 c4 10             	add    esp,0x10
c001037a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001037e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010382:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001038a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001038e:	83 ec 04             	sub    esp,0x4
c0010391:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010395:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010399:	68 80 39 02 c0       	push   0xc0023980
c001039e:	e8 42 c3 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00103a3:	83 c4 10             	add    esp,0x10
c00103a6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00103aa:	25 ff 0f 00 00       	and    eax,0xfff
c00103af:	89 c6                	mov    esi,eax
c00103b1:	8b 1d b4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b4
c00103b7:	83 ec 0c             	sub    esp,0xc
c00103ba:	6a 02                	push   0x2
c00103bc:	e8 c8 af ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00103c8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00103ce:	83 ec 0c             	sub    esp,0xc
c00103d1:	6a 01                	push   0x1
c00103d3:	6a 02                	push   0x2
c00103d5:	50                   	push   eax
c00103d6:	52                   	push   edx
c00103d7:	53                   	push   ebx
c00103d8:	e8 0f b9 ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00103dd:	83 c4 20             	add    esp,0x20
c00103e0:	09 f0                	or     eax,esi
c00103e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00103e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103ea:	25 ff 0f 00 00       	and    eax,0xfff
c00103ef:	89 c6                	mov    esi,eax
c00103f1:	8b 1d b4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b4
c00103f7:	83 ec 0c             	sub    esp,0xc
c00103fa:	6a 02                	push   0x2
c00103fc:	e8 88 af ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010408:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001040e:	83 ec 0c             	sub    esp,0xc
c0010411:	6a 01                	push   0x1
c0010413:	6a 02                	push   0x2
c0010415:	50                   	push   eax
c0010416:	52                   	push   edx
c0010417:	53                   	push   ebx
c0010418:	e8 cf b8 ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001041d:	83 c4 20             	add    esp,0x20
c0010420:	09 f0                	or     eax,esi
c0010422:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010426:	83 ec 04             	sub    esp,0x4
c0010429:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001042d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010431:	68 a0 39 02 c0       	push   0xc00239a0
c0010436:	e8 aa c2 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0010443:	75 13                	jne    c0010458 <findRSDT(unsigned char*)+0x194>
c0010445:	c6 05 e0 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028ae0,0x0
c001044c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010450:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010454:	eb 22                	jmp    c0010478 <findRSDT(unsigned char*)+0x1b4>
c0010456:	66 90                	xchg   ax,ax
c0010458:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001045d:	75 11                	jne    c0010470 <findRSDT(unsigned char*)+0x1ac>
c001045f:	c6 05 e0 8a 02 c0 01 	mov    BYTE PTR ds:0xc0028ae0,0x1
c0010466:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001046a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001046e:	eb 08                	jmp    c0010478 <findRSDT(unsigned char*)+0x1b4>
c0010470:	b8 00 00 00 00       	mov    eax,0x0
c0010475:	eb 05                	jmp    c001047c <findRSDT(unsigned char*)+0x1b8>
c0010477:	90                   	nop
c0010478:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001047c:	83 c4 50             	add    esp,0x50
c001047f:	5b                   	pop    ebx
c0010480:	5e                   	pop    esi
c0010481:	5f                   	pop    edi
c0010482:	c3                   	ret    
c0010483:	90                   	nop

c0010484 <findDataTable(unsigned char*, char*)>:
c0010484:	83 ec 1c             	sub    esp,0x1c
c0010487:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001048c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010492:	83 e0 04             	and    eax,0x4
c0010495:	84 c0                	test   al,al
c0010497:	75 07                	jne    c00104a0 <findDataTable(unsigned char*, char*)+0x1c>
c0010499:	b8 00 00 00 00       	mov    eax,0x0
c001049e:	eb 58                	jmp    c00104f8 <findDataTable(unsigned char*, char*)+0x74>
c00104a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00104a8:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c00104ad:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00104b1:	7d 3d                	jge    c00104f0 <findDataTable(unsigned char*, char*)+0x6c>
c00104b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b7:	c1 e0 03             	shl    eax,0x3
c00104ba:	05 e0 88 02 c0       	add    eax,0xc00288e0
c00104bf:	83 ec 04             	sub    esp,0x4
c00104c2:	6a 04                	push   0x4
c00104c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00104c8:	50                   	push   eax
c00104c9:	e8 d6 fe fe ff       	call   c00003a4 <memcmp>
c00104ce:	83 c4 10             	add    esp,0x10
c00104d1:	85 c0                	test   eax,eax
c00104d3:	0f 94 c0             	sete   al
c00104d6:	84 c0                	test   al,al
c00104d8:	74 0e                	je     c00104e8 <findDataTable(unsigned char*, char*)+0x64>
c00104da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104de:	8b 04 c5 e4 88 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd771c]
c00104e5:	eb 11                	jmp    c00104f8 <findDataTable(unsigned char*, char*)+0x74>
c00104e7:	90                   	nop
c00104e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00104ec:	eb ba                	jmp    c00104a8 <findDataTable(unsigned char*, char*)+0x24>
c00104ee:	66 90                	xchg   ax,ax
c00104f0:	b8 00 00 00 00       	mov    eax,0x0
c00104f5:	8d 76 00             	lea    esi,[esi+0x0]
c00104f8:	83 c4 1c             	add    esp,0x1c
c00104fb:	c3                   	ret    

c00104fc <scanMADT()>:
c00104fc:	53                   	push   ebx
c00104fd:	83 ec 38             	sub    esp,0x38
c0010500:	83 ec 0c             	sub    esp,0xc
c0010503:	68 1b 3b 02 c0       	push   0xc0023b1b
c0010508:	e8 e4 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010515:	25 00 04 00 00       	and    eax,0x400
c001051a:	74 14                	je     c0010530 <scanMADT()+0x34>
c001051c:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0010521:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010527:	83 e2 fb             	and    edx,0xfffffffb
c001052a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010530:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0010535:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001053b:	83 e0 04             	and    eax,0x4
c001053e:	84 c0                	test   al,al
c0010540:	0f 84 82 04 00 00    	je     c00109c8 <scanMADT()+0x4cc>
c0010546:	83 ec 0c             	sub    esp,0xc
c0010549:	68 28 3b 02 c0       	push   0xc0023b28
c001054e:	e8 9e 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	e8 31 fa ff ff       	call   c000ff8c <findRSDP()>
c001055b:	a3 ec 8a 02 c0       	mov    ds:0xc0028aec,eax
c0010560:	a1 ec 8a 02 c0       	mov    eax,ds:0xc0028aec
c0010565:	85 c0                	test   eax,eax
c0010567:	75 1b                	jne    c0010584 <scanMADT()+0x88>
c0010569:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001056e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010574:	83 e2 fb             	and    edx,0xfffffffb
c0010577:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001057d:	e9 4e 04 00 00       	jmp    c00109d0 <scanMADT()+0x4d4>
c0010582:	66 90                	xchg   ax,ax
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	68 3a 3b 02 c0       	push   0xc0023b3a
c001058c:	e8 60 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010591:	83 c4 10             	add    esp,0x10
c0010594:	a1 ec 8a 02 c0       	mov    eax,ds:0xc0028aec
c0010599:	83 ec 0c             	sub    esp,0xc
c001059c:	50                   	push   eax
c001059d:	e8 22 fd ff ff       	call   c00102c4 <findRSDT(unsigned char*)>
c00105a2:	83 c4 10             	add    esp,0x10
c00105a5:	a3 e8 8a 02 c0       	mov    ds:0xc0028ae8,eax
c00105aa:	a1 e8 8a 02 c0       	mov    eax,ds:0xc0028ae8
c00105af:	85 c0                	test   eax,eax
c00105b1:	75 19                	jne    c00105cc <scanMADT()+0xd0>
c00105b3:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c00105b8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00105be:	83 e2 fb             	and    edx,0xfffffffb
c00105c1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00105c7:	e9 04 04 00 00       	jmp    c00109d0 <scanMADT()+0x4d4>
c00105cc:	83 ec 0c             	sub    esp,0xc
c00105cf:	68 4a 3b 02 c0       	push   0xc0023b4a
c00105d4:	e8 18 92 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00105d9:	83 c4 10             	add    esp,0x10
c00105dc:	a1 e8 8a 02 c0       	mov    eax,ds:0xc0028ae8
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	50                   	push   eax
c00105e5:	e8 76 fa ff ff       	call   c0010060 <loadACPITables(unsigned char*)>
c00105ea:	83 c4 10             	add    esp,0x10
c00105ed:	a1 e8 8a 02 c0       	mov    eax,ds:0xc0028ae8
c00105f2:	83 ec 08             	sub    esp,0x8
c00105f5:	68 62 3b 02 c0       	push   0xc0023b62
c00105fa:	50                   	push   eax
c00105fb:	e8 84 fe ff ff       	call   c0010484 <findDataTable(unsigned char*, char*)>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010607:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001060c:	75 1a                	jne    c0010628 <scanMADT()+0x12c>
c001060e:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0010613:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010619:	83 e2 fe             	and    edx,0xfffffffe
c001061c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010622:	e9 a9 03 00 00       	jmp    c00109d0 <scanMADT()+0x4d4>
c0010627:	90                   	nop
c0010628:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010630:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010637:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001063b:	0f 87 8f 03 00 00    	ja     c00109d0 <scanMADT()+0x4d4>
c0010641:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010649:	0f 87 81 03 00 00    	ja     c00109d0 <scanMADT()+0x4d4>
c001064f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010653:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001065b:	8d 50 01             	lea    edx,[eax+0x1]
c001065e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010662:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010666:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001066a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001066e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010672:	8d 50 01             	lea    edx,[eax+0x1]
c0010675:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010679:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001067d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010681:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0010685:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001068a:	0f 86 3c 03 00 00    	jbe    c00109cc <scanMADT()+0x4d0>
c0010690:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0010695:	75 59                	jne    c00106f0 <scanMADT()+0x1f4>
c0010697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001069b:	8d 50 01             	lea    edx,[eax+0x1]
c001069e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106a2:	8a 15 e0 8c 02 c0    	mov    dl,BYTE PTR ds:0xc0028ce0
c00106a8:	0f b6 d2             	movzx  edx,dl
c00106ab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00106af:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00106b3:	88 82 20 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72e0],al
c00106b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106bd:	8d 50 01             	lea    edx,[eax+0x1]
c00106c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00106c4:	8a 15 e0 8c 02 c0    	mov    dl,BYTE PTR ds:0xc0028ce0
c00106ca:	8d 4a 01             	lea    ecx,[edx+0x1]
c00106cd:	88 0d e0 8c 02 c0    	mov    BYTE PTR ds:0xc0028ce0,cl
c00106d3:	0f b6 d2             	movzx  edx,dl
c00106d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00106da:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00106de:	88 82 00 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd7300],al
c00106e4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00106e9:	e9 c6 02 00 00       	jmp    c00109b4 <scanMADT()+0x4b8>
c00106ee:	66 90                	xchg   ax,ax
c00106f0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00106f5:	0f 85 15 01 00 00    	jne    c0010810 <scanMADT()+0x314>
c00106fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106ff:	8d 50 01             	lea    edx,[eax+0x1]
c0010702:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010706:	8a 15 a0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028ba0
c001070c:	0f b6 d2             	movzx  edx,dl
c001070f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010713:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010717:	88 82 c0 8b 02 c0    	mov    BYTE PTR [edx-0x3ffd7440],al
c001071d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0010721:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010725:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010729:	01 d0                	add    eax,edx
c001072b:	83 c0 2c             	add    eax,0x2c
c001072e:	8a 00                	mov    al,BYTE PTR [eax]
c0010730:	0f b6 d0             	movzx  edx,al
c0010733:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010737:	8d 48 01             	lea    ecx,[eax+0x1]
c001073a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001073e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010742:	0f b6 c0             	movzx  eax,al
c0010745:	c1 e0 08             	shl    eax,0x8
c0010748:	89 d1                	mov    ecx,edx
c001074a:	09 c1                	or     ecx,eax
c001074c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010750:	8d 50 02             	lea    edx,[eax+0x2]
c0010753:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010757:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001075b:	0f b6 c0             	movzx  eax,al
c001075e:	c1 e0 10             	shl    eax,0x10
c0010761:	09 c1                	or     ecx,eax
c0010763:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010767:	8d 50 03             	lea    edx,[eax+0x3]
c001076a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001076e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010772:	0f b6 c0             	movzx  eax,al
c0010775:	c1 e0 18             	shl    eax,0x18
c0010778:	09 c1                	or     ecx,eax
c001077a:	89 ca                	mov    edx,ecx
c001077c:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c0010781:	0f b6 c0             	movzx  eax,al
c0010784:	89 14 85 e0 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7420],edx
c001078b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010790:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010794:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010798:	01 d0                	add    eax,edx
c001079a:	83 c0 2c             	add    eax,0x2c
c001079d:	8a 00                	mov    al,BYTE PTR [eax]
c001079f:	0f b6 d0             	movzx  edx,al
c00107a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00107a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107ad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00107b1:	0f b6 c0             	movzx  eax,al
c00107b4:	c1 e0 08             	shl    eax,0x8
c00107b7:	89 d1                	mov    ecx,edx
c00107b9:	09 c1                	or     ecx,eax
c00107bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107bf:	8d 50 02             	lea    edx,[eax+0x2]
c00107c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00107ca:	0f b6 c0             	movzx  eax,al
c00107cd:	c1 e0 10             	shl    eax,0x10
c00107d0:	09 c1                	or     ecx,eax
c00107d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107d6:	8d 50 03             	lea    edx,[eax+0x3]
c00107d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00107dd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00107e1:	0f b6 c0             	movzx  eax,al
c00107e4:	c1 e0 18             	shl    eax,0x18
c00107e7:	09 c1                	or     ecx,eax
c00107e9:	89 ca                	mov    edx,ecx
c00107eb:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c00107f0:	0f b6 c0             	movzx  eax,al
c00107f3:	89 14 85 60 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73a0],edx
c00107fa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00107ff:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c0010804:	40                   	inc    eax
c0010805:	a2 a0 8b 02 c0       	mov    ds:0xc0028ba0,al
c001080a:	e9 a5 01 00 00       	jmp    c00109b4 <scanMADT()+0x4b8>
c001080f:	90                   	nop
c0010810:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0010815:	0f 85 e9 00 00 00    	jne    c0010904 <scanMADT()+0x408>
c001081b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001081f:	8d 50 01             	lea    edx,[eax+0x1]
c0010822:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010826:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001082a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001082e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0010832:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010836:	8d 50 01             	lea    edx,[eax+0x1]
c0010839:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001083d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010841:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010845:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0010849:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001084d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010851:	01 d0                	add    eax,edx
c0010853:	83 c0 2c             	add    eax,0x2c
c0010856:	8a 00                	mov    al,BYTE PTR [eax]
c0010858:	0f b6 d0             	movzx  edx,al
c001085b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001085f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010862:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010866:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001086a:	0f b6 c0             	movzx  eax,al
c001086d:	c1 e0 08             	shl    eax,0x8
c0010870:	89 d1                	mov    ecx,edx
c0010872:	09 c1                	or     ecx,eax
c0010874:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010878:	8d 50 02             	lea    edx,[eax+0x2]
c001087b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001087f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010883:	0f b6 c0             	movzx  eax,al
c0010886:	c1 e0 10             	shl    eax,0x10
c0010889:	09 c1                	or     ecx,eax
c001088b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001088f:	8d 50 03             	lea    edx,[eax+0x3]
c0010892:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010896:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001089a:	0f b6 c0             	movzx  eax,al
c001089d:	c1 e0 18             	shl    eax,0x18
c00108a0:	09 c8                	or     eax,ecx
c00108a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00108a6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00108ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108b3:	01 d0                	add    eax,edx
c00108b5:	83 c0 2c             	add    eax,0x2c
c00108b8:	8a 00                	mov    al,BYTE PTR [eax]
c00108ba:	0f b6 c0             	movzx  eax,al
c00108bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00108c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00108c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00108c8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00108cc:	0f b6 d2             	movzx  edx,dl
c00108cf:	c1 e2 08             	shl    edx,0x8
c00108d2:	09 d0                	or     eax,edx
c00108d4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00108d9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00108de:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00108e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00108e7:	88 90 e0 59 02 c0    	mov    BYTE PTR [eax-0x3ffda620],dl
c00108ed:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00108f2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00108f7:	66 89 84 12 80 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7480],ax
c00108ff:	e9 b0 00 00 00       	jmp    c00109b4 <scanMADT()+0x4b8>
c0010904:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0010909:	0f 85 99 00 00 00    	jne    c00109a8 <scanMADT()+0x4ac>
c001090f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010913:	8d 50 01             	lea    edx,[eax+0x1]
c0010916:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001091a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001091e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010922:	0f b6 c0             	movzx  eax,al
c0010925:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010929:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001092d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010931:	01 d0                	add    eax,edx
c0010933:	83 c0 2c             	add    eax,0x2c
c0010936:	8a 00                	mov    al,BYTE PTR [eax]
c0010938:	0f b6 d0             	movzx  edx,al
c001093b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001093f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010942:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010946:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001094a:	0f b6 c0             	movzx  eax,al
c001094d:	c1 e0 08             	shl    eax,0x8
c0010950:	09 d0                	or     eax,edx
c0010952:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010956:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001095b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001095f:	8d 50 01             	lea    edx,[eax+0x1]
c0010962:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010966:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001096a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001096e:	0f b6 c0             	movzx  eax,al
c0010971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010979:	c1 e0 08             	shl    eax,0x8
c001097c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010980:	89 c1                	mov    ecx,eax
c0010982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010986:	c1 e0 18             	shl    eax,0x18
c0010989:	89 c3                	mov    ebx,eax
c001098b:	a1 f0 8a 02 c0       	mov    eax,ds:0xc0028af0
c0010990:	8d 50 01             	lea    edx,[eax+0x1]
c0010993:	89 15 f0 8a 02 c0    	mov    DWORD PTR ds:0xc0028af0,edx
c0010999:	09 d9                	or     ecx,ebx
c001099b:	89 ca                	mov    edx,ecx
c001099d:	89 14 85 00 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7500],edx
c00109a4:	eb 0e                	jmp    c00109b4 <scanMADT()+0x4b8>
c00109a6:	66 90                	xchg   ax,ax
c00109a8:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00109ad:	75 05                	jne    c00109b4 <scanMADT()+0x4b8>
c00109af:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00109b4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00109b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109bd:	01 d0                	add    eax,edx
c00109bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00109c3:	e9 68 fc ff ff       	jmp    c0010630 <scanMADT()+0x134>
c00109c8:	90                   	nop
c00109c9:	eb 05                	jmp    c00109d0 <scanMADT()+0x4d4>
c00109cb:	90                   	nop
c00109cc:	90                   	nop
c00109cd:	8d 76 00             	lea    esi,[esi+0x0]
c00109d0:	83 c4 38             	add    esp,0x38
c00109d3:	5b                   	pop    ebx
c00109d4:	c3                   	ret    
c00109d5:	90                   	nop
c00109d6:	66 90                	xchg   ax,ax

c00109d8 <ACPI::ACPI()>:
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109df:	83 ec 08             	sub    esp,0x8
c00109e2:	68 67 3b 02 c0       	push   0xc0023b67
c00109e7:	50                   	push   eax
c00109e8:	e8 79 d3 ff ff       	call   c000dd66 <Device::Device(char const*)>
c00109ed:	83 c4 10             	add    esp,0x10
c00109f0:	ba f0 3c 02 c0       	mov    edx,0xc0023cf0
c00109f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f9:	89 10                	mov    DWORD PTR [eax],edx
c00109fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0010a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a0a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a18:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0010a22:	83 ec 0c             	sub    esp,0xc
c0010a25:	68 6c 3b 02 c0       	push   0xc0023b6c
c0010a2a:	e8 c2 8d ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	e8 c5 fa ff ff       	call   c00104fc <scanMADT()>
c0010a37:	90                   	nop
c0010a38:	83 c4 0c             	add    esp,0xc
c0010a3b:	c3                   	ret    

c0010a3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0010a3c:	83 ec 2c             	sub    esp,0x2c
c0010a3f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010a43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010a47:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010a4b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0010a4f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010a54:	88 d0                	mov    al,dl
c0010a56:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010a5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a5f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010a67:	90                   	nop
c0010a68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010a6c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010a72:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0010a76:	0f 8d 9c 00 00 00    	jge    c0010b18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0010a7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010a80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a84:	83 c2 2a             	add    edx,0x2a
c0010a87:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0010a8b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0010a90:	75 7a                	jne    c0010b0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0010a92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010a96:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a9a:	83 c2 2a             	add    edx,0x2a
c0010a9d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0010aa1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0010aa5:	75 65                	jne    c0010b0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0010aa7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0010aac:	74 3a                	je     c0010ae8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0010aae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010ab2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ab6:	83 c2 2a             	add    edx,0x2a
c0010ab9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0010abd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ac1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ac4:	39 c2                	cmp    edx,eax
c0010ac6:	74 10                	je     c0010ad8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	68 c0 39 02 c0       	push   0xc00239c0
c0010ad0:	e8 7a 1f 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	68 7a 3b 02 c0       	push   0xc0023b7a
c0010ae0:	e8 6a 1f 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0010ae5:	83 c4 10             	add    esp,0x10
c0010ae8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0010aec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010af0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010af4:	83 c2 2a             	add    edx,0x2a
c0010af7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0010afb:	8b 02                	mov    eax,DWORD PTR [edx]
c0010afd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010b00:	89 01                	mov    DWORD PTR [ecx],eax
c0010b02:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0010b05:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b0a:	66 90                	xchg   ax,ax
c0010b0c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0010b10:	e9 53 ff ff ff       	jmp    c0010a68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0010b15:	8d 76 00             	lea    esi,[esi+0x0]
c0010b18:	90                   	nop
c0010b19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b1d:	83 c4 2c             	add    esp,0x2c
c0010b20:	c2 04 00             	ret    0x4
c0010b23:	90                   	nop

c0010b24 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0010b24:	83 ec 1c             	sub    esp,0x1c
c0010b27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b2b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010b2f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010b33:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0010b38:	88 c8                	mov    al,cl
c0010b3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0010b3e:	88 d0                	mov    al,dl
c0010b40:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b48:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b52:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010b55:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0010b59:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0010b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010b67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b6b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0010b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b72:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0010b77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b7b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010b81:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0010b85:	8d 48 01             	lea    ecx,[eax+0x1]
c0010b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b8c:	83 c2 2a             	add    edx,0x2a
c0010b8f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0010b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b97:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ba1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010ba4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ba8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0010bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bb0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010bb6:	8d 50 01             	lea    edx,[eax+0x1]
c0010bb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bbd:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0010bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bc7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010bcd:	3d 00 02 00 00       	cmp    eax,0x200
c0010bd2:	75 10                	jne    c0010be4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	68 89 3b 02 c0       	push   0xc0023b89
c0010bdc:	e8 6e 1e 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0010be1:	83 c4 10             	add    esp,0x10
c0010be4:	90                   	nop
c0010be5:	83 c4 1c             	add    esp,0x1c
c0010be8:	c3                   	ret    
c0010be9:	90                   	nop
c0010bea:	66 90                	xchg   ax,ax

c0010bec <ACPI::setScreenBrightnessLevel(void*, int)>:
c0010bec:	b8 00 00 00 00       	mov    eax,0x0
c0010bf1:	c3                   	ret    
c0010bf2:	66 90                	xchg   ax,ax

c0010bf4 <ACPI::detectPCI()>:
c0010bf4:	53                   	push   ebx
c0010bf5:	83 ec 68             	sub    esp,0x68
c0010bf8:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0010bfd:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0010c02:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0010c07:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010c0d:	83 e0 04             	and    eax,0x4
c0010c10:	84 c0                	test   al,al
c0010c12:	74 2c                	je     c0010c40 <ACPI::detectPCI()+0x4c>
c0010c14:	a1 e8 8a 02 c0       	mov    eax,ds:0xc0028ae8
c0010c19:	83 ec 08             	sub    esp,0x8
c0010c1c:	68 a6 3b 02 c0       	push   0xc0023ba6
c0010c21:	50                   	push   eax
c0010c22:	e8 5d f8 ff ff       	call   c0010484 <findDataTable(unsigned char*, char*)>
c0010c27:	83 c4 10             	add    esp,0x10
c0010c2a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0010c2e:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0010c33:	74 0b                	je     c0010c40 <ACPI::detectPCI()+0x4c>
c0010c35:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010c3a:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010c3f:	90                   	nop
c0010c40:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0010c48:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010c4c:	8a 00                	mov    al,BYTE PTR [eax]
c0010c4e:	3c 01                	cmp    al,0x1
c0010c50:	75 0e                	jne    c0010c60 <ACPI::detectPCI()+0x6c>
c0010c52:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010c57:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010c5c:	eb 2a                	jmp    c0010c88 <ACPI::detectPCI()+0x94>
c0010c5e:	66 90                	xchg   ax,ax
c0010c60:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010c64:	8a 00                	mov    al,BYTE PTR [eax]
c0010c66:	3c 02                	cmp    al,0x2
c0010c68:	75 1e                	jne    c0010c88 <ACPI::detectPCI()+0x94>
c0010c6a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010c6f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010c74:	74 12                	je     c0010c88 <ACPI::detectPCI()+0x94>
c0010c76:	83 ec 0c             	sub    esp,0xc
c0010c79:	68 f0 39 02 c0       	push   0xc00239f0
c0010c7e:	e8 cc 1d 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	66 90                	xchg   ax,ax
c0010c88:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0010c8c:	83 f0 01             	xor    eax,0x1
c0010c8f:	84 c0                	test   al,al
c0010c91:	74 41                	je     c0010cd4 <ACPI::detectPCI()+0xe0>
c0010c93:	e8 b8 f4 fe ff       	call   c0000150 <manualPCIProbe>
c0010c98:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0010c9c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0010ca1:	75 0d                	jne    c0010cb0 <ACPI::detectPCI()+0xbc>
c0010ca3:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010ca8:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0010cad:	eb 25                	jmp    c0010cd4 <ACPI::detectPCI()+0xe0>
c0010caf:	90                   	nop
c0010cb0:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0010cb5:	75 1d                	jne    c0010cd4 <ACPI::detectPCI()+0xe0>
c0010cb7:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0010cbc:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010cc1:	74 11                	je     c0010cd4 <ACPI::detectPCI()+0xe0>
c0010cc3:	83 ec 0c             	sub    esp,0xc
c0010cc6:	68 f0 39 02 c0       	push   0xc00239f0
c0010ccb:	e8 7f 1d 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0010cd0:	83 c4 10             	add    esp,0x10
c0010cd3:	90                   	nop
c0010cd4:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0010cd9:	0f 84 49 03 00 00    	je     c0011028 <ACPI::detectPCI()+0x434>
c0010cdf:	83 ec 0c             	sub    esp,0xc
c0010ce2:	68 ab 3b 02 c0       	push   0xc0023bab
c0010ce7:	e8 05 8b ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010cf4:	0f 84 8e 00 00 00    	je     c0010d88 <ACPI::detectPCI()+0x194>
c0010cfa:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010cff:	25 00 08 00 00       	and    eax,0x800
c0010d04:	0f 84 16 01 00 00    	je     c0010e20 <ACPI::detectPCI()+0x22c>
c0010d0a:	83 ec 0c             	sub    esp,0xc
c0010d0d:	68 18 3a 02 c0       	push   0xc0023a18
c0010d12:	e8 da 8a ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010d17:	83 c4 10             	add    esp,0x10
c0010d1a:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010d1f:	25 80 00 00 00       	and    eax,0x80
c0010d24:	0f 85 f6 00 00 00    	jne    c0010e20 <ACPI::detectPCI()+0x22c>
c0010d2a:	66 90                	xchg   ax,ax
c0010d2c:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0010d33:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0010d38:	89 c2                	mov    edx,eax
c0010d3a:	ec                   	in     al,dx
c0010d3b:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0010d3f:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0010d43:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0010d47:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0010d4c:	74 0a                	je     c0010d58 <ACPI::detectPCI()+0x164>
c0010d4e:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0010d53:	74 03                	je     c0010d58 <ACPI::detectPCI()+0x164>
c0010d55:	eb d5                	jmp    c0010d2c <ACPI::detectPCI()+0x138>
c0010d57:	90                   	nop
c0010d58:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0010d5f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0010d64:	89 c2                	mov    edx,eax
c0010d66:	ec                   	in     al,dx
c0010d67:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0010d6b:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0010d6f:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0010d73:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0010d78:	74 de                	je     c0010d58 <ACPI::detectPCI()+0x164>
c0010d7a:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0010d7f:	0f 85 93 00 00 00    	jne    c0010e18 <ACPI::detectPCI()+0x224>
c0010d85:	eb d1                	jmp    c0010d58 <ACPI::detectPCI()+0x164>
c0010d87:	90                   	nop
c0010d88:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0010d8c:	83 f0 01             	xor    eax,0x1
c0010d8f:	84 c0                	test   al,al
c0010d91:	0f 84 89 00 00 00    	je     c0010e20 <ACPI::detectPCI()+0x22c>
c0010d97:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010d9c:	25 00 08 00 00       	and    eax,0x800
c0010da1:	74 7d                	je     c0010e20 <ACPI::detectPCI()+0x22c>
c0010da3:	83 ec 0c             	sub    esp,0xc
c0010da6:	68 3c 3a 02 c0       	push   0xc0023a3c
c0010dab:	e8 41 8a ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010db0:	83 c4 10             	add    esp,0x10
c0010db3:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010db8:	25 80 00 00 00       	and    eax,0x80
c0010dbd:	75 61                	jne    c0010e20 <ACPI::detectPCI()+0x22c>
c0010dbf:	90                   	nop
c0010dc0:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0010dc7:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0010dcc:	89 c2                	mov    edx,eax
c0010dce:	ec                   	in     al,dx
c0010dcf:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0010dd3:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0010dd7:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0010ddb:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0010de0:	74 0a                	je     c0010dec <ACPI::detectPCI()+0x1f8>
c0010de2:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0010de7:	74 03                	je     c0010dec <ACPI::detectPCI()+0x1f8>
c0010de9:	eb d5                	jmp    c0010dc0 <ACPI::detectPCI()+0x1cc>
c0010deb:	90                   	nop
c0010dec:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0010df3:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0010df8:	89 c2                	mov    edx,eax
c0010dfa:	ec                   	in     al,dx
c0010dfb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0010dff:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0010e03:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0010e07:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0010e0c:	74 de                	je     c0010dec <ACPI::detectPCI()+0x1f8>
c0010e0e:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0010e13:	75 07                	jne    c0010e1c <ACPI::detectPCI()+0x228>
c0010e15:	eb d5                	jmp    c0010dec <ACPI::detectPCI()+0x1f8>
c0010e17:	90                   	nop
c0010e18:	90                   	nop
c0010e19:	eb 05                	jmp    c0010e20 <ACPI::detectPCI()+0x22c>
c0010e1b:	90                   	nop
c0010e1c:	90                   	nop
c0010e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010e20:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0010e28:	83 ec 0c             	sub    esp,0xc
c0010e2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010e2f:	e8 63 89 ff ff       	call   c0009797 <malloc>
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	89 c3                	mov    ebx,eax
c0010e39:	83 ec 0c             	sub    esp,0xc
c0010e3c:	53                   	push   ebx
c0010e3d:	e8 74 ba 00 00       	call   c001c8b6 <PCI::PCI()>
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0010e49:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010e4e:	25 00 08 00 00       	and    eax,0x800
c0010e53:	74 7b                	je     c0010ed0 <ACPI::detectPCI()+0x2dc>
c0010e55:	83 ec 0c             	sub    esp,0xc
c0010e58:	68 c3 3b 02 c0       	push   0xc0023bc3
c0010e5d:	e8 8f 89 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010e6a:	25 80 00 00 00       	and    eax,0x80
c0010e6f:	75 5f                	jne    c0010ed0 <ACPI::detectPCI()+0x2dc>
c0010e71:	8d 76 00             	lea    esi,[esi+0x0]
c0010e74:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0010e7b:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0010e80:	89 c2                	mov    edx,eax
c0010e82:	ec                   	in     al,dx
c0010e83:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0010e87:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0010e8b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0010e8f:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0010e94:	74 0a                	je     c0010ea0 <ACPI::detectPCI()+0x2ac>
c0010e96:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0010e9b:	74 03                	je     c0010ea0 <ACPI::detectPCI()+0x2ac>
c0010e9d:	eb d5                	jmp    c0010e74 <ACPI::detectPCI()+0x280>
c0010e9f:	90                   	nop
c0010ea0:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0010ea7:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0010eac:	89 c2                	mov    edx,eax
c0010eae:	ec                   	in     al,dx
c0010eaf:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0010eb3:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0010eb7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0010ebb:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0010ec0:	74 de                	je     c0010ea0 <ACPI::detectPCI()+0x2ac>
c0010ec2:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0010ec7:	75 03                	jne    c0010ecc <ACPI::detectPCI()+0x2d8>
c0010ec9:	eb d5                	jmp    c0010ea0 <ACPI::detectPCI()+0x2ac>
c0010ecb:	90                   	nop
c0010ecc:	90                   	nop
c0010ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ed0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010ed4:	83 ec 08             	sub    esp,0x8
c0010ed7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010edb:	50                   	push   eax
c0010edc:	e8 81 cc ff ff       	call   c000db62 <Device::addChild(Device*)>
c0010ee1:	83 c4 10             	add    esp,0x10
c0010ee4:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010ee9:	25 00 08 00 00       	and    eax,0x800
c0010eee:	74 78                	je     c0010f68 <ACPI::detectPCI()+0x374>
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	68 c9 3b 02 c0       	push   0xc0023bc9
c0010ef8:	e8 f4 88 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010efd:	83 c4 10             	add    esp,0x10
c0010f00:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010f05:	25 80 00 00 00       	and    eax,0x80
c0010f0a:	75 5c                	jne    c0010f68 <ACPI::detectPCI()+0x374>
c0010f0c:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0010f13:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0010f18:	89 c2                	mov    edx,eax
c0010f1a:	ec                   	in     al,dx
c0010f1b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0010f1f:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0010f23:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0010f27:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0010f2c:	74 0a                	je     c0010f38 <ACPI::detectPCI()+0x344>
c0010f2e:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0010f33:	74 03                	je     c0010f38 <ACPI::detectPCI()+0x344>
c0010f35:	eb d5                	jmp    c0010f0c <ACPI::detectPCI()+0x318>
c0010f37:	90                   	nop
c0010f38:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0010f3f:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0010f44:	89 c2                	mov    edx,eax
c0010f46:	ec                   	in     al,dx
c0010f47:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0010f4b:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0010f4f:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0010f53:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0010f58:	74 de                	je     c0010f38 <ACPI::detectPCI()+0x344>
c0010f5a:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0010f5f:	75 03                	jne    c0010f64 <ACPI::detectPCI()+0x370>
c0010f61:	eb d5                	jmp    c0010f38 <ACPI::detectPCI()+0x344>
c0010f63:	90                   	nop
c0010f64:	90                   	nop
c0010f65:	8d 76 00             	lea    esi,[esi+0x0]
c0010f68:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f6e:	83 c0 08             	add    eax,0x8
c0010f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f73:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0010f78:	74 0a                	je     c0010f84 <ACPI::detectPCI()+0x390>
c0010f7a:	ba 01 00 00 00       	mov    edx,0x1
c0010f7f:	eb 0b                	jmp    c0010f8c <ACPI::detectPCI()+0x398>
c0010f81:	8d 76 00             	lea    esi,[esi+0x0]
c0010f84:	ba 02 00 00 00       	mov    edx,0x2
c0010f89:	8d 76 00             	lea    esi,[esi+0x0]
c0010f8c:	6a 00                	push   0x0
c0010f8e:	6a 00                	push   0x0
c0010f90:	52                   	push   edx
c0010f91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010f95:	ff d0                	call   eax
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010f9f:	25 00 08 00 00       	and    eax,0x800
c0010fa4:	0f 84 26 01 00 00    	je     c00110d0 <ACPI::detectPCI()+0x4dc>
c0010faa:	83 ec 0c             	sub    esp,0xc
c0010fad:	68 cf 3b 02 c0       	push   0xc0023bcf
c0010fb2:	e8 3a 88 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0010fb7:	83 c4 10             	add    esp,0x10
c0010fba:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0010fbf:	25 80 00 00 00       	and    eax,0x80
c0010fc4:	0f 85 06 01 00 00    	jne    c00110d0 <ACPI::detectPCI()+0x4dc>
c0010fca:	66 90                	xchg   ax,ax
c0010fcc:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0010fd3:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0010fd8:	89 c2                	mov    edx,eax
c0010fda:	ec                   	in     al,dx
c0010fdb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0010fdf:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0010fe3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0010fe7:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0010fec:	74 0a                	je     c0010ff8 <ACPI::detectPCI()+0x404>
c0010fee:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0010ff3:	74 03                	je     c0010ff8 <ACPI::detectPCI()+0x404>
c0010ff5:	eb d5                	jmp    c0010fcc <ACPI::detectPCI()+0x3d8>
c0010ff7:	90                   	nop
c0010ff8:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0010fff:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0011004:	89 c2                	mov    edx,eax
c0011006:	ec                   	in     al,dx
c0011007:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001100b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001100f:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0011013:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0011018:	74 de                	je     c0010ff8 <ACPI::detectPCI()+0x404>
c001101a:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001101f:	0f 85 a7 00 00 00    	jne    c00110cc <ACPI::detectPCI()+0x4d8>
c0011025:	eb d1                	jmp    c0010ff8 <ACPI::detectPCI()+0x404>
c0011027:	90                   	nop
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	68 d5 3b 02 c0       	push   0xc0023bd5
c0011030:	e8 b0 b6 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0011035:	83 c4 10             	add    esp,0x10
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	68 e0 3b 02 c0       	push   0xc0023be0
c0011040:	e8 ac 87 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0011050:	83 ec 0c             	sub    esp,0xc
c0011053:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011057:	e8 3b 87 ff ff       	call   c0009797 <malloc>
c001105c:	83 c4 10             	add    esp,0x10
c001105f:	89 c3                	mov    ebx,eax
c0011061:	83 ec 0c             	sub    esp,0xc
c0011064:	53                   	push   ebx
c0011065:	e8 b6 c9 00 00       	call   c001da20 <IDE::IDE()>
c001106a:	83 c4 10             	add    esp,0x10
c001106d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011071:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011075:	83 ec 08             	sub    esp,0x8
c0011078:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001107c:	50                   	push   eax
c001107d:	e8 e0 ca ff ff       	call   c000db62 <Device::addChild(Device*)>
c0011082:	83 c4 10             	add    esp,0x10
c0011085:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011089:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0011093:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011097:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00110a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110a4:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00110ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00110b3:	83 c0 08             	add    eax,0x8
c00110b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00110b8:	6a 00                	push   0x0
c00110ba:	6a 00                	push   0x0
c00110bc:	6a 00                	push   0x0
c00110be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00110c2:	ff d0                	call   eax
c00110c4:	83 c4 10             	add    esp,0x10
c00110c7:	eb 07                	jmp    c00110d0 <ACPI::detectPCI()+0x4dc>
c00110c9:	8d 76 00             	lea    esi,[esi+0x0]
c00110cc:	90                   	nop
c00110cd:	8d 76 00             	lea    esi,[esi+0x0]
c00110d0:	90                   	nop
c00110d1:	83 c4 68             	add    esp,0x68
c00110d4:	5b                   	pop    ebx
c00110d5:	c3                   	ret    
c00110d6:	66 90                	xchg   ax,ax

c00110d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00110d8:	83 ec 1c             	sub    esp,0x1c
c00110db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00110df:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00110e2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00110e6:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c00110eb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00110f0:	83 ec 08             	sub    esp,0x8
c00110f3:	52                   	push   edx
c00110f4:	50                   	push   eax
c00110f5:	e8 08 7d ff ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011101:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0011106:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001110b:	83 ec 04             	sub    esp,0x4
c001110e:	6a 01                	push   0x1
c0011110:	52                   	push   edx
c0011111:	50                   	push   eax
c0011112:	e8 09 7e ff ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0011117:	83 c4 10             	add    esp,0x10
c001111a:	90                   	nop
c001111b:	83 c4 1c             	add    esp,0x1c
c001111e:	c3                   	ret    
c001111f:	90                   	nop

c0011120 <ACPI::sleep()>:
c0011120:	83 ec 0c             	sub    esp,0xc
c0011123:	83 ec 0c             	sub    esp,0xc
c0011126:	68 f5 3b 02 c0       	push   0xc0023bf5
c001112b:	e8 b5 b5 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0011130:	83 c4 10             	add    esp,0x10
c0011133:	a1 c0 88 02 c0       	mov    eax,ds:0xc00288c0
c0011138:	85 c0                	test   eax,eax
c001113a:	74 18                	je     c0011154 <ACPI::sleep()+0x34>
c001113c:	83 ec 0c             	sub    esp,0xc
c001113f:	68 02 3c 02 c0       	push   0xc0023c02
c0011144:	e8 9c b5 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	a1 c0 88 02 c0       	mov    eax,ds:0xc00288c0
c0011151:	ff d0                	call   eax
c0011153:	90                   	nop
c0011154:	90                   	nop
c0011155:	83 c4 0c             	add    esp,0xc
c0011158:	c3                   	ret    
c0011159:	90                   	nop
c001115a:	66 90                	xchg   ax,ax

c001115c <ACPI::open(int, int, void*)>:
c001115c:	57                   	push   edi
c001115d:	56                   	push   esi
c001115e:	53                   	push   ebx
c001115f:	81 ec 70 01 00 00    	sub    esp,0x170
c0011165:	83 ec 0c             	sub    esp,0xc
c0011168:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001116f:	e8 80 fa ff ff       	call   c0010bf4 <ACPI::detectPCI()>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	83 ec 0c             	sub    esp,0xc
c001117a:	68 60 3a 02 c0       	push   0xc0023a60
c001117f:	e8 6d 86 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	83 ec 0c             	sub    esp,0xc
c001118a:	68 1c 3c 02 c0       	push   0xc0023c1c
c001118f:	e8 98 39 00 00       	call   c0014b2c <Thr::loadKernelSymbolTable(char const*)>
c0011194:	83 c4 10             	add    esp,0x10
c0011197:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001119f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00111aa:	83 ec 0c             	sub    esp,0xc
c00111ad:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00111b4:	e8 de 85 ff ff       	call   c0009797 <malloc>
c00111b9:	83 c4 10             	add    esp,0x10
c00111bc:	89 c3                	mov    ebx,eax
c00111be:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00111c3:	83 ec 04             	sub    esp,0x4
c00111c6:	50                   	push   eax
c00111c7:	68 3a 3c 02 c0       	push   0xc0023c3a
c00111cc:	53                   	push   ebx
c00111cd:	e8 7e ba ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00111dc:	83 ec 08             	sub    esp,0x8
c00111df:	6a 01                	push   0x1
c00111e1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00111e8:	e8 3d bb ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c00111ed:	83 c4 10             	add    esp,0x10
c00111f0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00111f7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00111ff:	75 17                	jne    c0011218 <ACPI::open(int, int, void*)+0xbc>
c0011201:	83 ec 0c             	sub    esp,0xc
c0011204:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001120b:	e8 78 bb ff ff       	call   c000cd88 <File::close()>
c0011210:	83 c4 10             	add    esp,0x10
c0011213:	eb 0b                	jmp    c0011220 <ACPI::open(int, int, void*)+0xc4>
c0011215:	8d 76 00             	lea    esi,[esi+0x0]
c0011218:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0011220:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0011228:	74 1e                	je     c0011248 <ACPI::open(int, int, void*)+0xec>
c001122a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0011231:	8b 00                	mov    eax,DWORD PTR [eax]
c0011233:	83 c0 08             	add    eax,0x8
c0011236:	8b 00                	mov    eax,DWORD PTR [eax]
c0011238:	83 ec 0c             	sub    esp,0xc
c001123b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011242:	ff d0                	call   eax
c0011244:	83 c4 10             	add    esp,0x10
c0011247:	90                   	nop
c0011248:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001124f:	83 f0 01             	xor    eax,0x1
c0011252:	84 c0                	test   al,al
c0011254:	74 42                	je     c0011298 <ACPI::open(int, int, void*)+0x13c>
c0011256:	83 ec 0c             	sub    esp,0xc
c0011259:	68 58 3c 02 c0       	push   0xc0023c58
c001125e:	e8 8e 85 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0011263:	83 c4 10             	add    esp,0x10
c0011266:	83 ec 04             	sub    esp,0x4
c0011269:	6a 0c                	push   0xc
c001126b:	68 73 3c 02 c0       	push   0xc0023c73
c0011270:	68 84 3c 02 c0       	push   0xc0023c84
c0011275:	e8 4d 20 00 00       	call   c00132c7 <Reg::readIntWithDefault(char*, char*, int)>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0011284:	83 ec 0c             	sub    esp,0xc
c0011287:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001128e:	e8 00 a3 ff ff       	call   c000b593 <Virt::setupPageSwapping(int)>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	66 90                	xchg   ax,ax
c0011298:	83 ec 0c             	sub    esp,0xc
c001129b:	68 46 28 02 c0       	push   0xc0022846
c00112a0:	e8 4c 85 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00112a5:	83 c4 10             	add    esp,0x10
c00112a8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00112af:	83 ec 08             	sub    esp,0x8
c00112b2:	6a 12                	push   0x12
c00112b4:	50                   	push   eax
c00112b5:	e8 2c cc ff ff       	call   c000dee6 <getDevicesOfType(DeviceType)>
c00112ba:	83 c4 0c             	add    esp,0xc
c00112bd:	8d 76 00             	lea    esi,[esi+0x0]
c00112c0:	83 ec 0c             	sub    esp,0xc
c00112c3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00112ca:	50                   	push   eax
c00112cb:	e8 4c 09 01 00       	call   c0021c1c <LinkedList<Device>::isEmpty()>
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	83 f0 01             	xor    eax,0x1
c00112d6:	84 c0                	test   al,al
c00112d8:	0f 84 46 01 00 00    	je     c0011424 <ACPI::open(int, int, void*)+0x2c8>
c00112de:	83 ec 0c             	sub    esp,0xc
c00112e1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00112e8:	50                   	push   eax
c00112e9:	e8 4a 09 01 00       	call   c0021c38 <LinkedList<Device>::getFirstElement()>
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011302:	50                   	push   eax
c0011303:	e8 38 09 01 00       	call   c0021c40 <LinkedList<Device>::removeFirst()>
c0011308:	83 c4 10             	add    esp,0x10
c001130b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0011312:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0011319:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0011320:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011324:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001132a:	ba 09 00 00 00       	mov    edx,0x9
c001132f:	fc                   	cld    
c0011330:	89 c7                	mov    edi,eax
c0011332:	89 de                	mov    esi,ebx
c0011334:	89 d1                	mov    ecx,edx
c0011336:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011338:	83 ec 08             	sub    esp,0x8
c001133b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001133f:	50                   	push   eax
c0011340:	83 ec 24             	sub    esp,0x24
c0011343:	89 e0                	mov    eax,esp
c0011345:	89 c3                	mov    ebx,eax
c0011347:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001134b:	ba 09 00 00 00       	mov    edx,0x9
c0011350:	89 df                	mov    edi,ebx
c0011352:	89 c6                	mov    esi,eax
c0011354:	89 d1                	mov    ecx,edx
c0011356:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011358:	e8 37 ba 00 00       	call   c001cd94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001135d:	83 c4 30             	add    esp,0x30
c0011360:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0011367:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001136f:	0f 84 4b ff ff ff    	je     c00112c0 <ACPI::open(int, int, void*)+0x164>
c0011375:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0011380:	83 ec 0c             	sub    esp,0xc
c0011383:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001138a:	e8 08 84 ff ff       	call   c0009797 <malloc>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	89 c3                	mov    ebx,eax
c0011394:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0011399:	83 ec 04             	sub    esp,0x4
c001139c:	50                   	push   eax
c001139d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00113a4:	53                   	push   ebx
c00113a5:	e8 a6 b8 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c00113aa:	83 c4 10             	add    esp,0x10
c00113ad:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00113b4:	83 ec 0c             	sub    esp,0xc
c00113b7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00113be:	e8 d5 bb ff ff       	call   c000cf98 <File::exists()>
c00113c3:	83 c4 10             	add    esp,0x10
c00113c6:	84 c0                	test   al,al
c00113c8:	74 2a                	je     c00113f4 <ACPI::open(int, int, void*)+0x298>
c00113ca:	83 ec 08             	sub    esp,0x8
c00113cd:	6a 01                	push   0x1
c00113cf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00113d6:	e8 c8 41 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	83 ec 08             	sub    esp,0x8
c00113e1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00113e8:	50                   	push   eax
c00113e9:	e8 e6 43 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c00113ee:	83 c4 10             	add    esp,0x10
c00113f1:	8d 76 00             	lea    esi,[esi+0x0]
c00113f4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00113fc:	0f 84 be fe ff ff    	je     c00112c0 <ACPI::open(int, int, void*)+0x164>
c0011402:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0011409:	8b 00                	mov    eax,DWORD PTR [eax]
c001140b:	83 c0 08             	add    eax,0x8
c001140e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001141a:	ff d0                	call   eax
c001141c:	83 c4 10             	add    esp,0x10
c001141f:	e9 9c fe ff ff       	jmp    c00112c0 <ACPI::open(int, int, void*)+0x164>
c0011424:	83 ec 0c             	sub    esp,0xc
c0011427:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001142e:	50                   	push   eax
c001142f:	e8 e4 07 01 00       	call   c0021c18 <LinkedList<Device>::~LinkedList()>
c0011434:	83 c4 10             	add    esp,0x10
c0011437:	8b 1d c8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c8
c001143d:	83 ec 08             	sub    esp,0x8
c0011440:	6a 01                	push   0x1
c0011442:	68 8b 3c 02 c0       	push   0xc0023c8b
c0011447:	e8 57 41 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c001144c:	83 c4 10             	add    esp,0x10
c001144f:	83 ec 08             	sub    esp,0x8
c0011452:	53                   	push   ebx
c0011453:	50                   	push   eax
c0011454:	e8 7b 43 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c0011459:	83 c4 10             	add    esp,0x10
c001145c:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0011461:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011467:	83 e0 04             	and    eax,0x4
c001146a:	84 c0                	test   al,al
c001146c:	0f 84 16 01 00 00    	je     c0011588 <ACPI::open(int, int, void*)+0x42c>
c0011472:	83 ec 0c             	sub    esp,0xc
c0011475:	68 a8 3c 02 c0       	push   0xc0023ca8
c001147a:	e8 72 83 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0011497:	e8 fb 82 ff ff       	call   c0009797 <malloc>
c001149c:	83 c4 10             	add    esp,0x10
c001149f:	89 c3                	mov    ebx,eax
c00114a1:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00114a6:	83 ec 04             	sub    esp,0x4
c00114a9:	50                   	push   eax
c00114aa:	68 c5 3c 02 c0       	push   0xc0023cc5
c00114af:	53                   	push   ebx
c00114b0:	e8 9b b7 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c00114b5:	83 c4 10             	add    esp,0x10
c00114b8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00114bf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00114c7:	74 1b                	je     c00114e4 <ACPI::open(int, int, void*)+0x388>
c00114c9:	83 ec 0c             	sub    esp,0xc
c00114cc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00114d3:	e8 c0 ba ff ff       	call   c000cf98 <File::exists()>
c00114d8:	83 c4 10             	add    esp,0x10
c00114db:	84 c0                	test   al,al
c00114dd:	74 05                	je     c00114e4 <ACPI::open(int, int, void*)+0x388>
c00114df:	b0 01                	mov    al,0x1
c00114e1:	eb 05                	jmp    c00114e8 <ACPI::open(int, int, void*)+0x38c>
c00114e3:	90                   	nop
c00114e4:	b0 00                	mov    al,0x0
c00114e6:	66 90                	xchg   ax,ax
c00114e8:	84 c0                	test   al,al
c00114ea:	74 28                	je     c0011514 <ACPI::open(int, int, void*)+0x3b8>
c00114ec:	83 ec 08             	sub    esp,0x8
c00114ef:	6a 01                	push   0x1
c00114f1:	68 c5 3c 02 c0       	push   0xc0023cc5
c00114f6:	e8 a8 40 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	83 ec 08             	sub    esp,0x8
c0011501:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0011508:	50                   	push   eax
c0011509:	e8 c6 42 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c001150e:	83 c4 10             	add    esp,0x10
c0011511:	8d 76 00             	lea    esi,[esi+0x0]
c0011514:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001151c:	74 2a                	je     c0011548 <ACPI::open(int, int, void*)+0x3ec>
c001151e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011526:	74 20                	je     c0011548 <ACPI::open(int, int, void*)+0x3ec>
c0011528:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001152f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011531:	83 c0 08             	add    eax,0x8
c0011534:	8b 00                	mov    eax,DWORD PTR [eax]
c0011536:	83 ec 0c             	sub    esp,0xc
c0011539:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011540:	ff d0                	call   eax
c0011542:	83 c4 10             	add    esp,0x10
c0011545:	8d 76 00             	lea    esi,[esi+0x0]
c0011548:	a1 e8 8a 02 c0       	mov    eax,ds:0xc0028ae8
c001154d:	83 ec 08             	sub    esp,0x8
c0011550:	68 e2 3c 02 c0       	push   0xc0023ce2
c0011555:	50                   	push   eax
c0011556:	e8 29 ef ff ff       	call   c0010484 <findDataTable(unsigned char*, char*)>
c001155b:	83 c4 10             	add    esp,0x10
c001155e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0011565:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001156d:	74 19                	je     c0011588 <ACPI::open(int, int, void*)+0x42c>
c001156f:	83 ec 08             	sub    esp,0x8
c0011572:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011579:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011580:	e8 53 fb ff ff       	call   c00110d8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0011585:	83 c4 10             	add    esp,0x10
c0011588:	b8 00 00 00 00       	mov    eax,0x0
c001158d:	81 c4 70 01 00 00    	add    esp,0x170
c0011593:	5b                   	pop    ebx
c0011594:	5e                   	pop    esi
c0011595:	5f                   	pop    edi
c0011596:	c3                   	ret    
c0011597:	90                   	nop

c0011598 <CPU::close(int, int, void*)>:
c0011598:	31 c0                	xor    eax,eax
c001159a:	c3                   	ret    
c001159b:	90                   	nop

c001159c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001159c:	60                   	pusha  
c001159d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00115a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115a9:	9c                   	pushf  
c00115aa:	fa                   	cli    
c00115ab:	0f 09                	wbinvd 
c00115ad:	0f 30                	wrmsr  
c00115af:	9d                   	popf   
c00115b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115b4:	89 02                	mov    DWORD PTR [edx],eax
c00115b6:	61                   	popa   
c00115b7:	c3                   	ret    

c00115b8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00115b8:	60                   	pusha  
c00115b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00115bd:	9c                   	pushf  
c00115be:	fa                   	cli    
c00115bf:	0f 09                	wbinvd 
c00115c1:	31 c0                	xor    eax,eax
c00115c3:	31 d2                	xor    edx,edx
c00115c5:	0f 32                	rdmsr  
c00115c7:	9d                   	popf   
c00115c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00115cc:	89 02                	mov    DWORD PTR [edx],eax
c00115ce:	61                   	popa   
c00115cf:	c3                   	ret    

c00115d0 <CPU::AMD_K6_writeback(int, int, int)>:
c00115d0:	56                   	push   esi
c00115d1:	53                   	push   ebx
c00115d2:	83 ec 10             	sub    esp,0x10
c00115d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115d9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00115de:	75 5d                	jne    c001163d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00115e0:	83 f8 08             	cmp    eax,0x8
c00115e3:	75 09                	jne    c00115ee <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00115e5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00115ea:	7e 13                	jle    c00115ff <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00115ec:	eb 30                	jmp    c001161e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00115ee:	83 f8 06             	cmp    eax,0x6
c00115f1:	7c 4a                	jl     c001163d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00115f3:	83 f8 07             	cmp    eax,0x7
c00115f6:	7e 07                	jle    c00115ff <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00115f8:	83 f8 09             	cmp    eax,0x9
c00115fb:	74 21                	je     c001161e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00115fd:	eb 3e                	jmp    c001163d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00115ff:	89 e6                	mov    esi,esp
c0011601:	8b 1d ec 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262ec
c0011607:	56                   	push   esi
c0011608:	c1 eb 15             	shr    ebx,0x15
c001160b:	68 82 00 00 c0       	push   0xc0000082
c0011610:	83 e3 7e             	and    ebx,0x7e
c0011613:	e8 a0 ff ff ff       	call   c00115b8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011618:	56                   	push   esi
c0011619:	6a 00                	push   0x0
c001161b:	53                   	push   ebx
c001161c:	eb 12                	jmp    c0011630 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001161e:	89 e3                	mov    ebx,esp
c0011620:	53                   	push   ebx
c0011621:	68 82 00 00 c0       	push   0xc0000082
c0011626:	e8 8d ff ff ff       	call   c00115b8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001162b:	53                   	push   ebx
c001162c:	6a 00                	push   0x0
c001162e:	6a 00                	push   0x0
c0011630:	68 82 00 00 c0       	push   0xc0000082
c0011635:	e8 62 ff ff ff       	call   c001159c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001163a:	83 c4 18             	add    esp,0x18
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	5b                   	pop    ebx
c0011641:	5e                   	pop    esi
c0011642:	c3                   	ret    
c0011643:	90                   	nop

c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0011644:	55                   	push   ebp
c0011645:	57                   	push   edi
c0011646:	56                   	push   esi
c0011647:	53                   	push   ebx
c0011648:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001164c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011650:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011654:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0011658:	39 05 f0 59 02 c0    	cmp    DWORD PTR ds:0xc00259f0,eax
c001165e:	75 23                	jne    c0011683 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0011660:	a1 4c 8d 02 c0       	mov    eax,ds:0xc0028d4c
c0011665:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011669:	89 06                	mov    DWORD PTR [esi],eax
c001166b:	a1 48 8d 02 c0       	mov    eax,ds:0xc0028d48
c0011670:	89 07                	mov    DWORD PTR [edi],eax
c0011672:	a1 44 8d 02 c0       	mov    eax,ds:0xc0028d44
c0011677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001167a:	a1 40 8d 02 c0       	mov    eax,ds:0xc0028d40
c001167f:	89 02                	mov    DWORD PTR [edx],eax
c0011681:	eb 3f                	jmp    c00116c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0011683:	31 c9                	xor    ecx,ecx
c0011685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011689:	0f a2                	cpuid  
c001168b:	89 06                	mov    DWORD PTR [esi],eax
c001168d:	89 1f                	mov    DWORD PTR [edi],ebx
c001168f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011693:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0011696:	89 10                	mov    DWORD PTR [eax],edx
c0011698:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001169c:	a3 f0 59 02 c0       	mov    ds:0xc00259f0,eax
c00116a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00116a3:	a3 4c 8d 02 c0       	mov    ds:0xc0028d4c,eax
c00116a8:	8b 07                	mov    eax,DWORD PTR [edi]
c00116aa:	a3 48 8d 02 c0       	mov    ds:0xc0028d48,eax
c00116af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116b2:	a3 44 8d 02 c0       	mov    ds:0xc0028d44,eax
c00116b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00116bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00116bd:	a3 40 8d 02 c0       	mov    ds:0xc0028d40,eax
c00116c2:	5b                   	pop    ebx
c00116c3:	5e                   	pop    esi
c00116c4:	5f                   	pop    edi
c00116c5:	5d                   	pop    ebp
c00116c6:	c3                   	ret    
c00116c7:	90                   	nop

c00116c8 <CPU::cpuidCheckEDX(unsigned int)>:
c00116c8:	83 ec 10             	sub    esp,0x10
c00116cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00116cf:	50                   	push   eax
c00116d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00116d4:	50                   	push   eax
c00116d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00116d9:	50                   	push   eax
c00116da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00116de:	50                   	push   eax
c00116df:	6a 01                	push   0x1
c00116e1:	e8 5e ff ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00116e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116ea:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00116ee:	0f 95 c0             	setne  al
c00116f1:	83 c4 24             	add    esp,0x24
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <CPU::cpuidCheckECX(unsigned int)>:
c00116f6:	83 ec 10             	sub    esp,0x10
c00116f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00116fd:	50                   	push   eax
c00116fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011702:	50                   	push   eax
c0011703:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011707:	50                   	push   eax
c0011708:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001170c:	50                   	push   eax
c001170d:	6a 01                	push   0x1
c001170f:	e8 30 ff ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011714:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011718:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001171c:	0f 95 c0             	setne  al
c001171f:	83 c4 24             	add    esp,0x24
c0011722:	c3                   	ret    
c0011723:	90                   	nop

c0011724 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0011724:	83 ec 10             	sub    esp,0x10
c0011727:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001172b:	50                   	push   eax
c001172c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011730:	50                   	push   eax
c0011731:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011735:	50                   	push   eax
c0011736:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001173a:	50                   	push   eax
c001173b:	6a 07                	push   0x7
c001173d:	e8 02 ff ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011742:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011746:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001174a:	0f 95 c0             	setne  al
c001174d:	83 c4 24             	add    esp,0x24
c0011750:	c3                   	ret    
c0011751:	90                   	nop

c0011752 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0011752:	83 ec 10             	sub    esp,0x10
c0011755:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011759:	50                   	push   eax
c001175a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001175e:	50                   	push   eax
c001175f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011763:	50                   	push   eax
c0011764:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011768:	50                   	push   eax
c0011769:	6a 07                	push   0x7
c001176b:	e8 d4 fe ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011770:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011774:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0011778:	0f 95 c0             	setne  al
c001177b:	83 c4 24             	add    esp,0x24
c001177e:	c3                   	ret    
c001177f:	90                   	nop

c0011780 <CPU::CPU()>:
c0011780:	83 ec 0c             	sub    esp,0xc
c0011783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011787:	83 ec 08             	sub    esp,0x8
c001178a:	68 05 3e 02 c0       	push   0xc0023e05
c001178f:	50                   	push   eax
c0011790:	e8 d1 c5 ff ff       	call   c000dd66 <Device::Device(char const*)>
c0011795:	83 c4 10             	add    esp,0x10
c0011798:	ba dc 3e 02 c0       	mov    edx,0xc0023edc
c001179d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a1:	89 10                	mov    DWORD PTR [eax],edx
c00117a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00117b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b5:	05 78 01 00 00       	add    eax,0x178
c00117ba:	83 ec 0c             	sub    esp,0xc
c00117bd:	50                   	push   eax
c00117be:	e8 47 78 ff ff       	call   c000900a <GDT::GDT()>
c00117c3:	83 c4 10             	add    esp,0x10
c00117c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ca:	05 7c 09 00 00       	add    eax,0x97c
c00117cf:	83 ec 0c             	sub    esp,0xc
c00117d2:	50                   	push   eax
c00117d3:	e8 ac 7a ff ff       	call   c0009284 <IDT::IDT()>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117df:	05 7c 11 00 00       	add    eax,0x117c
c00117e4:	83 ec 0c             	sub    esp,0xc
c00117e7:	50                   	push   eax
c00117e8:	e8 df 94 ff ff       	call   c000accc <TSS::TSS()>
c00117ed:	83 c4 10             	add    esp,0x10
c00117f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00117fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ff:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0011809:	90                   	nop
c001180a:	83 c4 0c             	add    esp,0xc
c001180d:	c3                   	ret    

c001180e <CPU::displayFeatures()>:
c001180e:	c3                   	ret    
c001180f:	90                   	nop

c0011810 <CPU::detectFeatures()>:
c0011810:	55                   	push   ebp
c0011811:	57                   	push   edi
c0011812:	56                   	push   esi
c0011813:	53                   	push   ebx
c0011814:	83 ec 30             	sub    esp,0x30
c0011817:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001181b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0011825:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001182c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0011832:	6a 0d                	push   0xd
c0011834:	6a 00                	push   0x0
c0011836:	55                   	push   ebp
c0011837:	e8 6c ec fe ff       	call   c00004a8 <memset>
c001183c:	83 c4 10             	add    esp,0x10
c001183f:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0011844:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001184b:	0f 84 e8 05 00 00    	je     c0011e39 <CPU::detectFeatures()+0x629>
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	89 ef                	mov    edi,ebp
c0011856:	6a 10                	push   0x10
c0011858:	e8 6b fe ff ff       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c001185d:	83 e0 01             	and    eax,0x1
c0011860:	8d 14 00             	lea    edx,[eax+eax*1]
c0011863:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011869:	83 e0 fd             	and    eax,0xfffffffd
c001186c:	09 d0                	or     eax,edx
c001186e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011874:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001187b:	e8 48 fe ff ff       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c0011880:	83 e0 01             	and    eax,0x1
c0011883:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001188a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011890:	83 e0 fb             	and    eax,0xfffffffb
c0011893:	09 d0                	or     eax,edx
c0011895:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001189b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00118a2:	e8 21 fe ff ff       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c00118a7:	83 e0 01             	and    eax,0x1
c00118aa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00118b1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00118b7:	83 e0 f7             	and    eax,0xfffffff7
c00118ba:	09 d0                	or     eax,edx
c00118bc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00118c2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00118c9:	e8 fa fd ff ff       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c00118ce:	83 e0 01             	and    eax,0x1
c00118d1:	c1 e0 04             	shl    eax,0x4
c00118d4:	88 c2                	mov    dl,al
c00118d6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00118dc:	83 e0 ef             	and    eax,0xffffffef
c00118df:	09 d0                	or     eax,edx
c00118e1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00118e7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00118ee:	e8 d5 fd ff ff       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c00118f3:	83 e0 01             	and    eax,0x1
c00118f6:	c1 e0 05             	shl    eax,0x5
c00118f9:	88 c2                	mov    dl,al
c00118fb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011901:	83 e0 df             	and    eax,0xffffffdf
c0011904:	09 d0                	or     eax,edx
c0011906:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001190c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0011913:	e8 b0 fd ff ff       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c0011918:	83 e0 01             	and    eax,0x1
c001191b:	8d 14 00             	lea    edx,[eax+eax*1]
c001191e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011924:	83 e0 fd             	and    eax,0xfffffffd
c0011927:	09 d0                	or     eax,edx
c0011929:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001192f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0011936:	e8 8d fd ff ff       	call   c00116c8 <CPU::cpuidCheckEDX(unsigned int)>
c001193b:	83 e0 01             	and    eax,0x1
c001193e:	c1 e0 06             	shl    eax,0x6
c0011941:	88 c2                	mov    dl,al
c0011943:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011949:	83 e0 bf             	and    eax,0xffffffbf
c001194c:	09 d0                	or     eax,edx
c001194e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011954:	58                   	pop    eax
c0011955:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011959:	50                   	push   eax
c001195a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001195e:	50                   	push   eax
c001195f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0011963:	56                   	push   esi
c0011964:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011968:	50                   	push   eax
c0011969:	6a 00                	push   0x0
c001196b:	e8 d4 fc ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011970:	b8 04 00 00 00       	mov    eax,0x4
c0011975:	89 c1                	mov    ecx,eax
c0011977:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011979:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001197f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011983:	89 c1                	mov    ecx,eax
c0011985:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011987:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001198d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0011991:	89 c1                	mov    ecx,eax
c0011993:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011995:	83 c4 18             	add    esp,0x18
c0011998:	68 14 3d 02 c0       	push   0xc0023d14
c001199d:	55                   	push   ebp
c001199e:	e8 4d ec fe ff       	call   c00005f0 <strcmp>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	85 c0                	test   eax,eax
c00119a8:	75 0f                	jne    c00119b9 <CPU::detectFeatures()+0x1a9>
c00119aa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00119b4:	e9 22 02 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c00119b9:	50                   	push   eax
c00119ba:	50                   	push   eax
c00119bb:	68 21 3d 02 c0       	push   0xc0023d21
c00119c0:	55                   	push   ebp
c00119c1:	e8 2a ec fe ff       	call   c00005f0 <strcmp>
c00119c6:	83 c4 10             	add    esp,0x10
c00119c9:	85 c0                	test   eax,eax
c00119cb:	74 dd                	je     c00119aa <CPU::detectFeatures()+0x19a>
c00119cd:	50                   	push   eax
c00119ce:	50                   	push   eax
c00119cf:	68 2e 3d 02 c0       	push   0xc0023d2e
c00119d4:	55                   	push   ebp
c00119d5:	e8 16 ec fe ff       	call   c00005f0 <strcmp>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	85 c0                	test   eax,eax
c00119df:	74 2a                	je     c0011a0b <CPU::detectFeatures()+0x1fb>
c00119e1:	50                   	push   eax
c00119e2:	50                   	push   eax
c00119e3:	68 3b 3d 02 c0       	push   0xc0023d3b
c00119e8:	55                   	push   ebp
c00119e9:	e8 02 ec fe ff       	call   c00005f0 <strcmp>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	85 c0                	test   eax,eax
c00119f3:	74 16                	je     c0011a0b <CPU::detectFeatures()+0x1fb>
c00119f5:	50                   	push   eax
c00119f6:	50                   	push   eax
c00119f7:	68 48 3d 02 c0       	push   0xc0023d48
c00119fc:	55                   	push   ebp
c00119fd:	e8 ee eb fe ff       	call   c00005f0 <strcmp>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	85 c0                	test   eax,eax
c0011a07:	74 48                	je     c0011a51 <CPU::detectFeatures()+0x241>
c0011a09:	eb 0f                	jmp    c0011a1a <CPU::detectFeatures()+0x20a>
c0011a0b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0011a15:	e9 c1 01 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011a1a:	50                   	push   eax
c0011a1b:	50                   	push   eax
c0011a1c:	68 55 3d 02 c0       	push   0xc0023d55
c0011a21:	55                   	push   ebp
c0011a22:	e8 c9 eb fe ff       	call   c00005f0 <strcmp>
c0011a27:	83 c4 10             	add    esp,0x10
c0011a2a:	85 c0                	test   eax,eax
c0011a2c:	74 23                	je     c0011a51 <CPU::detectFeatures()+0x241>
c0011a2e:	57                   	push   edi
c0011a2f:	57                   	push   edi
c0011a30:	68 62 3d 02 c0       	push   0xc0023d62
c0011a35:	55                   	push   ebp
c0011a36:	e8 b5 eb fe ff       	call   c00005f0 <strcmp>
c0011a3b:	83 c4 10             	add    esp,0x10
c0011a3e:	85 c0                	test   eax,eax
c0011a40:	75 1e                	jne    c0011a60 <CPU::detectFeatures()+0x250>
c0011a42:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011a4c:	e9 8a 01 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011a51:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0011a5b:	e9 7b 01 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011a60:	56                   	push   esi
c0011a61:	56                   	push   esi
c0011a62:	68 6f 3d 02 c0       	push   0xc0023d6f
c0011a67:	55                   	push   ebp
c0011a68:	e8 83 eb fe ff       	call   c00005f0 <strcmp>
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	85 c0                	test   eax,eax
c0011a72:	75 0f                	jne    c0011a83 <CPU::detectFeatures()+0x273>
c0011a74:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0011a7e:	e9 58 01 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011a83:	51                   	push   ecx
c0011a84:	51                   	push   ecx
c0011a85:	68 2e 3d 02 c0       	push   0xc0023d2e
c0011a8a:	55                   	push   ebp
c0011a8b:	e8 60 eb fe ff       	call   c00005f0 <strcmp>
c0011a90:	83 c4 10             	add    esp,0x10
c0011a93:	85 c0                	test   eax,eax
c0011a95:	75 0f                	jne    c0011aa6 <CPU::detectFeatures()+0x296>
c0011a97:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0011aa1:	e9 35 01 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011aa6:	52                   	push   edx
c0011aa7:	52                   	push   edx
c0011aa8:	68 7c 3d 02 c0       	push   0xc0023d7c
c0011aad:	55                   	push   ebp
c0011aae:	e8 3d eb fe ff       	call   c00005f0 <strcmp>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	85 c0                	test   eax,eax
c0011ab8:	75 0f                	jne    c0011ac9 <CPU::detectFeatures()+0x2b9>
c0011aba:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0011ac4:	e9 12 01 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011ac9:	50                   	push   eax
c0011aca:	50                   	push   eax
c0011acb:	68 89 3d 02 c0       	push   0xc0023d89
c0011ad0:	55                   	push   ebp
c0011ad1:	e8 1a eb fe ff       	call   c00005f0 <strcmp>
c0011ad6:	83 c4 10             	add    esp,0x10
c0011ad9:	85 c0                	test   eax,eax
c0011adb:	75 0f                	jne    c0011aec <CPU::detectFeatures()+0x2dc>
c0011add:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0011ae7:	e9 ef 00 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011aec:	50                   	push   eax
c0011aed:	50                   	push   eax
c0011aee:	68 96 3d 02 c0       	push   0xc0023d96
c0011af3:	55                   	push   ebp
c0011af4:	e8 f7 ea fe ff       	call   c00005f0 <strcmp>
c0011af9:	83 c4 10             	add    esp,0x10
c0011afc:	85 c0                	test   eax,eax
c0011afe:	75 0f                	jne    c0011b0f <CPU::detectFeatures()+0x2ff>
c0011b00:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0011b0a:	e9 cc 00 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011b0f:	50                   	push   eax
c0011b10:	50                   	push   eax
c0011b11:	68 a3 3d 02 c0       	push   0xc0023da3
c0011b16:	55                   	push   ebp
c0011b17:	e8 d4 ea fe ff       	call   c00005f0 <strcmp>
c0011b1c:	83 c4 10             	add    esp,0x10
c0011b1f:	85 c0                	test   eax,eax
c0011b21:	75 0f                	jne    c0011b32 <CPU::detectFeatures()+0x322>
c0011b23:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0011b2d:	e9 a9 00 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011b32:	50                   	push   eax
c0011b33:	50                   	push   eax
c0011b34:	68 b0 3d 02 c0       	push   0xc0023db0
c0011b39:	55                   	push   ebp
c0011b3a:	e8 b1 ea fe ff       	call   c00005f0 <strcmp>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	85 c0                	test   eax,eax
c0011b44:	75 0f                	jne    c0011b55 <CPU::detectFeatures()+0x345>
c0011b46:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0011b50:	e9 86 00 00 00       	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011b55:	50                   	push   eax
c0011b56:	50                   	push   eax
c0011b57:	68 bd 3d 02 c0       	push   0xc0023dbd
c0011b5c:	55                   	push   ebp
c0011b5d:	e8 8e ea fe ff       	call   c00005f0 <strcmp>
c0011b62:	83 c4 10             	add    esp,0x10
c0011b65:	85 c0                	test   eax,eax
c0011b67:	75 0c                	jne    c0011b75 <CPU::detectFeatures()+0x365>
c0011b69:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0011b73:	eb 66                	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011b75:	50                   	push   eax
c0011b76:	50                   	push   eax
c0011b77:	68 ca 3d 02 c0       	push   0xc0023dca
c0011b7c:	55                   	push   ebp
c0011b7d:	e8 6e ea fe ff       	call   c00005f0 <strcmp>
c0011b82:	83 c4 10             	add    esp,0x10
c0011b85:	85 c0                	test   eax,eax
c0011b87:	75 0c                	jne    c0011b95 <CPU::detectFeatures()+0x385>
c0011b89:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0011b93:	eb 46                	jmp    c0011bdb <CPU::detectFeatures()+0x3cb>
c0011b95:	57                   	push   edi
c0011b96:	57                   	push   edi
c0011b97:	68 d7 3d 02 c0       	push   0xc0023dd7
c0011b9c:	55                   	push   ebp
c0011b9d:	e8 4e ea fe ff       	call   c00005f0 <strcmp>
c0011ba2:	83 c4 10             	add    esp,0x10
c0011ba5:	85 c0                	test   eax,eax
c0011ba7:	74 e0                	je     c0011b89 <CPU::detectFeatures()+0x379>
c0011ba9:	56                   	push   esi
c0011baa:	56                   	push   esi
c0011bab:	68 e4 3d 02 c0       	push   0xc0023de4
c0011bb0:	55                   	push   ebp
c0011bb1:	e8 3a ea fe ff       	call   c00005f0 <strcmp>
c0011bb6:	83 c4 10             	add    esp,0x10
c0011bb9:	85 c0                	test   eax,eax
c0011bbb:	74 cc                	je     c0011b89 <CPU::detectFeatures()+0x379>
c0011bbd:	51                   	push   ecx
c0011bbe:	51                   	push   ecx
c0011bbf:	68 f1 3d 02 c0       	push   0xc0023df1
c0011bc4:	55                   	push   ebp
c0011bc5:	e8 26 ea fe ff       	call   c00005f0 <strcmp>
c0011bca:	83 c4 10             	add    esp,0x10
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	74 b8                	je     c0011b89 <CPU::detectFeatures()+0x379>
c0011bd1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0011bdb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0011be0:	0f 86 be 00 00 00    	jbe    c0011ca4 <CPU::detectFeatures()+0x494>
c0011be6:	83 ec 0c             	sub    esp,0xc
c0011be9:	68 80 00 00 00       	push   0x80
c0011bee:	e8 31 fb ff ff       	call   c0011724 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011bf3:	83 e0 01             	and    eax,0x1
c0011bf6:	c1 e0 06             	shl    eax,0x6
c0011bf9:	88 c2                	mov    dl,al
c0011bfb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011c01:	83 e0 bf             	and    eax,0xffffffbf
c0011c04:	09 d0                	or     eax,edx
c0011c06:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011c0c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0011c13:	e8 0c fb ff ff       	call   c0011724 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c18:	83 e0 01             	and    eax,0x1
c0011c1b:	c1 e0 04             	shl    eax,0x4
c0011c1e:	88 c2                	mov    dl,al
c0011c20:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011c26:	83 e0 ef             	and    eax,0xffffffef
c0011c29:	09 d0                	or     eax,edx
c0011c2b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011c31:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0011c38:	e8 e7 fa ff ff       	call   c0011724 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011c3d:	c1 e0 07             	shl    eax,0x7
c0011c40:	88 c2                	mov    dl,al
c0011c42:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011c48:	83 e0 7f             	and    eax,0x7f
c0011c4b:	09 d0                	or     eax,edx
c0011c4d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011c53:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0011c5a:	e8 f3 fa ff ff       	call   c0011752 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011c5f:	83 e0 01             	and    eax,0x1
c0011c62:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0011c69:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011c6f:	83 e0 f7             	and    eax,0xfffffff7
c0011c72:	09 d0                	or     eax,edx
c0011c74:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011c7a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011c81:	e8 cc fa ff ff       	call   c0011752 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011c86:	83 c4 10             	add    esp,0x10
c0011c89:	83 e0 01             	and    eax,0x1
c0011c8c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0011c93:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011c99:	83 e0 fb             	and    eax,0xfffffffb
c0011c9c:	09 d0                	or     eax,edx
c0011c9e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011ca4:	83 ec 0c             	sub    esp,0xc
c0011ca7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011cab:	50                   	push   eax
c0011cac:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011cb0:	50                   	push   eax
c0011cb1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0011cb5:	56                   	push   esi
c0011cb6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011cba:	50                   	push   eax
c0011cbb:	6a 01                	push   0x1
c0011cbd:	e8 82 f9 ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011cc2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011cc6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0011ccc:	88 ca                	mov    dl,cl
c0011cce:	83 e0 f0             	and    eax,0xfffffff0
c0011cd1:	83 e2 0f             	and    edx,0xf
c0011cd4:	09 d0                	or     eax,edx
c0011cd6:	88 ca                	mov    dl,cl
c0011cd8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0011cde:	c0 ea 04             	shr    dl,0x4
c0011ce1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0011ce5:	0f b6 c2             	movzx  eax,dl
c0011ce8:	83 c4 20             	add    esp,0x20
c0011ceb:	c1 e0 06             	shl    eax,0x6
c0011cee:	89 c7                	mov    edi,eax
c0011cf0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011cf6:	66 25 3f c0          	and    ax,0xc03f
c0011cfa:	09 f8                	or     eax,edi
c0011cfc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0011d03:	89 c8                	mov    eax,ecx
c0011d05:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0011d0c:	c1 e8 08             	shr    eax,0x8
c0011d0f:	83 e5 3f             	and    ebp,0x3f
c0011d12:	83 e0 0f             	and    eax,0xf
c0011d15:	89 c7                	mov    edi,eax
c0011d17:	c1 e7 06             	shl    edi,0x6
c0011d1a:	09 ef                	or     edi,ebp
c0011d1c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0011d23:	89 fa                	mov    edx,edi
c0011d25:	83 e5 c0             	and    ebp,0xffffffc0
c0011d28:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0011d2e:	88 c2                	mov    dl,al
c0011d30:	c0 ea 02             	shr    dl,0x2
c0011d33:	89 d7                	mov    edi,edx
c0011d35:	09 ef                	or     edi,ebp
c0011d37:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0011d3d:	89 fa                	mov    edx,edi
c0011d3f:	83 e5 cf             	and    ebp,0xffffffcf
c0011d42:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0011d48:	89 cf                	mov    edi,ecx
c0011d4a:	c1 ef 0c             	shr    edi,0xc
c0011d4d:	83 e7 03             	and    edi,0x3
c0011d50:	c1 e7 04             	shl    edi,0x4
c0011d53:	09 ef                	or     edi,ebp
c0011d55:	3c 06                	cmp    al,0x6
c0011d57:	89 fa                	mov    edx,edi
c0011d59:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0011d5f:	74 04                	je     c0011d65 <CPU::detectFeatures()+0x555>
c0011d61:	3c 0f                	cmp    al,0xf
c0011d63:	75 5c                	jne    c0011dc1 <CPU::detectFeatures()+0x5b1>
c0011d65:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d69:	89 cf                	mov    edi,ecx
c0011d6b:	c1 ef 10             	shr    edi,0x10
c0011d6e:	c1 e7 04             	shl    edi,0x4
c0011d71:	09 fa                	or     edx,edi
c0011d73:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0011d79:	0f b6 d2             	movzx  edx,dl
c0011d7c:	66 81 e7 3f c0       	and    di,0xc03f
c0011d81:	c1 e2 06             	shl    edx,0x6
c0011d84:	09 fa                	or     edx,edi
c0011d86:	3c 0f                	cmp    al,0xf
c0011d88:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0011d8f:	75 30                	jne    c0011dc1 <CPU::detectFeatures()+0x5b1>
c0011d91:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0011d97:	c1 e9 14             	shr    ecx,0x14
c0011d9a:	83 e0 3f             	and    eax,0x3f
c0011d9d:	83 c1 0f             	add    ecx,0xf
c0011da0:	88 ca                	mov    dl,cl
c0011da2:	c0 e9 02             	shr    cl,0x2
c0011da5:	c1 e2 06             	shl    edx,0x6
c0011da8:	09 d0                	or     eax,edx
c0011daa:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0011db0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0011db6:	83 e0 c0             	and    eax,0xffffffc0
c0011db9:	09 c1                	or     ecx,eax
c0011dbb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0011dc1:	83 ec 0c             	sub    esp,0xc
c0011dc4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c0011dcb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011dcf:	50                   	push   eax
c0011dd0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0011dd4:	55                   	push   ebp
c0011dd5:	56                   	push   esi
c0011dd6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0011dda:	57                   	push   edi
c0011ddb:	68 00 00 00 80       	push   0x80000000
c0011de0:	e8 5f f8 ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011de5:	83 c4 20             	add    esp,0x20
c0011de8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0011df0:	76 22                	jbe    c0011e14 <CPU::detectFeatures()+0x604>
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011df9:	50                   	push   eax
c0011dfa:	55                   	push   ebp
c0011dfb:	56                   	push   esi
c0011dfc:	57                   	push   edi
c0011dfd:	68 01 00 00 80       	push   0x80000001
c0011e02:	e8 3d f8 ff ff       	call   c0011644 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0011e07:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0011e11:	83 c4 20             	add    esp,0x20
c0011e14:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0011e1a:	8d 50 ff             	lea    edx,[eax-0x1]
c0011e1d:	83 fa 03             	cmp    edx,0x3
c0011e20:	76 7e                	jbe    c0011ea0 <CPU::detectFeatures()+0x690>
c0011e22:	83 f8 06             	cmp    eax,0x6
c0011e25:	74 79                	je     c0011ea0 <CPU::detectFeatures()+0x690>
c0011e27:	52                   	push   edx
c0011e28:	52                   	push   edx
c0011e29:	68 fd 3d 02 c0       	push   0xc0023dfd
c0011e2e:	53                   	push   ebx
c0011e2f:	e8 24 bf ff ff       	call   c000dd58 <Device::setName(char const*)>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	eb 67                	jmp    c0011ea0 <CPU::detectFeatures()+0x690>
c0011e39:	50                   	push   eax
c0011e3a:	50                   	push   eax
c0011e3b:	68 62 3d 02 c0       	push   0xc0023d62
c0011e40:	55                   	push   ebp
c0011e41:	e8 1e e7 fe ff       	call   c0000564 <strcpy>
c0011e46:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011e50:	e8 8e e3 fe ff       	call   c00001e3 <is486>
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	85 c0                	test   eax,eax
c0011e5a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011e60:	74 1d                	je     c0011e7f <CPU::detectFeatures()+0x66f>
c0011e62:	83 c8 07             	or     eax,0x7
c0011e65:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011e6b:	0f 20 c0             	mov    eax,cr0
c0011e6e:	83 e0 14             	and    eax,0x14
c0011e71:	83 f8 04             	cmp    eax,0x4
c0011e74:	75 0e                	jne    c0011e84 <CPU::detectFeatures()+0x674>
c0011e76:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c0011e7d:	eb 21                	jmp    c0011ea0 <CPU::detectFeatures()+0x690>
c0011e7f:	83 e0 f8             	and    eax,0xfffffff8
c0011e82:	eb e1                	jmp    c0011e65 <CPU::detectFeatures()+0x655>
c0011e84:	e8 35 e3 fe ff       	call   c00001be <hasLegacyFPU>
c0011e89:	83 e0 01             	and    eax,0x1
c0011e8c:	8d 14 00             	lea    edx,[eax+eax*1]
c0011e8f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011e95:	83 e0 fd             	and    eax,0xfffffffd
c0011e98:	09 d0                	or     eax,edx
c0011e9a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011ea0:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0011ea7:	74 0e                	je     c0011eb7 <CPU::detectFeatures()+0x6a7>
c0011ea9:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0011eae:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0011eb5:	eb 20                	jmp    c0011ed7 <CPU::detectFeatures()+0x6c7>
c0011eb7:	e8 02 e3 fe ff       	call   c00001be <hasLegacyFPU>
c0011ebc:	83 e0 01             	and    eax,0x1
c0011ebf:	8d 14 00             	lea    edx,[eax+eax*1]
c0011ec2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011ec8:	83 e0 fd             	and    eax,0xfffffffd
c0011ecb:	09 d0                	or     eax,edx
c0011ecd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011ed3:	a8 02                	test   al,0x2
c0011ed5:	75 d2                	jne    c0011ea9 <CPU::detectFeatures()+0x699>
c0011ed7:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0011ede:	83 c4 2c             	add    esp,0x2c
c0011ee1:	5b                   	pop    ebx
c0011ee2:	5e                   	pop    esi
c0011ee3:	5f                   	pop    edi
c0011ee4:	5d                   	pop    ebp
c0011ee5:	c3                   	ret    

c0011ee6 <CPU::setupSMEP()>:
c0011ee6:	0f 20 e0             	mov    eax,cr4
c0011ee9:	0d 00 00 10 00       	or     eax,0x100000
c0011eee:	0f 22 e0             	mov    cr4,eax
c0011ef1:	c3                   	ret    

c0011ef2 <CPU::setupUMIP()>:
c0011ef2:	0f 20 e0             	mov    eax,cr4
c0011ef5:	80 cc 08             	or     ah,0x8
c0011ef8:	0f 22 e0             	mov    cr4,eax
c0011efb:	c3                   	ret    

c0011efc <CPU::setupTSC()>:
c0011efc:	0f 20 e0             	mov    eax,cr4
c0011eff:	83 c8 04             	or     eax,0x4
c0011f02:	0f 22 e0             	mov    cr4,eax
c0011f05:	c3                   	ret    

c0011f06 <CPU::setupLargePages()>:
c0011f06:	0f 20 e0             	mov    eax,cr4
c0011f09:	83 c8 10             	or     eax,0x10
c0011f0c:	0f 22 e0             	mov    cr4,eax
c0011f0f:	c3                   	ret    

c0011f10 <CPU::setupPAT()>:
c0011f10:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0011f15:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0011f1c:	74 2c                	je     c0011f4a <CPU::setupPAT()+0x3a>
c0011f1e:	53                   	push   ebx
c0011f1f:	83 ec 10             	sub    esp,0x10
c0011f22:	68 77 02 00 00       	push   0x277
c0011f27:	50                   	push   eax
c0011f28:	e8 21 6e ff ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c0011f2d:	83 e2 f8             	and    edx,0xfffffff8
c0011f30:	83 ca 01             	or     edx,0x1
c0011f33:	52                   	push   edx
c0011f34:	50                   	push   eax
c0011f35:	68 77 02 00 00       	push   0x277
c0011f3a:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0011f40:	e8 35 6e ff ff       	call   c0008d7a <Computer::wrmsr(unsigned int, unsigned long long)>
c0011f45:	83 c4 28             	add    esp,0x28
c0011f48:	5b                   	pop    ebx
c0011f49:	c3                   	ret    
c0011f4a:	c3                   	ret    
c0011f4b:	90                   	nop

c0011f4c <CPU::setupMTRR()>:
c0011f4c:	c3                   	ret    
c0011f4d:	90                   	nop

c0011f4e <CPU::setupGlobalPages()>:
c0011f4e:	0f 20 e0             	mov    eax,cr4
c0011f51:	0c 80                	or     al,0x80
c0011f53:	0f 22 e0             	mov    cr4,eax
c0011f56:	c3                   	ret    
c0011f57:	90                   	nop

c0011f58 <CPU::allowUsermodeDataAccess()>:
c0011f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f5c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011f63:	74 03                	je     c0011f68 <CPU::allowUsermodeDataAccess()+0x10>
c0011f65:	0f 01 cb             	stac   
c0011f68:	c3                   	ret    
c0011f69:	90                   	nop

c0011f6a <CPU::prohibitUsermodeDataAccess()>:
c0011f6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011f75:	74 03                	je     c0011f7a <CPU::prohibitUsermodeDataAccess()+0x10>
c0011f77:	0f 01 ca             	clac   
c0011f7a:	c3                   	ret    
c0011f7b:	90                   	nop

c0011f7c <CPU::setupSMAP()>:
c0011f7c:	0f 20 e0             	mov    eax,cr4
c0011f7f:	0d 00 00 20 00       	or     eax,0x200000
c0011f84:	0f 22 e0             	mov    cr4,eax
c0011f87:	eb e1                	jmp    c0011f6a <CPU::prohibitUsermodeDataAccess()>
c0011f89:	90                   	nop

c0011f8a <CPU::setupFeatures()>:
c0011f8a:	53                   	push   ebx
c0011f8b:	83 ec 08             	sub    esp,0x8
c0011f8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f92:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0011f99:	74 18                	je     c0011fb3 <CPU::setupFeatures()+0x29>
c0011f9b:	83 ec 0c             	sub    esp,0xc
c0011f9e:	68 09 3e 02 c0       	push   0xc0023e09
c0011fa3:	e8 3d a7 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0011fa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fab:	e8 42 ff ff ff       	call   c0011ef2 <CPU::setupUMIP()>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0011fba:	74 18                	je     c0011fd4 <CPU::setupFeatures()+0x4a>
c0011fbc:	83 ec 0c             	sub    esp,0xc
c0011fbf:	68 13 3e 02 c0       	push   0xc0023e13
c0011fc4:	e8 1c a7 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0011fc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fcc:	e8 2b ff ff ff       	call   c0011efc <CPU::setupTSC()>
c0011fd1:	83 c4 10             	add    esp,0x10
c0011fd4:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0011fdb:	74 18                	je     c0011ff5 <CPU::setupFeatures()+0x6b>
c0011fdd:	83 ec 0c             	sub    esp,0xc
c0011fe0:	68 1c 3e 02 c0       	push   0xc0023e1c
c0011fe5:	e8 fb a6 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0011fea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fed:	e8 14 ff ff ff       	call   c0011f06 <CPU::setupLargePages()>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0011ffc:	74 18                	je     c0012016 <CPU::setupFeatures()+0x8c>
c0011ffe:	83 ec 0c             	sub    esp,0xc
c0012001:	68 25 3e 02 c0       	push   0xc0023e25
c0012006:	e8 da a6 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001200b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001200e:	e8 3b ff ff ff       	call   c0011f4e <CPU::setupGlobalPages()>
c0012013:	83 c4 10             	add    esp,0x10
c0012016:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001201d:	74 18                	je     c0012037 <CPU::setupFeatures()+0xad>
c001201f:	83 ec 0c             	sub    esp,0xc
c0012022:	68 37 3e 02 c0       	push   0xc0023e37
c0012027:	e8 b9 a6 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001202c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001202f:	e8 dc fe ff ff       	call   c0011f10 <CPU::setupPAT()>
c0012034:	83 c4 10             	add    esp,0x10
c0012037:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001203e:	74 11                	je     c0012051 <CPU::setupFeatures()+0xc7>
c0012040:	c7 44 24 10 40 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023e40
c0012048:	83 c4 08             	add    esp,0x8
c001204b:	5b                   	pop    ebx
c001204c:	e9 94 a6 ff ff       	jmp    c000c6e5 <Dbg::kprintf(char const*, ...)>
c0012051:	83 c4 08             	add    esp,0x8
c0012054:	5b                   	pop    ebx
c0012055:	c3                   	ret    

c0012056 <CPU::open(int, int, void*)>:
c0012056:	57                   	push   edi
c0012057:	56                   	push   esi
c0012058:	53                   	push   ebx
c0012059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001205d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012061:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0012067:	83 ec 0c             	sub    esp,0xc
c001206a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0012070:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0012076:	50                   	push   eax
c0012077:	e8 f0 6f ff ff       	call   c000906c <GDT::setup()>
c001207c:	83 c4 0c             	add    esp,0xc
c001207f:	6a 00                	push   0x0
c0012081:	68 ef be ad de       	push   0xdeadbeef
c0012086:	57                   	push   edi
c0012087:	e8 84 8c ff ff       	call   c000ad10 <TSS::setup(unsigned long, unsigned long)>
c001208c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001208f:	e8 5c 8c ff ff       	call   c000acf0 <TSS::flush()>
c0012094:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001209a:	89 04 24             	mov    DWORD PTR [esp],eax
c001209d:	e8 58 72 ff ff       	call   c00092fa <IDT::setup()>
c00120a2:	b8 00 04 00 00       	mov    eax,0x400
c00120a7:	0f 23 f8             	mov    db7,eax
c00120aa:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00120b4:	e8 1d 7b ff ff       	call   c0009bd6 <Phys::allocatePage()>
c00120b9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00120bf:	89 30                	mov    DWORD PTR [eax],esi
c00120c1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00120c7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00120ca:	58                   	pop    eax
c00120cb:	5a                   	pop    edx
c00120cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00120d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00120d6:	e8 f5 9b ff ff       	call   c000bcd0 <VAS::setCPUSpecific(unsigned long)>
c00120db:	c7 04 24 4a 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e4a
c00120e2:	e8 0a 77 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00120e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120ea:	e8 21 f7 ff ff       	call   c0011810 <CPU::detectFeatures()>
c00120ef:	c7 04 24 6d 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e6d
c00120f6:	e8 f6 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00120fb:	e8 f9 72 00 00       	call   c00193f9 <Hal::initialise()>
c0012100:	c7 04 24 81 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e81
c0012107:	e8 e5 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001210c:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0012111:	83 e0 10             	and    eax,0x10
c0012114:	83 f8 01             	cmp    eax,0x1
c0012117:	19 c0                	sbb    eax,eax
c0012119:	83 e0 46             	and    eax,0x46
c001211c:	83 c0 1e             	add    eax,0x1e
c001211f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012122:	e8 1a d3 ff ff       	call   c000f441 <setupTimer(int)>
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0012130:	f6 05 e0 62 02 c0 20 	test   BYTE PTR ds:0xc00262e0,0x20
c0012137:	74 18                	je     c0012151 <CPU::open(int, int, void*)+0xfb>
c0012139:	83 ec 0c             	sub    esp,0xc
c001213c:	68 9c 3e 02 c0       	push   0xc0023e9c
c0012141:	e8 ab 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0012146:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012149:	e8 3c fe ff ff       	call   c0011f8a <CPU::setupFeatures()>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	83 ec 0c             	sub    esp,0xc
c0012154:	68 b7 3e 02 c0       	push   0xc0023eb7
c0012159:	e8 93 76 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001215e:	83 c4 10             	add    esp,0x10
c0012161:	31 c0                	xor    eax,eax
c0012163:	5b                   	pop    ebx
c0012164:	5e                   	pop    esi
c0012165:	5f                   	pop    edi
c0012166:	c3                   	ret    
c0012167:	90                   	nop

c0012168 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0012168:	57                   	push   edi
c0012169:	56                   	push   esi
c001216a:	53                   	push   ebx
c001216b:	51                   	push   ecx
c001216c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012170:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0012173:	0f 02 c0             	lar    eax,ax
c0012176:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0012179:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001217d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0012180:	88 ca                	mov    dl,cl
c0012182:	c0 ea 06             	shr    dl,0x6
c0012185:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0012189:	89 ca                	mov    edx,ecx
c001218b:	66 c1 ea 03          	shr    dx,0x3
c001218f:	83 e2 07             	and    edx,0x7
c0012192:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0012197:	88 17                	mov    BYTE PTR [edi],dl
c0012199:	0f 84 a6 01 00 00    	je     c0012345 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001219f:	83 e1 07             	and    ecx,0x7
c00121a2:	80 f9 04             	cmp    cl,0x4
c00121a5:	0f 84 98 00 00 00    	je     c0012243 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00121ab:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00121b0:	0f 95 c0             	setne  al
c00121b3:	80 f9 05             	cmp    cl,0x5
c00121b6:	0f 95 c2             	setne  dl
c00121b9:	08 c2                	or     dl,al
c00121bb:	74 79                	je     c0012236 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00121bd:	84 c9                	test   cl,cl
c00121bf:	75 05                	jne    c00121c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00121c1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00121c4:	eb 3c                	jmp    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00121c6:	80 f9 01             	cmp    cl,0x1
c00121c9:	75 05                	jne    c00121d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00121cb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00121ce:	eb 32                	jmp    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00121d0:	80 f9 02             	cmp    cl,0x2
c00121d3:	75 05                	jne    c00121da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00121d5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00121d8:	eb 28                	jmp    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00121da:	31 c0                	xor    eax,eax
c00121dc:	80 f9 03             	cmp    cl,0x3
c00121df:	75 05                	jne    c00121e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00121e1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00121e4:	eb 1c                	jmp    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00121e6:	80 f9 05             	cmp    cl,0x5
c00121e9:	75 05                	jne    c00121f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00121eb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00121ee:	eb 12                	jmp    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00121f0:	80 f9 06             	cmp    cl,0x6
c00121f3:	75 05                	jne    c00121fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00121f5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00121f8:	eb 08                	jmp    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00121fa:	80 f9 07             	cmp    cl,0x7
c00121fd:	75 03                	jne    c0012202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00121ff:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012202:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0012207:	75 10                	jne    c0012219 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0012209:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001220d:	b9 03 00 00 00       	mov    ecx,0x3
c0012212:	01 d0                	add    eax,edx
c0012214:	e9 37 01 00 00       	jmp    c0012350 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012219:	b9 02 00 00 00       	mov    ecx,0x2
c001221e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0012223:	0f 85 27 01 00 00    	jne    c0012350 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012229:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001222c:	b9 06 00 00 00       	mov    ecx,0x6
c0012231:	e9 1a 01 00 00       	jmp    c0012350 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012236:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0012239:	b9 06 00 00 00       	mov    ecx,0x6
c001223e:	e9 0f 01 00 00       	jmp    c0012352 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012243:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0012246:	88 ca                	mov    dl,cl
c0012248:	c0 ea 06             	shr    dl,0x6
c001224b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001224f:	89 ca                	mov    edx,ecx
c0012251:	66 c1 ea 03          	shr    dx,0x3
c0012255:	83 e2 07             	and    edx,0x7
c0012258:	80 e1 07             	and    cl,0x7
c001225b:	75 05                	jne    c0012262 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001225d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0012260:	eb 4c                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012262:	80 f9 01             	cmp    cl,0x1
c0012265:	75 05                	jne    c001226c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0012267:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001226a:	eb 42                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001226c:	80 f9 02             	cmp    cl,0x2
c001226f:	75 05                	jne    c0012276 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0012271:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012274:	eb 38                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012276:	80 f9 03             	cmp    cl,0x3
c0012279:	75 05                	jne    c0012280 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001227b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001227e:	eb 2e                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012280:	80 f9 04             	cmp    cl,0x4
c0012283:	75 12                	jne    c0012297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0012285:	f6 c4 60             	test   ah,0x60
c0012288:	75 08                	jne    c0012292 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001228a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001228d:	8d 78 14             	lea    edi,[eax+0x14]
c0012290:	eb 1c                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012292:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0012295:	eb 17                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012297:	80 f9 05             	cmp    cl,0x5
c001229a:	75 05                	jne    c00122a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001229c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001229f:	eb 0d                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122a1:	80 f9 06             	cmp    cl,0x6
c00122a4:	75 05                	jne    c00122ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00122a6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00122a9:	eb 03                	jmp    c00122ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00122ab:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00122ae:	84 d2                	test   dl,dl
c00122b0:	75 05                	jne    c00122b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00122b2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00122b5:	eb 3c                	jmp    c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122b7:	80 fa 01             	cmp    dl,0x1
c00122ba:	75 05                	jne    c00122c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00122bc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00122bf:	eb 32                	jmp    c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122c1:	80 fa 02             	cmp    dl,0x2
c00122c4:	75 05                	jne    c00122cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00122c6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00122c9:	eb 28                	jmp    c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122cb:	80 fa 03             	cmp    dl,0x3
c00122ce:	75 05                	jne    c00122d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00122d0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00122d3:	eb 1e                	jmp    c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122d5:	31 c0                	xor    eax,eax
c00122d7:	80 fa 04             	cmp    dl,0x4
c00122da:	74 17                	je     c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122dc:	80 fa 05             	cmp    dl,0x5
c00122df:	75 05                	jne    c00122e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00122e1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00122e4:	eb 0d                	jmp    c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122e6:	80 fa 06             	cmp    dl,0x6
c00122e9:	75 05                	jne    c00122f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00122eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00122ee:	eb 03                	jmp    c00122f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00122f0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00122f3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00122f8:	0f 94 c2             	sete   dl
c00122fb:	80 f9 05             	cmp    cl,0x5
c00122fe:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0012302:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0012307:	d3 e0                	shl    eax,cl
c0012309:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001230d:	74 0a                	je     c0012319 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001230f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0012312:	b9 07 00 00 00       	mov    ecx,0x7
c0012317:	eb 37                	jmp    c0012350 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012319:	01 f8                	add    eax,edi
c001231b:	b9 03 00 00 00       	mov    ecx,0x3
c0012320:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012325:	74 2b                	je     c0012352 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012327:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001232c:	75 0d                	jne    c001233b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001232e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0012332:	01 c8                	add    eax,ecx
c0012334:	b9 04 00 00 00       	mov    ecx,0x4
c0012339:	eb 17                	jmp    c0012352 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001233b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001233e:	b9 07 00 00 00       	mov    ecx,0x7
c0012343:	eb 0d                	jmp    c0012352 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012345:	b9 02 00 00 00       	mov    ecx,0x2
c001234a:	b2 01                	mov    dl,0x1
c001234c:	31 c0                	xor    eax,eax
c001234e:	eb 02                	jmp    c0012352 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012350:	31 d2                	xor    edx,edx
c0012352:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012356:	89 0b                	mov    DWORD PTR [ebx],ecx
c0012358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001235c:	88 11                	mov    BYTE PTR [ecx],dl
c001235e:	5a                   	pop    edx
c001235f:	5b                   	pop    ebx
c0012360:	5e                   	pop    esi
c0012361:	5f                   	pop    edi
c0012362:	c3                   	ret    

c0012363 <Krnl::smpEntry()>:
c0012363:	eb fe                	jmp    c0012363 <Krnl::smpEntry()>

c0012365 <Krnl::startCPU(int)>:
c0012365:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001236a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0012371:	0f 84 36 01 00 00    	je     c00124ad <Krnl::startCPU(int)+0x148>
c0012377:	53                   	push   ebx
c0012378:	83 ec 10             	sub    esp,0x10
c001237b:	fa                   	cli    
c001237c:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0012382:	6a 1b                	push   0x1b
c0012384:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c001238a:	e8 bf 69 ff ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c001238f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012394:	89 c3                	mov    ebx,eax
c0012396:	58                   	pop    eax
c0012397:	5a                   	pop    edx
c0012398:	53                   	push   ebx
c0012399:	68 00 3f 02 c0       	push   0xc0023f00
c001239e:	e8 42 a3 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00123a3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00123ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123b1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00123bb:	c1 e0 18             	shl    eax,0x18
c00123be:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00123c4:	83 c4 10             	add    esp,0x10
c00123c7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00123cd:	09 c2                	or     edx,eax
c00123cf:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00123d5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00123db:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00123e1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00123e7:	80 cd c5             	or     ch,0xc5
c00123ea:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00123f0:	f3 90                	pause  
c00123f2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00123f4:	0f ba e1 0c          	bt     ecx,0xc
c00123f8:	72 f6                	jb     c00123f0 <Krnl::startCPU(int)+0x8b>
c00123fa:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012400:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012406:	09 c1                	or     ecx,eax
c0012408:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001240e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012414:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001241a:	80 cd 85             	or     ch,0x85
c001241d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0012423:	f3 90                	pause  
c0012425:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012427:	0f ba e1 0c          	bt     ecx,0xc
c001242b:	72 f6                	jb     c0012423 <Krnl::startCPU(int)+0xbe>
c001242d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012437:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001243d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012443:	09 c1                	or     ecx,eax
c0012445:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001244b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012451:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0012457:	81 c9 02 06 00 00    	or     ecx,0x602
c001245d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0012463:	f3 90                	pause  
c0012465:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012467:	0f ba e1 0c          	bt     ecx,0xc
c001246b:	72 f6                	jb     c0012463 <Krnl::startCPU(int)+0xfe>
c001246d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012477:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001247d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012483:	09 c8                	or     eax,ecx
c0012485:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001248b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0012491:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0012496:	0d 02 06 00 00       	or     eax,0x602
c001249b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00124a1:	f3 90                	pause  
c00124a3:	8b 02                	mov    eax,DWORD PTR [edx]
c00124a5:	0f ba e0 0c          	bt     eax,0xc
c00124a9:	72 f6                	jb     c00124a1 <Krnl::startCPU(int)+0x13c>
c00124ab:	eb fe                	jmp    c00124ab <Krnl::startCPU(int)+0x146>
c00124ad:	c3                   	ret    

c00124ae <Krnl::startCPUs()>:
c00124ae:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c00124b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00124b9:	88 c2                	mov    dl,al
c00124bb:	83 e2 0a             	and    edx,0xa
c00124be:	80 fa 0a             	cmp    dl,0xa
c00124c1:	75 09                	jne    c00124cc <Krnl::startCPUs()+0x1e>
c00124c3:	a8 01                	test   al,0x1
c00124c5:	74 05                	je     c00124cc <Krnl::startCPUs()+0x1e>
c00124c7:	e9 cf dc fe ff       	jmp    c000019b <prepareTramp>
c00124cc:	c3                   	ret    
c00124cd:	90                   	nop

c00124ce <EnvVarContainer::getEnv(char const*)>:
c00124ce:	57                   	push   edi
c00124cf:	56                   	push   esi
c00124d0:	53                   	push   ebx
c00124d1:	31 db                	xor    ebx,ebx
c00124d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00124d7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00124d9:	7e 2b                	jle    c0012506 <EnvVarContainer::getEnv(char const*)+0x38>
c00124db:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00124e2:	50                   	push   eax
c00124e3:	50                   	push   eax
c00124e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00124e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00124ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00124ee:	e8 fd e0 fe ff       	call   c00005f0 <strcmp>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	85 c0                	test   eax,eax
c00124f8:	75 09                	jne    c0012503 <EnvVarContainer::getEnv(char const*)+0x35>
c00124fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00124fd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0012501:	eb 05                	jmp    c0012508 <EnvVarContainer::getEnv(char const*)+0x3a>
c0012503:	43                   	inc    ebx
c0012504:	eb d1                	jmp    c00124d7 <EnvVarContainer::getEnv(char const*)+0x9>
c0012506:	31 c0                	xor    eax,eax
c0012508:	5b                   	pop    ebx
c0012509:	5e                   	pop    esi
c001250a:	5f                   	pop    edi
c001250b:	c3                   	ret    

c001250c <EnvVarContainer::setEnv(char const*, char const*)>:
c001250c:	55                   	push   ebp
c001250d:	57                   	push   edi
c001250e:	56                   	push   esi
c001250f:	53                   	push   ebx
c0012510:	83 ec 28             	sub    esp,0x28
c0012513:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012517:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001251b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001251f:	56                   	push   esi
c0012520:	e8 9f df fe ff       	call   c00004c4 <strlen>
c0012525:	40                   	inc    eax
c0012526:	89 04 24             	mov    DWORD PTR [esp],eax
c0012529:	e8 69 72 ff ff       	call   c0009797 <malloc>
c001252e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012531:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012535:	e8 8a df fe ff       	call   c00004c4 <strlen>
c001253a:	40                   	inc    eax
c001253b:	89 04 24             	mov    DWORD PTR [esp],eax
c001253e:	e8 54 72 ff ff       	call   c0009797 <malloc>
c0012543:	89 34 24             	mov    DWORD PTR [esp],esi
c0012546:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001254a:	e8 75 df fe ff       	call   c00004c4 <strlen>
c001254f:	83 c4 0c             	add    esp,0xc
c0012552:	40                   	inc    eax
c0012553:	50                   	push   eax
c0012554:	6a 00                	push   0x0
c0012556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001255a:	e8 49 df fe ff       	call   c00004a8 <memset>
c001255f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012562:	e8 5d df fe ff       	call   c00004c4 <strlen>
c0012567:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001256b:	8d 48 01             	lea    ecx,[eax+0x1]
c001256e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012573:	89 de                	mov    esi,ebx
c0012575:	e8 4a df fe ff       	call   c00004c4 <strlen>
c001257a:	83 c4 0c             	add    esp,0xc
c001257d:	40                   	inc    eax
c001257e:	50                   	push   eax
c001257f:	6a 00                	push   0x0
c0012581:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012585:	e8 1e df fe ff       	call   c00004a8 <memset>
c001258a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001258d:	e8 32 df fe ff       	call   c00004c4 <strlen>
c0012592:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012596:	8d 48 01             	lea    ecx,[eax+0x1]
c0012599:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001259b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001259e:	40                   	inc    eax
c001259f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00125a2:	c1 e0 03             	shl    eax,0x3
c00125a5:	5a                   	pop    edx
c00125a6:	59                   	pop    ecx
c00125a7:	50                   	push   eax
c00125a8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00125ab:	e8 d3 71 ff ff       	call   c0009783 <realloc>
c00125b0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00125b4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00125b7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00125ba:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00125be:	b9 08 00 00 00       	mov    ecx,0x8
c00125c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125c5:	83 c4 2c             	add    esp,0x2c
c00125c8:	5b                   	pop    ebx
c00125c9:	5e                   	pop    esi
c00125ca:	5f                   	pop    edi
c00125cb:	5d                   	pop    ebp
c00125cc:	c3                   	ret    
c00125cd:	90                   	nop

c00125ce <EnvVarContainer::deleteEnv(char const*)>:
c00125ce:	c3                   	ret    
c00125cf:	90                   	nop

c00125d0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00125d0:	55                   	push   ebp
c00125d1:	57                   	push   edi
c00125d2:	56                   	push   esi
c00125d3:	53                   	push   ebx
c00125d4:	81 ec 38 01 00 00    	sub    esp,0x138
c00125da:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00125e1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00125e8:	68 14 01 00 00       	push   0x114
c00125ed:	e8 a5 71 ff ff       	call   c0009797 <malloc>
c00125f2:	83 c4 0c             	add    esp,0xc
c00125f5:	89 c3                	mov    ebx,eax
c00125f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00125fa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012601:	50                   	push   eax
c0012602:	e8 49 a6 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0012607:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001260a:	e8 89 a9 ff ff       	call   c000cf98 <File::exists()>
c001260f:	83 c4 10             	add    esp,0x10
c0012612:	84 c0                	test   al,al
c0012614:	75 31                	jne    c0012647 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0012616:	50                   	push   eax
c0012617:	50                   	push   eax
c0012618:	6a 12                	push   0x12
c001261a:	53                   	push   ebx
c001261b:	e8 0a a7 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c0012620:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012622:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0012625:	89 34 24             	mov    DWORD PTR [esp],esi
c0012628:	e8 97 de fe ff       	call   c00004c4 <strlen>
c001262d:	5a                   	pop    edx
c001262e:	31 d2                	xor    edx,edx
c0012630:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012634:	51                   	push   ecx
c0012635:	56                   	push   esi
c0012636:	52                   	push   edx
c0012637:	50                   	push   eax
c0012638:	53                   	push   ebx
c0012639:	ff d7                	call   edi
c001263b:	83 c4 14             	add    esp,0x14
c001263e:	53                   	push   ebx
c001263f:	e8 44 a7 ff ff       	call   c000cd88 <File::close()>
c0012644:	83 c4 10             	add    esp,0x10
c0012647:	56                   	push   esi
c0012648:	31 f6                	xor    esi,esi
c001264a:	68 00 01 00 00       	push   0x100
c001264f:	6a 00                	push   0x0
c0012651:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0012655:	50                   	push   eax
c0012656:	e8 4d de fe ff       	call   c00004a8 <memset>
c001265b:	5f                   	pop    edi
c001265c:	58                   	pop    eax
c001265d:	6a 01                	push   0x1
c001265f:	53                   	push   ebx
c0012660:	e8 c5 a6 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012675:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012679:	51                   	push   ecx
c001267a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001267e:	52                   	push   edx
c001267f:	6a 00                	push   0x0
c0012681:	6a 01                	push   0x1
c0012683:	53                   	push   ebx
c0012684:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012687:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001268b:	83 c4 20             	add    esp,0x20
c001268e:	3c 0d                	cmp    al,0xd
c0012690:	0f 84 09 01 00 00    	je     c001279f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0012696:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001269b:	0f 84 ef 00 00 00    	je     c0012790 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00126a1:	3c 0a                	cmp    al,0xa
c00126a3:	74 13                	je     c00126b8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00126a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126aa:	74 0c                	je     c00126b8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00126ac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00126b2:	0f 8e d8 00 00 00    	jle    c0012790 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00126b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126bc:	83 ec 0c             	sub    esp,0xc
c00126bf:	8d 78 01             	lea    edi,[eax+0x1]
c00126c2:	57                   	push   edi
c00126c3:	e8 cf 70 ff ff       	call   c0009797 <malloc>
c00126c8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00126cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00126d0:	8d 56 04             	lea    edx,[esi+0x4]
c00126d3:	89 14 24             	mov    DWORD PTR [esp],edx
c00126d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00126da:	e8 b8 70 ff ff       	call   c0009797 <malloc>
c00126df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00126e3:	83 c4 0c             	add    esp,0xc
c00126e6:	57                   	push   edi
c00126e7:	6a 00                	push   0x0
c00126e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126ed:	e8 b6 dd fe ff       	call   c00004a8 <memset>
c00126f2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00126f6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00126fa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012700:	83 c4 0c             	add    esp,0xc
c0012703:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012707:	52                   	push   edx
c0012708:	6a 00                	push   0x0
c001270a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001270e:	e8 95 dd fe ff       	call   c00004a8 <memset>
c0012713:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012717:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001271b:	89 34 24             	mov    DWORD PTR [esp],esi
c001271e:	e8 a1 dd fe ff       	call   c00004c4 <strlen>
c0012723:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012727:	89 c1                	mov    ecx,eax
c0012729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001272b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001272e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0012731:	40                   	inc    eax
c0012732:	83 c4 10             	add    esp,0x10
c0012735:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012738:	85 d2                	test   edx,edx
c001273a:	75 0c                	jne    c0012748 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001273c:	83 ec 0c             	sub    esp,0xc
c001273f:	6a 08                	push   0x8
c0012741:	e8 51 70 ff ff       	call   c0009797 <malloc>
c0012746:	eb 0c                	jmp    c0012754 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0012748:	c1 e0 03             	shl    eax,0x3
c001274b:	51                   	push   ecx
c001274c:	51                   	push   ecx
c001274d:	50                   	push   eax
c001274e:	52                   	push   edx
c001274f:	e8 2f 70 ff ff       	call   c0009783 <realloc>
c0012754:	83 c4 10             	add    esp,0x10
c0012757:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001275a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001275d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0012760:	8d 74 24 18          	lea    esi,[esp+0x18]
c0012764:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0012768:	b9 08 00 00 00       	mov    ecx,0x8
c001276d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001276f:	31 f6                	xor    esi,esi
c0012771:	50                   	push   eax
c0012772:	68 00 01 00 00       	push   0x100
c0012777:	6a 00                	push   0x0
c0012779:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001277d:	50                   	push   eax
c001277e:	e8 25 dd fe ff       	call   c00004a8 <memset>
c0012783:	83 c4 10             	add    esp,0x10
c0012786:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001278e:	eb 0f                	jmp    c001279f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0012790:	3c 3d                	cmp    al,0x3d
c0012792:	74 07                	je     c001279b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0012794:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0012798:	46                   	inc    esi
c0012799:	eb 04                	jmp    c001279f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001279b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001279f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00127a4:	0f 85 c6 fe ff ff    	jne    c0012670 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00127aa:	81 c4 2c 01 00 00    	add    esp,0x12c
c00127b0:	5b                   	pop    ebx
c00127b1:	5e                   	pop    esi
c00127b2:	5f                   	pop    edi
c00127b3:	5d                   	pop    ebp
c00127b4:	c3                   	ret    
c00127b5:	90                   	nop

c00127b6 <EnvVarContainer::__loadSystem()>:
c00127b6:	83 ec 10             	sub    esp,0x10
c00127b9:	68 00 5a 02 c0       	push   0xc0025a00
c00127be:	68 11 3f 02 c0       	push   0xc0023f11
c00127c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127c7:	e8 04 fe ff ff       	call   c00125d0 <EnvVarContainer::loadFrom(char const*, char const*)>
c00127cc:	83 c4 1c             	add    esp,0x1c
c00127cf:	c3                   	ret    

c00127d0 <EnvVarContainer::__loadUser()>:
c00127d0:	c3                   	ret    
c00127d1:	90                   	nop

c00127d2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00127d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00127dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127e4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00127e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127f2:	90                   	nop
c00127f3:	c3                   	ret    

c00127f4 <EnvVarContainer::~EnvVarContainer()>:
c00127f4:	83 ec 0c             	sub    esp,0xc
c00127f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00127fe:	85 c0                	test   eax,eax
c0012800:	74 1d                	je     c001281f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0012802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012806:	8b 00                	mov    eax,DWORD PTR [eax]
c0012808:	85 c0                	test   eax,eax
c001280a:	74 13                	je     c001281f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001280c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012810:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012813:	83 ec 0c             	sub    esp,0xc
c0012816:	50                   	push   eax
c0012817:	e8 8b 6f ff ff       	call   c00097a7 <free>
c001281c:	83 c4 10             	add    esp,0x10
c001281f:	90                   	nop
c0012820:	83 c4 0c             	add    esp,0xc
c0012823:	c3                   	ret    

c0012824 <Krnl::getEnv(Process*, char const*)>:
c0012824:	53                   	push   ebx
c0012825:	83 ec 08             	sub    esp,0x8
c0012828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001282c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012830:	39 05 d0 97 02 c0    	cmp    DWORD PTR ds:0xc00297d0,eax
c0012836:	74 04                	je     c001283c <Krnl::getEnv(Process*, char const*)+0x18>
c0012838:	85 c0                	test   eax,eax
c001283a:	75 0b                	jne    c0012847 <Krnl::getEnv(Process*, char const*)+0x23>
c001283c:	a1 54 8d 02 c0       	mov    eax,ds:0xc0028d54
c0012841:	85 c0                	test   eax,eax
c0012843:	75 19                	jne    c001285e <Krnl::getEnv(Process*, char const*)+0x3a>
c0012845:	eb 27                	jmp    c001286e <Krnl::getEnv(Process*, char const*)+0x4a>
c0012847:	52                   	push   edx
c0012848:	52                   	push   edx
c0012849:	53                   	push   ebx
c001284a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0012850:	e8 79 fc ff ff       	call   c00124ce <EnvVarContainer::getEnv(char const*)>
c0012855:	83 c4 10             	add    esp,0x10
c0012858:	85 c0                	test   eax,eax
c001285a:	75 28                	jne    c0012884 <Krnl::getEnv(Process*, char const*)+0x60>
c001285c:	eb de                	jmp    c001283c <Krnl::getEnv(Process*, char const*)+0x18>
c001285e:	52                   	push   edx
c001285f:	52                   	push   edx
c0012860:	53                   	push   ebx
c0012861:	50                   	push   eax
c0012862:	e8 67 fc ff ff       	call   c00124ce <EnvVarContainer::getEnv(char const*)>
c0012867:	83 c4 10             	add    esp,0x10
c001286a:	85 c0                	test   eax,eax
c001286c:	75 16                	jne    c0012884 <Krnl::getEnv(Process*, char const*)+0x60>
c001286e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0012872:	a1 58 8d 02 c0       	mov    eax,ds:0xc0028d58
c0012877:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001287b:	83 c4 08             	add    esp,0x8
c001287e:	5b                   	pop    ebx
c001287f:	e9 4a fc ff ff       	jmp    c00124ce <EnvVarContainer::getEnv(char const*)>
c0012884:	83 c4 08             	add    esp,0x8
c0012887:	5b                   	pop    ebx
c0012888:	c3                   	ret    

c0012889 <Krnl::setEnvSystem(char const*, char const*)>:
c0012889:	83 ec 10             	sub    esp,0x10
c001288c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012890:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012894:	ff 35 58 8d 02 c0    	push   DWORD PTR ds:0xc0028d58
c001289a:	e8 6d fc ff ff       	call   c001250c <EnvVarContainer::setEnv(char const*, char const*)>
c001289f:	83 c4 1c             	add    esp,0x1c
c00128a2:	c3                   	ret    

c00128a3 <Krnl::setEnvUser(char const*, char const*)>:
c00128a3:	a1 54 8d 02 c0       	mov    eax,ds:0xc0028d54
c00128a8:	85 c0                	test   eax,eax
c00128aa:	74 15                	je     c00128c1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00128ac:	83 ec 10             	sub    esp,0x10
c00128af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128b7:	50                   	push   eax
c00128b8:	e8 4f fc ff ff       	call   c001250c <EnvVarContainer::setEnv(char const*, char const*)>
c00128bd:	83 c4 1c             	add    esp,0x1c
c00128c0:	c3                   	ret    
c00128c1:	c3                   	ret    

c00128c2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00128c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00128cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128d0:	e9 37 fc ff ff       	jmp    c001250c <EnvVarContainer::setEnv(char const*, char const*)>

c00128d5 <Krnl::deleteEnvSystem(char const*)>:
c00128d5:	c3                   	ret    

c00128d6 <Krnl::deleteEnvUser(char const*)>:
c00128d6:	c3                   	ret    

c00128d7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00128d7:	c3                   	ret    

c00128d8 <Krnl::newProcessEnv(Process*)>:
c00128d8:	83 ec 28             	sub    esp,0x28
c00128db:	6a 0c                	push   0xc
c00128dd:	e8 b5 6e ff ff       	call   c0009797 <malloc>
c00128e2:	5a                   	pop    edx
c00128e3:	59                   	pop    ecx
c00128e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00128e8:	50                   	push   eax
c00128e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128ed:	e8 e0 fe ff ff       	call   c00127d2 <EnvVarContainer::EnvVarContainer(Process*)>
c00128f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128f6:	83 c4 2c             	add    esp,0x2c
c00128f9:	c3                   	ret    

c00128fa <Krnl::copyProcessEnv(Process*, Process*)>:
c00128fa:	57                   	push   edi
c00128fb:	56                   	push   esi
c00128fc:	53                   	push   ebx
c00128fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012901:	83 ec 0c             	sub    esp,0xc
c0012904:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001290a:	6a 0c                	push   0xc
c001290c:	e8 86 6e ff ff       	call   c0009797 <malloc>
c0012911:	89 c3                	mov    ebx,eax
c0012913:	58                   	pop    eax
c0012914:	5a                   	pop    edx
c0012915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012919:	53                   	push   ebx
c001291a:	e8 b3 fe ff ff       	call   c00127d2 <EnvVarContainer::EnvVarContainer(Process*)>
c001291f:	8b 07                	mov    eax,DWORD PTR [edi]
c0012921:	89 03                	mov    DWORD PTR [ebx],eax
c0012923:	c1 e0 03             	shl    eax,0x3
c0012926:	89 04 24             	mov    DWORD PTR [esp],eax
c0012929:	e8 69 6e ff ff       	call   c0009797 <malloc>
c001292e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0012931:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0012933:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0012936:	c1 e1 03             	shl    ecx,0x3
c0012939:	89 c7                	mov    edi,eax
c001293b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	89 d8                	mov    eax,ebx
c0012942:	5b                   	pop    ebx
c0012943:	5e                   	pop    esi
c0012944:	5f                   	pop    edi
c0012945:	c3                   	ret    

c0012946 <Krnl::loadSystemEnv()>:
c0012946:	53                   	push   ebx
c0012947:	83 ec 14             	sub    esp,0x14
c001294a:	6a 0c                	push   0xc
c001294c:	e8 46 6e ff ff       	call   c0009797 <malloc>
c0012951:	89 c3                	mov    ebx,eax
c0012953:	58                   	pop    eax
c0012954:	5a                   	pop    edx
c0012955:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c001295b:	53                   	push   ebx
c001295c:	e8 71 fe ff ff       	call   c00127d2 <EnvVarContainer::EnvVarContainer(Process*)>
c0012961:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012964:	89 1d 58 8d 02 c0    	mov    DWORD PTR ds:0xc0028d58,ebx
c001296a:	e8 47 fe ff ff       	call   c00127b6 <EnvVarContainer::__loadSystem()>
c001296f:	83 c4 18             	add    esp,0x18
c0012972:	5b                   	pop    ebx
c0012973:	c3                   	ret    

c0012974 <Krnl::loadUserEnv()>:
c0012974:	53                   	push   ebx
c0012975:	83 ec 14             	sub    esp,0x14
c0012978:	6a 0c                	push   0xc
c001297a:	e8 18 6e ff ff       	call   c0009797 <malloc>
c001297f:	89 c3                	mov    ebx,eax
c0012981:	58                   	pop    eax
c0012982:	5a                   	pop    edx
c0012983:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c0012989:	53                   	push   ebx
c001298a:	e8 43 fe ff ff       	call   c00127d2 <EnvVarContainer::EnvVarContainer(Process*)>
c001298f:	89 1d 54 8d 02 c0    	mov    DWORD PTR ds:0xc0028d54,ebx
c0012995:	83 c4 18             	add    esp,0x18
c0012998:	5b                   	pop    ebx
c0012999:	c3                   	ret    

c001299a <Krnl::flushEnv()>:
c001299a:	c3                   	ret    

c001299b <Krnl::getProcessTotalEnvCount(Process*)>:
c001299b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001299f:	8b 15 54 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d54
c00129a5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00129ab:	a1 58 8d 02 c0       	mov    eax,ds:0xc0028d58
c00129b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00129b2:	03 01                	add    eax,DWORD PTR [ecx]
c00129b4:	85 d2                	test   edx,edx
c00129b6:	74 02                	je     c00129ba <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00129b8:	03 02                	add    eax,DWORD PTR [edx]
c00129ba:	c3                   	ret    

c00129bb <Krnl::getProcessEnvPair(Process*, int)>:
c00129bb:	57                   	push   edi
c00129bc:	56                   	push   esi
c00129bd:	8b 35 54 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d54
c00129c3:	53                   	push   ebx
c00129c4:	85 f6                	test   esi,esi
c00129c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00129ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129ce:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00129d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00129d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129da:	75 16                	jne    c00129f2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00129dc:	39 c2                	cmp    edx,eax
c00129de:	7c 16                	jl     c00129f6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00129e0:	8b 0d 58 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d58
c00129e6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00129e8:	01 c6                	add    esi,eax
c00129ea:	39 d6                	cmp    esi,edx
c00129ec:	7e 3c                	jle    c0012a2a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00129ee:	29 c2                	sub    edx,eax
c00129f0:	eb 04                	jmp    c00129f6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00129f2:	39 c2                	cmp    edx,eax
c00129f4:	7d 05                	jge    c00129fb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00129f6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00129f9:	eb 20                	jmp    c0012a1b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00129fb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00129fd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0012a00:	39 d1                	cmp    ecx,edx
c0012a02:	7e 04                	jle    c0012a08 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0012a04:	29 c2                	sub    edx,eax
c0012a06:	eb 10                	jmp    c0012a18 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0012a08:	8b 35 58 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d58
c0012a0e:	03 0e                	add    ecx,DWORD PTR [esi]
c0012a10:	39 d1                	cmp    ecx,edx
c0012a12:	7e 16                	jle    c0012a2a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0012a14:	29 c2                	sub    edx,eax
c0012a16:	29 fa                	sub    edx,edi
c0012a18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012a1b:	8d 14 d0             	lea    edx,[eax+edx*8]
c0012a1e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a20:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012a23:	89 03                	mov    DWORD PTR [ebx],eax
c0012a25:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0012a28:	eb 1d                	jmp    c0012a47 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0012a2a:	83 ec 0c             	sub    esp,0xc
c0012a2d:	68 33 3f 02 c0       	push   0xc0023f33
c0012a32:	e8 18 00 00 00       	call   c0012a4f <Krnl::panic(char const*)>
c0012a37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0012a3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	89 d8                	mov    eax,ebx
c0012a49:	5b                   	pop    ebx
c0012a4a:	5e                   	pop    esi
c0012a4b:	5f                   	pop    edi
c0012a4c:	c2 04 00             	ret    0x4

c0012a4f <Krnl::panic(char const*)>:
c0012a4f:	53                   	push   ebx
c0012a50:	83 ec 10             	sub    esp,0x10
c0012a53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012a57:	fa                   	cli    
c0012a58:	c6 05 64 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d64,0x1
c0012a5f:	53                   	push   ebx
c0012a60:	68 4d 3f 02 c0       	push   0xc0023f4d
c0012a65:	e8 7b 9c ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0012a6a:	83 c4 0c             	add    esp,0xc
c0012a6d:	6a 01                	push   0x1
c0012a6f:	6a 0f                	push   0xf
c0012a71:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012a77:	e8 34 79 ff ff       	call   c000a3b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012a7c:	59                   	pop    ecx
c0012a7d:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012a83:	e8 2c 7b ff ff       	call   c000a5b4 <VgaText::clearScreen()>
c0012a88:	58                   	pop    eax
c0012a89:	5a                   	pop    edx
c0012a8a:	68 a4 3f 02 c0       	push   0xc0023fa4
c0012a8f:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012a95:	e8 4e 79 ff ff       	call   c000a3e8 <VgaText::setTitle(char*)>
c0012a9a:	83 c4 0c             	add    esp,0xc
c0012a9d:	6a 01                	push   0x1
c0012a9f:	6a 0f                	push   0xf
c0012aa1:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012aa7:	e8 04 79 ff ff       	call   c000a3b0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012aac:	59                   	pop    ecx
c0012aad:	58                   	pop    eax
c0012aae:	68 66 3f 02 c0       	push   0xc0023f66
c0012ab3:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012ab9:	e8 ea 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012abe:	58                   	pop    eax
c0012abf:	5a                   	pop    edx
c0012ac0:	68 f0 3f 02 c0       	push   0xc0023ff0
c0012ac5:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012acb:	e8 d8 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012ad0:	59                   	pop    ecx
c0012ad1:	58                   	pop    eax
c0012ad2:	68 82 3f 02 c0       	push   0xc0023f82
c0012ad7:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012add:	e8 c6 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012ae2:	58                   	pop    eax
c0012ae3:	5a                   	pop    edx
c0012ae4:	53                   	push   ebx
c0012ae5:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012aeb:	e8 b8 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012af0:	59                   	pop    ecx
c0012af1:	5b                   	pop    ebx
c0012af2:	68 a2 3f 02 c0       	push   0xc0023fa2
c0012af7:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012afd:	e8 a6 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b02:	58                   	pop    eax
c0012b03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b07:	e8 46 2a 00 00       	call   c0015552 <Thr::getDriverNameFromAddress(unsigned long)>
c0012b0c:	83 c4 10             	add    esp,0x10
c0012b0f:	85 c0                	test   eax,eax
c0012b11:	0f 84 36 01 00 00    	je     c0012c4d <Krnl::panic(char const*)+0x1fe>
c0012b17:	83 ec 08             	sub    esp,0x8
c0012b1a:	89 c3                	mov    ebx,eax
c0012b1c:	68 2c 40 02 c0       	push   0xc002402c
c0012b21:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012b27:	e8 7c 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b2c:	59                   	pop    ecx
c0012b2d:	58                   	pop    eax
c0012b2e:	68 82 3f 02 c0       	push   0xc0023f82
c0012b33:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012b39:	e8 6a 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b3e:	58                   	pop    eax
c0012b3f:	5a                   	pop    edx
c0012b40:	53                   	push   ebx
c0012b41:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012b47:	e8 5c 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	83 ec 08             	sub    esp,0x8
c0012b52:	68 a1 3f 02 c0       	push   0xc0023fa1
c0012b57:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012b5d:	e8 46 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b62:	58                   	pop    eax
c0012b63:	5a                   	pop    edx
c0012b64:	68 84 40 02 c0       	push   0xc0024084
c0012b69:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012b6f:	e8 34 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b74:	59                   	pop    ecx
c0012b75:	5b                   	pop    ebx
c0012b76:	68 c4 40 02 c0       	push   0xc00240c4
c0012b7b:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012b81:	e8 22 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b86:	58                   	pop    eax
c0012b87:	5a                   	pop    edx
c0012b88:	68 8d 3f 02 c0       	push   0xc0023f8d
c0012b8d:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012b93:	e8 10 7d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012b98:	59                   	pop    ecx
c0012b99:	5b                   	pop    ebx
c0012b9a:	68 08 41 02 c0       	push   0xc0024108
c0012b9f:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012ba5:	e8 fe 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012baa:	58                   	pop    eax
c0012bab:	5a                   	pop    edx
c0012bac:	68 a5 3f 02 c0       	push   0xc0023fa5
c0012bb1:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012bb7:	e8 ec 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012bbc:	0f 20 c0             	mov    eax,cr0
c0012bbf:	59                   	pop    ecx
c0012bc0:	5b                   	pop    ebx
c0012bc1:	50                   	push   eax
c0012bc2:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012bc8:	e8 95 7c ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0012bcd:	58                   	pop    eax
c0012bce:	5a                   	pop    edx
c0012bcf:	68 af 3f 02 c0       	push   0xc0023faf
c0012bd4:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012bda:	e8 c9 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012bdf:	0f 20 d0             	mov    eax,cr2
c0012be2:	59                   	pop    ecx
c0012be3:	5b                   	pop    ebx
c0012be4:	50                   	push   eax
c0012be5:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012beb:	e8 72 7c ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0012bf0:	58                   	pop    eax
c0012bf1:	5a                   	pop    edx
c0012bf2:	68 b9 3f 02 c0       	push   0xc0023fb9
c0012bf7:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012bfd:	e8 a6 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012c02:	0f 20 d8             	mov    eax,cr3
c0012c05:	59                   	pop    ecx
c0012c06:	5b                   	pop    ebx
c0012c07:	50                   	push   eax
c0012c08:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012c0e:	e8 4f 7c ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0012c13:	58                   	pop    eax
c0012c14:	5a                   	pop    edx
c0012c15:	68 cc 3f 02 c0       	push   0xc0023fcc
c0012c1a:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012c20:	e8 83 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012c25:	0f 20 e0             	mov    eax,cr4
c0012c28:	59                   	pop    ecx
c0012c29:	5b                   	pop    ebx
c0012c2a:	50                   	push   eax
c0012c2b:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012c31:	e8 2c 7c ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0012c36:	58                   	pop    eax
c0012c37:	5a                   	pop    edx
c0012c38:	68 d6 3f 02 c0       	push   0xc0023fd6
c0012c3d:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012c43:	e8 60 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012c48:	83 c4 10             	add    esp,0x10
c0012c4b:	eb fe                	jmp    c0012c4b <Krnl::panic(char const*)+0x1fc>
c0012c4d:	51                   	push   ecx
c0012c4e:	51                   	push   ecx
c0012c4f:	68 58 40 02 c0       	push   0xc0024058
c0012c54:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012c5a:	e8 49 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012c5f:	5b                   	pop    ebx
c0012c60:	58                   	pop    eax
c0012c61:	68 82 3f 02 c0       	push   0xc0023f82
c0012c66:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012c6c:	e8 37 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012c71:	58                   	pop    eax
c0012c72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c77:	5a                   	pop    edx
c0012c78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c7b:	83 c0 0c             	add    eax,0xc
c0012c7e:	50                   	push   eax
c0012c7f:	ff 35 14 63 02 c0    	push   DWORD PTR ds:0xc0026314
c0012c85:	e8 1e 7c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0012c8a:	83 c4 10             	add    esp,0x10
c0012c8d:	e9 bd fe ff ff       	jmp    c0012b4f <Krnl::panic(char const*)+0x100>

c0012c92 <Krnl::powerThread(void*)>:
c0012c92:	53                   	push   ebx
c0012c93:	83 ec 08             	sub    esp,0x8
c0012c96:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0012c9b:	48                   	dec    eax
c0012c9c:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0012ca1:	75 01                	jne    c0012ca4 <Krnl::powerThread(void*)+0x12>
c0012ca3:	fb                   	sti    
c0012ca4:	52                   	push   edx
c0012ca5:	52                   	push   edx
c0012ca6:	ff 35 c4 8d 02 c0    	push   DWORD PTR ds:0xc0028dc4
c0012cac:	68 2e 41 02 c0       	push   0xc002412e
c0012cb1:	e8 2f 9a ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0012cb6:	59                   	pop    ecx
c0012cb7:	8b 1d b4 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db4
c0012cbd:	58                   	pop    eax
c0012cbe:	c6 05 80 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028d80,0x0
c0012cc5:	53                   	push   ebx
c0012cc6:	68 38 41 02 c0       	push   0xc0024138
c0012ccb:	e8 15 9a ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0012cd0:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0012cd7:	e8 b0 35 00 00       	call   c001628c <sleep(unsigned int)>
c0012cdc:	a1 c4 8d 02 c0       	mov    eax,ds:0xc0028dc4
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	83 c0 0a             	add    eax,0xa
c0012ce7:	85 db                	test   ebx,ebx
c0012ce9:	a3 c4 8d 02 c0       	mov    ds:0xc0028dc4,eax
c0012cee:	74 b4                	je     c0012ca4 <Krnl::powerThread(void*)+0x12>
c0012cf0:	39 d8                	cmp    eax,ebx
c0012cf2:	7e b0                	jle    c0012ca4 <Krnl::powerThread(void*)+0x12>
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	68 50 41 02 c0       	push   0xc0024150
c0012cfc:	e8 e4 99 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0012d01:	58                   	pop    eax
c0012d02:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0012d08:	e8 d5 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	eb 92                	jmp    c0012ca4 <Krnl::powerThread(void*)+0x12>

c0012d12 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0012d12:	57                   	push   edi
c0012d13:	b9 09 00 00 00       	mov    ecx,0x9
c0012d18:	56                   	push   esi
c0012d19:	bf a0 8d 02 c0       	mov    edi,0xc0028da0
c0012d1e:	fc                   	cld    
c0012d1f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d23:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012d25:	5e                   	pop    esi
c0012d26:	5f                   	pop    edi
c0012d27:	c3                   	ret    

c0012d28 <Krnl::userIOReceived()>:
c0012d28:	c7 05 c4 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dc4,0x0
c0012d32:	c3                   	ret    

c0012d33 <Krnl::handlePowerButton()>:
c0012d33:	83 ec 0c             	sub    esp,0xc
c0012d36:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0012d3b:	83 f8 02             	cmp    eax,0x2
c0012d3e:	75 10                	jne    c0012d50 <Krnl::handlePowerButton()+0x1d>
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0012d49:	e8 64 60 ff ff       	call   c0008db2 <Computer::shutdown()>
c0012d4e:	eb 11                	jmp    c0012d61 <Krnl::handlePowerButton()+0x2e>
c0012d50:	48                   	dec    eax
c0012d51:	75 11                	jne    c0012d64 <Krnl::handlePowerButton()+0x31>
c0012d53:	83 ec 0c             	sub    esp,0xc
c0012d56:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0012d5c:	e8 81 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012d61:	83 c4 10             	add    esp,0x10
c0012d64:	83 c4 0c             	add    esp,0xc
c0012d67:	c3                   	ret    

c0012d68 <Krnl::handleSleepButton()>:
c0012d68:	83 ec 0c             	sub    esp,0xc
c0012d6b:	a1 a4 8d 02 c0       	mov    eax,ds:0xc0028da4
c0012d70:	83 f8 02             	cmp    eax,0x2
c0012d73:	75 10                	jne    c0012d85 <Krnl::handleSleepButton()+0x1d>
c0012d75:	83 ec 0c             	sub    esp,0xc
c0012d78:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0012d7e:	e8 2f 60 ff ff       	call   c0008db2 <Computer::shutdown()>
c0012d83:	eb 11                	jmp    c0012d96 <Krnl::handleSleepButton()+0x2e>
c0012d85:	48                   	dec    eax
c0012d86:	75 11                	jne    c0012d99 <Krnl::handleSleepButton()+0x31>
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0012d91:	e8 4c 60 ff ff       	call   c0008de2 <Computer::sleep()>
c0012d96:	83 c4 10             	add    esp,0x10
c0012d99:	83 c4 0c             	add    esp,0xc
c0012d9c:	c3                   	ret    

c0012d9d <Krnl::setupPowerManager()>:
c0012d9d:	83 ec 0c             	sub    esp,0xc
c0012da0:	c7 05 c4 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dc4,0x0
c0012daa:	68 f0 00 00 00       	push   0xf0
c0012daf:	c6 05 80 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028d80,0x0
c0012db6:	6a 00                	push   0x0
c0012db8:	68 92 2c 01 c0       	push   0xc0012c92
c0012dbd:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c0012dc3:	e8 a0 2f 00 00       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c0012dc8:	c7 05 a0 8d 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x2
c0012dd2:	c7 05 a4 8d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028da4,0x1
c0012ddc:	c7 05 a8 8d 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028da8,0x3
c0012de6:	c7 05 ac 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dac,0x0
c0012df0:	c7 05 b8 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028db8,0x0
c0012dfa:	c7 05 b0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028db0,0x0
c0012e04:	c7 05 bc 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dbc,0x0
c0012e0e:	c7 05 b4 8d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028db4,0x3c
c0012e18:	c7 05 c0 8d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028dc0,0x3c
c0012e22:	83 c4 1c             	add    esp,0x1c
c0012e25:	c3                   	ret    

c0012e26 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012e26:	55                   	push   ebp
c0012e27:	57                   	push   edi
c0012e28:	56                   	push   esi
c0012e29:	53                   	push   ebx
c0012e2a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012e30:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012e37:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012e39:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012e3c:	80 fb 40             	cmp    bl,0x40
c0012e3f:	75 1b                	jne    c0012e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0012e41:	8a 16                	mov    dl,BYTE PTR [esi]
c0012e43:	84 d2                	test   dl,dl
c0012e45:	0f 84 f1 00 00 00    	je     c0012f3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012e4b:	8d 46 01             	lea    eax,[esi+0x1]
c0012e4e:	80 fa 3a             	cmp    dl,0x3a
c0012e51:	74 04                	je     c0012e57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0012e53:	89 c6                	mov    esi,eax
c0012e55:	eb ea                	jmp    c0012e41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012e57:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e5a:	89 c6                	mov    esi,eax
c0012e5c:	50                   	push   eax
c0012e5d:	6a 40                	push   0x40
c0012e5f:	6a 00                	push   0x0
c0012e61:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e65:	50                   	push   eax
c0012e66:	e8 3d d6 fe ff       	call   c00004a8 <memset>
c0012e6b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012e72:	31 c0                	xor    eax,eax
c0012e74:	83 c4 10             	add    esp,0x10
c0012e77:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012e79:	84 c9                	test   cl,cl
c0012e7b:	0f 84 bb 00 00 00    	je     c0012f3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012e81:	3d c7 00 00 00       	cmp    eax,0xc7
c0012e86:	0f 8f b0 00 00 00    	jg     c0012f3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012e8c:	80 f9 0a             	cmp    cl,0xa
c0012e8f:	0f 85 98 00 00 00    	jne    c0012f2d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012e95:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012e9a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012e9e:	a8 df                	test   al,0xdf
c0012ea0:	0f 94 c1             	sete   cl
c0012ea3:	3c 23                	cmp    al,0x23
c0012ea5:	0f 94 c2             	sete   dl
c0012ea8:	08 d1                	or     cl,dl
c0012eaa:	75 4a                	jne    c0012ef6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012eac:	8d 50 f7             	lea    edx,[eax-0x9]
c0012eaf:	80 fa 01             	cmp    dl,0x1
c0012eb2:	76 42                	jbe    c0012ef6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012eb4:	3c 5b                	cmp    al,0x5b
c0012eb6:	75 42                	jne    c0012efa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012eb8:	80 fb 40             	cmp    bl,0x40
c0012ebb:	75 39                	jne    c0012ef6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012ebd:	83 ec 0c             	sub    esp,0xc
c0012ec0:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012ec4:	52                   	push   edx
c0012ec5:	e8 fa d5 fe ff       	call   c00004c4 <strlen>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	83 f8 3f             	cmp    eax,0x3f
c0012ed0:	77 6a                	ja     c0012f3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012ed2:	50                   	push   eax
c0012ed3:	50                   	push   eax
c0012ed4:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012ed8:	52                   	push   edx
c0012ed9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012edd:	52                   	push   edx
c0012ede:	e8 81 d6 fe ff       	call   c0000564 <strcpy>
c0012ee3:	58                   	pop    eax
c0012ee4:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012ee8:	52                   	push   edx
c0012ee9:	e8 d6 d5 fe ff       	call   c00004c4 <strlen>
c0012eee:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	31 d2                	xor    edx,edx
c0012ef8:	eb 3a                	jmp    c0012f34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012efa:	80 fb 40             	cmp    bl,0x40
c0012efd:	74 06                	je     c0012f05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012eff:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012f03:	eb 20                	jmp    c0012f25 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012f05:	50                   	push   eax
c0012f06:	50                   	push   eax
c0012f07:	55                   	push   ebp
c0012f08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f0c:	50                   	push   eax
c0012f0d:	e8 de d6 fe ff       	call   c00005f0 <strcmp>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	85 c0                	test   eax,eax
c0012f17:	75 dd                	jne    c0012ef6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012f19:	eb e4                	jmp    c0012eff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012f1b:	8d 50 01             	lea    edx,[eax+0x1]
c0012f1e:	80 f9 3d             	cmp    cl,0x3d
c0012f21:	74 1d                	je     c0012f40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012f23:	89 d0                	mov    eax,edx
c0012f25:	8a 08                	mov    cl,BYTE PTR [eax]
c0012f27:	84 c9                	test   cl,cl
c0012f29:	75 f0                	jne    c0012f1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012f2b:	eb 0f                	jmp    c0012f3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012f2d:	8d 50 01             	lea    edx,[eax+0x1]
c0012f30:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012f34:	47                   	inc    edi
c0012f35:	89 d0                	mov    eax,edx
c0012f37:	e9 3b ff ff ff       	jmp    c0012e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0012f3c:	31 c0                	xor    eax,eax
c0012f3e:	eb 33                	jmp    c0012f73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0012f40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f44:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f47:	50                   	push   eax
c0012f48:	50                   	push   eax
c0012f49:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012f4d:	50                   	push   eax
c0012f4e:	56                   	push   esi
c0012f4f:	e8 9c d6 fe ff       	call   c00005f0 <strcmp>
c0012f54:	83 c4 10             	add    esp,0x10
c0012f57:	85 c0                	test   eax,eax
c0012f59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f5d:	75 97                	jne    c0012ef6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012f5f:	51                   	push   ecx
c0012f60:	51                   	push   ecx
c0012f61:	52                   	push   edx
c0012f62:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012f69:	e8 f6 d5 fe ff       	call   c0000564 <strcpy>
c0012f6e:	83 c4 10             	add    esp,0x10
c0012f71:	b0 01                	mov    al,0x1
c0012f73:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f79:	5b                   	pop    ebx
c0012f7a:	5e                   	pop    esi
c0012f7b:	5f                   	pop    edi
c0012f7c:	5d                   	pop    ebp
c0012f7d:	c3                   	ret    

c0012f7e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012f7e:	57                   	push   edi
c0012f7f:	56                   	push   esi
c0012f80:	53                   	push   ebx
c0012f81:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012f87:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012f8e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012f95:	53                   	push   ebx
c0012f96:	e8 29 d5 fe ff       	call   c00004c4 <strlen>
c0012f9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f9e:	89 c7                	mov    edi,eax
c0012fa0:	e8 1f d5 fe ff       	call   c00004c4 <strlen>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012fac:	3d ff 00 00 00       	cmp    eax,0xff
c0012fb1:	0f 87 d3 00 00 00    	ja     c001308a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012fb7:	57                   	push   edi
c0012fb8:	57                   	push   edi
c0012fb9:	56                   	push   esi
c0012fba:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012fbe:	56                   	push   esi
c0012fbf:	e8 a0 d5 fe ff       	call   c0000564 <strcpy>
c0012fc4:	58                   	pop    eax
c0012fc5:	5a                   	pop    edx
c0012fc6:	68 b3 44 02 c0       	push   0xc00244b3
c0012fcb:	56                   	push   esi
c0012fcc:	e8 d3 d6 fe ff       	call   c00006a4 <strcat>
c0012fd1:	59                   	pop    ecx
c0012fd2:	5f                   	pop    edi
c0012fd3:	53                   	push   ebx
c0012fd4:	56                   	push   esi
c0012fd5:	e8 ca d6 fe ff       	call   c00006a4 <strcat>
c0012fda:	58                   	pop    eax
c0012fdb:	5a                   	pop    edx
c0012fdc:	68 5d 41 02 c0       	push   0xc002415d
c0012fe1:	56                   	push   esi
c0012fe2:	e8 bd d6 fe ff       	call   c00006a4 <strcat>
c0012fe7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012fee:	e8 a4 67 ff ff       	call   c0009797 <malloc>
c0012ff3:	83 c4 0c             	add    esp,0xc
c0012ff6:	89 c3                	mov    ebx,eax
c0012ff8:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c0012ffe:	56                   	push   esi
c0012fff:	50                   	push   eax
c0013000:	e8 4b 9c ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0013005:	83 c4 10             	add    esp,0x10
c0013008:	85 db                	test   ebx,ebx
c001300a:	74 7e                	je     c001308a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001300c:	51                   	push   ecx
c001300d:	51                   	push   ecx
c001300e:	6a 01                	push   0x1
c0013010:	53                   	push   ebx
c0013011:	e8 14 9d ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c0013016:	83 c4 10             	add    esp,0x10
c0013019:	85 c0                	test   eax,eax
c001301b:	74 08                	je     c0013025 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013022:	53                   	push   ebx
c0013023:	eb 5f                	jmp    c0013084 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013025:	52                   	push   edx
c0013026:	8d 44 24 17          	lea    eax,[esp+0x17]
c001302a:	50                   	push   eax
c001302b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001302f:	50                   	push   eax
c0013030:	53                   	push   ebx
c0013031:	e8 a0 9f ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c0013036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	89 c1                	mov    ecx,eax
c001303f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013043:	74 31                	je     c0013076 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013045:	83 ec 0c             	sub    esp,0xc
c0013048:	50                   	push   eax
c0013049:	e8 49 67 ff ff       	call   c0009797 <malloc>
c001304e:	89 c6                	mov    esi,eax
c0013050:	58                   	pop    eax
c0013051:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013053:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013057:	52                   	push   edx
c0013058:	56                   	push   esi
c0013059:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001305d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013061:	53                   	push   ebx
c0013062:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013065:	83 c4 20             	add    esp,0x20
c0013068:	85 c0                	test   eax,eax
c001306a:	75 0a                	jne    c0013076 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001306c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013070:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013074:	74 18                	je     c001308e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013076:	83 ec 0c             	sub    esp,0xc
c0013079:	53                   	push   ebx
c001307a:	e8 09 9d ff ff       	call   c000cd88 <File::close()>
c001307f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013081:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013084:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	31 c0                	xor    eax,eax
c001308c:	eb 3b                	jmp    c00130c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001308e:	83 ec 0c             	sub    esp,0xc
c0013091:	53                   	push   ebx
c0013092:	e8 f1 9c ff ff       	call   c000cd88 <File::close()>
c0013097:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013099:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001309c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001309f:	83 c4 0c             	add    esp,0xc
c00130a2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00130a9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00130b0:	56                   	push   esi
c00130b1:	e8 70 fd ff ff       	call   c0012e26 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00130b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00130b9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00130bd:	e8 e5 66 ff ff       	call   c00097a7 <free>
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00130c9:	81 c4 20 01 00 00    	add    esp,0x120
c00130cf:	5b                   	pop    ebx
c00130d0:	5e                   	pop    esi
c00130d1:	5f                   	pop    edi
c00130d2:	c3                   	ret    

c00130d3 <Reg::getLine(char*, char*, char*)>:
c00130d3:	57                   	push   edi
c00130d4:	56                   	push   esi
c00130d5:	53                   	push   ebx
c00130d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00130e2:	57                   	push   edi
c00130e3:	56                   	push   esi
c00130e4:	53                   	push   ebx
c00130e5:	68 62 41 02 c0       	push   0xc0024162
c00130ea:	e8 8f fe ff ff       	call   c0012f7e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	84 c0                	test   al,al
c00130f4:	75 10                	jne    c0013106 <Reg::getLine(char*, char*, char*)+0x33>
c00130f6:	57                   	push   edi
c00130f7:	56                   	push   esi
c00130f8:	53                   	push   ebx
c00130f9:	68 87 41 02 c0       	push   0xc0024187
c00130fe:	e8 7b fe ff ff       	call   c0012f7e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013103:	83 c4 10             	add    esp,0x10
c0013106:	5b                   	pop    ebx
c0013107:	5e                   	pop    esi
c0013108:	5f                   	pop    edi
c0013109:	c3                   	ret    

c001310a <Reg::readInt(char*, char*, int*)>:
c001310a:	55                   	push   ebp
c001310b:	57                   	push   edi
c001310c:	56                   	push   esi
c001310d:	53                   	push   ebx
c001310e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013114:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0013118:	57                   	push   edi
c0013119:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013120:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013127:	e8 a7 ff ff ff       	call   c00130d3 <Reg::getLine(char*, char*, char*)>
c001312c:	83 c4 10             	add    esp,0x10
c001312f:	84 c0                	test   al,al
c0013131:	0f 84 b3 00 00 00    	je     c00131ea <Reg::readInt(char*, char*, int*)+0xe0>
c0013137:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001313b:	80 fa 2b             	cmp    dl,0x2b
c001313e:	74 0c                	je     c001314c <Reg::readInt(char*, char*, int*)+0x42>
c0013140:	80 fa 2d             	cmp    dl,0x2d
c0013143:	75 0e                	jne    c0013153 <Reg::readInt(char*, char*, int*)+0x49>
c0013145:	ba 01 00 00 00       	mov    edx,0x1
c001314a:	eb 0b                	jmp    c0013157 <Reg::readInt(char*, char*, int*)+0x4d>
c001314c:	ba 01 00 00 00       	mov    edx,0x1
c0013151:	eb 02                	jmp    c0013155 <Reg::readInt(char*, char*, int*)+0x4b>
c0013153:	31 d2                	xor    edx,edx
c0013155:	31 c0                	xor    eax,eax
c0013157:	be 0a 00 00 00       	mov    esi,0xa
c001315c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013161:	75 20                	jne    c0013183 <Reg::readInt(char*, char*, int*)+0x79>
c0013163:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0013167:	80 f9 78             	cmp    cl,0x78
c001316a:	75 0a                	jne    c0013176 <Reg::readInt(char*, char*, int*)+0x6c>
c001316c:	83 c2 02             	add    edx,0x2
c001316f:	be 10 00 00 00       	mov    esi,0x10
c0013174:	eb 0d                	jmp    c0013183 <Reg::readInt(char*, char*, int*)+0x79>
c0013176:	80 f9 62             	cmp    cl,0x62
c0013179:	75 08                	jne    c0013183 <Reg::readInt(char*, char*, int*)+0x79>
c001317b:	83 c2 02             	add    edx,0x2
c001317e:	be 02 00 00 00       	mov    esi,0x2
c0013183:	01 d7                	add    edi,edx
c0013185:	31 d2                	xor    edx,edx
c0013187:	8a 1f                	mov    bl,BYTE PTR [edi]
c0013189:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001318d:	80 fb 0d             	cmp    bl,0xd
c0013190:	0f 94 c3             	sete   bl
c0013193:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013198:	0f 94 c1             	sete   cl
c001319b:	08 cb                	or     bl,cl
c001319d:	75 3a                	jne    c00131d9 <Reg::readInt(char*, char*, int*)+0xcf>
c001319f:	0f af d6             	imul   edx,esi
c00131a2:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00131a7:	83 fe 10             	cmp    esi,0x10
c00131aa:	75 26                	jne    c00131d2 <Reg::readInt(char*, char*, int*)+0xc8>
c00131ac:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00131b0:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00131b3:	89 e9                	mov    ecx,ebp
c00131b5:	80 f9 05             	cmp    cl,0x5
c00131b8:	77 06                	ja     c00131c0 <Reg::readInt(char*, char*, int*)+0xb6>
c00131ba:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00131be:	eb 16                	jmp    c00131d6 <Reg::readInt(char*, char*, int*)+0xcc>
c00131c0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00131c4:	83 e9 61             	sub    ecx,0x61
c00131c7:	80 f9 05             	cmp    cl,0x5
c00131ca:	77 06                	ja     c00131d2 <Reg::readInt(char*, char*, int*)+0xc8>
c00131cc:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00131d0:	eb 04                	jmp    c00131d6 <Reg::readInt(char*, char*, int*)+0xcc>
c00131d2:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00131d6:	47                   	inc    edi
c00131d7:	eb ae                	jmp    c0013187 <Reg::readInt(char*, char*, int*)+0x7d>
c00131d9:	84 c0                	test   al,al
c00131db:	74 02                	je     c00131df <Reg::readInt(char*, char*, int*)+0xd5>
c00131dd:	f7 da                	neg    edx
c00131df:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00131e6:	89 10                	mov    DWORD PTR [eax],edx
c00131e8:	88 d8                	mov    al,bl
c00131ea:	81 c4 ec 00 00 00    	add    esp,0xec
c00131f0:	5b                   	pop    ebx
c00131f1:	5e                   	pop    esi
c00131f2:	5f                   	pop    edi
c00131f3:	5d                   	pop    ebp
c00131f4:	c3                   	ret    

c00131f5 <Reg::readString(char*, char*, char*, int)>:
c00131f5:	57                   	push   edi
c00131f6:	56                   	push   esi
c00131f7:	53                   	push   ebx
c00131f8:	81 ec d4 00 00 00    	sub    esp,0xd4
c00131fe:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013205:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013209:	57                   	push   edi
c001320a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013211:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013218:	e8 b6 fe ff ff       	call   c00130d3 <Reg::getLine(char*, char*, char*)>
c001321d:	83 c4 10             	add    esp,0x10
c0013220:	89 c6                	mov    esi,eax
c0013222:	84 c0                	test   al,al
c0013224:	74 44                	je     c001326a <Reg::readString(char*, char*, char*, int)+0x75>
c0013226:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001322d:	31 c0                	xor    eax,eax
c001322f:	4a                   	dec    edx
c0013230:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013233:	84 c9                	test   cl,cl
c0013235:	74 0f                	je     c0013246 <Reg::readString(char*, char*, char*, int)+0x51>
c0013237:	39 c2                	cmp    edx,eax
c0013239:	7e 0b                	jle    c0013246 <Reg::readString(char*, char*, char*, int)+0x51>
c001323b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001323e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013243:	40                   	inc    eax
c0013244:	eb ea                	jmp    c0013230 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	53                   	push   ebx
c001324a:	e8 75 d2 fe ff       	call   c00004c4 <strlen>
c001324f:	83 c4 10             	add    esp,0x10
c0013252:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013257:	75 11                	jne    c001326a <Reg::readString(char*, char*, char*, int)+0x75>
c0013259:	83 ec 0c             	sub    esp,0xc
c001325c:	53                   	push   ebx
c001325d:	e8 62 d2 fe ff       	call   c00004c4 <strlen>
c0013262:	83 c4 10             	add    esp,0x10
c0013265:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001326a:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013270:	89 f0                	mov    eax,esi
c0013272:	5b                   	pop    ebx
c0013273:	5e                   	pop    esi
c0013274:	5f                   	pop    edi
c0013275:	c3                   	ret    

c0013276 <Reg::readBool(char*, char*, bool*)>:
c0013276:	83 ec 20             	sub    esp,0x20
c0013279:	8d 44 24 10          	lea    eax,[esp+0x10]
c001327d:	50                   	push   eax
c001327e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013286:	e8 7f fe ff ff       	call   c001310a <Reg::readInt(char*, char*, int*)>
c001328b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013290:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013294:	0f 95 02             	setne  BYTE PTR [edx]
c0013297:	83 c4 2c             	add    esp,0x2c
c001329a:	c3                   	ret    

c001329b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001329b:	53                   	push   ebx
c001329c:	83 ec 1c             	sub    esp,0x1c
c001329f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00132a3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00132a7:	50                   	push   eax
c00132a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132b0:	e8 c1 ff ff ff       	call   c0013276 <Reg::readBool(char*, char*, bool*)>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	84 c0                	test   al,al
c00132ba:	74 04                	je     c00132c0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00132bc:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00132c0:	88 d8                	mov    al,bl
c00132c2:	83 c4 18             	add    esp,0x18
c00132c5:	5b                   	pop    ebx
c00132c6:	c3                   	ret    

c00132c7 <Reg::readIntWithDefault(char*, char*, int)>:
c00132c7:	53                   	push   ebx
c00132c8:	83 ec 1c             	sub    esp,0x1c
c00132cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00132cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00132d3:	50                   	push   eax
c00132d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132dc:	e8 29 fe ff ff       	call   c001310a <Reg::readInt(char*, char*, int*)>
c00132e1:	83 c4 10             	add    esp,0x10
c00132e4:	84 c0                	test   al,al
c00132e6:	74 04                	je     c00132ec <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00132e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00132ec:	89 d8                	mov    eax,ebx
c00132ee:	83 c4 18             	add    esp,0x18
c00132f1:	5b                   	pop    ebx
c00132f2:	c3                   	ret    

c00132f3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00132f3:	57                   	push   edi
c00132f4:	56                   	push   esi
c00132f5:	56                   	push   esi
c00132f6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00132fa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132fe:	56                   	push   esi
c00132ff:	57                   	push   edi
c0013300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013308:	e8 e8 fe ff ff       	call   c00131f5 <Reg::readString(char*, char*, char*, int)>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	84 c0                	test   al,al
c0013312:	75 1a                	jne    c001332e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013314:	51                   	push   ecx
c0013315:	56                   	push   esi
c0013316:	6a 00                	push   0x0
c0013318:	57                   	push   edi
c0013319:	e8 8a d1 fe ff       	call   c00004a8 <memset>
c001331e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013321:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013325:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013327:	83 c4 10             	add    esp,0x10
c001332a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001332e:	89 f8                	mov    eax,edi
c0013330:	5a                   	pop    edx
c0013331:	5e                   	pop    esi
c0013332:	5f                   	pop    edi
c0013333:	c3                   	ret    

c0013334 <Sys::eject(regs*)>:
c0013334:	83 ec 0c             	sub    esp,0xc
c0013337:	83 ca ff             	or     edx,0xffffffff
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013341:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013346:	83 e9 41             	sub    ecx,0x41
c0013349:	83 f9 19             	cmp    ecx,0x19
c001334c:	77 18                	ja     c0013366 <Sys::eject(regs*)+0x32>
c001334e:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c0013355:	85 c9                	test   ecx,ecx
c0013357:	74 0d                	je     c0013366 <Sys::eject(regs*)+0x32>
c0013359:	83 ec 0c             	sub    esp,0xc
c001335c:	51                   	push   ecx
c001335d:	e8 c2 ba ff ff       	call   c000ee24 <LogicalDisk::eject()>
c0013362:	83 c4 10             	add    esp,0x10
c0013365:	99                   	cdq    
c0013366:	83 c4 0c             	add    esp,0xc
c0013369:	c3                   	ret    

c001336a <Sys::exit(regs*)>:
c001336a:	83 ec 18             	sub    esp,0x18
c001336d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013371:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013374:	e8 23 35 00 00       	call   c001689c <terminateTask(int)>
c0013379:	83 c8 ff             	or     eax,0xffffffff
c001337c:	83 c4 1c             	add    esp,0x1c
c001337f:	89 c2                	mov    edx,eax
c0013381:	c3                   	ret    

c0013382 <Sys::getCwd(regs*)>:
c0013382:	83 ec 10             	sub    esp,0x10
c0013385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013389:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001338c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001338f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013394:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013397:	e8 b6 96 ff ff       	call   c000ca52 <Fs::getcwd(Process*, char*, int)>
c001339c:	83 c4 1c             	add    esp,0x1c
c001339f:	99                   	cdq    
c00133a0:	c3                   	ret    

c00133a1 <Sys::getPID(regs*)>:
c00133a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00133ab:	99                   	cdq    
c00133ac:	c3                   	ret    

c00133ad <Sys::getRAMData(regs*)>:
c00133ad:	8b 0d f8 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262f8
c00133b3:	69 05 f4 62 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00262f4,0xc8
c00133bd:	99                   	cdq    
c00133be:	f7 f9                	idiv   ecx
c00133c0:	c1 e0 18             	shl    eax,0x18
c00133c3:	09 c8                	or     eax,ecx
c00133c5:	99                   	cdq    
c00133c6:	c3                   	ret    

c00133c7 <Sys::getVGAPtr(regs*)>:
c00133c7:	55                   	push   ebp
c00133c8:	57                   	push   edi
c00133c9:	56                   	push   esi
c00133ca:	53                   	push   ebx
c00133cb:	83 ec 18             	sub    esp,0x18
c00133ce:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00133d2:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00133d5:	e8 c6 2f 00 00       	call   c00163a0 <Thr::processFromPID(int)>
c00133da:	83 c4 10             	add    esp,0x10
c00133dd:	89 c1                	mov    ecx,eax
c00133df:	b8 01 00 00 00       	mov    eax,0x1
c00133e4:	85 c9                	test   ecx,ecx
c00133e6:	74 59                	je     c0013441 <Sys::getVGAPtr(regs*)+0x7a>
c00133e8:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00133ee:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00133f2:	74 0c                	je     c0013400 <Sys::getVGAPtr(regs*)+0x39>
c00133f4:	83 ec 0c             	sub    esp,0xc
c00133f7:	53                   	push   ebx
c00133f8:	e8 6c 71 ff ff       	call   c000a569 <setActiveTerminal(VgaText*)>
c00133fd:	83 c4 10             	add    esp,0x10
c0013400:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0013403:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0013406:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001340b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001340d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0013410:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013413:	81 c3 82 00 00 00    	add    ebx,0x82
c0013419:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001341f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013422:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0013425:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001342b:	50                   	push   eax
c001342c:	50                   	push   eax
c001342d:	53                   	push   ebx
c001342e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013431:	05 a8 0f 00 00       	add    eax,0xfa8
c0013436:	50                   	push   eax
c0013437:	e8 28 d1 fe ff       	call   c0000564 <strcpy>
c001343c:	83 c4 10             	add    esp,0x10
c001343f:	31 c0                	xor    eax,eax
c0013441:	83 c4 0c             	add    esp,0xc
c0013444:	31 d2                	xor    edx,edx
c0013446:	5b                   	pop    ebx
c0013447:	5e                   	pop    esi
c0013448:	5f                   	pop    edi
c0013449:	5d                   	pop    ebp
c001344a:	c3                   	ret    

c001344b <Sys::loadDLL(regs*)>:
c001344b:	56                   	push   esi
c001344c:	53                   	push   ebx
c001344d:	31 d2                	xor    edx,edx
c001344f:	51                   	push   ecx
c0013450:	b8 01 00 00 00       	mov    eax,0x1
c0013455:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013459:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001345d:	0f 84 8c 00 00 00    	je     c00134ef <Sys::loadDLL(regs*)+0xa4>
c0013463:	83 ec 0c             	sub    esp,0xc
c0013466:	68 14 01 00 00       	push   0x114
c001346b:	e8 27 63 ff ff       	call   c0009797 <malloc>
c0013470:	83 c4 0c             	add    esp,0xc
c0013473:	89 c3                	mov    ebx,eax
c0013475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001347a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001347d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013480:	53                   	push   ebx
c0013481:	e8 ca 97 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0013486:	83 c4 10             	add    esp,0x10
c0013489:	31 d2                	xor    edx,edx
c001348b:	b8 02 00 00 00       	mov    eax,0x2
c0013490:	85 db                	test   ebx,ebx
c0013492:	74 5b                	je     c00134ef <Sys::loadDLL(regs*)+0xa4>
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	53                   	push   ebx
c0013498:	e8 fb 9a ff ff       	call   c000cf98 <File::exists()>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	84 c0                	test   al,al
c00134a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134a4:	75 11                	jne    c00134b7 <Sys::loadDLL(regs*)+0x6c>
c00134a6:	83 ec 0c             	sub    esp,0xc
c00134a9:	53                   	push   ebx
c00134aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	b8 03 00 00 00       	mov    eax,0x3
c00134b5:	eb 36                	jmp    c00134ed <Sys::loadDLL(regs*)+0xa2>
c00134b7:	83 ec 0c             	sub    esp,0xc
c00134ba:	53                   	push   ebx
c00134bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134be:	58                   	pop    eax
c00134bf:	5a                   	pop    edx
c00134c0:	6a 00                	push   0x0
c00134c2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134c5:	e8 d9 20 00 00       	call   c00155a3 <Thr::loadDLL(char const*, bool)>
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	89 c1                	mov    ecx,eax
c00134cf:	31 d2                	xor    edx,edx
c00134d1:	b8 04 00 00 00       	mov    eax,0x4
c00134d6:	85 c9                	test   ecx,ecx
c00134d8:	74 15                	je     c00134ef <Sys::loadDLL(regs*)+0xa4>
c00134da:	53                   	push   ebx
c00134db:	53                   	push   ebx
c00134dc:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c00134e2:	51                   	push   ecx
c00134e3:	e8 ec 22 00 00       	call   c00157d4 <Thr::executeDLL(unsigned long, void*)>
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	31 c0                	xor    eax,eax
c00134ed:	31 d2                	xor    edx,edx
c00134ef:	59                   	pop    ecx
c00134f0:	5b                   	pop    ebx
c00134f1:	5e                   	pop    esi
c00134f2:	c3                   	ret    

c00134f3 <Sys::read(regs*)>:
c00134f3:	57                   	push   edi
c00134f4:	56                   	push   esi
c00134f5:	53                   	push   ebx
c00134f6:	83 ec 10             	sub    esp,0x10
c00134f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00134fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013500:	83 f8 02             	cmp    eax,0x2
c0013503:	77 10                	ja     c0013515 <Sys::read(regs*)+0x22>
c0013505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001350a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001350d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013513:	eb 0e                	jmp    c0013523 <Sys::read(regs*)+0x30>
c0013515:	83 ec 0c             	sub    esp,0xc
c0013518:	50                   	push   eax
c0013519:	e8 15 7d ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	89 c1                	mov    ecx,eax
c0013523:	83 c8 ff             	or     eax,0xffffffff
c0013526:	85 c9                	test   ecx,ecx
c0013528:	89 c2                	mov    edx,eax
c001352a:	74 28                	je     c0013554 <Sys::read(regs*)+0x61>
c001352c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013534:	31 ff                	xor    edi,edi
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	8b 01                	mov    eax,DWORD PTR [ecx]
c001353b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001353f:	52                   	push   edx
c0013540:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013543:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013546:	57                   	push   edi
c0013547:	56                   	push   esi
c0013548:	51                   	push   ecx
c0013549:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001354c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013550:	83 c4 20             	add    esp,0x20
c0013553:	99                   	cdq    
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	5b                   	pop    ebx
c0013558:	5e                   	pop    esi
c0013559:	5f                   	pop    edi
c001355a:	c3                   	ret    

c001355b <Sys::sbrk(regs*)>:
c001355b:	56                   	push   esi
c001355c:	53                   	push   ebx
c001355d:	50                   	push   eax
c001355e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013563:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013567:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001356a:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001356d:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013573:	85 db                	test   ebx,ebx
c0013575:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013578:	74 02                	je     c001357c <Sys::sbrk(regs*)+0x21>
c001357a:	79 06                	jns    c0013582 <Sys::sbrk(regs*)+0x27>
c001357c:	89 f0                	mov    eax,esi
c001357e:	31 d2                	xor    edx,edx
c0013580:	eb 2a                	jmp    c00135ac <Sys::sbrk(regs*)+0x51>
c0013582:	83 c8 ff             	or     eax,0xffffffff
c0013585:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001358b:	89 c2                	mov    edx,eax
c001358d:	77 1d                	ja     c00135ac <Sys::sbrk(regs*)+0x51>
c001358f:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013595:	50                   	push   eax
c0013596:	c1 ea 0c             	shr    edx,0xc
c0013599:	68 07 0c 00 00       	push   0xc07
c001359e:	52                   	push   edx
c001359f:	51                   	push   ecx
c00135a0:	e8 53 85 ff ff       	call   c000baf8 <VAS::allocatePages(int, int)>
c00135a5:	89 f0                	mov    eax,esi
c00135a7:	31 d2                	xor    edx,edx
c00135a9:	83 c4 10             	add    esp,0x10
c00135ac:	59                   	pop    ecx
c00135ad:	5b                   	pop    ebx
c00135ae:	5e                   	pop    esi
c00135af:	c3                   	ret    

c00135b0 <Sys::setCwd(regs*)>:
c00135b0:	83 ec 14             	sub    esp,0x14
c00135b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135bf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135c2:	e8 70 9a ff ff       	call   c000d037 <Fs::setcwd(Process*, char*)>
c00135c7:	83 c4 1c             	add    esp,0x1c
c00135ca:	99                   	cdq    
c00135cb:	c3                   	ret    

c00135cc <Sys::setTime(regs*)>:
c00135cc:	55                   	push   ebp
c00135cd:	31 c9                	xor    ecx,ecx
c00135cf:	57                   	push   edi
c00135d0:	bd 0c 00 00 00       	mov    ebp,0xc
c00135d5:	56                   	push   esi
c00135d6:	53                   	push   ebx
c00135d7:	31 db                	xor    ebx,ebx
c00135d9:	83 ec 10             	sub    esp,0x10
c00135dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00135e0:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00135e3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00135e6:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00135e9:	89 c2                	mov    edx,eax
c00135eb:	66 81 ef 6c 07       	sub    di,0x76c
c00135f0:	83 e2 1f             	and    edx,0x1f
c00135f3:	c1 e7 10             	shl    edi,0x10
c00135f6:	42                   	inc    edx
c00135f7:	c1 e8 05             	shr    eax,0x5
c00135fa:	88 d1                	mov    cl,dl
c00135fc:	31 d2                	xor    edx,edx
c00135fe:	f7 f5                	div    ebp
c0013600:	89 dd                	mov    ebp,ebx
c0013602:	88 d5                	mov    ch,dl
c0013604:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001360a:	0f b7 c1             	movzx  eax,cx
c001360d:	31 d2                	xor    edx,edx
c001360f:	09 f8                	or     eax,edi
c0013611:	bf 3c 00 00 00       	mov    edi,0x3c
c0013616:	89 c1                	mov    ecx,eax
c0013618:	89 f0                	mov    eax,esi
c001361a:	f7 f7                	div    edi
c001361c:	c1 e2 10             	shl    edx,0x10
c001361f:	09 d5                	or     ebp,edx
c0013621:	31 d2                	xor    edx,edx
c0013623:	89 eb                	mov    ebx,ebp
c0013625:	f7 f7                	div    edi
c0013627:	bf 10 0e 00 00       	mov    edi,0xe10
c001362c:	88 d7                	mov    bh,dl
c001362e:	89 f0                	mov    eax,esi
c0013630:	31 d2                	xor    edx,edx
c0013632:	f7 f7                	div    edi
c0013634:	bf 18 00 00 00       	mov    edi,0x18
c0013639:	31 d2                	xor    edx,edx
c001363b:	f7 f7                	div    edi
c001363d:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0013642:	88 d3                	mov    bl,dl
c0013644:	53                   	push   ebx
c0013645:	51                   	push   ecx
c0013646:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001364c:	e8 25 a2 ff ff       	call   c000d876 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013651:	83 c4 1c             	add    esp,0x1c
c0013654:	83 f0 01             	xor    eax,0x1
c0013657:	5b                   	pop    ebx
c0013658:	0f b6 c0             	movzx  eax,al
c001365b:	5e                   	pop    esi
c001365c:	31 d2                	xor    edx,edx
c001365e:	5f                   	pop    edi
c001365f:	5d                   	pop    ebp
c0013660:	c3                   	ret    

c0013661 <Sys::timezone(regs*)>:
c0013661:	53                   	push   ebx
c0013662:	83 ec 08             	sub    esp,0x8
c0013665:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013669:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001366d:	75 17                	jne    c0013686 <Sys::timezone(regs*)+0x25>
c001366f:	83 ec 0c             	sub    esp,0xc
c0013672:	68 a2 41 02 c0       	push   0xc00241a2
c0013677:	e8 69 90 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001367c:	83 c8 ff             	or     eax,0xffffffff
c001367f:	83 c4 10             	add    esp,0x10
c0013682:	89 c2                	mov    edx,eax
c0013684:	eb 20                	jmp    c00136a6 <Sys::timezone(regs*)+0x45>
c0013686:	83 ec 0c             	sub    esp,0xc
c0013689:	68 b7 41 02 c0       	push   0xc00241b7
c001368e:	e8 52 90 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0013693:	58                   	pop    eax
c0013694:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013697:	e8 3c 9f ff ff       	call   c000d5d8 <User::loadClockSettings(int)>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	b8 01 00 00 00       	mov    eax,0x1
c00136a4:	31 d2                	xor    edx,edx
c00136a6:	83 c4 08             	add    esp,0x8
c00136a9:	5b                   	pop    ebx
c00136aa:	c3                   	ret    

c00136ab <Sys::write(regs*)>:
c00136ab:	57                   	push   edi
c00136ac:	56                   	push   esi
c00136ad:	53                   	push   ebx
c00136ae:	83 ec 10             	sub    esp,0x10
c00136b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00136b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00136b8:	83 f8 02             	cmp    eax,0x2
c00136bb:	77 10                	ja     c00136cd <Sys::write(regs*)+0x22>
c00136bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136c5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00136cb:	eb 0e                	jmp    c00136db <Sys::write(regs*)+0x30>
c00136cd:	83 ec 0c             	sub    esp,0xc
c00136d0:	50                   	push   eax
c00136d1:	e8 5d 7b ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	89 c1                	mov    ecx,eax
c00136db:	83 c8 ff             	or     eax,0xffffffff
c00136de:	85 c9                	test   ecx,ecx
c00136e0:	89 c2                	mov    edx,eax
c00136e2:	74 28                	je     c001370c <Sys::write(regs*)+0x61>
c00136e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136ec:	31 ff                	xor    edi,edi
c00136ee:	83 ec 0c             	sub    esp,0xc
c00136f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00136f7:	52                   	push   edx
c00136f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136fb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00136fe:	57                   	push   edi
c00136ff:	56                   	push   esi
c0013700:	51                   	push   ecx
c0013701:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013704:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013708:	83 c4 20             	add    esp,0x20
c001370b:	99                   	cdq    
c001370c:	83 c4 10             	add    esp,0x10
c001370f:	5b                   	pop    ebx
c0013710:	5e                   	pop    esi
c0013711:	5f                   	pop    edi
c0013712:	c3                   	ret    

c0013713 <Sys::wsbe(regs*)>:
c0013713:	57                   	push   edi
c0013714:	b9 0b 00 00 00       	mov    ecx,0xb
c0013719:	56                   	push   esi
c001371a:	be f6 41 02 c0       	mov    esi,0xc00241f6
c001371f:	53                   	push   ebx
c0013720:	83 ec 30             	sub    esp,0x30
c0013723:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013727:	fc                   	cld    
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001372d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013731:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013736:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013739:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001373f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013741:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013744:	57                   	push   edi
c0013745:	e8 7a cd fe ff       	call   c00004c4 <strlen>
c001374a:	5a                   	pop    edx
c001374b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001374f:	52                   	push   edx
c0013750:	31 d2                	xor    edx,edx
c0013752:	57                   	push   edi
c0013753:	52                   	push   edx
c0013754:	50                   	push   eax
c0013755:	56                   	push   esi
c0013756:	ff d3                	call   ebx
c0013758:	83 c4 14             	add    esp,0x14
c001375b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001375f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013762:	e8 35 31 00 00       	call   c001689c <terminateTask(int)>
c0013767:	83 c4 40             	add    esp,0x40
c001376a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001376f:	5b                   	pop    ebx
c0013770:	31 d2                	xor    edx,edx
c0013772:	5e                   	pop    esi
c0013773:	5f                   	pop    edi
c0013774:	c3                   	ret    

c0013775 <Sys::yield(regs*)>:
c0013775:	83 ec 0c             	sub    esp,0xc
c0013778:	fa                   	cli    
c0013779:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c001377f:	e8 00 28 00 00       	call   c0015f84 <schedule()>
c0013784:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0013789:	48                   	dec    eax
c001378a:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001378f:	75 01                	jne    c0013792 <Sys::yield(regs*)+0x1d>
c0013791:	fb                   	sti    
c0013792:	31 c0                	xor    eax,eax
c0013794:	31 d2                	xor    edx,edx
c0013796:	83 c4 0c             	add    esp,0xc
c0013799:	c3                   	ret    

c001379a <sysCallSeekDir(regs*)>:
c001379a:	31 c0                	xor    eax,eax
c001379c:	31 d2                	xor    edx,edx
c001379e:	c3                   	ret    

c001379f <sysCallTellDir(regs*)>:
c001379f:	31 c0                	xor    eax,eax
c00137a1:	31 d2                	xor    edx,edx
c00137a3:	c3                   	ret    

c00137a4 <sysCallVerify(regs*)>:
c00137a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137a8:	31 d2                	xor    edx,edx
c00137aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00137ad:	c3                   	ret    

c00137ae <sysCallGetArgc(regs*)>:
c00137ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137b6:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00137bc:	99                   	cdq    
c00137bd:	c3                   	ret    

c00137be <sysFormatDisk(regs*)>:
c00137be:	56                   	push   esi
c00137bf:	53                   	push   ebx
c00137c0:	53                   	push   ebx
c00137c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137c5:	8b 1d b8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b8
c00137cb:	eb 25                	jmp    c00137f2 <sysFormatDisk(regs*)+0x34>
c00137cd:	83 ec 0c             	sub    esp,0xc
c00137d0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00137d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00137d5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00137d8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00137db:	50                   	push   eax
c00137dc:	ff 34 85 40 88 02 c0 	push   DWORD PTR [eax*4-0x3ffd77c0]
c00137e3:	53                   	push   ebx
c00137e4:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00137e7:	83 c4 20             	add    esp,0x20
c00137ea:	83 f8 08             	cmp    eax,0x8
c00137ed:	75 12                	jne    c0013801 <sysFormatDisk(regs*)+0x43>
c00137ef:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00137f2:	85 db                	test   ebx,ebx
c00137f4:	75 d7                	jne    c00137cd <sysFormatDisk(regs*)+0xf>
c00137f6:	59                   	pop    ecx
c00137f7:	b8 03 00 00 00       	mov    eax,0x3
c00137fc:	31 d2                	xor    edx,edx
c00137fe:	5b                   	pop    ebx
c00137ff:	5e                   	pop    esi
c0013800:	c3                   	ret    
c0013801:	85 c0                	test   eax,eax
c0013803:	74 1b                	je     c0013820 <sysFormatDisk(regs*)+0x62>
c0013805:	83 f8 09             	cmp    eax,0x9
c0013808:	74 0b                	je     c0013815 <sysFormatDisk(regs*)+0x57>
c001380a:	59                   	pop    ecx
c001380b:	b8 02 00 00 00       	mov    eax,0x2
c0013810:	31 d2                	xor    edx,edx
c0013812:	5b                   	pop    ebx
c0013813:	5e                   	pop    esi
c0013814:	c3                   	ret    
c0013815:	59                   	pop    ecx
c0013816:	b8 01 00 00 00       	mov    eax,0x1
c001381b:	31 d2                	xor    edx,edx
c001381d:	5b                   	pop    ebx
c001381e:	5e                   	pop    esi
c001381f:	c3                   	ret    
c0013820:	59                   	pop    ecx
c0013821:	31 c0                	xor    eax,eax
c0013823:	31 d2                	xor    edx,edx
c0013825:	5b                   	pop    ebx
c0013826:	5e                   	pop    esi
c0013827:	c3                   	ret    

c0013828 <sysSetDiskVolumeLabel(regs*)>:
c0013828:	56                   	push   esi
c0013829:	53                   	push   ebx
c001382a:	53                   	push   ebx
c001382b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001382f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013832:	83 f8 19             	cmp    eax,0x19
c0013835:	77 2d                	ja     c0013864 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013837:	8b 0c 85 40 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd77c0]
c001383e:	85 c9                	test   ecx,ecx
c0013840:	74 22                	je     c0013864 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013842:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0013845:	85 db                	test   ebx,ebx
c0013847:	74 1b                	je     c0013864 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013849:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001384f:	85 d2                	test   edx,edx
c0013851:	74 11                	je     c0013864 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013853:	8b 32                	mov    esi,DWORD PTR [edx]
c0013855:	53                   	push   ebx
c0013856:	50                   	push   eax
c0013857:	51                   	push   ecx
c0013858:	52                   	push   edx
c0013859:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	99                   	cdq    
c0013860:	59                   	pop    ecx
c0013861:	5b                   	pop    ebx
c0013862:	5e                   	pop    esi
c0013863:	c3                   	ret    
c0013864:	59                   	pop    ecx
c0013865:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001386a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001386f:	5b                   	pop    ebx
c0013870:	5e                   	pop    esi
c0013871:	c3                   	ret    

c0013872 <sysGetDiskVolumeLabel(regs*)>:
c0013872:	57                   	push   edi
c0013873:	56                   	push   esi
c0013874:	53                   	push   ebx
c0013875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013879:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001387c:	83 fa 19             	cmp    edx,0x19
c001387f:	77 38                	ja     c00138b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013881:	8b 0c 95 40 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd77c0]
c0013888:	85 c9                	test   ecx,ecx
c001388a:	74 2d                	je     c00138b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c001388c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001388f:	85 db                	test   ebx,ebx
c0013891:	74 26                	je     c00138b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c0013893:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0013896:	85 f6                	test   esi,esi
c0013898:	74 1f                	je     c00138b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c001389a:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00138a0:	85 c0                	test   eax,eax
c00138a2:	74 15                	je     c00138b9 <sysGetDiskVolumeLabel(regs*)+0x47>
c00138a4:	83 ec 0c             	sub    esp,0xc
c00138a7:	8b 38                	mov    edi,DWORD PTR [eax]
c00138a9:	56                   	push   esi
c00138aa:	53                   	push   ebx
c00138ab:	52                   	push   edx
c00138ac:	51                   	push   ecx
c00138ad:	50                   	push   eax
c00138ae:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00138b1:	83 c4 20             	add    esp,0x20
c00138b4:	99                   	cdq    
c00138b5:	5b                   	pop    ebx
c00138b6:	5e                   	pop    esi
c00138b7:	5f                   	pop    edi
c00138b8:	c3                   	ret    
c00138b9:	5b                   	pop    ebx
c00138ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00138c4:	5e                   	pop    esi
c00138c5:	5f                   	pop    edi
c00138c6:	c3                   	ret    

c00138c7 <sysShutdown(regs*)>:
c00138c7:	83 ec 0c             	sub    esp,0xc
c00138ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00138d1:	85 c0                	test   eax,eax
c00138d3:	74 18                	je     c00138ed <sysShutdown(regs*)+0x26>
c00138d5:	83 f8 01             	cmp    eax,0x1
c00138d8:	74 38                	je     c0013912 <sysShutdown(regs*)+0x4b>
c00138da:	83 f8 02             	cmp    eax,0x2
c00138dd:	74 24                	je     c0013903 <sysShutdown(regs*)+0x3c>
c00138df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00138e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00138e9:	83 c4 0c             	add    esp,0xc
c00138ec:	c3                   	ret    
c00138ed:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c00138f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00138f4:	6a 00                	push   0x0
c00138f6:	6a 00                	push   0x0
c00138f8:	6a 00                	push   0x0
c00138fa:	50                   	push   eax
c00138fb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	eb dc                	jmp    c00138df <sysShutdown(regs*)+0x18>
c0013903:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0013908:	8b 10                	mov    edx,DWORD PTR [eax]
c001390a:	6a 00                	push   0x0
c001390c:	6a 00                	push   0x0
c001390e:	6a 01                	push   0x1
c0013910:	eb e8                	jmp    c00138fa <sysShutdown(regs*)+0x33>
c0013912:	a1 c0 88 02 c0       	mov    eax,ds:0xc00288c0
c0013917:	85 c0                	test   eax,eax
c0013919:	74 02                	je     c001391d <sysShutdown(regs*)+0x56>
c001391b:	ff d0                	call   eax
c001391d:	31 c0                	xor    eax,eax
c001391f:	31 d2                	xor    edx,edx
c0013921:	83 c4 0c             	add    esp,0xc
c0013924:	c3                   	ret    

c0013925 <sysCallRealpath(regs*)>:
c0013925:	83 ec 0c             	sub    esp,0xc
c0013928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001392f:	85 d2                	test   edx,edx
c0013931:	74 07                	je     c001393a <sysCallRealpath(regs*)+0x15>
c0013933:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0013936:	85 c0                	test   eax,eax
c0013938:	75 0b                	jne    c0013945 <sysCallRealpath(regs*)+0x20>
c001393a:	b8 01 00 00 00       	mov    eax,0x1
c001393f:	31 d2                	xor    edx,edx
c0013941:	83 c4 0c             	add    esp,0xc
c0013944:	c3                   	ret    
c0013945:	51                   	push   ecx
c0013946:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001394c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001394f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0013955:	51                   	push   ecx
c0013956:	52                   	push   edx
c0013957:	50                   	push   eax
c0013958:	e8 49 91 ff ff       	call   c000caa6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001395d:	83 c4 10             	add    esp,0x10
c0013960:	31 c0                	xor    eax,eax
c0013962:	31 d2                	xor    edx,edx
c0013964:	83 c4 0c             	add    esp,0xc
c0013967:	c3                   	ret    

c0013968 <sysCallReadDir(regs*)>:
c0013968:	53                   	push   ebx
c0013969:	83 ec 18             	sub    esp,0x18
c001396c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013970:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013973:	83 f8 02             	cmp    eax,0x2
c0013976:	76 60                	jbe    c00139d8 <sysCallReadDir(regs*)+0x70>
c0013978:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001397f:	77 48                	ja     c00139c9 <sysCallReadDir(regs*)+0x61>
c0013981:	83 ec 0c             	sub    esp,0xc
c0013984:	50                   	push   eax
c0013985:	e8 a9 78 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	85 c0                	test   eax,eax
c001398f:	74 38                	je     c00139c9 <sysCallReadDir(regs*)+0x61>
c0013991:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013999:	83 ec 0c             	sub    esp,0xc
c001399c:	8b 10                	mov    edx,DWORD PTR [eax]
c001399e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00139a2:	51                   	push   ecx
c00139a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139a6:	6a 00                	push   0x0
c00139a8:	68 10 01 00 00       	push   0x110
c00139ad:	50                   	push   eax
c00139ae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00139b1:	83 c4 20             	add    esp,0x20
c00139b4:	85 c0                	test   eax,eax
c00139b6:	74 29                	je     c00139e1 <sysCallReadDir(regs*)+0x79>
c00139b8:	83 f8 07             	cmp    eax,0x7
c00139bb:	74 1b                	je     c00139d8 <sysCallReadDir(regs*)+0x70>
c00139bd:	b8 02 00 00 00       	mov    eax,0x2
c00139c2:	31 d2                	xor    edx,edx
c00139c4:	83 c4 18             	add    esp,0x18
c00139c7:	5b                   	pop    ebx
c00139c8:	c3                   	ret    
c00139c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00139ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c00139d3:	83 c4 18             	add    esp,0x18
c00139d6:	5b                   	pop    ebx
c00139d7:	c3                   	ret    
c00139d8:	b8 01 00 00 00       	mov    eax,0x1
c00139dd:	31 d2                	xor    edx,edx
c00139df:	eb e3                	jmp    c00139c4 <sysCallReadDir(regs*)+0x5c>
c00139e1:	31 c0                	xor    eax,eax
c00139e3:	31 d2                	xor    edx,edx
c00139e5:	eb dd                	jmp    c00139c4 <sysCallReadDir(regs*)+0x5c>

c00139e7 <sysCallIsATTY(regs*)>:
c00139e7:	83 ec 0c             	sub    esp,0xc
c00139ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00139f1:	83 f8 02             	cmp    eax,0x2
c00139f4:	76 07                	jbe    c00139fd <sysCallIsATTY(regs*)+0x16>
c00139f6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00139fb:	75 26                	jne    c0013a23 <sysCallIsATTY(regs*)+0x3c>
c00139fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a05:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013a0b:	85 c0                	test   eax,eax
c0013a0d:	74 24                	je     c0013a33 <sysCallIsATTY(regs*)+0x4c>
c0013a0f:	83 ec 0c             	sub    esp,0xc
c0013a12:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a14:	50                   	push   eax
c0013a15:	ff 12                	call   DWORD PTR [edx]
c0013a17:	31 d2                	xor    edx,edx
c0013a19:	0f b6 c0             	movzx  eax,al
c0013a1c:	83 c4 10             	add    esp,0x10
c0013a1f:	83 c4 0c             	add    esp,0xc
c0013a22:	c3                   	ret    
c0013a23:	83 ec 0c             	sub    esp,0xc
c0013a26:	50                   	push   eax
c0013a27:	e8 07 78 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c0013a2c:	83 c4 10             	add    esp,0x10
c0013a2f:	85 c0                	test   eax,eax
c0013a31:	75 dc                	jne    c0013a0f <sysCallIsATTY(regs*)+0x28>
c0013a33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013a38:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013a3d:	83 c4 0c             	add    esp,0xc
c0013a40:	c3                   	ret    

c0013a41 <sysCallSeek(regs*)>:
c0013a41:	53                   	push   ebx
c0013a42:	83 ec 08             	sub    esp,0x8
c0013a45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a49:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a4c:	8d 50 fd             	lea    edx,[eax-0x3]
c0013a4f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013a55:	77 32                	ja     c0013a89 <sysCallSeek(regs*)+0x48>
c0013a57:	83 ec 0c             	sub    esp,0xc
c0013a5a:	50                   	push   eax
c0013a5b:	e8 d3 77 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c0013a60:	83 c4 0c             	add    esp,0xc
c0013a63:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a66:	31 db                	xor    ebx,ebx
c0013a68:	53                   	push   ebx
c0013a69:	51                   	push   ecx
c0013a6a:	50                   	push   eax
c0013a6b:	e8 78 93 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0013a70:	83 c4 10             	add    esp,0x10
c0013a73:	85 c0                	test   eax,eax
c0013a75:	0f 95 c0             	setne  al
c0013a78:	31 d2                	xor    edx,edx
c0013a7a:	0f b6 c0             	movzx  eax,al
c0013a7d:	f7 d8                	neg    eax
c0013a7f:	83 d2 00             	adc    edx,0x0
c0013a82:	83 c4 08             	add    esp,0x8
c0013a85:	f7 da                	neg    edx
c0013a87:	5b                   	pop    ebx
c0013a88:	c3                   	ret    
c0013a89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013a8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013a93:	83 c4 08             	add    esp,0x8
c0013a96:	5b                   	pop    ebx
c0013a97:	c3                   	ret    

c0013a98 <sysCallTell(regs*)>:
c0013a98:	53                   	push   ebx
c0013a99:	83 ec 08             	sub    esp,0x8
c0013a9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013aa0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013aa3:	83 f8 02             	cmp    eax,0x2
c0013aa6:	76 4d                	jbe    c0013af5 <sysCallTell(regs*)+0x5d>
c0013aa8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013aad:	76 19                	jbe    c0013ac8 <sysCallTell(regs*)+0x30>
c0013aaf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013ab2:	31 d2                	xor    edx,edx
c0013ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ac1:	31 c0                	xor    eax,eax
c0013ac3:	83 c4 08             	add    esp,0x8
c0013ac6:	5b                   	pop    ebx
c0013ac7:	c3                   	ret    
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	50                   	push   eax
c0013acc:	e8 62 77 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c0013ad1:	5a                   	pop    edx
c0013ad2:	59                   	pop    ecx
c0013ad3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ad6:	50                   	push   eax
c0013ad7:	e8 62 93 ff ff       	call   c000ce3e <File::tell(unsigned long long*)>
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	85 c0                	test   eax,eax
c0013ae1:	0f 95 c0             	setne  al
c0013ae4:	31 d2                	xor    edx,edx
c0013ae6:	0f b6 c0             	movzx  eax,al
c0013ae9:	f7 d8                	neg    eax
c0013aeb:	83 d2 00             	adc    edx,0x0
c0013aee:	83 c4 08             	add    esp,0x8
c0013af1:	f7 da                	neg    edx
c0013af3:	5b                   	pop    ebx
c0013af4:	c3                   	ret    
c0013af5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013afa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013aff:	83 c4 08             	add    esp,0x8
c0013b02:	5b                   	pop    ebx
c0013b03:	c3                   	ret    

c0013b04 <sysCallSize(regs*)>:
c0013b04:	53                   	push   ebx
c0013b05:	83 ec 18             	sub    esp,0x18
c0013b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b0c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b0f:	83 f8 02             	cmp    eax,0x2
c0013b12:	76 53                	jbe    c0013b67 <sysCallSize(regs*)+0x63>
c0013b14:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013b19:	76 19                	jbe    c0013b34 <sysCallSize(regs*)+0x30>
c0013b1b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013b1e:	31 d2                	xor    edx,edx
c0013b20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b2d:	31 c0                	xor    eax,eax
c0013b2f:	83 c4 18             	add    esp,0x18
c0013b32:	5b                   	pop    ebx
c0013b33:	c3                   	ret    
c0013b34:	83 ec 0c             	sub    esp,0xc
c0013b37:	50                   	push   eax
c0013b38:	e8 f6 76 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c0013b3d:	83 c4 0c             	add    esp,0xc
c0013b40:	8d 54 24 13          	lea    edx,[esp+0x13]
c0013b44:	52                   	push   edx
c0013b45:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b48:	50                   	push   eax
c0013b49:	e8 88 94 ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c0013b4e:	83 c4 10             	add    esp,0x10
c0013b51:	85 c0                	test   eax,eax
c0013b53:	0f 95 c0             	setne  al
c0013b56:	31 d2                	xor    edx,edx
c0013b58:	0f b6 c0             	movzx  eax,al
c0013b5b:	f7 d8                	neg    eax
c0013b5d:	83 d2 00             	adc    edx,0x0
c0013b60:	83 c4 18             	add    esp,0x18
c0013b63:	f7 da                	neg    edx
c0013b65:	5b                   	pop    ebx
c0013b66:	c3                   	ret    
c0013b67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013b6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013b71:	83 c4 18             	add    esp,0x18
c0013b74:	5b                   	pop    ebx
c0013b75:	c3                   	ret    

c0013b76 <sysCallSizeFromFilename(regs*)>:
c0013b76:	57                   	push   edi
c0013b77:	56                   	push   esi
c0013b78:	53                   	push   ebx
c0013b79:	83 ec 20             	sub    esp,0x20
c0013b7c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b80:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0013b83:	83 fb 02             	cmp    ebx,0x2
c0013b86:	0f 86 88 00 00 00    	jbe    c0013c14 <sysCallSizeFromFilename(regs*)+0x9e>
c0013b8c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013b92:	76 1b                	jbe    c0013baf <sysCallSizeFromFilename(regs*)+0x39>
c0013b94:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b97:	31 d2                	xor    edx,edx
c0013b99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ba6:	83 c4 20             	add    esp,0x20
c0013ba9:	31 c0                	xor    eax,eax
c0013bab:	5b                   	pop    ebx
c0013bac:	5e                   	pop    esi
c0013bad:	5f                   	pop    edi
c0013bae:	c3                   	ret    
c0013baf:	83 ec 0c             	sub    esp,0xc
c0013bb2:	68 14 01 00 00       	push   0x114
c0013bb7:	e8 db 5b ff ff       	call   c0009797 <malloc>
c0013bbc:	83 c4 0c             	add    esp,0xc
c0013bbf:	89 c7                	mov    edi,eax
c0013bc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bc6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013bc9:	53                   	push   ebx
c0013bca:	57                   	push   edi
c0013bcb:	e8 80 90 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0013bd0:	83 c4 0c             	add    esp,0xc
c0013bd3:	8d 44 24 23          	lea    eax,[esp+0x23]
c0013bd7:	50                   	push   eax
c0013bd8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013bdb:	57                   	push   edi
c0013bdc:	e8 f5 93 ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c0013be1:	83 c4 10             	add    esp,0x10
c0013be4:	85 ff                	test   edi,edi
c0013be6:	74 14                	je     c0013bfc <sysCallSizeFromFilename(regs*)+0x86>
c0013be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bec:	8b 17                	mov    edx,DWORD PTR [edi]
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	57                   	push   edi
c0013bf2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bfc:	85 c0                	test   eax,eax
c0013bfe:	0f 95 c0             	setne  al
c0013c01:	31 d2                	xor    edx,edx
c0013c03:	0f b6 c0             	movzx  eax,al
c0013c06:	f7 d8                	neg    eax
c0013c08:	83 d2 00             	adc    edx,0x0
c0013c0b:	83 c4 20             	add    esp,0x20
c0013c0e:	f7 da                	neg    edx
c0013c10:	5b                   	pop    ebx
c0013c11:	5e                   	pop    esi
c0013c12:	5f                   	pop    edi
c0013c13:	c3                   	ret    
c0013c14:	83 c4 20             	add    esp,0x20
c0013c17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013c1c:	5b                   	pop    ebx
c0013c1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013c22:	5e                   	pop    esi
c0013c23:	5f                   	pop    edi
c0013c24:	c3                   	ret    

c0013c25 <sysCallClose(regs*)>:
c0013c25:	53                   	push   ebx
c0013c26:	83 ec 08             	sub    esp,0x8
c0013c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013c30:	83 f8 02             	cmp    eax,0x2
c0013c33:	76 41                	jbe    c0013c76 <sysCallClose(regs*)+0x51>
c0013c35:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0013c3b:	83 fa 01             	cmp    edx,0x1
c0013c3e:	76 2d                	jbe    c0013c6d <sysCallClose(regs*)+0x48>
c0013c40:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013c45:	77 2f                	ja     c0013c76 <sysCallClose(regs*)+0x51>
c0013c47:	83 ec 0c             	sub    esp,0xc
c0013c4a:	50                   	push   eax
c0013c4b:	e8 e3 75 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c0013c50:	89 c3                	mov    ebx,eax
c0013c52:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c55:	e8 2e 91 ff ff       	call   c000cd88 <File::close()>
c0013c5a:	83 c4 10             	add    esp,0x10
c0013c5d:	85 db                	test   ebx,ebx
c0013c5f:	74 0c                	je     c0013c6d <sysCallClose(regs*)+0x48>
c0013c61:	83 ec 0c             	sub    esp,0xc
c0013c64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c66:	53                   	push   ebx
c0013c67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	31 c0                	xor    eax,eax
c0013c6f:	31 d2                	xor    edx,edx
c0013c71:	83 c4 08             	add    esp,0x8
c0013c74:	5b                   	pop    ebx
c0013c75:	c3                   	ret    
c0013c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013c7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013c80:	83 c4 08             	add    esp,0x8
c0013c83:	5b                   	pop    ebx
c0013c84:	c3                   	ret    

c0013c85 <sysCallOpenDir(regs*)>:
c0013c85:	56                   	push   esi
c0013c86:	53                   	push   ebx
c0013c87:	53                   	push   ebx
c0013c88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c8c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0013c8f:	85 f6                	test   esi,esi
c0013c91:	74 59                	je     c0013cec <sysCallOpenDir(regs*)+0x67>
c0013c93:	83 ec 0c             	sub    esp,0xc
c0013c96:	68 14 01 00 00       	push   0x114
c0013c9b:	e8 f7 5a ff ff       	call   c0009797 <malloc>
c0013ca0:	83 c4 0c             	add    esp,0xc
c0013ca3:	89 c6                	mov    esi,eax
c0013ca5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013caa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013cad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cb0:	56                   	push   esi
c0013cb1:	e8 fa 94 ff ff       	call   c000d1b0 <Directory::Directory(char const*, Process*)>
c0013cb6:	83 c4 10             	add    esp,0x10
c0013cb9:	85 f6                	test   esi,esi
c0013cbb:	74 2f                	je     c0013cec <sysCallOpenDir(regs*)+0x67>
c0013cbd:	83 ec 0c             	sub    esp,0xc
c0013cc0:	56                   	push   esi
c0013cc1:	e8 c4 95 ff ff       	call   c000d28a <Directory::open()>
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	85 c0                	test   eax,eax
c0013ccb:	75 1f                	jne    c0013cec <sysCallOpenDir(regs*)+0x67>
c0013ccd:	83 ec 0c             	sub    esp,0xc
c0013cd0:	56                   	push   esi
c0013cd1:	e8 68 72 ff ff       	call   c000af3e <UnixFile::getFileDescriptor()>
c0013cd6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	89 02                	mov    DWORD PTR [edx],eax
c0013cde:	c1 f8 1f             	sar    eax,0x1f
c0013ce1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ce4:	31 c0                	xor    eax,eax
c0013ce6:	59                   	pop    ecx
c0013ce7:	31 d2                	xor    edx,edx
c0013ce9:	5b                   	pop    ebx
c0013cea:	5e                   	pop    esi
c0013ceb:	c3                   	ret    
c0013cec:	59                   	pop    ecx
c0013ced:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013cf2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013cf7:	5b                   	pop    ebx
c0013cf8:	5e                   	pop    esi
c0013cf9:	c3                   	ret    

c0013cfa <sysCallCloseDir(regs*)>:
c0013cfa:	53                   	push   ebx
c0013cfb:	83 ec 08             	sub    esp,0x8
c0013cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d05:	8d 50 fd             	lea    edx,[eax-0x3]
c0013d08:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013d0e:	77 2f                	ja     c0013d3f <sysCallCloseDir(regs*)+0x45>
c0013d10:	83 ec 0c             	sub    esp,0xc
c0013d13:	50                   	push   eax
c0013d14:	e8 1a 75 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c0013d19:	89 c3                	mov    ebx,eax
c0013d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d1e:	e8 c3 95 ff ff       	call   c000d2e6 <Directory::close()>
c0013d23:	83 c4 10             	add    esp,0x10
c0013d26:	85 db                	test   ebx,ebx
c0013d28:	74 0c                	je     c0013d36 <sysCallCloseDir(regs*)+0x3c>
c0013d2a:	83 ec 0c             	sub    esp,0xc
c0013d2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d2f:	53                   	push   ebx
c0013d30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d33:	83 c4 10             	add    esp,0x10
c0013d36:	31 c0                	xor    eax,eax
c0013d38:	31 d2                	xor    edx,edx
c0013d3a:	83 c4 08             	add    esp,0x8
c0013d3d:	5b                   	pop    ebx
c0013d3e:	c3                   	ret    
c0013d3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d44:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013d49:	83 c4 08             	add    esp,0x8
c0013d4c:	5b                   	pop    ebx
c0013d4d:	c3                   	ret    

c0013d4e <sysCallMakeDir(regs*)>:
c0013d4e:	56                   	push   esi
c0013d4f:	53                   	push   ebx
c0013d50:	83 ec 10             	sub    esp,0x10
c0013d53:	68 14 01 00 00       	push   0x114
c0013d58:	e8 3a 5a ff ff       	call   c0009797 <malloc>
c0013d5d:	83 c4 0c             	add    esp,0xc
c0013d60:	89 c3                	mov    ebx,eax
c0013d62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d67:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013d6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d6e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d71:	53                   	push   ebx
c0013d72:	e8 39 94 ff ff       	call   c000d1b0 <Directory::Directory(char const*, Process*)>
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	85 db                	test   ebx,ebx
c0013d7c:	74 32                	je     c0013db0 <sysCallMakeDir(regs*)+0x62>
c0013d7e:	83 ec 0c             	sub    esp,0xc
c0013d81:	53                   	push   ebx
c0013d82:	e8 e3 96 ff ff       	call   c000d46a <Directory::create()>
c0013d87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d8a:	89 c6                	mov    esi,eax
c0013d8c:	e8 55 95 ff ff       	call   c000d2e6 <Directory::close()>
c0013d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d99:	83 c4 10             	add    esp,0x10
c0013d9c:	31 c0                	xor    eax,eax
c0013d9e:	59                   	pop    ecx
c0013d9f:	85 f6                	test   esi,esi
c0013da1:	5b                   	pop    ebx
c0013da2:	0f 95 c0             	setne  al
c0013da5:	5e                   	pop    esi
c0013da6:	31 d2                	xor    edx,edx
c0013da8:	f7 d8                	neg    eax
c0013daa:	83 d2 00             	adc    edx,0x0
c0013dad:	f7 da                	neg    edx
c0013daf:	c3                   	ret    
c0013db0:	59                   	pop    ecx
c0013db1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013db6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013dbb:	5b                   	pop    ebx
c0013dbc:	5e                   	pop    esi
c0013dbd:	c3                   	ret    

c0013dbe <sysCallWait(regs*)>:
c0013dbe:	83 ec 10             	sub    esp,0x10
c0013dc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dc5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013dc8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013dcb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013dce:	e8 d9 23 00 00       	call   c00161ac <waitTask(int, int*, int)>
c0013dd3:	83 c4 1c             	add    esp,0x1c
c0013dd6:	99                   	cdq    
c0013dd7:	c3                   	ret    

c0013dd8 <sysCallNotImpl(regs*)>:
c0013dd8:	83 ec 18             	sub    esp,0x18
c0013ddb:	68 22 42 02 c0       	push   0xc0024222
c0013de0:	e8 6a ec ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0013de5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013dea:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013def:	83 c4 1c             	add    esp,0x1c
c0013df2:	c3                   	ret    

c0013df3 <sysPanic(regs*)>:
c0013df3:	83 ec 18             	sub    esp,0x18
c0013df6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dfa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013dfd:	e8 4d ec ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0013e02:	b8 01 00 00 00       	mov    eax,0x1
c0013e07:	31 d2                	xor    edx,edx
c0013e09:	83 c4 1c             	add    esp,0x1c
c0013e0c:	c3                   	ret    

c0013e0d <sysCallRmdir(regs*)>:
c0013e0d:	56                   	push   esi
c0013e0e:	53                   	push   ebx
c0013e0f:	83 ec 20             	sub    esp,0x20
c0013e12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e16:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0013e19:	68 14 01 00 00       	push   0x114
c0013e1e:	e8 74 59 ff ff       	call   c0009797 <malloc>
c0013e23:	83 c4 0c             	add    esp,0xc
c0013e26:	89 c3                	mov    ebx,eax
c0013e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e2d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e30:	56                   	push   esi
c0013e31:	53                   	push   ebx
c0013e32:	e8 19 8e ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0013e37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e3a:	e8 63 90 ff ff       	call   c000cea2 <File::unlink()>
c0013e3f:	83 c4 10             	add    esp,0x10
c0013e42:	85 db                	test   ebx,ebx
c0013e44:	74 14                	je     c0013e5a <sysCallRmdir(regs*)+0x4d>
c0013e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e4a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	53                   	push   ebx
c0013e50:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013e53:	83 c4 10             	add    esp,0x10
c0013e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e5a:	85 c0                	test   eax,eax
c0013e5c:	0f 95 c0             	setne  al
c0013e5f:	31 d2                	xor    edx,edx
c0013e61:	0f b6 c0             	movzx  eax,al
c0013e64:	f7 d8                	neg    eax
c0013e66:	83 d2 00             	adc    edx,0x0
c0013e69:	83 c4 14             	add    esp,0x14
c0013e6c:	f7 da                	neg    edx
c0013e6e:	5b                   	pop    ebx
c0013e6f:	5e                   	pop    esi
c0013e70:	c3                   	ret    

c0013e71 <sysCallUnlink(regs*)>:
c0013e71:	56                   	push   esi
c0013e72:	53                   	push   ebx
c0013e73:	83 ec 20             	sub    esp,0x20
c0013e76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e7a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0013e7d:	68 14 01 00 00       	push   0x114
c0013e82:	e8 10 59 ff ff       	call   c0009797 <malloc>
c0013e87:	83 c4 0c             	add    esp,0xc
c0013e8a:	89 c3                	mov    ebx,eax
c0013e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e91:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e94:	56                   	push   esi
c0013e95:	53                   	push   ebx
c0013e96:	e8 b5 8d ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0013e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e9e:	e8 ff 8f ff ff       	call   c000cea2 <File::unlink()>
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	85 db                	test   ebx,ebx
c0013ea8:	74 14                	je     c0013ebe <sysCallUnlink(regs*)+0x4d>
c0013eaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013eae:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	53                   	push   ebx
c0013eb4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ebe:	85 c0                	test   eax,eax
c0013ec0:	0f 95 c0             	setne  al
c0013ec3:	31 d2                	xor    edx,edx
c0013ec5:	0f b6 c0             	movzx  eax,al
c0013ec8:	f7 d8                	neg    eax
c0013eca:	83 d2 00             	adc    edx,0x0
c0013ecd:	83 c4 14             	add    esp,0x14
c0013ed0:	f7 da                	neg    edx
c0013ed2:	5b                   	pop    ebx
c0013ed3:	5e                   	pop    esi
c0013ed4:	c3                   	ret    

c0013ed5 <sysCallGetArgv(regs*)>:
c0013ed5:	83 ec 0c             	sub    esp,0xc
c0013ed8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013edc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013edf:	85 c0                	test   eax,eax
c0013ee1:	78 2b                	js     c0013f0e <sysCallGetArgv(regs*)+0x39>
c0013ee3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013ee9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0013eec:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0013ef2:	7d 1a                	jge    c0013f0e <sysCallGetArgv(regs*)+0x39>
c0013ef4:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0013efb:	85 c0                	test   eax,eax
c0013efd:	74 17                	je     c0013f16 <sysCallGetArgv(regs*)+0x41>
c0013eff:	83 ec 08             	sub    esp,0x8
c0013f02:	50                   	push   eax
c0013f03:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013f06:	e8 59 c6 fe ff       	call   c0000564 <strcpy>
c0013f0b:	83 c4 10             	add    esp,0x10
c0013f0e:	31 c0                	xor    eax,eax
c0013f10:	31 d2                	xor    edx,edx
c0013f12:	83 c4 0c             	add    esp,0xc
c0013f15:	c3                   	ret    
c0013f16:	b8 01 00 00 00       	mov    eax,0x1
c0013f1b:	31 d2                	xor    edx,edx
c0013f1d:	83 c4 0c             	add    esp,0xc
c0013f20:	c3                   	ret    

c0013f21 <sysCallTTYName(regs*)>:
c0013f21:	56                   	push   esi
c0013f22:	53                   	push   ebx
c0013f23:	53                   	push   ebx
c0013f24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f28:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013f2b:	85 c0                	test   eax,eax
c0013f2d:	74 5f                	je     c0013f8e <sysCallTTYName(regs*)+0x6d>
c0013f2f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013f32:	83 f8 02             	cmp    eax,0x2
c0013f35:	77 3e                	ja     c0013f75 <sysCallTTYName(regs*)+0x54>
c0013f37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f3f:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0013f45:	85 db                	test   ebx,ebx
c0013f47:	74 45                	je     c0013f8e <sysCallTTYName(regs*)+0x6d>
c0013f49:	83 ec 0c             	sub    esp,0xc
c0013f4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f4e:	53                   	push   ebx
c0013f4f:	ff 10                	call   DWORD PTR [eax]
c0013f51:	83 c4 10             	add    esp,0x10
c0013f54:	84 c0                	test   al,al
c0013f56:	74 41                	je     c0013f99 <sysCallTTYName(regs*)+0x78>
c0013f58:	83 ec 08             	sub    esp,0x8
c0013f5b:	81 c3 82 00 00 00    	add    ebx,0x82
c0013f61:	53                   	push   ebx
c0013f62:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013f65:	e8 fa c5 fe ff       	call   c0000564 <strcpy>
c0013f6a:	83 c4 10             	add    esp,0x10
c0013f6d:	31 c0                	xor    eax,eax
c0013f6f:	59                   	pop    ecx
c0013f70:	31 d2                	xor    edx,edx
c0013f72:	5b                   	pop    ebx
c0013f73:	5e                   	pop    esi
c0013f74:	c3                   	ret    
c0013f75:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013f7a:	74 bb                	je     c0013f37 <sysCallTTYName(regs*)+0x16>
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	50                   	push   eax
c0013f80:	e8 ae 72 ff ff       	call   c000b233 <getFromFileDescriptor(int)>
c0013f85:	83 c4 10             	add    esp,0x10
c0013f88:	89 c3                	mov    ebx,eax
c0013f8a:	85 db                	test   ebx,ebx
c0013f8c:	75 bb                	jne    c0013f49 <sysCallTTYName(regs*)+0x28>
c0013f8e:	59                   	pop    ecx
c0013f8f:	b8 01 00 00 00       	mov    eax,0x1
c0013f94:	31 d2                	xor    edx,edx
c0013f96:	5b                   	pop    ebx
c0013f97:	5e                   	pop    esi
c0013f98:	c3                   	ret    
c0013f99:	59                   	pop    ecx
c0013f9a:	b8 02 00 00 00       	mov    eax,0x2
c0013f9f:	31 d2                	xor    edx,edx
c0013fa1:	5b                   	pop    ebx
c0013fa2:	5e                   	pop    esi
c0013fa3:	c3                   	ret    

c0013fa4 <sysCallUSleep(regs*)>:
c0013fa4:	83 ec 1c             	sub    esp,0x1c
c0013fa7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013fab:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013fae:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0013fb1:	6a 00                	push   0x0
c0013fb3:	6a 64                	push   0x64
c0013fb5:	52                   	push   edx
c0013fb6:	50                   	push   eax
c0013fb7:	e8 84 d4 00 00       	call   c0021440 <__udivdi3>
c0013fbc:	83 c4 14             	add    esp,0x14
c0013fbf:	50                   	push   eax
c0013fc0:	e8 b7 22 00 00       	call   c001627c <milliTenthSleep(unsigned int)>
c0013fc5:	31 c0                	xor    eax,eax
c0013fc7:	31 d2                	xor    edx,edx
c0013fc9:	83 c4 1c             	add    esp,0x1c
c0013fcc:	c3                   	ret    

c0013fcd <sysCallSpawn(regs*)>:
c0013fcd:	56                   	push   esi
c0013fce:	53                   	push   ebx
c0013fcf:	50                   	push   eax
c0013fd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fd4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013fd7:	85 c0                	test   eax,eax
c0013fd9:	75 08                	jne    c0013fe3 <sysCallSpawn(regs*)+0x16>
c0013fdb:	59                   	pop    ecx
c0013fdc:	31 c0                	xor    eax,eax
c0013fde:	31 d2                	xor    edx,edx
c0013fe0:	5b                   	pop    ebx
c0013fe1:	5e                   	pop    esi
c0013fe2:	c3                   	ret    
c0013fe3:	83 ec 0c             	sub    esp,0xc
c0013fe6:	68 1f 07 00 00       	push   0x71f
c0013feb:	e8 a7 57 ff ff       	call   c0009797 <malloc>
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	89 c6                	mov    esi,eax
c0013ff5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0013ff8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ffb:	85 c0                	test   eax,eax
c0013ffd:	75 32                	jne    c0014031 <sysCallSpawn(regs*)+0x64>
c0013fff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014004:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014007:	52                   	push   edx
c0014008:	50                   	push   eax
c0014009:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001400c:	56                   	push   esi
c001400d:	e8 62 19 00 00       	call   c0015974 <Process::Process(char const*, Process*, char**)>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001401c:	75 bd                	jne    c0013fdb <sysCallSpawn(regs*)+0xe>
c001401e:	83 ec 0c             	sub    esp,0xc
c0014021:	56                   	push   esi
c0014022:	e8 39 1e 00 00       	call   c0015e60 <Process::createUserThread()>
c0014027:	8b 06                	mov    eax,DWORD PTR [esi]
c0014029:	83 c4 10             	add    esp,0x10
c001402c:	99                   	cdq    
c001402d:	59                   	pop    ecx
c001402e:	5b                   	pop    ebx
c001402f:	5e                   	pop    esi
c0014030:	c3                   	ret    
c0014031:	31 c0                	xor    eax,eax
c0014033:	eb d2                	jmp    c0014007 <sysCallSpawn(regs*)+0x3a>

c0014035 <sysCallGetEnv(regs*)>:
c0014035:	57                   	push   edi
c0014036:	56                   	push   esi
c0014037:	53                   	push   ebx
c0014038:	83 ec 1c             	sub    esp,0x1c
c001403b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001403f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014044:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014047:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001404a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001404d:	e8 49 e9 ff ff       	call   c001299b <Krnl::getProcessTotalEnvCount(Process*)>
c0014052:	83 c4 10             	add    esp,0x10
c0014055:	39 c7                	cmp    edi,eax
c0014057:	7c 14                	jl     c001406d <sysCallGetEnv(regs*)+0x38>
c0014059:	85 f6                	test   esi,esi
c001405b:	75 0b                	jne    c0014068 <sysCallGetEnv(regs*)+0x33>
c001405d:	83 c4 10             	add    esp,0x10
c0014060:	31 c0                	xor    eax,eax
c0014062:	5b                   	pop    ebx
c0014063:	31 d2                	xor    edx,edx
c0014065:	5e                   	pop    esi
c0014066:	5f                   	pop    edi
c0014067:	c3                   	ret    
c0014068:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001406b:	eb f0                	jmp    c001405d <sysCallGetEnv(regs*)+0x28>
c001406d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014071:	52                   	push   edx
c0014072:	57                   	push   edi
c0014073:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014079:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c001407c:	50                   	push   eax
c001407d:	e8 39 e9 ff ff       	call   c00129bb <Krnl::getProcessEnvPair(Process*, int)>
c0014082:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014085:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014089:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001408d:	83 c4 0c             	add    esp,0xc
c0014090:	85 c9                	test   ecx,ecx
c0014092:	75 23                	jne    c00140b7 <sysCallGetEnv(regs*)+0x82>
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	50                   	push   eax
c0014098:	e8 27 c4 fe ff       	call   c00004c4 <strlen>
c001409d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140a0:	89 c3                	mov    ebx,eax
c00140a2:	e8 1d c4 fe ff       	call   c00004c4 <strlen>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00140ae:	83 c4 10             	add    esp,0x10
c00140b1:	31 d2                	xor    edx,edx
c00140b3:	5b                   	pop    ebx
c00140b4:	5e                   	pop    esi
c00140b5:	5f                   	pop    edi
c00140b6:	c3                   	ret    
c00140b7:	83 ec 08             	sub    esp,0x8
c00140ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00140bd:	50                   	push   eax
c00140be:	56                   	push   esi
c00140bf:	e8 a0 c4 fe ff       	call   c0000564 <strcpy>
c00140c4:	58                   	pop    eax
c00140c5:	5a                   	pop    edx
c00140c6:	68 3c 42 02 c0       	push   0xc002423c
c00140cb:	56                   	push   esi
c00140cc:	e8 d3 c5 fe ff       	call   c00006a4 <strcat>
c00140d1:	59                   	pop    ecx
c00140d2:	5b                   	pop    ebx
c00140d3:	57                   	push   edi
c00140d4:	56                   	push   esi
c00140d5:	e8 ca c5 fe ff       	call   c00006a4 <strcat>
c00140da:	83 c4 10             	add    esp,0x10
c00140dd:	e9 7b ff ff ff       	jmp    c001405d <sysCallGetEnv(regs*)+0x28>

c00140e2 <sysSetFatAttrib(regs*)>:
c00140e2:	57                   	push   edi
c00140e3:	56                   	push   esi
c00140e4:	53                   	push   ebx
c00140e5:	83 ec 1c             	sub    esp,0x1c
c00140e8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00140ec:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00140ef:	68 14 01 00 00       	push   0x114
c00140f4:	e8 9e 56 ff ff       	call   c0009797 <malloc>
c00140f9:	83 c4 0c             	add    esp,0xc
c00140fc:	89 c3                	mov    ebx,eax
c00140fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014103:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014106:	57                   	push   edi
c0014107:	53                   	push   ebx
c0014108:	e8 43 8b ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c001410d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014110:	83 c4 0c             	add    esp,0xc
c0014113:	0f b6 d4             	movzx  edx,ah
c0014116:	0f b6 c0             	movzx  eax,al
c0014119:	52                   	push   edx
c001411a:	50                   	push   eax
c001411b:	53                   	push   ebx
c001411c:	e8 1b 8e ff ff       	call   c000cf3c <File::chfatattr(unsigned char, unsigned char)>
c0014121:	83 c4 10             	add    esp,0x10
c0014124:	85 db                	test   ebx,ebx
c0014126:	74 14                	je     c001413c <sysSetFatAttrib(regs*)+0x5a>
c0014128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001412c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001412e:	83 ec 0c             	sub    esp,0xc
c0014131:	53                   	push   ebx
c0014132:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014135:	83 c4 10             	add    esp,0x10
c0014138:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001413c:	85 c0                	test   eax,eax
c001413e:	0f 95 c0             	setne  al
c0014141:	31 d2                	xor    edx,edx
c0014143:	0f b6 c0             	movzx  eax,al
c0014146:	f7 d8                	neg    eax
c0014148:	83 d2 00             	adc    edx,0x0
c001414b:	83 c4 10             	add    esp,0x10
c001414e:	f7 da                	neg    edx
c0014150:	5b                   	pop    ebx
c0014151:	5e                   	pop    esi
c0014152:	5f                   	pop    edi
c0014153:	c3                   	ret    

c0014154 <sysPipe(regs*)>:
c0014154:	57                   	push   edi
c0014155:	56                   	push   esi
c0014156:	53                   	push   ebx
c0014157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415b:	83 ec 0c             	sub    esp,0xc
c001415e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0014161:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0014164:	6a 20                	push   0x20
c0014166:	e8 2c 56 ff ff       	call   c0009797 <malloc>
c001416b:	89 c3                	mov    ebx,eax
c001416d:	58                   	pop    eax
c001416e:	5a                   	pop    edx
c001416f:	68 00 50 00 00       	push   0x5000
c0014174:	53                   	push   ebx
c0014175:	e8 aa 60 ff ff       	call   c000a224 <Pipe::Pipe(int)>
c001417a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001417d:	e8 bc 6d ff ff       	call   c000af3e <UnixFile::getFileDescriptor()>
c0014182:	89 07                	mov    DWORD PTR [edi],eax
c0014184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014187:	e8 b2 6d ff ff       	call   c000af3e <UnixFile::getFileDescriptor()>
c001418c:	83 c4 10             	add    esp,0x10
c001418f:	89 06                	mov    DWORD PTR [esi],eax
c0014191:	31 d2                	xor    edx,edx
c0014193:	5b                   	pop    ebx
c0014194:	31 c0                	xor    eax,eax
c0014196:	5e                   	pop    esi
c0014197:	5f                   	pop    edi
c0014198:	c3                   	ret    

c0014199 <sysGetUnixTime(regs*)>:
c0014199:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001419e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00141a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141a8:	e9 01 95 ff ff       	jmp    c000d6ae <Clock::timeInSecondsLocal()>

c00141ad <string_ends_with(char const*, char const*)>:
c00141ad:	57                   	push   edi
c00141ae:	56                   	push   esi
c00141af:	53                   	push   ebx
c00141b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00141b8:	83 ec 0c             	sub    esp,0xc
c00141bb:	53                   	push   ebx
c00141bc:	e8 03 c3 fe ff       	call   c00004c4 <strlen>
c00141c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141c4:	89 c6                	mov    esi,eax
c00141c6:	e8 f9 c2 fe ff       	call   c00004c4 <strlen>
c00141cb:	83 c4 10             	add    esp,0x10
c00141ce:	39 c6                	cmp    esi,eax
c00141d0:	7d 06                	jge    c00141d8 <string_ends_with(char const*, char const*)+0x2b>
c00141d2:	5b                   	pop    ebx
c00141d3:	31 c0                	xor    eax,eax
c00141d5:	5e                   	pop    esi
c00141d6:	5f                   	pop    edi
c00141d7:	c3                   	ret    
c00141d8:	83 ec 08             	sub    esp,0x8
c00141db:	29 c6                	sub    esi,eax
c00141dd:	57                   	push   edi
c00141de:	01 f3                	add    ebx,esi
c00141e0:	53                   	push   ebx
c00141e1:	e8 0a c4 fe ff       	call   c00005f0 <strcmp>
c00141e6:	83 c4 10             	add    esp,0x10
c00141e9:	85 c0                	test   eax,eax
c00141eb:	5b                   	pop    ebx
c00141ec:	0f 94 c0             	sete   al
c00141ef:	5e                   	pop    esi
c00141f0:	0f b6 c0             	movzx  eax,al
c00141f3:	5f                   	pop    edi
c00141f4:	c3                   	ret    

c00141f5 <sysCallOpen(regs*)>:
c00141f5:	56                   	push   esi
c00141f6:	53                   	push   ebx
c00141f7:	81 ec 04 01 00 00    	sub    esp,0x104
c00141fd:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0014204:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014207:	85 c9                	test   ecx,ecx
c0014209:	0f 84 ad 01 00 00    	je     c00143bc <sysCallOpen(regs*)+0x1c7>
c001420f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0014212:	85 c0                	test   eax,eax
c0014214:	0f 84 a2 01 00 00    	je     c00143bc <sysCallOpen(regs*)+0x1c7>
c001421a:	52                   	push   edx
c001421b:	68 3e 42 02 c0       	push   0xc002423e
c0014220:	50                   	push   eax
c0014221:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014225:	56                   	push   esi
c0014226:	e8 7b 88 ff ff       	call   c000caa6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001422b:	89 34 24             	mov    DWORD PTR [esp],esi
c001422e:	e8 91 c2 fe ff       	call   c00004c4 <strlen>
c0014233:	83 c4 10             	add    esp,0x10
c0014236:	48                   	dec    eax
c0014237:	74 1d                	je     c0014256 <sysCallOpen(regs*)+0x61>
c0014239:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001423c:	eb 0f                	jmp    c001424d <sysCallOpen(regs*)+0x58>
c001423e:	80 fa 3a             	cmp    dl,0x3a
c0014241:	74 0f                	je     c0014252 <sysCallOpen(regs*)+0x5d>
c0014243:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0014247:	48                   	dec    eax
c0014248:	74 0c                	je     c0014256 <sysCallOpen(regs*)+0x61>
c001424a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001424d:	80 fa 2e             	cmp    dl,0x2e
c0014250:	75 ec                	jne    c001423e <sysCallOpen(regs*)+0x49>
c0014252:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0014256:	83 ec 08             	sub    esp,0x8
c0014259:	68 42 42 02 c0       	push   0xc0024242
c001425e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014261:	e8 47 ff ff ff       	call   c00141ad <string_ends_with(char const*, char const*)>
c0014266:	83 c4 10             	add    esp,0x10
c0014269:	85 c0                	test   eax,eax
c001426b:	74 1d                	je     c001428a <sysCallOpen(regs*)+0x95>
c001426d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014270:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0014276:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001427d:	81 c4 04 01 00 00    	add    esp,0x104
c0014283:	31 c0                	xor    eax,eax
c0014285:	31 d2                	xor    edx,edx
c0014287:	5b                   	pop    ebx
c0014288:	5e                   	pop    esi
c0014289:	c3                   	ret    
c001428a:	83 ec 08             	sub    esp,0x8
c001428d:	68 47 42 02 c0       	push   0xc0024247
c0014292:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014295:	e8 13 ff ff ff       	call   c00141ad <string_ends_with(char const*, char const*)>
c001429a:	83 c4 10             	add    esp,0x10
c001429d:	85 c0                	test   eax,eax
c001429f:	75 cc                	jne    c001426d <sysCallOpen(regs*)+0x78>
c00142a1:	83 ec 08             	sub    esp,0x8
c00142a4:	68 43 42 02 c0       	push   0xc0024243
c00142a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142ac:	e8 3f c3 fe ff       	call   c00005f0 <strcmp>
c00142b1:	83 c4 10             	add    esp,0x10
c00142b4:	85 c0                	test   eax,eax
c00142b6:	74 b5                	je     c001426d <sysCallOpen(regs*)+0x78>
c00142b8:	83 ec 08             	sub    esp,0x8
c00142bb:	68 42 42 02 c0       	push   0xc0024242
c00142c0:	56                   	push   esi
c00142c1:	e8 e7 fe ff ff       	call   c00141ad <string_ends_with(char const*, char const*)>
c00142c6:	83 c4 10             	add    esp,0x10
c00142c9:	85 c0                	test   eax,eax
c00142cb:	75 a0                	jne    c001426d <sysCallOpen(regs*)+0x78>
c00142cd:	83 ec 08             	sub    esp,0x8
c00142d0:	68 4c 42 02 c0       	push   0xc002424c
c00142d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142d8:	e8 d0 fe ff ff       	call   c00141ad <string_ends_with(char const*, char const*)>
c00142dd:	83 c4 10             	add    esp,0x10
c00142e0:	85 c0                	test   eax,eax
c00142e2:	0f 85 e7 00 00 00    	jne    c00143cf <sysCallOpen(regs*)+0x1da>
c00142e8:	83 ec 08             	sub    esp,0x8
c00142eb:	68 51 42 02 c0       	push   0xc0024251
c00142f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142f3:	e8 b5 fe ff ff       	call   c00141ad <string_ends_with(char const*, char const*)>
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	85 c0                	test   eax,eax
c00142fd:	0f 85 cc 00 00 00    	jne    c00143cf <sysCallOpen(regs*)+0x1da>
c0014303:	83 ec 08             	sub    esp,0x8
c0014306:	68 4d 42 02 c0       	push   0xc002424d
c001430b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001430e:	e8 dd c2 fe ff       	call   c00005f0 <strcmp>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	85 c0                	test   eax,eax
c0014318:	0f 84 b1 00 00 00    	je     c00143cf <sysCallOpen(regs*)+0x1da>
c001431e:	83 ec 08             	sub    esp,0x8
c0014321:	68 4c 42 02 c0       	push   0xc002424c
c0014326:	56                   	push   esi
c0014327:	e8 81 fe ff ff       	call   c00141ad <string_ends_with(char const*, char const*)>
c001432c:	83 c4 10             	add    esp,0x10
c001432f:	85 c0                	test   eax,eax
c0014331:	0f 85 98 00 00 00    	jne    c00143cf <sysCallOpen(regs*)+0x1da>
c0014337:	83 ec 0c             	sub    esp,0xc
c001433a:	68 14 01 00 00       	push   0x114
c001433f:	e8 53 54 ff ff       	call   c0009797 <malloc>
c0014344:	83 c4 0c             	add    esp,0xc
c0014347:	89 c6                	mov    esi,eax
c0014349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001434e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014351:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014354:	56                   	push   esi
c0014355:	e8 f6 88 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c001435a:	83 c4 10             	add    esp,0x10
c001435d:	85 f6                	test   esi,esi
c001435f:	74 5b                	je     c00143bc <sysCallOpen(regs*)+0x1c7>
c0014361:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0014364:	0f b6 c2             	movzx  eax,dl
c0014367:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001436a:	89 d0                	mov    eax,edx
c001436c:	83 e0 01             	and    eax,0x1
c001436f:	f6 c2 02             	test   dl,0x2
c0014372:	74 03                	je     c0014377 <sysCallOpen(regs*)+0x182>
c0014374:	83 c8 02             	or     eax,0x2
c0014377:	f6 c2 04             	test   dl,0x4
c001437a:	74 03                	je     c001437f <sysCallOpen(regs*)+0x18a>
c001437c:	83 c8 04             	or     eax,0x4
c001437f:	f6 c2 08             	test   dl,0x8
c0014382:	74 03                	je     c0014387 <sysCallOpen(regs*)+0x192>
c0014384:	83 c8 0a             	or     eax,0xa
c0014387:	83 e2 10             	and    edx,0x10
c001438a:	74 03                	je     c001438f <sysCallOpen(regs*)+0x19a>
c001438c:	83 c8 12             	or     eax,0x12
c001438f:	83 ec 08             	sub    esp,0x8
c0014392:	50                   	push   eax
c0014393:	56                   	push   esi
c0014394:	e8 91 89 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c0014399:	83 c4 10             	add    esp,0x10
c001439c:	85 c0                	test   eax,eax
c001439e:	75 1c                	jne    c00143bc <sysCallOpen(regs*)+0x1c7>
c00143a0:	83 ec 0c             	sub    esp,0xc
c00143a3:	56                   	push   esi
c00143a4:	e8 95 6b ff ff       	call   c000af3e <UnixFile::getFileDescriptor()>
c00143a9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00143ac:	83 c4 10             	add    esp,0x10
c00143af:	89 02                	mov    DWORD PTR [edx],eax
c00143b1:	c1 f8 1f             	sar    eax,0x1f
c00143b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00143b7:	e9 c1 fe ff ff       	jmp    c001427d <sysCallOpen(regs*)+0x88>
c00143bc:	81 c4 04 01 00 00    	add    esp,0x104
c00143c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00143cc:	5b                   	pop    ebx
c00143cd:	5e                   	pop    esi
c00143ce:	c3                   	ret    
c00143cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143d2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00143d8:	e9 99 fe ff ff       	jmp    c0014276 <sysCallOpen(regs*)+0x81>

c00143dd <Sys::loadSyscalls()>:
c00143dd:	c7 05 e0 8d 02 c0 75 37 01 c0 	mov    DWORD PTR ds:0xc0028de0,0xc0013775
c00143e7:	c7 05 e4 8d 02 c0 6a 33 01 c0 	mov    DWORD PTR ds:0xc0028de4,0xc001336a
c00143f1:	c7 05 e8 8d 02 c0 5b 35 01 c0 	mov    DWORD PTR ds:0xc0028de8,0xc001355b
c00143fb:	c7 05 ec 8d 02 c0 ab 36 01 c0 	mov    DWORD PTR ds:0xc0028dec,0xc00136ab
c0014405:	c7 05 f0 8d 02 c0 f3 34 01 c0 	mov    DWORD PTR ds:0xc0028df0,0xc00134f3
c001440f:	c7 05 f4 8d 02 c0 a1 33 01 c0 	mov    DWORD PTR ds:0xc0028df4,0xc00133a1
c0014419:	c7 05 f8 8d 02 c0 82 33 01 c0 	mov    DWORD PTR ds:0xc0028df8,0xc0013382
c0014423:	c7 05 fc 8d 02 c0 b0 35 01 c0 	mov    DWORD PTR ds:0xc0028dfc,0xc00135b0
c001442d:	c7 05 04 8e 02 c0 25 3c 01 c0 	mov    DWORD PTR ds:0xc0028e04,0xc0013c25
c0014437:	c7 05 00 8e 02 c0 f5 41 01 c0 	mov    DWORD PTR ds:0xc0028e00,0xc00141f5
c0014441:	c7 05 08 8e 02 c0 85 3c 01 c0 	mov    DWORD PTR ds:0xc0028e08,0xc0013c85
c001444b:	c7 05 0c 8e 02 c0 68 39 01 c0 	mov    DWORD PTR ds:0xc0028e0c,0xc0013968
c0014455:	c7 05 10 8e 02 c0 9a 37 01 c0 	mov    DWORD PTR ds:0xc0028e10,0xc001379a
c001445f:	c7 05 14 8e 02 c0 9f 37 01 c0 	mov    DWORD PTR ds:0xc0028e14,0xc001379f
c0014469:	c7 05 18 8e 02 c0 4e 3d 01 c0 	mov    DWORD PTR ds:0xc0028e18,0xc0013d4e
c0014473:	c7 05 1c 8e 02 c0 fa 3c 01 c0 	mov    DWORD PTR ds:0xc0028e1c,0xc0013cfa
c001447d:	c7 05 20 8e 02 c0 41 3a 01 c0 	mov    DWORD PTR ds:0xc0028e20,0xc0013a41
c0014487:	c7 05 24 8e 02 c0 98 3a 01 c0 	mov    DWORD PTR ds:0xc0028e24,0xc0013a98
c0014491:	c7 05 28 8e 02 c0 04 3b 01 c0 	mov    DWORD PTR ds:0xc0028e28,0xc0013b04
c001449b:	c7 05 2c 8e 02 c0 a4 37 01 c0 	mov    DWORD PTR ds:0xc0028e2c,0xc00137a4
c00144a5:	c7 05 30 8e 02 c0 be 3d 01 c0 	mov    DWORD PTR ds:0xc0028e30,0xc0013dbe
c00144af:	c7 05 34 8e 02 c0 d8 3d 01 c0 	mov    DWORD PTR ds:0xc0028e34,0xc0013dd8
c00144b9:	c7 05 38 8e 02 c0 d8 3d 01 c0 	mov    DWORD PTR ds:0xc0028e38,0xc0013dd8
c00144c3:	c7 05 3c 8e 02 c0 0d 3e 01 c0 	mov    DWORD PTR ds:0xc0028e3c,0xc0013e0d
c00144cd:	c7 05 40 8e 02 c0 71 3e 01 c0 	mov    DWORD PTR ds:0xc0028e40,0xc0013e71
c00144d7:	c7 05 44 8e 02 c0 ae 37 01 c0 	mov    DWORD PTR ds:0xc0028e44,0xc00137ae
c00144e1:	c7 05 48 8e 02 c0 d5 3e 01 c0 	mov    DWORD PTR ds:0xc0028e48,0xc0013ed5
c00144eb:	c7 05 4c 8e 02 c0 25 39 01 c0 	mov    DWORD PTR ds:0xc0028e4c,0xc0013925
c00144f5:	c7 05 50 8e 02 c0 21 3f 01 c0 	mov    DWORD PTR ds:0xc0028e50,0xc0013f21
c00144ff:	c7 05 54 8e 02 c0 e7 39 01 c0 	mov    DWORD PTR ds:0xc0028e54,0xc00139e7
c0014509:	c7 05 58 8e 02 c0 a4 3f 01 c0 	mov    DWORD PTR ds:0xc0028e58,0xc0013fa4
c0014513:	c7 05 5c 8e 02 c0 76 3b 01 c0 	mov    DWORD PTR ds:0xc0028e5c,0xc0013b76
c001451d:	c7 05 60 8e 02 c0 cd 3f 01 c0 	mov    DWORD PTR ds:0xc0028e60,0xc0013fcd
c0014527:	c7 05 64 8e 02 c0 35 40 01 c0 	mov    DWORD PTR ds:0xc0028e64,0xc0014035
c0014531:	c7 05 6c 8e 02 c0 be 37 01 c0 	mov    DWORD PTR ds:0xc0028e6c,0xc00137be
c001453b:	c7 05 70 8e 02 c0 28 38 01 c0 	mov    DWORD PTR ds:0xc0028e70,0xc0013828
c0014545:	c7 05 74 8e 02 c0 72 38 01 c0 	mov    DWORD PTR ds:0xc0028e74,0xc0013872
c001454f:	c7 05 78 8e 02 c0 e2 40 01 c0 	mov    DWORD PTR ds:0xc0028e78,0xc00140e2
c0014559:	c7 05 7c 8e 02 c0 f3 3d 01 c0 	mov    DWORD PTR ds:0xc0028e7c,0xc0013df3
c0014563:	c7 05 80 8e 02 c0 c7 38 01 c0 	mov    DWORD PTR ds:0xc0028e80,0xc00138c7
c001456d:	c7 05 84 8e 02 c0 54 41 01 c0 	mov    DWORD PTR ds:0xc0028e84,0xc0014154
c0014577:	c7 05 88 8e 02 c0 99 41 01 c0 	mov    DWORD PTR ds:0xc0028e88,0xc0014199
c0014581:	c7 05 8c 8e 02 c0 4b 34 01 c0 	mov    DWORD PTR ds:0xc0028e8c,0xc001344b
c001458b:	c7 05 90 8e 02 c0 cc 35 01 c0 	mov    DWORD PTR ds:0xc0028e90,0xc00135cc
c0014595:	c7 05 94 8e 02 c0 61 36 01 c0 	mov    DWORD PTR ds:0xc0028e94,0xc0013661
c001459f:	c7 05 98 8e 02 c0 34 33 01 c0 	mov    DWORD PTR ds:0xc0028e98,0xc0013334
c00145a9:	c7 05 9c 8e 02 c0 13 37 01 c0 	mov    DWORD PTR ds:0xc0028e9c,0xc0013713
c00145b3:	c7 05 a0 8e 02 c0 ad 33 01 c0 	mov    DWORD PTR ds:0xc0028ea0,0xc00133ad
c00145bd:	c7 05 a4 8e 02 c0 c7 33 01 c0 	mov    DWORD PTR ds:0xc0028ea4,0xc00133c7
c00145c7:	c3                   	ret    

c00145c8 <Sys::systemCall(regs*, void*)>:
c00145c8:	53                   	push   ebx
c00145c9:	83 ec 08             	sub    esp,0x8
c00145cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145d0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00145d3:	83 f8 7f             	cmp    eax,0x7f
c00145d6:	77 16                	ja     c00145ee <Sys::systemCall(regs*, void*)+0x26>
c00145d8:	8b 14 85 e0 8d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7220]
c00145df:	85 d2                	test   edx,edx
c00145e1:	74 0b                	je     c00145ee <Sys::systemCall(regs*, void*)+0x26>
c00145e3:	83 ec 0c             	sub    esp,0xc
c00145e6:	53                   	push   ebx
c00145e7:	ff d2                	call   edx
c00145e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00145ec:	eb 0d                	jmp    c00145fb <Sys::systemCall(regs*, void*)+0x33>
c00145ee:	52                   	push   edx
c00145ef:	52                   	push   edx
c00145f0:	50                   	push   eax
c00145f1:	68 56 42 02 c0       	push   0xc0024256
c00145f6:	e8 ea 80 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014603:	31 d2                	xor    edx,edx
c0014605:	83 c4 08             	add    esp,0x8
c0014608:	5b                   	pop    ebx
c0014609:	c3                   	ret    

c001460a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001460a:	55                   	push   ebp
c001460b:	57                   	push   edi
c001460c:	56                   	push   esi
c001460d:	53                   	push   ebx
c001460e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014614:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001461b:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0014622:	85 c0                	test   eax,eax
c0014624:	0f 95 c1             	setne  cl
c0014627:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001462f:	0f 94 c2             	sete   dl
c0014632:	84 d1                	test   cl,dl
c0014634:	74 23                	je     c0014659 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0014636:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001463c:	74 1b                	je     c0014659 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001463e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014644:	89 da                	mov    edx,ebx
c0014646:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001464c:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014652:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014659:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0014660:	05 ff 0f 00 00       	add    eax,0xfff
c0014665:	83 ec 0c             	sub    esp,0xc
c0014668:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001466c:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0014672:	c1 e8 0c             	shr    eax,0xc
c0014675:	89 fe                	mov    esi,edi
c0014677:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001467b:	c1 ee 0c             	shr    esi,0xc
c001467e:	6a 01                	push   0x1
c0014680:	e8 04 6d ff ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c0014685:	89 c5                	mov    ebp,eax
c0014687:	58                   	pop    eax
c0014688:	5a                   	pop    edx
c0014689:	56                   	push   esi
c001468a:	68 6a 42 02 c0       	push   0xc002426a
c001468f:	e8 51 80 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0014694:	59                   	pop    ecx
c0014695:	58                   	pop    eax
c0014696:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001469a:	68 7c 42 02 c0       	push   0xc002427c
c001469f:	e8 41 80 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00146a4:	83 c4 10             	add    esp,0x10
c00146a7:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c00146ad:	0f 86 31 01 00 00    	jbe    c00147e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c00146b3:	c1 e6 0c             	shl    esi,0xc
c00146b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146b9:	8d 04 1e             	lea    eax,[esi+ebx*1]
c00146bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146c0:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00146c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00146ca:	01 df                	add    edi,ebx
c00146cc:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c00146cf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00146d3:	0f 84 08 01 00 00    	je     c00147e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00146d9:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00146df:	76 05                	jbe    c00146e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00146e1:	bf 00 10 00 00       	mov    edi,0x1000
c00146e6:	83 ec 0c             	sub    esp,0xc
c00146e9:	31 d2                	xor    edx,edx
c00146eb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00146f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00146f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00146f8:	50                   	push   eax
c00146f9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00146fd:	56                   	push   esi
c00146fe:	52                   	push   edx
c00146ff:	57                   	push   edi
c0014700:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014707:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001470a:	83 c4 20             	add    esp,0x20
c001470d:	85 c0                	test   eax,eax
c001470f:	74 0a                	je     c001471b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0014711:	53                   	push   ebx
c0014712:	53                   	push   ebx
c0014713:	50                   	push   eax
c0014714:	68 8e 42 02 c0       	push   0xc002428e
c0014719:	eb 0f                	jmp    c001472a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001471b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001471f:	74 20                	je     c0014741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0014721:	51                   	push   ecx
c0014722:	51                   	push   ecx
c0014723:	6a 00                	push   0x0
c0014725:	68 b9 42 02 c0       	push   0xc00242b9
c001472a:	e8 b6 7f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001472f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014732:	e8 46 6f ff ff       	call   c000b67d <Virt::freeKernelVirtualPages(unsigned long)>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	31 c0                	xor    eax,eax
c001473c:	e9 68 01 00 00       	jmp    c00148a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0014741:	fa                   	cli    
c0014742:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0014748:	e8 89 54 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c001474d:	6a 07                	push   0x7
c001474f:	89 c7                	mov    edi,eax
c0014751:	55                   	push   ebp
c0014752:	50                   	push   eax
c0014753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014758:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001475b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014761:	e8 8e 72 ff ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014766:	83 c4 0c             	add    esp,0xc
c0014769:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014770:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014776:	6a 00                	push   0x0
c0014778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001477d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014780:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014786:	e8 c3 70 ff ff       	call   c000b84e <VAS::mapOtherVASIn(bool, VAS*)>
c001478b:	58                   	pop    eax
c001478c:	5a                   	pop    edx
c001478d:	68 07 0c 00 00       	push   0xc07
c0014792:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014796:	57                   	push   edi
c0014797:	89 ef                	mov    edi,ebp
c0014799:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00147a0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147a6:	6a 00                	push   0x0
c00147a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147b0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147b6:	e8 f7 75 ff ff       	call   c000bdb2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00147bb:	b9 00 10 00 00       	mov    ecx,0x1000
c00147c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147c2:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00147c7:	83 c4 20             	add    esp,0x20
c00147ca:	48                   	dec    eax
c00147cb:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00147d0:	85 c0                	test   eax,eax
c00147d2:	75 01                	jne    c00147d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c00147d4:	fb                   	sti    
c00147d5:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00147dc:	e9 df fe ff ff       	jmp    c00146c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00147e1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00147e4:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00147ec:	0f 86 a9 00 00 00    	jbe    c001489b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00147f2:	fa                   	cli    
c00147f3:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00147f9:	51                   	push   ecx
c00147fa:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014801:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014807:	6a 00                	push   0x0
c0014809:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001480e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014811:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014817:	e8 32 70 ff ff       	call   c000b84e <VAS::mapOtherVASIn(bool, VAS*)>
c001481c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014820:	c1 e6 0c             	shl    esi,0xc
c0014823:	01 de                	add    esi,ebx
c0014825:	83 c4 10             	add    esp,0x10
c0014828:	39 de                	cmp    esi,ebx
c001482a:	74 61                	je     c001488d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001482c:	e8 a5 53 ff ff       	call   c0009bd6 <Phys::allocatePage()>
c0014831:	6a 07                	push   0x7
c0014833:	89 c7                	mov    edi,eax
c0014835:	55                   	push   ebp
c0014836:	50                   	push   eax
c0014837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001483c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001483f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014845:	e8 aa 71 ff ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001484a:	58                   	pop    eax
c001484b:	5a                   	pop    edx
c001484c:	68 07 0c 00 00       	push   0xc07
c0014851:	53                   	push   ebx
c0014852:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014858:	57                   	push   edi
c0014859:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014860:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014866:	6a 00                	push   0x0
c0014868:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014870:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014876:	e8 37 75 ff ff       	call   c000bdb2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001487b:	83 c4 1c             	add    esp,0x1c
c001487e:	68 00 10 00 00       	push   0x1000
c0014883:	6a 00                	push   0x0
c0014885:	55                   	push   ebp
c0014886:	e8 1d bc fe ff       	call   c00004a8 <memset>
c001488b:	eb 98                	jmp    c0014825 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001488d:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0014892:	48                   	dec    eax
c0014893:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0014898:	75 01                	jne    c001489b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001489a:	fb                   	sti    
c001489b:	83 ec 0c             	sub    esp,0xc
c001489e:	55                   	push   ebp
c001489f:	e8 d9 6d ff ff       	call   c000b67d <Virt::freeKernelVirtualPages(unsigned long)>
c00148a4:	83 c4 10             	add    esp,0x10
c00148a7:	b0 01                	mov    al,0x1
c00148a9:	81 c4 2c 10 00 00    	add    esp,0x102c
c00148af:	5b                   	pop    ebx
c00148b0:	5e                   	pop    esi
c00148b1:	5f                   	pop    edi
c00148b2:	5d                   	pop    ebp
c00148b3:	c3                   	ret    

c00148b4 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00148b4:	55                   	push   ebp
c00148b5:	57                   	push   edi
c00148b6:	56                   	push   esi
c00148b7:	53                   	push   ebx
c00148b8:	83 ec 48             	sub    esp,0x48
c00148bb:	68 14 01 00 00       	push   0x114
c00148c0:	e8 d2 4e ff ff       	call   c0009797 <malloc>
c00148c5:	83 c4 0c             	add    esp,0xc
c00148c8:	89 c6                	mov    esi,eax
c00148ca:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00148ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00148d2:	50                   	push   eax
c00148d3:	e8 78 83 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c00148d8:	58                   	pop    eax
c00148d9:	5a                   	pop    edx
c00148da:	6a 01                	push   0x1
c00148dc:	56                   	push   esi
c00148dd:	e8 48 84 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c00148e2:	83 c4 10             	add    esp,0x10
c00148e5:	85 c0                	test   eax,eax
c00148e7:	0f 85 47 01 00 00    	jne    c0014a34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00148ed:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00148f5:	83 ec 0c             	sub    esp,0xc
c00148f8:	6a 34                	push   0x34
c00148fa:	e8 98 4e ff ff       	call   c0009797 <malloc>
c00148ff:	89 c3                	mov    ebx,eax
c0014901:	58                   	pop    eax
c0014902:	8b 06                	mov    eax,DWORD PTR [esi]
c0014904:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014908:	57                   	push   edi
c0014909:	53                   	push   ebx
c001490a:	6a 00                	push   0x0
c001490c:	6a 34                	push   0x34
c001490e:	56                   	push   esi
c001490f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014912:	83 c4 20             	add    esp,0x20
c0014915:	85 c0                	test   eax,eax
c0014917:	0f 85 17 01 00 00    	jne    c0014a34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001491d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014923:	0f 85 0b 01 00 00    	jne    c0014a34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014929:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001492c:	85 c0                	test   eax,eax
c001492e:	0f 84 00 01 00 00    	je     c0014a34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014934:	31 d2                	xor    edx,edx
c0014936:	55                   	push   ebp
c0014937:	52                   	push   edx
c0014938:	50                   	push   eax
c0014939:	56                   	push   esi
c001493a:	e8 a9 84 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c001493f:	83 c4 10             	add    esp,0x10
c0014942:	85 c0                	test   eax,eax
c0014944:	0f 85 ea 00 00 00    	jne    c0014a34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001494a:	83 ec 0c             	sub    esp,0xc
c001494d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014950:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014954:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014958:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001495c:	0f af c2             	imul   eax,edx
c001495f:	50                   	push   eax
c0014960:	e8 32 4e ff ff       	call   c0009797 <malloc>
c0014965:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014967:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001496b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001496e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014972:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014976:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001497a:	0f af c2             	imul   eax,edx
c001497d:	99                   	cdq    
c001497e:	52                   	push   edx
c001497f:	50                   	push   eax
c0014980:	56                   	push   esi
c0014981:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014984:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014987:	83 c4 20             	add    esp,0x20
c001498a:	85 c0                	test   eax,eax
c001498c:	0f 84 a2 00 00 00    	je     c0014a34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014992:	31 d2                	xor    edx,edx
c0014994:	51                   	push   ecx
c0014995:	52                   	push   edx
c0014996:	50                   	push   eax
c0014997:	56                   	push   esi
c0014998:	e8 4b 84 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c001499d:	83 c4 10             	add    esp,0x10
c00149a0:	85 c0                	test   eax,eax
c00149a2:	0f 85 8c 00 00 00    	jne    c0014a34 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00149a8:	83 ec 0c             	sub    esp,0xc
c00149ab:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149af:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149b3:	31 ed                	xor    ebp,ebp
c00149b5:	0f af c2             	imul   eax,edx
c00149b8:	50                   	push   eax
c00149b9:	e8 d9 4d ff ff       	call   c0009797 <malloc>
c00149be:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00149c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00149c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149cb:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149cf:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149d3:	0f af c2             	imul   eax,edx
c00149d6:	99                   	cdq    
c00149d7:	52                   	push   edx
c00149d8:	50                   	push   eax
c00149d9:	56                   	push   esi
c00149da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149dd:	83 c4 20             	add    esp,0x20
c00149e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00149e8:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00149ec:	0f 86 80 00 00 00    	jbe    c0014a72 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00149f2:	0f b7 fd             	movzx  edi,bp
c00149f5:	c1 e7 05             	shl    edi,0x5
c00149f8:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00149fc:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00149ff:	75 6b                	jne    c0014a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0014a01:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a08:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a0f:	52                   	push   edx
c0014a10:	31 d2                	xor    edx,edx
c0014a12:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a15:	52                   	push   edx
c0014a16:	50                   	push   eax
c0014a17:	56                   	push   esi
c0014a18:	e8 cb 83 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	85 c0                	test   eax,eax
c0014a22:	74 17                	je     c0014a3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0014a24:	83 ec 0c             	sub    esp,0xc
c0014a27:	68 e5 42 02 c0       	push   0xc00242e5
c0014a2c:	e8 b4 7c ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0014a31:	83 c4 10             	add    esp,0x10
c0014a34:	31 c0                	xor    eax,eax
c0014a36:	e9 87 00 00 00       	jmp    c0014ac2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0014a3b:	83 ec 0c             	sub    esp,0xc
c0014a3e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014a41:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014a44:	50                   	push   eax
c0014a45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a4d:	56                   	push   esi
c0014a4e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a52:	e8 b3 fb ff ff       	call   c001460a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a5b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014a5f:	83 c4 20             	add    esp,0x20
c0014a62:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014a66:	73 04                	jae    c0014a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0014a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a6c:	45                   	inc    ebp
c0014a6d:	e9 76 ff ff ff       	jmp    c00149e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014a72:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014a76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014a7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a7e:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014a84:	83 ec 0c             	sub    esp,0xc
c0014a87:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014a8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a92:	05 00 10 00 00       	add    eax,0x1000
c0014a97:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a9e:	e8 04 4d ff ff       	call   c00097a7 <free>
c0014aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aa6:	e8 fc 4c ff ff       	call   c00097a7 <free>
c0014aab:	58                   	pop    eax
c0014aac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ab0:	e8 f2 4c ff ff       	call   c00097a7 <free>
c0014ab5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ab8:	e8 cb 82 ff ff       	call   c000cd88 <File::close()>
c0014abd:	83 c4 10             	add    esp,0x10
c0014ac0:	b0 01                	mov    al,0x1
c0014ac2:	83 c4 3c             	add    esp,0x3c
c0014ac5:	5b                   	pop    ebx
c0014ac6:	5e                   	pop    esi
c0014ac7:	5f                   	pop    edi
c0014ac8:	5d                   	pop    ebp
c0014ac9:	c3                   	ret    

c0014aca <Thr::runtimeReferenceHelper()>:
c0014aca:	83 ec 18             	sub    esp,0x18
c0014acd:	68 ed 42 02 c0       	push   0xc00242ed
c0014ad2:	e8 0e 7c ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0014ad7:	fa                   	cli    
c0014ad8:	83 c4 10             	add    esp,0x10
c0014adb:	eb fe                	jmp    c0014adb <Thr::runtimeReferenceHelper()+0x11>

c0014add <Thr::getAddressOfKernelSymbol(char const*)>:
c0014add:	57                   	push   edi
c0014ade:	56                   	push   esi
c0014adf:	53                   	push   ebx
c0014ae0:	31 db                	xor    ebx,ebx
c0014ae2:	39 1d 80 97 02 c0    	cmp    DWORD PTR ds:0xc0029780,ebx
c0014ae8:	7e 3c                	jle    c0014b26 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014aea:	8b 34 9d 00 97 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6900]
c0014af1:	31 ff                	xor    edi,edi
c0014af3:	39 3c 9d 00 96 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6a00],edi
c0014afa:	7e 27                	jle    c0014b23 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014afc:	50                   	push   eax
c0014afd:	50                   	push   eax
c0014afe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b02:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b04:	03 04 9d 80 96 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6980]
c0014b0b:	50                   	push   eax
c0014b0c:	e8 df ba fe ff       	call   c00005f0 <strcmp>
c0014b11:	83 c4 10             	add    esp,0x10
c0014b14:	85 c0                	test   eax,eax
c0014b16:	75 05                	jne    c0014b1d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b1b:	eb 0b                	jmp    c0014b28 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b1d:	83 c6 10             	add    esi,0x10
c0014b20:	47                   	inc    edi
c0014b21:	eb d0                	jmp    c0014af3 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b23:	43                   	inc    ebx
c0014b24:	eb bc                	jmp    c0014ae2 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b26:	31 c0                	xor    eax,eax
c0014b28:	5b                   	pop    ebx
c0014b29:	5e                   	pop    esi
c0014b2a:	5f                   	pop    edi
c0014b2b:	c3                   	ret    

c0014b2c <Thr::loadKernelSymbolTable(char const*)>:
c0014b2c:	55                   	push   ebp
c0014b2d:	57                   	push   edi
c0014b2e:	56                   	push   esi
c0014b2f:	53                   	push   ebx
c0014b30:	83 ec 68             	sub    esp,0x68
c0014b33:	8b 35 d0 97 02 c0    	mov    esi,DWORD PTR ds:0xc00297d0
c0014b39:	68 14 01 00 00       	push   0x114
c0014b3e:	e8 54 4c ff ff       	call   c0009797 <malloc>
c0014b43:	83 c4 0c             	add    esp,0xc
c0014b46:	89 c3                	mov    ebx,eax
c0014b48:	56                   	push   esi
c0014b49:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b4d:	50                   	push   eax
c0014b4e:	e8 fd 80 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0014b53:	5e                   	pop    esi
c0014b54:	5f                   	pop    edi
c0014b55:	6a 01                	push   0x1
c0014b57:	53                   	push   ebx
c0014b58:	e8 cd 81 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c0014b5d:	83 c4 10             	add    esp,0x10
c0014b60:	85 c0                	test   eax,eax
c0014b62:	74 0a                	je     c0014b6e <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b64:	83 ec 0c             	sub    esp,0xc
c0014b67:	68 0f 43 02 c0       	push   0xc002430f
c0014b6c:	eb 34                	jmp    c0014ba2 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014b6e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014b76:	83 ec 0c             	sub    esp,0xc
c0014b79:	6a 34                	push   0x34
c0014b7b:	e8 17 4c ff ff       	call   c0009797 <malloc>
c0014b80:	59                   	pop    ecx
c0014b81:	89 c7                	mov    edi,eax
c0014b83:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014b87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b89:	56                   	push   esi
c0014b8a:	57                   	push   edi
c0014b8b:	6a 00                	push   0x0
c0014b8d:	6a 34                	push   0x34
c0014b8f:	53                   	push   ebx
c0014b90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b93:	83 c4 20             	add    esp,0x20
c0014b96:	85 c0                	test   eax,eax
c0014b98:	74 17                	je     c0014bb1 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014b9a:	83 ec 0c             	sub    esp,0xc
c0014b9d:	68 26 43 02 c0       	push   0xc0024326
c0014ba2:	e8 a8 de ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0014ba7:	83 c4 10             	add    esp,0x10
c0014baa:	31 c0                	xor    eax,eax
c0014bac:	e9 31 02 00 00       	jmp    c0014de2 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014bb1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014bb7:	75 e1                	jne    c0014b9a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bb9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014bbc:	85 c0                	test   eax,eax
c0014bbe:	74 da                	je     c0014b9a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bc0:	52                   	push   edx
c0014bc1:	31 d2                	xor    edx,edx
c0014bc3:	52                   	push   edx
c0014bc4:	50                   	push   eax
c0014bc5:	53                   	push   ebx
c0014bc6:	e8 1d 82 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014bcb:	83 c4 10             	add    esp,0x10
c0014bce:	85 c0                	test   eax,eax
c0014bd0:	75 c8                	jne    c0014b9a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bd2:	83 ec 0c             	sub    esp,0xc
c0014bd5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bd9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bdd:	31 ed                	xor    ebp,ebp
c0014bdf:	0f af c2             	imul   eax,edx
c0014be2:	50                   	push   eax
c0014be3:	e8 af 4b ff ff       	call   c0009797 <malloc>
c0014be8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014bea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bee:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bf5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bf9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bfd:	0f af c2             	imul   eax,edx
c0014c00:	99                   	cdq    
c0014c01:	52                   	push   edx
c0014c02:	50                   	push   eax
c0014c03:	53                   	push   ebx
c0014c04:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c07:	83 c4 20             	add    esp,0x20
c0014c0a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c12:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c1a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c2a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0014c2e:	0f 86 aa 00 00 00    	jbe    c0014cde <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c34:	0f b7 f5             	movzx  esi,bp
c0014c37:	6b f6 28             	imul   esi,esi,0x28
c0014c3a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c3e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c45:	50                   	push   eax
c0014c46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c4a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c4e:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c50:	6b c0 28             	imul   eax,eax,0x28
c0014c53:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c57:	89 d0                	mov    eax,edx
c0014c59:	31 d2                	xor    edx,edx
c0014c5b:	52                   	push   edx
c0014c5c:	50                   	push   eax
c0014c5d:	53                   	push   ebx
c0014c5e:	e8 85 81 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014c63:	83 c4 0c             	add    esp,0xc
c0014c66:	6a 20                	push   0x20
c0014c68:	6a 00                	push   0x0
c0014c6a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c6e:	52                   	push   edx
c0014c6f:	e8 34 b8 fe ff       	call   c00004a8 <memset>
c0014c74:	58                   	pop    eax
c0014c75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c77:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014c7b:	51                   	push   ecx
c0014c7c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014c80:	52                   	push   edx
c0014c81:	6a 00                	push   0x0
c0014c83:	6a 1f                	push   0x1f
c0014c85:	53                   	push   ebx
c0014c86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c89:	83 c4 18             	add    esp,0x18
c0014c8c:	68 3d 43 02 c0       	push   0xc002433d
c0014c91:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c95:	52                   	push   edx
c0014c96:	e8 55 b9 fe ff       	call   c00005f0 <strcmp>
c0014c9b:	83 c4 10             	add    esp,0x10
c0014c9e:	85 c0                	test   eax,eax
c0014ca0:	75 0f                	jne    c0014cb1 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014ca2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ca5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ca9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cb1:	50                   	push   eax
c0014cb2:	50                   	push   eax
c0014cb3:	68 45 43 02 c0       	push   0xc0024345
c0014cb8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014cbc:	50                   	push   eax
c0014cbd:	e8 2e b9 fe ff       	call   c00005f0 <strcmp>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	85 c0                	test   eax,eax
c0014cc7:	75 0f                	jne    c0014cd8 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014cc9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014cd8:	45                   	inc    ebp
c0014cd9:	e9 4c ff ff ff       	jmp    c0014c2a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014cde:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ce3:	75 10                	jne    c0014cf5 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014ce5:	83 ec 0c             	sub    esp,0xc
c0014ce8:	68 4d 43 02 c0       	push   0xc002434d
c0014ced:	e8 5d dd ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0014cf2:	83 c4 10             	add    esp,0x10
c0014cf5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cfa:	75 10                	jne    c0014d0c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014cfc:	83 ec 0c             	sub    esp,0xc
c0014cff:	68 4d 43 02 c0       	push   0xc002434d
c0014d04:	e8 46 dd ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0014d09:	83 c4 10             	add    esp,0x10
c0014d0c:	31 d2                	xor    edx,edx
c0014d0e:	50                   	push   eax
c0014d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d13:	52                   	push   edx
c0014d14:	50                   	push   eax
c0014d15:	53                   	push   ebx
c0014d16:	e8 cd 80 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014d1b:	5a                   	pop    edx
c0014d1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d20:	e8 72 4a ff ff       	call   c0009797 <malloc>
c0014d25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d2d:	31 c9                	xor    ecx,ecx
c0014d2f:	5e                   	pop    esi
c0014d30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d32:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d36:	55                   	push   ebp
c0014d37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d3b:	51                   	push   ecx
c0014d3c:	52                   	push   edx
c0014d3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d41:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014d45:	53                   	push   ebx
c0014d46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d49:	83 c4 14             	add    esp,0x14
c0014d4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d50:	e8 42 4a ff ff       	call   c0009797 <malloc>
c0014d55:	89 c6                	mov    esi,eax
c0014d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d5c:	56                   	push   esi
c0014d5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d65:	51                   	push   ecx
c0014d66:	52                   	push   edx
c0014d67:	53                   	push   ebx
c0014d68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d6f:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0014d75:	83 c4 1c             	add    esp,0x1c
c0014d78:	c1 e8 04             	shr    eax,0x4
c0014d7b:	89 04 95 00 96 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6a00],eax
c0014d82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d86:	31 d2                	xor    edx,edx
c0014d88:	52                   	push   edx
c0014d89:	50                   	push   eax
c0014d8a:	53                   	push   ebx
c0014d8b:	e8 58 80 ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014d90:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d92:	31 d2                	xor    edx,edx
c0014d94:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d97:	56                   	push   esi
c0014d98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d9c:	52                   	push   edx
c0014d9d:	50                   	push   eax
c0014d9e:	53                   	push   ebx
c0014d9f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014da2:	83 c4 14             	add    esp,0x14
c0014da5:	53                   	push   ebx
c0014da6:	e8 dd 7f ff ff       	call   c000cd88 <File::close()>
c0014dab:	5d                   	pop    ebp
c0014dac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014db0:	e8 f2 49 ff ff       	call   c00097a7 <free>
c0014db5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014db8:	e8 ea 49 ff ff       	call   c00097a7 <free>
c0014dbd:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0014dc2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014dc6:	8d 50 01             	lea    edx,[eax+0x1]
c0014dc9:	89 0c 85 00 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6900],ecx
c0014dd0:	89 34 85 80 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6980],esi
c0014dd7:	89 15 80 97 02 c0    	mov    DWORD PTR ds:0xc0029780,edx
c0014ddd:	83 c4 10             	add    esp,0x10
c0014de0:	b0 01                	mov    al,0x1
c0014de2:	83 c4 5c             	add    esp,0x5c
c0014de5:	5b                   	pop    ebx
c0014de6:	5e                   	pop    esi
c0014de7:	5f                   	pop    edi
c0014de8:	5d                   	pop    ebp
c0014de9:	c3                   	ret    

c0014dea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014dea:	55                   	push   ebp
c0014deb:	57                   	push   edi
c0014dec:	56                   	push   esi
c0014ded:	53                   	push   ebx
c0014dee:	81 ec 68 03 00 00    	sub    esp,0x368
c0014df4:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014dfb:	8b 1d d0 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297d0
c0014e01:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0014e05:	68 14 01 00 00       	push   0x114
c0014e0a:	e8 88 49 ff ff       	call   c0009797 <malloc>
c0014e0f:	83 c4 0c             	add    esp,0xc
c0014e12:	89 c5                	mov    ebp,eax
c0014e14:	53                   	push   ebx
c0014e15:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e1c:	50                   	push   eax
c0014e1d:	e8 2e 7e ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0014e22:	5e                   	pop    esi
c0014e23:	5f                   	pop    edi
c0014e24:	6a 01                	push   0x1
c0014e26:	55                   	push   ebp
c0014e27:	e8 fe 7e ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c0014e2c:	83 c4 10             	add    esp,0x10
c0014e2f:	85 c0                	test   eax,eax
c0014e31:	0f 85 a7 06 00 00    	jne    c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014e37:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e3f:	83 ec 0c             	sub    esp,0xc
c0014e42:	6a 34                	push   0x34
c0014e44:	e8 4e 49 ff ff       	call   c0009797 <malloc>
c0014e49:	5b                   	pop    ebx
c0014e4a:	89 c7                	mov    edi,eax
c0014e4c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014e50:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e53:	53                   	push   ebx
c0014e54:	57                   	push   edi
c0014e55:	6a 00                	push   0x0
c0014e57:	6a 34                	push   0x34
c0014e59:	55                   	push   ebp
c0014e5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e5d:	83 c4 20             	add    esp,0x20
c0014e60:	85 c0                	test   eax,eax
c0014e62:	0f 85 76 06 00 00    	jne    c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014e68:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014e6e:	0f 85 6a 06 00 00    	jne    c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014e74:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014e77:	85 c0                	test   eax,eax
c0014e79:	0f 84 5f 06 00 00    	je     c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014e7f:	31 d2                	xor    edx,edx
c0014e81:	51                   	push   ecx
c0014e82:	52                   	push   edx
c0014e83:	50                   	push   eax
c0014e84:	55                   	push   ebp
c0014e85:	e8 5e 7f ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	85 c0                	test   eax,eax
c0014e8f:	0f 85 49 06 00 00    	jne    c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014e9b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014e9f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014ea3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ea7:	0f af c2             	imul   eax,edx
c0014eaa:	50                   	push   eax
c0014eab:	e8 e7 48 ff ff       	call   c0009797 <malloc>
c0014eb0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014eb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014eb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ebe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014ec2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ec6:	0f af c2             	imul   eax,edx
c0014ec9:	99                   	cdq    
c0014eca:	52                   	push   edx
c0014ecb:	50                   	push   eax
c0014ecc:	55                   	push   ebp
c0014ecd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ed0:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014ed3:	83 c4 20             	add    esp,0x20
c0014ed6:	85 c0                	test   eax,eax
c0014ed8:	0f 84 00 06 00 00    	je     c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014ede:	52                   	push   edx
c0014edf:	31 d2                	xor    edx,edx
c0014ee1:	52                   	push   edx
c0014ee2:	50                   	push   eax
c0014ee3:	55                   	push   ebp
c0014ee4:	e8 ff 7e ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014ee9:	83 c4 10             	add    esp,0x10
c0014eec:	85 c0                	test   eax,eax
c0014eee:	0f 85 ea 05 00 00    	jne    c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014ef4:	83 ec 0c             	sub    esp,0xc
c0014ef7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014efb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014eff:	31 f6                	xor    esi,esi
c0014f01:	0f af c2             	imul   eax,edx
c0014f04:	50                   	push   eax
c0014f05:	e8 8d 48 ff ff       	call   c0009797 <malloc>
c0014f0a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f18:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f1c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f20:	0f af c2             	imul   eax,edx
c0014f23:	99                   	cdq    
c0014f24:	52                   	push   edx
c0014f25:	50                   	push   eax
c0014f26:	55                   	push   ebp
c0014f27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f2a:	83 c4 20             	add    esp,0x20
c0014f2d:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0014f31:	0f 86 8a 00 00 00    	jbe    c0014fc1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014f37:	0f b7 de             	movzx  ebx,si
c0014f3a:	c1 e3 05             	shl    ebx,0x5
c0014f3d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014f41:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014f44:	75 75                	jne    c0014fbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014f46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014f49:	31 d2                	xor    edx,edx
c0014f4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f4f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014f52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f56:	50                   	push   eax
c0014f57:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014f5a:	52                   	push   edx
c0014f5b:	50                   	push   eax
c0014f5c:	55                   	push   ebp
c0014f5d:	e8 86 7e ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	85 c0                	test   eax,eax
c0014f67:	0f 85 71 05 00 00    	jne    c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014f6d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f74:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f77:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014f7b:	31 d2                	xor    edx,edx
c0014f7d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014f81:	83 ec 0c             	sub    esp,0xc
c0014f84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f88:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f8f:	50                   	push   eax
c0014f90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f98:	52                   	push   edx
c0014f99:	50                   	push   eax
c0014f9a:	55                   	push   ebp
c0014f9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f9e:	83 c4 1c             	add    esp,0x1c
c0014fa1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014fa4:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014fa7:	50                   	push   eax
c0014fa8:	6a 00                	push   0x0
c0014faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014fb2:	50                   	push   eax
c0014fb3:	e8 f0 b4 fe ff       	call   c00004a8 <memset>
c0014fb8:	83 c4 10             	add    esp,0x10
c0014fbb:	46                   	inc    esi
c0014fbc:	e9 6c ff ff ff       	jmp    c0014f2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014fc1:	53                   	push   ebx
c0014fc2:	31 db                	xor    ebx,ebx
c0014fc4:	68 00 01 00 00       	push   0x100
c0014fc9:	6a 00                	push   0x0
c0014fcb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014fcf:	50                   	push   eax
c0014fd0:	e8 d3 b4 fe ff       	call   c00004a8 <memset>
c0014fd5:	83 c4 0c             	add    esp,0xc
c0014fd8:	68 00 01 00 00       	push   0x100
c0014fdd:	6a 00                	push   0x0
c0014fdf:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014fe6:	50                   	push   eax
c0014fe7:	e8 bc b4 fe ff       	call   c00004a8 <memset>
c0014fec:	83 c4 10             	add    esp,0x10
c0014fef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014ff7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014fff:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0015007:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001500f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015017:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001501b:	0f 86 30 01 00 00    	jbe    c0015151 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015021:	0f b7 f3             	movzx  esi,bx
c0015024:	6b f6 28             	imul   esi,esi,0x28
c0015027:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001502b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001502e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015032:	52                   	push   edx
c0015033:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015037:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001503b:	8b 06                	mov    eax,DWORD PTR [esi]
c001503d:	6b d2 28             	imul   edx,edx,0x28
c0015040:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015044:	31 d2                	xor    edx,edx
c0015046:	52                   	push   edx
c0015047:	50                   	push   eax
c0015048:	55                   	push   ebp
c0015049:	e8 9a 7d ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c001504e:	83 c4 0c             	add    esp,0xc
c0015051:	6a 20                	push   0x20
c0015053:	6a 00                	push   0x0
c0015055:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001505c:	51                   	push   ecx
c001505d:	e8 46 b4 fe ff       	call   c00004a8 <memset>
c0015062:	59                   	pop    ecx
c0015063:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015066:	8d 54 24 58          	lea    edx,[esp+0x58]
c001506a:	52                   	push   edx
c001506b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015072:	51                   	push   ecx
c0015073:	6a 00                	push   0x0
c0015075:	6a 1f                	push   0x1f
c0015077:	55                   	push   ebp
c0015078:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001507b:	83 c4 1c             	add    esp,0x1c
c001507e:	6a 09                	push   0x9
c0015080:	68 67 43 02 c0       	push   0xc0024367
c0015085:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001508c:	51                   	push   ecx
c001508d:	e8 12 b3 fe ff       	call   c00003a4 <memcmp>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	85 c0                	test   eax,eax
c0015097:	75 21                	jne    c00150ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001509d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150a1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00150a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00150a9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00150ac:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00150b3:	89 d0                	mov    eax,edx
c00150b5:	40                   	inc    eax
c00150b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150ba:	50                   	push   eax
c00150bb:	6a 09                	push   0x9
c00150bd:	68 71 43 02 c0       	push   0xc0024371
c00150c2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150c9:	50                   	push   eax
c00150ca:	e8 d5 b2 fe ff       	call   c00003a4 <memcmp>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	85 c0                	test   eax,eax
c00150d4:	75 21                	jne    c00150f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00150d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150de:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00150e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00150e6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00150e9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00150f0:	89 d0                	mov    eax,edx
c00150f2:	40                   	inc    eax
c00150f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150f7:	50                   	push   eax
c00150f8:	50                   	push   eax
c00150f9:	68 3d 43 02 c0       	push   0xc002433d
c00150fe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015105:	50                   	push   eax
c0015106:	e8 e5 b4 fe ff       	call   c00005f0 <strcmp>
c001510b:	83 c4 10             	add    esp,0x10
c001510e:	85 c0                	test   eax,eax
c0015110:	75 0f                	jne    c0015121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015112:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015115:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001511d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015121:	50                   	push   eax
c0015122:	50                   	push   eax
c0015123:	68 45 43 02 c0       	push   0xc0024345
c0015128:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001512f:	50                   	push   eax
c0015130:	e8 bb b4 fe ff       	call   c00005f0 <strcmp>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	85 c0                	test   eax,eax
c001513a:	75 0f                	jne    c001514b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001513c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001513f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015147:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001514b:	43                   	inc    ebx
c001514c:	e9 c6 fe ff ff       	jmp    c0015017 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015151:	31 d2                	xor    edx,edx
c0015153:	50                   	push   eax
c0015154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015158:	52                   	push   edx
c0015159:	50                   	push   eax
c001515a:	55                   	push   ebp
c001515b:	e8 88 7c ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c0015160:	58                   	pop    eax
c0015161:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015165:	e8 2d 46 ff ff       	call   c0009797 <malloc>
c001516a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001516d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015171:	31 d2                	xor    edx,edx
c0015173:	58                   	pop    eax
c0015174:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015178:	53                   	push   ebx
c0015179:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001517d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015181:	52                   	push   edx
c0015182:	50                   	push   eax
c0015183:	55                   	push   ebp
c0015184:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015187:	83 c4 14             	add    esp,0x14
c001518a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001518e:	e8 04 46 ff ff       	call   c0009797 <malloc>
c0015193:	31 d2                	xor    edx,edx
c0015195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015199:	83 c4 0c             	add    esp,0xc
c001519c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151a0:	52                   	push   edx
c00151a1:	50                   	push   eax
c00151a2:	55                   	push   ebp
c00151a3:	e8 40 7c ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c00151a8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00151ab:	31 d2                	xor    edx,edx
c00151ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00151b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00151b8:	52                   	push   edx
c00151b9:	50                   	push   eax
c00151ba:	55                   	push   ebp
c00151bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151be:	83 c4 20             	add    esp,0x20
c00151c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00151c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00151cd:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00151d1:	0f 84 0b 03 00 00    	je     c00154e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00151d7:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00151de:	31 d2                	xor    edx,edx
c00151e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151e4:	c1 e8 03             	shr    eax,0x3
c00151e7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00151eb:	51                   	push   ecx
c00151ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151f0:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00151f4:	52                   	push   edx
c00151f5:	50                   	push   eax
c00151f6:	55                   	push   ebp
c00151f7:	e8 ec 7b ff ff       	call   c000cde8 <File::seek(unsigned long long)>
c00151fc:	5b                   	pop    ebx
c00151fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015201:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015208:	e8 8a 45 ff ff       	call   c0009797 <malloc>
c001520d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015214:	31 d2                	xor    edx,edx
c0015216:	5e                   	pop    esi
c0015217:	8d 44 24 58          	lea    eax,[esp+0x58]
c001521b:	50                   	push   eax
c001521c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015224:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001522b:	52                   	push   edx
c001522c:	50                   	push   eax
c001522d:	55                   	push   ebp
c001522e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015231:	83 c4 20             	add    esp,0x20
c0015234:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001523c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015240:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0015244:	0f 8d 7c 02 00 00    	jge    c00154c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001524a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001524e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015252:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0015257:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001525a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001525e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015262:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0015266:	89 d8                	mov    eax,ebx
c0015268:	c1 e8 08             	shr    eax,0x8
c001526b:	89 c6                	mov    esi,eax
c001526d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015271:	c1 e6 04             	shl    esi,0x4
c0015274:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015278:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001527b:	85 d2                	test   edx,edx
c001527d:	0f 85 bf 00 00 00    	jne    c0015342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001528a:	03 06                	add    eax,DWORD PTR [esi]
c001528c:	50                   	push   eax
c001528d:	e8 4b f8 ff ff       	call   c0014add <Thr::getAddressOfKernelSymbol(char const*)>
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	89 c2                	mov    edx,eax
c0015297:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001529c:	85 c0                	test   eax,eax
c001529e:	0f 85 9e 00 00 00    	jne    c0015342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00152a4:	83 ec 0c             	sub    esp,0xc
c00152a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152ab:	03 06                	add    eax,DWORD PTR [esi]
c00152ad:	50                   	push   eax
c00152ae:	e8 81 34 ff ff       	call   c0008734 <Krnl::resolveCompatibilitySymbol(char*)>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	89 c2                	mov    edx,eax
c00152b8:	85 c0                	test   eax,eax
c00152ba:	0f 85 82 00 00 00    	jne    c0015342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00152c0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00152c4:	50                   	push   eax
c00152c5:	50                   	push   eax
c00152c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152ca:	03 06                	add    eax,DWORD PTR [esi]
c00152cc:	50                   	push   eax
c00152cd:	68 7b 43 02 c0       	push   0xc002437b
c00152d2:	e8 0e 74 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00152d7:	58                   	pop    eax
c00152d8:	5a                   	pop    edx
c00152d9:	68 95 43 02 c0       	push   0xc0024395
c00152de:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152e5:	50                   	push   eax
c00152e6:	e8 79 b2 fe ff       	call   c0000564 <strcpy>
c00152eb:	59                   	pop    ecx
c00152ec:	58                   	pop    eax
c00152ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f1:	03 06                	add    eax,DWORD PTR [esi]
c00152f3:	50                   	push   eax
c00152f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152fb:	50                   	push   eax
c00152fc:	e8 a3 b3 fe ff       	call   c00006a4 <strcat>
c0015301:	58                   	pop    eax
c0015302:	5a                   	pop    edx
c0015303:	68 2b 44 02 c0       	push   0xc002442b
c0015308:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001530f:	50                   	push   eax
c0015310:	e8 8f b3 fe ff       	call   c00006a4 <strcat>
c0015315:	83 c4 10             	add    esp,0x10
c0015318:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001531d:	0f 84 5d 01 00 00    	je     c0015480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015323:	83 ec 0c             	sub    esp,0xc
c0015326:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001532d:	50                   	push   eax
c001532e:	e8 1c d7 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0015333:	83 c4 10             	add    esp,0x10
c0015336:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001533a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001533e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015342:	80 fb 01             	cmp    bl,0x1
c0015345:	0f 85 88 00 00 00    	jne    c00153d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001534b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015352:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015356:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001535a:	01 ce                	add    esi,ecx
c001535c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0015362:	0f 94 c0             	sete   al
c0015365:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001536b:	0f 94 c3             	sete   bl
c001536e:	09 c3                	or     ebx,eax
c0015370:	8b 06                	mov    eax,DWORD PTR [esi]
c0015372:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0015377:	74 41                	je     c00153ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0015379:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001537c:	84 db                	test   bl,bl
c001537e:	75 15                	jne    c0015395 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0015380:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015384:	66 83 f8 0c          	cmp    ax,0xc
c0015388:	76 05                	jbe    c001538f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001538a:	b8 0c 00 00 00       	mov    eax,0xc
c001538f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015393:	76 37                	jbe    c00153cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015395:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0015399:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001539e:	0f 84 dc 00 00 00    	je     c0015480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00153a4:	83 ec 0c             	sub    esp,0xc
c00153a7:	68 ac 43 02 c0       	push   0xc00243ac
c00153ac:	e8 9e d6 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00153b1:	83 c4 10             	add    esp,0x10
c00153b4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00153b8:	eb 12                	jmp    c00153cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00153ba:	01 c1                	add    ecx,eax
c00153bc:	84 db                	test   bl,bl
c00153be:	75 0c                	jne    c00153cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00153c0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00153c4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00153c8:	77 02                	ja     c00153cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00153ca:	01 d1                	add    ecx,edx
c00153cc:	89 0e                	mov    DWORD PTR [esi],ecx
c00153ce:	e9 ea 00 00 00       	jmp    c00154bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00153d3:	80 fb 02             	cmp    bl,0x2
c00153d6:	75 7c                	jne    c0015454 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00153d8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00153df:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00153e3:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00153e7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00153ed:	74 20                	je     c001540f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00153ef:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00153f5:	74 18                	je     c001540f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00153f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00153fb:	b9 0a 00 00 00       	mov    ecx,0xa
c0015400:	66 83 f8 0e          	cmp    ax,0xe
c0015404:	77 03                	ja     c0015409 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0015406:	8d 48 fc             	lea    ecx,[eax-0x4]
c0015409:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001540d:	76 1f                	jbe    c001542e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001540f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0015413:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015418:	74 66                	je     c0015480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001541a:	83 ec 0c             	sub    esp,0xc
c001541d:	68 c8 43 02 c0       	push   0xc00243c8
c0015422:	e8 28 d6 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001542e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015430:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0015435:	74 13                	je     c001544a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0015437:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001543b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015442:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0015446:	01 c8                	add    eax,ecx
c0015448:	eb 04                	jmp    c001544e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001544a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001544e:	01 c2                	add    edx,eax
c0015450:	89 16                	mov    DWORD PTR [esi],edx
c0015452:	eb 69                	jmp    c00154bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015454:	0f b6 db             	movzx  ebx,bl
c0015457:	50                   	push   eax
c0015458:	50                   	push   eax
c0015459:	53                   	push   ebx
c001545a:	68 e4 43 02 c0       	push   0xc00243e4
c001545f:	e8 81 72 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0015464:	83 c4 10             	add    esp,0x10
c0015467:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001546c:	74 12                	je     c0015480 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001546e:	83 ec 0c             	sub    esp,0xc
c0015471:	68 ef 43 02 c0       	push   0xc00243ef
c0015476:	e8 d4 d5 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	eb 3d                	jmp    c00154bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015480:	83 ec 0c             	sub    esp,0xc
c0015483:	55                   	push   ebp
c0015484:	e8 ff 78 ff ff       	call   c000cd88 <File::close()>
c0015489:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001548c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001548f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015492:	59                   	pop    ecx
c0015493:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015497:	e8 0b 43 ff ff       	call   c00097a7 <free>
c001549c:	5b                   	pop    ebx
c001549d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154a1:	e8 01 43 ff ff       	call   c00097a7 <free>
c00154a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154a9:	e8 f9 42 ff ff       	call   c00097a7 <free>
c00154ae:	5e                   	pop    esi
c00154af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154b3:	e8 ef 42 ff ff       	call   c00097a7 <free>
c00154b8:	83 c4 10             	add    esp,0x10
c00154bb:	eb 21                	jmp    c00154de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00154bd:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00154c1:	e9 76 fd ff ff       	jmp    c001523c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00154c6:	83 ec 0c             	sub    esp,0xc
c00154c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154cd:	e8 d5 42 ff ff       	call   c00097a7 <free>
c00154d2:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	e9 eb fc ff ff       	jmp    c00151c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00154de:	31 c0                	xor    eax,eax
c00154e0:	eb 33                	jmp    c0015515 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	55                   	push   ebp
c00154e6:	e8 9d 78 ff ff       	call   c000cd88 <File::close()>
c00154eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00154ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154f4:	58                   	pop    eax
c00154f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154f9:	e8 a9 42 ff ff       	call   c00097a7 <free>
c00154fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015501:	e8 a1 42 ff ff       	call   c00097a7 <free>
c0015506:	5a                   	pop    edx
c0015507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001550b:	e8 97 42 ff ff       	call   c00097a7 <free>
c0015510:	83 c4 10             	add    esp,0x10
c0015513:	b0 01                	mov    al,0x1
c0015515:	81 c4 5c 03 00 00    	add    esp,0x35c
c001551b:	5b                   	pop    ebx
c001551c:	5e                   	pop    esi
c001551d:	5f                   	pop    edi
c001551e:	5d                   	pop    ebp
c001551f:	c3                   	ret    

c0015520 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015520:	56                   	push   esi
c0015521:	31 d2                	xor    edx,edx
c0015523:	53                   	push   ebx
c0015524:	8b 1d e0 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028fe0
c001552a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001552e:	39 d3                	cmp    ebx,edx
c0015530:	7e 1b                	jle    c001554d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015532:	8b 04 95 00 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e00]
c0015539:	39 c8                	cmp    eax,ecx
c001553b:	77 0d                	ja     c001554a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001553d:	8b 34 95 00 90 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7000]
c0015544:	01 c6                	add    esi,eax
c0015546:	39 ce                	cmp    esi,ecx
c0015548:	77 05                	ja     c001554f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001554a:	42                   	inc    edx
c001554b:	eb e1                	jmp    c001552e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001554d:	31 c0                	xor    eax,eax
c001554f:	5b                   	pop    ebx
c0015550:	5e                   	pop    esi
c0015551:	c3                   	ret    

c0015552 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015552:	53                   	push   ebx
c0015553:	31 c0                	xor    eax,eax
c0015555:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015559:	8b 1d e0 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028fe0
c001555f:	39 c3                	cmp    ebx,eax
c0015561:	7e 22                	jle    c0015585 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015563:	8b 14 85 00 92 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6e00]
c001556a:	39 ca                	cmp    edx,ecx
c001556c:	77 14                	ja     c0015582 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001556e:	03 14 85 00 90 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7000]
c0015575:	39 ca                	cmp    edx,ecx
c0015577:	76 09                	jbe    c0015582 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015579:	8b 04 85 00 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c00]
c0015580:	eb 05                	jmp    c0015587 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015582:	40                   	inc    eax
c0015583:	eb da                	jmp    c001555f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015585:	31 c0                	xor    eax,eax
c0015587:	5b                   	pop    ebx
c0015588:	c3                   	ret    

c0015589 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015589:	53                   	push   ebx
c001558a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001558e:	53                   	push   ebx
c001558f:	e8 8c ff ff ff       	call   c0015520 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015594:	5a                   	pop    edx
c0015595:	31 d2                	xor    edx,edx
c0015597:	85 c0                	test   eax,eax
c0015599:	74 04                	je     c001559f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001559b:	89 da                	mov    edx,ebx
c001559d:	29 c2                	sub    edx,eax
c001559f:	89 d0                	mov    eax,edx
c00155a1:	5b                   	pop    ebx
c00155a2:	c3                   	ret    

c00155a3 <Thr::loadDLL(char const*, bool)>:
c00155a3:	55                   	push   ebp
c00155a4:	57                   	push   edi
c00155a5:	56                   	push   esi
c00155a6:	53                   	push   ebx
c00155a7:	81 ec 34 01 00 00    	sub    esp,0x134
c00155ad:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00155b4:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00155bb:	56                   	push   esi
c00155bc:	68 07 44 02 c0       	push   0xc0024407
c00155c1:	e8 1f 71 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00155c6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155cd:	e8 c5 41 ff ff       	call   c0009797 <malloc>
c00155d2:	83 c4 0c             	add    esp,0xc
c00155d5:	89 c3                	mov    ebx,eax
c00155d7:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c00155dd:	56                   	push   esi
c00155de:	50                   	push   eax
c00155df:	e8 6c 76 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c00155e4:	83 c4 10             	add    esp,0x10
c00155e7:	85 db                	test   ebx,ebx
c00155e9:	75 3c                	jne    c0015627 <Thr::loadDLL(char const*, bool)+0x84>
c00155eb:	89 f8                	mov    eax,edi
c00155ed:	84 c0                	test   al,al
c00155ef:	0f 84 d2 01 00 00    	je     c00157c7 <Thr::loadDLL(char const*, bool)+0x224>
c00155f5:	55                   	push   ebp
c00155f6:	55                   	push   ebp
c00155f7:	68 18 44 02 c0       	push   0xc0024418
c00155fc:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015600:	55                   	push   ebp
c0015601:	e8 5e af fe ff       	call   c0000564 <strcpy>
c0015606:	58                   	pop    eax
c0015607:	5a                   	pop    edx
c0015608:	56                   	push   esi
c0015609:	55                   	push   ebp
c001560a:	e8 95 b0 fe ff       	call   c00006a4 <strcat>
c001560f:	59                   	pop    ecx
c0015610:	58                   	pop    eax
c0015611:	68 2b 44 02 c0       	push   0xc002442b
c0015616:	55                   	push   ebp
c0015617:	e8 88 b0 fe ff       	call   c00006a4 <strcat>
c001561c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001561f:	e8 2b d4 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	51                   	push   ecx
c0015628:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001562c:	50                   	push   eax
c001562d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015631:	50                   	push   eax
c0015632:	53                   	push   ebx
c0015633:	e8 9e 79 ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	85 db                	test   ebx,ebx
c001563d:	74 0c                	je     c001564b <Thr::loadDLL(char const*, bool)+0xa8>
c001563f:	83 ec 0c             	sub    esp,0xc
c0015642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015644:	53                   	push   ebx
c0015645:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015648:	83 c4 10             	add    esp,0x10
c001564b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015650:	75 0a                	jne    c001565c <Thr::loadDLL(char const*, bool)+0xb9>
c0015652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015656:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001565a:	75 3c                	jne    c0015698 <Thr::loadDLL(char const*, bool)+0xf5>
c001565c:	89 f8                	mov    eax,edi
c001565e:	84 c0                	test   al,al
c0015660:	0f 84 49 01 00 00    	je     c00157af <Thr::loadDLL(char const*, bool)+0x20c>
c0015666:	51                   	push   ecx
c0015667:	51                   	push   ecx
c0015668:	68 18 44 02 c0       	push   0xc0024418
c001566d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015671:	53                   	push   ebx
c0015672:	e8 ed ae fe ff       	call   c0000564 <strcpy>
c0015677:	5d                   	pop    ebp
c0015678:	58                   	pop    eax
c0015679:	56                   	push   esi
c001567a:	53                   	push   ebx
c001567b:	e8 24 b0 fe ff       	call   c00006a4 <strcat>
c0015680:	58                   	pop    eax
c0015681:	5a                   	pop    edx
c0015682:	68 2b 44 02 c0       	push   0xc002442b
c0015687:	53                   	push   ebx
c0015688:	e8 17 b0 fe ff       	call   c00006a4 <strcat>
c001568d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015690:	e8 ba d3 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0015695:	83 c4 10             	add    esp,0x10
c0015698:	52                   	push   edx
c0015699:	6a 03                	push   0x3
c001569b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156a3:	05 ff 0f 00 00       	add    eax,0xfff
c00156a8:	83 d2 00             	adc    edx,0x0
c00156ab:	0f ac d0 0c          	shrd   eax,edx,0xc
c00156af:	50                   	push   eax
c00156b0:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c00156b6:	e8 3d 64 ff ff       	call   c000baf8 <VAS::allocatePages(int, int)>
c00156bb:	59                   	pop    ecx
c00156bc:	89 c3                	mov    ebx,eax
c00156be:	5d                   	pop    ebp
c00156bf:	50                   	push   eax
c00156c0:	68 36 2b 02 c0       	push   0xc0022b36
c00156c5:	e8 1b 70 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00156ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00156cd:	e8 f2 ad fe ff       	call   c00004c4 <strlen>
c00156d2:	8b 2d e0 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028fe0
c00156d8:	40                   	inc    eax
c00156d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00156dc:	e8 b6 40 ff ff       	call   c0009797 <malloc>
c00156e1:	89 04 ad 00 94 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6c00],eax
c00156e8:	58                   	pop    eax
c00156e9:	a1 e0 8f 02 c0       	mov    eax,ds:0xc0028fe0
c00156ee:	5a                   	pop    edx
c00156ef:	56                   	push   esi
c00156f0:	ff 34 85 00 94 02 c0 	push   DWORD PTR [eax*4-0x3ffd6c00]
c00156f7:	e8 68 ae fe ff       	call   c0000564 <strcpy>
c00156fc:	a1 e0 8f 02 c0       	mov    eax,ds:0xc0028fe0
c0015701:	8d 50 01             	lea    edx,[eax+0x1]
c0015704:	89 1c 85 00 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e00],ebx
c001570b:	89 15 e0 8f 02 c0    	mov    DWORD PTR ds:0xc0028fe0,edx
c0015711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015715:	83 c4 0c             	add    esp,0xc
c0015718:	89 14 85 00 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7000],edx
c001571f:	6a 01                	push   0x1
c0015721:	53                   	push   ebx
c0015722:	56                   	push   esi
c0015723:	e8 c2 f6 ff ff       	call   c0014dea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015728:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001572c:	83 c4 10             	add    esp,0x10
c001572f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015734:	0f 85 89 00 00 00    	jne    c00157c3 <Thr::loadDLL(char const*, bool)+0x220>
c001573a:	89 f8                	mov    eax,edi
c001573c:	84 c0                	test   al,al
c001573e:	74 73                	je     c00157b3 <Thr::loadDLL(char const*, bool)+0x210>
c0015740:	83 ec 0c             	sub    esp,0xc
c0015743:	68 2d 44 02 c0       	push   0xc002442d
c0015748:	e8 02 d3 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	eb 61                	jmp    c00157b3 <Thr::loadDLL(char const*, bool)+0x210>
c0015752:	50                   	push   eax
c0015753:	50                   	push   eax
c0015754:	89 e8                	mov    eax,ebp
c0015756:	c1 e0 0c             	shl    eax,0xc
c0015759:	01 d8                	add    eax,ebx
c001575b:	50                   	push   eax
c001575c:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c0015762:	e8 f7 5e ff ff       	call   c000b65e <VAS::getPageTableEntry(unsigned long)>
c0015767:	83 c4 10             	add    esp,0x10
c001576a:	8b 00                	mov    eax,DWORD PTR [eax]
c001576c:	a8 60                	test   al,0x60
c001576e:	75 11                	jne    c0015781 <Thr::loadDLL(char const*, bool)+0x1de>
c0015770:	83 ec 0c             	sub    esp,0xc
c0015773:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015778:	50                   	push   eax
c0015779:	e8 d5 43 ff ff       	call   c0009b53 <Phys::freePage(unsigned long)>
c001577e:	83 c4 10             	add    esp,0x10
c0015781:	45                   	inc    ebp
c0015782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015786:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001578a:	05 ff 0f 00 00       	add    eax,0xfff
c001578f:	bf 00 00 00 00       	mov    edi,0x0
c0015794:	83 d2 00             	adc    edx,0x0
c0015797:	0f ac d0 0c          	shrd   eax,edx,0xc
c001579b:	c1 ea 0c             	shr    edx,0xc
c001579e:	39 c5                	cmp    ebp,eax
c00157a0:	89 d1                	mov    ecx,edx
c00157a2:	89 f8                	mov    eax,edi
c00157a4:	19 c8                	sbb    eax,ecx
c00157a6:	72 aa                	jb     c0015752 <Thr::loadDLL(char const*, bool)+0x1af>
c00157a8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00157ad:	75 18                	jne    c00157c7 <Thr::loadDLL(char const*, bool)+0x224>
c00157af:	31 db                	xor    ebx,ebx
c00157b1:	eb 14                	jmp    c00157c7 <Thr::loadDLL(char const*, bool)+0x224>
c00157b3:	83 ec 0c             	sub    esp,0xc
c00157b6:	68 4c 44 02 c0       	push   0xc002444c
c00157bb:	e8 8f d2 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	31 ed                	xor    ebp,ebp
c00157c5:	eb bb                	jmp    c0015782 <Thr::loadDLL(char const*, bool)+0x1df>
c00157c7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00157cd:	89 d8                	mov    eax,ebx
c00157cf:	5b                   	pop    ebx
c00157d0:	5e                   	pop    esi
c00157d1:	5f                   	pop    edi
c00157d2:	5d                   	pop    ebp
c00157d3:	c3                   	ret    

c00157d4 <Thr::executeDLL(unsigned long, void*)>:
c00157d4:	56                   	push   esi
c00157d5:	53                   	push   ebx
c00157d6:	52                   	push   edx
c00157d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00157df:	85 db                	test   ebx,ebx
c00157e1:	75 10                	jne    c00157f3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00157e3:	83 ec 0c             	sub    esp,0xc
c00157e6:	68 68 44 02 c0       	push   0xc0024468
c00157eb:	e8 5f d2 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00157f0:	83 c4 10             	add    esp,0x10
c00157f3:	50                   	push   eax
c00157f4:	50                   	push   eax
c00157f5:	53                   	push   ebx
c00157f6:	68 92 44 02 c0       	push   0xc0024492
c00157fb:	e8 e5 6e ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0015800:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015804:	89 d8                	mov    eax,ebx
c0015806:	83 c4 14             	add    esp,0x14
c0015809:	5b                   	pop    ebx
c001580a:	5e                   	pop    esi
c001580b:	ff e0                	jmp    eax
c001580d:	66 90                	xchg   ax,ax
c001580f:	90                   	nop

c0015810 <userModeEntryPoint(void*)>:
c0015810:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0015815:	48                   	dec    eax
c0015816:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001581b:	75 03                	jne    c0015820 <userModeEntryPoint(void*)+0x10>
c001581d:	fb                   	sti    
c001581e:	66 90                	xchg   ax,ax
c0015820:	fb                   	sti    
c0015821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015826:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015829:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001582f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015833:	e9 27 aa fe ff       	jmp    c000025f <goToUsermode>

c0015838 <changeTSS>:
c0015838:	83 ec 14             	sub    esp,0x14
c001583b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015840:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015843:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015848:	c1 e2 15             	shl    edx,0x15
c001584b:	29 d0                	sub    eax,edx
c001584d:	50                   	push   eax
c001584e:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0015853:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015859:	05 7c 11 00 00       	add    eax,0x117c
c001585e:	50                   	push   eax
c001585f:	e8 78 54 ff ff       	call   c000acdc <TSS::setESP(unsigned long)>
c0015864:	83 c4 1c             	add    esp,0x1c
c0015867:	c3                   	ret    

c0015868 <switchToThread(ThreadControlBlock*)>:
c0015868:	57                   	push   edi
c0015869:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c001586e:	56                   	push   esi
c001586f:	85 c0                	test   eax,eax
c0015871:	53                   	push   ebx
c0015872:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015876:	0f 85 88 00 00 00    	jne    c0015904 <switchToThread(ThreadControlBlock*)+0x9c>
c001587c:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c001587f:	3c ff                	cmp    al,0xff
c0015881:	74 7d                	je     c0015900 <switchToThread(ThreadControlBlock*)+0x98>
c0015883:	0f b6 d0             	movzx  edx,al
c0015886:	b8 00 04 00 00       	mov    eax,0x400
c001588b:	29 d0                	sub    eax,edx
c001588d:	d1 f8                	sar    eax,1
c001588f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0015892:	66 90                	xchg   ax,ax
c0015894:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015897:	ff 15 98 98 02 c0    	call   DWORD PTR ds:0xc0029898
c001589d:	a3 e8 97 02 c0       	mov    ds:0xc00297e8,eax
c00158a2:	89 15 ec 97 02 c0    	mov    DWORD PTR ds:0xc00297ec,edx
c00158a8:	89 c6                	mov    esi,eax
c00158aa:	89 d7                	mov    edi,edx
c00158ac:	2b 35 d8 97 02 c0    	sub    esi,DWORD PTR ds:0xc00297d8
c00158b2:	a3 d8 97 02 c0       	mov    ds:0xc00297d8,eax
c00158b7:	1b 3d dc 97 02 c0    	sbb    edi,DWORD PTR ds:0xc00297dc
c00158bd:	89 35 e0 97 02 c0    	mov    DWORD PTR ds:0xc00297e0,esi
c00158c3:	89 3d e4 97 02 c0    	mov    DWORD PTR ds:0xc00297e4,edi
c00158c9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158cf:	89 15 dc 97 02 c0    	mov    DWORD PTR ds:0xc00297dc,edx
c00158d5:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00158d8:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00158db:	01 c6                	add    esi,eax
c00158dd:	11 d7                	adc    edi,edx
c00158df:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00158e2:	83 ec 0c             	sub    esp,0xc
c00158e5:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00158e8:	53                   	push   ebx
c00158e9:	e8 a9 a9 fe ff       	call   c0000297 <switchToThreadASM>
c00158ee:	0f 20 c0             	mov    eax,cr0
c00158f1:	83 c8 08             	or     eax,0x8
c00158f4:	0f 22 c0             	mov    cr0,eax
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	5b                   	pop    ebx
c00158fb:	5e                   	pop    esi
c00158fc:	5f                   	pop    edi
c00158fd:	c3                   	ret    
c00158fe:	66 90                	xchg   ax,ax
c0015900:	31 c0                	xor    eax,eax
c0015902:	eb 90                	jmp    c0015894 <switchToThread(ThreadControlBlock*)+0x2c>
c0015904:	5b                   	pop    ebx
c0015905:	c7 05 a0 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x1
c001590f:	5e                   	pop    esi
c0015910:	5f                   	pop    edi
c0015911:	c3                   	ret    
c0015912:	66 90                	xchg   ax,ax

c0015914 <Process::addArgs(char**)>:
c0015914:	57                   	push   edi
c0015915:	56                   	push   esi
c0015916:	53                   	push   ebx
c0015917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001591b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001591f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015929:	85 ff                	test   edi,edi
c001592b:	74 43                	je     c0015970 <Process::addArgs(char**)+0x5c>
c001592d:	8b 07                	mov    eax,DWORD PTR [edi]
c001592f:	85 c0                	test   eax,eax
c0015931:	74 3d                	je     c0015970 <Process::addArgs(char**)+0x5c>
c0015933:	31 db                	xor    ebx,ebx
c0015935:	8d 76 00             	lea    esi,[esi+0x0]
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	50                   	push   eax
c001593c:	e8 83 ab fe ff       	call   c00004c4 <strlen>
c0015941:	40                   	inc    eax
c0015942:	89 04 24             	mov    DWORD PTR [esp],eax
c0015945:	e8 4d 3e ff ff       	call   c0009797 <malloc>
c001594a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015951:	5a                   	pop    edx
c0015952:	59                   	pop    ecx
c0015953:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0015956:	43                   	inc    ebx
c0015957:	50                   	push   eax
c0015958:	e8 07 ac fe ff       	call   c0000564 <strcpy>
c001595d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0015963:	83 c4 10             	add    esp,0x10
c0015966:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015969:	85 c0                	test   eax,eax
c001596b:	75 cb                	jne    c0015938 <Process::addArgs(char**)+0x24>
c001596d:	8d 76 00             	lea    esi,[esi+0x0]
c0015970:	5b                   	pop    ebx
c0015971:	5e                   	pop    esi
c0015972:	5f                   	pop    edi
c0015973:	c3                   	ret    

c0015974 <Process::Process(char const*, Process*, char**)>:
c0015974:	56                   	push   esi
c0015975:	53                   	push   ebx
c0015976:	83 ec 14             	sub    esp,0x14
c0015979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001597d:	05 0c 02 00 00       	add    eax,0x20c
c0015982:	bb 07 00 00 00       	mov    ebx,0x7
c0015987:	89 c6                	mov    esi,eax
c0015989:	8d 76 00             	lea    esi,[esi+0x0]
c001598c:	85 db                	test   ebx,ebx
c001598e:	78 14                	js     c00159a4 <Process::Process(char const*, Process*, char**)+0x30>
c0015990:	83 ec 0c             	sub    esp,0xc
c0015993:	56                   	push   esi
c0015994:	e8 b3 c3 00 00       	call   c0021d4c <ThreadControlBlock::ThreadControlBlock()>
c0015999:	83 c4 10             	add    esp,0x10
c001599c:	83 c6 5f             	add    esi,0x5f
c001599f:	4b                   	dec    ebx
c00159a0:	eb ea                	jmp    c001598c <Process::Process(char const*, Process*, char**)+0x18>
c00159a2:	66 90                	xchg   ax,ax
c00159a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159a8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00159af:	83 ec 0c             	sub    esp,0xc
c00159b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159b6:	e8 1d cf ff ff       	call   c00128d8 <Krnl::newProcessEnv(Process*)>
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	89 c2                	mov    edx,eax
c00159c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159c4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00159ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159ce:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00159d7:	a1 50 5a 02 c0       	mov    eax,ds:0xc0025a50
c00159dc:	8d 50 01             	lea    edx,[eax+0x1]
c00159df:	89 15 50 5a 02 c0    	mov    DWORD PTR ds:0xc0025a50,edx
c00159e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159e9:	89 02                	mov    DWORD PTR [edx],eax
c00159eb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00159f3:	83 ec 0c             	sub    esp,0xc
c00159f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00159fa:	e8 98 3d ff ff       	call   c0009797 <malloc>
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	89 c3                	mov    ebx,eax
c0015a04:	83 ec 08             	sub    esp,0x8
c0015a07:	6a 00                	push   0x0
c0015a09:	53                   	push   ebx
c0015a0a:	e8 91 64 ff ff       	call   c000bea0 <VAS::VAS(bool)>
c0015a0f:	83 c4 10             	add    esp,0x10
c0015a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a16:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a20:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a32:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a3c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a42:	85 c0                	test   eax,eax
c0015a44:	74 42                	je     c0015a88 <Process::Process(char const*, Process*, char**)+0x114>
c0015a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a4a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a50:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a64:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a6a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a74:	05 0c 01 00 00       	add    eax,0x10c
c0015a79:	83 ec 08             	sub    esp,0x8
c0015a7c:	52                   	push   edx
c0015a7d:	50                   	push   eax
c0015a7e:	e8 e1 aa fe ff       	call   c0000564 <strcpy>
c0015a83:	83 c4 10             	add    esp,0x10
c0015a86:	eb 64                	jmp    c0015aec <Process::Process(char const*, Process*, char**)+0x178>
c0015a88:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0015a90:	83 ec 0c             	sub    esp,0xc
c0015a93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015a97:	e8 fb 3c ff ff       	call   c0009797 <malloc>
c0015a9c:	83 c4 10             	add    esp,0x10
c0015a9f:	89 c3                	mov    ebx,eax
c0015aa1:	83 ec 08             	sub    esp,0x8
c0015aa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015aa8:	53                   	push   ebx
c0015aa9:	e8 ba 4f ff ff       	call   c000aa68 <VgaText::VgaText(char const*)>
c0015aae:	83 c4 10             	add    esp,0x10
c0015ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015abf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ac5:	83 ec 0c             	sub    esp,0xc
c0015ac8:	50                   	push   eax
c0015ac9:	e8 32 48 ff ff       	call   c000a300 <addToTerminalCycle(VgaText*)>
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad5:	05 0c 01 00 00       	add    eax,0x10c
c0015ada:	83 ec 08             	sub    esp,0x8
c0015add:	68 b1 44 02 c0       	push   0xc00244b1
c0015ae2:	50                   	push   eax
c0015ae3:	e8 7c aa fe ff       	call   c0000564 <strcpy>
c0015ae8:	83 c4 10             	add    esp,0x10
c0015aeb:	90                   	nop
c0015aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af0:	83 c0 0c             	add    eax,0xc
c0015af3:	83 ec 08             	sub    esp,0x8
c0015af6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015afa:	50                   	push   eax
c0015afb:	e8 64 aa fe ff       	call   c0000564 <strcpy>
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	83 ec 08             	sub    esp,0x8
c0015b06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b0e:	e8 01 fe ff ff       	call   c0015914 <Process::addArgs(char**)>
c0015b13:	83 c4 10             	add    esp,0x10
c0015b16:	83 ec 08             	sub    esp,0x8
c0015b19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b21:	e8 8e ed ff ff       	call   c00148b4 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b31:	83 f0 01             	xor    eax,0x1
c0015b34:	88 c2                	mov    dl,al
c0015b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015b40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015b45:	83 ec 08             	sub    esp,0x8
c0015b48:	50                   	push   eax
c0015b49:	68 08 45 02 c0       	push   0xc0024508
c0015b4e:	e8 92 6b ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	90                   	nop
c0015b57:	83 c4 14             	add    esp,0x14
c0015b5a:	5b                   	pop    ebx
c0015b5b:	5e                   	pop    esi
c0015b5c:	c3                   	ret    
c0015b5d:	90                   	nop
c0015b5e:	66 90                	xchg   ax,ax

c0015b60 <Process::Process(bool, char const*, Process*, char**)>:
c0015b60:	56                   	push   esi
c0015b61:	53                   	push   ebx
c0015b62:	83 ec 24             	sub    esp,0x24
c0015b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b71:	05 0c 02 00 00       	add    eax,0x20c
c0015b76:	bb 07 00 00 00       	mov    ebx,0x7
c0015b7b:	89 c6                	mov    esi,eax
c0015b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b80:	85 db                	test   ebx,ebx
c0015b82:	78 14                	js     c0015b98 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015b84:	83 ec 0c             	sub    esp,0xc
c0015b87:	56                   	push   esi
c0015b88:	e8 bf c1 00 00       	call   c0021d4c <ThreadControlBlock::ThreadControlBlock()>
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	83 c6 5f             	add    esi,0x5f
c0015b93:	4b                   	dec    ebx
c0015b94:	eb ea                	jmp    c0015b80 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015b96:	66 90                	xchg   ax,ax
c0015b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b9c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015ba3:	83 ec 0c             	sub    esp,0xc
c0015ba6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015baa:	e8 29 cd ff ff       	call   c00128d8 <Krnl::newProcessEnv(Process*)>
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	89 c2                	mov    edx,eax
c0015bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bb8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015bbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bc2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015bcb:	a1 50 5a 02 c0       	mov    eax,ds:0xc0025a50
c0015bd0:	8d 50 01             	lea    edx,[eax+0x1]
c0015bd3:	89 15 50 5a 02 c0    	mov    DWORD PTR ds:0xc0025a50,edx
c0015bd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bdd:	89 02                	mov    DWORD PTR [edx],eax
c0015bdf:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015be7:	83 ec 0c             	sub    esp,0xc
c0015bea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015bee:	e8 a4 3b ff ff       	call   c0009797 <malloc>
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	89 c3                	mov    ebx,eax
c0015bf8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015bfd:	83 ec 08             	sub    esp,0x8
c0015c00:	50                   	push   eax
c0015c01:	53                   	push   ebx
c0015c02:	e8 99 62 ff ff       	call   c000bea0 <VAS::VAS(bool)>
c0015c07:	83 c4 10             	add    esp,0x10
c0015c0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c0e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c18:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c2a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c3a:	85 c0                	test   eax,eax
c0015c3c:	74 42                	je     c0015c80 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0015c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c42:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c48:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c52:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c6c:	05 0c 01 00 00       	add    eax,0x10c
c0015c71:	83 ec 08             	sub    esp,0x8
c0015c74:	52                   	push   edx
c0015c75:	50                   	push   eax
c0015c76:	e8 e9 a8 fe ff       	call   c0000564 <strcpy>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	eb 64                	jmp    c0015ce4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0015c80:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015c8f:	e8 03 3b ff ff       	call   c0009797 <malloc>
c0015c94:	83 c4 10             	add    esp,0x10
c0015c97:	89 c3                	mov    ebx,eax
c0015c99:	83 ec 08             	sub    esp,0x8
c0015c9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ca0:	53                   	push   ebx
c0015ca1:	e8 c2 4d ff ff       	call   c000aa68 <VgaText::VgaText(char const*)>
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015cbd:	83 ec 0c             	sub    esp,0xc
c0015cc0:	50                   	push   eax
c0015cc1:	e8 3a 46 ff ff       	call   c000a300 <addToTerminalCycle(VgaText*)>
c0015cc6:	83 c4 10             	add    esp,0x10
c0015cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccd:	05 0c 01 00 00       	add    eax,0x10c
c0015cd2:	83 ec 08             	sub    esp,0x8
c0015cd5:	68 b1 44 02 c0       	push   0xc00244b1
c0015cda:	50                   	push   eax
c0015cdb:	e8 84 a8 fe ff       	call   c0000564 <strcpy>
c0015ce0:	83 c4 10             	add    esp,0x10
c0015ce3:	90                   	nop
c0015ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce8:	83 c0 0c             	add    eax,0xc
c0015ceb:	83 ec 08             	sub    esp,0x8
c0015cee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015cf2:	50                   	push   eax
c0015cf3:	e8 6c a8 fe ff       	call   c0000564 <strcpy>
c0015cf8:	83 c4 10             	add    esp,0x10
c0015cfb:	83 ec 08             	sub    esp,0x8
c0015cfe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d06:	e8 09 fc ff ff       	call   c0015914 <Process::addArgs(char**)>
c0015d0b:	83 c4 10             	add    esp,0x10
c0015d0e:	90                   	nop
c0015d0f:	83 c4 24             	add    esp,0x24
c0015d12:	5b                   	pop    ebx
c0015d13:	5e                   	pop    esi
c0015d14:	c3                   	ret    
c0015d15:	8d 76 00             	lea    esi,[esi+0x0]

c0015d18 <taskStartupFunction>:
c0015d18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d1d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015d20:	c3                   	ret    
c0015d21:	90                   	nop
c0015d22:	66 90                	xchg   ax,ax

c0015d24 <Semaphore::Semaphore(int)>:
c0015d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d2c:	89 10                	mov    DWORD PTR [eax],edx
c0015d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d32:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015d39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015d4f:	90                   	nop
c0015d50:	c3                   	ret    
c0015d51:	90                   	nop
c0015d52:	66 90                	xchg   ax,ax

c0015d54 <Mutex::Mutex()>:
c0015d54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d58:	6a 01                	push   0x1
c0015d5a:	50                   	push   eax
c0015d5b:	e8 c4 ff ff ff       	call   c0015d24 <Semaphore::Semaphore(int)>
c0015d60:	83 c4 08             	add    esp,0x8
c0015d63:	90                   	nop
c0015d64:	c3                   	ret    
c0015d65:	90                   	nop
c0015d66:	66 90                	xchg   ax,ax

c0015d68 <Process::createThread(void (*)(void*), void*, int)>:
c0015d68:	57                   	push   edi
c0015d69:	31 c9                	xor    ecx,ecx
c0015d6b:	56                   	push   esi
c0015d6c:	53                   	push   ebx
c0015d6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d71:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015d78:	89 f2                	mov    edx,esi
c0015d7a:	66 90                	xchg   ax,ax
c0015d7c:	0f b7 c2             	movzx  eax,dx
c0015d7f:	83 e2 01             	and    edx,0x1
c0015d82:	74 14                	je     c0015d98 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015d84:	d1 f8                	sar    eax,1
c0015d86:	41                   	inc    ecx
c0015d87:	89 c2                	mov    edx,eax
c0015d89:	83 f9 10             	cmp    ecx,0x10
c0015d8c:	75 ee                	jne    c0015d7c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015d8e:	31 db                	xor    ebx,ebx
c0015d90:	89 d8                	mov    eax,ebx
c0015d92:	5b                   	pop    ebx
c0015d93:	5e                   	pop    esi
c0015d94:	5f                   	pop    edi
c0015d95:	c3                   	ret    
c0015d96:	66 90                	xchg   ax,ax
c0015d98:	b8 01 00 00 00       	mov    eax,0x1
c0015d9d:	d3 e0                	shl    eax,cl
c0015d9f:	09 c6                	or     esi,eax
c0015da1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015da4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015dab:	01 c0                	add    eax,eax
c0015dad:	01 c8                	add    eax,ecx
c0015daf:	8d 04 80             	lea    eax,[eax+eax*4]
c0015db2:	01 d8                	add    eax,ebx
c0015db4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015dbb:	75 0b                	jne    c0015dc8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015dbd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015dc7:	90                   	nop
c0015dc8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015dce:	83 ec 08             	sub    esp,0x8
c0015dd1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015dd4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015dd7:	01 c0                	add    eax,eax
c0015dd9:	01 c8                	add    eax,ecx
c0015ddb:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015dde:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015de1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015de7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015ded:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015df1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015df7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015dfd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015e04:	89 ca                	mov    edx,ecx
c0015e06:	f7 da                	neg    edx
c0015e08:	c1 e2 15             	shl    edx,0x15
c0015e0b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015e11:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015e17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e1b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015e25:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015e2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e2f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015e35:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015e3f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015e49:	53                   	push   ebx
c0015e4a:	68 c4 97 02 c0       	push   0xc00297c4
c0015e4f:	e8 98 bc 00 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e54:	83 c4 10             	add    esp,0x10
c0015e57:	89 d8                	mov    eax,ebx
c0015e59:	5b                   	pop    ebx
c0015e5a:	5e                   	pop    esi
c0015e5b:	5f                   	pop    edi
c0015e5c:	c3                   	ret    
c0015e5d:	90                   	nop
c0015e5e:	66 90                	xchg   ax,ax

c0015e60 <Process::createUserThread()>:
c0015e60:	83 ec 0c             	sub    esp,0xc
c0015e63:	68 80 00 00 00       	push   0x80
c0015e68:	6a 00                	push   0x0
c0015e6a:	68 10 58 01 c0       	push   0xc0015810
c0015e6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e73:	e8 f0 fe ff ff       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c0015e78:	83 c4 1c             	add    esp,0x1c
c0015e7b:	c3                   	ret    

c0015e7c <setupMultitasking(void (*)())>:
c0015e7c:	56                   	push   esi
c0015e7d:	53                   	push   ebx
c0015e7e:	51                   	push   ecx
c0015e7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e83:	eb 13                	jmp    c0015e98 <setupMultitasking(void (*)())+0x1c>
c0015e85:	8d 76 00             	lea    esi,[esi+0x0]
c0015e88:	83 ec 0c             	sub    esp,0xc
c0015e8b:	68 c4 97 02 c0       	push   0xc00297c4
c0015e90:	e8 9f bb 00 00       	call   c0021a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e95:	83 c4 10             	add    esp,0x10
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	68 c4 97 02 c0       	push   0xc00297c4
c0015ea0:	e8 6b bb 00 00       	call   c0021a10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ea5:	83 c4 10             	add    esp,0x10
c0015ea8:	84 c0                	test   al,al
c0015eaa:	74 dc                	je     c0015e88 <setupMultitasking(void (*)())+0xc>
c0015eac:	83 ec 0c             	sub    esp,0xc
c0015eaf:	68 1f 07 00 00       	push   0x71f
c0015eb4:	e8 de 38 ff ff       	call   c0009797 <malloc>
c0015eb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ec0:	89 c3                	mov    ebx,eax
c0015ec2:	6a 00                	push   0x0
c0015ec4:	68 b5 44 02 c0       	push   0xc00244b5
c0015ec9:	6a 01                	push   0x1
c0015ecb:	50                   	push   eax
c0015ecc:	e8 8f fc ff ff       	call   c0015b60 <Process::Process(bool, char const*, Process*, char**)>
c0015ed1:	83 c4 14             	add    esp,0x14
c0015ed4:	89 1d d0 97 02 c0    	mov    DWORD PTR ds:0xc00297d0,ebx
c0015eda:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0015ee0:	e8 84 46 ff ff       	call   c000a569 <setActiveTerminal(VgaText*)>
c0015ee5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0015eed:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015ef7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015efd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015f00:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015f0a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015f10:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015f16:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015f20:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015f2a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015f34:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015f3a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015f44:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015f4a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015f54:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015f5a:	58                   	pop    eax
c0015f5b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015f61:	5a                   	pop    edx
c0015f62:	68 b1 44 02 c0       	push   0xc00244b1
c0015f67:	50                   	push   eax
c0015f68:	e8 f7 a5 fe ff       	call   c0000564 <strcpy>
c0015f6d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015f74:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015f78:	83 c4 14             	add    esp,0x14
c0015f7b:	5b                   	pop    ebx
c0015f7c:	5e                   	pop    esi
c0015f7d:	e9 07 a3 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0015f82:	66 90                	xchg   ax,ax

c0015f84 <schedule()>:
c0015f84:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c0015f89:	85 c0                	test   eax,eax
c0015f8b:	74 0b                	je     c0015f98 <schedule()+0x14>
c0015f8d:	c7 05 a0 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x1
c0015f97:	c3                   	ret    
c0015f98:	53                   	push   ebx
c0015f99:	83 ec 14             	sub    esp,0x14
c0015f9c:	68 c4 97 02 c0       	push   0xc00297c4
c0015fa1:	e8 6a ba 00 00       	call   c0021a10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015fa6:	83 c4 10             	add    esp,0x10
c0015fa9:	84 c0                	test   al,al
c0015fab:	75 3b                	jne    c0015fe8 <schedule()+0x64>
c0015fad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015fb5:	4a                   	dec    edx
c0015fb6:	74 38                	je     c0015ff0 <schedule()+0x6c>
c0015fb8:	83 ec 0c             	sub    esp,0xc
c0015fbb:	68 c4 97 02 c0       	push   0xc00297c4
c0015fc0:	e8 67 ba 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fc5:	c7 04 24 c4 97 02 c0 	mov    DWORD PTR [esp],0xc00297c4
c0015fcc:	89 c3                	mov    ebx,eax
c0015fce:	e8 61 ba 00 00       	call   c0021a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fd3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fdd:	e8 86 f8 ff ff       	call   c0015868 <switchToThread(ThreadControlBlock*)>
c0015fe2:	83 c4 10             	add    esp,0x10
c0015fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0015fe8:	83 c4 08             	add    esp,0x8
c0015feb:	5b                   	pop    ebx
c0015fec:	c3                   	ret    
c0015fed:	8d 76 00             	lea    esi,[esi+0x0]
c0015ff0:	83 ec 08             	sub    esp,0x8
c0015ff3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015ffa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0016000:	68 c4 97 02 c0       	push   0xc00297c4
c0016005:	e8 e2 ba 00 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001600a:	83 c4 10             	add    esp,0x10
c001600d:	eb a9                	jmp    c0015fb8 <schedule()+0x34>
c001600f:	90                   	nop

c0016010 <Semaphore::tryAcquire()>:
c0016010:	53                   	push   ebx
c0016011:	83 ec 08             	sub    esp,0x8
c0016014:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016018:	fa                   	cli    
c0016019:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001601e:	8d 50 01             	lea    edx,[eax+0x1]
c0016021:	89 15 a8 97 02 c0    	mov    DWORD PTR ds:0xc00297a8,edx
c0016027:	8b 15 a4 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297a4
c001602d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016030:	89 1d a4 97 02 c0    	mov    DWORD PTR ds:0xc00297a4,ebx
c0016036:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016039:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001603b:	7c 33                	jl     c0016070 <Semaphore::tryAcquire()+0x60>
c001603d:	89 15 a4 97 02 c0    	mov    DWORD PTR ds:0xc00297a4,edx
c0016043:	85 d2                	test   edx,edx
c0016045:	75 0d                	jne    c0016054 <Semaphore::tryAcquire()+0x44>
c0016047:	8b 15 a0 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297a0
c001604d:	85 d2                	test   edx,edx
c001604f:	75 6b                	jne    c00160bc <Semaphore::tryAcquire()+0xac>
c0016051:	8d 76 00             	lea    esi,[esi+0x0]
c0016054:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016059:	85 c0                	test   eax,eax
c001605b:	74 0b                	je     c0016068 <Semaphore::tryAcquire()+0x58>
c001605d:	8d 76 00             	lea    esi,[esi+0x0]
c0016060:	31 c0                	xor    eax,eax
c0016062:	83 c4 08             	add    esp,0x8
c0016065:	5b                   	pop    ebx
c0016066:	c3                   	ret    
c0016067:	90                   	nop
c0016068:	fb                   	sti    
c0016069:	83 c4 08             	add    esp,0x8
c001606c:	5b                   	pop    ebx
c001606d:	c3                   	ret    
c001606e:	66 90                	xchg   ax,ax
c0016070:	43                   	inc    ebx
c0016071:	89 15 a4 97 02 c0    	mov    DWORD PTR ds:0xc00297a4,edx
c0016077:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001607a:	85 d2                	test   edx,edx
c001607c:	75 22                	jne    c00160a0 <Semaphore::tryAcquire()+0x90>
c001607e:	8b 0d a0 97 02 c0    	mov    ecx,DWORD PTR ds:0xc00297a0
c0016084:	85 c9                	test   ecx,ecx
c0016086:	74 18                	je     c00160a0 <Semaphore::tryAcquire()+0x90>
c0016088:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c0016092:	e8 ed fe ff ff       	call   c0015f84 <schedule()>
c0016097:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001609c:	48                   	dec    eax
c001609d:	8d 76 00             	lea    esi,[esi+0x0]
c00160a0:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00160a5:	85 c0                	test   eax,eax
c00160a7:	75 0b                	jne    c00160b4 <Semaphore::tryAcquire()+0xa4>
c00160a9:	fb                   	sti    
c00160aa:	b0 01                	mov    al,0x1
c00160ac:	83 c4 08             	add    esp,0x8
c00160af:	5b                   	pop    ebx
c00160b0:	c3                   	ret    
c00160b1:	8d 76 00             	lea    esi,[esi+0x0]
c00160b4:	b0 01                	mov    al,0x1
c00160b6:	83 c4 08             	add    esp,0x8
c00160b9:	5b                   	pop    ebx
c00160ba:	c3                   	ret    
c00160bb:	90                   	nop
c00160bc:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c00160c6:	e8 b9 fe ff ff       	call   c0015f84 <schedule()>
c00160cb:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00160d0:	48                   	dec    eax
c00160d1:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00160d6:	85 c0                	test   eax,eax
c00160d8:	75 86                	jne    c0016060 <Semaphore::tryAcquire()+0x50>
c00160da:	eb 8c                	jmp    c0016068 <Semaphore::tryAcquire()+0x58>

c00160dc <Semaphore::assertLocked(char const*)>:
c00160dc:	83 ec 0c             	sub    esp,0xc
c00160df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160e3:	fa                   	cli    
c00160e4:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00160ea:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c00160ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00160f2:	89 0d a4 97 02 c0    	mov    DWORD PTR ds:0xc00297a4,ecx
c00160f8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00160fa:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00160fd:	7c 29                	jl     c0016128 <Semaphore::assertLocked(char const*)+0x4c>
c00160ff:	90                   	nop
c0016100:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c0016105:	85 c0                	test   eax,eax
c0016107:	75 0b                	jne    c0016114 <Semaphore::assertLocked(char const*)+0x38>
c0016109:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c001610e:	85 c0                	test   eax,eax
c0016110:	75 2e                	jne    c0016140 <Semaphore::assertLocked(char const*)+0x64>
c0016112:	66 90                	xchg   ax,ax
c0016114:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016119:	48                   	dec    eax
c001611a:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001611f:	75 03                	jne    c0016124 <Semaphore::assertLocked(char const*)+0x48>
c0016121:	fb                   	sti    
c0016122:	66 90                	xchg   ax,ax
c0016124:	83 c4 0c             	add    esp,0xc
c0016127:	c3                   	ret    
c0016128:	83 ec 0c             	sub    esp,0xc
c001612b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001612f:	e8 1b c9 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0016134:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c0016139:	83 c4 10             	add    esp,0x10
c001613c:	48                   	dec    eax
c001613d:	eb c1                	jmp    c0016100 <Semaphore::assertLocked(char const*)+0x24>
c001613f:	90                   	nop
c0016140:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c001614a:	e8 35 fe ff ff       	call   c0015f84 <schedule()>
c001614f:	eb c3                	jmp    c0016114 <Semaphore::assertLocked(char const*)+0x38>
c0016151:	8d 76 00             	lea    esi,[esi+0x0]

c0016154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016154:	83 ec 0c             	sub    esp,0xc
c0016157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001615c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016160:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016163:	e8 1c fe ff ff       	call   c0015f84 <schedule()>
c0016168:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001616d:	48                   	dec    eax
c001616e:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016173:	75 03                	jne    c0016178 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016175:	fb                   	sti    
c0016176:	66 90                	xchg   ax,ax
c0016178:	83 c4 0c             	add    esp,0xc
c001617b:	c3                   	ret    

c001617c <blockTask(TaskState)>:
c001617c:	83 ec 0c             	sub    esp,0xc
c001617f:	fa                   	cli    
c0016180:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001618a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001618f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016192:	e8 ed fd ff ff       	call   c0015f84 <schedule()>
c0016197:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001619c:	48                   	dec    eax
c001619d:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00161a2:	75 04                	jne    c00161a8 <blockTask(TaskState)+0x2c>
c00161a4:	fb                   	sti    
c00161a5:	8d 76 00             	lea    esi,[esi+0x0]
c00161a8:	83 c4 0c             	add    esp,0xc
c00161ab:	c3                   	ret    

c00161ac <waitTask(int, int*, int)>:
c00161ac:	83 ec 18             	sub    esp,0x18
c00161af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00161b8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00161bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00161bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00161c7:	6a 07                	push   0x7
c00161c9:	e8 ae ff ff ff       	call   c001617c <blockTask(TaskState)>
c00161ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00161d9:	85 d2                	test   edx,edx
c00161db:	74 0b                	je     c00161e8 <waitTask(int, int*, int)+0x3c>
c00161dd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00161e0:	89 02                	mov    DWORD PTR [edx],eax
c00161e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e7:	90                   	nop
c00161e8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00161eb:	83 c4 0c             	add    esp,0xc
c00161ee:	c3                   	ret    
c00161ef:	90                   	nop

c00161f0 <milliTenthSleepUntil(unsigned int)>:
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f7:	39 05 ac 88 02 c0    	cmp    DWORD PTR ds:0xc00288ac,eax
c00161fd:	76 05                	jbe    c0016204 <milliTenthSleepUntil(unsigned int)+0x14>
c00161ff:	90                   	nop
c0016200:	83 c4 0c             	add    esp,0xc
c0016203:	c3                   	ret    
c0016204:	fa                   	cli    
c0016205:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c001620b:	83 ec 08             	sub    esp,0x8
c001620e:	ff 05 a4 97 02 c0    	inc    DWORD PTR ds:0xc00297a4
c0016214:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001621a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001621d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0016223:	68 b8 97 02 c0       	push   0xc00297b8
c0016228:	e8 bf b8 00 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001622d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016234:	e8 43 ff ff ff       	call   c001617c <blockTask(TaskState)>
c0016239:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	48                   	dec    eax
c0016242:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c0016247:	85 c0                	test   eax,eax
c0016249:	75 09                	jne    c0016254 <milliTenthSleepUntil(unsigned int)+0x64>
c001624b:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c0016250:	85 c0                	test   eax,eax
c0016252:	75 14                	jne    c0016268 <milliTenthSleepUntil(unsigned int)+0x78>
c0016254:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016259:	48                   	dec    eax
c001625a:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001625f:	75 9f                	jne    c0016200 <milliTenthSleepUntil(unsigned int)+0x10>
c0016261:	fb                   	sti    
c0016262:	83 c4 0c             	add    esp,0xc
c0016265:	c3                   	ret    
c0016266:	66 90                	xchg   ax,ax
c0016268:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c0016272:	e8 0d fd ff ff       	call   c0015f84 <schedule()>
c0016277:	eb db                	jmp    c0016254 <milliTenthSleepUntil(unsigned int)+0x64>
c0016279:	8d 76 00             	lea    esi,[esi+0x0]

c001627c <milliTenthSleep(unsigned int)>:
c001627c:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0016281:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016285:	e9 66 ff ff ff       	jmp    c00161f0 <milliTenthSleepUntil(unsigned int)>
c001628a:	66 90                	xchg   ax,ax

c001628c <sleep(unsigned int)>:
c001628c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016290:	8d 04 80             	lea    eax,[eax+eax*4]
c0016293:	8d 04 80             	lea    eax,[eax+eax*4]
c0016296:	8d 04 80             	lea    eax,[eax+eax*4]
c0016299:	8d 04 80             	lea    eax,[eax+eax*4]
c001629c:	c1 e0 04             	shl    eax,0x4
c001629f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162a3:	eb d7                	jmp    c001627c <milliTenthSleep(unsigned int)>
c00162a5:	90                   	nop
c00162a6:	66 90                	xchg   ax,ax

c00162a8 <Semaphore::acquire()>:
c00162a8:	83 ec 0c             	sub    esp,0xc
c00162ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162af:	fa                   	cli    
c00162b0:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c00162b5:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00162bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00162be:	89 0d a4 97 02 c0    	mov    DWORD PTR ds:0xc00297a4,ecx
c00162c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00162c7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00162c9:	7d 2d                	jge    c00162f8 <Semaphore::acquire()+0x50>
c00162cb:	41                   	inc    ecx
c00162cc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00162cf:	90                   	nop
c00162d0:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c00162d5:	85 c0                	test   eax,eax
c00162d7:	75 0b                	jne    c00162e4 <Semaphore::acquire()+0x3c>
c00162d9:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c00162de:	85 c0                	test   eax,eax
c00162e0:	75 62                	jne    c0016344 <Semaphore::acquire()+0x9c>
c00162e2:	66 90                	xchg   ax,ax
c00162e4:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00162e9:	48                   	dec    eax
c00162ea:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00162ef:	75 03                	jne    c00162f4 <Semaphore::acquire()+0x4c>
c00162f1:	fb                   	sti    
c00162f2:	66 90                	xchg   ax,ax
c00162f4:	83 c4 0c             	add    esp,0xc
c00162f7:	c3                   	ret    
c00162f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016304:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016307:	85 c9                	test   ecx,ecx
c0016309:	74 4d                	je     c0016358 <Semaphore::acquire()+0xb0>
c001630b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001630e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016314:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016317:	90                   	nop
c0016318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001631d:	83 ec 0c             	sub    esp,0xc
c0016320:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016323:	68 30 45 02 c0       	push   0xc0024530
c0016328:	e8 b8 63 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001632d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016334:	e8 43 fe ff ff       	call   c001617c <blockTask(TaskState)>
c0016339:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	48                   	dec    eax
c0016342:	eb 8c                	jmp    c00162d0 <Semaphore::acquire()+0x28>
c0016344:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c001634e:	e8 31 fc ff ff       	call   c0015f84 <schedule()>
c0016353:	eb 8f                	jmp    c00162e4 <Semaphore::acquire()+0x3c>
c0016355:	8d 76 00             	lea    esi,[esi+0x0]
c0016358:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001635d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016360:	eb b6                	jmp    c0016318 <Semaphore::acquire()+0x70>
c0016362:	66 90                	xchg   ax,ax

c0016364 <taskReturned>:
c0016364:	83 ec 18             	sub    esp,0x18
c0016367:	68 50 45 02 c0       	push   0xc0024550
c001636c:	e8 de c6 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0016371:	83 c4 10             	add    esp,0x10
c0016374:	83 ec 0c             	sub    esp,0xc
c0016377:	6a 02                	push   0x2
c0016379:	e8 fe fd ff ff       	call   c001617c <blockTask(TaskState)>
c001637e:	fa                   	cli    
c001637f:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016385:	e8 fa fb ff ff       	call   c0015f84 <schedule()>
c001638a:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001638f:	83 c4 10             	add    esp,0x10
c0016392:	48                   	dec    eax
c0016393:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016398:	85 c0                	test   eax,eax
c001639a:	75 d8                	jne    c0016374 <taskReturned+0x10>
c001639c:	fb                   	sti    
c001639d:	eb d5                	jmp    c0016374 <taskReturned+0x10>
c001639f:	90                   	nop

c00163a0 <Thr::processFromPID(int)>:
c00163a0:	57                   	push   edi
c00163a1:	56                   	push   esi
c00163a2:	53                   	push   ebx
c00163a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163a7:	fa                   	cli    
c00163a8:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00163ae:	83 ec 0c             	sub    esp,0xc
c00163b1:	68 c4 97 02 c0       	push   0xc00297c4
c00163b6:	e8 71 b6 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163bb:	83 c4 10             	add    esp,0x10
c00163be:	89 c7                	mov    edi,eax
c00163c0:	eb 16                	jmp    c00163d8 <Thr::processFromPID(int)+0x38>
c00163c2:	66 90                	xchg   ax,ax
c00163c4:	83 ec 0c             	sub    esp,0xc
c00163c7:	68 c4 97 02 c0       	push   0xc00297c4
c00163cc:	e8 5b b6 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163d1:	83 c4 10             	add    esp,0x10
c00163d4:	39 f8                	cmp    eax,edi
c00163d6:	74 4c                	je     c0016424 <Thr::processFromPID(int)+0x84>
c00163d8:	83 ec 0c             	sub    esp,0xc
c00163db:	68 c4 97 02 c0       	push   0xc00297c4
c00163e0:	e8 47 b6 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163e5:	c7 04 24 c4 97 02 c0 	mov    DWORD PTR [esp],0xc00297c4
c00163ec:	89 c3                	mov    ebx,eax
c00163ee:	e8 41 b6 00 00       	call   c0021a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163f3:	58                   	pop    eax
c00163f4:	5a                   	pop    edx
c00163f5:	53                   	push   ebx
c00163f6:	68 c4 97 02 c0       	push   0xc00297c4
c00163fb:	e8 ec b6 00 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016400:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016403:	83 c4 10             	add    esp,0x10
c0016406:	39 30                	cmp    DWORD PTR [eax],esi
c0016408:	75 ba                	jne    c00163c4 <Thr::processFromPID(int)+0x24>
c001640a:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001640f:	48                   	dec    eax
c0016410:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016415:	74 09                	je     c0016420 <Thr::processFromPID(int)+0x80>
c0016417:	90                   	nop
c0016418:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001641b:	5b                   	pop    ebx
c001641c:	5e                   	pop    esi
c001641d:	5f                   	pop    edi
c001641e:	c3                   	ret    
c001641f:	90                   	nop
c0016420:	fb                   	sti    
c0016421:	eb f5                	jmp    c0016418 <Thr::processFromPID(int)+0x78>
c0016423:	90                   	nop
c0016424:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016429:	48                   	dec    eax
c001642a:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001642f:	75 07                	jne    c0016438 <Thr::processFromPID(int)+0x98>
c0016431:	fb                   	sti    
c0016432:	5b                   	pop    ebx
c0016433:	5e                   	pop    esi
c0016434:	5f                   	pop    edi
c0016435:	c3                   	ret    
c0016436:	66 90                	xchg   ax,ax
c0016438:	5b                   	pop    ebx
c0016439:	31 c0                	xor    eax,eax
c001643b:	5e                   	pop    esi
c001643c:	5f                   	pop    edi
c001643d:	c3                   	ret    
c001643e:	66 90                	xchg   ax,ax

c0016440 <unblockTask(ThreadControlBlock*)>:
c0016440:	53                   	push   ebx
c0016441:	83 ec 08             	sub    esp,0x8
c0016444:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016448:	fa                   	cli    
c0016449:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c001644f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016452:	85 c0                	test   eax,eax
c0016454:	74 66                	je     c00164bc <unblockTask(ThreadControlBlock*)+0x7c>
c0016456:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016459:	48                   	dec    eax
c001645a:	74 38                	je     c0016494 <unblockTask(ThreadControlBlock*)+0x54>
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	68 c4 97 02 c0       	push   0xc00297c4
c0016464:	e8 c3 b5 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	85 c0                	test   eax,eax
c001646e:	75 1c                	jne    c001648c <unblockTask(ThreadControlBlock*)+0x4c>
c0016470:	eb 5e                	jmp    c00164d0 <unblockTask(ThreadControlBlock*)+0x90>
c0016472:	66 90                	xchg   ax,ax
c0016474:	83 ec 08             	sub    esp,0x8
c0016477:	50                   	push   eax
c0016478:	68 c4 97 02 c0       	push   0xc00297c4
c001647d:	e8 5a b9 00 00       	call   c0021ddc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016482:	83 c4 10             	add    esp,0x10
c0016485:	85 c0                	test   eax,eax
c0016487:	74 47                	je     c00164d0 <unblockTask(ThreadControlBlock*)+0x90>
c0016489:	8d 76 00             	lea    esi,[esi+0x0]
c001648c:	39 c3                	cmp    ebx,eax
c001648e:	75 e4                	jne    c0016474 <unblockTask(ThreadControlBlock*)+0x34>
c0016490:	eb 12                	jmp    c00164a4 <unblockTask(ThreadControlBlock*)+0x64>
c0016492:	66 90                	xchg   ax,ax
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	68 d3 44 02 c0       	push   0xc00244d3
c001649c:	e8 44 62 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00164a9:	48                   	dec    eax
c00164aa:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00164af:	75 03                	jne    c00164b4 <unblockTask(ThreadControlBlock*)+0x74>
c00164b1:	fb                   	sti    
c00164b2:	66 90                	xchg   ax,ax
c00164b4:	83 c4 08             	add    esp,0x8
c00164b7:	5b                   	pop    ebx
c00164b8:	c3                   	ret    
c00164b9:	8d 76 00             	lea    esi,[esi+0x0]
c00164bc:	83 ec 0c             	sub    esp,0xc
c00164bf:	68 bc 44 02 c0       	push   0xc00244bc
c00164c4:	e8 1c 62 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00164c9:	83 c4 10             	add    esp,0x10
c00164cc:	eb d6                	jmp    c00164a4 <unblockTask(ThreadControlBlock*)+0x64>
c00164ce:	66 90                	xchg   ax,ax
c00164d0:	83 ec 08             	sub    esp,0x8
c00164d3:	53                   	push   ebx
c00164d4:	68 c4 97 02 c0       	push   0xc00297c4
c00164d9:	e8 0e b6 00 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164de:	83 c4 10             	add    esp,0x10
c00164e1:	eb c1                	jmp    c00164a4 <unblockTask(ThreadControlBlock*)+0x64>
c00164e3:	90                   	nop

c00164e4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00164e4:	55                   	push   ebp
c00164e5:	57                   	push   edi
c00164e6:	56                   	push   esi
c00164e7:	53                   	push   ebx
c00164e8:	83 ec 1c             	sub    esp,0x1c
c00164eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00164ef:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164f2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00164f8:	85 ff                	test   edi,edi
c00164fa:	7e 24                	jle    c0016520 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00164fc:	31 f6                	xor    esi,esi
c00164fe:	66 90                	xchg   ax,ax
c0016500:	83 ec 0c             	sub    esp,0xc
c0016503:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c001650a:	46                   	inc    esi
c001650b:	e8 97 32 ff ff       	call   c00097a7 <free>
c0016510:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001651c:	7f e2                	jg     c0016500 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001651e:	66 90                	xchg   ax,ax
c0016520:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001652a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001652f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016532:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016535:	d3 c0                	rol    eax,cl
c0016537:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001653e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016541:	89 f7                	mov    edi,esi
c0016543:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001654b:	0f 85 73 01 00 00    	jne    c00166c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0016551:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016557:	85 ed                	test   ebp,ebp
c0016559:	74 1d                	je     c0016578 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001655b:	83 ec 0c             	sub    esp,0xc
c001655e:	55                   	push   ebp
c001655f:	e8 90 c2 ff ff       	call   c00127f4 <EnvVarContainer::~EnvVarContainer()>
c0016564:	59                   	pop    ecx
c0016565:	5e                   	pop    esi
c0016566:	6a 0c                	push   0xc
c0016568:	55                   	push   ebp
c0016569:	e8 96 60 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c001656e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016571:	83 c4 10             	add    esp,0x10
c0016574:	89 f7                	mov    edi,esi
c0016576:	66 90                	xchg   ax,ax
c0016578:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001657e:	85 c0                	test   eax,eax
c0016580:	0f 84 b2 00 00 00    	je     c0016638 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0016586:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016589:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001658d:	31 c9                	xor    ecx,ecx
c001658f:	eb 17                	jmp    c00165a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0016591:	8d 76 00             	lea    esi,[esi+0x0]
c0016594:	41                   	inc    ecx
c0016595:	83 f9 10             	cmp    ecx,0x10
c0016598:	0f 84 9a 00 00 00    	je     c0016638 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001659e:	66 90                	xchg   ax,ax
c00165a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00165a6:	66 90                	xchg   ax,ax
c00165a8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00165af:	d3 fa                	sar    edx,cl
c00165b1:	83 e2 01             	and    edx,0x1
c00165b4:	74 de                	je     c0016594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00165b6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00165b9:	01 d2                	add    edx,edx
c00165bb:	01 ca                	add    edx,ecx
c00165bd:	8d 14 92             	lea    edx,[edx+edx*4]
c00165c0:	01 d0                	add    eax,edx
c00165c2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00165c8:	83 fd 07             	cmp    ebp,0x7
c00165cb:	75 c7                	jne    c0016594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00165cd:	05 40 02 00 00       	add    eax,0x240
c00165d2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00165d5:	83 fd ff             	cmp    ebp,0xffffffff
c00165d8:	0f 8c ee 00 00 00    	jl     c00166cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00165de:	0f 84 ac 01 00 00    	je     c0016790 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00165e4:	85 ed                	test   ebp,ebp
c00165e6:	0f 84 90 01 00 00    	je     c001677c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00165ec:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00165ee:	75 a4                	jne    c0016594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00165f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00165f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00165fa:	01 d0                	add    eax,edx
c00165fc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016600:	83 ec 0c             	sub    esp,0xc
c0016603:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016609:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001660c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016612:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016619:	50                   	push   eax
c001661a:	e8 21 fe ff ff       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c001661f:	83 c4 10             	add    esp,0x10
c0016622:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016629:	89 f7                	mov    edi,esi
c001662b:	41                   	inc    ecx
c001662c:	83 f9 10             	cmp    ecx,0x10
c001662f:	0f 85 6b ff ff ff    	jne    c00165a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016635:	8d 76 00             	lea    esi,[esi+0x0]
c0016638:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001663e:	85 c0                	test   eax,eax
c0016640:	74 62                	je     c00166a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0016642:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016648:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001664e:	74 54                	je     c00166a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0016650:	83 ec 0c             	sub    esp,0xc
c0016653:	68 c4 97 02 c0       	push   0xc00297c4
c0016658:	e8 cf b3 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001665d:	c7 04 24 c4 97 02 c0 	mov    DWORD PTR [esp],0xc00297c4
c0016664:	89 c7                	mov    edi,eax
c0016666:	e8 a5 b3 00 00       	call   c0021a10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	84 c0                	test   al,al
c0016670:	0f 84 ce 00 00 00    	je     c0016744 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0016676:	66 90                	xchg   ax,ax
c0016678:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001667b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016681:	85 d2                	test   edx,edx
c0016683:	74 0f                	je     c0016694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0016685:	83 ec 0c             	sub    esp,0xc
c0016688:	8b 02                	mov    eax,DWORD PTR [edx]
c001668a:	52                   	push   edx
c001668b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001668e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016691:	83 c4 10             	add    esp,0x10
c0016694:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001669e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00166a1:	8d 76 00             	lea    esi,[esi+0x0]
c00166a4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00166aa:	85 db                	test   ebx,ebx
c00166ac:	74 16                	je     c00166c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00166ae:	83 ec 0c             	sub    esp,0xc
c00166b1:	53                   	push   ebx
c00166b2:	e8 c1 51 ff ff       	call   c000b878 <VAS::~VAS()>
c00166b7:	58                   	pop    eax
c00166b8:	5a                   	pop    edx
c00166b9:	6a 14                	push   0x14
c00166bb:	53                   	push   ebx
c00166bc:	e8 43 5f ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c00166c1:	83 c4 10             	add    esp,0x10
c00166c4:	83 c4 1c             	add    esp,0x1c
c00166c7:	5b                   	pop    ebx
c00166c8:	5e                   	pop    esi
c00166c9:	5f                   	pop    edi
c00166ca:	5d                   	pop    ebp
c00166cb:	c3                   	ret    
c00166cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00166d0:	83 ec 0c             	sub    esp,0xc
c00166d3:	68 84 45 02 c0       	push   0xc0024584
c00166d8:	e8 72 c3 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00166dd:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166e0:	83 c4 10             	add    esp,0x10
c00166e3:	89 f7                	mov    edi,esi
c00166e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166e9:	e9 a6 fe ff ff       	jmp    c0016594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00166ee:	66 90                	xchg   ax,ax
c00166f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166f6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00166fc:	75 1e                	jne    c001671c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00166fe:	83 ec 0c             	sub    esp,0xc
c0016701:	68 ec 45 02 c0       	push   0xc00245ec
c0016706:	e8 da 5f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001670b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016712:	e8 65 fa ff ff       	call   c001617c <blockTask(TaskState)>
c0016717:	83 c4 10             	add    esp,0x10
c001671a:	66 90                	xchg   ax,ax
c001671c:	83 ec 08             	sub    esp,0x8
c001671f:	56                   	push   esi
c0016720:	68 c4 97 02 c0       	push   0xc00297c4
c0016725:	e8 c2 b3 00 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001672a:	c7 04 24 c4 97 02 c0 	mov    DWORD PTR [esp],0xc00297c4
c0016731:	e8 f6 b2 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016736:	83 c4 10             	add    esp,0x10
c0016739:	39 f8                	cmp    eax,edi
c001673b:	0f 84 37 ff ff ff    	je     c0016678 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0016741:	8d 76 00             	lea    esi,[esi+0x0]
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	68 c4 97 02 c0       	push   0xc00297c4
c001674c:	e8 db b2 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016751:	c7 04 24 c4 97 02 c0 	mov    DWORD PTR [esp],0xc00297c4
c0016758:	89 c6                	mov    esi,eax
c001675a:	e8 d5 b2 00 00       	call   c0021a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001675f:	83 c4 10             	add    esp,0x10
c0016762:	39 f3                	cmp    ebx,esi
c0016764:	74 b6                	je     c001671c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0016766:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016769:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001676c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016772:	75 a8                	jne    c001671c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0016774:	e9 77 ff ff ff       	jmp    c00166f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0016779:	8d 76 00             	lea    esi,[esi+0x0]
c001677c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016780:	83 ec 0c             	sub    esp,0xc
c0016783:	68 b8 45 02 c0       	push   0xc00245b8
c0016788:	e9 4b ff ff ff       	jmp    c00166d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001678d:	8d 76 00             	lea    esi,[esi+0x0]
c0016790:	8b 36                	mov    esi,DWORD PTR [esi]
c0016792:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016796:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016799:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001679c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00167a2:	01 d7                	add    edi,edx
c00167a4:	89 f8                	mov    eax,edi
c00167a6:	e9 51 fe ff ff       	jmp    c00165fc <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c00167ab:	90                   	nop

c00167ac <cleanerTaskFunction(void*)>:
c00167ac:	53                   	push   ebx
c00167ad:	83 ec 08             	sub    esp,0x8
c00167b0:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00167b5:	48                   	dec    eax
c00167b6:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00167bb:	75 03                	jne    c00167c0 <cleanerTaskFunction(void*)+0x14>
c00167bd:	fb                   	sti    
c00167be:	66 90                	xchg   ax,ax
c00167c0:	fa                   	cli    
c00167c1:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00167c6:	80 3d 8c 97 02 c0 00 	cmp    BYTE PTR ds:0xc002978c,0x0
c00167cd:	8d 50 01             	lea    edx,[eax+0x1]
c00167d0:	89 15 a8 97 02 c0    	mov    DWORD PTR ds:0xc00297a8,edx
c00167d6:	0f 84 ac 00 00 00    	je     c0016888 <cleanerTaskFunction(void*)+0xdc>
c00167dc:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00167e1:	85 c0                	test   eax,eax
c00167e3:	75 03                	jne    c00167e8 <cleanerTaskFunction(void*)+0x3c>
c00167e5:	fb                   	sti    
c00167e6:	66 90                	xchg   ax,ax
c00167e8:	c6 05 8c 97 02 c0 00 	mov    BYTE PTR ds:0xc002978c,0x0
c00167ef:	fa                   	cli    
c00167f0:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00167f6:	ff 05 a4 97 02 c0    	inc    DWORD PTR ds:0xc00297a4
c00167fc:	fa                   	cli    
c00167fd:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016803:	eb 2b                	jmp    c0016830 <cleanerTaskFunction(void*)+0x84>
c0016805:	8d 76 00             	lea    esi,[esi+0x0]
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	68 ac 97 02 c0       	push   0xc00297ac
c0016810:	e8 17 b2 00 00       	call   c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016815:	c7 04 24 ac 97 02 c0 	mov    DWORD PTR [esp],0xc00297ac
c001681c:	89 c3                	mov    ebx,eax
c001681e:	e8 11 b2 00 00       	call   c0021a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016826:	e8 b9 fc ff ff       	call   c00164e4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	66 90                	xchg   ax,ax
c0016830:	83 ec 0c             	sub    esp,0xc
c0016833:	68 ac 97 02 c0       	push   0xc00297ac
c0016838:	e8 d3 b1 00 00       	call   c0021a10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	84 c0                	test   al,al
c0016842:	74 c4                	je     c0016808 <cleanerTaskFunction(void*)+0x5c>
c0016844:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016849:	48                   	dec    eax
c001684a:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001684f:	75 03                	jne    c0016854 <cleanerTaskFunction(void*)+0xa8>
c0016851:	fb                   	sti    
c0016852:	66 90                	xchg   ax,ax
c0016854:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c0016859:	48                   	dec    eax
c001685a:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c001685f:	0f 85 4b ff ff ff    	jne    c00167b0 <cleanerTaskFunction(void*)+0x4>
c0016865:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c001686a:	85 c0                	test   eax,eax
c001686c:	0f 84 3e ff ff ff    	je     c00167b0 <cleanerTaskFunction(void*)+0x4>
c0016872:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c001687c:	e8 03 f7 ff ff       	call   c0015f84 <schedule()>
c0016881:	e9 2a ff ff ff       	jmp    c00167b0 <cleanerTaskFunction(void*)+0x4>
c0016886:	66 90                	xchg   ax,ax
c0016888:	83 ec 0c             	sub    esp,0xc
c001688b:	6a 02                	push   0x2
c001688d:	e8 c2 f8 ff ff       	call   c0016154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016892:	83 c4 10             	add    esp,0x10
c0016895:	e9 4e ff ff ff       	jmp    c00167e8 <cleanerTaskFunction(void*)+0x3c>
c001689a:	66 90                	xchg   ax,ax

c001689c <terminateTask(int)>:
c001689c:	83 ec 14             	sub    esp,0x14
c001689f:	fa                   	cli    
c00168a0:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00168a6:	ff 05 a4 97 02 c0    	inc    DWORD PTR ds:0xc00297a4
c00168ac:	fa                   	cli    
c00168ad:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00168b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168bc:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00168bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00168c7:	50                   	push   eax
c00168c8:	68 ac 97 02 c0       	push   0xc00297ac
c00168cd:	e8 1a b2 00 00       	call   c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00168e1:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00168e6:	85 c0                	test   eax,eax
c00168e8:	74 5e                	je     c0016948 <terminateTask(int)+0xac>
c00168ea:	83 ec 0c             	sub    esp,0xc
c00168ed:	c6 05 8c 97 02 c0 01 	mov    BYTE PTR ds:0xc002978c,0x1
c00168f4:	50                   	push   eax
c00168f5:	e8 46 fb ff ff       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c00168fa:	83 c4 10             	add    esp,0x10
c00168fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016900:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016905:	48                   	dec    eax
c0016906:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001690b:	75 03                	jne    c0016910 <terminateTask(int)+0x74>
c001690d:	fb                   	sti    
c001690e:	66 90                	xchg   ax,ax
c0016910:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c0016915:	48                   	dec    eax
c0016916:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c001691b:	75 0b                	jne    c0016928 <terminateTask(int)+0x8c>
c001691d:	83 3d a0 97 02 c0 00 	cmp    DWORD PTR ds:0xc00297a0,0x0
c0016924:	75 36                	jne    c001695c <terminateTask(int)+0xc0>
c0016926:	66 90                	xchg   ax,ax
c0016928:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001692d:	48                   	dec    eax
c001692e:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016933:	75 03                	jne    c0016938 <terminateTask(int)+0x9c>
c0016935:	fb                   	sti    
c0016936:	66 90                	xchg   ax,ax
c0016938:	fa                   	cli    
c0016939:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c001693f:	90                   	nop
c0016940:	e8 3f f6 ff ff       	call   c0015f84 <schedule()>
c0016945:	eb e1                	jmp    c0016928 <terminateTask(int)+0x8c>
c0016947:	90                   	nop
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	68 ea 44 02 c0       	push   0xc00244ea
c0016950:	e8 90 5d ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0016955:	83 c4 10             	add    esp,0x10
c0016958:	eb a6                	jmp    c0016900 <terminateTask(int)+0x64>
c001695a:	66 90                	xchg   ax,ax
c001695c:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c0016966:	eb d8                	jmp    c0016940 <terminateTask(int)+0xa4>

c0016968 <Thr::terminateFromIRQ(int)>:
c0016968:	83 ec 18             	sub    esp,0x18
c001696b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001696f:	e8 28 ff ff ff       	call   c001689c <terminateTask(int)>

c0016974 <Semaphore::release()>:
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001697b:	fa                   	cli    
c001697c:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c0016981:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016987:	8d 48 01             	lea    ecx,[eax+0x1]
c001698a:	89 0d a4 97 02 c0    	mov    DWORD PTR ds:0xc00297a4,ecx
c0016990:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016993:	85 c9                	test   ecx,ecx
c0016995:	74 41                	je     c00169d8 <Semaphore::release()+0x64>
c0016997:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001699a:	83 ec 0c             	sub    esp,0xc
c001699d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169a0:	51                   	push   ecx
c00169a1:	e8 9a fa ff ff       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c00169a6:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	48                   	dec    eax
c00169af:	90                   	nop
c00169b0:	a3 a4 97 02 c0       	mov    ds:0xc00297a4,eax
c00169b5:	85 c0                	test   eax,eax
c00169b7:	75 0b                	jne    c00169c4 <Semaphore::release()+0x50>
c00169b9:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c00169be:	85 c0                	test   eax,eax
c00169c0:	75 1e                	jne    c00169e0 <Semaphore::release()+0x6c>
c00169c2:	66 90                	xchg   ax,ax
c00169c4:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00169c9:	48                   	dec    eax
c00169ca:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00169cf:	75 03                	jne    c00169d4 <Semaphore::release()+0x60>
c00169d1:	fb                   	sti    
c00169d2:	66 90                	xchg   ax,ax
c00169d4:	83 c4 0c             	add    esp,0xc
c00169d7:	c3                   	ret    
c00169d8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00169db:	eb d3                	jmp    c00169b0 <Semaphore::release()+0x3c>
c00169dd:	8d 76 00             	lea    esi,[esi+0x0]
c00169e0:	c7 05 a0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x0
c00169ea:	e8 95 f5 ff ff       	call   c0015f84 <schedule()>
c00169ef:	eb d3                	jmp    c00169c4 <Semaphore::release()+0x50>
c00169f1:	8d 76 00             	lea    esi,[esi+0x0]

c00169f4 <__static_initialization_and_destruction_0(int, int)>:
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00169fc:	0f 85 8e 00 00 00    	jne    c0016a90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016a02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016a0a:	0f 85 80 00 00 00    	jne    c0016a90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016a10:	83 ec 0c             	sub    esp,0xc
c0016a13:	68 c4 97 02 c0       	push   0xc00297c4
c0016a18:	e8 7b b3 00 00       	call   c0021d98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a1d:	83 c4 10             	add    esp,0x10
c0016a20:	83 ec 04             	sub    esp,0x4
c0016a23:	68 dc 57 02 c0       	push   0xc00257dc
c0016a28:	68 c4 97 02 c0       	push   0xc00297c4
c0016a2d:	68 48 1d 02 c0       	push   0xc0021d48
c0016a32:	e8 47 5b ff ff       	call   c000c57e <__cxa_atexit>
c0016a37:	83 c4 10             	add    esp,0x10
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	68 b8 97 02 c0       	push   0xc00297b8
c0016a42:	e8 51 b3 00 00       	call   c0021d98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	83 ec 04             	sub    esp,0x4
c0016a4d:	68 dc 57 02 c0       	push   0xc00257dc
c0016a52:	68 b8 97 02 c0       	push   0xc00297b8
c0016a57:	68 48 1d 02 c0       	push   0xc0021d48
c0016a5c:	e8 1d 5b ff ff       	call   c000c57e <__cxa_atexit>
c0016a61:	83 c4 10             	add    esp,0x10
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	68 ac 97 02 c0       	push   0xc00297ac
c0016a6c:	e8 27 b3 00 00       	call   c0021d98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016a71:	83 c4 10             	add    esp,0x10
c0016a74:	83 ec 04             	sub    esp,0x4
c0016a77:	68 dc 57 02 c0       	push   0xc00257dc
c0016a7c:	68 ac 97 02 c0       	push   0xc00297ac
c0016a81:	68 48 1d 02 c0       	push   0xc0021d48
c0016a86:	e8 f3 5a ff ff       	call   c000c57e <__cxa_atexit>
c0016a8b:	83 c4 10             	add    esp,0x10
c0016a8e:	66 90                	xchg   ax,ax
c0016a90:	90                   	nop
c0016a91:	83 c4 0c             	add    esp,0xc
c0016a94:	c3                   	ret    
c0016a95:	8d 76 00             	lea    esi,[esi+0x0]

c0016a98 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	83 ec 08             	sub    esp,0x8
c0016a9e:	68 ff ff 00 00       	push   0xffff
c0016aa3:	6a 01                	push   0x1
c0016aa5:	e8 4a ff ff ff       	call   c00169f4 <__static_initialization_and_destruction_0(int, int)>
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	83 c4 0c             	add    esp,0xc
c0016ab0:	c3                   	ret    

c0016ab1 <Vm::inbv(unsigned short)>:
c0016ab1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ab5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016aba:	75 06                	jne    c0016ac2 <Vm::inbv(unsigned short)+0x11>
c0016abc:	a0 0c 98 02 c0       	mov    al,ds:0xc002980c
c0016ac1:	c3                   	ret    
c0016ac2:	ec                   	in     al,dx
c0016ac3:	c3                   	ret    

c0016ac4 <Vm::outbv(unsigned short, unsigned char)>:
c0016ac4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016acc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016ad1:	75 25                	jne    c0016af8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016ad3:	8b 0d 0c 98 02 c0    	mov    ecx,DWORD PTR ds:0xc002980c
c0016ad9:	8d 51 01             	lea    edx,[ecx+0x1]
c0016adc:	88 81 20 98 02 c0    	mov    BYTE PTR [ecx-0x3ffd67e0],al
c0016ae2:	89 15 0c 98 02 c0    	mov    DWORD PTR ds:0xc002980c,edx
c0016ae8:	83 fa 20             	cmp    edx,0x20
c0016aeb:	75 0c                	jne    c0016af9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016aed:	c7 05 0c 98 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002980c,0x1f
c0016af7:	c3                   	ret    
c0016af8:	ee                   	out    dx,al
c0016af9:	c3                   	ret    

c0016afa <Vm::realToLinear(unsigned short, unsigned short)>:
c0016afa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016aff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b04:	c1 e0 04             	shl    eax,0x4
c0016b07:	01 d0                	add    eax,edx
c0016b09:	c3                   	ret    

c0016b0a <Vm::getSegment(unsigned int)>:
c0016b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b0e:	c1 e8 10             	shr    eax,0x10
c0016b11:	c3                   	ret    

c0016b12 <Vm::getOffset(unsigned int)>:
c0016b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b16:	c3                   	ret    

c0016b17 <Vm::mainloop2()>:
c0016b17:	83 ec 18             	sub    esp,0x18
c0016b1a:	fa                   	cli    
c0016b1b:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016b21:	6a 02                	push   0x2
c0016b23:	c6 05 05 98 02 c0 01 	mov    BYTE PTR ds:0xc0029805,0x1
c0016b2a:	e8 25 f6 ff ff       	call   c0016154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b34:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016b38:	52                   	push   edx
c0016b39:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016b3d:	52                   	push   edx
c0016b3e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016b42:	52                   	push   edx
c0016b43:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016b47:	50                   	push   eax
c0016b48:	e8 e2 96 fe ff       	call   c000022f <goToVM86>
c0016b4d:	83 c4 2c             	add    esp,0x2c
c0016b50:	c3                   	ret    

c0016b51 <Vm::mainVm8086Loop(void*)>:
c0016b51:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016b56:	48                   	dec    eax
c0016b57:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016b5c:	75 01                	jne    c0016b5f <Vm::mainVm8086Loop(void*)+0xe>
c0016b5e:	fb                   	sti    
c0016b5f:	eb b6                	jmp    c0016b17 <Vm::mainloop2()>

c0016b61 <Vm::mainloop3(unsigned long)>:
c0016b61:	83 ec 18             	sub    esp,0x18
c0016b64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b68:	fa                   	cli    
c0016b69:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016b6f:	6a 02                	push   0x2
c0016b71:	c6 05 04 98 02 c0 01 	mov    BYTE PTR ds:0xc0029804,0x1
c0016b78:	a3 00 98 02 c0       	mov    ds:0xc0029800,eax
c0016b7d:	e8 d2 f5 ff ff       	call   c0016154 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b82:	83 c4 1c             	add    esp,0x1c
c0016b85:	eb 90                	jmp    c0016b17 <Vm::mainloop2()>

c0016b87 <Vm::initialise8086()>:
c0016b87:	83 ec 0c             	sub    esp,0xc
c0016b8a:	68 80 00 00 00       	push   0x80
c0016b8f:	6a 00                	push   0x0
c0016b91:	68 51 6b 01 c0       	push   0xc0016b51
c0016b96:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c0016b9c:	e8 c7 f1 ff ff       	call   c0015d68 <Process::createThread(void (*)(void*), void*, int)>
c0016ba1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016ba8:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c0016bad:	68 00 01 00 00       	push   0x100
c0016bb2:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0016bb7:	6a 00                	push   0x0
c0016bb9:	6a 00                	push   0x0
c0016bbb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bc1:	e8 26 51 ff ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016bc6:	83 c4 2c             	add    esp,0x2c
c0016bc9:	c3                   	ret    

c0016bca <Vm::finish8086()>:
c0016bca:	53                   	push   ebx
c0016bcb:	83 ec 08             	sub    esp,0x8
c0016bce:	fa                   	cli    
c0016bcf:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016bd5:	80 3d 04 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029804,0x0
c0016bdc:	75 15                	jne    c0016bf3 <Vm::finish8086()+0x29>
c0016bde:	e8 a1 f3 ff ff       	call   c0015f84 <schedule()>
c0016be3:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016be8:	48                   	dec    eax
c0016be9:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016bee:	75 de                	jne    c0016bce <Vm::finish8086()+0x4>
c0016bf0:	fb                   	sti    
c0016bf1:	eb db                	jmp    c0016bce <Vm::finish8086()+0x4>
c0016bf3:	83 ec 0c             	sub    esp,0xc
c0016bf6:	8b 1d 00 98 02 c0    	mov    ebx,DWORD PTR ds:0xc0029800
c0016bfc:	ff 35 08 98 02 c0    	push   DWORD PTR ds:0xc0029808
c0016c02:	c6 05 04 98 02 c0 00 	mov    BYTE PTR ds:0xc0029804,0x0
c0016c09:	e8 32 f8 ff ff       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c0016c0e:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	8d 50 ff             	lea    edx,[eax-0x1]
c0016c19:	89 15 a8 97 02 c0    	mov    DWORD PTR ds:0xc00297a8,edx
c0016c1f:	85 d2                	test   edx,edx
c0016c21:	75 01                	jne    c0016c24 <Vm::finish8086()+0x5a>
c0016c23:	fb                   	sti    
c0016c24:	89 d8                	mov    eax,ebx
c0016c26:	83 c4 08             	add    esp,0x8
c0016c29:	5b                   	pop    ebx
c0016c2a:	c3                   	ret    

c0016c2b <Vm::getOutput8086(unsigned char*)>:
c0016c2b:	57                   	push   edi
c0016c2c:	8b 0d 0c 98 02 c0    	mov    ecx,DWORD PTR ds:0xc002980c
c0016c32:	56                   	push   esi
c0016c33:	be 20 98 02 c0       	mov    esi,0xc0029820
c0016c38:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016c3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c3e:	a1 0c 98 02 c0       	mov    eax,ds:0xc002980c
c0016c43:	5e                   	pop    esi
c0016c44:	c7 05 0c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002980c,0x0
c0016c4e:	5f                   	pop    edi
c0016c4f:	c3                   	ret    

c0016c50 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016c50:	55                   	push   ebp
c0016c51:	57                   	push   edi
c0016c52:	56                   	push   esi
c0016c53:	53                   	push   ebx
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016c5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016c5f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016c67:	fa                   	cli    
c0016c68:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016c6e:	80 3d 05 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029805,0x0
c0016c75:	75 15                	jne    c0016c8c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016c77:	e8 08 f3 ff ff       	call   c0015f84 <schedule()>
c0016c7c:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016c81:	48                   	dec    eax
c0016c82:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016c87:	75 de                	jne    c0016c67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016c89:	fb                   	sti    
c0016c8a:	eb db                	jmp    c0016c67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016c8c:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016c91:	c7 05 0c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002980c,0x0
c0016c9b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016c9f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ca3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016ca7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016cab:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016caf:	0f b7 ff             	movzx  edi,di
c0016cb2:	0f b7 f6             	movzx  esi,si
c0016cb5:	50                   	push   eax
c0016cb6:	6a 20                	push   0x20
c0016cb8:	6a 00                	push   0x0
c0016cba:	68 20 98 02 c0       	push   0xc0029820
c0016cbf:	e8 e4 97 fe ff       	call   c00004a8 <memset>
c0016cc4:	5a                   	pop    edx
c0016cc5:	59                   	pop    ecx
c0016cc6:	57                   	push   edi
c0016cc7:	56                   	push   esi
c0016cc8:	e8 2d fe ff ff       	call   c0016afa <Vm::realToLinear(unsigned short, unsigned short)>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	89 c7                	mov    edi,eax
c0016cd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016cd6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016cda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cdc:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016ce1:	c6 05 05 98 02 c0 00 	mov    BYTE PTR ds:0xc0029805,0x0
c0016ce8:	48                   	dec    eax
c0016ce9:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016cee:	75 01                	jne    c0016cf1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016cf0:	fb                   	sti    
c0016cf1:	83 ec 0c             	sub    esp,0xc
c0016cf4:	ff 35 08 98 02 c0    	push   DWORD PTR ds:0xc0029808
c0016cfa:	e8 41 f7 ff ff       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c0016cff:	83 c4 1c             	add    esp,0x1c
c0016d02:	b0 01                	mov    al,0x1
c0016d04:	5b                   	pop    ebx
c0016d05:	5e                   	pop    esi
c0016d06:	5f                   	pop    edi
c0016d07:	5d                   	pop    ebp
c0016d08:	c3                   	ret    

c0016d09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d09:	55                   	push   ebp
c0016d0a:	57                   	push   edi
c0016d0b:	56                   	push   esi
c0016d0c:	53                   	push   ebx
c0016d0d:	83 ec 2c             	sub    esp,0x2c
c0016d10:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0016d14:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0016d18:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0016d1c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0016d20:	fa                   	cli    
c0016d21:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c0016d27:	0f b6 35 05 98 02 c0 	movzx  esi,BYTE PTR ds:0xc0029805
c0016d2e:	89 f0                	mov    eax,esi
c0016d30:	84 c0                	test   al,al
c0016d32:	75 1d                	jne    c0016d51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0016d34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d38:	e8 47 f2 ff ff       	call   c0015f84 <schedule()>
c0016d3d:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016d42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d46:	48                   	dec    eax
c0016d47:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016d4c:	75 d2                	jne    c0016d20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016d4e:	fb                   	sti    
c0016d4f:	eb cf                	jmp    c0016d20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016d51:	a1 08 98 02 c0       	mov    eax,ds:0xc0029808
c0016d56:	c7 05 0c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002980c,0x0
c0016d60:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0016d64:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016d68:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0016d6c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0016d70:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016d74:	50                   	push   eax
c0016d75:	6a 20                	push   0x20
c0016d77:	6a 00                	push   0x0
c0016d79:	68 20 98 02 c0       	push   0xc0029820
c0016d7e:	e8 25 97 fe ff       	call   c00004a8 <memset>
c0016d83:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016d8a:	e8 08 2a ff ff       	call   c0009797 <malloc>
c0016d8f:	83 c4 0c             	add    esp,0xc
c0016d92:	89 c3                	mov    ebx,eax
c0016d94:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c0016d9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d9e:	50                   	push   eax
c0016d9f:	e8 ac 5e ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c0016da4:	83 c4 10             	add    esp,0x10
c0016da7:	85 db                	test   ebx,ebx
c0016da9:	75 0a                	jne    c0016db5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0016dab:	83 ec 0c             	sub    esp,0xc
c0016dae:	68 14 46 02 c0       	push   0xc0024614
c0016db3:	eb 3e                	jmp    c0016df3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016db5:	50                   	push   eax
c0016db6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016dba:	50                   	push   eax
c0016dbb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016dbf:	50                   	push   eax
c0016dc0:	53                   	push   ebx
c0016dc1:	e8 10 62 ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c0016dc6:	83 c4 10             	add    esp,0x10
c0016dc9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016dce:	74 0a                	je     c0016dda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	68 28 46 02 c0       	push   0xc0024628
c0016dd8:	eb 19                	jmp    c0016df3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016dda:	51                   	push   ecx
c0016ddb:	51                   	push   ecx
c0016ddc:	6a 01                	push   0x1
c0016dde:	53                   	push   ebx
c0016ddf:	e8 46 5f ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c0016de4:	83 c4 10             	add    esp,0x10
c0016de7:	85 c0                	test   eax,eax
c0016de9:	74 24                	je     c0016e0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0016deb:	83 ec 0c             	sub    esp,0xc
c0016dee:	68 41 46 02 c0       	push   0xc0024641
c0016df3:	e8 57 bc ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0016df8:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016dfd:	83 c4 10             	add    esp,0x10
c0016e00:	48                   	dec    eax
c0016e01:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016e06:	85 c0                	test   eax,eax
c0016e08:	75 01                	jne    c0016e0b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0016e0a:	fb                   	sti    
c0016e0b:	31 f6                	xor    esi,esi
c0016e0d:	eb 58                	jmp    c0016e67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0016e0f:	0f b7 ed             	movzx  ebp,bp
c0016e12:	50                   	push   eax
c0016e13:	0f b7 ff             	movzx  edi,di
c0016e16:	50                   	push   eax
c0016e17:	55                   	push   ebp
c0016e18:	57                   	push   edi
c0016e19:	e8 dc fc ff ff       	call   c0016afa <Vm::realToLinear(unsigned short, unsigned short)>
c0016e1e:	5a                   	pop    edx
c0016e1f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016e21:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016e25:	51                   	push   ecx
c0016e26:	50                   	push   eax
c0016e27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e2f:	53                   	push   ebx
c0016e30:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016e33:	83 c4 14             	add    esp,0x14
c0016e36:	53                   	push   ebx
c0016e37:	e8 4c 5f ff ff       	call   c000cd88 <File::close()>
c0016e3c:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0016e41:	83 c4 10             	add    esp,0x10
c0016e44:	48                   	dec    eax
c0016e45:	c6 05 05 98 02 c0 00 	mov    BYTE PTR ds:0xc0029805,0x0
c0016e4c:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0016e51:	85 c0                	test   eax,eax
c0016e53:	75 01                	jne    c0016e56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0016e55:	fb                   	sti    
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	ff 35 08 98 02 c0    	push   DWORD PTR ds:0xc0029808
c0016e5f:	e8 dc f5 ff ff       	call   c0016440 <unblockTask(ThreadControlBlock*)>
c0016e64:	83 c4 10             	add    esp,0x10
c0016e67:	83 c4 2c             	add    esp,0x2c
c0016e6a:	89 f0                	mov    eax,esi
c0016e6c:	5b                   	pop    ebx
c0016e6d:	5e                   	pop    esi
c0016e6e:	5f                   	pop    edi
c0016e6f:	5d                   	pop    ebp
c0016e70:	c3                   	ret    

c0016e71 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016e71:	57                   	push   edi
c0016e72:	56                   	push   esi
c0016e73:	53                   	push   ebx
c0016e74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016e80:	83 e8 06             	sub    eax,0x6
c0016e83:	0f b7 c0             	movzx  eax,ax
c0016e86:	50                   	push   eax
c0016e87:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016e8c:	50                   	push   eax
c0016e8d:	e8 68 fc ff ff       	call   c0016afa <Vm::realToLinear(unsigned short, unsigned short)>
c0016e92:	5a                   	pop    edx
c0016e93:	5e                   	pop    esi
c0016e94:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016e97:	8d 56 fa             	lea    edx,[esi-0x6]
c0016e9a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ea0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016ea3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0016ea6:	83 c2 02             	add    edx,0x2
c0016ea9:	66 89 10             	mov    WORD PTR [eax],dx
c0016eac:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016eaf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016eb3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016eb6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016eba:	89 d6                	mov    esi,edx
c0016ebc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016ec2:	66 81 e6 ff fd       	and    si,0xfdff
c0016ec7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016ecb:	74 07                	je     c0016ed4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0016ecd:	89 d6                	mov    esi,edx
c0016ecf:	66 81 ce 00 02       	or     si,0x200
c0016ed4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016ed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016edd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016ee1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016ee9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016eec:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016ef4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016ef7:	5b                   	pop    ebx
c0016ef8:	5e                   	pop    esi
c0016ef9:	5f                   	pop    edi
c0016efa:	c3                   	ret    

c0016efb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f00:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f05:	c1 e0 04             	shl    eax,0x4
c0016f08:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016f0b:	c3                   	ret    

c0016f0c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016f0c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f11:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f16:	c1 e0 04             	shl    eax,0x4
c0016f19:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016f1d:	c3                   	ret    

c0016f1e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016f1e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f23:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f28:	c1 e0 04             	shl    eax,0x4
c0016f2b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016f2e:	c3                   	ret    

c0016f2f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016f2f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f34:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f39:	c1 e0 04             	shl    eax,0x4
c0016f3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f40:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016f43:	c3                   	ret    

c0016f44 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016f44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f4e:	c1 e0 04             	shl    eax,0x4
c0016f51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f55:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016f59:	c3                   	ret    

c0016f5a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016f5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016f5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016f64:	c1 e0 04             	shl    eax,0x4
c0016f67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f6b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016f6e:	c3                   	ret    

c0016f6f <Vm::faultHandler(regs*)>:
c0016f6f:	55                   	push   ebp
c0016f70:	57                   	push   edi
c0016f71:	56                   	push   esi
c0016f72:	53                   	push   ebx
c0016f73:	83 ec 1c             	sub    esp,0x1c
c0016f76:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016f7a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016f7d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016f81:	0f b7 f8             	movzx  edi,ax
c0016f84:	52                   	push   edx
c0016f85:	0f b7 c0             	movzx  eax,ax
c0016f88:	50                   	push   eax
c0016f89:	e8 6c fb ff ff       	call   c0016afa <Vm::realToLinear(unsigned short, unsigned short)>
c0016f8e:	5a                   	pop    edx
c0016f8f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0016f92:	59                   	pop    ecx
c0016f93:	89 c1                	mov    ecx,eax
c0016f95:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f9c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fa5:	0f b7 c5             	movzx  eax,bp
c0016fa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016fb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016fb4:	e8 41 fb ff ff       	call   c0016afa <Vm::realToLinear(unsigned short, unsigned short)>
c0016fb9:	5e                   	pop    esi
c0016fba:	be 06 00 00 00       	mov    esi,0x6
c0016fbf:	5a                   	pop    edx
c0016fc0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0016fc5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0016fca:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016fcd:	80 fa 9d             	cmp    dl,0x9d
c0016fd0:	0f 84 2c 02 00 00    	je     c0017202 <Vm::faultHandler(regs*)+0x293>
c0016fd6:	0f 87 91 00 00 00    	ja     c001706d <Vm::faultHandler(regs*)+0xfe>
c0016fdc:	80 fa 66             	cmp    dl,0x66
c0016fdf:	0f 84 98 01 00 00    	je     c001717d <Vm::faultHandler(regs*)+0x20e>
c0016fe5:	77 47                	ja     c001702e <Vm::faultHandler(regs*)+0xbf>
c0016fe7:	80 fa 36             	cmp    dl,0x36
c0016fea:	0f 84 80 01 00 00    	je     c0017170 <Vm::faultHandler(regs*)+0x201>
c0016ff0:	77 1a                	ja     c001700c <Vm::faultHandler(regs*)+0x9d>
c0016ff2:	80 fa 26             	cmp    dl,0x26
c0016ff5:	0f 84 4e 01 00 00    	je     c0017149 <Vm::faultHandler(regs*)+0x1da>
c0016ffb:	80 fa 2e             	cmp    dl,0x2e
c0016ffe:	0f 85 e2 05 00 00    	jne    c00175e6 <Vm::faultHandler(regs*)+0x677>
c0017004:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017007:	31 f6                	xor    esi,esi
c0017009:	41                   	inc    ecx
c001700a:	eb be                	jmp    c0016fca <Vm::faultHandler(regs*)+0x5b>
c001700c:	80 fa 64             	cmp    dl,0x64
c001700f:	0f 84 41 01 00 00    	je     c0017156 <Vm::faultHandler(regs*)+0x1e7>
c0017015:	0f 87 48 01 00 00    	ja     c0017163 <Vm::faultHandler(regs*)+0x1f4>
c001701b:	80 fa 3e             	cmp    dl,0x3e
c001701e:	0f 85 c2 05 00 00    	jne    c00175e6 <Vm::faultHandler(regs*)+0x677>
c0017024:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017027:	be 01 00 00 00       	mov    esi,0x1
c001702c:	eb db                	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c001702e:	80 fa 6d             	cmp    dl,0x6d
c0017031:	0f 84 ec 02 00 00    	je     c0017323 <Vm::faultHandler(regs*)+0x3b4>
c0017037:	77 17                	ja     c0017050 <Vm::faultHandler(regs*)+0xe1>
c0017039:	80 fa 67             	cmp    dl,0x67
c001703c:	0f 84 48 01 00 00    	je     c001718a <Vm::faultHandler(regs*)+0x21b>
c0017042:	80 fa 6c             	cmp    dl,0x6c
c0017045:	0f 84 69 02 00 00    	je     c00172b4 <Vm::faultHandler(regs*)+0x345>
c001704b:	e9 96 05 00 00       	jmp    c00175e6 <Vm::faultHandler(regs*)+0x677>
c0017050:	80 fa 6f             	cmp    dl,0x6f
c0017053:	0f 84 f4 03 00 00    	je     c001744d <Vm::faultHandler(regs*)+0x4de>
c0017059:	0f 82 59 03 00 00    	jb     c00173b8 <Vm::faultHandler(regs*)+0x449>
c001705f:	80 fa 9c             	cmp    dl,0x9c
c0017062:	0f 84 2f 01 00 00    	je     c0017197 <Vm::faultHandler(regs*)+0x228>
c0017068:	e9 79 05 00 00       	jmp    c00175e6 <Vm::faultHandler(regs*)+0x677>
c001706d:	80 fa ec             	cmp    dl,0xec
c0017070:	0f 84 14 05 00 00    	je     c001758a <Vm::faultHandler(regs*)+0x61b>
c0017076:	77 7b                	ja     c00170f3 <Vm::faultHandler(regs*)+0x184>
c0017078:	80 fa e4             	cmp    dl,0xe4
c001707b:	0f 84 93 04 00 00    	je     c0017514 <Vm::faultHandler(regs*)+0x5a5>
c0017081:	77 53                	ja     c00170d6 <Vm::faultHandler(regs*)+0x167>
c0017083:	80 fa cd             	cmp    dl,0xcd
c0017086:	0f 84 d9 01 00 00    	je     c0017265 <Vm::faultHandler(regs*)+0x2f6>
c001708c:	80 fa cf             	cmp    dl,0xcf
c001708f:	0f 85 51 05 00 00    	jne    c00175e6 <Vm::faultHandler(regs*)+0x677>
c0017095:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017098:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001709b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001709f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00170a2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00170a6:	81 ca 00 02 02 00    	or     edx,0x20200
c00170ac:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00170af:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00170b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170b9:	66 c1 e8 09          	shr    ax,0x9
c00170bd:	83 e0 01             	and    eax,0x1
c00170c0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00170c3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00170c6:	83 c0 06             	add    eax,0x6
c00170c9:	25 ff ff 00 00       	and    eax,0xffff
c00170ce:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00170d1:	e9 0c 05 00 00       	jmp    c00175e2 <Vm::faultHandler(regs*)+0x673>
c00170d6:	80 fa e6             	cmp    dl,0xe6
c00170d9:	0f 84 7f 04 00 00    	je     c001755e <Vm::faultHandler(regs*)+0x5ef>
c00170df:	0f 82 4b 04 00 00    	jb     c0017530 <Vm::faultHandler(regs*)+0x5c1>
c00170e5:	80 fa e7             	cmp    dl,0xe7
c00170e8:	0f 84 87 04 00 00    	je     c0017575 <Vm::faultHandler(regs*)+0x606>
c00170ee:	e9 f3 04 00 00       	jmp    c00175e6 <Vm::faultHandler(regs*)+0x677>
c00170f3:	80 fa ef             	cmp    dl,0xef
c00170f6:	0f 84 d1 04 00 00    	je     c00175cd <Vm::faultHandler(regs*)+0x65e>
c00170fc:	77 28                	ja     c0017126 <Vm::faultHandler(regs*)+0x1b7>
c00170fe:	80 fa ed             	cmp    dl,0xed
c0017101:	0f 84 9f 04 00 00    	je     c00175a6 <Vm::faultHandler(regs*)+0x637>
c0017107:	80 fa ee             	cmp    dl,0xee
c001710a:	0f 85 d6 04 00 00    	jne    c00175e6 <Vm::faultHandler(regs*)+0x677>
c0017110:	50                   	push   eax
c0017111:	50                   	push   eax
c0017112:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017116:	50                   	push   eax
c0017117:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001711b:	50                   	push   eax
c001711c:	e8 a3 f9 ff ff       	call   c0016ac4 <Vm::outbv(unsigned short, unsigned char)>
c0017121:	e9 9f 04 00 00       	jmp    c00175c5 <Vm::faultHandler(regs*)+0x656>
c0017126:	80 fa fa             	cmp    dl,0xfa
c0017129:	0f 84 69 01 00 00    	je     c0017298 <Vm::faultHandler(regs*)+0x329>
c001712f:	80 fa fb             	cmp    dl,0xfb
c0017132:	0f 84 6e 01 00 00    	je     c00172a6 <Vm::faultHandler(regs*)+0x337>
c0017138:	80 fa f3             	cmp    dl,0xf3
c001713b:	0f 85 a5 04 00 00    	jne    c00175e6 <Vm::faultHandler(regs*)+0x677>
c0017141:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017144:	e9 c0 fe ff ff       	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c0017149:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001714c:	be 02 00 00 00       	mov    esi,0x2
c0017151:	e9 b3 fe ff ff       	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c0017156:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017159:	be 03 00 00 00       	mov    esi,0x3
c001715e:	e9 a6 fe ff ff       	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c0017163:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017166:	be 04 00 00 00       	mov    esi,0x4
c001716b:	e9 99 fe ff ff       	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c0017170:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017173:	be 05 00 00 00       	mov    esi,0x5
c0017178:	e9 8c fe ff ff       	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c001717d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017180:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0017185:	e9 7f fe ff ff       	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c001718a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001718d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0017192:	e9 72 fe ff ff       	jmp    c0017009 <Vm::faultHandler(regs*)+0x9a>
c0017197:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001719e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00171a3:	74 30                	je     c00171d5 <Vm::faultHandler(regs*)+0x266>
c00171a5:	83 e9 04             	sub    ecx,0x4
c00171a8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00171ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00171b4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00171b7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00171ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00171c0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00171c4:	0f 84 15 04 00 00    	je     c00175df <Vm::faultHandler(regs*)+0x670>
c00171ca:	80 ce 02             	or     dh,0x2
c00171cd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00171d0:	e9 0a 04 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c00171d5:	83 e9 02             	sub    ecx,0x2
c00171d8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00171de:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00171e1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00171e5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00171eb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00171ef:	74 05                	je     c00171f6 <Vm::faultHandler(regs*)+0x287>
c00171f1:	80 ce 02             	or     dh,0x2
c00171f4:	eb 03                	jmp    c00171f9 <Vm::faultHandler(regs*)+0x28a>
c00171f6:	80 e6 fd             	and    dh,0xfd
c00171f9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00171fd:	e9 dd 03 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c0017202:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017207:	74 2a                	je     c0017233 <Vm::faultHandler(regs*)+0x2c4>
c0017209:	8b 10                	mov    edx,DWORD PTR [eax]
c001720b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017211:	81 ca 00 02 02 00    	or     edx,0x20200
c0017217:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001721a:	8b 00                	mov    eax,DWORD PTR [eax]
c001721c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017222:	c1 e8 09             	shr    eax,0x9
c0017225:	83 e0 01             	and    eax,0x1
c0017228:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001722b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001722e:	83 c0 04             	add    eax,0x4
c0017231:	eb 25                	jmp    c0017258 <Vm::faultHandler(regs*)+0x2e9>
c0017233:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017236:	81 ca 00 02 02 00    	or     edx,0x20200
c001723c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001723f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017242:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017248:	66 c1 e8 09          	shr    ax,0x9
c001724c:	83 e0 01             	and    eax,0x1
c001724f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017252:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017255:	83 c0 02             	add    eax,0x2
c0017258:	25 ff ff 00 00       	and    eax,0xffff
c001725d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017260:	e9 7a 03 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c0017265:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017269:	3c ee                	cmp    al,0xee
c001726b:	75 10                	jne    c001727d <Vm::faultHandler(regs*)+0x30e>
c001726d:	83 ec 0c             	sub    esp,0xc
c0017270:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017273:	e8 e9 f8 ff ff       	call   c0016b61 <Vm::mainloop3(unsigned long)>
c0017278:	e9 4b 03 00 00       	jmp    c00175c8 <Vm::faultHandler(regs*)+0x659>
c001727d:	83 ec 0c             	sub    esp,0xc
c0017280:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017288:	51                   	push   ecx
c0017289:	50                   	push   eax
c001728a:	53                   	push   ebx
c001728b:	e8 e1 fb ff ff       	call   c0016e71 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017290:	83 c4 20             	add    esp,0x20
c0017293:	e9 4a 03 00 00       	jmp    c00175e2 <Vm::faultHandler(regs*)+0x673>
c0017298:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001729d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00172a1:	e9 39 03 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c00172a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172ab:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00172af:	e9 2b 03 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c00172b4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00172b7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00172bc:	74 2b                	je     c00172e9 <Vm::faultHandler(regs*)+0x37a>
c00172be:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00172c5:	76 22                	jbe    c00172e9 <Vm::faultHandler(regs*)+0x37a>
c00172c7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172cb:	50                   	push   eax
c00172cc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172d0:	50                   	push   eax
c00172d1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172d5:	50                   	push   eax
c00172d6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172da:	50                   	push   eax
c00172db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172df:	50                   	push   eax
c00172e0:	6a 6c                	push   0x6c
c00172e2:	6a 6c                	push   0x6c
c00172e4:	e9 b9 01 00 00       	jmp    c00174a2 <Vm::faultHandler(regs*)+0x533>
c00172e9:	83 ec 0c             	sub    esp,0xc
c00172ec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00172f0:	0f b7 f6             	movzx  esi,si
c00172f3:	50                   	push   eax
c00172f4:	e8 b8 f7 ff ff       	call   c0016ab1 <Vm::inbv(unsigned short)>
c00172f9:	83 c4 0c             	add    esp,0xc
c00172fc:	0f b6 c0             	movzx  eax,al
c00172ff:	50                   	push   eax
c0017300:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017304:	50                   	push   eax
c0017305:	56                   	push   esi
c0017306:	e8 24 fc ff ff       	call   c0016f2f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001730b:	83 c4 10             	add    esp,0x10
c001730e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017311:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017315:	74 03                	je     c001731a <Vm::faultHandler(regs*)+0x3ab>
c0017317:	48                   	dec    eax
c0017318:	eb 01                	jmp    c001731b <Vm::faultHandler(regs*)+0x3ac>
c001731a:	40                   	inc    eax
c001731b:	0f b7 c0             	movzx  eax,ax
c001731e:	e9 8d 00 00 00       	jmp    c00173b0 <Vm::faultHandler(regs*)+0x441>
c0017323:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017326:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017329:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001732e:	74 29                	je     c0017359 <Vm::faultHandler(regs*)+0x3ea>
c0017330:	3d ff ff 00 00       	cmp    eax,0xffff
c0017335:	76 22                	jbe    c0017359 <Vm::faultHandler(regs*)+0x3ea>
c0017337:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001733b:	50                   	push   eax
c001733c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017340:	50                   	push   eax
c0017341:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017345:	50                   	push   eax
c0017346:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001734a:	50                   	push   eax
c001734b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001734f:	50                   	push   eax
c0017350:	6a 6d                	push   0x6d
c0017352:	6a 6d                	push   0x6d
c0017354:	e9 49 01 00 00       	jmp    c00174a2 <Vm::faultHandler(regs*)+0x533>
c0017359:	0f b7 c8             	movzx  ecx,ax
c001735c:	0f b7 f6             	movzx  esi,si
c001735f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017362:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017367:	74 20                	je     c0017389 <Vm::faultHandler(regs*)+0x41a>
c0017369:	ed                   	in     eax,dx
c001736a:	55                   	push   ebp
c001736b:	50                   	push   eax
c001736c:	51                   	push   ecx
c001736d:	56                   	push   esi
c001736e:	e8 e7 fb ff ff       	call   c0016f5a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017373:	83 c4 10             	add    esp,0x10
c0017376:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017379:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001737d:	74 05                	je     c0017384 <Vm::faultHandler(regs*)+0x415>
c001737f:	83 e8 04             	sub    eax,0x4
c0017382:	eb 27                	jmp    c00173ab <Vm::faultHandler(regs*)+0x43c>
c0017384:	83 c0 04             	add    eax,0x4
c0017387:	eb 22                	jmp    c00173ab <Vm::faultHandler(regs*)+0x43c>
c0017389:	66 ed                	in     ax,dx
c001738b:	0f b7 c0             	movzx  eax,ax
c001738e:	57                   	push   edi
c001738f:	50                   	push   eax
c0017390:	51                   	push   ecx
c0017391:	56                   	push   esi
c0017392:	e8 ad fb ff ff       	call   c0016f44 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001739d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00173a1:	74 05                	je     c00173a8 <Vm::faultHandler(regs*)+0x439>
c00173a3:	83 e8 02             	sub    eax,0x2
c00173a6:	eb 03                	jmp    c00173ab <Vm::faultHandler(regs*)+0x43c>
c00173a8:	83 c0 02             	add    eax,0x2
c00173ab:	25 ff ff 00 00       	and    eax,0xffff
c00173b0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00173b3:	e9 27 02 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c00173b8:	8d 46 ff             	lea    eax,[esi-0x1]
c00173bb:	3c 05                	cmp    al,0x5
c00173bd:	77 24                	ja     c00173e3 <Vm::faultHandler(regs*)+0x474>
c00173bf:	0f b6 c0             	movzx  eax,al
c00173c2:	ff 24 85 b4 46 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb94c]
c00173c9:	0f b7 fd             	movzx  edi,bp
c00173cc:	eb 15                	jmp    c00173e3 <Vm::faultHandler(regs*)+0x474>
c00173ce:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00173d2:	eb 0f                	jmp    c00173e3 <Vm::faultHandler(regs*)+0x474>
c00173d4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00173d8:	eb 09                	jmp    c00173e3 <Vm::faultHandler(regs*)+0x474>
c00173da:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00173de:	eb 03                	jmp    c00173e3 <Vm::faultHandler(regs*)+0x474>
c00173e0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00173e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00173e6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00173eb:	74 29                	je     c0017416 <Vm::faultHandler(regs*)+0x4a7>
c00173ed:	3d ff ff 00 00       	cmp    eax,0xffff
c00173f2:	76 22                	jbe    c0017416 <Vm::faultHandler(regs*)+0x4a7>
c00173f4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00173f8:	50                   	push   eax
c00173f9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00173fd:	50                   	push   eax
c00173fe:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017402:	50                   	push   eax
c0017403:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017407:	50                   	push   eax
c0017408:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001740c:	50                   	push   eax
c001740d:	6a 6e                	push   0x6e
c001740f:	6a 6e                	push   0x6e
c0017411:	e9 8c 00 00 00       	jmp    c00174a2 <Vm::faultHandler(regs*)+0x533>
c0017416:	0f b7 c0             	movzx  eax,ax
c0017419:	52                   	push   edx
c001741a:	52                   	push   edx
c001741b:	50                   	push   eax
c001741c:	57                   	push   edi
c001741d:	e8 d9 fa ff ff       	call   c0016efb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017422:	59                   	pop    ecx
c0017423:	0f b6 c0             	movzx  eax,al
c0017426:	5e                   	pop    esi
c0017427:	50                   	push   eax
c0017428:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001742c:	50                   	push   eax
c001742d:	e8 92 f6 ff ff       	call   c0016ac4 <Vm::outbv(unsigned short, unsigned char)>
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017438:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001743c:	74 03                	je     c0017441 <Vm::faultHandler(regs*)+0x4d2>
c001743e:	48                   	dec    eax
c001743f:	eb 01                	jmp    c0017442 <Vm::faultHandler(regs*)+0x4d3>
c0017441:	40                   	inc    eax
c0017442:	0f b7 c0             	movzx  eax,ax
c0017445:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017448:	e9 92 01 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c001744d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017450:	3c 05                	cmp    al,0x5
c0017452:	77 1f                	ja     c0017473 <Vm::faultHandler(regs*)+0x504>
c0017454:	0f b6 c0             	movzx  eax,al
c0017457:	ff 24 85 cc 46 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb934]
c001745e:	89 ef                	mov    edi,ebp
c0017460:	eb 11                	jmp    c0017473 <Vm::faultHandler(regs*)+0x504>
c0017462:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017465:	eb 0c                	jmp    c0017473 <Vm::faultHandler(regs*)+0x504>
c0017467:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001746a:	eb 07                	jmp    c0017473 <Vm::faultHandler(regs*)+0x504>
c001746c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001746f:	eb 02                	jmp    c0017473 <Vm::faultHandler(regs*)+0x504>
c0017471:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017473:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017476:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001747b:	74 37                	je     c00174b4 <Vm::faultHandler(regs*)+0x545>
c001747d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017483:	76 2f                	jbe    c00174b4 <Vm::faultHandler(regs*)+0x545>
c0017485:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017489:	50                   	push   eax
c001748a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001748e:	50                   	push   eax
c001748f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017493:	50                   	push   eax
c0017494:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017498:	50                   	push   eax
c0017499:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001749d:	50                   	push   eax
c001749e:	6a 6f                	push   0x6f
c00174a0:	6a 6f                	push   0x6f
c00174a2:	68 5a 46 02 c0       	push   0xc002465a
c00174a7:	e8 39 52 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00174ac:	83 c4 20             	add    esp,0x20
c00174af:	e9 86 01 00 00       	jmp    c001763a <Vm::faultHandler(regs*)+0x6cb>
c00174b4:	0f b7 d7             	movzx  edx,di
c00174b7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00174ba:	0f b7 c6             	movzx  eax,si
c00174bd:	81 e1 00 04 00 00    	and    ecx,0x400
c00174c3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00174c6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00174cb:	74 1d                	je     c00174ea <Vm::faultHandler(regs*)+0x57b>
c00174cd:	55                   	push   ebp
c00174ce:	55                   	push   ebp
c00174cf:	50                   	push   eax
c00174d0:	52                   	push   edx
c00174d1:	e8 48 fa ff ff       	call   c0016f1e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00174d6:	83 c4 10             	add    esp,0x10
c00174d9:	89 fa                	mov    edx,edi
c00174db:	ef                   	out    dx,eax
c00174dc:	85 c9                	test   ecx,ecx
c00174de:	74 05                	je     c00174e5 <Vm::faultHandler(regs*)+0x576>
c00174e0:	83 ee 04             	sub    esi,0x4
c00174e3:	eb 21                	jmp    c0017506 <Vm::faultHandler(regs*)+0x597>
c00174e5:	83 c6 04             	add    esi,0x4
c00174e8:	eb 1c                	jmp    c0017506 <Vm::faultHandler(regs*)+0x597>
c00174ea:	55                   	push   ebp
c00174eb:	55                   	push   ebp
c00174ec:	50                   	push   eax
c00174ed:	52                   	push   edx
c00174ee:	e8 19 fa ff ff       	call   c0016f0c <Vm::readWordFromReal(unsigned short, unsigned short)>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	89 fa                	mov    edx,edi
c00174f8:	66 ef                	out    dx,ax
c00174fa:	85 c9                	test   ecx,ecx
c00174fc:	74 05                	je     c0017503 <Vm::faultHandler(regs*)+0x594>
c00174fe:	83 ee 02             	sub    esi,0x2
c0017501:	eb 03                	jmp    c0017506 <Vm::faultHandler(regs*)+0x597>
c0017503:	83 c6 02             	add    esi,0x2
c0017506:	81 e6 ff ff 00 00    	and    esi,0xffff
c001750c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001750f:	e9 cb 00 00 00       	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c0017514:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001751b:	83 ec 0c             	sub    esp,0xc
c001751e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017522:	50                   	push   eax
c0017523:	e8 89 f5 ff ff       	call   c0016ab1 <Vm::inbv(unsigned short)>
c0017528:	0f b6 c0             	movzx  eax,al
c001752b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001752e:	eb 3f                	jmp    c001756f <Vm::faultHandler(regs*)+0x600>
c0017530:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017535:	74 07                	je     c001753e <Vm::faultHandler(regs*)+0x5cf>
c0017537:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001753b:	ed                   	in     eax,dx
c001753c:	eb 14                	jmp    c0017552 <Vm::faultHandler(regs*)+0x5e3>
c001753e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017541:	66 31 f6             	xor    si,si
c0017544:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017547:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001754b:	66 ed                	in     ax,dx
c001754d:	0f b7 c0             	movzx  eax,ax
c0017550:	09 f0                	or     eax,esi
c0017552:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017555:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017559:	e9 84 00 00 00       	jmp    c00175e2 <Vm::faultHandler(regs*)+0x673>
c001755e:	52                   	push   edx
c001755f:	52                   	push   edx
c0017560:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017564:	50                   	push   eax
c0017565:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017569:	50                   	push   eax
c001756a:	e8 55 f5 ff ff       	call   c0016ac4 <Vm::outbv(unsigned short, unsigned char)>
c001756f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017573:	eb 53                	jmp    c00175c8 <Vm::faultHandler(regs*)+0x659>
c0017575:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017578:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001757c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017581:	74 03                	je     c0017586 <Vm::faultHandler(regs*)+0x617>
c0017583:	ef                   	out    dx,eax
c0017584:	eb cf                	jmp    c0017555 <Vm::faultHandler(regs*)+0x5e6>
c0017586:	66 ef                	out    dx,ax
c0017588:	eb cb                	jmp    c0017555 <Vm::faultHandler(regs*)+0x5e6>
c001758a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017591:	83 ec 0c             	sub    esp,0xc
c0017594:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017598:	50                   	push   eax
c0017599:	e8 13 f5 ff ff       	call   c0016ab1 <Vm::inbv(unsigned short)>
c001759e:	0f b6 c0             	movzx  eax,al
c00175a1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00175a4:	eb 1f                	jmp    c00175c5 <Vm::faultHandler(regs*)+0x656>
c00175a6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175a9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00175ae:	74 03                	je     c00175b3 <Vm::faultHandler(regs*)+0x644>
c00175b0:	ed                   	in     eax,dx
c00175b1:	eb 0d                	jmp    c00175c0 <Vm::faultHandler(regs*)+0x651>
c00175b3:	66 ed                	in     ax,dx
c00175b5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00175b8:	0f b7 c0             	movzx  eax,ax
c00175bb:	66 31 d2             	xor    dx,dx
c00175be:	09 d0                	or     eax,edx
c00175c0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00175c3:	eb 1a                	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c00175c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	eb 15                	jmp    c00175e2 <Vm::faultHandler(regs*)+0x673>
c00175cd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00175d0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175d3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00175d8:	74 03                	je     c00175dd <Vm::faultHandler(regs*)+0x66e>
c00175da:	ef                   	out    dx,eax
c00175db:	eb 02                	jmp    c00175df <Vm::faultHandler(regs*)+0x670>
c00175dd:	66 ef                	out    dx,ax
c00175df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00175e2:	b0 01                	mov    al,0x1
c00175e4:	eb 56                	jmp    c001763c <Vm::faultHandler(regs*)+0x6cd>
c00175e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175ea:	50                   	push   eax
c00175eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175ef:	50                   	push   eax
c00175f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175f4:	50                   	push   eax
c00175f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175f9:	50                   	push   eax
c00175fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175fe:	50                   	push   eax
c00175ff:	52                   	push   edx
c0017600:	52                   	push   edx
c0017601:	68 87 46 02 c0       	push   0xc0024687
c0017606:	e8 da 50 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001760b:	83 c4 20             	add    esp,0x20
c001760e:	83 ec 0c             	sub    esp,0xc
c0017611:	6a 60                	push   0x60
c0017613:	e8 99 f4 ff ff       	call   c0016ab1 <Vm::inbv(unsigned short)>
c0017618:	83 c4 10             	add    esp,0x10
c001761b:	3c 1c                	cmp    al,0x1c
c001761d:	74 04                	je     c0017623 <Vm::faultHandler(regs*)+0x6b4>
c001761f:	3c 5a                	cmp    al,0x5a
c0017621:	75 eb                	jne    c001760e <Vm::faultHandler(regs*)+0x69f>
c0017623:	3c 5a                	cmp    al,0x5a
c0017625:	74 04                	je     c001762b <Vm::faultHandler(regs*)+0x6bc>
c0017627:	3c 1c                	cmp    al,0x1c
c0017629:	75 0f                	jne    c001763a <Vm::faultHandler(regs*)+0x6cb>
c001762b:	83 ec 0c             	sub    esp,0xc
c001762e:	6a 60                	push   0x60
c0017630:	e8 7c f4 ff ff       	call   c0016ab1 <Vm::inbv(unsigned short)>
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	eb e9                	jmp    c0017623 <Vm::faultHandler(regs*)+0x6b4>
c001763a:	31 c0                	xor    eax,eax
c001763c:	83 c4 1c             	add    esp,0x1c
c001763f:	5b                   	pop    ebx
c0017640:	5e                   	pop    esi
c0017641:	5f                   	pop    edi
c0017642:	5d                   	pop    ebp
c0017643:	c3                   	ret    

c0017644 <Vm::fpuInternalTo32(unsigned long long)>:
c0017644:	57                   	push   edi
c0017645:	56                   	push   esi
c0017646:	53                   	push   ebx
c0017647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001764b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001764f:	89 d6                	mov    esi,edx
c0017651:	89 d7                	mov    edi,edx
c0017653:	89 c1                	mov    ecx,eax
c0017655:	c1 ef 14             	shr    edi,0x14
c0017658:	89 d3                	mov    ebx,edx
c001765a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0017660:	31 d2                	xor    edx,edx
c0017662:	89 f8                	mov    eax,edi
c0017664:	81 e6 00 00 00 80    	and    esi,0x80000000
c001766a:	bf ff 00 00 00       	mov    edi,0xff
c001766f:	05 80 fc ff ff       	add    eax,0xfffffc80
c0017674:	83 d2 ff             	adc    edx,0xffffffff
c0017677:	39 c7                	cmp    edi,eax
c0017679:	bf 00 00 00 00       	mov    edi,0x0
c001767e:	19 d7                	sbb    edi,edx
c0017680:	72 16                	jb     c0017698 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0017682:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0017686:	c1 e0 17             	shl    eax,0x17
c0017689:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001768f:	09 f1                	or     ecx,esi
c0017691:	09 c1                	or     ecx,eax
c0017693:	89 cf                	mov    edi,ecx
c0017695:	eb 05                	jmp    c001769c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0017697:	90                   	nop
c0017698:	31 ff                	xor    edi,edi
c001769a:	66 90                	xchg   ax,ax
c001769c:	89 f8                	mov    eax,edi
c001769e:	5b                   	pop    ebx
c001769f:	5e                   	pop    esi
c00176a0:	5f                   	pop    edi
c00176a1:	c3                   	ret    

c00176a2 <Vm::fpuInternalTo64(unsigned long long)>:
c00176a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176aa:	c3                   	ret    

c00176ab <Vm::fpu32ToInternal(unsigned int)>:
c00176ab:	57                   	push   edi
c00176ac:	31 ff                	xor    edi,edi
c00176ae:	56                   	push   esi
c00176af:	53                   	push   ebx
c00176b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00176b4:	89 cb                	mov    ebx,ecx
c00176b6:	89 ce                	mov    esi,ecx
c00176b8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00176be:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00176c4:	c1 e9 17             	shr    ecx,0x17
c00176c7:	89 f0                	mov    eax,esi
c00176c9:	0f b6 d1             	movzx  edx,cl
c00176cc:	81 c2 80 03 00 00    	add    edx,0x380
c00176d2:	89 d1                	mov    ecx,edx
c00176d4:	89 fa                	mov    edx,edi
c00176d6:	c1 e1 14             	shl    ecx,0x14
c00176d9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00176dd:	c1 e0 1d             	shl    eax,0x1d
c00176e0:	89 d7                	mov    edi,edx
c00176e2:	89 c6                	mov    esi,eax
c00176e4:	89 ca                	mov    edx,ecx
c00176e6:	89 f0                	mov    eax,esi
c00176e8:	09 fa                	or     edx,edi
c00176ea:	09 da                	or     edx,ebx
c00176ec:	5b                   	pop    ebx
c00176ed:	5e                   	pop    esi
c00176ee:	5f                   	pop    edi
c00176ef:	c3                   	ret    

c00176f0 <Vm::fpu64ToInternal(unsigned long long)>:
c00176f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176f8:	c3                   	ret    

c00176f9 <Vm::fpuFloatToLong(unsigned long long)>:
c00176f9:	57                   	push   edi
c00176fa:	31 c0                	xor    eax,eax
c00176fc:	56                   	push   esi
c00176fd:	31 d2                	xor    edx,edx
c00176ff:	53                   	push   ebx
c0017700:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017704:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017708:	89 d9                	mov    ecx,ebx
c001770a:	c1 e9 14             	shr    ecx,0x14
c001770d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0017713:	89 cf                	mov    edi,ecx
c0017715:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001771b:	78 37                	js     c0017754 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001771d:	89 d9                	mov    ecx,ebx
c001771f:	89 f0                	mov    eax,esi
c0017721:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0017727:	81 c9 00 00 10 00    	or     ecx,0x100000
c001772d:	89 ca                	mov    edx,ecx
c001772f:	b9 34 00 00 00       	mov    ecx,0x34
c0017734:	29 f9                	sub    ecx,edi
c0017736:	0f ad d0             	shrd   eax,edx,cl
c0017739:	d3 fa                	sar    edx,cl
c001773b:	f6 c1 20             	test   cl,0x20
c001773e:	74 08                	je     c0017748 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0017740:	89 d0                	mov    eax,edx
c0017742:	c1 fa 1f             	sar    edx,0x1f
c0017745:	8d 76 00             	lea    esi,[esi+0x0]
c0017748:	85 db                	test   ebx,ebx
c001774a:	79 08                	jns    c0017754 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001774c:	f7 d8                	neg    eax
c001774e:	83 d2 00             	adc    edx,0x0
c0017751:	f7 da                	neg    edx
c0017753:	90                   	nop
c0017754:	5b                   	pop    ebx
c0017755:	5e                   	pop    esi
c0017756:	5f                   	pop    edi
c0017757:	c3                   	ret    

c0017758 <Vm::fpuULongToFloat(unsigned long long)>:
c0017758:	57                   	push   edi
c0017759:	31 c9                	xor    ecx,ecx
c001775b:	56                   	push   esi
c001775c:	53                   	push   ebx
c001775d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017761:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017765:	8d 76 00             	lea    esi,[esi+0x0]
c0017768:	0f ba e7 14          	bt     edi,0x14
c001776c:	72 0a                	jb     c0017778 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001776e:	01 f6                	add    esi,esi
c0017770:	11 ff                	adc    edi,edi
c0017772:	41                   	inc    ecx
c0017773:	eb f3                	jmp    c0017768 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0017775:	8d 76 00             	lea    esi,[esi+0x0]
c0017778:	89 fa                	mov    edx,edi
c001777a:	89 f0                	mov    eax,esi
c001777c:	bb 33 04 00 00       	mov    ebx,0x433
c0017781:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0017787:	29 cb                	sub    ebx,ecx
c0017789:	89 d9                	mov    ecx,ebx
c001778b:	5b                   	pop    ebx
c001778c:	c1 e1 14             	shl    ecx,0x14
c001778f:	5e                   	pop    esi
c0017790:	09 ca                	or     edx,ecx
c0017792:	5f                   	pop    edi
c0017793:	c3                   	ret    

c0017794 <Vm::fpuLongToFloat(long long)>:
c0017794:	56                   	push   esi
c0017795:	31 c0                	xor    eax,eax
c0017797:	53                   	push   ebx
c0017798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001779c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177a0:	39 c8                	cmp    eax,ecx
c00177a2:	19 d8                	sbb    eax,ebx
c00177a4:	7d 06                	jge    c00177ac <Vm::fpuLongToFloat(long long)+0x18>
c00177a6:	31 f6                	xor    esi,esi
c00177a8:	eb 0e                	jmp    c00177b8 <Vm::fpuLongToFloat(long long)+0x24>
c00177aa:	66 90                	xchg   ax,ax
c00177ac:	f7 d9                	neg    ecx
c00177ae:	be 01 00 00 00       	mov    esi,0x1
c00177b3:	83 d3 00             	adc    ebx,0x0
c00177b6:	f7 db                	neg    ebx
c00177b8:	31 c0                	xor    eax,eax
c00177ba:	66 90                	xchg   ax,ax
c00177bc:	0f ba e3 14          	bt     ebx,0x14
c00177c0:	72 0a                	jb     c00177cc <Vm::fpuLongToFloat(long long)+0x38>
c00177c2:	01 c9                	add    ecx,ecx
c00177c4:	11 db                	adc    ebx,ebx
c00177c6:	40                   	inc    eax
c00177c7:	eb f3                	jmp    c00177bc <Vm::fpuLongToFloat(long long)+0x28>
c00177c9:	8d 76 00             	lea    esi,[esi+0x0]
c00177cc:	ba 33 04 00 00       	mov    edx,0x433
c00177d1:	29 c2                	sub    edx,eax
c00177d3:	89 c8                	mov    eax,ecx
c00177d5:	c1 e2 14             	shl    edx,0x14
c00177d8:	89 d9                	mov    ecx,ebx
c00177da:	89 f3                	mov    ebx,esi
c00177dc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00177e2:	09 ca                	or     edx,ecx
c00177e4:	84 db                	test   bl,bl
c00177e6:	74 08                	je     c00177f0 <Vm::fpuLongToFloat(long long)+0x5c>
c00177e8:	81 ca 00 00 00 80    	or     edx,0x80000000
c00177ee:	66 90                	xchg   ax,ax
c00177f0:	5b                   	pop    ebx
c00177f1:	5e                   	pop    esi
c00177f2:	c3                   	ret    

c00177f3 <Vm::fpuGet0()>:
c00177f3:	31 c0                	xor    eax,eax
c00177f5:	31 d2                	xor    edx,edx
c00177f7:	c3                   	ret    

c00177f8 <Vm::fpuGet1()>:
c00177f8:	b8 01 00 00 00       	mov    eax,0x1
c00177fd:	31 d2                	xor    edx,edx
c00177ff:	c3                   	ret    

c0017800 <Vm::fpuGetPi()>:
c0017800:	b8 03 00 00 00       	mov    eax,0x3
c0017805:	31 d2                	xor    edx,edx
c0017807:	c3                   	ret    

c0017808 <Vm::fpuGetLog2E()>:
c0017808:	83 ec 18             	sub    esp,0x18
c001780b:	68 e4 46 02 c0       	push   0xc00246e4
c0017810:	e8 3a b2 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0017815:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001781a:	31 d2                	xor    edx,edx
c001781c:	83 c4 1c             	add    esp,0x1c
c001781f:	c3                   	ret    

c0017820 <Vm::fpuGetLogE2()>:
c0017820:	83 ec 18             	sub    esp,0x18
c0017823:	68 f0 46 02 c0       	push   0xc00246f0
c0017828:	e8 22 b2 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001782d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017832:	31 d2                	xor    edx,edx
c0017834:	83 c4 1c             	add    esp,0x1c
c0017837:	c3                   	ret    

c0017838 <Vm::fpuGetLog210()>:
c0017838:	83 ec 18             	sub    esp,0x18
c001783b:	68 fc 46 02 c0       	push   0xc00246fc
c0017840:	e8 0a b2 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0017845:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001784a:	31 d2                	xor    edx,edx
c001784c:	83 c4 1c             	add    esp,0x1c
c001784f:	c3                   	ret    

c0017850 <Vm::fpuGetLog102()>:
c0017850:	83 ec 18             	sub    esp,0x18
c0017853:	68 09 47 02 c0       	push   0xc0024709
c0017858:	e8 f2 b1 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001785d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017862:	31 d2                	xor    edx,edx
c0017864:	83 c4 1c             	add    esp,0x1c
c0017867:	c3                   	ret    

c0017868 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0017868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001786c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0017870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017874:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0017878:	0f 92 c0             	setb   al
c001787b:	c3                   	ret    

c001787c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001787c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017884:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0017888:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001788c:	09 c2                	or     edx,eax
c001788e:	0f 94 c0             	sete   al
c0017891:	c3                   	ret    

c0017892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0017892:	57                   	push   edi
c0017893:	56                   	push   esi
c0017894:	53                   	push   ebx
c0017895:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017899:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001789d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00178a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00178a5:	57                   	push   edi
c00178a6:	56                   	push   esi
c00178a7:	53                   	push   ebx
c00178a8:	51                   	push   ecx
c00178a9:	e8 ce ff ff ff       	call   c001787c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	88 c2                	mov    dl,al
c00178b3:	31 c0                	xor    eax,eax
c00178b5:	84 d2                	test   dl,dl
c00178b7:	75 0f                	jne    c00178c8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c00178b9:	57                   	push   edi
c00178ba:	56                   	push   esi
c00178bb:	53                   	push   ebx
c00178bc:	51                   	push   ecx
c00178bd:	e8 a6 ff ff ff       	call   c0017868 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00178c2:	83 c4 10             	add    esp,0x10
c00178c5:	8d 76 00             	lea    esi,[esi+0x0]
c00178c8:	83 e0 01             	and    eax,0x1
c00178cb:	5b                   	pop    ebx
c00178cc:	88 c1                	mov    cl,al
c00178ce:	83 e2 01             	and    edx,0x1
c00178d1:	a0 41 98 02 c0       	mov    al,ds:0xc0029841
c00178d6:	c1 e2 06             	shl    edx,0x6
c00178d9:	83 e0 ba             	and    eax,0xffffffba
c00178dc:	5e                   	pop    esi
c00178dd:	09 c8                	or     eax,ecx
c00178df:	5f                   	pop    edi
c00178e0:	09 d0                	or     eax,edx
c00178e2:	a2 41 98 02 c0       	mov    ds:0xc0029841,al
c00178e7:	c3                   	ret    

c00178e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00178e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178f0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00178f4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00178f8:	c3                   	ret    

c00178f9 <Vm::fpuAbs(unsigned long long)>:
c00178f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017901:	c3                   	ret    

c0017902 <Vm::fpuChs(unsigned long long)>:
c0017902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001790a:	f7 d8                	neg    eax
c001790c:	83 d2 00             	adc    edx,0x0
c001790f:	f7 da                	neg    edx
c0017911:	c3                   	ret    

c0017912 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0017912:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0017916:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001791b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001791f:	eb c7                	jmp    c00178e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0017921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0017921:	53                   	push   ebx
c0017922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017926:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001792a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001792e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017932:	0f af ca             	imul   ecx,edx
c0017935:	0f af d8             	imul   ebx,eax
c0017938:	f7 e2                	mul    edx
c001793a:	01 d9                	add    ecx,ebx
c001793c:	5b                   	pop    ebx
c001793d:	01 ca                	add    edx,ecx
c001793f:	c3                   	ret    

c0017940 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001794b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001794f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017953:	e8 e8 9a 00 00       	call   c0021440 <__udivdi3>
c0017958:	83 c4 1c             	add    esp,0x1c
c001795b:	c3                   	ret    

c001795c <Vm::fpuSquare(unsigned long long)>:
c001795c:	50                   	push   eax
c001795d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017961:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017965:	52                   	push   edx
c0017966:	50                   	push   eax
c0017967:	52                   	push   edx
c0017968:	50                   	push   eax
c0017969:	e8 b3 ff ff ff       	call   c0017921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001796e:	83 c4 14             	add    esp,0x14
c0017971:	c3                   	ret    

c0017972 <Vm::fpuGetReg(int)>:
c0017972:	83 ec 0c             	sub    esp,0xc
c0017975:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001797a:	76 10                	jbe    c001798c <Vm::fpuGetReg(int)+0x1a>
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	68 16 47 02 c0       	push   0xc0024716
c0017984:	e8 c6 b0 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	a0 41 98 02 c0       	mov    al,ds:0xc0029841
c0017991:	b9 08 00 00 00       	mov    ecx,0x8
c0017996:	c0 e8 03             	shr    al,0x3
c0017999:	83 e0 07             	and    eax,0x7
c001799c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00179a0:	99                   	cdq    
c00179a1:	f7 f9                	idiv   ecx
c00179a3:	8b 04 d5 44 98 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd67bc]
c00179aa:	8b 14 d5 48 98 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd67b8]
c00179b1:	83 c4 0c             	add    esp,0xc
c00179b4:	c3                   	ret    

c00179b5 <Vm::fpuSetReg(int, unsigned long long)>:
c00179b5:	57                   	push   edi
c00179b6:	56                   	push   esi
c00179b7:	52                   	push   edx
c00179b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00179bc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00179c0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00179c5:	76 11                	jbe    c00179d8 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00179c7:	83 ec 0c             	sub    esp,0xc
c00179ca:	68 29 47 02 c0       	push   0xc0024729
c00179cf:	e8 7b b0 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	90                   	nop
c00179d8:	a0 41 98 02 c0       	mov    al,ds:0xc0029841
c00179dd:	b9 08 00 00 00       	mov    ecx,0x8
c00179e2:	c0 e8 03             	shr    al,0x3
c00179e5:	83 e0 07             	and    eax,0x7
c00179e8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00179ec:	99                   	cdq    
c00179ed:	f7 f9                	idiv   ecx
c00179ef:	89 34 d5 44 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd67bc],esi
c00179f6:	89 3c d5 48 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd67b8],edi
c00179fd:	58                   	pop    eax
c00179fe:	5e                   	pop    esi
c00179ff:	5f                   	pop    edi
c0017a00:	c3                   	ret    

c0017a01 <Vm::fpuPush(unsigned long long)>:
c0017a01:	a0 41 98 02 c0       	mov    al,ds:0xc0029841
c0017a06:	c0 e8 03             	shr    al,0x3
c0017a09:	83 e0 07             	and    eax,0x7
c0017a0c:	83 c0 07             	add    eax,0x7
c0017a0f:	88 c2                	mov    dl,al
c0017a11:	83 e0 07             	and    eax,0x7
c0017a14:	83 e2 07             	and    edx,0x7
c0017a17:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0017a1e:	8a 15 41 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029841
c0017a24:	83 e2 c7             	and    edx,0xffffffc7
c0017a27:	09 ca                	or     edx,ecx
c0017a29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a2d:	88 15 41 98 02 c0    	mov    BYTE PTR ds:0xc0029841,dl
c0017a33:	89 0c c5 48 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67b8],ecx
c0017a3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017a3e:	89 14 c5 44 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67bc],edx
c0017a45:	a1 84 98 02 c0       	mov    eax,ds:0xc0029884
c0017a4a:	83 f8 08             	cmp    eax,0x8
c0017a4d:	75 09                	jne    c0017a58 <Vm::fpuPush(unsigned long long)+0x57>
c0017a4f:	80 0d 40 98 02 c0 40 	or     BYTE PTR ds:0xc0029840,0x40
c0017a56:	c3                   	ret    
c0017a57:	90                   	nop
c0017a58:	40                   	inc    eax
c0017a59:	a3 84 98 02 c0       	mov    ds:0xc0029884,eax
c0017a5e:	c3                   	ret    

c0017a5f <Vm::fpuPop()>:
c0017a5f:	8a 0d 41 98 02 c0    	mov    cl,BYTE PTR ds:0xc0029841
c0017a65:	53                   	push   ebx
c0017a66:	c0 e9 03             	shr    cl,0x3
c0017a69:	8a 1d 41 98 02 c0    	mov    bl,BYTE PTR ds:0xc0029841
c0017a6f:	83 e1 07             	and    ecx,0x7
c0017a72:	83 e3 c7             	and    ebx,0xffffffc7
c0017a75:	8b 04 cd 44 98 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd67bc]
c0017a7c:	8b 14 cd 48 98 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd67b8]
c0017a83:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0017a8a:	83 e1 38             	and    ecx,0x38
c0017a8d:	09 d9                	or     ecx,ebx
c0017a8f:	88 0d 41 98 02 c0    	mov    BYTE PTR ds:0xc0029841,cl
c0017a95:	8b 0d 84 98 02 c0    	mov    ecx,DWORD PTR ds:0xc0029884
c0017a9b:	85 c9                	test   ecx,ecx
c0017a9d:	74 09                	je     c0017aa8 <Vm::fpuPop()+0x49>
c0017a9f:	49                   	dec    ecx
c0017aa0:	89 0d 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,ecx
c0017aa6:	eb 08                	jmp    c0017ab0 <Vm::fpuPop()+0x51>
c0017aa8:	80 0d 40 98 02 c0 40 	or     BYTE PTR ds:0xc0029840,0x40
c0017aaf:	90                   	nop
c0017ab0:	5b                   	pop    ebx
c0017ab1:	c3                   	ret    

c0017ab2 <Vm::x87Handler(regs*)>:
c0017ab2:	55                   	push   ebp
c0017ab3:	57                   	push   edi
c0017ab4:	56                   	push   esi
c0017ab5:	53                   	push   ebx
c0017ab6:	83 ec 1c             	sub    esp,0x1c
c0017ab9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017abd:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0017ac2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017ac5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0017acd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0017ad1:	50                   	push   eax
c0017ad2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0017ad6:	50                   	push   eax
c0017ad7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017adb:	50                   	push   eax
c0017adc:	53                   	push   ebx
c0017add:	e8 86 a6 ff ff       	call   c0012168 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0017ae2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0017ae5:	83 c4 10             	add    esp,0x10
c0017ae8:	89 c6                	mov    esi,eax
c0017aea:	80 fa d9             	cmp    dl,0xd9
c0017aed:	0f 85 79 01 00 00    	jne    c0017c6c <Vm::x87Handler(regs*)+0x1ba>
c0017af3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017af7:	8d 50 20             	lea    edx,[eax+0x20]
c0017afa:	80 fa 0e             	cmp    dl,0xe
c0017afd:	0f 87 a5 00 00 00    	ja     c0017ba8 <Vm::x87Handler(regs*)+0xf6>
c0017b03:	0f b6 d2             	movzx  edx,dl
c0017b06:	ff 24 95 3c 47 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb8c4]
c0017b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b10:	e8 de fc ff ff       	call   c00177f3 <Vm::fpuGet0()>
c0017b15:	eb 09                	jmp    c0017b20 <Vm::x87Handler(regs*)+0x6e>
c0017b17:	90                   	nop
c0017b18:	e8 db fc ff ff       	call   c00177f8 <Vm::fpuGet1()>
c0017b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b20:	57                   	push   edi
c0017b21:	57                   	push   edi
c0017b22:	66 90                	xchg   ax,ax
c0017b24:	52                   	push   edx
c0017b25:	50                   	push   eax
c0017b26:	e8 d6 fe ff ff       	call   c0017a01 <Vm::fpuPush(unsigned long long)>
c0017b2b:	90                   	nop
c0017b2c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	90                   	nop
c0017b34:	b0 01                	mov    al,0x1
c0017b36:	e9 89 0a 00 00       	jmp    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c0017b3b:	90                   	nop
c0017b3c:	83 ec 0c             	sub    esp,0xc
c0017b3f:	6a 00                	push   0x0
c0017b41:	e8 2c fe ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017b46:	59                   	pop    ecx
c0017b47:	5e                   	pop    esi
c0017b48:	52                   	push   edx
c0017b49:	50                   	push   eax
c0017b4a:	e8 b3 fd ff ff       	call   c0017902 <Vm::fpuChs(unsigned long long)>
c0017b4f:	eb 17                	jmp    c0017b68 <Vm::x87Handler(regs*)+0xb6>
c0017b51:	8d 76 00             	lea    esi,[esi+0x0]
c0017b54:	83 ec 0c             	sub    esp,0xc
c0017b57:	6a 00                	push   0x0
c0017b59:	e8 14 fe ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017b5e:	5f                   	pop    edi
c0017b5f:	5d                   	pop    ebp
c0017b60:	52                   	push   edx
c0017b61:	50                   	push   eax
c0017b62:	e8 92 fd ff ff       	call   c00178f9 <Vm::fpuAbs(unsigned long long)>
c0017b67:	90                   	nop
c0017b68:	83 c4 0c             	add    esp,0xc
c0017b6b:	90                   	nop
c0017b6c:	52                   	push   edx
c0017b6d:	50                   	push   eax
c0017b6e:	66 90                	xchg   ax,ax
c0017b70:	6a 00                	push   0x0
c0017b72:	66 90                	xchg   ax,ax
c0017b74:	e8 3c fe ff ff       	call   c00179b5 <Vm::fpuSetReg(int, unsigned long long)>
c0017b79:	eb b1                	jmp    c0017b2c <Vm::x87Handler(regs*)+0x7a>
c0017b7b:	90                   	nop
c0017b7c:	e8 b7 fc ff ff       	call   c0017838 <Vm::fpuGetLog210()>
c0017b81:	eb 9d                	jmp    c0017b20 <Vm::x87Handler(regs*)+0x6e>
c0017b83:	90                   	nop
c0017b84:	e8 7f fc ff ff       	call   c0017808 <Vm::fpuGetLog2E()>
c0017b89:	eb 95                	jmp    c0017b20 <Vm::x87Handler(regs*)+0x6e>
c0017b8b:	90                   	nop
c0017b8c:	e8 6f fc ff ff       	call   c0017800 <Vm::fpuGetPi()>
c0017b91:	eb 8d                	jmp    c0017b20 <Vm::x87Handler(regs*)+0x6e>
c0017b93:	90                   	nop
c0017b94:	e8 b7 fc ff ff       	call   c0017850 <Vm::fpuGetLog102()>
c0017b99:	eb 85                	jmp    c0017b20 <Vm::x87Handler(regs*)+0x6e>
c0017b9b:	90                   	nop
c0017b9c:	e8 7f fc ff ff       	call   c0017820 <Vm::fpuGetLogE2()>
c0017ba1:	e9 7a ff ff ff       	jmp    c0017b20 <Vm::x87Handler(regs*)+0x6e>
c0017ba6:	66 90                	xchg   ax,ax
c0017ba8:	8d 50 40             	lea    edx,[eax+0x40]
c0017bab:	80 fa 07             	cmp    dl,0x7
c0017bae:	77 18                	ja     c0017bc8 <Vm::x87Handler(regs*)+0x116>
c0017bb0:	83 ec 0c             	sub    esp,0xc
c0017bb3:	2d c0 00 00 00       	sub    eax,0xc0
c0017bb8:	50                   	push   eax
c0017bb9:	e8 b4 fd ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017bbe:	59                   	pop    ecx
c0017bbf:	5e                   	pop    esi
c0017bc0:	e9 5f ff ff ff       	jmp    c0017b24 <Vm::x87Handler(regs*)+0x72>
c0017bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017bc8:	8d 50 38             	lea    edx,[eax+0x38]
c0017bcb:	80 fa 07             	cmp    dl,0x7
c0017bce:	77 3c                	ja     c0017c0c <Vm::x87Handler(regs*)+0x15a>
c0017bd0:	83 ec 0c             	sub    esp,0xc
c0017bd3:	2d c8 00 00 00       	sub    eax,0xc8
c0017bd8:	50                   	push   eax
c0017bd9:	e8 94 fd ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017bde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017be5:	89 c6                	mov    esi,eax
c0017be7:	89 d7                	mov    edi,edx
c0017be9:	e8 84 fd ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017bee:	83 c4 0c             	add    esp,0xc
c0017bf1:	52                   	push   edx
c0017bf2:	50                   	push   eax
c0017bf3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017bf7:	2d c8 00 00 00       	sub    eax,0xc8
c0017bfc:	50                   	push   eax
c0017bfd:	e8 b3 fd ff ff       	call   c00179b5 <Vm::fpuSetReg(int, unsigned long long)>
c0017c02:	83 c4 0c             	add    esp,0xc
c0017c05:	57                   	push   edi
c0017c06:	56                   	push   esi
c0017c07:	e9 64 ff ff ff       	jmp    c0017b70 <Vm::x87Handler(regs*)+0xbe>
c0017c0c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017c10:	84 d2                	test   dl,dl
c0017c12:	75 10                	jne    c0017c24 <Vm::x87Handler(regs*)+0x172>
c0017c14:	83 ec 0c             	sub    esp,0xc
c0017c17:	ff 36                	push   DWORD PTR [esi]
c0017c19:	e8 8d fa ff ff       	call   c00176ab <Vm::fpu32ToInternal(unsigned int)>
c0017c1e:	e9 c9 00 00 00       	jmp    c0017cec <Vm::x87Handler(regs*)+0x23a>
c0017c23:	90                   	nop
c0017c24:	80 fa 03             	cmp    dl,0x3
c0017c27:	75 13                	jne    c0017c3c <Vm::x87Handler(regs*)+0x18a>
c0017c29:	e8 31 fe ff ff       	call   c0017a5f <Vm::fpuPop()>
c0017c2e:	55                   	push   ebp
c0017c2f:	55                   	push   ebp
c0017c30:	52                   	push   edx
c0017c31:	50                   	push   eax
c0017c32:	e8 0d fa ff ff       	call   c0017644 <Vm::fpuInternalTo32(unsigned long long)>
c0017c37:	e9 90 00 00 00       	jmp    c0017ccc <Vm::x87Handler(regs*)+0x21a>
c0017c3c:	80 fa 05             	cmp    dl,0x5
c0017c3f:	75 0f                	jne    c0017c50 <Vm::x87Handler(regs*)+0x19e>
c0017c41:	66 8b 06             	mov    ax,WORD PTR [esi]
c0017c44:	66 a3 42 98 02 c0    	mov    ds:0xc0029842,ax
c0017c4a:	e9 ed 00 00 00       	jmp    c0017d3c <Vm::x87Handler(regs*)+0x28a>
c0017c4f:	90                   	nop
c0017c50:	31 c0                	xor    eax,eax
c0017c52:	80 fa 07             	cmp    dl,0x7
c0017c55:	0f 85 69 09 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c0017c5b:	66 a1 42 98 02 c0    	mov    ax,ds:0xc0029842
c0017c61:	66 89 06             	mov    WORD PTR [esi],ax
c0017c64:	e9 d3 00 00 00       	jmp    c0017d3c <Vm::x87Handler(regs*)+0x28a>
c0017c69:	8d 76 00             	lea    esi,[esi+0x0]
c0017c6c:	80 fa d8             	cmp    dl,0xd8
c0017c6f:	0f 84 d3 00 00 00    	je     c0017d48 <Vm::x87Handler(regs*)+0x296>
c0017c75:	80 fa dc             	cmp    dl,0xdc
c0017c78:	0f 84 2a 02 00 00    	je     c0017ea8 <Vm::x87Handler(regs*)+0x3f6>
c0017c7e:	80 fa de             	cmp    dl,0xde
c0017c81:	0f 84 f1 02 00 00    	je     c0017f78 <Vm::x87Handler(regs*)+0x4c6>
c0017c87:	80 fa dd             	cmp    dl,0xdd
c0017c8a:	0f 84 94 04 00 00    	je     c0018124 <Vm::x87Handler(regs*)+0x672>
c0017c90:	80 fa da             	cmp    dl,0xda
c0017c93:	0f 84 5f 05 00 00    	je     c00181f8 <Vm::x87Handler(regs*)+0x746>
c0017c99:	80 fa df             	cmp    dl,0xdf
c0017c9c:	0f 84 aa 05 00 00    	je     c001824c <Vm::x87Handler(regs*)+0x79a>
c0017ca2:	31 c0                	xor    eax,eax
c0017ca4:	80 fa db             	cmp    dl,0xdb
c0017ca7:	0f 85 17 09 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c0017cad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017cb1:	80 fa 03             	cmp    dl,0x3
c0017cb4:	0f 85 c2 06 00 00    	jne    c001837c <Vm::x87Handler(regs*)+0x8ca>
c0017cba:	e8 a0 fd ff ff       	call   c0017a5f <Vm::fpuPop()>
c0017cbf:	55                   	push   ebp
c0017cc0:	55                   	push   ebp
c0017cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc4:	52                   	push   edx
c0017cc5:	50                   	push   eax
c0017cc6:	e8 2e fa ff ff       	call   c00176f9 <Vm::fpuFloatToLong(unsigned long long)>
c0017ccb:	90                   	nop
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	89 06                	mov    DWORD PTR [esi],eax
c0017cd1:	eb 69                	jmp    c0017d3c <Vm::x87Handler(regs*)+0x28a>
c0017cd3:	90                   	nop
c0017cd4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017cd8:	84 d2                	test   dl,dl
c0017cda:	0f 85 2c 06 00 00    	jne    c001830c <Vm::x87Handler(regs*)+0x85a>
c0017ce0:	57                   	push   edi
c0017ce1:	57                   	push   edi
c0017ce2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017ce5:	ff 36                	push   DWORD PTR [esi]
c0017ce7:	e8 04 fa ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c0017cec:	5e                   	pop    esi
c0017ced:	5f                   	pop    edi
c0017cee:	52                   	push   edx
c0017cef:	50                   	push   eax
c0017cf0:	e8 0c fd ff ff       	call   c0017a01 <Vm::fpuPush(unsigned long long)>
c0017cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cfc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017cff:	e9 2c fe ff ff       	jmp    c0017b30 <Vm::x87Handler(regs*)+0x7e>
c0017d04:	80 fa 03             	cmp    dl,0x3
c0017d07:	0f 85 2b 07 00 00    	jne    c0018438 <Vm::x87Handler(regs*)+0x986>
c0017d0d:	57                   	push   edi
c0017d0e:	57                   	push   edi
c0017d0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017d12:	ff 36                	push   DWORD PTR [esi]
c0017d14:	e8 d7 f9 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c0017d19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d20:	89 c6                	mov    esi,eax
c0017d22:	89 d7                	mov    edi,edx
c0017d24:	e8 49 fc ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017d29:	57                   	push   edi
c0017d2a:	56                   	push   esi
c0017d2b:	52                   	push   edx
c0017d2c:	50                   	push   eax
c0017d2d:	e8 60 fb ff ff       	call   c0017892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017d32:	83 c4 20             	add    esp,0x20
c0017d35:	e8 25 fd ff ff       	call   c0017a5f <Vm::fpuPop()>
c0017d3a:	66 90                	xchg   ax,ax
c0017d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d40:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017d43:	e9 ec fd ff ff       	jmp    c0017b34 <Vm::x87Handler(regs*)+0x82>
c0017d48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017d4c:	8d 50 40             	lea    edx,[eax+0x40]
c0017d4f:	80 fa 07             	cmp    dl,0x7
c0017d52:	77 2c                	ja     c0017d80 <Vm::x87Handler(regs*)+0x2ce>
c0017d54:	83 ec 0c             	sub    esp,0xc
c0017d57:	2d c0 00 00 00       	sub    eax,0xc0
c0017d5c:	50                   	push   eax
c0017d5d:	e8 10 fc ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017d62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d69:	89 c6                	mov    esi,eax
c0017d6b:	89 d7                	mov    edi,edx
c0017d6d:	e8 00 fc ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017d72:	57                   	push   edi
c0017d73:	56                   	push   esi
c0017d74:	52                   	push   edx
c0017d75:	50                   	push   eax
c0017d76:	e8 6d fb ff ff       	call   c00178e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017d7b:	eb 33                	jmp    c0017db0 <Vm::x87Handler(regs*)+0x2fe>
c0017d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d80:	8d 50 38             	lea    edx,[eax+0x38]
c0017d83:	80 fa 07             	cmp    dl,0x7
c0017d86:	77 30                	ja     c0017db8 <Vm::x87Handler(regs*)+0x306>
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	2d c8 00 00 00       	sub    eax,0xc8
c0017d90:	50                   	push   eax
c0017d91:	e8 dc fb ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017d96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d9d:	89 c6                	mov    esi,eax
c0017d9f:	89 d7                	mov    edi,edx
c0017da1:	e8 cc fb ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017da6:	57                   	push   edi
c0017da7:	56                   	push   esi
c0017da8:	52                   	push   edx
c0017da9:	50                   	push   eax
c0017daa:	e8 72 fb ff ff       	call   c0017921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017daf:	90                   	nop
c0017db0:	83 c4 1c             	add    esp,0x1c
c0017db3:	e9 b4 fd ff ff       	jmp    c0017b6c <Vm::x87Handler(regs*)+0xba>
c0017db8:	8d 50 30             	lea    edx,[eax+0x30]
c0017dbb:	80 fa 07             	cmp    dl,0x7
c0017dbe:	77 10                	ja     c0017dd0 <Vm::x87Handler(regs*)+0x31e>
c0017dc0:	83 ec 0c             	sub    esp,0xc
c0017dc3:	2d d0 00 00 00       	sub    eax,0xd0
c0017dc8:	e9 c3 03 00 00       	jmp    c0018190 <Vm::x87Handler(regs*)+0x6de>
c0017dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd0:	8d 50 28             	lea    edx,[eax+0x28]
c0017dd3:	80 fa 07             	cmp    dl,0x7
c0017dd6:	77 10                	ja     c0017de8 <Vm::x87Handler(regs*)+0x336>
c0017dd8:	83 ec 0c             	sub    esp,0xc
c0017ddb:	2d d8 00 00 00       	sub    eax,0xd8
c0017de0:	e9 e7 03 00 00       	jmp    c00181cc <Vm::x87Handler(regs*)+0x71a>
c0017de5:	8d 76 00             	lea    esi,[esi+0x0]
c0017de8:	8d 50 20             	lea    edx,[eax+0x20]
c0017deb:	80 fa 07             	cmp    dl,0x7
c0017dee:	77 1c                	ja     c0017e0c <Vm::x87Handler(regs*)+0x35a>
c0017df0:	83 ec 0c             	sub    esp,0xc
c0017df3:	2d e0 00 00 00       	sub    eax,0xe0
c0017df8:	50                   	push   eax
c0017df9:	e8 74 fb ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017dfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e05:	89 c6                	mov    esi,eax
c0017e07:	89 d7                	mov    edi,edx
c0017e09:	eb 25                	jmp    c0017e30 <Vm::x87Handler(regs*)+0x37e>
c0017e0b:	90                   	nop
c0017e0c:	8d 50 18             	lea    edx,[eax+0x18]
c0017e0f:	80 fa 07             	cmp    dl,0x7
c0017e12:	77 30                	ja     c0017e44 <Vm::x87Handler(regs*)+0x392>
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	6a 00                	push   0x0
c0017e19:	e8 54 fb ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017e1e:	89 c6                	mov    esi,eax
c0017e20:	89 d7                	mov    edi,edx
c0017e22:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017e26:	2d e8 00 00 00       	sub    eax,0xe8
c0017e2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e2e:	66 90                	xchg   ax,ax
c0017e30:	e8 3d fb ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017e35:	57                   	push   edi
c0017e36:	56                   	push   esi
c0017e37:	52                   	push   edx
c0017e38:	50                   	push   eax
c0017e39:	e8 d4 fa ff ff       	call   c0017912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017e3e:	e9 6d ff ff ff       	jmp    c0017db0 <Vm::x87Handler(regs*)+0x2fe>
c0017e43:	90                   	nop
c0017e44:	8d 50 10             	lea    edx,[eax+0x10]
c0017e47:	80 fa 07             	cmp    dl,0x7
c0017e4a:	77 1c                	ja     c0017e68 <Vm::x87Handler(regs*)+0x3b6>
c0017e4c:	83 ec 0c             	sub    esp,0xc
c0017e4f:	2d f0 00 00 00       	sub    eax,0xf0
c0017e54:	50                   	push   eax
c0017e55:	e8 18 fb ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017e5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e61:	89 c6                	mov    esi,eax
c0017e63:	89 d7                	mov    edi,edx
c0017e65:	eb 25                	jmp    c0017e8c <Vm::x87Handler(regs*)+0x3da>
c0017e67:	90                   	nop
c0017e68:	3c f7                	cmp    al,0xf7
c0017e6a:	0f 86 00 04 00 00    	jbe    c0018270 <Vm::x87Handler(regs*)+0x7be>
c0017e70:	83 ec 0c             	sub    esp,0xc
c0017e73:	6a 00                	push   0x0
c0017e75:	e8 f8 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017e7a:	89 c6                	mov    esi,eax
c0017e7c:	89 d7                	mov    edi,edx
c0017e7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017e82:	2d f8 00 00 00       	sub    eax,0xf8
c0017e87:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e8a:	66 90                	xchg   ax,ax
c0017e8c:	e8 e1 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017e91:	57                   	push   edi
c0017e92:	56                   	push   esi
c0017e93:	52                   	push   edx
c0017e94:	50                   	push   eax
c0017e95:	e8 a6 fa ff ff       	call   c0017940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017e9a:	83 c4 1c             	add    esp,0x1c
c0017e9d:	52                   	push   edx
c0017e9e:	50                   	push   eax
c0017e9f:	6a 00                	push   0x0
c0017ea1:	e9 6a 02 00 00       	jmp    c0018110 <Vm::x87Handler(regs*)+0x65e>
c0017ea6:	66 90                	xchg   ax,ax
c0017ea8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017eac:	8d 50 40             	lea    edx,[eax+0x40]
c0017eaf:	80 fa 07             	cmp    dl,0x7
c0017eb2:	77 38                	ja     c0017eec <Vm::x87Handler(regs*)+0x43a>
c0017eb4:	83 ec 0c             	sub    esp,0xc
c0017eb7:	2d c0 00 00 00       	sub    eax,0xc0
c0017ebc:	50                   	push   eax
c0017ebd:	e8 b0 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017ec2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017ec9:	89 c6                	mov    esi,eax
c0017ecb:	89 d7                	mov    edi,edx
c0017ecd:	e8 a0 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017ed2:	57                   	push   edi
c0017ed3:	56                   	push   esi
c0017ed4:	52                   	push   edx
c0017ed5:	50                   	push   eax
c0017ed6:	e8 0d fa ff ff       	call   c00178e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017edb:	83 c4 1c             	add    esp,0x1c
c0017ede:	52                   	push   edx
c0017edf:	50                   	push   eax
c0017ee0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017ee4:	2d c0 00 00 00       	sub    eax,0xc0
c0017ee9:	eb 41                	jmp    c0017f2c <Vm::x87Handler(regs*)+0x47a>
c0017eeb:	90                   	nop
c0017eec:	8d 50 38             	lea    edx,[eax+0x38]
c0017eef:	80 fa 07             	cmp    dl,0x7
c0017ef2:	77 40                	ja     c0017f34 <Vm::x87Handler(regs*)+0x482>
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	2d c8 00 00 00       	sub    eax,0xc8
c0017efc:	50                   	push   eax
c0017efd:	e8 70 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017f02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f09:	89 c6                	mov    esi,eax
c0017f0b:	89 d7                	mov    edi,edx
c0017f0d:	e8 60 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017f12:	57                   	push   edi
c0017f13:	56                   	push   esi
c0017f14:	52                   	push   edx
c0017f15:	50                   	push   eax
c0017f16:	e8 06 fa ff ff       	call   c0017921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017f1b:	83 c4 1c             	add    esp,0x1c
c0017f1e:	52                   	push   edx
c0017f1f:	50                   	push   eax
c0017f20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f24:	2d c8 00 00 00       	sub    eax,0xc8
c0017f29:	8d 76 00             	lea    esi,[esi+0x0]
c0017f2c:	50                   	push   eax
c0017f2d:	e9 42 fc ff ff       	jmp    c0017b74 <Vm::x87Handler(regs*)+0xc2>
c0017f32:	66 90                	xchg   ax,ax
c0017f34:	83 c0 18             	add    eax,0x18
c0017f37:	3c 07                	cmp    al,0x7
c0017f39:	0f 87 6d 04 00 00    	ja     c00183ac <Vm::x87Handler(regs*)+0x8fa>
c0017f3f:	83 ec 0c             	sub    esp,0xc
c0017f42:	6a 00                	push   0x0
c0017f44:	e8 29 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017f49:	89 c6                	mov    esi,eax
c0017f4b:	89 d7                	mov    edi,edx
c0017f4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f51:	2d e8 00 00 00       	sub    eax,0xe8
c0017f56:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f59:	e8 14 fa ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017f5e:	57                   	push   edi
c0017f5f:	56                   	push   esi
c0017f60:	52                   	push   edx
c0017f61:	50                   	push   eax
c0017f62:	e8 ab f9 ff ff       	call   c0017912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017f67:	83 c4 1c             	add    esp,0x1c
c0017f6a:	52                   	push   edx
c0017f6b:	50                   	push   eax
c0017f6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f70:	2d e8 00 00 00       	sub    eax,0xe8
c0017f75:	eb b5                	jmp    c0017f2c <Vm::x87Handler(regs*)+0x47a>
c0017f77:	90                   	nop
c0017f78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017f7c:	8d 50 40             	lea    edx,[eax+0x40]
c0017f7f:	80 fa 07             	cmp    dl,0x7
c0017f82:	77 3c                	ja     c0017fc0 <Vm::x87Handler(regs*)+0x50e>
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	2d c0 00 00 00       	sub    eax,0xc0
c0017f8c:	50                   	push   eax
c0017f8d:	e8 e0 f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017f92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f99:	89 c6                	mov    esi,eax
c0017f9b:	89 d7                	mov    edi,edx
c0017f9d:	e8 d0 f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017fa2:	57                   	push   edi
c0017fa3:	56                   	push   esi
c0017fa4:	52                   	push   edx
c0017fa5:	50                   	push   eax
c0017fa6:	e8 3d f9 ff ff       	call   c00178e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017fab:	83 c4 1c             	add    esp,0x1c
c0017fae:	52                   	push   edx
c0017faf:	50                   	push   eax
c0017fb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017fb4:	2d c0 00 00 00       	sub    eax,0xc0
c0017fb9:	e9 b2 01 00 00       	jmp    c0018170 <Vm::x87Handler(regs*)+0x6be>
c0017fbe:	66 90                	xchg   ax,ax
c0017fc0:	8d 50 20             	lea    edx,[eax+0x20]
c0017fc3:	80 fa 07             	cmp    dl,0x7
c0017fc6:	77 3c                	ja     c0018004 <Vm::x87Handler(regs*)+0x552>
c0017fc8:	83 ec 0c             	sub    esp,0xc
c0017fcb:	2d e0 00 00 00       	sub    eax,0xe0
c0017fd0:	50                   	push   eax
c0017fd1:	e8 9c f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017fd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017fdd:	89 c6                	mov    esi,eax
c0017fdf:	89 d7                	mov    edi,edx
c0017fe1:	e8 8c f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0017fe6:	57                   	push   edi
c0017fe7:	56                   	push   esi
c0017fe8:	52                   	push   edx
c0017fe9:	50                   	push   eax
c0017fea:	e8 23 f9 ff ff       	call   c0017912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017fef:	83 c4 1c             	add    esp,0x1c
c0017ff2:	52                   	push   edx
c0017ff3:	50                   	push   eax
c0017ff4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017ff8:	2d e0 00 00 00       	sub    eax,0xe0
c0017ffd:	e9 6e 01 00 00       	jmp    c0018170 <Vm::x87Handler(regs*)+0x6be>
c0018002:	66 90                	xchg   ax,ax
c0018004:	8d 50 18             	lea    edx,[eax+0x18]
c0018007:	80 fa 07             	cmp    dl,0x7
c001800a:	77 3c                	ja     c0018048 <Vm::x87Handler(regs*)+0x596>
c001800c:	83 ec 0c             	sub    esp,0xc
c001800f:	6a 00                	push   0x0
c0018011:	e8 5c f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0018016:	89 c6                	mov    esi,eax
c0018018:	89 d7                	mov    edi,edx
c001801a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001801e:	2d e8 00 00 00       	sub    eax,0xe8
c0018023:	89 04 24             	mov    DWORD PTR [esp],eax
c0018026:	e8 47 f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001802b:	57                   	push   edi
c001802c:	56                   	push   esi
c001802d:	52                   	push   edx
c001802e:	50                   	push   eax
c001802f:	e8 de f8 ff ff       	call   c0017912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018034:	83 c4 1c             	add    esp,0x1c
c0018037:	52                   	push   edx
c0018038:	50                   	push   eax
c0018039:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001803d:	2d e8 00 00 00       	sub    eax,0xe8
c0018042:	e9 29 01 00 00       	jmp    c0018170 <Vm::x87Handler(regs*)+0x6be>
c0018047:	90                   	nop
c0018048:	8d 50 38             	lea    edx,[eax+0x38]
c001804b:	80 fa 07             	cmp    dl,0x7
c001804e:	77 3c                	ja     c001808c <Vm::x87Handler(regs*)+0x5da>
c0018050:	83 ec 0c             	sub    esp,0xc
c0018053:	2d c8 00 00 00       	sub    eax,0xc8
c0018058:	50                   	push   eax
c0018059:	e8 14 f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001805e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018065:	89 c6                	mov    esi,eax
c0018067:	89 d7                	mov    edi,edx
c0018069:	e8 04 f9 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001806e:	57                   	push   edi
c001806f:	56                   	push   esi
c0018070:	52                   	push   edx
c0018071:	50                   	push   eax
c0018072:	e8 aa f8 ff ff       	call   c0017921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018077:	83 c4 1c             	add    esp,0x1c
c001807a:	52                   	push   edx
c001807b:	50                   	push   eax
c001807c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018080:	2d c8 00 00 00       	sub    eax,0xc8
c0018085:	e9 82 00 00 00       	jmp    c001810c <Vm::x87Handler(regs*)+0x65a>
c001808a:	66 90                	xchg   ax,ax
c001808c:	3c f7                	cmp    al,0xf7
c001808e:	76 38                	jbe    c00180c8 <Vm::x87Handler(regs*)+0x616>
c0018090:	83 ec 0c             	sub    esp,0xc
c0018093:	6a 00                	push   0x0
c0018095:	e8 d8 f8 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001809a:	89 c6                	mov    esi,eax
c001809c:	89 d7                	mov    edi,edx
c001809e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00180a2:	2d f8 00 00 00       	sub    eax,0xf8
c00180a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00180aa:	e8 c3 f8 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00180af:	57                   	push   edi
c00180b0:	56                   	push   esi
c00180b1:	52                   	push   edx
c00180b2:	50                   	push   eax
c00180b3:	e8 88 f8 ff ff       	call   c0017940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00180b8:	83 c4 1c             	add    esp,0x1c
c00180bb:	52                   	push   edx
c00180bc:	50                   	push   eax
c00180bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00180c1:	2d f8 00 00 00       	sub    eax,0xf8
c00180c6:	eb 44                	jmp    c001810c <Vm::x87Handler(regs*)+0x65a>
c00180c8:	8d 50 10             	lea    edx,[eax+0x10]
c00180cb:	80 fa 07             	cmp    dl,0x7
c00180ce:	0f 87 6c 01 00 00    	ja     c0018240 <Vm::x87Handler(regs*)+0x78e>
c00180d4:	83 ec 0c             	sub    esp,0xc
c00180d7:	2d f0 00 00 00       	sub    eax,0xf0
c00180dc:	50                   	push   eax
c00180dd:	e8 90 f8 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00180e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00180e9:	89 c6                	mov    esi,eax
c00180eb:	89 d7                	mov    edi,edx
c00180ed:	e8 80 f8 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00180f2:	57                   	push   edi
c00180f3:	56                   	push   esi
c00180f4:	52                   	push   edx
c00180f5:	50                   	push   eax
c00180f6:	e8 45 f8 ff ff       	call   c0017940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00180fb:	83 c4 1c             	add    esp,0x1c
c00180fe:	52                   	push   edx
c00180ff:	50                   	push   eax
c0018100:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018104:	2d f0 00 00 00       	sub    eax,0xf0
c0018109:	8d 76 00             	lea    esi,[esi+0x0]
c001810c:	50                   	push   eax
c001810d:	8d 76 00             	lea    esi,[esi+0x0]
c0018110:	e8 a0 f8 ff ff       	call   c00179b5 <Vm::fpuSetReg(int, unsigned long long)>
c0018115:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018119:	e8 41 f9 ff ff       	call   c0017a5f <Vm::fpuPop()>
c001811e:	e9 0d fa ff ff       	jmp    c0017b30 <Vm::x87Handler(regs*)+0x7e>
c0018123:	90                   	nop
c0018124:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018128:	8d 50 30             	lea    edx,[eax+0x30]
c001812b:	80 fa 07             	cmp    dl,0x7
c001812e:	77 20                	ja     c0018150 <Vm::x87Handler(regs*)+0x69e>
c0018130:	83 ec 0c             	sub    esp,0xc
c0018133:	6a 00                	push   0x0
c0018135:	e8 38 f8 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001813a:	83 c4 0c             	add    esp,0xc
c001813d:	52                   	push   edx
c001813e:	50                   	push   eax
c001813f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018143:	2d d0 00 00 00       	sub    eax,0xd0
c0018148:	e9 df fd ff ff       	jmp    c0017f2c <Vm::x87Handler(regs*)+0x47a>
c001814d:	8d 76 00             	lea    esi,[esi+0x0]
c0018150:	8d 50 28             	lea    edx,[eax+0x28]
c0018153:	80 fa 07             	cmp    dl,0x7
c0018156:	77 28                	ja     c0018180 <Vm::x87Handler(regs*)+0x6ce>
c0018158:	83 ec 0c             	sub    esp,0xc
c001815b:	6a 00                	push   0x0
c001815d:	e8 10 f8 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0018162:	83 c4 0c             	add    esp,0xc
c0018165:	52                   	push   edx
c0018166:	50                   	push   eax
c0018167:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001816b:	2d d8 00 00 00       	sub    eax,0xd8
c0018170:	50                   	push   eax
c0018171:	e8 3f f8 ff ff       	call   c00179b5 <Vm::fpuSetReg(int, unsigned long long)>
c0018176:	e8 e4 f8 ff ff       	call   c0017a5f <Vm::fpuPop()>
c001817b:	e9 ac f9 ff ff       	jmp    c0017b2c <Vm::x87Handler(regs*)+0x7a>
c0018180:	8d 50 20             	lea    edx,[eax+0x20]
c0018183:	80 fa 07             	cmp    dl,0x7
c0018186:	77 30                	ja     c00181b8 <Vm::x87Handler(regs*)+0x706>
c0018188:	83 ec 0c             	sub    esp,0xc
c001818b:	2d e0 00 00 00       	sub    eax,0xe0
c0018190:	50                   	push   eax
c0018191:	e8 dc f7 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0018196:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001819d:	89 c6                	mov    esi,eax
c001819f:	89 d7                	mov    edi,edx
c00181a1:	e8 cc f7 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00181a6:	57                   	push   edi
c00181a7:	56                   	push   esi
c00181a8:	52                   	push   edx
c00181a9:	50                   	push   eax
c00181aa:	e8 e3 f6 ff ff       	call   c0017892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00181af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00181b3:	e9 78 02 00 00       	jmp    c0018430 <Vm::x87Handler(regs*)+0x97e>
c00181b8:	8d 50 18             	lea    edx,[eax+0x18]
c00181bb:	80 fa 07             	cmp    dl,0x7
c00181be:	0f 87 10 fb ff ff    	ja     c0017cd4 <Vm::x87Handler(regs*)+0x222>
c00181c4:	83 ec 0c             	sub    esp,0xc
c00181c7:	2d e8 00 00 00       	sub    eax,0xe8
c00181cc:	50                   	push   eax
c00181cd:	e8 a0 f7 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00181d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00181d9:	89 c6                	mov    esi,eax
c00181db:	89 d7                	mov    edi,edx
c00181dd:	e8 90 f7 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00181e2:	57                   	push   edi
c00181e3:	56                   	push   esi
c00181e4:	52                   	push   edx
c00181e5:	50                   	push   eax
c00181e6:	e8 a7 f6 ff ff       	call   c0017892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00181eb:	83 c4 20             	add    esp,0x20
c00181ee:	e8 6c f8 ff ff       	call   c0017a5f <Vm::fpuPop()>
c00181f3:	eb 6f                	jmp    c0018264 <Vm::x87Handler(regs*)+0x7b2>
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]
c00181f8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00181fc:	0f 85 22 01 00 00    	jne    c0018324 <Vm::x87Handler(regs*)+0x872>
c0018202:	66 90                	xchg   ax,ax
c0018204:	83 ec 0c             	sub    esp,0xc
c0018207:	6a 01                	push   0x1
c0018209:	e8 64 f7 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001820e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018215:	89 c6                	mov    esi,eax
c0018217:	89 d7                	mov    edi,edx
c0018219:	e8 54 f7 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001821e:	57                   	push   edi
c001821f:	56                   	push   esi
c0018220:	52                   	push   edx
c0018221:	50                   	push   eax
c0018222:	e8 6b f6 ff ff       	call   c0017892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018227:	83 c4 20             	add    esp,0x20
c001822a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001822e:	e8 2c f8 ff ff       	call   c0017a5f <Vm::fpuPop()>
c0018233:	e8 27 f8 ff ff       	call   c0017a5f <Vm::fpuPop()>
c0018238:	e9 f7 f8 ff ff       	jmp    c0017b34 <Vm::x87Handler(regs*)+0x82>
c001823d:	8d 76 00             	lea    esi,[esi+0x0]
c0018240:	3c d9                	cmp    al,0xd9
c0018242:	0f 85 e8 02 00 00    	jne    c0018530 <Vm::x87Handler(regs*)+0xa7e>
c0018248:	eb ba                	jmp    c0018204 <Vm::x87Handler(regs*)+0x752>
c001824a:	66 90                	xchg   ax,ax
c001824c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0018250:	0f 85 2a 03 00 00    	jne    c0018580 <Vm::x87Handler(regs*)+0xace>
c0018256:	0f b7 05 40 98 02 c0 	movzx  eax,WORD PTR ds:0xc0029840
c001825d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0018261:	8d 76 00             	lea    esi,[esi+0x0]
c0018264:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018268:	e9 c7 f8 ff ff       	jmp    c0017b34 <Vm::x87Handler(regs*)+0x82>
c001826d:	8d 76 00             	lea    esi,[esi+0x0]
c0018270:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018274:	84 d2                	test   dl,dl
c0018276:	75 10                	jne    c0018288 <Vm::x87Handler(regs*)+0x7d6>
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	ff 36                	push   DWORD PTR [esi]
c001827d:	e8 29 f4 ff ff       	call   c00176ab <Vm::fpu32ToInternal(unsigned int)>
c0018282:	e9 39 01 00 00       	jmp    c00183c0 <Vm::x87Handler(regs*)+0x90e>
c0018287:	90                   	nop
c0018288:	80 fa 01             	cmp    dl,0x1
c001828b:	75 0f                	jne    c001829c <Vm::x87Handler(regs*)+0x7ea>
c001828d:	83 ec 0c             	sub    esp,0xc
c0018290:	ff 36                	push   DWORD PTR [esi]
c0018292:	e8 14 f4 ff ff       	call   c00176ab <Vm::fpu32ToInternal(unsigned int)>
c0018297:	e9 b4 02 00 00       	jmp    c0018550 <Vm::x87Handler(regs*)+0xa9e>
c001829c:	80 fa 04             	cmp    dl,0x4
c001829f:	75 0f                	jne    c00182b0 <Vm::x87Handler(regs*)+0x7fe>
c00182a1:	83 ec 0c             	sub    esp,0xc
c00182a4:	ff 36                	push   DWORD PTR [esi]
c00182a6:	e8 00 f4 ff ff       	call   c00176ab <Vm::fpu32ToInternal(unsigned int)>
c00182ab:	e9 9c 01 00 00       	jmp    c001844c <Vm::x87Handler(regs*)+0x99a>
c00182b0:	80 fa 05             	cmp    dl,0x5
c00182b3:	75 1b                	jne    c00182d0 <Vm::x87Handler(regs*)+0x81e>
c00182b5:	83 ec 0c             	sub    esp,0xc
c00182b8:	6a 00                	push   0x0
c00182ba:	e8 b3 f6 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00182bf:	89 c7                	mov    edi,eax
c00182c1:	89 d5                	mov    ebp,edx
c00182c3:	58                   	pop    eax
c00182c4:	ff 36                	push   DWORD PTR [esi]
c00182c6:	e8 e0 f3 ff ff       	call   c00176ab <Vm::fpu32ToInternal(unsigned int)>
c00182cb:	e9 bc 01 00 00       	jmp    c001848c <Vm::x87Handler(regs*)+0x9da>
c00182d0:	80 fa 06             	cmp    dl,0x6
c00182d3:	75 0f                	jne    c00182e4 <Vm::x87Handler(regs*)+0x832>
c00182d5:	83 ec 0c             	sub    esp,0xc
c00182d8:	ff 36                	push   DWORD PTR [esi]
c00182da:	e8 cc f3 ff ff       	call   c00176ab <Vm::fpu32ToInternal(unsigned int)>
c00182df:	e9 cc 01 00 00       	jmp    c00184b0 <Vm::x87Handler(regs*)+0x9fe>
c00182e4:	31 c0                	xor    eax,eax
c00182e6:	80 fa 07             	cmp    dl,0x7
c00182e9:	0f 85 d5 02 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c00182ef:	83 ec 0c             	sub    esp,0xc
c00182f2:	6a 00                	push   0x0
c00182f4:	e8 79 f6 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00182f9:	89 c7                	mov    edi,eax
c00182fb:	89 d5                	mov    ebp,edx
c00182fd:	58                   	pop    eax
c00182fe:	ff 36                	push   DWORD PTR [esi]
c0018300:	e8 a6 f3 ff ff       	call   c00176ab <Vm::fpu32ToInternal(unsigned int)>
c0018305:	e9 ee 01 00 00       	jmp    c00184f8 <Vm::x87Handler(regs*)+0xa46>
c001830a:	66 90                	xchg   ax,ax
c001830c:	80 fa 03             	cmp    dl,0x3
c001830f:	0f 85 f7 01 00 00    	jne    c001850c <Vm::x87Handler(regs*)+0xa5a>
c0018315:	e8 45 f7 ff ff       	call   c0017a5f <Vm::fpuPop()>
c001831a:	51                   	push   ecx
c001831b:	51                   	push   ecx
c001831c:	e9 03 02 00 00       	jmp    c0018524 <Vm::x87Handler(regs*)+0xa72>
c0018321:	8d 76 00             	lea    esi,[esi+0x0]
c0018324:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018328:	80 fa 01             	cmp    dl,0x1
c001832b:	75 0b                	jne    c0018338 <Vm::x87Handler(regs*)+0x886>
c001832d:	57                   	push   edi
c001832e:	57                   	push   edi
c001832f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018331:	e9 0e 02 00 00       	jmp    c0018544 <Vm::x87Handler(regs*)+0xa92>
c0018336:	66 90                	xchg   ax,ax
c0018338:	80 fa 04             	cmp    dl,0x4
c001833b:	75 13                	jne    c0018350 <Vm::x87Handler(regs*)+0x89e>
c001833d:	31 d2                	xor    edx,edx
c001833f:	51                   	push   ecx
c0018340:	51                   	push   ecx
c0018341:	8b 06                	mov    eax,DWORD PTR [esi]
c0018343:	52                   	push   edx
c0018344:	50                   	push   eax
c0018345:	e8 4a f4 ff ff       	call   c0017794 <Vm::fpuLongToFloat(long long)>
c001834a:	e9 fd 00 00 00       	jmp    c001844c <Vm::x87Handler(regs*)+0x99a>
c001834f:	90                   	nop
c0018350:	31 c0                	xor    eax,eax
c0018352:	80 fa 07             	cmp    dl,0x7
c0018355:	0f 85 69 02 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c001835b:	83 ec 0c             	sub    esp,0xc
c001835e:	6a 00                	push   0x0
c0018360:	e8 0d f6 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0018365:	89 c7                	mov    edi,eax
c0018367:	89 d5                	mov    ebp,edx
c0018369:	58                   	pop    eax
c001836a:	8b 06                	mov    eax,DWORD PTR [esi]
c001836c:	5a                   	pop    edx
c001836d:	31 d2                	xor    edx,edx
c001836f:	52                   	push   edx
c0018370:	50                   	push   eax
c0018371:	e8 1e f4 ff ff       	call   c0017794 <Vm::fpuLongToFloat(long long)>
c0018376:	e9 7d 01 00 00       	jmp    c00184f8 <Vm::x87Handler(regs*)+0xa46>
c001837b:	90                   	nop
c001837c:	84 d2                	test   dl,dl
c001837e:	75 10                	jne    c0018390 <Vm::x87Handler(regs*)+0x8de>
c0018380:	31 d2                	xor    edx,edx
c0018382:	55                   	push   ebp
c0018383:	55                   	push   ebp
c0018384:	8b 06                	mov    eax,DWORD PTR [esi]
c0018386:	52                   	push   edx
c0018387:	50                   	push   eax
c0018388:	e9 03 02 00 00       	jmp    c0018590 <Vm::x87Handler(regs*)+0xade>
c001838d:	8d 76 00             	lea    esi,[esi+0x0]
c0018390:	31 c0                	xor    eax,eax
c0018392:	80 fa 02             	cmp    dl,0x2
c0018395:	0f 85 29 02 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c001839b:	83 ec 0c             	sub    esp,0xc
c001839e:	6a 00                	push   0x0
c00183a0:	e8 cd f5 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00183a5:	59                   	pop    ecx
c00183a6:	5f                   	pop    edi
c00183a7:	e9 18 f9 ff ff       	jmp    c0017cc4 <Vm::x87Handler(regs*)+0x212>
c00183ac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00183b0:	84 d2                	test   dl,dl
c00183b2:	75 2c                	jne    c00183e0 <Vm::x87Handler(regs*)+0x92e>
c00183b4:	50                   	push   eax
c00183b5:	50                   	push   eax
c00183b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00183b9:	ff 36                	push   DWORD PTR [esi]
c00183bb:	e8 30 f3 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c00183c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00183c7:	89 c6                	mov    esi,eax
c00183c9:	89 d7                	mov    edi,edx
c00183cb:	e8 a2 f5 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00183d0:	57                   	push   edi
c00183d1:	56                   	push   esi
c00183d2:	52                   	push   edx
c00183d3:	50                   	push   eax
c00183d4:	e8 0f f5 ff ff       	call   c00178e8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00183d9:	e9 8e 01 00 00       	jmp    c001856c <Vm::x87Handler(regs*)+0xaba>
c00183de:	66 90                	xchg   ax,ax
c00183e0:	80 fa 01             	cmp    dl,0x1
c00183e3:	75 13                	jne    c00183f8 <Vm::x87Handler(regs*)+0x946>
c00183e5:	50                   	push   eax
c00183e6:	50                   	push   eax
c00183e7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00183ea:	ff 36                	push   DWORD PTR [esi]
c00183ec:	e8 ff f2 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c00183f1:	e9 5a 01 00 00       	jmp    c0018550 <Vm::x87Handler(regs*)+0xa9e>
c00183f6:	66 90                	xchg   ax,ax
c00183f8:	80 fa 02             	cmp    dl,0x2
c00183fb:	0f 85 03 f9 ff ff    	jne    c0017d04 <Vm::x87Handler(regs*)+0x252>
c0018401:	55                   	push   ebp
c0018402:	55                   	push   ebp
c0018403:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018406:	ff 36                	push   DWORD PTR [esi]
c0018408:	e8 e3 f2 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c001840d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018414:	89 c6                	mov    esi,eax
c0018416:	89 d7                	mov    edi,edx
c0018418:	e8 55 f5 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001841d:	57                   	push   edi
c001841e:	56                   	push   esi
c001841f:	52                   	push   edx
c0018420:	50                   	push   eax
c0018421:	e8 6c f4 ff ff       	call   c0017892 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001842a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001842d:	8d 76 00             	lea    esi,[esi+0x0]
c0018430:	83 c4 20             	add    esp,0x20
c0018433:	e9 fc f6 ff ff       	jmp    c0017b34 <Vm::x87Handler(regs*)+0x82>
c0018438:	80 fa 04             	cmp    dl,0x4
c001843b:	75 2f                	jne    c001846c <Vm::x87Handler(regs*)+0x9ba>
c001843d:	51                   	push   ecx
c001843e:	51                   	push   ecx
c001843f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018442:	ff 36                	push   DWORD PTR [esi]
c0018444:	e8 a7 f2 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c0018449:	8d 76 00             	lea    esi,[esi+0x0]
c001844c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018453:	89 c6                	mov    esi,eax
c0018455:	89 d7                	mov    edi,edx
c0018457:	e8 16 f5 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001845c:	57                   	push   edi
c001845d:	56                   	push   esi
c001845e:	52                   	push   edx
c001845f:	50                   	push   eax
c0018460:	e8 ad f4 ff ff       	call   c0017912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018465:	e9 02 01 00 00       	jmp    c001856c <Vm::x87Handler(regs*)+0xaba>
c001846a:	66 90                	xchg   ax,ax
c001846c:	80 fa 05             	cmp    dl,0x5
c001846f:	75 2b                	jne    c001849c <Vm::x87Handler(regs*)+0x9ea>
c0018471:	83 ec 0c             	sub    esp,0xc
c0018474:	6a 00                	push   0x0
c0018476:	e8 f7 f4 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c001847b:	89 c7                	mov    edi,eax
c001847d:	89 d5                	mov    ebp,edx
c001847f:	58                   	pop    eax
c0018480:	5a                   	pop    edx
c0018481:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018484:	ff 36                	push   DWORD PTR [esi]
c0018486:	e8 65 f2 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c001848b:	90                   	nop
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	55                   	push   ebp
c0018490:	57                   	push   edi
c0018491:	52                   	push   edx
c0018492:	50                   	push   eax
c0018493:	e8 7a f4 ff ff       	call   c0017912 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018498:	eb 6a                	jmp    c0018504 <Vm::x87Handler(regs*)+0xa52>
c001849a:	66 90                	xchg   ax,ax
c001849c:	80 fa 06             	cmp    dl,0x6
c001849f:	75 2f                	jne    c00184d0 <Vm::x87Handler(regs*)+0xa1e>
c00184a1:	51                   	push   ecx
c00184a2:	51                   	push   ecx
c00184a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00184a6:	ff 36                	push   DWORD PTR [esi]
c00184a8:	e8 43 f2 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c00184ad:	8d 76 00             	lea    esi,[esi+0x0]
c00184b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00184b7:	89 c6                	mov    esi,eax
c00184b9:	89 d7                	mov    edi,edx
c00184bb:	e8 b2 f4 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00184c0:	57                   	push   edi
c00184c1:	56                   	push   esi
c00184c2:	52                   	push   edx
c00184c3:	50                   	push   eax
c00184c4:	e8 77 f4 ff ff       	call   c0017940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00184c9:	e9 9e 00 00 00       	jmp    c001856c <Vm::x87Handler(regs*)+0xaba>
c00184ce:	66 90                	xchg   ax,ax
c00184d0:	31 c0                	xor    eax,eax
c00184d2:	80 fa 07             	cmp    dl,0x7
c00184d5:	0f 85 e9 00 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c00184db:	83 ec 0c             	sub    esp,0xc
c00184de:	6a 00                	push   0x0
c00184e0:	e8 8d f4 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c00184e5:	89 c7                	mov    edi,eax
c00184e7:	89 d5                	mov    ebp,edx
c00184e9:	58                   	pop    eax
c00184ea:	5a                   	pop    edx
c00184eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00184ee:	ff 36                	push   DWORD PTR [esi]
c00184f0:	e8 fb f1 ff ff       	call   c00176f0 <Vm::fpu64ToInternal(unsigned long long)>
c00184f5:	8d 76 00             	lea    esi,[esi+0x0]
c00184f8:	83 c4 10             	add    esp,0x10
c00184fb:	55                   	push   ebp
c00184fc:	57                   	push   edi
c00184fd:	52                   	push   edx
c00184fe:	50                   	push   eax
c00184ff:	e8 3c f4 ff ff       	call   c0017940 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018504:	83 c4 0c             	add    esp,0xc
c0018507:	eb 67                	jmp    c0018570 <Vm::x87Handler(regs*)+0xabe>
c0018509:	8d 76 00             	lea    esi,[esi+0x0]
c001850c:	31 c0                	xor    eax,eax
c001850e:	80 fa 02             	cmp    dl,0x2
c0018511:	0f 85 ad 00 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c0018517:	83 ec 0c             	sub    esp,0xc
c001851a:	6a 00                	push   0x0
c001851c:	e8 51 f4 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0018521:	59                   	pop    ecx
c0018522:	5f                   	pop    edi
c0018523:	90                   	nop
c0018524:	52                   	push   edx
c0018525:	50                   	push   eax
c0018526:	e8 77 f1 ff ff       	call   c00176a2 <Vm::fpuInternalTo64(unsigned long long)>
c001852b:	e9 84 00 00 00       	jmp    c00185b4 <Vm::x87Handler(regs*)+0xb02>
c0018530:	31 c0                	xor    eax,eax
c0018532:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0018537:	0f 85 87 00 00 00    	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c001853d:	50                   	push   eax
c001853e:	50                   	push   eax
c001853f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0018542:	66 90                	xchg   ax,ax
c0018544:	31 d2                	xor    edx,edx
c0018546:	52                   	push   edx
c0018547:	50                   	push   eax
c0018548:	e8 47 f2 ff ff       	call   c0017794 <Vm::fpuLongToFloat(long long)>
c001854d:	8d 76 00             	lea    esi,[esi+0x0]
c0018550:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018557:	89 c6                	mov    esi,eax
c0018559:	89 d7                	mov    edi,edx
c001855b:	e8 12 f4 ff ff       	call   c0017972 <Vm::fpuGetReg(int)>
c0018560:	57                   	push   edi
c0018561:	56                   	push   esi
c0018562:	52                   	push   edx
c0018563:	50                   	push   eax
c0018564:	e8 b8 f3 ff ff       	call   c0017921 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018569:	8d 76 00             	lea    esi,[esi+0x0]
c001856c:	83 c4 1c             	add    esp,0x1c
c001856f:	90                   	nop
c0018570:	52                   	push   edx
c0018571:	50                   	push   eax
c0018572:	6a 00                	push   0x0
c0018574:	e8 3c f4 ff ff       	call   c00179b5 <Vm::fpuSetReg(int, unsigned long long)>
c0018579:	e9 7a f7 ff ff       	jmp    c0017cf8 <Vm::x87Handler(regs*)+0x246>
c001857e:	66 90                	xchg   ax,ax
c0018580:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018584:	80 fa 05             	cmp    dl,0x5
c0018587:	75 13                	jne    c001859c <Vm::x87Handler(regs*)+0xaea>
c0018589:	55                   	push   ebp
c001858a:	55                   	push   ebp
c001858b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001858e:	ff 36                	push   DWORD PTR [esi]
c0018590:	e8 c3 f1 ff ff       	call   c0017758 <Vm::fpuULongToFloat(unsigned long long)>
c0018595:	e9 52 f7 ff ff       	jmp    c0017cec <Vm::x87Handler(regs*)+0x23a>
c001859a:	66 90                	xchg   ax,ax
c001859c:	31 c0                	xor    eax,eax
c001859e:	80 fa 07             	cmp    dl,0x7
c00185a1:	75 21                	jne    c00185c4 <Vm::x87Handler(regs*)+0xb12>
c00185a3:	e8 b7 f4 ff ff       	call   c0017a5f <Vm::fpuPop()>
c00185a8:	51                   	push   ecx
c00185a9:	51                   	push   ecx
c00185aa:	52                   	push   edx
c00185ab:	50                   	push   eax
c00185ac:	e8 48 f1 ff ff       	call   c00176f9 <Vm::fpuFloatToLong(unsigned long long)>
c00185b1:	8d 76 00             	lea    esi,[esi+0x0]
c00185b4:	83 c4 10             	add    esp,0x10
c00185b7:	89 06                	mov    DWORD PTR [esi],eax
c00185b9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00185bc:	e9 7b f7 ff ff       	jmp    c0017d3c <Vm::x87Handler(regs*)+0x28a>
c00185c1:	8d 76 00             	lea    esi,[esi+0x0]
c00185c4:	83 c4 1c             	add    esp,0x1c
c00185c7:	5b                   	pop    ebx
c00185c8:	5e                   	pop    esi
c00185c9:	5f                   	pop    edi
c00185ca:	5d                   	pop    ebp
c00185cb:	c3                   	ret    

c00185cc <__static_initialization_and_destruction_0(int, int)>:
c00185cc:	83 ec 0c             	sub    esp,0xc
c00185cf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00185d4:	75 1a                	jne    c00185f0 <__static_initialization_and_destruction_0(int, int)+0x24>
c00185d6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00185de:	75 10                	jne    c00185f0 <__static_initialization_and_destruction_0(int, int)+0x24>
c00185e0:	83 ec 0c             	sub    esp,0xc
c00185e3:	68 40 98 02 c0       	push   0xc0029840
c00185e8:	e8 f7 97 00 00       	call   c0021de4 <Vm::_FPUState::_FPUState()>
c00185ed:	83 c4 10             	add    esp,0x10
c00185f0:	90                   	nop
c00185f1:	83 c4 0c             	add    esp,0xc
c00185f4:	c3                   	ret    
c00185f5:	8d 76 00             	lea    esi,[esi+0x0]

c00185f8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	83 ec 08             	sub    esp,0x8
c00185fe:	68 ff ff 00 00       	push   0xffff
c0018603:	6a 01                	push   0x1
c0018605:	e8 c2 ff ff ff       	call   c00185cc <__static_initialization_and_destruction_0(int, int)>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	83 c4 0c             	add    esp,0xc
c0018610:	c3                   	ret    

c0018611 <Hal::noCopro(unsigned long)>:
c0018611:	c3                   	ret    

c0018612 <Hal::noTSC()>:
c0018612:	31 c0                	xor    eax,eax
c0018614:	31 d2                	xor    edx,edx
c0018616:	c3                   	ret    

c0018617 <Hal::readTSC()>:
c0018617:	0f 31                	rdtsc  
c0018619:	c3                   	ret    

c001861a <nmiHandler(regs*, void*)>:
c001861a:	83 ec 0c             	sub    esp,0xc
c001861d:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0018622:	83 ec 0c             	sub    esp,0xc
c0018625:	50                   	push   eax
c0018626:	e8 13 09 ff ff       	call   c0008f3e <Computer::handleNMI()>
c001862b:	83 c4 10             	add    esp,0x10
c001862e:	90                   	nop
c001862f:	83 c4 0c             	add    esp,0xc
c0018632:	c3                   	ret    

c0018633 <doubleFault(regs*, void*)>:
c0018633:	55                   	push   ebp
c0018634:	89 e5                	mov    ebp,esp
c0018636:	83 ec 08             	sub    esp,0x8
c0018639:	83 ec 0c             	sub    esp,0xc
c001863c:	68 78 47 02 c0       	push   0xc0024778
c0018641:	e8 09 a4 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0018646:	83 c4 10             	add    esp,0x10
c0018649:	90                   	nop
c001864a:	c9                   	leave  
c001864b:	c3                   	ret    

c001864c <displayDebugInfo(regs*)>:
c001864c:	53                   	push   ebx
c001864d:	83 ec 38             	sub    esp,0x38
c0018650:	0f 20 c0             	mov    eax,cr0
c0018653:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018657:	0f 20 d0             	mov    eax,cr2
c001865a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001865e:	0f 20 d8             	mov    eax,cr3
c0018661:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018665:	0f 20 e0             	mov    eax,cr4
c0018668:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001866c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018670:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018673:	83 ec 08             	sub    esp,0x8
c0018676:	50                   	push   eax
c0018677:	68 85 47 02 c0       	push   0xc0024785
c001867c:	e8 64 40 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018681:	83 c4 10             	add    esp,0x10
c0018684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018688:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001868b:	83 ec 08             	sub    esp,0x8
c001868e:	50                   	push   eax
c001868f:	68 90 47 02 c0       	push   0xc0024790
c0018694:	e8 4c 40 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186a0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00186a3:	83 ec 08             	sub    esp,0x8
c00186a6:	50                   	push   eax
c00186a7:	68 9b 47 02 c0       	push   0xc002479b
c00186ac:	e8 34 40 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186b8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00186bb:	83 ec 08             	sub    esp,0x8
c00186be:	50                   	push   eax
c00186bf:	68 a6 47 02 c0       	push   0xc00247a6
c00186c4:	e8 1c 40 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00186c9:	83 c4 10             	add    esp,0x10
c00186cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00186d3:	83 ec 08             	sub    esp,0x8
c00186d6:	50                   	push   eax
c00186d7:	68 b1 47 02 c0       	push   0xc00247b1
c00186dc:	e8 04 40 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00186e1:	83 c4 10             	add    esp,0x10
c00186e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00186eb:	83 ec 08             	sub    esp,0x8
c00186ee:	50                   	push   eax
c00186ef:	68 bc 47 02 c0       	push   0xc00247bc
c00186f4:	e8 ec 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018700:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018703:	83 ec 08             	sub    esp,0x8
c0018706:	50                   	push   eax
c0018707:	68 d6 47 02 c0       	push   0xc00247d6
c001870c:	e8 d4 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018718:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001871b:	83 ec 08             	sub    esp,0x8
c001871e:	50                   	push   eax
c001871f:	68 c7 47 02 c0       	push   0xc00247c7
c0018724:	e8 bc 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018730:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018733:	83 ec 08             	sub    esp,0x8
c0018736:	50                   	push   eax
c0018737:	68 d2 47 02 c0       	push   0xc00247d2
c001873c:	e8 a4 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018748:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001874b:	83 ec 08             	sub    esp,0x8
c001874e:	50                   	push   eax
c001874f:	68 e1 47 02 c0       	push   0xc00247e1
c0018754:	e8 8c 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018759:	83 c4 10             	add    esp,0x10
c001875c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018760:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018763:	83 ec 08             	sub    esp,0x8
c0018766:	50                   	push   eax
c0018767:	68 ec 47 02 c0       	push   0xc00247ec
c001876c:	e8 74 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018771:	83 c4 10             	add    esp,0x10
c0018774:	83 ec 08             	sub    esp,0x8
c0018777:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001877b:	68 f7 47 02 c0       	push   0xc00247f7
c0018780:	e8 60 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018785:	83 c4 10             	add    esp,0x10
c0018788:	83 ec 08             	sub    esp,0x8
c001878b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878f:	68 02 48 02 c0       	push   0xc0024802
c0018794:	e8 4c 3f ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018799:	83 c4 10             	add    esp,0x10
c001879c:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00187a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00187a7:	83 ec 0c             	sub    esp,0xc
c00187aa:	50                   	push   eax
c00187ab:	e8 b9 1d ff ff       	call   c000a569 <setActiveTerminal(VgaText*)>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00187b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00187be:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00187c2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00187c5:	c1 e2 05             	shl    edx,0x5
c00187c8:	81 c2 60 5a 02 c0    	add    edx,0xc0025a60
c00187ce:	83 ec 08             	sub    esp,0x8
c00187d1:	52                   	push   edx
c00187d2:	50                   	push   eax
c00187d3:	e8 d0 20 ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c00187d8:	83 c4 10             	add    esp,0x10
c00187db:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00187e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00187e6:	83 ec 08             	sub    esp,0x8
c00187e9:	68 0d 48 02 c0       	push   0xc002480d
c00187ee:	50                   	push   eax
c00187ef:	e8 b4 20 ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c00187f4:	83 c4 10             	add    esp,0x10
c00187f7:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00187fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018802:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018807:	8b 12                	mov    edx,DWORD PTR [edx]
c0018809:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001880c:	83 c2 0c             	add    edx,0xc
c001880f:	83 ec 08             	sub    esp,0x8
c0018812:	52                   	push   edx
c0018813:	50                   	push   eax
c0018814:	e8 8f 20 ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018821:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018827:	83 ec 08             	sub    esp,0x8
c001882a:	68 16 48 02 c0       	push   0xc0024816
c001882f:	50                   	push   eax
c0018830:	e8 73 20 ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c001883d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018843:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018847:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001884a:	83 ec 08             	sub    esp,0x8
c001884d:	52                   	push   edx
c001884e:	50                   	push   eax
c001884f:	e8 0e 20 ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c001885c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018862:	83 ec 08             	sub    esp,0x8
c0018865:	68 1e 48 02 c0       	push   0xc002481e
c001886a:	50                   	push   eax
c001886b:	e8 38 20 ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018870:	83 c4 10             	add    esp,0x10
c0018873:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018878:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001887e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018882:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018885:	83 ec 08             	sub    esp,0x8
c0018888:	52                   	push   edx
c0018889:	50                   	push   eax
c001888a:	e8 d3 1f ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c001888f:	83 c4 10             	add    esp,0x10
c0018892:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018897:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001889d:	83 ec 08             	sub    esp,0x8
c00188a0:	68 26 48 02 c0       	push   0xc0024826
c00188a5:	50                   	push   eax
c00188a6:	e8 fd 1f ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c00188ab:	83 c4 10             	add    esp,0x10
c00188ae:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00188b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00188b9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00188bd:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00188c0:	83 ec 08             	sub    esp,0x8
c00188c3:	52                   	push   edx
c00188c4:	50                   	push   eax
c00188c5:	e8 98 1f ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c00188ca:	83 c4 10             	add    esp,0x10
c00188cd:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00188d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00188d8:	83 ec 08             	sub    esp,0x8
c00188db:	68 2e 48 02 c0       	push   0xc002482e
c00188e0:	50                   	push   eax
c00188e1:	e8 c2 1f ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c00188e6:	83 c4 10             	add    esp,0x10
c00188e9:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00188ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00188f4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00188f8:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00188fb:	83 ec 08             	sub    esp,0x8
c00188fe:	52                   	push   edx
c00188ff:	50                   	push   eax
c0018900:	e8 5d 1f ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018905:	83 c4 10             	add    esp,0x10
c0018908:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c001890d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018913:	83 ec 08             	sub    esp,0x8
c0018916:	68 36 48 02 c0       	push   0xc0024836
c001891b:	50                   	push   eax
c001891c:	e8 87 1f ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018929:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001892f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018933:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018936:	83 ec 08             	sub    esp,0x8
c0018939:	52                   	push   edx
c001893a:	50                   	push   eax
c001893b:	e8 22 1f ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018940:	83 c4 10             	add    esp,0x10
c0018943:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018948:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001894e:	83 ec 08             	sub    esp,0x8
c0018951:	68 3e 48 02 c0       	push   0xc002483e
c0018956:	50                   	push   eax
c0018957:	e8 4c 1f ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c001895c:	83 c4 10             	add    esp,0x10
c001895f:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018964:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001896a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001896e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018971:	83 ec 08             	sub    esp,0x8
c0018974:	52                   	push   edx
c0018975:	50                   	push   eax
c0018976:	e8 e7 1e ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c001897b:	83 c4 10             	add    esp,0x10
c001897e:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018983:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018989:	83 ec 08             	sub    esp,0x8
c001898c:	68 46 48 02 c0       	push   0xc0024846
c0018991:	50                   	push   eax
c0018992:	e8 11 1f ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018997:	83 c4 10             	add    esp,0x10
c001899a:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c001899f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189a5:	83 ec 08             	sub    esp,0x8
c00189a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00189ac:	50                   	push   eax
c00189ad:	e8 b0 1e ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c00189b2:	83 c4 10             	add    esp,0x10
c00189b5:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00189ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189c0:	83 ec 08             	sub    esp,0x8
c00189c3:	68 4f 48 02 c0       	push   0xc002484f
c00189c8:	50                   	push   eax
c00189c9:	e8 da 1e ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c00189ce:	83 c4 10             	add    esp,0x10
c00189d1:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00189d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189dc:	83 ec 08             	sub    esp,0x8
c00189df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189e3:	50                   	push   eax
c00189e4:	e8 79 1e ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c00189e9:	83 c4 10             	add    esp,0x10
c00189ec:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c00189f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00189f7:	83 ec 08             	sub    esp,0x8
c00189fa:	68 57 48 02 c0       	push   0xc0024857
c00189ff:	50                   	push   eax
c0018a00:	e8 a3 1e ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018a05:	83 c4 10             	add    esp,0x10
c0018a08:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018a0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a13:	83 ec 08             	sub    esp,0x8
c0018a16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a1a:	50                   	push   eax
c0018a1b:	e8 42 1e ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018a20:	83 c4 10             	add    esp,0x10
c0018a23:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018a28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a2e:	83 ec 08             	sub    esp,0x8
c0018a31:	68 5f 48 02 c0       	push   0xc002485f
c0018a36:	50                   	push   eax
c0018a37:	e8 6c 1e ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018a3c:	83 c4 10             	add    esp,0x10
c0018a3f:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018a44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a4a:	83 ec 08             	sub    esp,0x8
c0018a4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018a51:	50                   	push   eax
c0018a52:	e8 0b 1e ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018a5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a65:	83 ec 08             	sub    esp,0x8
c0018a68:	68 67 48 02 c0       	push   0xc0024867
c0018a6d:	50                   	push   eax
c0018a6e:	e8 35 1e ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018a73:	83 c4 10             	add    esp,0x10
c0018a76:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018a7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a81:	0f 21 c2             	mov    edx,db0
c0018a84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018a88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a8c:	83 ec 08             	sub    esp,0x8
c0018a8f:	52                   	push   edx
c0018a90:	50                   	push   eax
c0018a91:	e8 cc 1d ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018a96:	83 c4 10             	add    esp,0x10
c0018a99:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018a9e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018aa4:	83 ec 08             	sub    esp,0x8
c0018aa7:	68 70 48 02 c0       	push   0xc0024870
c0018aac:	50                   	push   eax
c0018aad:	e8 f6 1d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018ab2:	83 c4 10             	add    esp,0x10
c0018ab5:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018aba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ac0:	0f 21 ca             	mov    edx,db1
c0018ac3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ac7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018acb:	83 ec 08             	sub    esp,0x8
c0018ace:	52                   	push   edx
c0018acf:	50                   	push   eax
c0018ad0:	e8 8d 1d ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018ad5:	83 c4 10             	add    esp,0x10
c0018ad8:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018add:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ae3:	83 ec 08             	sub    esp,0x8
c0018ae6:	68 78 48 02 c0       	push   0xc0024878
c0018aeb:	50                   	push   eax
c0018aec:	e8 b7 1d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018af1:	83 c4 10             	add    esp,0x10
c0018af4:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018af9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018aff:	0f 21 d2             	mov    edx,db2
c0018b02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018b06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b0a:	83 ec 08             	sub    esp,0x8
c0018b0d:	52                   	push   edx
c0018b0e:	50                   	push   eax
c0018b0f:	e8 4e 1d ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018b14:	83 c4 10             	add    esp,0x10
c0018b17:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018b1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b22:	83 ec 08             	sub    esp,0x8
c0018b25:	68 80 48 02 c0       	push   0xc0024880
c0018b2a:	50                   	push   eax
c0018b2b:	e8 78 1d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018b30:	83 c4 10             	add    esp,0x10
c0018b33:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018b38:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b3e:	0f 21 da             	mov    edx,db3
c0018b41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018b45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b49:	83 ec 08             	sub    esp,0x8
c0018b4c:	52                   	push   edx
c0018b4d:	50                   	push   eax
c0018b4e:	e8 0f 1d ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018b5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b61:	83 ec 08             	sub    esp,0x8
c0018b64:	68 88 48 02 c0       	push   0xc0024888
c0018b69:	50                   	push   eax
c0018b6a:	e8 39 1d ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018b6f:	83 c4 10             	add    esp,0x10
c0018b72:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018b77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b7d:	0f 21 f2             	mov    edx,db6
c0018b80:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0018b84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b88:	83 ec 08             	sub    esp,0x8
c0018b8b:	52                   	push   edx
c0018b8c:	50                   	push   eax
c0018b8d:	e8 d0 1c ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018b92:	83 c4 10             	add    esp,0x10
c0018b95:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018b9a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ba0:	83 ec 08             	sub    esp,0x8
c0018ba3:	68 90 48 02 c0       	push   0xc0024890
c0018ba8:	50                   	push   eax
c0018ba9:	e8 fa 1c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018bae:	83 c4 10             	add    esp,0x10
c0018bb1:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018bb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018bbc:	0f 21 fa             	mov    edx,db7
c0018bbf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0018bc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018bc7:	83 ec 08             	sub    esp,0x8
c0018bca:	52                   	push   edx
c0018bcb:	50                   	push   eax
c0018bcc:	e8 91 1c ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018bd1:	83 c4 10             	add    esp,0x10
c0018bd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018bd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018bdb:	83 ec 0c             	sub    esp,0xc
c0018bde:	50                   	push   eax
c0018bdf:	e8 6e c9 ff ff       	call   c0015552 <Thr::getDriverNameFromAddress(unsigned long)>
c0018be4:	83 c4 10             	add    esp,0x10
c0018be7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018beb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018bf0:	0f 84 a6 00 00 00    	je     c0018c9c <displayDebugInfo(regs*)+0x650>
c0018bf6:	83 ec 08             	sub    esp,0x8
c0018bf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018bfd:	68 98 48 02 c0       	push   0xc0024898
c0018c02:	e8 de 3a ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018c07:	83 c4 10             	add    esp,0x10
c0018c0a:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018c0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c15:	83 ec 08             	sub    esp,0x8
c0018c18:	68 a6 48 02 c0       	push   0xc00248a6
c0018c1d:	50                   	push   eax
c0018c1e:	e8 85 1c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018c2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c31:	83 ec 08             	sub    esp,0x8
c0018c34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c38:	50                   	push   eax
c0018c39:	e8 6a 1c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018c3e:	83 c4 10             	add    esp,0x10
c0018c41:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018c46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c4c:	83 ec 08             	sub    esp,0x8
c0018c4f:	68 b2 48 02 c0       	push   0xc00248b2
c0018c54:	50                   	push   eax
c0018c55:	e8 4e 1c ff ff       	call   c000a8a8 <VgaText::puts(char const*)>
c0018c5a:	83 c4 10             	add    esp,0x10
c0018c5d:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c0018c62:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0018c68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c6f:	83 ec 0c             	sub    esp,0xc
c0018c72:	50                   	push   eax
c0018c73:	e8 11 c9 ff ff       	call   c0015589 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0018c78:	83 c4 10             	add    esp,0x10
c0018c7b:	83 ec 08             	sub    esp,0x8
c0018c7e:	50                   	push   eax
c0018c7f:	53                   	push   ebx
c0018c80:	e8 dd 1b ff ff       	call   c000a862 <VgaText::putx(unsigned int)>
c0018c85:	83 c4 10             	add    esp,0x10
c0018c88:	83 ec 08             	sub    esp,0x8
c0018c8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c8f:	68 be 48 02 c0       	push   0xc00248be
c0018c94:	e8 4c 3a ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018c99:	83 c4 10             	add    esp,0x10
c0018c9c:	fa                   	cli    
c0018c9d:	f4                   	hlt    
c0018c9e:	eb fe                	jmp    c0018c9e <displayDebugInfo(regs*)+0x652>

c0018ca0 <displayProgramFault(char const*)>:
c0018ca0:	83 ec 0c             	sub    esp,0xc
c0018ca3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0018caa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018cad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018cb3:	85 c0                	test   eax,eax
c0018cb5:	74 21                	je     c0018cd8 <displayProgramFault(char const*)+0x38>
c0018cb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018cc1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018cc7:	6a 04                	push   0x4
c0018cc9:	6a 0f                	push   0xf
c0018ccb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018ccf:	50                   	push   eax
c0018cd0:	e8 45 1c ff ff       	call   c000a91a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0018cd5:	83 c4 10             	add    esp,0x10
c0018cd8:	90                   	nop
c0018cd9:	83 c4 0c             	add    esp,0xc
c0018cdc:	c3                   	ret    

c0018cdd <gpFault(regs*, void*)>:
c0018cdd:	83 ec 1c             	sub    esp,0x1c
c0018ce0:	c7 05 9c 98 02 c0 6f 6f 01 c0 	mov    DWORD PTR ds:0xc002989c,0xc0016f6f
c0018cea:	a1 9c 98 02 c0       	mov    eax,ds:0xc002989c
c0018cef:	85 c0                	test   eax,eax
c0018cf1:	74 1c                	je     c0018d0f <gpFault(regs*, void*)+0x32>
c0018cf3:	a1 9c 98 02 c0       	mov    eax,ds:0xc002989c
c0018cf8:	83 ec 0c             	sub    esp,0xc
c0018cfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cff:	ff d0                	call   eax
c0018d01:	83 c4 10             	add    esp,0x10
c0018d04:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d08:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018d0d:	75 3e                	jne    c0018d4d <gpFault(regs*, void*)+0x70>
c0018d0f:	83 ec 0c             	sub    esp,0xc
c0018d12:	68 ce 48 02 c0       	push   0xc00248ce
c0018d17:	e8 c9 39 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018d1c:	83 c4 10             	add    esp,0x10
c0018d1f:	83 ec 0c             	sub    esp,0xc
c0018d22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d26:	e8 21 f9 ff ff       	call   c001864c <displayDebugInfo(regs*)>
c0018d2b:	83 c4 10             	add    esp,0x10
c0018d2e:	83 ec 0c             	sub    esp,0xc
c0018d31:	68 e9 48 02 c0       	push   0xc00248e9
c0018d36:	e8 65 ff ff ff       	call   c0018ca0 <displayProgramFault(char const*)>
c0018d3b:	83 c4 10             	add    esp,0x10
c0018d3e:	83 ec 0c             	sub    esp,0xc
c0018d41:	6a 00                	push   0x0
c0018d43:	e8 20 dc ff ff       	call   c0016968 <Thr::terminateFromIRQ(int)>
c0018d48:	83 c4 10             	add    esp,0x10
c0018d4b:	eb 01                	jmp    c0018d4e <gpFault(regs*, void*)+0x71>
c0018d4d:	90                   	nop
c0018d4e:	83 c4 1c             	add    esp,0x1c
c0018d51:	c3                   	ret    

c0018d52 <pgFault(regs*, void*)>:
c0018d52:	83 ec 1c             	sub    esp,0x1c
c0018d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018d5c:	83 ec 08             	sub    esp,0x8
c0018d5f:	50                   	push   eax
c0018d60:	68 02 49 02 c0       	push   0xc0024902
c0018d65:	e8 7b 39 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018d6a:	83 c4 10             	add    esp,0x10
c0018d6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018d77:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018d7d:	0f 20 d2             	mov    edx,cr2
c0018d80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d88:	83 ec 08             	sub    esp,0x8
c0018d8b:	52                   	push   edx
c0018d8c:	50                   	push   eax
c0018d8d:	e8 ce 34 ff ff       	call   c000c260 <VAS::tryLoadBackOffDisk(unsigned long)>
c0018d92:	83 c4 10             	add    esp,0x10
c0018d95:	84 c0                	test   al,al
c0018d97:	75 3e                	jne    c0018dd7 <pgFault(regs*, void*)+0x85>
c0018d99:	83 ec 0c             	sub    esp,0xc
c0018d9c:	68 17 49 02 c0       	push   0xc0024917
c0018da1:	e8 3f 39 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018da6:	83 c4 10             	add    esp,0x10
c0018da9:	83 ec 0c             	sub    esp,0xc
c0018dac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018db0:	e8 97 f8 ff ff       	call   c001864c <displayDebugInfo(regs*)>
c0018db5:	83 c4 10             	add    esp,0x10
c0018db8:	83 ec 0c             	sub    esp,0xc
c0018dbb:	68 24 49 02 c0       	push   0xc0024924
c0018dc0:	e8 db fe ff ff       	call   c0018ca0 <displayProgramFault(char const*)>
c0018dc5:	83 c4 10             	add    esp,0x10
c0018dc8:	83 ec 0c             	sub    esp,0xc
c0018dcb:	6a 00                	push   0x0
c0018dcd:	e8 96 db ff ff       	call   c0016968 <Thr::terminateFromIRQ(int)>
c0018dd2:	83 c4 10             	add    esp,0x10
c0018dd5:	eb 01                	jmp    c0018dd8 <pgFault(regs*, void*)+0x86>
c0018dd7:	90                   	nop
c0018dd8:	83 c4 1c             	add    esp,0x1c
c0018ddb:	c3                   	ret    

c0018ddc <otherISRHandler(regs*, void*)>:
c0018ddc:	83 ec 0c             	sub    esp,0xc
c0018ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de3:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dea:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018ded:	83 ec 04             	sub    esp,0x4
c0018df0:	52                   	push   edx
c0018df1:	50                   	push   eax
c0018df2:	68 2f 49 02 c0       	push   0xc002492f
c0018df7:	e8 e9 38 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018dfc:	83 c4 10             	add    esp,0x10
c0018dff:	83 ec 0c             	sub    esp,0xc
c0018e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e06:	e8 41 f8 ff ff       	call   c001864c <displayDebugInfo(regs*)>
c0018e0b:	83 c4 10             	add    esp,0x10
c0018e0e:	83 ec 0c             	sub    esp,0xc
c0018e11:	68 f8 49 02 c0       	push   0xc00249f8
c0018e16:	e8 85 fe ff ff       	call   c0018ca0 <displayProgramFault(char const*)>
c0018e1b:	83 c4 10             	add    esp,0x10
c0018e1e:	83 ec 0c             	sub    esp,0xc
c0018e21:	6a 00                	push   0x0
c0018e23:	e8 40 db ff ff       	call   c0016968 <Thr::terminateFromIRQ(int)>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	90                   	nop
c0018e2c:	83 c4 0c             	add    esp,0xc
c0018e2f:	c3                   	ret    

c0018e30 <opcodeFault(regs*, void*)>:
c0018e30:	55                   	push   ebp
c0018e31:	89 e5                	mov    ebp,esp
c0018e33:	56                   	push   esi
c0018e34:	53                   	push   ebx
c0018e35:	83 ec 30             	sub    esp,0x30
c0018e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e3b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e3e:	83 ec 08             	sub    esp,0x8
c0018e41:	50                   	push   eax
c0018e42:	68 4c 49 02 c0       	push   0xc002494c
c0018e47:	e8 99 38 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018e4c:	83 c4 10             	add    esp,0x10
c0018e4f:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0018e54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e5a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0018e60:	84 c0                	test   al,al
c0018e62:	74 24                	je     c0018e88 <opcodeFault(regs*, void*)+0x58>
c0018e64:	83 ec 0c             	sub    esp,0xc
c0018e67:	68 20 4a 02 c0       	push   0xc0024a20
c0018e6c:	e8 74 38 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e7a:	8d 50 19             	lea    edx,[eax+0x19]
c0018e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018e83:	e9 9b 03 00 00       	jmp    c0019223 <opcodeFault(regs*, void*)+0x3f3>
c0018e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e8b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e8e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018e91:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0018e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e9b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018e9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0018ea3:	3c f0                	cmp    al,0xf0
c0018ea5:	75 17                	jne    c0018ebe <opcodeFault(regs*, void*)+0x8e>
c0018ea7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ead:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018eb0:	8d 50 01             	lea    edx,[eax+0x1]
c0018eb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018eb9:	e9 d6 00 00 00       	jmp    c0018f94 <opcodeFault(regs*, void*)+0x164>
c0018ebe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018ec1:	8a 00                	mov    al,BYTE PTR [eax]
c0018ec3:	3c f2                	cmp    al,0xf2
c0018ec5:	74 09                	je     c0018ed0 <opcodeFault(regs*, void*)+0xa0>
c0018ec7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018eca:	8a 00                	mov    al,BYTE PTR [eax]
c0018ecc:	3c f3                	cmp    al,0xf3
c0018ece:	75 1b                	jne    c0018eeb <opcodeFault(regs*, void*)+0xbb>
c0018ed0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018ed4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018eda:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018edd:	8d 50 01             	lea    edx,[eax+0x1]
c0018ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ee3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ee6:	e9 a9 00 00 00       	jmp    c0018f94 <opcodeFault(regs*, void*)+0x164>
c0018eeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018eee:	8a 00                	mov    al,BYTE PTR [eax]
c0018ef0:	3c 66                	cmp    al,0x66
c0018ef2:	75 1b                	jne    c0018f0f <opcodeFault(regs*, void*)+0xdf>
c0018ef4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018ef8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018efe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f01:	8d 50 01             	lea    edx,[eax+0x1]
c0018f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f07:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f0a:	e9 85 00 00 00       	jmp    c0018f94 <opcodeFault(regs*, void*)+0x164>
c0018f0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f12:	8a 00                	mov    al,BYTE PTR [eax]
c0018f14:	3c 67                	cmp    al,0x67
c0018f16:	75 18                	jne    c0018f30 <opcodeFault(regs*, void*)+0x100>
c0018f18:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018f1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f25:	8d 50 01             	lea    edx,[eax+0x1]
c0018f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f2e:	eb 64                	jmp    c0018f94 <opcodeFault(regs*, void*)+0x164>
c0018f30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f33:	8a 00                	mov    al,BYTE PTR [eax]
c0018f35:	3c 2e                	cmp    al,0x2e
c0018f37:	74 09                	je     c0018f42 <opcodeFault(regs*, void*)+0x112>
c0018f39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f3c:	8a 00                	mov    al,BYTE PTR [eax]
c0018f3e:	3c 3e                	cmp    al,0x3e
c0018f40:	75 18                	jne    c0018f5a <opcodeFault(regs*, void*)+0x12a>
c0018f42:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018f46:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f4c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f4f:	8d 50 01             	lea    edx,[eax+0x1]
c0018f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f55:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f58:	eb 3a                	jmp    c0018f94 <opcodeFault(regs*, void*)+0x164>
c0018f5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f5d:	8a 00                	mov    al,BYTE PTR [eax]
c0018f5f:	3c 36                	cmp    al,0x36
c0018f61:	74 1b                	je     c0018f7e <opcodeFault(regs*, void*)+0x14e>
c0018f63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f66:	8a 00                	mov    al,BYTE PTR [eax]
c0018f68:	3c 26                	cmp    al,0x26
c0018f6a:	74 12                	je     c0018f7e <opcodeFault(regs*, void*)+0x14e>
c0018f6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f6f:	8a 00                	mov    al,BYTE PTR [eax]
c0018f71:	3c 64                	cmp    al,0x64
c0018f73:	74 09                	je     c0018f7e <opcodeFault(regs*, void*)+0x14e>
c0018f75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f78:	8a 00                	mov    al,BYTE PTR [eax]
c0018f7a:	3c 65                	cmp    al,0x65
c0018f7c:	75 16                	jne    c0018f94 <opcodeFault(regs*, void*)+0x164>
c0018f7e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0018f82:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f88:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f8b:	8d 50 01             	lea    edx,[eax+0x1]
c0018f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f91:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018f97:	8a 00                	mov    al,BYTE PTR [eax]
c0018f99:	3c 0f                	cmp    al,0xf
c0018f9b:	0f 85 8d 01 00 00    	jne    c001912e <opcodeFault(regs*, void*)+0x2fe>
c0018fa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018fa4:	40                   	inc    eax
c0018fa5:	8a 00                	mov    al,BYTE PTR [eax]
c0018fa7:	3c c7                	cmp    al,0xc7
c0018fa9:	0f 85 7f 01 00 00    	jne    c001912e <opcodeFault(regs*, void*)+0x2fe>
c0018faf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0018fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018fb8:	8d 50 01             	lea    edx,[eax+0x1]
c0018fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018fc1:	8d 45 d2             	lea    eax,[ebp-0x2e]
c0018fc4:	50                   	push   eax
c0018fc5:	8d 45 d3             	lea    eax,[ebp-0x2d]
c0018fc8:	50                   	push   eax
c0018fc9:	8d 45 d4             	lea    eax,[ebp-0x2c]
c0018fcc:	50                   	push   eax
c0018fcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018fd0:	e8 93 91 ff ff       	call   c0012168 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0018fd5:	83 c4 10             	add    esp,0x10
c0018fd8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018fdb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0018fde:	83 f0 01             	xor    eax,0x1
c0018fe1:	84 c0                	test   al,al
c0018fe3:	0f 84 45 01 00 00    	je     c001912e <opcodeFault(regs*, void*)+0x2fe>
c0018fe9:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c0018fec:	3c 01                	cmp    al,0x1
c0018fee:	0f 85 3a 01 00 00    	jne    c001912e <opcodeFault(regs*, void*)+0x2fe>
c0018ff4:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0018ff7:	83 f0 01             	xor    eax,0x1
c0018ffa:	84 c0                	test   al,al
c0018ffc:	0f 84 2c 01 00 00    	je     c001912e <opcodeFault(regs*, void*)+0x2fe>
c0019002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019005:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019008:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001900b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0019012:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0019015:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019018:	89 c2                	mov    edx,eax
c001901a:	b8 00 00 00 00       	mov    eax,0x0
c001901f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0019022:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0019025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019028:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001902b:	ba 00 00 00 00       	mov    edx,0x0
c0019030:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c0019033:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c0019036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019039:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001903c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001903f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0019046:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019049:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001904c:	89 c2                	mov    edx,eax
c001904e:	b8 00 00 00 00       	mov    eax,0x0
c0019053:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019056:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0019059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001905c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001905f:	ba 00 00 00 00       	mov    edx,0x0
c0019064:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c0019067:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c001906a:	fa                   	cli    
c001906b:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0019070:	40                   	inc    eax
c0019071:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0019076:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019079:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001907c:	8b 00                	mov    eax,DWORD PTR [eax]
c001907e:	89 c1                	mov    ecx,eax
c0019080:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c0019083:	89 cb                	mov    ebx,ecx
c0019085:	89 d0                	mov    eax,edx
c0019087:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c001908a:	89 c6                	mov    esi,eax
c001908c:	89 f0                	mov    eax,esi
c001908e:	09 d8                	or     eax,ebx
c0019090:	85 c0                	test   eax,eax
c0019092:	75 21                	jne    c00190b5 <opcodeFault(regs*, void*)+0x285>
c0019094:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0019097:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001909a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001909d:	89 01                	mov    DWORD PTR [ecx],eax
c001909f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00190a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00190a8:	83 c8 40             	or     eax,0x40
c00190ab:	89 c2                	mov    edx,eax
c00190ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190b0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00190b3:	eb 3e                	jmp    c00190f3 <opcodeFault(regs*, void*)+0x2c3>
c00190b5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00190b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00190bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00190bd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00190c0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00190c3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00190c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190c9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00190cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00190cf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00190d2:	89 d0                	mov    eax,edx
c00190d4:	31 d2                	xor    edx,edx
c00190d6:	89 c3                	mov    ebx,eax
c00190d8:	89 d6                	mov    esi,edx
c00190da:	89 da                	mov    edx,ebx
c00190dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190df:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00190e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00190e8:	83 e0 bf             	and    eax,0xffffffbf
c00190eb:	89 c2                	mov    edx,eax
c00190ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190f0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00190f3:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00190f8:	48                   	dec    eax
c00190f9:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00190fe:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c0019103:	85 c0                	test   eax,eax
c0019105:	75 01                	jne    c0019108 <opcodeFault(regs*, void*)+0x2d8>
c0019107:	fb                   	sti    
c0019108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001910b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001910e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0019111:	01 c2                	add    edx,eax
c0019113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019116:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019119:	83 ec 0c             	sub    esp,0xc
c001911c:	68 5a 49 02 c0       	push   0xc002495a
c0019121:	e8 bf 35 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019126:	83 c4 10             	add    esp,0x10
c0019129:	e9 f5 00 00 00       	jmp    c0019223 <opcodeFault(regs*, void*)+0x3f3>
c001912e:	83 ec 0c             	sub    esp,0xc
c0019131:	68 6d 49 02 c0       	push   0xc002496d
c0019136:	e8 aa 35 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001913b:	83 c4 10             	add    esp,0x10
c001913e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019141:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0019144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019147:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001914a:	c1 e0 04             	shl    eax,0x4
c001914d:	01 d0                	add    eax,edx
c001914f:	83 c0 03             	add    eax,0x3
c0019152:	8a 00                	mov    al,BYTE PTR [eax]
c0019154:	0f b6 d8             	movzx  ebx,al
c0019157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001915a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001915d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019160:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019163:	c1 e0 04             	shl    eax,0x4
c0019166:	01 d0                	add    eax,edx
c0019168:	83 c0 02             	add    eax,0x2
c001916b:	8a 00                	mov    al,BYTE PTR [eax]
c001916d:	0f b6 c8             	movzx  ecx,al
c0019170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019173:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0019176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019179:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001917c:	c1 e0 04             	shl    eax,0x4
c001917f:	01 d0                	add    eax,edx
c0019181:	40                   	inc    eax
c0019182:	8a 00                	mov    al,BYTE PTR [eax]
c0019184:	0f b6 d0             	movzx  edx,al
c0019187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001918a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001918d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019190:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019193:	c1 e0 04             	shl    eax,0x4
c0019196:	01 f0                	add    eax,esi
c0019198:	8a 00                	mov    al,BYTE PTR [eax]
c001919a:	0f b6 c0             	movzx  eax,al
c001919d:	83 ec 0c             	sub    esp,0xc
c00191a0:	53                   	push   ebx
c00191a1:	51                   	push   ecx
c00191a2:	52                   	push   edx
c00191a3:	50                   	push   eax
c00191a4:	68 44 4a 02 c0       	push   0xc0024a44
c00191a9:	e8 37 35 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00191ae:	83 c4 20             	add    esp,0x20
c00191b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191b7:	83 c0 03             	add    eax,0x3
c00191ba:	8a 00                	mov    al,BYTE PTR [eax]
c00191bc:	0f b6 d8             	movzx  ebx,al
c00191bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191c5:	83 c0 02             	add    eax,0x2
c00191c8:	8a 00                	mov    al,BYTE PTR [eax]
c00191ca:	0f b6 c8             	movzx  ecx,al
c00191cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191d3:	40                   	inc    eax
c00191d4:	8a 00                	mov    al,BYTE PTR [eax]
c00191d6:	0f b6 d0             	movzx  edx,al
c00191d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191df:	8a 00                	mov    al,BYTE PTR [eax]
c00191e1:	0f b6 c0             	movzx  eax,al
c00191e4:	83 ec 0c             	sub    esp,0xc
c00191e7:	53                   	push   ebx
c00191e8:	51                   	push   ecx
c00191e9:	52                   	push   edx
c00191ea:	50                   	push   eax
c00191eb:	68 6c 4a 02 c0       	push   0xc0024a6c
c00191f0:	e8 f0 34 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00191f5:	83 c4 20             	add    esp,0x20
c00191f8:	83 ec 0c             	sub    esp,0xc
c00191fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00191fe:	e8 49 f4 ff ff       	call   c001864c <displayDebugInfo(regs*)>
c0019203:	83 c4 10             	add    esp,0x10
c0019206:	83 ec 0c             	sub    esp,0xc
c0019209:	68 7e 49 02 c0       	push   0xc002497e
c001920e:	e8 8d fa ff ff       	call   c0018ca0 <displayProgramFault(char const*)>
c0019213:	83 c4 10             	add    esp,0x10
c0019216:	83 ec 0c             	sub    esp,0xc
c0019219:	6a 00                	push   0x0
c001921b:	e8 48 d7 ff ff       	call   c0016968 <Thr::terminateFromIRQ(int)>
c0019220:	83 c4 10             	add    esp,0x10
c0019223:	8d 65 f8             	lea    esp,[ebp-0x8]
c0019226:	5b                   	pop    ebx
c0019227:	5e                   	pop    esi
c0019228:	5d                   	pop    ebp
c0019229:	c3                   	ret    

c001922a <i386SaveCoprocessor(void*)>:
c001922a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001922e:	83 c0 3f             	add    eax,0x3f
c0019231:	83 e0 c0             	and    eax,0xffffffc0
c0019234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019238:	ff 25 94 98 02 c0    	jmp    DWORD PTR ds:0xc0029894

c001923e <i386LoadCoprocessor(void*)>:
c001923e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019242:	83 c0 3f             	add    eax,0x3f
c0019245:	83 e0 c0             	and    eax,0xffffffc0
c0019248:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001924c:	ff 25 90 98 02 c0    	jmp    DWORD PTR ds:0xc0029890

c0019252 <x87EmulHandler(regs*, void*)>:
c0019252:	53                   	push   ebx
c0019253:	83 ec 14             	sub    esp,0x14
c0019256:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001925a:	68 8b 49 02 c0       	push   0xc002498b
c001925f:	e8 81 34 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019264:	83 c4 10             	add    esp,0x10
c0019267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001926c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0019270:	74 10                	je     c0019282 <x87EmulHandler(regs*, void*)+0x30>
c0019272:	83 ec 0c             	sub    esp,0xc
c0019275:	68 9b 49 02 c0       	push   0xc002499b
c001927a:	e8 d0 97 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001927f:	83 c4 10             	add    esp,0x10
c0019282:	0f 20 c0             	mov    eax,cr0
c0019285:	a8 08                	test   al,0x8
c0019287:	74 56                	je     c00192df <x87EmulHandler(regs*, void*)+0x8d>
c0019289:	0f 06                	clts   
c001928b:	a1 8c 98 02 c0       	mov    eax,ds:0xc002988c
c0019290:	85 c0                	test   eax,eax
c0019292:	74 0e                	je     c00192a2 <x87EmulHandler(regs*, void*)+0x50>
c0019294:	83 ec 0c             	sub    esp,0xc
c0019297:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001929a:	e8 8b ff ff ff       	call   c001922a <i386SaveCoprocessor(void*)>
c001929f:	83 c4 10             	add    esp,0x10
c00192a2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00192a8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00192ac:	75 12                	jne    c00192c0 <x87EmulHandler(regs*, void*)+0x6e>
c00192ae:	83 ec 0c             	sub    esp,0xc
c00192b1:	68 40 02 00 00       	push   0x240
c00192b6:	e8 dc 04 ff ff       	call   c0009797 <malloc>
c00192bb:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00192be:	eb 10                	jmp    c00192d0 <x87EmulHandler(regs*, void*)+0x7e>
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	a1 8c 98 02 c0       	mov    eax,ds:0xc002988c
c00192c8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00192cb:	e8 6e ff ff ff       	call   c001923e <i386LoadCoprocessor(void*)>
c00192d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192d5:	83 c4 10             	add    esp,0x10
c00192d8:	a3 8c 98 02 c0       	mov    ds:0xc002988c,eax
c00192dd:	eb 2e                	jmp    c001930d <x87EmulHandler(regs*, void*)+0xbb>
c00192df:	83 ec 0c             	sub    esp,0xc
c00192e2:	53                   	push   ebx
c00192e3:	e8 ca e7 ff ff       	call   c0017ab2 <Vm::x87Handler(regs*)>
c00192e8:	83 c4 10             	add    esp,0x10
c00192eb:	84 c0                	test   al,al
c00192ed:	75 1e                	jne    c001930d <x87EmulHandler(regs*, void*)+0xbb>
c00192ef:	83 ec 0c             	sub    esp,0xc
c00192f2:	68 af 49 02 c0       	push   0xc00249af
c00192f7:	e8 e9 33 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00192fc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019304:	83 c4 18             	add    esp,0x18
c0019307:	5b                   	pop    ebx
c0019308:	e9 5b d6 ff ff       	jmp    c0016968 <Thr::terminateFromIRQ(int)>
c001930d:	83 c4 08             	add    esp,0x8
c0019310:	5b                   	pop    ebx
c0019311:	c3                   	ret    

c0019312 <Hal::initialiseCoprocessor()>:
c0019312:	83 ec 10             	sub    esp,0x10
c0019315:	c7 05 8c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002988c,0x0
c001931f:	6a 00                	push   0x0
c0019321:	68 52 92 01 c0       	push   0xc0019252
c0019326:	6a 07                	push   0x7
c0019328:	e8 d3 4d ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001932d:	e8 0e 7b 00 00       	call   c0020e40 <avxDetect>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	85 c0                	test   eax,eax
c0019337:	74 29                	je     c0019362 <Hal::initialiseCoprocessor()+0x50>
c0019339:	83 ec 0c             	sub    esp,0xc
c001933c:	68 c5 49 02 c0       	push   0xc00249c5
c0019341:	e8 9f 33 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019346:	c7 05 94 98 02 c0 6a 0e 02 c0 	mov    DWORD PTR ds:0xc0029894,0xc0020e6a
c0019350:	c7 05 90 98 02 c0 7b 0e 02 c0 	mov    DWORD PTR ds:0xc0029890,0xc0020e7b
c001935a:	83 c4 1c             	add    esp,0x1c
c001935d:	e9 2a 7b 00 00       	jmp    c0020e8c <avxInit>
c0019362:	e8 59 7d 00 00       	call   c00210c0 <absolutelyNoChanceInHell>
c0019367:	85 c0                	test   eax,eax
c0019369:	74 29                	je     c0019394 <Hal::initialiseCoprocessor()+0x82>
c001936b:	83 ec 0c             	sub    esp,0xc
c001936e:	68 cb 49 02 c0       	push   0xc00249cb
c0019373:	e8 6d 33 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019378:	c7 05 94 98 02 c0 d8 10 02 c0 	mov    DWORD PTR ds:0xc0029894,0xc00210d8
c0019382:	c7 05 90 98 02 c0 e0 10 02 c0 	mov    DWORD PTR ds:0xc0029890,0xc00210e0
c001938c:	83 c4 1c             	add    esp,0x1c
c001938f:	e9 54 7d 00 00       	jmp    c00210e8 <sseInit>
c0019394:	e8 6d 7d 00 00       	call   c0021106 <x87Detect>
c0019399:	85 c0                	test   eax,eax
c001939b:	74 29                	je     c00193c6 <Hal::initialiseCoprocessor()+0xb4>
c001939d:	83 ec 0c             	sub    esp,0xc
c00193a0:	68 d1 49 02 c0       	push   0xc00249d1
c00193a5:	e8 3b 33 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00193aa:	c7 05 94 98 02 c0 21 11 02 c0 	mov    DWORD PTR ds:0xc0029894,0xc0021121
c00193b4:	c7 05 90 98 02 c0 28 11 02 c0 	mov    DWORD PTR ds:0xc0029890,0xc0021128
c00193be:	83 c4 1c             	add    esp,0x1c
c00193c1:	e9 69 7d 00 00       	jmp    c002112f <x87Init>
c00193c6:	83 ec 0c             	sub    esp,0xc
c00193c9:	68 d7 49 02 c0       	push   0xc00249d7
c00193ce:	e8 12 33 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00193d3:	c7 05 94 98 02 c0 11 86 01 c0 	mov    DWORD PTR ds:0xc0029894,0xc0018611
c00193dd:	c7 05 90 98 02 c0 11 86 01 c0 	mov    DWORD PTR ds:0xc0029890,0xc0018611
c00193e7:	0f 20 c0             	mov    eax,cr0
c00193ea:	83 c8 04             	or     eax,0x4
c00193ed:	0f 22 c0             	mov    cr0,eax
c00193f0:	83 c4 1c             	add    esp,0x1c
c00193f3:	c3                   	ret    

c00193f4 <Hal::panic(char const*)>:
c00193f4:	e9 56 96 ff ff       	jmp    c0012a4f <Krnl::panic(char const*)>

c00193f9 <Hal::initialise()>:
c00193f9:	53                   	push   ebx
c00193fa:	83 ec 08             	sub    esp,0x8
c00193fd:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0019402:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019408:	b8 12 86 01 c0       	mov    eax,0xc0018612
c001940d:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0019414:	74 05                	je     c001941b <Hal::initialise()+0x22>
c0019416:	b8 17 86 01 c0       	mov    eax,0xc0018617
c001941b:	a3 98 98 02 c0       	mov    ds:0xc0029898,eax
c0019420:	e8 00 4f ff ff       	call   c000e325 <setupINTS()>
c0019425:	80 3d a0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028ba0,0x0
c001942c:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0019431:	75 07                	jne    c001943a <Hal::initialise()+0x41>
c0019433:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c001943a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019440:	83 e0 01             	and    eax,0x1
c0019443:	a2 88 98 02 c0       	mov    ds:0xc0029888,al
c0019448:	e8 13 03 00 00       	call   c0019760 <picOpen()>
c001944d:	80 3d 88 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029888,0x0
c0019454:	74 0a                	je     c0019460 <Hal::initialise()+0x67>
c0019456:	e8 55 02 00 00       	call   c00196b0 <picDisable()>
c001945b:	e8 72 73 00 00       	call   c00207d2 <apicOpen()>
c0019460:	50                   	push   eax
c0019461:	6a 00                	push   0x0
c0019463:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019468:	6a 00                	push   0x0
c001946a:	e8 91 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001946f:	83 c4 0c             	add    esp,0xc
c0019472:	6a 00                	push   0x0
c0019474:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019479:	6a 01                	push   0x1
c001947b:	e8 80 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019480:	83 c4 0c             	add    esp,0xc
c0019483:	6a 00                	push   0x0
c0019485:	68 1a 86 01 c0       	push   0xc001861a
c001948a:	6a 02                	push   0x2
c001948c:	e8 6f 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019491:	83 c4 0c             	add    esp,0xc
c0019494:	6a 00                	push   0x0
c0019496:	68 dc 8d 01 c0       	push   0xc0018ddc
c001949b:	6a 03                	push   0x3
c001949d:	e8 5e 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194a2:	83 c4 0c             	add    esp,0xc
c00194a5:	6a 00                	push   0x0
c00194a7:	68 dc 8d 01 c0       	push   0xc0018ddc
c00194ac:	6a 04                	push   0x4
c00194ae:	e8 4d 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194b3:	83 c4 0c             	add    esp,0xc
c00194b6:	6a 00                	push   0x0
c00194b8:	68 dc 8d 01 c0       	push   0xc0018ddc
c00194bd:	6a 05                	push   0x5
c00194bf:	e8 3c 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194c4:	83 c4 0c             	add    esp,0xc
c00194c7:	6a 00                	push   0x0
c00194c9:	68 30 8e 01 c0       	push   0xc0018e30
c00194ce:	6a 06                	push   0x6
c00194d0:	e8 2b 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194d5:	83 c4 0c             	add    esp,0xc
c00194d8:	6a 00                	push   0x0
c00194da:	68 33 86 01 c0       	push   0xc0018633
c00194df:	6a 08                	push   0x8
c00194e1:	e8 1a 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194e6:	83 c4 0c             	add    esp,0xc
c00194e9:	6a 00                	push   0x0
c00194eb:	68 dc 8d 01 c0       	push   0xc0018ddc
c00194f0:	6a 09                	push   0x9
c00194f2:	e8 09 4c ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00194f7:	83 c4 0c             	add    esp,0xc
c00194fa:	6a 00                	push   0x0
c00194fc:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019501:	6a 0a                	push   0xa
c0019503:	e8 f8 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019508:	83 c4 0c             	add    esp,0xc
c001950b:	6a 00                	push   0x0
c001950d:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019512:	6a 0b                	push   0xb
c0019514:	e8 e7 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019519:	83 c4 0c             	add    esp,0xc
c001951c:	6a 00                	push   0x0
c001951e:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019523:	6a 0c                	push   0xc
c0019525:	e8 d6 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001952a:	83 c4 0c             	add    esp,0xc
c001952d:	6a 00                	push   0x0
c001952f:	68 dd 8c 01 c0       	push   0xc0018cdd
c0019534:	6a 0d                	push   0xd
c0019536:	e8 c5 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001953b:	83 c4 0c             	add    esp,0xc
c001953e:	6a 00                	push   0x0
c0019540:	68 52 8d 01 c0       	push   0xc0018d52
c0019545:	6a 0e                	push   0xe
c0019547:	e8 b4 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001954c:	83 c4 0c             	add    esp,0xc
c001954f:	6a 00                	push   0x0
c0019551:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019556:	6a 0f                	push   0xf
c0019558:	e8 a3 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001955d:	83 c4 0c             	add    esp,0xc
c0019560:	6a 00                	push   0x0
c0019562:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019567:	6a 10                	push   0x10
c0019569:	e8 92 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001956e:	83 c4 0c             	add    esp,0xc
c0019571:	6a 00                	push   0x0
c0019573:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019578:	6a 11                	push   0x11
c001957a:	e8 81 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001957f:	83 c4 0c             	add    esp,0xc
c0019582:	6a 00                	push   0x0
c0019584:	68 dc 8d 01 c0       	push   0xc0018ddc
c0019589:	6a 12                	push   0x12
c001958b:	e8 70 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019590:	83 c4 0c             	add    esp,0xc
c0019593:	6a 00                	push   0x0
c0019595:	68 dc 8d 01 c0       	push   0xc0018ddc
c001959a:	6a 13                	push   0x13
c001959c:	e8 5f 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195a1:	83 c4 0c             	add    esp,0xc
c00195a4:	6a 00                	push   0x0
c00195a6:	68 dc 8d 01 c0       	push   0xc0018ddc
c00195ab:	6a 14                	push   0x14
c00195ad:	e8 4e 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195b2:	83 c4 0c             	add    esp,0xc
c00195b5:	6a 00                	push   0x0
c00195b7:	68 dc 8d 01 c0       	push   0xc0018ddc
c00195bc:	6a 1e                	push   0x1e
c00195be:	e8 3d 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195c3:	83 c4 0c             	add    esp,0xc
c00195c6:	6a 00                	push   0x0
c00195c8:	68 c8 45 01 c0       	push   0xc00145c8
c00195cd:	6a 60                	push   0x60
c00195cf:	e8 2c 4b ff ff       	call   c000e100 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00195d4:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c00195d9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00195e3:	c7 04 24 e0 49 02 c0 	mov    DWORD PTR [esp],0xc00249e0
c00195ea:	e8 02 02 ff ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00195ef:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00195f6:	e8 9c 01 ff ff       	call   c0009797 <malloc>
c00195fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00195fe:	89 c3                	mov    ebx,eax
c0019600:	e8 ed 09 00 00       	call   c0019ff2 <RTC::RTC()>
c0019605:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001960f:	5a                   	pop    edx
c0019610:	59                   	pop    ecx
c0019611:	53                   	push   ebx
c0019612:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019618:	e8 45 45 ff ff       	call   c000db62 <Device::addChild(Device*)>
c001961d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001961f:	6a 00                	push   0x0
c0019621:	6a 00                	push   0x0
c0019623:	6a 00                	push   0x0
c0019625:	53                   	push   ebx
c0019626:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019629:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001962e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0019634:	83 c4 28             	add    esp,0x28
c0019637:	5b                   	pop    ebx
c0019638:	c3                   	ret    

c0019639 <Hal::makeBeep(int)>:
c0019639:	53                   	push   ebx
c001963a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001963e:	85 db                	test   ebx,ebx
c0019640:	75 07                	jne    c0019649 <Hal::makeBeep(int)+0x10>
c0019642:	e4 61                	in     al,0x61
c0019644:	83 e0 fc             	and    eax,0xfffffffc
c0019647:	eb 26                	jmp    c001966f <Hal::makeBeep(int)+0x36>
c0019649:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001964e:	99                   	cdq    
c001964f:	f7 fb                	idiv   ebx
c0019651:	89 c1                	mov    ecx,eax
c0019653:	b0 b6                	mov    al,0xb6
c0019655:	e6 43                	out    0x43,al
c0019657:	88 c8                	mov    al,cl
c0019659:	e6 42                	out    0x42,al
c001965b:	89 c8                	mov    eax,ecx
c001965d:	c1 e8 08             	shr    eax,0x8
c0019660:	e6 42                	out    0x42,al
c0019662:	e4 61                	in     al,0x61
c0019664:	88 c2                	mov    dl,al
c0019666:	83 ca 03             	or     edx,0x3
c0019669:	38 c2                	cmp    dl,al
c001966b:	74 04                	je     c0019671 <Hal::makeBeep(int)+0x38>
c001966d:	88 d0                	mov    al,dl
c001966f:	e6 61                	out    0x61,al
c0019671:	5b                   	pop    ebx
c0019672:	c3                   	ret    

c0019673 <Hal::getRand()>:
c0019673:	31 c0                	xor    eax,eax
c0019675:	c3                   	ret    

c0019676 <Hal::endOfInterrupt(int)>:
c0019676:	80 3d 88 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029888,0x0
c001967d:	74 23                	je     c00196a2 <Hal::endOfInterrupt(int)+0x2c>
c001967f:	83 ec 14             	sub    esp,0x14
c0019682:	6a 1b                	push   0x1b
c0019684:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c001968a:	e8 bf f6 fe ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c001968f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019694:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001969e:	83 c4 1c             	add    esp,0x1c
c00196a1:	c3                   	ret    
c00196a2:	e9 3d 02 00 00       	jmp    c00198e4 <picEOI(int)>
c00196a7:	90                   	nop

c00196a8 <picIoWait()>:
c00196a8:	eb 00                	jmp    c00196aa <picIoWait()+0x2>
c00196aa:	eb 00                	jmp    c00196ac <picIoWait()+0x4>
c00196ac:	90                   	nop
c00196ad:	c3                   	ret    
c00196ae:	66 90                	xchg   ax,ax

c00196b0 <picDisable()>:
c00196b0:	83 ec 10             	sub    esp,0x10
c00196b3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00196ba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00196bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00196c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00196c8:	ee                   	out    dx,al
c00196c9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00196d0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00196d5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00196d9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00196de:	ee                   	out    dx,al
c00196df:	90                   	nop
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	c3                   	ret    

c00196e4 <picGetIRQReg(int)>:
c00196e4:	83 ec 10             	sub    esp,0x10
c00196e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196eb:	0f b6 c0             	movzx  eax,al
c00196ee:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00196f5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00196f9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00196fd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019702:	ee                   	out    dx,al
c0019703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019707:	0f b6 c0             	movzx  eax,al
c001970a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019711:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019715:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019719:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001971e:	ee                   	out    dx,al
c001971f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0019726:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001972b:	89 c2                	mov    edx,eax
c001972d:	ec                   	in     al,dx
c001972e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019732:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019736:	0f b6 c0             	movzx  eax,al
c0019739:	c1 e0 08             	shl    eax,0x8
c001973c:	89 c1                	mov    ecx,eax
c001973e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0019745:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001974a:	89 c2                	mov    edx,eax
c001974c:	ec                   	in     al,dx
c001974d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019751:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019755:	0f b6 c0             	movzx  eax,al
c0019758:	09 c8                	or     eax,ecx
c001975a:	83 c4 10             	add    esp,0x10
c001975d:	c3                   	ret    
c001975e:	66 90                	xchg   ax,ax

c0019760 <picOpen()>:
c0019760:	83 ec 50             	sub    esp,0x50
c0019763:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001976a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001976f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019773:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019777:	ee                   	out    dx,al
c0019778:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001977f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019784:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019788:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001978c:	ee                   	out    dx,al
c001978d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019795:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001979d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00197a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197a8:	89 c2                	mov    edx,eax
c00197aa:	ec                   	in     al,dx
c00197ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00197af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00197b3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00197b7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00197be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197c2:	89 c2                	mov    edx,eax
c00197c4:	ec                   	in     al,dx
c00197c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00197c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00197cd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00197d1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00197d8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00197dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00197e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00197e5:	ee                   	out    dx,al
c00197e6:	e8 bd fe ff ff       	call   c00196a8 <picIoWait()>
c00197eb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00197f2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00197f7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00197fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00197ff:	ee                   	out    dx,al
c0019800:	e8 a3 fe ff ff       	call   c00196a8 <picIoWait()>
c0019805:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019809:	0f b6 c0             	movzx  eax,al
c001980c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0019813:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019817:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001981b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001981f:	ee                   	out    dx,al
c0019820:	e8 83 fe ff ff       	call   c00196a8 <picIoWait()>
c0019825:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019829:	0f b6 c0             	movzx  eax,al
c001982c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0019833:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019837:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001983b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001983f:	ee                   	out    dx,al
c0019840:	e8 63 fe ff ff       	call   c00196a8 <picIoWait()>
c0019845:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001984c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019851:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0019855:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019859:	ee                   	out    dx,al
c001985a:	e8 49 fe ff ff       	call   c00196a8 <picIoWait()>
c001985f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0019866:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001986b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001986f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019873:	ee                   	out    dx,al
c0019874:	e8 2f fe ff ff       	call   c00196a8 <picIoWait()>
c0019879:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019880:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019885:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019889:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001988d:	ee                   	out    dx,al
c001988e:	e8 15 fe ff ff       	call   c00196a8 <picIoWait()>
c0019893:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001989a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001989f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00198a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00198a7:	ee                   	out    dx,al
c00198a8:	e8 fb fd ff ff       	call   c00196a8 <picIoWait()>
c00198ad:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00198b2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00198b9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00198bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00198c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00198c5:	ee                   	out    dx,al
c00198c6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00198cb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00198d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00198d6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00198da:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00198de:	ee                   	out    dx,al
c00198df:	90                   	nop
c00198e0:	83 c4 50             	add    esp,0x50
c00198e3:	c3                   	ret    

c00198e4 <picEOI(int)>:
c00198e4:	83 ec 10             	sub    esp,0x10
c00198e7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00198ec:	75 1e                	jne    c001990c <picEOI(int)+0x28>
c00198ee:	6a 0b                	push   0xb
c00198f0:	e8 ef fd ff ff       	call   c00196e4 <picGetIRQReg(int)>
c00198f5:	83 c4 04             	add    esp,0x4
c00198f8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00198fd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019902:	25 80 00 00 00       	and    eax,0x80
c0019907:	74 73                	je     c001997c <picEOI(int)+0x98>
c0019909:	8d 76 00             	lea    esi,[esi+0x0]
c001990c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019911:	75 31                	jne    c0019944 <picEOI(int)+0x60>
c0019913:	6a 0b                	push   0xb
c0019915:	e8 ca fd ff ff       	call   c00196e4 <picGetIRQReg(int)>
c001991a:	83 c4 04             	add    esp,0x4
c001991d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0019922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019926:	66 85 c0             	test   ax,ax
c0019929:	78 19                	js     c0019944 <picEOI(int)+0x60>
c001992b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0019932:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019937:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001993b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019940:	ee                   	out    dx,al
c0019941:	eb 3d                	jmp    c0019980 <picEOI(int)+0x9c>
c0019943:	90                   	nop
c0019944:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019949:	7e 19                	jle    c0019964 <picEOI(int)+0x80>
c001994b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019952:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0019957:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001995b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019960:	ee                   	out    dx,al
c0019961:	8d 76 00             	lea    esi,[esi+0x0]
c0019964:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001996b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019970:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019974:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019979:	ee                   	out    dx,al
c001997a:	eb 04                	jmp    c0019980 <picEOI(int)+0x9c>
c001997c:	90                   	nop
c001997d:	8d 76 00             	lea    esi,[esi+0x0]
c0019980:	83 c4 10             	add    esp,0x10
c0019983:	c3                   	ret    

c0019984 <RTC::open(int, int, void*)>:
c0019984:	31 c0                	xor    eax,eax
c0019986:	c3                   	ret    
c0019987:	90                   	nop

c0019988 <RTC::close(int, int, void*)>:
c0019988:	31 c0                	xor    eax,eax
c001998a:	c3                   	ret    
c001998b:	90                   	nop

c001998c <RTC::timeInSecondsUTC()>:
c001998c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019990:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019996:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001999c:	c3                   	ret    
c001999d:	90                   	nop

c001999e <RTC::timeInDatetimeUTC()>:
c001999e:	53                   	push   ebx
c001999f:	83 ec 14             	sub    esp,0x14
c00199a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00199a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00199ac:	50                   	push   eax
c00199ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00199b0:	83 c4 0c             	add    esp,0xc
c00199b3:	52                   	push   edx
c00199b4:	50                   	push   eax
c00199b5:	53                   	push   ebx
c00199b6:	e8 1b 3f ff ff       	call   c000d8d6 <secondsToDatetime(unsigned long long)>
c00199bb:	89 d8                	mov    eax,ebx
c00199bd:	83 c4 14             	add    esp,0x14
c00199c0:	5b                   	pop    ebx
c00199c1:	c2 04 00             	ret    0x4

c00199c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00199c4:	56                   	push   esi
c00199c5:	53                   	push   ebx
c00199c6:	83 ec 14             	sub    esp,0x14
c00199c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00199d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d6:	52                   	push   edx
c00199d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199df:	50                   	push   eax
c00199e0:	e8 f1 3e ff ff       	call   c000d8d6 <secondsToDatetime(unsigned long long)>
c00199e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00199ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00199f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00199f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00199f9:	89 f0                	mov    eax,esi
c00199fb:	83 c4 20             	add    esp,0x20
c00199fe:	5b                   	pop    ebx
c00199ff:	5e                   	pop    esi
c0019a00:	ff e0                	jmp    eax

c0019a02 <RTC::~RTC()>:
c0019a02:	83 ec 0c             	sub    esp,0xc
c0019a05:	ba 60 4b 02 c0       	mov    edx,0xc0024b60
c0019a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a0e:	89 10                	mov    DWORD PTR [eax],edx
c0019a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a14:	83 ec 0c             	sub    esp,0xc
c0019a17:	50                   	push   eax
c0019a18:	e8 43 3c ff ff       	call   c000d660 <Clock::~Clock()>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	90                   	nop
c0019a21:	83 c4 0c             	add    esp,0xc
c0019a24:	c3                   	ret    
c0019a25:	90                   	nop

c0019a26 <RTC::~RTC()>:
c0019a26:	83 ec 0c             	sub    esp,0xc
c0019a29:	83 ec 0c             	sub    esp,0xc
c0019a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a30:	e8 cd ff ff ff       	call   c0019a02 <RTC::~RTC()>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	83 ec 08             	sub    esp,0x8
c0019a3b:	68 60 01 00 00       	push   0x160
c0019a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a44:	e8 bb 2b ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	83 c4 0c             	add    esp,0xc
c0019a4f:	c3                   	ret    

c0019a50 <RTC::get_update_in_progress_flag()>:
c0019a50:	83 ec 14             	sub    esp,0x14
c0019a53:	6a 0a                	push   0xa
c0019a55:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019a5b:	e8 a2 f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019a60:	83 c4 1c             	add    esp,0x1c
c0019a63:	c0 e8 07             	shr    al,0x7
c0019a66:	c3                   	ret    
c0019a67:	90                   	nop

c0019a68 <RTC::completeRTCRefresh()>:
c0019a68:	55                   	push   ebp
c0019a69:	57                   	push   edi
c0019a6a:	56                   	push   esi
c0019a6b:	53                   	push   ebx
c0019a6c:	83 ec 2c             	sub    esp,0x2c
c0019a6f:	8b 1d ac 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ac
c0019a75:	83 ec 0c             	sub    esp,0xc
c0019a78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019a7c:	e8 cf ff ff ff       	call   c0019a50 <RTC::get_update_in_progress_flag()>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	84 c0                	test   al,al
c0019a86:	74 0e                	je     c0019a96 <RTC::completeRTCRefresh()+0x2e>
c0019a88:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019a8e:	3b 05 ac 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ac
c0019a94:	73 df                	jae    c0019a75 <RTC::completeRTCRefresh()+0xd>
c0019a96:	55                   	push   ebp
c0019a97:	55                   	push   ebp
c0019a98:	6a 00                	push   0x0
c0019a9a:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019aa0:	e8 5d f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019aa5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019aa9:	58                   	pop    eax
c0019aaa:	5a                   	pop    edx
c0019aab:	6a 02                	push   0x2
c0019aad:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019ab3:	e8 4a f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019ab8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019abc:	59                   	pop    ecx
c0019abd:	5b                   	pop    ebx
c0019abe:	6a 04                	push   0x4
c0019ac0:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019ac6:	e8 37 f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019acb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0019acf:	5e                   	pop    esi
c0019ad0:	5f                   	pop    edi
c0019ad1:	6a 07                	push   0x7
c0019ad3:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019ad9:	e8 24 f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019ade:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0019ae2:	5d                   	pop    ebp
c0019ae3:	58                   	pop    eax
c0019ae4:	6a 08                	push   0x8
c0019ae6:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019aec:	e8 11 f3 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019af1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0019af5:	58                   	pop    eax
c0019af6:	5a                   	pop    edx
c0019af7:	6a 09                	push   0x9
c0019af9:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019aff:	e8 fe f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b04:	83 c4 10             	add    esp,0x10
c0019b07:	0f b6 e8             	movzx  ebp,al
c0019b0a:	8b 1d ac 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ac
c0019b10:	83 ec 0c             	sub    esp,0xc
c0019b13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019b17:	e8 34 ff ff ff       	call   c0019a50 <RTC::get_update_in_progress_flag()>
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	84 c0                	test   al,al
c0019b21:	74 0e                	je     c0019b31 <RTC::completeRTCRefresh()+0xc9>
c0019b23:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019b29:	3b 05 ac 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ac
c0019b2f:	73 df                	jae    c0019b10 <RTC::completeRTCRefresh()+0xa8>
c0019b31:	50                   	push   eax
c0019b32:	50                   	push   eax
c0019b33:	6a 00                	push   0x0
c0019b35:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019b3b:	e8 c2 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b40:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0019b44:	58                   	pop    eax
c0019b45:	5a                   	pop    edx
c0019b46:	6a 02                	push   0x2
c0019b48:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019b4e:	e8 af f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b53:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019b57:	59                   	pop    ecx
c0019b58:	5b                   	pop    ebx
c0019b59:	6a 04                	push   0x4
c0019b5b:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019b61:	e8 9c f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b66:	5e                   	pop    esi
c0019b67:	88 c3                	mov    bl,al
c0019b69:	5f                   	pop    edi
c0019b6a:	6a 07                	push   0x7
c0019b6c:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019b72:	e8 8b f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b77:	89 c6                	mov    esi,eax
c0019b79:	58                   	pop    eax
c0019b7a:	5a                   	pop    edx
c0019b7b:	6a 08                	push   0x8
c0019b7d:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019b83:	e8 7a f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b88:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019b8c:	59                   	pop    ecx
c0019b8d:	5f                   	pop    edi
c0019b8e:	6a 09                	push   0x9
c0019b90:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019b96:	e8 67 f2 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019b9b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019b9f:	0f b6 f8             	movzx  edi,al
c0019ba2:	83 c4 10             	add    esp,0x10
c0019ba5:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0019ba8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019bac:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0019bb0:	89 f1                	mov    ecx,esi
c0019bb2:	0f 94 c0             	sete   al
c0019bb5:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0019bb9:	0f 94 c2             	sete   dl
c0019bbc:	21 d0                	and    eax,edx
c0019bbe:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0019bc2:	0f 94 c2             	sete   dl
c0019bc5:	21 c2                	and    edx,eax
c0019bc7:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0019bcb:	0f 94 c0             	sete   al
c0019bce:	21 d0                	and    eax,edx
c0019bd0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019bd4:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0019bd8:	0f 94 c1             	sete   cl
c0019bdb:	84 c8                	test   al,cl
c0019bdd:	75 28                	jne    c0019c07 <RTC::completeRTCRefresh()+0x19f>
c0019bdf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019be3:	89 fd                	mov    ebp,edi
c0019be5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019be9:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0019bed:	89 f0                	mov    eax,esi
c0019bef:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0019bf3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019bf7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019bfb:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019bfe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019c02:	e9 03 ff ff ff       	jmp    c0019b0a <RTC::completeRTCRefresh()+0xa2>
c0019c07:	39 fd                	cmp    ebp,edi
c0019c09:	75 d4                	jne    c0019bdf <RTC::completeRTCRefresh()+0x177>
c0019c0b:	55                   	push   ebp
c0019c0c:	55                   	push   ebp
c0019c0d:	6a 0b                	push   0xb
c0019c0f:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019c15:	e8 e8 f1 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019c1a:	83 c4 10             	add    esp,0x10
c0019c1d:	89 c5                	mov    ebp,eax
c0019c1f:	a8 04                	test   al,0x4
c0019c21:	75 75                	jne    c0019c98 <RTC::completeRTCRefresh()+0x230>
c0019c23:	b1 0a                	mov    cl,0xa
c0019c25:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0019c28:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019c2b:	83 e2 0f             	and    edx,0xf
c0019c2e:	c0 e8 04             	shr    al,0x4
c0019c31:	c1 ef 04             	shr    edi,0x4
c0019c34:	f6 e1                	mul    cl
c0019c36:	6b ff 0a             	imul   edi,edi,0xa
c0019c39:	01 d0                	add    eax,edx
c0019c3b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019c3f:	88 04 24             	mov    BYTE PTR [esp],al
c0019c42:	83 e2 0f             	and    edx,0xf
c0019c45:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019c49:	c0 e8 04             	shr    al,0x4
c0019c4c:	f6 e1                	mul    cl
c0019c4e:	01 d0                	add    eax,edx
c0019c50:	88 da                	mov    dl,bl
c0019c52:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019c56:	83 e2 0f             	and    edx,0xf
c0019c59:	88 d8                	mov    al,bl
c0019c5b:	83 e3 80             	and    ebx,0xffffff80
c0019c5e:	c0 e8 04             	shr    al,0x4
c0019c61:	83 e0 07             	and    eax,0x7
c0019c64:	f6 e1                	mul    cl
c0019c66:	01 d0                	add    eax,edx
c0019c68:	89 f2                	mov    edx,esi
c0019c6a:	09 c3                	or     ebx,eax
c0019c6c:	83 e2 0f             	and    edx,0xf
c0019c6f:	89 f0                	mov    eax,esi
c0019c71:	c0 e8 04             	shr    al,0x4
c0019c74:	f6 e1                	mul    cl
c0019c76:	8d 34 02             	lea    esi,[edx+eax*1]
c0019c79:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0019c7d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019c81:	83 e2 0f             	and    edx,0xf
c0019c84:	c0 e8 04             	shr    al,0x4
c0019c87:	f6 e1                	mul    cl
c0019c89:	01 d0                	add    eax,edx
c0019c8b:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0019c8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c93:	83 e0 0f             	and    eax,0xf
c0019c96:	01 c7                	add    edi,eax
c0019c98:	83 e5 02             	and    ebp,0x2
c0019c9b:	75 14                	jne    c0019cb1 <RTC::completeRTCRefresh()+0x249>
c0019c9d:	84 db                	test   bl,bl
c0019c9f:	79 10                	jns    c0019cb1 <RTC::completeRTCRefresh()+0x249>
c0019ca1:	83 e3 7f             	and    ebx,0x7f
c0019ca4:	b9 18 00 00 00       	mov    ecx,0x18
c0019ca9:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019cac:	99                   	cdq    
c0019cad:	f7 f9                	idiv   ecx
c0019caf:	88 d3                	mov    bl,dl
c0019cb1:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019cb7:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0019cbd:	77 06                	ja     c0019cc5 <RTC::completeRTCRefresh()+0x25d>
c0019cbf:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0019cc5:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c0019cc9:	31 d2                	xor    edx,edx
c0019ccb:	c1 e1 10             	shl    ecx,0x10
c0019cce:	89 d7                	mov    edi,edx
c0019cd0:	c1 e5 10             	shl    ebp,0x10
c0019cd3:	31 c0                	xor    eax,eax
c0019cd5:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019cdb:	09 cf                	or     edi,ecx
c0019cdd:	89 f1                	mov    ecx,esi
c0019cdf:	89 fa                	mov    edx,edi
c0019ce1:	88 c8                	mov    al,cl
c0019ce3:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0019ce7:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0019ceb:	88 da                	mov    dl,bl
c0019ced:	0f b7 c8             	movzx  ecx,ax
c0019cf0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019cf4:	09 e9                	or     ecx,ebp
c0019cf6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019cf9:	0f b6 db             	movzx  ebx,bl
c0019cfc:	50                   	push   eax
c0019cfd:	50                   	push   eax
c0019cfe:	53                   	push   ebx
c0019cff:	68 91 4a 02 c0       	push   0xc0024a91
c0019d04:	e8 dc 29 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019d09:	5a                   	pop    edx
c0019d0a:	59                   	pop    ecx
c0019d0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d13:	52                   	push   edx
c0019d14:	50                   	push   eax
c0019d15:	e8 35 3a ff ff       	call   c000d74f <datetimeToSeconds(datetime_t)>
c0019d1a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0019d1e:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019d24:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019d2a:	83 c4 3c             	add    esp,0x3c
c0019d2d:	5b                   	pop    ebx
c0019d2e:	5e                   	pop    esi
c0019d2f:	5f                   	pop    edi
c0019d30:	5d                   	pop    ebp
c0019d31:	c3                   	ret    

c0019d32 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019d32:	55                   	push   ebp
c0019d33:	57                   	push   edi
c0019d34:	56                   	push   esi
c0019d35:	53                   	push   ebx
c0019d36:	83 ec 40             	sub    esp,0x40
c0019d39:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0019d3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019d41:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019d45:	0f b6 6c 24 10       	movzx  ebp,BYTE PTR [esp+0x10]
c0019d4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d4e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019d52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d56:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0019d5a:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d62:	0f b6 fe             	movzx  edi,dh
c0019d65:	0f b6 c4             	movzx  eax,ah
c0019d68:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0019d6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d70:	89 d7                	mov    edi,edx
c0019d72:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c0019d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d7b:	c1 ef 10             	shr    edi,0x10
c0019d7e:	c1 e8 10             	shr    eax,0x10
c0019d81:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0019d85:	89 c6                	mov    esi,eax
c0019d87:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0019d8c:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0019d90:	89 fa                	mov    edx,edi
c0019d92:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0019d97:	88 54 24 2c          	mov    BYTE PTR [esp+0x2c],dl
c0019d9b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0019d9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019da3:	0f b6 fb             	movzx  edi,bl
c0019da6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019daa:	57                   	push   edi
c0019dab:	50                   	push   eax
c0019dac:	51                   	push   ecx
c0019dad:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0019db1:	55                   	push   ebp
c0019db2:	68 a7 4a 02 c0       	push   0xc0024aa7
c0019db7:	e8 29 29 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019dbc:	83 c4 1c             	add    esp,0x1c
c0019dbf:	6a 00                	push   0x0
c0019dc1:	6a 00                	push   0x0
c0019dc3:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019dc9:	e8 52 f1 fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019dce:	83 c4 0c             	add    esp,0xc
c0019dd1:	6a 00                	push   0x0
c0019dd3:	6a 02                	push   0x2
c0019dd5:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019ddb:	e8 40 f1 fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019de0:	b9 64 00 00 00       	mov    ecx,0x64
c0019de5:	89 f0                	mov    eax,esi
c0019de7:	31 d2                	xor    edx,edx
c0019de9:	66 f7 f1             	div    cx
c0019dec:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c0019df0:	89 d6                	mov    esi,edx
c0019df2:	58                   	pop    eax
c0019df3:	5a                   	pop    edx
c0019df4:	6a 0b                	push   0xb
c0019df6:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019dfc:	e8 01 f0 fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019e01:	c7 04 24 c2 4a 02 c0 	mov    DWORD PTR [esp],0xc0024ac2
c0019e08:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0019e0c:	e8 d4 28 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019e11:	83 c4 0c             	add    esp,0xc
c0019e14:	0f b7 c6             	movzx  eax,si
c0019e17:	50                   	push   eax
c0019e18:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019e1c:	51                   	push   ecx
c0019e1d:	55                   	push   ebp
c0019e1e:	57                   	push   edi
c0019e1f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e23:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e27:	68 d8 4a 02 c0       	push   0xc0024ad8
c0019e2c:	e8 b4 28 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019e31:	83 c4 20             	add    esp,0x20
c0019e34:	f6 44 24 2b 04       	test   BYTE PTR [esp+0x2b],0x4
c0019e39:	0f 85 88 00 00 00    	jne    c0019ec7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x195>
c0019e3f:	83 ec 0c             	sub    esp,0xc
c0019e42:	68 18 4b 02 c0       	push   0xc0024b18
c0019e47:	e8 99 28 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019e4c:	b2 0a                	mov    dl,0xa
c0019e4e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019e53:	f6 f2                	div    dl
c0019e55:	88 c1                	mov    cl,al
c0019e57:	88 e0                	mov    al,ah
c0019e59:	c1 e1 04             	shl    ecx,0x4
c0019e5c:	09 c1                	or     ecx,eax
c0019e5e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0019e63:	88 4c 24 38          	mov    BYTE PTR [esp+0x38],cl
c0019e67:	f6 f2                	div    dl
c0019e69:	88 c1                	mov    cl,al
c0019e6b:	88 e0                	mov    al,ah
c0019e6d:	c1 e1 04             	shl    ecx,0x4
c0019e70:	09 c1                	or     ecx,eax
c0019e72:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0019e77:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c0019e7b:	f6 f2                	div    dl
c0019e7d:	88 c3                	mov    bl,al
c0019e7f:	88 e0                	mov    al,ah
c0019e81:	c1 e3 04             	shl    ebx,0x4
c0019e84:	09 c3                	or     ebx,eax
c0019e86:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0019e8b:	f6 f2                	div    dl
c0019e8d:	88 c1                	mov    cl,al
c0019e8f:	88 e0                	mov    al,ah
c0019e91:	c1 e1 04             	shl    ecx,0x4
c0019e94:	09 c1                	or     ecx,eax
c0019e96:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c0019e9b:	88 4c 24 39          	mov    BYTE PTR [esp+0x39],cl
c0019e9f:	f6 f2                	div    dl
c0019ea1:	88 c1                	mov    cl,al
c0019ea3:	88 e0                	mov    al,ah
c0019ea5:	c1 e1 04             	shl    ecx,0x4
c0019ea8:	09 c1                	or     ecx,eax
c0019eaa:	89 f0                	mov    eax,esi
c0019eac:	88 4c 24 28          	mov    BYTE PTR [esp+0x28],cl
c0019eb0:	0f b6 c0             	movzx  eax,al
c0019eb3:	83 c4 10             	add    esp,0x10
c0019eb6:	f6 f2                	div    dl
c0019eb8:	89 c6                	mov    esi,eax
c0019eba:	88 e0                	mov    al,ah
c0019ebc:	c1 e6 04             	shl    esi,0x4
c0019ebf:	09 c6                	or     esi,eax
c0019ec1:	89 f0                	mov    eax,esi
c0019ec3:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0019ec7:	f6 44 24 2b 02       	test   BYTE PTR [esp+0x2b],0x2
c0019ecc:	75 27                	jne    c0019ef5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019ece:	83 ec 0c             	sub    esp,0xc
c0019ed1:	68 29 4b 02 c0       	push   0xc0024b29
c0019ed6:	e8 0a 28 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019edb:	83 c4 10             	add    esp,0x10
c0019ede:	80 fb 0b             	cmp    bl,0xb
c0019ee1:	76 0c                	jbe    c0019eef <RTC::setTimeInDatetimeUTC(datetime_t)+0x1bd>
c0019ee3:	80 eb 0c             	sub    bl,0xc
c0019ee6:	75 02                	jne    c0019eea <RTC::setTimeInDatetimeUTC(datetime_t)+0x1b8>
c0019ee8:	b3 0c                	mov    bl,0xc
c0019eea:	83 cb 80             	or     ebx,0xffffff80
c0019eed:	eb 06                	jmp    c0019ef5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019eef:	84 db                	test   bl,bl
c0019ef1:	75 02                	jne    c0019ef5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019ef3:	b3 0c                	mov    bl,0xc
c0019ef5:	0f b6 54 24 29       	movzx  edx,BYTE PTR [esp+0x29]
c0019efa:	0f b6 74 24 2a       	movzx  esi,BYTE PTR [esp+0x2a]
c0019eff:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0019f04:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019f09:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c0019f0e:	0f b6 db             	movzx  ebx,bl
c0019f11:	51                   	push   ecx
c0019f12:	56                   	push   esi
c0019f13:	55                   	push   ebp
c0019f14:	52                   	push   edx
c0019f15:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0019f19:	53                   	push   ebx
c0019f1a:	57                   	push   edi
c0019f1b:	50                   	push   eax
c0019f1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f20:	68 d8 4a 02 c0       	push   0xc0024ad8
c0019f25:	e8 bb 27 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0019f2a:	83 c4 1c             	add    esp,0x1c
c0019f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f31:	50                   	push   eax
c0019f32:	6a 00                	push   0x0
c0019f34:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019f3a:	e8 e1 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f3f:	83 c4 0c             	add    esp,0xc
c0019f42:	57                   	push   edi
c0019f43:	6a 02                	push   0x2
c0019f45:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019f4b:	e8 d0 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f50:	83 c4 0c             	add    esp,0xc
c0019f53:	53                   	push   ebx
c0019f54:	6a 04                	push   0x4
c0019f56:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019f5c:	e8 bf ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f61:	83 c4 0c             	add    esp,0xc
c0019f64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f68:	52                   	push   edx
c0019f69:	6a 07                	push   0x7
c0019f6b:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019f71:	e8 aa ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f76:	83 c4 0c             	add    esp,0xc
c0019f79:	55                   	push   ebp
c0019f7a:	6a 08                	push   0x8
c0019f7c:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019f82:	e8 99 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f87:	83 c4 0c             	add    esp,0xc
c0019f8a:	56                   	push   esi
c0019f8b:	6a 09                	push   0x9
c0019f8d:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019f93:	e8 88 ef fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019f98:	5b                   	pop    ebx
c0019f99:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019f9d:	e8 c6 fa ff ff       	call   c0019a68 <RTC::completeRTCRefresh()>
c0019fa2:	83 c4 4c             	add    esp,0x4c
c0019fa5:	b0 01                	mov    al,0x1
c0019fa7:	5b                   	pop    ebx
c0019fa8:	5e                   	pop    esi
c0019fa9:	5f                   	pop    edi
c0019faa:	5d                   	pop    ebp
c0019fab:	c3                   	ret    

c0019fac <rtcIRQHandler(regs*, void*)>:
c0019fac:	53                   	push   ebx
c0019fad:	83 ec 10             	sub    esp,0x10
c0019fb0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019fb4:	6a 0c                	push   0xc
c0019fb6:	ff 35 c8 62 02 c0    	push   DWORD PTR ds:0xc00262c8
c0019fbc:	e8 41 ee fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c0019fc1:	83 c4 10             	add    esp,0x10
c0019fc4:	84 c0                	test   al,al
c0019fc6:	79 24                	jns    c0019fec <rtcIRQHandler(regs*, void*)+0x40>
c0019fc8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019fcf:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019fd6:	66 ff 05 a0 98 02 c0 	inc    WORD PTR ds:0xc00298a0
c0019fdd:	75 0d                	jne    c0019fec <rtcIRQHandler(regs*, void*)+0x40>
c0019fdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019fe3:	83 c4 08             	add    esp,0x8
c0019fe6:	5b                   	pop    ebx
c0019fe7:	e9 7c fa ff ff       	jmp    c0019a68 <RTC::completeRTCRefresh()>
c0019fec:	83 c4 08             	add    esp,0x8
c0019fef:	5b                   	pop    ebx
c0019ff0:	c3                   	ret    
c0019ff1:	90                   	nop

c0019ff2 <RTC::RTC()>:
c0019ff2:	83 ec 1c             	sub    esp,0x1c
c0019ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ff9:	83 ec 08             	sub    esp,0x8
c0019ffc:	68 41 4b 02 c0       	push   0xc0024b41
c001a001:	50                   	push   eax
c001a002:	e8 23 36 ff ff       	call   c000d62a <Clock::Clock(char const*)>
c001a007:	83 c4 10             	add    esp,0x10
c001a00a:	ba 60 4b 02 c0       	mov    edx,0xc0024b60
c001a00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a013:	89 10                	mov    DWORD PTR [eax],edx
c001a015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a019:	83 ec 0c             	sub    esp,0xc
c001a01c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a020:	6a 01                	push   0x1
c001a022:	68 ac 9f 01 c0       	push   0xc0019fac
c001a027:	6a 08                	push   0x8
c001a029:	50                   	push   eax
c001a02a:	e8 df 3a ff ff       	call   c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a02f:	83 c4 20             	add    esp,0x20
c001a032:	89 c2                	mov    edx,eax
c001a034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a038:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a03e:	fa                   	cli    
c001a03f:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001a044:	40                   	inc    eax
c001a045:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001a04a:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001a04f:	83 ec 08             	sub    esp,0x8
c001a052:	6a 0b                	push   0xb
c001a054:	50                   	push   eax
c001a055:	e8 a8 ed fe ff       	call   c0008e02 <Computer::readCMOS(unsigned char)>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a061:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001a066:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001a06a:	83 ca 10             	or     edx,0x10
c001a06d:	0f b6 d2             	movzx  edx,dl
c001a070:	83 ec 04             	sub    esp,0x4
c001a073:	52                   	push   edx
c001a074:	6a 0b                	push   0xb
c001a076:	50                   	push   eax
c001a077:	e8 a4 ee fe ff       	call   c0008f20 <Computer::writeCMOS(unsigned char, unsigned char)>
c001a07c:	83 c4 10             	add    esp,0x10
c001a07f:	83 ec 0c             	sub    esp,0xc
c001a082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a086:	e8 dd f9 ff ff       	call   c0019a68 <RTC::completeRTCRefresh()>
c001a08b:	83 c4 10             	add    esp,0x10
c001a08e:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001a093:	48                   	dec    eax
c001a094:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c001a099:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001a09e:	85 c0                	test   eax,eax
c001a0a0:	75 01                	jne    c001a0a3 <RTC::RTC()+0xb1>
c001a0a2:	fb                   	sti    
c001a0a3:	90                   	nop
c001a0a4:	83 c4 1c             	add    esp,0x1c
c001a0a7:	c3                   	ret    

c001a0a8 <Hal::consoleScroll(int, int)>:
c001a0a8:	83 ec 10             	sub    esp,0x10
c001a0ab:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001a0b3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001a0bb:	90                   	nop
c001a0bc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a0c1:	0f 8f e1 00 00 00    	jg     c001a1a8 <Hal::consoleScroll(int, int)+0x100>
c001a0c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0cf:	90                   	nop
c001a0d0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001a0d8:	0f 8f be 00 00 00    	jg     c001a19c <Hal::consoleScroll(int, int)+0xf4>
c001a0de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0e2:	89 d0                	mov    eax,edx
c001a0e4:	c1 e0 02             	shl    eax,0x2
c001a0e7:	01 d0                	add    eax,edx
c001a0e9:	c1 e0 05             	shl    eax,0x5
c001a0ec:	89 c2                	mov    edx,eax
c001a0ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0f2:	01 d0                	add    eax,edx
c001a0f4:	89 c2                	mov    edx,eax
c001a0f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0fa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a0fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a101:	89 d0                	mov    eax,edx
c001a103:	c1 e0 02             	shl    eax,0x2
c001a106:	01 d0                	add    eax,edx
c001a108:	c1 e0 05             	shl    eax,0x5
c001a10b:	89 c2                	mov    edx,eax
c001a10d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a111:	01 d0                	add    eax,edx
c001a113:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001a119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a11d:	01 c2                	add    edx,eax
c001a11f:	8a 01                	mov    al,BYTE PTR [ecx]
c001a121:	88 02                	mov    BYTE PTR [edx],al
c001a123:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a128:	75 66                	jne    c001a190 <Hal::consoleScroll(int, int)+0xe8>
c001a12a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a12e:	83 e0 01             	and    eax,0x1
c001a131:	74 39                	je     c001a16c <Hal::consoleScroll(int, int)+0xc4>
c001a133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a137:	83 e0 0f             	and    eax,0xf
c001a13a:	88 c2                	mov    dl,al
c001a13c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a140:	c1 e0 04             	shl    eax,0x4
c001a143:	88 d1                	mov    cl,dl
c001a145:	09 c1                	or     ecx,eax
c001a147:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a14b:	89 d0                	mov    eax,edx
c001a14d:	c1 e0 02             	shl    eax,0x2
c001a150:	01 d0                	add    eax,edx
c001a152:	c1 e0 05             	shl    eax,0x5
c001a155:	89 c2                	mov    edx,eax
c001a157:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a15b:	01 d0                	add    eax,edx
c001a15d:	89 c2                	mov    edx,eax
c001a15f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a163:	01 d0                	add    eax,edx
c001a165:	88 ca                	mov    dl,cl
c001a167:	88 10                	mov    BYTE PTR [eax],dl
c001a169:	eb 25                	jmp    c001a190 <Hal::consoleScroll(int, int)+0xe8>
c001a16b:	90                   	nop
c001a16c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a170:	89 d0                	mov    eax,edx
c001a172:	c1 e0 02             	shl    eax,0x2
c001a175:	01 d0                	add    eax,edx
c001a177:	c1 e0 05             	shl    eax,0x5
c001a17a:	89 c2                	mov    edx,eax
c001a17c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a180:	01 d0                	add    eax,edx
c001a182:	89 c2                	mov    edx,eax
c001a184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a188:	01 d0                	add    eax,edx
c001a18a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001a18d:	8d 76 00             	lea    esi,[esi+0x0]
c001a190:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a194:	e9 37 ff ff ff       	jmp    c001a0d0 <Hal::consoleScroll(int, int)+0x28>
c001a199:	8d 76 00             	lea    esi,[esi+0x0]
c001a19c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a1a0:	e9 17 ff ff ff       	jmp    c001a0bc <Hal::consoleScroll(int, int)+0x14>
c001a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a8:	90                   	nop
c001a1a9:	83 c4 10             	add    esp,0x10
c001a1ac:	c3                   	ret    
c001a1ad:	8d 76 00             	lea    esi,[esi+0x0]

c001a1b0 <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c001a1b0:	83 ec 14             	sub    esp,0x14
c001a1b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1b7:	88 04 24             	mov    BYTE PTR [esp],al
c001a1ba:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a1bd:	0f b6 c0             	movzx  eax,al
c001a1c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1c4:	89 d1                	mov    ecx,edx
c001a1c6:	83 e1 0f             	and    ecx,0xf
c001a1c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a1cd:	c1 e2 04             	shl    edx,0x4
c001a1d0:	0f b6 d2             	movzx  edx,dl
c001a1d3:	09 ca                	or     edx,ecx
c001a1d5:	c1 e2 08             	shl    edx,0x8
c001a1d8:	09 d0                	or     eax,edx
c001a1da:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001a1df:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001a1e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a1eb:	89 d0                	mov    eax,edx
c001a1ed:	c1 e0 02             	shl    eax,0x2
c001a1f0:	01 d0                	add    eax,edx
c001a1f2:	c1 e0 04             	shl    eax,0x4
c001a1f5:	89 c2                	mov    edx,eax
c001a1f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a1fb:	01 d0                	add    eax,edx
c001a1fd:	01 c0                	add    eax,eax
c001a1ff:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001a203:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a207:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001a20c:	66 89 02             	mov    WORD PTR [edx],ax
c001a20f:	90                   	nop
c001a210:	83 c4 14             	add    esp,0x14
c001a213:	c3                   	ret    

c001a214 <Hal::consoleCursorUpdate(int, int)>:
c001a214:	83 ec 20             	sub    esp,0x20
c001a217:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a21b:	89 c2                	mov    edx,eax
c001a21d:	89 d0                	mov    eax,edx
c001a21f:	c1 e0 02             	shl    eax,0x2
c001a222:	01 d0                	add    eax,edx
c001a224:	c1 e0 04             	shl    eax,0x4
c001a227:	89 c2                	mov    edx,eax
c001a229:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a22d:	01 d0                	add    eax,edx
c001a22f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001a234:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001a23b:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001a240:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a244:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a248:	ee                   	out    dx,al
c001a249:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a24e:	0f b6 c0             	movzx  eax,al
c001a251:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001a258:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a25c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a260:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a264:	ee                   	out    dx,al
c001a265:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001a26c:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001a271:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a275:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a279:	ee                   	out    dx,al
c001a27a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a27f:	66 c1 e8 08          	shr    ax,0x8
c001a283:	0f b6 c0             	movzx  eax,al
c001a286:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001a28d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a291:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a295:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a299:	ee                   	out    dx,al
c001a29a:	90                   	nop
c001a29b:	83 c4 20             	add    esp,0x20
c001a29e:	c3                   	ret    
c001a29f:	90                   	nop

c001a2a0 <FAT::getName()>:
c001a2a0:	b8 94 4b 02 c0       	mov    eax,0xc0024b94
c001a2a5:	c3                   	ret    
c001a2a6:	66 90                	xchg   ax,ax

c001a2a8 <FAT::tell(void*, unsigned long long*)>:
c001a2a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a2ad:	75 09                	jne    c001a2b8 <FAT::tell(void*, unsigned long long*)+0x10>
c001a2af:	b8 04 00 00 00       	mov    eax,0x4
c001a2b4:	c3                   	ret    
c001a2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a2bd:	75 09                	jne    c001a2c8 <FAT::tell(void*, unsigned long long*)+0x20>
c001a2bf:	b8 04 00 00 00       	mov    eax,0x4
c001a2c4:	c3                   	ret    
c001a2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2cc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a2cf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a2d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2d6:	89 01                	mov    DWORD PTR [ecx],eax
c001a2d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a2db:	b8 00 00 00 00       	mov    eax,0x0
c001a2e0:	c3                   	ret    
c001a2e1:	90                   	nop
c001a2e2:	66 90                	xchg   ax,ax

c001a2e4 <FAT::stat(void*, unsigned long long*)>:
c001a2e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a2e9:	75 09                	jne    c001a2f4 <FAT::stat(void*, unsigned long long*)+0x10>
c001a2eb:	b8 04 00 00 00       	mov    eax,0x4
c001a2f0:	c3                   	ret    
c001a2f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a2f9:	75 09                	jne    c001a304 <FAT::stat(void*, unsigned long long*)+0x20>
c001a2fb:	b8 04 00 00 00       	mov    eax,0x4
c001a300:	c3                   	ret    
c001a301:	8d 76 00             	lea    esi,[esi+0x0]
c001a304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a308:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a30b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a30e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a312:	89 01                	mov    DWORD PTR [ecx],eax
c001a314:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a317:	b8 00 00 00 00       	mov    eax,0x0
c001a31c:	c3                   	ret    
c001a31d:	90                   	nop
c001a31e:	66 90                	xchg   ax,ax

c001a320 <FAT::~FAT()>:
c001a320:	83 ec 0c             	sub    esp,0xc
c001a323:	ba e0 4b 02 c0       	mov    edx,0xc0024be0
c001a328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a32c:	89 10                	mov    DWORD PTR [eax],edx
c001a32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a332:	83 ec 0c             	sub    esp,0xc
c001a335:	50                   	push   eax
c001a336:	e8 e5 26 ff ff       	call   c000ca20 <Filesystem::~Filesystem()>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	90                   	nop
c001a33f:	83 c4 0c             	add    esp,0xc
c001a342:	c3                   	ret    
c001a343:	90                   	nop

c001a344 <FAT::~FAT()>:
c001a344:	83 ec 0c             	sub    esp,0xc
c001a347:	83 ec 0c             	sub    esp,0xc
c001a34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a34e:	e8 cd ff ff ff       	call   c001a320 <FAT::~FAT()>
c001a353:	83 c4 10             	add    esp,0x10
c001a356:	83 ec 08             	sub    esp,0x8
c001a359:	6a 08                	push   0x8
c001a35b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a35f:	e8 a0 22 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	83 c4 0c             	add    esp,0xc
c001a36a:	c3                   	ret    
c001a36b:	90                   	nop

c001a36c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a36c:	83 ec 1c             	sub    esp,0x1c
c001a36f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a376:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a37b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a37f:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a386:	83 f8 ff             	cmp    eax,0xffffffff
c001a389:	75 35                	jne    c001a3c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a38b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a38f:	88 c2                	mov    dl,al
c001a391:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a396:	01 d0                	add    eax,edx
c001a398:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a39c:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a3a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a3a6:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a3ad:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a3b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3b6:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a3bd:	eb 19                	jmp    c001a3d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a3bf:	90                   	nop
c001a3c0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a3c4:	88 c2                	mov    dl,al
c001a3c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a3ca:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a3d1:	01 d0                	add    eax,edx
c001a3d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a3d7:	90                   	nop
c001a3d8:	83 ec 04             	sub    esp,0x4
c001a3db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a3df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a3e3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a3e7:	50                   	push   eax
c001a3e8:	e8 69 c6 fe ff       	call   c0006a56 <f_getlabel>
c001a3ed:	83 c4 10             	add    esp,0x10
c001a3f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a3f9:	75 09                	jne    c001a404 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a3fb:	b8 00 00 00 00       	mov    eax,0x0
c001a400:	eb 0a                	jmp    c001a40c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a402:	66 90                	xchg   ax,ax
c001a404:	b8 01 00 00 00       	mov    eax,0x1
c001a409:	8d 76 00             	lea    esi,[esi+0x0]
c001a40c:	83 c4 1c             	add    esp,0x1c
c001a40f:	c3                   	ret    

c001a410 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a410:	57                   	push   edi
c001a411:	83 ec 58             	sub    esp,0x58
c001a414:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a41c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a420:	b9 0f 00 00 00       	mov    ecx,0xf
c001a425:	b8 00 00 00 00       	mov    eax,0x0
c001a42a:	fc                   	cld    
c001a42b:	89 d7                	mov    edi,edx
c001a42d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a42f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a433:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a43a:	83 f8 ff             	cmp    eax,0xffffffff
c001a43d:	75 35                	jne    c001a474 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a43f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a443:	88 c2                	mov    dl,al
c001a445:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a44a:	01 d0                	add    eax,edx
c001a44c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a450:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a456:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a45a:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a461:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a466:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a46a:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a471:	eb 19                	jmp    c001a48c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a473:	90                   	nop
c001a474:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a478:	88 c2                	mov    dl,al
c001a47a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a47e:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a485:	01 d0                	add    eax,edx
c001a487:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a48b:	90                   	nop
c001a48c:	83 ec 08             	sub    esp,0x8
c001a48f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a493:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a497:	50                   	push   eax
c001a498:	e8 07 62 fe ff       	call   c00006a4 <strcat>
c001a49d:	83 c4 10             	add    esp,0x10
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a4a7:	50                   	push   eax
c001a4a8:	e8 97 c7 fe ff       	call   c0006c44 <f_setlabel>
c001a4ad:	83 c4 10             	add    esp,0x10
c001a4b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a4b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a4b9:	75 09                	jne    c001a4c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a4bb:	b8 00 00 00 00       	mov    eax,0x0
c001a4c0:	eb 0a                	jmp    c001a4cc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a4c2:	66 90                	xchg   ax,ax
c001a4c4:	b8 01 00 00 00       	mov    eax,0x1
c001a4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4cc:	83 c4 58             	add    esp,0x58
c001a4cf:	5f                   	pop    edi
c001a4d0:	c3                   	ret    
c001a4d1:	90                   	nop
c001a4d2:	66 90                	xchg   ax,ax

c001a4d4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a4d4:	83 ec 2c             	sub    esp,0x2c
c001a4d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a4df:	83 ec 08             	sub    esp,0x8
c001a4e2:	68 b8 4b 02 c0       	push   0xc0024bb8
c001a4e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4eb:	e8 00 61 fe ff       	call   c00005f0 <strcmp>
c001a4f0:	83 c4 10             	add    esp,0x10
c001a4f3:	85 c0                	test   eax,eax
c001a4f5:	0f 94 c0             	sete   al
c001a4f8:	84 c0                	test   al,al
c001a4fa:	74 10                	je     c001a50c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a4fc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a504:	e9 b3 00 00 00       	jmp    c001a5bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a509:	8d 76 00             	lea    esi,[esi+0x0]
c001a50c:	83 ec 08             	sub    esp,0x8
c001a50f:	68 aa 4b 02 c0       	push   0xc0024baa
c001a514:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a518:	e8 d3 60 fe ff       	call   c00005f0 <strcmp>
c001a51d:	83 c4 10             	add    esp,0x10
c001a520:	85 c0                	test   eax,eax
c001a522:	0f 94 c0             	sete   al
c001a525:	84 c0                	test   al,al
c001a527:	74 0f                	je     c001a538 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a529:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a531:	e9 86 00 00 00       	jmp    c001a5bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a536:	66 90                	xchg   ax,ax
c001a538:	83 ec 08             	sub    esp,0x8
c001a53b:	68 b0 4b 02 c0       	push   0xc0024bb0
c001a540:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a544:	e8 a7 60 fe ff       	call   c00005f0 <strcmp>
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	85 c0                	test   eax,eax
c001a54e:	0f 94 c0             	sete   al
c001a551:	84 c0                	test   al,al
c001a553:	74 0b                	je     c001a560 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a555:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a55d:	eb 5d                	jmp    c001a5bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a55f:	90                   	nop
c001a560:	83 ec 08             	sub    esp,0x8
c001a563:	68 6c 23 02 c0       	push   0xc002236c
c001a568:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a56c:	e8 7f 60 fe ff       	call   c00005f0 <strcmp>
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	85 c0                	test   eax,eax
c001a576:	0f 94 c0             	sete   al
c001a579:	84 c0                	test   al,al
c001a57b:	74 0b                	je     c001a588 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a57d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a585:	eb 35                	jmp    c001a5bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a587:	90                   	nop
c001a588:	83 ec 08             	sub    esp,0x8
c001a58b:	68 b6 4b 02 c0       	push   0xc0024bb6
c001a590:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a594:	e8 57 60 fe ff       	call   c00005f0 <strcmp>
c001a599:	83 c4 10             	add    esp,0x10
c001a59c:	85 c0                	test   eax,eax
c001a59e:	0f 94 c0             	sete   al
c001a5a1:	84 c0                	test   al,al
c001a5a3:	74 0b                	je     c001a5b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a5a5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a5ad:	eb 0d                	jmp    c001a5bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a5af:	90                   	nop
c001a5b0:	b8 08 00 00 00       	mov    eax,0x8
c001a5b5:	e9 ea 00 00 00       	jmp    c001a6a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a5ba:	66 90                	xchg   ax,ax
c001a5bc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a5c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a5c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5cc:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a5d3:	83 f8 ff             	cmp    eax,0xffffffff
c001a5d6:	75 34                	jne    c001a60c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a5d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a5dc:	88 c2                	mov    dl,al
c001a5de:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a5e3:	01 d0                	add    eax,edx
c001a5e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a5e9:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a5ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5f3:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a5fa:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a5ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a603:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a60a:	eb 18                	jmp    c001a624 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a60c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a610:	88 c2                	mov    dl,al
c001a612:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a616:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a61d:	01 d0                	add    eax,edx
c001a61f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a623:	90                   	nop
c001a624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a628:	88 04 24             	mov    BYTE PTR [esp],al
c001a62b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a62f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a633:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a63b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a640:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a648:	83 ec 0c             	sub    esp,0xc
c001a64b:	68 00 20 00 00       	push   0x2000
c001a650:	e8 42 f1 fe ff       	call   c0009797 <malloc>
c001a655:	83 c4 10             	add    esp,0x10
c001a658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a65c:	68 00 20 00 00       	push   0x2000
c001a661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a665:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a669:	50                   	push   eax
c001a66a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a66e:	50                   	push   eax
c001a66f:	e8 51 cc fe ff       	call   c00072c5 <f_mkfs>
c001a674:	83 c4 10             	add    esp,0x10
c001a677:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a67b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a680:	75 0a                	jne    c001a68c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a682:	b8 00 00 00 00       	mov    eax,0x0
c001a687:	eb 1b                	jmp    c001a6a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a689:	8d 76 00             	lea    esi,[esi+0x0]
c001a68c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a691:	75 09                	jne    c001a69c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a693:	b8 09 00 00 00       	mov    eax,0x9
c001a698:	eb 0a                	jmp    c001a6a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a69a:	66 90                	xchg   ax,ax
c001a69c:	b8 01 00 00 00       	mov    eax,0x1
c001a6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6a4:	83 c4 2c             	add    esp,0x2c
c001a6a7:	c3                   	ret    

c001a6a8 <FAT::tryMount(LogicalDisk*, int)>:
c001a6a8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a6ae:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a6b3:	83 f8 14             	cmp    eax,0x14
c001a6b6:	75 18                	jne    c001a6d0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a6b8:	83 ec 0c             	sub    esp,0xc
c001a6bb:	68 bc 4b 02 c0       	push   0xc0024bbc
c001a6c0:	e8 8a 83 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001a6c5:	83 c4 10             	add    esp,0x10
c001a6c8:	b0 00                	mov    al,0x0
c001a6ca:	e9 e9 01 00 00       	jmp    c001a8b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a6cf:	90                   	nop
c001a6d0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a6d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a6dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a6e3:	3d 00 02 00 00       	cmp    eax,0x200
c001a6e8:	74 0a                	je     c001a6f4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a6ea:	b0 00                	mov    al,0x0
c001a6ec:	e9 c7 01 00 00       	jmp    c001a8b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6f4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a6fc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a703:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a70a:	83 f8 ff             	cmp    eax,0xffffffff
c001a70d:	74 09                	je     c001a718 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a70f:	b0 01                	mov    al,0x1
c001a711:	e9 a2 01 00 00       	jmp    c001a8b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a716:	66 90                	xchg   ax,ax
c001a718:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a722:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a72a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a731:	88 c2                	mov    dl,al
c001a733:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a738:	01 d0                	add    eax,edx
c001a73a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a741:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a747:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a74e:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a755:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a75a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a761:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a768:	83 ec 0c             	sub    esp,0xc
c001a76b:	68 54 02 00 00       	push   0x254
c001a770:	e8 22 f0 fe ff       	call   c0009797 <malloc>
c001a775:	83 c4 10             	add    esp,0x10
c001a778:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a77f:	83 ec 04             	sub    esp,0x4
c001a782:	6a 00                	push   0x0
c001a784:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a78b:	50                   	push   eax
c001a78c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a793:	e8 b5 a4 fe ff       	call   c0004c4d <f_mount>
c001a798:	83 c4 10             	add    esp,0x10
c001a79b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a7a2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a7aa:	74 1c                	je     c001a7c8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a7ac:	83 ec 0c             	sub    esp,0xc
c001a7af:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a7b6:	e8 fc ef fe ff       	call   c00097b7 <rfree>
c001a7bb:	83 c4 10             	add    esp,0x10
c001a7be:	b0 00                	mov    al,0x0
c001a7c0:	e9 f3 00 00 00       	jmp    c001a8b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7c8:	83 ec 04             	sub    esp,0x4
c001a7cb:	68 00 01 00 00       	push   0x100
c001a7d0:	6a 00                	push   0x0
c001a7d2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a7d9:	50                   	push   eax
c001a7da:	e8 c9 5c fe ff       	call   c00004a8 <memset>
c001a7df:	83 c4 10             	add    esp,0x10
c001a7e2:	83 ec 08             	sub    esp,0x8
c001a7e5:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a7ec:	50                   	push   eax
c001a7ed:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a7f4:	50                   	push   eax
c001a7f5:	e8 aa 5e fe ff       	call   c00006a4 <strcat>
c001a7fa:	83 c4 10             	add    esp,0x10
c001a7fd:	83 ec 08             	sub    esp,0x8
c001a800:	68 ca 4b 02 c0       	push   0xc0024bca
c001a805:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a80c:	50                   	push   eax
c001a80d:	e8 92 5e fe ff       	call   c00006a4 <strcat>
c001a812:	83 c4 10             	add    esp,0x10
c001a815:	83 ec 04             	sub    esp,0x4
c001a818:	6a 01                	push   0x1
c001a81a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a821:	50                   	push   eax
c001a822:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a826:	50                   	push   eax
c001a827:	e8 83 a4 fe ff       	call   c0004caf <f_open>
c001a82c:	83 c4 10             	add    esp,0x10
c001a82f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a836:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a83d:	85 c0                	test   eax,eax
c001a83f:	74 0b                	je     c001a84c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a841:	78 31                	js     c001a874 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a843:	83 e8 04             	sub    eax,0x4
c001a846:	83 f8 01             	cmp    eax,0x1
c001a849:	77 29                	ja     c001a874 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a84b:	90                   	nop
c001a84c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a854:	83 ec 0c             	sub    esp,0xc
c001a857:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a85b:	50                   	push   eax
c001a85c:	e8 a0 af fe ff       	call   c0005801 <f_close>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	90                   	nop
c001a865:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a86d:	74 41                	je     c001a8b0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001a86f:	eb 33                	jmp    c001a8a4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a871:	8d 76 00             	lea    esi,[esi+0x0]
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a87e:	e8 34 ef fe ff       	call   c00097b7 <rfree>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	83 ec 04             	sub    esp,0x4
c001a889:	6a 00                	push   0x0
c001a88b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a892:	50                   	push   eax
c001a893:	6a 00                	push   0x0
c001a895:	e8 b3 a3 fe ff       	call   c0004c4d <f_mount>
c001a89a:	83 c4 10             	add    esp,0x10
c001a89d:	b0 00                	mov    al,0x0
c001a89f:	eb 17                	jmp    c001a8b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a4:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a8a9:	40                   	inc    eax
c001a8aa:	a3 c0 98 02 c0       	mov    ds:0xc00298c0,eax
c001a8af:	90                   	nop
c001a8b0:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a8b7:	90                   	nop
c001a8b8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a8be:	c3                   	ret    
c001a8bf:	90                   	nop

c001a8c0 <FAT::allocateSwapfile(char const*, int)>:
c001a8c0:	55                   	push   ebp
c001a8c1:	57                   	push   edi
c001a8c2:	56                   	push   esi
c001a8c3:	53                   	push   ebx
c001a8c4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a8ca:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a8d5:	83 ec 0c             	sub    esp,0xc
c001a8d8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a8df:	e8 b3 ee fe ff       	call   c0009797 <malloc>
c001a8e4:	83 c4 10             	add    esp,0x10
c001a8e7:	89 c7                	mov    edi,eax
c001a8e9:	a1 d0 97 02 c0       	mov    eax,ds:0xc00297d0
c001a8ee:	83 ec 04             	sub    esp,0x4
c001a8f1:	50                   	push   eax
c001a8f2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a8f9:	57                   	push   edi
c001a8fa:	e8 51 23 ff ff       	call   c000cc50 <File::File(char const*, Process*)>
c001a8ff:	83 c4 10             	add    esp,0x10
c001a902:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a909:	83 ec 04             	sub    esp,0x4
c001a90c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a910:	50                   	push   eax
c001a911:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a915:	50                   	push   eax
c001a916:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a91d:	e8 b4 26 ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c001a922:	83 c4 10             	add    esp,0x10
c001a925:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a92c:	c1 e0 14             	shl    eax,0x14
c001a92f:	89 c7                	mov    edi,eax
c001a931:	89 c5                	mov    ebp,eax
c001a933:	c1 fd 1f             	sar    ebp,0x1f
c001a936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a93e:	89 f9                	mov    ecx,edi
c001a940:	31 c1                	xor    ecx,eax
c001a942:	89 cb                	mov    ebx,ecx
c001a944:	89 e9                	mov    ecx,ebp
c001a946:	31 d1                	xor    ecx,edx
c001a948:	89 ce                	mov    esi,ecx
c001a94a:	89 f0                	mov    eax,esi
c001a94c:	09 d8                	or     eax,ebx
c001a94e:	0f 84 98 00 00 00    	je     c001a9ec <FAT::allocateSwapfile(char const*, int)+0x12c>
c001a954:	83 ec 0c             	sub    esp,0xc
c001a957:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a95e:	e8 3f 25 ff ff       	call   c000cea2 <File::unlink()>
c001a963:	83 c4 10             	add    esp,0x10
c001a966:	83 ec 08             	sub    esp,0x8
c001a969:	6a 12                	push   0x12
c001a96b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a972:	e8 b3 23 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c001a977:	83 c4 10             	add    esp,0x10
c001a97a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a981:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a987:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a98e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a995:	c1 e0 14             	shl    eax,0x14
c001a998:	99                   	cdq    
c001a999:	6a 01                	push   0x1
c001a99b:	52                   	push   edx
c001a99c:	50                   	push   eax
c001a99d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a9a4:	e8 08 c5 fe ff       	call   c0006eb1 <f_expand>
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a9b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9b5:	83 c0 10             	add    eax,0x10
c001a9b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9ba:	83 ec 0c             	sub    esp,0xc
c001a9bd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9c1:	52                   	push   edx
c001a9c2:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a9c6:	52                   	push   edx
c001a9c7:	6a 00                	push   0x0
c001a9c9:	68 00 04 00 00       	push   0x400
c001a9ce:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a9d5:	ff d0                	call   eax
c001a9d7:	83 c4 20             	add    esp,0x20
c001a9da:	83 ec 0c             	sub    esp,0xc
c001a9dd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a9e4:	e8 9f 23 ff ff       	call   c000cd88 <File::close()>
c001a9e9:	83 c4 10             	add    esp,0x10
c001a9ec:	83 ec 08             	sub    esp,0x8
c001a9ef:	6a 01                	push   0x1
c001a9f1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a9f8:	e8 2d 23 ff ff       	call   c000cd2a <File::open(FileOpenMode)>
c001a9fd:	83 c4 10             	add    esp,0x10
c001aa00:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa07:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa09:	83 c0 0c             	add    eax,0xc
c001aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa0e:	83 ec 0c             	sub    esp,0xc
c001aa11:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa15:	52                   	push   edx
c001aa16:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001aa1a:	52                   	push   edx
c001aa1b:	6a 00                	push   0x0
c001aa1d:	6a 04                	push   0x4
c001aa1f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001aa26:	ff d0                	call   eax
c001aa28:	83 c4 20             	add    esp,0x20
c001aa2b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa32:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aa38:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aa3f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001aa46:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001aa49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001aa4c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001aa53:	83 ec 0c             	sub    esp,0xc
c001aa56:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa5d:	e8 26 23 ff ff       	call   c000cd88 <File::close()>
c001aa62:	83 c4 10             	add    esp,0x10
c001aa65:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001aa6c:	ba 00 00 00 00       	mov    edx,0x0
c001aa71:	81 c4 3c 04 00 00    	add    esp,0x43c
c001aa77:	5b                   	pop    ebx
c001aa78:	5e                   	pop    esi
c001aa79:	5f                   	pop    edi
c001aa7a:	5d                   	pop    ebp
c001aa7b:	c3                   	ret    

c001aa7c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001aa7c:	57                   	push   edi
c001aa7d:	56                   	push   esi
c001aa7e:	53                   	push   ebx
c001aa7f:	81 ec 50 02 00 00    	sub    esp,0x250
c001aa85:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001aa8d:	74 0d                	je     c001aa9c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001aa8f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001aa97:	75 0f                	jne    c001aaa8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001aa99:	8d 76 00             	lea    esi,[esi+0x0]
c001aa9c:	b8 04 00 00 00       	mov    eax,0x4
c001aaa1:	e9 36 01 00 00       	jmp    c001abdc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001aaa6:	66 90                	xchg   ax,ax
c001aaa8:	83 ec 08             	sub    esp,0x8
c001aaab:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001aab2:	50                   	push   eax
c001aab3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001aaba:	e8 4c b3 fe ff       	call   c0005e0b <f_readdir>
c001aabf:	83 c4 10             	add    esp,0x10
c001aac2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001aac9:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001aad0:	83 ec 0c             	sub    esp,0xc
c001aad3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001aada:	83 c0 1a             	add    eax,0x1a
c001aadd:	50                   	push   eax
c001aade:	e8 e1 59 fe ff       	call   c00004c4 <strlen>
c001aae3:	83 c4 10             	add    esp,0x10
c001aae6:	ba 00 00 00 00       	mov    edx,0x0
c001aaeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aaf3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001aafa:	0f b6 c0             	movzx  eax,al
c001aafd:	83 e0 10             	and    eax,0x10
c001ab00:	74 0a                	je     c001ab0c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ab02:	b8 02 00 00 00       	mov    eax,0x2
c001ab07:	eb 0b                	jmp    c001ab14 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ab09:	8d 76 00             	lea    esi,[esi+0x0]
c001ab0c:	b8 01 00 00 00       	mov    eax,0x1
c001ab11:	8d 76 00             	lea    esi,[esi+0x0]
c001ab14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab18:	83 ec 08             	sub    esp,0x8
c001ab1b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ab22:	83 c0 1a             	add    eax,0x1a
c001ab25:	50                   	push   eax
c001ab26:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab2a:	83 c0 10             	add    eax,0x10
c001ab2d:	50                   	push   eax
c001ab2e:	e8 31 5a fe ff       	call   c0000564 <strcpy>
c001ab33:	83 c4 10             	add    esp,0x10
c001ab36:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ab3d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ab44:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ab48:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ab4f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ab56:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ab5d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ab64:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ab6b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ab72:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ab79:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ab80:	89 c6                	mov    esi,eax
c001ab82:	89 d7                	mov    edi,edx
c001ab84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab86:	89 c8                	mov    eax,ecx
c001ab88:	89 fa                	mov    edx,edi
c001ab8a:	89 f3                	mov    ebx,esi
c001ab8c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ab93:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ab9a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001aba1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001aba8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001abae:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001abb5:	84 c0                	test   al,al
c001abb7:	75 07                	jne    c001abc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001abb9:	b8 07 00 00 00       	mov    eax,0x7
c001abbe:	eb 1c                	jmp    c001abdc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001abc0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001abc7:	85 c0                	test   eax,eax
c001abc9:	75 09                	jne    c001abd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001abcb:	b8 00 00 00 00       	mov    eax,0x0
c001abd0:	eb 0a                	jmp    c001abdc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001abd2:	66 90                	xchg   ax,ax
c001abd4:	b8 01 00 00 00       	mov    eax,0x1
c001abd9:	8d 76 00             	lea    esi,[esi+0x0]
c001abdc:	81 c4 50 02 00 00    	add    esp,0x250
c001abe2:	5b                   	pop    ebx
c001abe3:	5e                   	pop    esi
c001abe4:	5f                   	pop    edi
c001abe5:	c3                   	ret    
c001abe6:	66 90                	xchg   ax,ax

c001abe8 <FAT::read(void*, unsigned long, void*, int*)>:
c001abe8:	83 ec 1c             	sub    esp,0x1c
c001abeb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001abf0:	74 0a                	je     c001abfc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001abf2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001abf7:	75 0b                	jne    c001ac04 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001abf9:	8d 76 00             	lea    esi,[esi+0x0]
c001abfc:	b8 04 00 00 00       	mov    eax,0x4
c001ac01:	eb 41                	jmp    c001ac44 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ac03:	90                   	nop
c001ac04:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac08:	50                   	push   eax
c001ac09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ac11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac15:	e8 d1 a4 fe ff       	call   c00050eb <f_read>
c001ac1a:	83 c4 10             	add    esp,0x10
c001ac1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac25:	89 c2                	mov    edx,eax
c001ac27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac2b:	89 10                	mov    DWORD PTR [eax],edx
c001ac2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac31:	85 c0                	test   eax,eax
c001ac33:	75 07                	jne    c001ac3c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ac35:	b8 00 00 00 00       	mov    eax,0x0
c001ac3a:	eb 08                	jmp    c001ac44 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ac3c:	b8 01 00 00 00       	mov    eax,0x1
c001ac41:	8d 76 00             	lea    esi,[esi+0x0]
c001ac44:	83 c4 1c             	add    esp,0x1c
c001ac47:	c3                   	ret    

c001ac48 <FAT::write(void*, unsigned long, void*, int*)>:
c001ac48:	83 ec 1c             	sub    esp,0x1c
c001ac4b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ac50:	74 0a                	je     c001ac5c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ac52:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ac57:	75 0b                	jne    c001ac64 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ac59:	8d 76 00             	lea    esi,[esi+0x0]
c001ac5c:	b8 04 00 00 00       	mov    eax,0x4
c001ac61:	eb 41                	jmp    c001aca4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ac63:	90                   	nop
c001ac64:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac68:	50                   	push   eax
c001ac69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ac71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ac75:	e8 f1 a6 fe ff       	call   c000536b <f_write>
c001ac7a:	83 c4 10             	add    esp,0x10
c001ac7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac85:	89 c2                	mov    edx,eax
c001ac87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac8b:	89 10                	mov    DWORD PTR [eax],edx
c001ac8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac91:	85 c0                	test   eax,eax
c001ac93:	75 07                	jne    c001ac9c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ac95:	b8 00 00 00 00       	mov    eax,0x0
c001ac9a:	eb 08                	jmp    c001aca4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ac9c:	b8 01 00 00 00       	mov    eax,0x1
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	83 c4 1c             	add    esp,0x1c
c001aca7:	c3                   	ret    

c001aca8 <FAT::close(void*)>:
c001aca8:	83 ec 1c             	sub    esp,0x1c
c001acab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001acb0:	75 0a                	jne    c001acbc <FAT::close(void*)+0x14>
c001acb2:	b8 04 00 00 00       	mov    eax,0x4
c001acb7:	eb 3f                	jmp    c001acf8 <FAT::close(void*)+0x50>
c001acb9:	8d 76 00             	lea    esi,[esi+0x0]
c001acbc:	83 ec 0c             	sub    esp,0xc
c001acbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001acc3:	e8 39 ab fe ff       	call   c0005801 <f_close>
c001acc8:	83 c4 10             	add    esp,0x10
c001accb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001accf:	83 ec 0c             	sub    esp,0xc
c001acd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001acd6:	e8 cc ea fe ff       	call   c00097a7 <free>
c001acdb:	83 c4 10             	add    esp,0x10
c001acde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ace2:	85 c0                	test   eax,eax
c001ace4:	75 0a                	jne    c001acf0 <FAT::close(void*)+0x48>
c001ace6:	b8 00 00 00 00       	mov    eax,0x0
c001aceb:	eb 0b                	jmp    c001acf8 <FAT::close(void*)+0x50>
c001aced:	8d 76 00             	lea    esi,[esi+0x0]
c001acf0:	b8 01 00 00 00       	mov    eax,0x1
c001acf5:	8d 76 00             	lea    esi,[esi+0x0]
c001acf8:	83 c4 1c             	add    esp,0x1c
c001acfb:	c3                   	ret    

c001acfc <FAT::closeDir(void*)>:
c001acfc:	83 ec 1c             	sub    esp,0x1c
c001acff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad04:	75 0a                	jne    c001ad10 <FAT::closeDir(void*)+0x14>
c001ad06:	b8 04 00 00 00       	mov    eax,0x4
c001ad0b:	eb 3f                	jmp    c001ad4c <FAT::closeDir(void*)+0x50>
c001ad0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad10:	83 ec 0c             	sub    esp,0xc
c001ad13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad17:	e8 cd b0 fe ff       	call   c0005de9 <f_closedir>
c001ad1c:	83 c4 10             	add    esp,0x10
c001ad1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad23:	83 ec 0c             	sub    esp,0xc
c001ad26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad2a:	e8 78 ea fe ff       	call   c00097a7 <free>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad36:	85 c0                	test   eax,eax
c001ad38:	75 0a                	jne    c001ad44 <FAT::closeDir(void*)+0x48>
c001ad3a:	b8 00 00 00 00       	mov    eax,0x0
c001ad3f:	eb 0b                	jmp    c001ad4c <FAT::closeDir(void*)+0x50>
c001ad41:	8d 76 00             	lea    esi,[esi+0x0]
c001ad44:	b8 01 00 00 00       	mov    eax,0x1
c001ad49:	8d 76 00             	lea    esi,[esi+0x0]
c001ad4c:	83 c4 1c             	add    esp,0x1c
c001ad4f:	c3                   	ret    

c001ad50 <FAT::seek(void*, unsigned long long)>:
c001ad50:	83 ec 2c             	sub    esp,0x2c
c001ad53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ad5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad63:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ad68:	75 0a                	jne    c001ad74 <FAT::seek(void*, unsigned long long)+0x24>
c001ad6a:	b8 04 00 00 00       	mov    eax,0x4
c001ad6f:	eb 37                	jmp    c001ada8 <FAT::seek(void*, unsigned long long)+0x58>
c001ad71:	8d 76 00             	lea    esi,[esi+0x0]
c001ad74:	83 ec 04             	sub    esp,0x4
c001ad77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ad7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ad7f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ad83:	e8 a8 aa fe ff       	call   c0005830 <f_lseek>
c001ad88:	83 c4 10             	add    esp,0x10
c001ad8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad93:	85 c0                	test   eax,eax
c001ad95:	75 09                	jne    c001ada0 <FAT::seek(void*, unsigned long long)+0x50>
c001ad97:	b8 00 00 00 00       	mov    eax,0x0
c001ad9c:	eb 0a                	jmp    c001ada8 <FAT::seek(void*, unsigned long long)+0x58>
c001ad9e:	66 90                	xchg   ax,ax
c001ada0:	b8 01 00 00 00       	mov    eax,0x1
c001ada5:	8d 76 00             	lea    esi,[esi+0x0]
c001ada8:	83 c4 2c             	add    esp,0x2c
c001adab:	c3                   	ret    

c001adac <fatWrapperReadDisk>:
c001adac:	83 ec 1c             	sub    esp,0x1c
c001adaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adb3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001adb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adbb:	89 04 24             	mov    DWORD PTR [esp],eax
c001adbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001adc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001adcb:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c001add2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001add6:	83 ec 0c             	sub    esp,0xc
c001add9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001addd:	52                   	push   edx
c001adde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ade2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ade6:	50                   	push   eax
c001ade7:	e8 a2 40 ff ff       	call   c000ee8e <LogicalDisk::read(unsigned long long, int, void*)>
c001adec:	83 c4 20             	add    esp,0x20
c001adef:	83 c4 1c             	add    esp,0x1c
c001adf2:	c3                   	ret    
c001adf3:	90                   	nop

c001adf4 <fatWrapperWriteDisk>:
c001adf4:	83 ec 1c             	sub    esp,0x1c
c001adf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adfb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001adff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae03:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae0e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ae13:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c001ae1a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae1e:	83 ec 0c             	sub    esp,0xc
c001ae21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae25:	52                   	push   edx
c001ae26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae2e:	50                   	push   eax
c001ae2f:	e8 c6 40 ff ff       	call   c000eefa <LogicalDisk::write(unsigned long long, int, void*)>
c001ae34:	83 c4 20             	add    esp,0x20
c001ae37:	83 c4 1c             	add    esp,0x1c
c001ae3a:	c3                   	ret    
c001ae3b:	90                   	nop

c001ae3c <fatWrapperIoctl>:
c001ae3c:	53                   	push   ebx
c001ae3d:	83 ec 28             	sub    esp,0x28
c001ae40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ae4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ae50:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001ae55:	75 31                	jne    c001ae88 <fatWrapperIoctl+0x4c>
c001ae57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ae64:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c001ae6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ae71:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ae77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae7b:	66 89 02             	mov    WORD PTR [edx],ax
c001ae7e:	b8 00 00 00 00       	mov    eax,0x0
c001ae83:	e9 bc 00 00 00       	jmp    c001af44 <fatWrapperIoctl+0x108>
c001ae88:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001ae8d:	75 6d                	jne    c001aefc <fatWrapperIoctl+0xc0>
c001ae8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae97:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ae9c:	8b 04 85 40 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77c0]
c001aea3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001aea9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001aeaf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001aeb5:	89 c8                	mov    eax,ecx
c001aeb7:	89 da                	mov    edx,ebx
c001aeb9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001aebd:	c1 e0 0a             	shl    eax,0xa
c001aec0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001aec5:	8b 0c 8d 40 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77c0]
c001aecc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001aed2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001aed8:	89 cb                	mov    ebx,ecx
c001aeda:	c1 fb 1f             	sar    ebx,0x1f
c001aedd:	53                   	push   ebx
c001aede:	51                   	push   ecx
c001aedf:	52                   	push   edx
c001aee0:	50                   	push   eax
c001aee1:	e8 5a 65 00 00       	call   c0021440 <__udivdi3>
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001aeed:	89 01                	mov    DWORD PTR [ecx],eax
c001aeef:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aef2:	b8 00 00 00 00       	mov    eax,0x0
c001aef7:	eb 4b                	jmp    c001af44 <fatWrapperIoctl+0x108>
c001aef9:	8d 76 00             	lea    esi,[esi+0x0]
c001aefc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001af01:	75 09                	jne    c001af0c <fatWrapperIoctl+0xd0>
c001af03:	b8 00 00 00 00       	mov    eax,0x0
c001af08:	eb 3a                	jmp    c001af44 <fatWrapperIoctl+0x108>
c001af0a:	66 90                	xchg   ax,ax
c001af0c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001af11:	75 19                	jne    c001af2c <fatWrapperIoctl+0xf0>
c001af13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af1f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001af25:	b8 00 00 00 00       	mov    eax,0x0
c001af2a:	eb 18                	jmp    c001af44 <fatWrapperIoctl+0x108>
c001af2c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001af31:	75 09                	jne    c001af3c <fatWrapperIoctl+0x100>
c001af33:	b8 00 00 00 00       	mov    eax,0x0
c001af38:	eb 0a                	jmp    c001af44 <fatWrapperIoctl+0x108>
c001af3a:	66 90                	xchg   ax,ax
c001af3c:	b8 04 00 00 00       	mov    eax,0x4
c001af41:	8d 76 00             	lea    esi,[esi+0x0]
c001af44:	83 c4 28             	add    esp,0x28
c001af47:	5b                   	pop    ebx
c001af48:	c3                   	ret    
c001af49:	90                   	nop
c001af4a:	66 90                	xchg   ax,ax

c001af4c <FAT::FAT()>:
c001af4c:	83 ec 1c             	sub    esp,0x1c
c001af4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af53:	83 ec 0c             	sub    esp,0xc
c001af56:	50                   	push   eax
c001af57:	e8 a0 1a ff ff       	call   c000c9fc <Filesystem::Filesystem()>
c001af5c:	83 c4 10             	add    esp,0x10
c001af5f:	ba e0 4b 02 c0       	mov    edx,0xc0024be0
c001af64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af68:	89 10                	mov    DWORD PTR [eax],edx
c001af6a:	c7 05 c0 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00298c0,0x0
c001af74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af7c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001af81:	7f 15                	jg     c001af98 <FAT::FAT()+0x4c>
c001af83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af87:	c7 04 85 e0 98 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6720],0xffffffff
c001af92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001af96:	eb e4                	jmp    c001af7c <FAT::FAT()+0x30>
c001af98:	90                   	nop
c001af99:	83 c4 1c             	add    esp,0x1c
c001af9c:	c3                   	ret    
c001af9d:	90                   	nop
c001af9e:	66 90                	xchg   ax,ax

c001afa0 <FAT::fixFilepath(char*)>:
c001afa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afa4:	8a 00                	mov    al,BYTE PTR [eax]
c001afa6:	3c 40                	cmp    al,0x40
c001afa8:	7e 2e                	jle    c001afd8 <FAT::fixFilepath(char*)+0x38>
c001afaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afae:	8a 00                	mov    al,BYTE PTR [eax]
c001afb0:	83 e8 41             	sub    eax,0x41
c001afb3:	88 c2                	mov    dl,al
c001afb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afb9:	88 10                	mov    BYTE PTR [eax],dl
c001afbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afbf:	8a 00                	mov    al,BYTE PTR [eax]
c001afc1:	0f be c0             	movsx  eax,al
c001afc4:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001afcb:	83 c0 30             	add    eax,0x30
c001afce:	88 c2                	mov    dl,al
c001afd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afd4:	88 10                	mov    BYTE PTR [eax],dl
c001afd6:	66 90                	xchg   ax,ax
c001afd8:	90                   	nop
c001afd9:	c3                   	ret    
c001afda:	66 90                	xchg   ax,ax

c001afdc <FAT::open(char const*, void**, FileOpenMode)>:
c001afdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001afe2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001afea:	74 0c                	je     c001aff8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001afec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aff4:	75 0e                	jne    c001b004 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001aff6:	66 90                	xchg   ax,ax
c001aff8:	b8 04 00 00 00       	mov    eax,0x4
c001affd:	e9 06 01 00 00       	jmp    c001b108 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b002:	66 90                	xchg   ax,ax
c001b004:	83 ec 08             	sub    esp,0x8
c001b007:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b00e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b012:	50                   	push   eax
c001b013:	e8 4c 55 fe ff       	call   c0000564 <strcpy>
c001b018:	83 c4 10             	add    esp,0x10
c001b01b:	83 ec 08             	sub    esp,0x8
c001b01e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b022:	50                   	push   eax
c001b023:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b02a:	e8 71 ff ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b03a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b041:	83 e0 01             	and    eax,0x1
c001b044:	74 0a                	je     c001b050 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b046:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b04e:	66 90                	xchg   ax,ax
c001b050:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b057:	83 e0 04             	and    eax,0x4
c001b05a:	74 10                	je     c001b06c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b05c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b064:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b06c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b073:	83 e0 02             	and    eax,0x2
c001b076:	74 08                	je     c001b080 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b078:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b080:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b087:	83 e0 08             	and    eax,0x8
c001b08a:	74 08                	je     c001b094 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b08c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b094:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b09b:	83 e0 10             	and    eax,0x10
c001b09e:	74 08                	je     c001b0a8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b0a0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	68 50 02 00 00       	push   0x250
c001b0b0:	e8 e2 e6 fe ff       	call   c0009797 <malloc>
c001b0b5:	83 c4 10             	add    esp,0x10
c001b0b8:	89 c2                	mov    edx,eax
c001b0ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b0c1:	89 10                	mov    DWORD PTR [eax],edx
c001b0c3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b0cb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b0d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0d4:	83 ec 04             	sub    esp,0x4
c001b0d7:	52                   	push   edx
c001b0d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b0dc:	52                   	push   edx
c001b0dd:	50                   	push   eax
c001b0de:	e8 cc 9b fe ff       	call   c0004caf <f_open>
c001b0e3:	83 c4 10             	add    esp,0x10
c001b0e6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b0ed:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b0f5:	74 09                	je     c001b100 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b0f7:	b8 01 00 00 00       	mov    eax,0x1
c001b0fc:	eb 0a                	jmp    c001b108 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b0fe:	66 90                	xchg   ax,ax
c001b100:	b8 00 00 00 00       	mov    eax,0x0
c001b105:	8d 76 00             	lea    esi,[esi+0x0]
c001b108:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b10e:	c3                   	ret    
c001b10f:	90                   	nop

c001b110 <FAT::openDir(char const*, void**)>:
c001b110:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b116:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b11e:	74 0c                	je     c001b12c <FAT::openDir(char const*, void**)+0x1c>
c001b120:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b128:	75 0e                	jne    c001b138 <FAT::openDir(char const*, void**)+0x28>
c001b12a:	66 90                	xchg   ax,ax
c001b12c:	b8 04 00 00 00       	mov    eax,0x4
c001b131:	e9 82 00 00 00       	jmp    c001b1b8 <FAT::openDir(char const*, void**)+0xa8>
c001b136:	66 90                	xchg   ax,ax
c001b138:	83 ec 08             	sub    esp,0x8
c001b13b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b142:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b146:	50                   	push   eax
c001b147:	e8 18 54 fe ff       	call   c0000564 <strcpy>
c001b14c:	83 c4 10             	add    esp,0x10
c001b14f:	83 ec 08             	sub    esp,0x8
c001b152:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b156:	50                   	push   eax
c001b157:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b15e:	e8 3d fe ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b163:	83 c4 10             	add    esp,0x10
c001b166:	83 ec 0c             	sub    esp,0xc
c001b169:	6a 4c                	push   0x4c
c001b16b:	e8 27 e6 fe ff       	call   c0009797 <malloc>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	89 c2                	mov    edx,eax
c001b175:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b17c:	89 10                	mov    DWORD PTR [eax],edx
c001b17e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b185:	8b 00                	mov    eax,DWORD PTR [eax]
c001b187:	83 ec 08             	sub    esp,0x8
c001b18a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b18e:	52                   	push   edx
c001b18f:	50                   	push   eax
c001b190:	e8 52 ab fe ff       	call   c0005ce7 <f_opendir>
c001b195:	83 c4 10             	add    esp,0x10
c001b198:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b19f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b1a7:	74 07                	je     c001b1b0 <FAT::openDir(char const*, void**)+0xa0>
c001b1a9:	b8 01 00 00 00       	mov    eax,0x1
c001b1ae:	eb 08                	jmp    c001b1b8 <FAT::openDir(char const*, void**)+0xa8>
c001b1b0:	b8 00 00 00 00       	mov    eax,0x0
c001b1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b1be:	c3                   	ret    
c001b1bf:	90                   	nop

c001b1c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b1c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b1c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b1ce:	75 0c                	jne    c001b1dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b1d0:	b8 04 00 00 00       	mov    eax,0x4
c001b1d5:	e9 d2 00 00 00       	jmp    c001b2ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b1da:	66 90                	xchg   ax,ax
c001b1dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b1e4:	75 0a                	jne    c001b1f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b1e6:	b8 04 00 00 00       	mov    eax,0x4
c001b1eb:	e9 bc 00 00 00       	jmp    c001b2ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b1f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b1f8:	75 0a                	jne    c001b204 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b1fa:	b8 04 00 00 00       	mov    eax,0x4
c001b1ff:	e9 a8 00 00 00       	jmp    c001b2ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b204:	83 ec 08             	sub    esp,0x8
c001b207:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b20e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b215:	50                   	push   eax
c001b216:	e8 49 53 fe ff       	call   c0000564 <strcpy>
c001b21b:	83 c4 10             	add    esp,0x10
c001b21e:	83 ec 08             	sub    esp,0x8
c001b221:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b228:	50                   	push   eax
c001b229:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b230:	e8 6b fd ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	83 ec 08             	sub    esp,0x8
c001b23b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b23f:	50                   	push   eax
c001b240:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b247:	50                   	push   eax
c001b248:	e8 59 ac fe ff       	call   c0005ea6 <f_stat>
c001b24d:	83 c4 10             	add    esp,0x10
c001b250:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b257:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b25e:	85 c0                	test   eax,eax
c001b260:	74 0a                	je     c001b26c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b262:	83 f8 04             	cmp    eax,0x4
c001b265:	74 35                	je     c001b29c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b267:	eb 3b                	jmp    c001b2a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b269:	8d 76 00             	lea    esi,[esi+0x0]
c001b26c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b270:	0f b6 c0             	movzx  eax,al
c001b273:	83 e0 10             	and    eax,0x10
c001b276:	0f 95 c2             	setne  dl
c001b279:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b280:	88 10                	mov    BYTE PTR [eax],dl
c001b282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b285:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b289:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b290:	89 01                	mov    DWORD PTR [ecx],eax
c001b292:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b295:	b8 00 00 00 00       	mov    eax,0x0
c001b29a:	eb 10                	jmp    c001b2ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b29c:	b8 02 00 00 00       	mov    eax,0x2
c001b2a1:	eb 09                	jmp    c001b2ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b2a3:	90                   	nop
c001b2a4:	b8 01 00 00 00       	mov    eax,0x1
c001b2a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2ac:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b2b2:	c3                   	ret    
c001b2b3:	90                   	nop

c001b2b4 <FAT::unlink(char const*)>:
c001b2b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b2ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b2c2:	75 08                	jne    c001b2cc <FAT::unlink(char const*)+0x18>
c001b2c4:	b8 04 00 00 00       	mov    eax,0x4
c001b2c9:	eb 61                	jmp    c001b32c <FAT::unlink(char const*)+0x78>
c001b2cb:	90                   	nop
c001b2cc:	83 ec 08             	sub    esp,0x8
c001b2cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b2da:	50                   	push   eax
c001b2db:	e8 84 52 fe ff       	call   c0000564 <strcpy>
c001b2e0:	83 c4 10             	add    esp,0x10
c001b2e3:	83 ec 08             	sub    esp,0x8
c001b2e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b2ea:	50                   	push   eax
c001b2eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2f2:	e8 a9 fc ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b301:	50                   	push   eax
c001b302:	e8 f1 ae fe ff       	call   c00061f8 <f_unlink>
c001b307:	83 c4 10             	add    esp,0x10
c001b30a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b311:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b318:	85 c0                	test   eax,eax
c001b31a:	75 08                	jne    c001b324 <FAT::unlink(char const*)+0x70>
c001b31c:	b8 00 00 00 00       	mov    eax,0x0
c001b321:	eb 09                	jmp    c001b32c <FAT::unlink(char const*)+0x78>
c001b323:	90                   	nop
c001b324:	b8 01 00 00 00       	mov    eax,0x1
c001b329:	8d 76 00             	lea    esi,[esi+0x0]
c001b32c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b332:	c3                   	ret    
c001b333:	90                   	nop

c001b334 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b334:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b33a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b341:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b348:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b34c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b350:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b358:	75 0a                	jne    c001b364 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b35a:	b8 04 00 00 00       	mov    eax,0x4
c001b35f:	e9 30 01 00 00       	jmp    c001b494 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b364:	83 ec 08             	sub    esp,0x8
c001b367:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b36e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b372:	50                   	push   eax
c001b373:	e8 ec 51 fe ff       	call   c0000564 <strcpy>
c001b378:	83 c4 10             	add    esp,0x10
c001b37b:	83 ec 08             	sub    esp,0x8
c001b37e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b382:	50                   	push   eax
c001b383:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b38a:	e8 11 fc ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b39a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b3a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3a7:	83 e0 01             	and    eax,0x1
c001b3aa:	74 08                	je     c001b3b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b3ac:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b3b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3b9:	83 e0 02             	and    eax,0x2
c001b3bc:	74 0a                	je     c001b3c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b3be:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b3c6:	66 90                	xchg   ax,ax
c001b3c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3cd:	83 e0 04             	and    eax,0x4
c001b3d0:	74 0a                	je     c001b3dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b3d2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b3da:	66 90                	xchg   ax,ax
c001b3dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b3e1:	83 e0 08             	and    eax,0x8
c001b3e4:	74 0a                	je     c001b3f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b3e6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b3ee:	66 90                	xchg   ax,ax
c001b3f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b3f5:	83 e0 01             	and    eax,0x1
c001b3f8:	74 0a                	je     c001b404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b3fa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b402:	66 90                	xchg   ax,ax
c001b404:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b409:	83 e0 02             	and    eax,0x2
c001b40c:	74 0a                	je     c001b418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b40e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b416:	66 90                	xchg   ax,ax
c001b418:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b41d:	83 e0 04             	and    eax,0x4
c001b420:	74 0a                	je     c001b42c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b422:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b42a:	66 90                	xchg   ax,ax
c001b42c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b431:	83 e0 08             	and    eax,0x8
c001b434:	74 0a                	je     c001b440 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b436:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b43e:	66 90                	xchg   ax,ax
c001b440:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b447:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b44e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b456:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b45e:	83 ec 04             	sub    esp,0x4
c001b461:	52                   	push   edx
c001b462:	50                   	push   eax
c001b463:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b467:	50                   	push   eax
c001b468:	e8 2d b4 fe ff       	call   c000689a <f_chmod>
c001b46d:	83 c4 10             	add    esp,0x10
c001b470:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b477:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b47e:	85 c0                	test   eax,eax
c001b480:	75 0a                	jne    c001b48c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b482:	b8 00 00 00 00       	mov    eax,0x0
c001b487:	eb 0b                	jmp    c001b494 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b489:	8d 76 00             	lea    esi,[esi+0x0]
c001b48c:	b8 01 00 00 00       	mov    eax,0x1
c001b491:	8d 76 00             	lea    esi,[esi+0x0]
c001b494:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b49a:	c3                   	ret    
c001b49b:	90                   	nop

c001b49c <FAT::rename(char const*, char const*)>:
c001b49c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b4a2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b4aa:	74 0c                	je     c001b4b8 <FAT::rename(char const*, char const*)+0x1c>
c001b4ac:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b4b4:	75 0e                	jne    c001b4c4 <FAT::rename(char const*, char const*)+0x28>
c001b4b6:	66 90                	xchg   ax,ax
c001b4b8:	b8 04 00 00 00       	mov    eax,0x4
c001b4bd:	e9 9e 00 00 00       	jmp    c001b560 <FAT::rename(char const*, char const*)+0xc4>
c001b4c2:	66 90                	xchg   ax,ax
c001b4c4:	83 ec 08             	sub    esp,0x8
c001b4c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b4ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b4d5:	50                   	push   eax
c001b4d6:	e8 89 50 fe ff       	call   c0000564 <strcpy>
c001b4db:	83 c4 10             	add    esp,0x10
c001b4de:	83 ec 08             	sub    esp,0x8
c001b4e1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b4e8:	50                   	push   eax
c001b4e9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b4f0:	e8 ab fa ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b4f5:	83 c4 10             	add    esp,0x10
c001b4f8:	83 ec 08             	sub    esp,0x8
c001b4fb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b502:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b506:	50                   	push   eax
c001b507:	e8 58 50 fe ff       	call   c0000564 <strcpy>
c001b50c:	83 c4 10             	add    esp,0x10
c001b50f:	83 ec 08             	sub    esp,0x8
c001b512:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b516:	50                   	push   eax
c001b517:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b51e:	e8 7d fa ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b523:	83 c4 10             	add    esp,0x10
c001b526:	83 ec 08             	sub    esp,0x8
c001b529:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b52d:	50                   	push   eax
c001b52e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b535:	50                   	push   eax
c001b536:	e8 6c b0 fe ff       	call   c00065a7 <f_rename>
c001b53b:	83 c4 10             	add    esp,0x10
c001b53e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b545:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b54c:	85 c0                	test   eax,eax
c001b54e:	75 08                	jne    c001b558 <FAT::rename(char const*, char const*)+0xbc>
c001b550:	b8 00 00 00 00       	mov    eax,0x0
c001b555:	eb 09                	jmp    c001b560 <FAT::rename(char const*, char const*)+0xc4>
c001b557:	90                   	nop
c001b558:	b8 01 00 00 00       	mov    eax,0x1
c001b55d:	8d 76 00             	lea    esi,[esi+0x0]
c001b560:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b566:	c3                   	ret    
c001b567:	90                   	nop

c001b568 <FAT::mkdir(char const*)>:
c001b568:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b56e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b576:	75 08                	jne    c001b580 <FAT::mkdir(char const*)+0x18>
c001b578:	b8 04 00 00 00       	mov    eax,0x4
c001b57d:	eb 61                	jmp    c001b5e0 <FAT::mkdir(char const*)+0x78>
c001b57f:	90                   	nop
c001b580:	83 ec 08             	sub    esp,0x8
c001b583:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b58a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b58e:	50                   	push   eax
c001b58f:	e8 d0 4f fe ff       	call   c0000564 <strcpy>
c001b594:	83 c4 10             	add    esp,0x10
c001b597:	83 ec 08             	sub    esp,0x8
c001b59a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b59e:	50                   	push   eax
c001b59f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b5a6:	e8 f5 f9 ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b5ab:	83 c4 10             	add    esp,0x10
c001b5ae:	83 ec 0c             	sub    esp,0xc
c001b5b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5b5:	50                   	push   eax
c001b5b6:	e8 c0 ad fe ff       	call   c000637b <f_mkdir>
c001b5bb:	83 c4 10             	add    esp,0x10
c001b5be:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b5c5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b5cc:	85 c0                	test   eax,eax
c001b5ce:	75 08                	jne    c001b5d8 <FAT::mkdir(char const*)+0x70>
c001b5d0:	b8 00 00 00 00       	mov    eax,0x0
c001b5d5:	eb 09                	jmp    c001b5e0 <FAT::mkdir(char const*)+0x78>
c001b5d7:	90                   	nop
c001b5d8:	b8 01 00 00 00       	mov    eax,0x1
c001b5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b5e6:	c3                   	ret    
c001b5e7:	90                   	nop

c001b5e8 <FAT::exists(char const*)>:
c001b5e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b5ee:	83 ec 08             	sub    esp,0x8
c001b5f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b5f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b5fc:	50                   	push   eax
c001b5fd:	e8 62 4f fe ff       	call   c0000564 <strcpy>
c001b602:	83 c4 10             	add    esp,0x10
c001b605:	83 ec 08             	sub    esp,0x8
c001b608:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b60c:	50                   	push   eax
c001b60d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b614:	e8 87 f9 ff ff       	call   c001afa0 <FAT::fixFilepath(char*)>
c001b619:	83 c4 10             	add    esp,0x10
c001b61c:	83 ec 08             	sub    esp,0x8
c001b61f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b626:	50                   	push   eax
c001b627:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b62b:	50                   	push   eax
c001b62c:	e8 75 a8 fe ff       	call   c0005ea6 <f_stat>
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b63b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b642:	85 c0                	test   eax,eax
c001b644:	75 06                	jne    c001b64c <FAT::exists(char const*)+0x64>
c001b646:	b0 01                	mov    al,0x1
c001b648:	eb 06                	jmp    c001b650 <FAT::exists(char const*)+0x68>
c001b64a:	66 90                	xchg   ax,ax
c001b64c:	b0 00                	mov    al,0x0
c001b64e:	66 90                	xchg   ax,ax
c001b650:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b656:	c3                   	ret    
c001b657:	90                   	nop

c001b658 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b658:	b8 08 00 00 00       	mov    eax,0x8
c001b65d:	c3                   	ret    

c001b65e <ISO9660::seek(void*, unsigned long long)>:
c001b65e:	53                   	push   ebx
c001b65f:	b8 04 00 00 00       	mov    eax,0x4
c001b664:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b668:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b66c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b670:	85 d2                	test   edx,edx
c001b672:	74 17                	je     c001b68b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b674:	89 c8                	mov    eax,ecx
c001b676:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b679:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b67c:	b8 01 00 00 00       	mov    eax,0x1
c001b681:	73 08                	jae    c001b68b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b683:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b686:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b689:	31 c0                	xor    eax,eax
c001b68b:	5b                   	pop    ebx
c001b68c:	c3                   	ret    
c001b68d:	90                   	nop

c001b68e <ISO9660::tell(void*, unsigned long long*)>:
c001b68e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b696:	85 d2                	test   edx,edx
c001b698:	74 12                	je     c001b6ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b69a:	85 c0                	test   eax,eax
c001b69c:	74 0e                	je     c001b6ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b69e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6a1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b6a4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b6a7:	89 10                	mov    DWORD PTR [eax],edx
c001b6a9:	31 c0                	xor    eax,eax
c001b6ab:	c3                   	ret    
c001b6ac:	b8 04 00 00 00       	mov    eax,0x4
c001b6b1:	c3                   	ret    

c001b6b2 <ISO9660::getName()>:
c001b6b2:	b8 40 4c 02 c0       	mov    eax,0xc0024c40
c001b6b7:	c3                   	ret    

c001b6b8 <ISO9660::stat(void*, unsigned long long*)>:
c001b6b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b6bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6c0:	85 d2                	test   edx,edx
c001b6c2:	74 12                	je     c001b6d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b6c4:	85 c0                	test   eax,eax
c001b6c6:	74 0e                	je     c001b6d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b6c8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b6cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b6ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b6d1:	89 10                	mov    DWORD PTR [eax],edx
c001b6d3:	31 c0                	xor    eax,eax
c001b6d5:	c3                   	ret    
c001b6d6:	b8 04 00 00 00       	mov    eax,0x4
c001b6db:	c3                   	ret    

c001b6dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b6dc:	b8 01 00 00 00       	mov    eax,0x1
c001b6e1:	c3                   	ret    

c001b6e2 <ISO9660::unlink(char const*)>:
c001b6e2:	b8 01 00 00 00       	mov    eax,0x1
c001b6e7:	c3                   	ret    

c001b6e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b6e8:	b8 01 00 00 00       	mov    eax,0x1
c001b6ed:	c3                   	ret    

c001b6ee <ISO9660::rename(char const*, char const*)>:
c001b6ee:	b8 01 00 00 00       	mov    eax,0x1
c001b6f3:	c3                   	ret    

c001b6f4 <ISO9660::mkdir(char const*)>:
c001b6f4:	b8 01 00 00 00       	mov    eax,0x1
c001b6f9:	c3                   	ret    

c001b6fa <ISO9660::close(void*)>:
c001b6fa:	83 ec 0c             	sub    esp,0xc
c001b6fd:	b8 04 00 00 00       	mov    eax,0x4
c001b702:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b706:	85 d2                	test   edx,edx
c001b708:	74 0e                	je     c001b718 <ISO9660::close(void*)+0x1e>
c001b70a:	83 ec 0c             	sub    esp,0xc
c001b70d:	52                   	push   edx
c001b70e:	e8 94 e0 fe ff       	call   c00097a7 <free>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	31 c0                	xor    eax,eax
c001b718:	83 c4 0c             	add    esp,0xc
c001b71b:	c3                   	ret    

c001b71c <ISO9660::closeDir(void*)>:
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	b8 04 00 00 00       	mov    eax,0x4
c001b724:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b728:	85 d2                	test   edx,edx
c001b72a:	74 0e                	je     c001b73a <ISO9660::closeDir(void*)+0x1e>
c001b72c:	83 ec 0c             	sub    esp,0xc
c001b72f:	52                   	push   edx
c001b730:	e8 72 e0 fe ff       	call   c00097a7 <free>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	31 c0                	xor    eax,eax
c001b73a:	83 c4 0c             	add    esp,0xc
c001b73d:	c3                   	ret    

c001b73e <ISO9660::~ISO9660()>:
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	ba 64 4c 02 c0       	mov    edx,0xc0024c64
c001b746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74a:	89 10                	mov    DWORD PTR [eax],edx
c001b74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b750:	83 ec 0c             	sub    esp,0xc
c001b753:	50                   	push   eax
c001b754:	e8 c7 12 ff ff       	call   c000ca20 <Filesystem::~Filesystem()>
c001b759:	83 c4 10             	add    esp,0x10
c001b75c:	90                   	nop
c001b75d:	83 c4 0c             	add    esp,0xc
c001b760:	c3                   	ret    
c001b761:	90                   	nop

c001b762 <ISO9660::~ISO9660()>:
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	83 ec 0c             	sub    esp,0xc
c001b768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b76c:	e8 cd ff ff ff       	call   c001b73e <ISO9660::~ISO9660()>
c001b771:	83 c4 10             	add    esp,0x10
c001b774:	83 ec 08             	sub    esp,0x8
c001b777:	6a 08                	push   0x8
c001b779:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b77d:	e8 82 0e ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c001b782:	83 c4 10             	add    esp,0x10
c001b785:	83 c4 0c             	add    esp,0xc
c001b788:	c3                   	ret    

c001b789 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b789:	55                   	push   ebp
c001b78a:	31 c9                	xor    ecx,ecx
c001b78c:	57                   	push   edi
c001b78d:	56                   	push   esi
c001b78e:	53                   	push   ebx
c001b78f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b793:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b797:	89 eb                	mov    ebx,ebp
c001b799:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b79d:	39 ce                	cmp    esi,ecx
c001b79f:	7e 17                	jle    c001b7b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b7a1:	31 d2                	xor    edx,edx
c001b7a3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b7a7:	7d 13                	jge    c001b7bc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b7a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b7ad:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7b0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b7b3:	75 0d                	jne    c001b7c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b7b5:	42                   	inc    edx
c001b7b6:	eb eb                	jmp    c001b7a3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b7b8:	31 c0                	xor    eax,eax
c001b7ba:	eb 0a                	jmp    c001b7c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b7bc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b7c0:	eb 04                	jmp    c001b7c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b7c2:	41                   	inc    ecx
c001b7c3:	43                   	inc    ebx
c001b7c4:	eb d7                	jmp    c001b79d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b7c6:	5b                   	pop    ebx
c001b7c7:	5e                   	pop    esi
c001b7c8:	5f                   	pop    edi
c001b7c9:	5d                   	pop    ebp
c001b7ca:	c3                   	ret    

c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b7cb:	57                   	push   edi
c001b7cc:	56                   	push   esi
c001b7cd:	53                   	push   ebx
c001b7ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b7d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b7da:	39 35 c0 99 02 c0    	cmp    DWORD PTR ds:0xc00299c0,esi
c001b7e0:	75 08                	jne    c001b7ea <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b7e2:	38 1d 00 5d 02 c0    	cmp    BYTE PTR ds:0xc0025d00,bl
c001b7e8:	74 4a                	je     c001b834 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b7ea:	83 ec 0c             	sub    esp,0xc
c001b7ed:	31 d2                	xor    edx,edx
c001b7ef:	68 e0 99 02 c0       	push   0xc00299e0
c001b7f4:	0f be c3             	movsx  eax,bl
c001b7f7:	6a 01                	push   0x1
c001b7f9:	52                   	push   edx
c001b7fa:	56                   	push   esi
c001b7fb:	ff 34 85 3c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78c4]
c001b802:	e8 87 36 ff ff       	call   c000ee8e <LogicalDisk::read(unsigned long long, int, void*)>
c001b807:	83 c4 20             	add    esp,0x20
c001b80a:	85 c0                	test   eax,eax
c001b80c:	75 0e                	jne    c001b81c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001b80e:	89 35 c0 99 02 c0    	mov    DWORD PTR ds:0xc00299c0,esi
c001b814:	88 1d 00 5d 02 c0    	mov    BYTE PTR ds:0xc0025d00,bl
c001b81a:	eb 18                	jmp    c001b834 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b81c:	50                   	push   eax
c001b81d:	68 00 08 00 00       	push   0x800
c001b822:	6a 00                	push   0x0
c001b824:	57                   	push   edi
c001b825:	e8 7e 4c fe ff       	call   c00004a8 <memset>
c001b82a:	83 c4 10             	add    esp,0x10
c001b82d:	b8 01 00 00 00       	mov    eax,0x1
c001b832:	eb 0e                	jmp    c001b842 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001b834:	be e0 99 02 c0       	mov    esi,0xc00299e0
c001b839:	b9 00 08 00 00       	mov    ecx,0x800
c001b83e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b840:	31 c0                	xor    eax,eax
c001b842:	5b                   	pop    ebx
c001b843:	5e                   	pop    esi
c001b844:	5f                   	pop    edi
c001b845:	c3                   	ret    

c001b846 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b846:	81 ec 10 08 00 00    	sub    esp,0x810
c001b84c:	c7 05 c0 99 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00299c0,0xdeadbeef
c001b856:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b85d:	83 c0 41             	add    eax,0x41
c001b860:	0f be c0             	movsx  eax,al
c001b863:	50                   	push   eax
c001b864:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b868:	50                   	push   eax
c001b869:	6a 10                	push   0x10
c001b86b:	e8 5b ff ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b870:	83 c4 10             	add    esp,0x10
c001b873:	31 d2                	xor    edx,edx
c001b875:	85 c0                	test   eax,eax
c001b877:	75 24                	jne    c001b89d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b879:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b87e:	75 1d                	jne    c001b89d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b880:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b885:	75 16                	jne    c001b89d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b887:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b88c:	75 0f                	jne    c001b89d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b88e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b893:	75 08                	jne    c001b89d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b895:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b89a:	0f 94 c2             	sete   dl
c001b89d:	88 d0                	mov    al,dl
c001b89f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b8a5:	c3                   	ret    

c001b8a6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b8a6:	55                   	push   ebp
c001b8a7:	57                   	push   edi
c001b8a8:	56                   	push   esi
c001b8a9:	53                   	push   ebx
c001b8aa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001b8b0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001b8b7:	85 ed                	test   ebp,ebp
c001b8b9:	0f 84 da 01 00 00    	je     c001ba99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b8bf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b8c7:	0f 84 cc 01 00 00    	je     c001ba99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b8cd:	b8 01 00 00 00       	mov    eax,0x1
c001b8d2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001b8d6:	0f 85 c2 01 00 00    	jne    c001ba9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001b8dc:	31 d2                	xor    edx,edx
c001b8de:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b8e5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001b8e8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b8eb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b8ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b8f5:	01 c8                	add    eax,ecx
c001b8f7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001b8fa:	11 da                	adc    edx,ebx
c001b8fc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b900:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b904:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b908:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b90c:	19 d7                	sbb    edi,edx
c001b90e:	72 11                	jb     c001b921 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001b910:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001b913:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001b917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b91b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b91f:	eb 0c                	jmp    c001b92d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001b921:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001b925:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b929:	29 ce                	sub    esi,ecx
c001b92b:	19 df                	sbb    edi,ebx
c001b92d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b930:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001b933:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b937:	c1 e0 0b             	shl    eax,0xb
c001b93a:	01 c8                	add    eax,ecx
c001b93c:	11 da                	adc    edx,ebx
c001b93e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b941:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b945:	51                   	push   ecx
c001b946:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001b94a:	50                   	push   eax
c001b94b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001b94f:	53                   	push   ebx
c001b950:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b954:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b958:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b95c:	50                   	push   eax
c001b95d:	e8 69 fe ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b962:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001b965:	b8 00 08 00 00       	mov    eax,0x800
c001b96a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b970:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001b974:	29 d0                	sub    eax,edx
c001b976:	83 c4 10             	add    esp,0x10
c001b979:	89 f9                	mov    ecx,edi
c001b97b:	39 c6                	cmp    esi,eax
c001b97d:	83 d9 00             	sbb    ecx,0x0
c001b980:	7d 1b                	jge    c001b99d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001b982:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b987:	75 12                	jne    c001b99b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001b989:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b990:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b996:	e9 fa 00 00 00       	jmp    c001ba95 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001b99b:	89 f0                	mov    eax,esi
c001b99d:	01 d3                	add    ebx,edx
c001b99f:	31 d2                	xor    edx,edx
c001b9a1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001b9a5:	39 c2                	cmp    edx,eax
c001b9a7:	7d 14                	jge    c001b9bd <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001b9a9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001b9b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b9b4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001b9b7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001b9ba:	42                   	inc    edx
c001b9bb:	eb e8                	jmp    c001b9a5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001b9bd:	89 c2                	mov    edx,eax
c001b9bf:	85 c0                	test   eax,eax
c001b9c1:	79 02                	jns    c001b9c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001b9c3:	31 d2                	xor    edx,edx
c001b9c5:	01 c2                	add    edx,eax
c001b9c7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001b9ca:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001b9d1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b9d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b9d9:	99                   	cdq    
c001b9da:	01 c1                	add    ecx,eax
c001b9dc:	11 d3                	adc    ebx,edx
c001b9de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b9e2:	29 c6                	sub    esi,eax
c001b9e4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b9e8:	19 d7                	sbb    edi,edx
c001b9ea:	89 34 24             	mov    DWORD PTR [esp],esi
c001b9ed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001b9f1:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b9f6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b9f9:	b8 00 00 00 00       	mov    eax,0x0
c001b9fe:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ba02:	7d 43                	jge    c001ba47 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001ba04:	52                   	push   edx
c001ba05:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ba09:	50                   	push   eax
c001ba0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ba16:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ba1a:	50                   	push   eax
c001ba1b:	e8 ab fd ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba20:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001ba28:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001ba2d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001ba35:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001ba3d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001ba42:	83 c4 10             	add    esp,0x10
c001ba45:	eb aa                	jmp    c001b9f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001ba47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba4b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001ba4e:	74 2a                	je     c001ba7a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001ba50:	50                   	push   eax
c001ba51:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ba55:	50                   	push   eax
c001ba56:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ba5a:	56                   	push   esi
c001ba5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba63:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001ba67:	51                   	push   ecx
c001ba68:	e8 5e fd ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba6d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba77:	83 c4 10             	add    esp,0x10
c001ba7a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ba81:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba89:	89 18                	mov    DWORD PTR [eax],ebx
c001ba8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba8f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ba92:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ba95:	31 c0                	xor    eax,eax
c001ba97:	eb 05                	jmp    c001ba9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ba99:	b8 04 00 00 00       	mov    eax,0x4
c001ba9e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001baa4:	5b                   	pop    ebx
c001baa5:	5e                   	pop    esi
c001baa6:	5f                   	pop    edi
c001baa7:	5d                   	pop    ebp
c001baa8:	c3                   	ret    
c001baa9:	90                   	nop

c001baaa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001baaa:	55                   	push   ebp
c001baab:	57                   	push   edi
c001baac:	56                   	push   esi
c001baad:	53                   	push   ebx
c001baae:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bab4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001babb:	85 ed                	test   ebp,ebp
c001babd:	0f 84 51 02 00 00    	je     c001bd14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bac3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bacb:	0f 84 43 02 00 00    	je     c001bd14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bad1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bad4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bad7:	75 0a                	jne    c001bae3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bad9:	b8 07 00 00 00       	mov    eax,0x7
c001bade:	e9 36 02 00 00       	jmp    c001bd19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bae3:	50                   	push   eax
c001bae4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bae8:	50                   	push   eax
c001bae9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001baf0:	53                   	push   ebx
c001baf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001baf4:	c1 e0 0b             	shl    eax,0xb
c001baf7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bafa:	c1 e8 0b             	shr    eax,0xb
c001bafd:	50                   	push   eax
c001bafe:	e8 c8 fc ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bb06:	83 c4 10             	add    esp,0x10
c001bb09:	89 c1                	mov    ecx,eax
c001bb0b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bb0e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bb14:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bb17:	84 db                	test   bl,bl
c001bb19:	0f 85 8b 00 00 00    	jne    c001bbaa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bb1f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bb25:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bb28:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bb2e:	29 c6                	sub    esi,eax
c001bb30:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bb34:	89 f3                	mov    ebx,esi
c001bb36:	89 f1                	mov    ecx,esi
c001bb38:	c1 fb 1f             	sar    ebx,0x1f
c001bb3b:	01 f0                	add    eax,esi
c001bb3d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb40:	11 da                	adc    edx,ebx
c001bb42:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb49:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bb4c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bb4f:	89 d8                	mov    eax,ebx
c001bb51:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bb55:	ba 00 00 00 00       	mov    edx,0x0
c001bb5a:	19 f8                	sbb    eax,edi
c001bb5c:	b8 00 00 00 00       	mov    eax,0x0
c001bb61:	73 08                	jae    c001bb6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bb63:	89 f0                	mov    eax,esi
c001bb65:	89 fa                	mov    edx,edi
c001bb67:	29 c8                	sub    eax,ecx
c001bb69:	19 da                	sbb    edx,ebx
c001bb6b:	89 d7                	mov    edi,edx
c001bb6d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bb70:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bb73:	09 c7                	or     edi,eax
c001bb75:	0f 84 5e ff ff ff    	je     c001bad9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bb7b:	57                   	push   edi
c001bb7c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb80:	50                   	push   eax
c001bb81:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bb88:	53                   	push   ebx
c001bb89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb8c:	c1 e0 0b             	shl    eax,0xb
c001bb8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bb93:	c1 e8 0b             	shr    eax,0xb
c001bb96:	50                   	push   eax
c001bb97:	e8 2f fc ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	25 ff 07 00 00       	and    eax,0x7ff
c001bba7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bbaa:	31 ff                	xor    edi,edi
c001bbac:	56                   	push   esi
c001bbad:	6a 28                	push   0x28
c001bbaf:	6a 00                	push   0x0
c001bbb1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bbb5:	50                   	push   eax
c001bbb6:	e8 ed 48 fe ff       	call   c00004a8 <memset>
c001bbbb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bbbe:	25 ff 07 00 00       	and    eax,0x7ff
c001bbc3:	89 c6                	mov    esi,eax
c001bbc5:	83 c6 21             	add    esi,0x21
c001bbc8:	83 d7 00             	adc    edi,0x0
c001bbcb:	83 c4 10             	add    esp,0x10
c001bbce:	31 c9                	xor    ecx,ecx
c001bbd0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bbd7:	83 f9 28             	cmp    ecx,0x28
c001bbda:	88 04 24             	mov    BYTE PTR [esp],al
c001bbdd:	0f 94 c2             	sete   dl
c001bbe0:	88 d0                	mov    al,dl
c001bbe2:	ba ff 07 00 00       	mov    edx,0x7ff
c001bbe7:	39 f2                	cmp    edx,esi
c001bbe9:	ba 00 00 00 00       	mov    edx,0x0
c001bbee:	19 fa                	sbb    edx,edi
c001bbf0:	0f 92 c2             	setb   dl
c001bbf3:	09 c2                	or     edx,eax
c001bbf5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bbf9:	0f 94 c0             	sete   al
c001bbfc:	08 d0                	or     al,dl
c001bbfe:	75 16                	jne    c001bc16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bc00:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bc04:	74 10                	je     c001bc16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bc06:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bc09:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bc0d:	41                   	inc    ecx
c001bc0e:	83 c6 01             	add    esi,0x1
c001bc11:	83 d7 00             	adc    edi,0x0
c001bc14:	eb ba                	jmp    c001bbd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bc16:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bc1d:	83 ec 0c             	sub    esp,0xc
c001bc20:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bc24:	56                   	push   esi
c001bc25:	e8 9a 48 fe ff       	call   c00004c4 <strlen>
c001bc2a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bc31:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bc35:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001bc3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc40:	5a                   	pop    edx
c001bc41:	25 ff 07 00 00       	and    eax,0x7ff
c001bc46:	59                   	pop    ecx
c001bc47:	01 f8                	add    eax,edi
c001bc49:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001bc4f:	83 e0 02             	and    eax,0x2
c001bc52:	3c 01                	cmp    al,0x1
c001bc54:	19 c0                	sbb    eax,eax
c001bc56:	83 c0 02             	add    eax,0x2
c001bc59:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bc5d:	56                   	push   esi
c001bc5e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bc62:	50                   	push   eax
c001bc63:	e8 fc 48 fe ff       	call   c0000564 <strcpy>
c001bc68:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	84 c0                	test   al,al
c001bc71:	75 21                	jne    c001bc94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bc73:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bc7b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bc83:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bc8b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bc92:	eb 28                	jmp    c001bcbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bc94:	fe c8                	dec    al
c001bc96:	75 24                	jne    c001bcbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bc98:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bca0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bca8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bcb0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bcb7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bcbc:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bcc0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bcc7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bcce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bcd0:	0f b6 f3             	movzx  esi,bl
c001bcd3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bcda:	31 db                	xor    ebx,ebx
c001bcdc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bce2:	89 df                	mov    edi,ebx
c001bce4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcea:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bced:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bcf0:	39 c6                	cmp    esi,eax
c001bcf2:	19 d7                	sbb    edi,edx
c001bcf4:	72 10                	jb     c001bd06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bcf6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bcfd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bd04:	eb 0a                	jmp    c001bd10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bd06:	29 f0                	sub    eax,esi
c001bd08:	19 da                	sbb    edx,ebx
c001bd0a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd0d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd10:	31 c0                	xor    eax,eax
c001bd12:	eb 05                	jmp    c001bd19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bd14:	b8 04 00 00 00       	mov    eax,0x4
c001bd19:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bd1f:	5b                   	pop    ebx
c001bd20:	5e                   	pop    esi
c001bd21:	5f                   	pop    edi
c001bd22:	5d                   	pop    ebp
c001bd23:	c3                   	ret    

c001bd24 <readRoot(unsigned int*, unsigned int*, char)>:
c001bd24:	57                   	push   edi
c001bd25:	56                   	push   esi
c001bd26:	81 ec 38 08 00 00    	sub    esp,0x838
c001bd2c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bd34:	50                   	push   eax
c001bd35:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bd39:	50                   	push   eax
c001bd3a:	6a 10                	push   0x10
c001bd3c:	e8 8a fa ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd41:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bd48:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bd4c:	b9 22 00 00 00       	mov    ecx,0x22
c001bd51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bd53:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bd5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bd5e:	89 10                	mov    DWORD PTR [eax],edx
c001bd60:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bd67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd6b:	89 10                	mov    DWORD PTR [eax],edx
c001bd6d:	81 c4 44 08 00 00    	add    esp,0x844
c001bd73:	b0 01                	mov    al,0x1
c001bd75:	5e                   	pop    esi
c001bd76:	5f                   	pop    edi
c001bd77:	c3                   	ret    

c001bd78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bd78:	55                   	push   ebp
c001bd79:	57                   	push   edi
c001bd7a:	56                   	push   esi
c001bd7b:	53                   	push   ebx
c001bd7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd82:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bd89:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bd90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd94:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bd98:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bd9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bda0:	75 03                	jne    c001bda5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bda2:	83 c3 02             	add    ebx,0x2
c001bda5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bda8:	75 03                	jne    c001bdad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bdaa:	43                   	inc    ebx
c001bdab:	eb f8                	jmp    c001bda5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bdad:	52                   	push   edx
c001bdae:	68 00 01 00 00       	push   0x100
c001bdb3:	6a 00                	push   0x0
c001bdb5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bdb9:	50                   	push   eax
c001bdba:	e8 e9 46 fe ff       	call   c00004a8 <memset>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	31 d2                	xor    edx,edx
c001bdc4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bdc7:	84 c0                	test   al,al
c001bdc9:	74 21                	je     c001bdec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bdcb:	3c 2f                	cmp    al,0x2f
c001bdcd:	75 0b                	jne    c001bdda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bdcf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bdd3:	bd 01 00 00 00       	mov    ebp,0x1
c001bdd8:	eb 14                	jmp    c001bdee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bdda:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bddd:	80 f9 19             	cmp    cl,0x19
c001bde0:	77 03                	ja     c001bde5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bde2:	83 e8 20             	sub    eax,0x20
c001bde5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bde9:	42                   	inc    edx
c001bdea:	eb d8                	jmp    c001bdc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bdec:	31 ed                	xor    ebp,ebp
c001bdee:	83 ec 0c             	sub    esp,0xc
c001bdf1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bdf8:	e8 9a d9 fe ff       	call   c0009797 <malloc>
c001bdfd:	89 c6                	mov    esi,eax
c001bdff:	89 c2                	mov    edx,eax
c001be01:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001be08:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001be0e:	c1 ef 0b             	shr    edi,0xb
c001be11:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001be18:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001be1c:	83 c4 10             	add    esp,0x10
c001be1f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001be24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be28:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001be2f:	74 29                	je     c001be5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001be31:	50                   	push   eax
c001be32:	57                   	push   edi
c001be33:	52                   	push   edx
c001be34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001be38:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001be3f:	e8 87 f9 ff ff       	call   c001b7cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001be44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be48:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001be4f:	81 c2 00 08 00 00    	add    edx,0x800
c001be55:	83 c4 10             	add    esp,0x10
c001be58:	eb ca                	jmp    c001be24 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001be5a:	83 ec 0c             	sub    esp,0xc
c001be5d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001be61:	57                   	push   edi
c001be62:	e8 5d 46 fe ff       	call   c00004c4 <strlen>
c001be67:	50                   	push   eax
c001be68:	57                   	push   edi
c001be69:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001be70:	56                   	push   esi
c001be71:	e8 13 f9 ff ff       	call   c001b789 <__memmem(unsigned char*, int, unsigned char*, int)>
c001be76:	83 c4 20             	add    esp,0x20
c001be79:	85 c0                	test   eax,eax
c001be7b:	75 13                	jne    c001be90 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	56                   	push   esi
c001be81:	e8 21 d9 fe ff       	call   c00097a7 <free>
c001be86:	83 c4 10             	add    esp,0x10
c001be89:	31 c0                	xor    eax,eax
c001be8b:	e9 b3 00 00 00       	jmp    c001bf43 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001be90:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001be94:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001be98:	c1 e7 08             	shl    edi,0x8
c001be9b:	c1 e2 10             	shl    edx,0x10
c001be9e:	09 d7                	or     edi,edx
c001bea0:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001bea4:	09 d7                	or     edi,edx
c001bea6:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001beaa:	c1 e2 18             	shl    edx,0x18
c001bead:	09 d7                	or     edi,edx
c001beaf:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001beb3:	89 d1                	mov    ecx,edx
c001beb5:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001beb9:	c1 e1 08             	shl    ecx,0x8
c001bebc:	c1 e2 10             	shl    edx,0x10
c001bebf:	09 ca                	or     edx,ecx
c001bec1:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001bec5:	09 ca                	or     edx,ecx
c001bec7:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001becb:	c1 e1 18             	shl    ecx,0x18
c001bece:	09 ca                	or     edx,ecx
c001bed0:	89 e9                	mov    ecx,ebp
c001bed2:	84 c9                	test   cl,cl
c001bed4:	74 3c                	je     c001bf12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001bed6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001beda:	83 ec 0c             	sub    esp,0xc
c001bedd:	56                   	push   esi
c001bede:	e8 c4 d8 fe ff       	call   c00097a7 <free>
c001bee3:	83 c4 0c             	add    esp,0xc
c001bee6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001beed:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001bef2:	50                   	push   eax
c001bef3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001befa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bf01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf05:	52                   	push   edx
c001bf06:	57                   	push   edi
c001bf07:	53                   	push   ebx
c001bf08:	e8 6b fe ff ff       	call   c001bd78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001bf0d:	83 c4 20             	add    esp,0x20
c001bf10:	eb 31                	jmp    c001bf43 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001bf12:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001bf15:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001bf1c:	d0 e8                	shr    al,1
c001bf1e:	89 3b                	mov    DWORD PTR [ebx],edi
c001bf20:	83 e0 01             	and    eax,0x1
c001bf23:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001bf2a:	83 ec 0c             	sub    esp,0xc
c001bf2d:	89 13                	mov    DWORD PTR [ebx],edx
c001bf2f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001bf36:	89 03                	mov    DWORD PTR [ebx],eax
c001bf38:	56                   	push   esi
c001bf39:	e8 69 d8 fe ff       	call   c00097a7 <free>
c001bf3e:	83 c4 10             	add    esp,0x10
c001bf41:	b0 01                	mov    al,0x1
c001bf43:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bf49:	5b                   	pop    ebx
c001bf4a:	5e                   	pop    esi
c001bf4b:	5f                   	pop    edi
c001bf4c:	5d                   	pop    ebp
c001bf4d:	c3                   	ret    

c001bf4e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001bf4e:	55                   	push   ebp
c001bf4f:	57                   	push   edi
c001bf50:	56                   	push   esi
c001bf51:	53                   	push   ebx
c001bf52:	83 ec 20             	sub    esp,0x20
c001bf55:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bf59:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf5d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bf61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bf69:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bf71:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001bf76:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001bf7c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001bf82:	57                   	push   edi
c001bf83:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf87:	50                   	push   eax
c001bf88:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf8c:	50                   	push   eax
c001bf8d:	e8 92 fd ff ff       	call   c001bd24 <readRoot(unsigned int*, unsigned int*, char)>
c001bf92:	5a                   	pop    edx
c001bf93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bf97:	e8 28 45 fe ff       	call   c00004c4 <strlen>
c001bf9c:	83 c4 10             	add    esp,0x10
c001bf9f:	83 f8 03             	cmp    eax,0x3
c001bfa2:	77 17                	ja     c001bfbb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bfa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfa8:	89 03                	mov    DWORD PTR [ebx],eax
c001bfaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfae:	89 06                	mov    DWORD PTR [esi],eax
c001bfb0:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001bfb7:	b0 01                	mov    al,0x1
c001bfb9:	eb 19                	jmp    c001bfd4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001bfbb:	50                   	push   eax
c001bfbc:	55                   	push   ebp
c001bfbd:	57                   	push   edi
c001bfbe:	56                   	push   esi
c001bfbf:	53                   	push   ebx
c001bfc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bfc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bfc8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bfcc:	e8 a7 fd ff ff       	call   c001bd78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001bfd1:	83 c4 20             	add    esp,0x20
c001bfd4:	83 c4 1c             	add    esp,0x1c
c001bfd7:	5b                   	pop    ebx
c001bfd8:	5e                   	pop    esi
c001bfd9:	5f                   	pop    edi
c001bfda:	5d                   	pop    ebp
c001bfdb:	c3                   	ret    

c001bfdc <ISO9660::open(char const*, void**, FileOpenMode)>:
c001bfdc:	57                   	push   edi
c001bfdd:	56                   	push   esi
c001bfde:	53                   	push   ebx
c001bfdf:	83 ec 10             	sub    esp,0x10
c001bfe2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bfe6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bfea:	85 ff                	test   edi,edi
c001bfec:	0f 84 8b 00 00 00    	je     c001c07d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001bff2:	85 f6                	test   esi,esi
c001bff4:	0f 84 83 00 00 00    	je     c001c07d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001bffa:	b8 03 00 00 00       	mov    eax,0x3
c001bfff:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c004:	75 7c                	jne    c001c082 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c006:	83 ec 0c             	sub    esp,0xc
c001c009:	6a 1c                	push   0x1c
c001c00b:	e8 87 d7 fe ff       	call   c0009797 <malloc>
c001c010:	89 07                	mov    DWORD PTR [edi],eax
c001c012:	89 c3                	mov    ebx,eax
c001c014:	58                   	pop    eax
c001c015:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c019:	50                   	push   eax
c001c01a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c01d:	50                   	push   eax
c001c01e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c022:	50                   	push   eax
c001c023:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c027:	50                   	push   eax
c001c028:	56                   	push   esi
c001c029:	e8 20 ff ff ff       	call   c001bf4e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c02e:	83 c4 20             	add    esp,0x20
c001c031:	84 c0                	test   al,al
c001c033:	74 07                	je     c001c03c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c035:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c03a:	74 0b                	je     c001c047 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c03c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c040:	b8 01 00 00 00       	mov    eax,0x1
c001c045:	eb 3b                	jmp    c001c082 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c047:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c04b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c04f:	89 03                	mov    DWORD PTR [ebx],eax
c001c051:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c05c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c063:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c06a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c06d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c074:	8a 06                	mov    al,BYTE PTR [esi]
c001c076:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c079:	31 c0                	xor    eax,eax
c001c07b:	eb 05                	jmp    c001c082 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c07d:	b8 04 00 00 00       	mov    eax,0x4
c001c082:	83 c4 10             	add    esp,0x10
c001c085:	5b                   	pop    ebx
c001c086:	5e                   	pop    esi
c001c087:	5f                   	pop    edi
c001c088:	c3                   	ret    
c001c089:	90                   	nop

c001c08a <ISO9660::exists(char const*)>:
c001c08a:	83 ec 28             	sub    esp,0x28
c001c08d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c091:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c095:	52                   	push   edx
c001c096:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c099:	52                   	push   edx
c001c09a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c09e:	52                   	push   edx
c001c09f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c0a3:	52                   	push   edx
c001c0a4:	50                   	push   eax
c001c0a5:	e8 a4 fe ff ff       	call   c001bf4e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c0aa:	83 c4 3c             	add    esp,0x3c
c001c0ad:	c3                   	ret    

c001c0ae <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c0ae:	56                   	push   esi
c001c0af:	53                   	push   ebx
c001c0b0:	83 ec 14             	sub    esp,0x14
c001c0b3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c0b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0bb:	85 db                	test   ebx,ebx
c001c0bd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c0c1:	0f 94 c2             	sete   dl
c001c0c4:	85 f6                	test   esi,esi
c001c0c6:	0f 94 c0             	sete   al
c001c0c9:	08 c2                	or     dl,al
c001c0cb:	75 68                	jne    c001c135 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c0cd:	85 c9                	test   ecx,ecx
c001c0cf:	74 64                	je     c001c135 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c0d1:	83 ec 0c             	sub    esp,0xc
c001c0d4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c0d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c0e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c0e8:	50                   	push   eax
c001c0e9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c0ec:	50                   	push   eax
c001c0ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0f1:	50                   	push   eax
c001c0f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0f6:	50                   	push   eax
c001c0f7:	51                   	push   ecx
c001c0f8:	e8 51 fe ff ff       	call   c001bf4e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c0fd:	83 c4 20             	add    esp,0x20
c001c100:	ba 01 00 00 00       	mov    edx,0x1
c001c105:	84 c0                	test   al,al
c001c107:	74 31                	je     c001c13a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c109:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c10d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c114:	89 03                	mov    DWORD PTR [ebx],eax
c001c116:	ba 00 00 00 00       	mov    edx,0x0
c001c11b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c11f:	85 c0                	test   eax,eax
c001c121:	0f 95 06             	setne  BYTE PTR [esi]
c001c124:	74 14                	je     c001c13a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c126:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c12c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c133:	eb 05                	jmp    c001c13a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c135:	ba 04 00 00 00       	mov    edx,0x4
c001c13a:	83 c4 14             	add    esp,0x14
c001c13d:	89 d0                	mov    eax,edx
c001c13f:	5b                   	pop    ebx
c001c140:	5e                   	pop    esi
c001c141:	c3                   	ret    

c001c142 <ISO9660::openDir(char const*, void**)>:
c001c142:	57                   	push   edi
c001c143:	56                   	push   esi
c001c144:	53                   	push   ebx
c001c145:	83 ec 10             	sub    esp,0x10
c001c148:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c14c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c150:	85 ff                	test   edi,edi
c001c152:	74 7b                	je     c001c1cf <ISO9660::openDir(char const*, void**)+0x8d>
c001c154:	85 f6                	test   esi,esi
c001c156:	74 77                	je     c001c1cf <ISO9660::openDir(char const*, void**)+0x8d>
c001c158:	83 ec 0c             	sub    esp,0xc
c001c15b:	6a 1c                	push   0x1c
c001c15d:	e8 35 d6 fe ff       	call   c0009797 <malloc>
c001c162:	89 07                	mov    DWORD PTR [edi],eax
c001c164:	89 c3                	mov    ebx,eax
c001c166:	58                   	pop    eax
c001c167:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c16b:	50                   	push   eax
c001c16c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c16f:	50                   	push   eax
c001c170:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c174:	50                   	push   eax
c001c175:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c179:	50                   	push   eax
c001c17a:	56                   	push   esi
c001c17b:	e8 ce fd ff ff       	call   c001bf4e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c180:	83 c4 20             	add    esp,0x20
c001c183:	84 c0                	test   al,al
c001c185:	74 07                	je     c001c18e <ISO9660::openDir(char const*, void**)+0x4c>
c001c187:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c18c:	75 0b                	jne    c001c199 <ISO9660::openDir(char const*, void**)+0x57>
c001c18e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c192:	b8 01 00 00 00       	mov    eax,0x1
c001c197:	eb 3b                	jmp    c001c1d4 <ISO9660::openDir(char const*, void**)+0x92>
c001c199:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c19d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c1a1:	89 03                	mov    DWORD PTR [ebx],eax
c001c1a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c1aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c1b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c1bc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c1bf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c1c6:	8a 06                	mov    al,BYTE PTR [esi]
c001c1c8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c1cb:	31 c0                	xor    eax,eax
c001c1cd:	eb 05                	jmp    c001c1d4 <ISO9660::openDir(char const*, void**)+0x92>
c001c1cf:	b8 04 00 00 00       	mov    eax,0x4
c001c1d4:	83 c4 10             	add    esp,0x10
c001c1d7:	5b                   	pop    ebx
c001c1d8:	5e                   	pop    esi
c001c1d9:	5f                   	pop    edi
c001c1da:	c3                   	ret    
c001c1db:	90                   	nop

c001c1dc <ISO9660::ISO9660()>:
c001c1dc:	83 ec 0c             	sub    esp,0xc
c001c1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e3:	83 ec 0c             	sub    esp,0xc
c001c1e6:	50                   	push   eax
c001c1e7:	e8 10 08 ff ff       	call   c000c9fc <Filesystem::Filesystem()>
c001c1ec:	83 c4 10             	add    esp,0x10
c001c1ef:	ba 64 4c 02 c0       	mov    edx,0xc0024c64
c001c1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f8:	89 10                	mov    DWORD PTR [eax],edx
c001c1fa:	90                   	nop
c001c1fb:	83 c4 0c             	add    esp,0xc
c001c1fe:	c3                   	ret    
c001c1ff:	90                   	nop

c001c200 <SoundCard::beginPlayback()>:
c001c200:	c7 44 24 04 c4 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cc4
c001c208:	e9 42 68 ff ff       	jmp    c0012a4f <Krnl::panic(char const*)>
c001c20d:	90                   	nop

c001c20e <SoundCard::stopPlayback()>:
c001c20e:	c7 44 24 04 f8 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cf8
c001c216:	e9 34 68 ff ff       	jmp    c0012a4f <Krnl::panic(char const*)>
c001c21b:	90                   	nop

c001c21c <SoundCard::SoundCard(char const*)>:
c001c21c:	83 ec 1c             	sub    esp,0x1c
c001c21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c223:	83 ec 08             	sub    esp,0x8
c001c226:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c22a:	50                   	push   eax
c001c22b:	e8 36 1b ff ff       	call   c000dd66 <Device::Device(char const*)>
c001c230:	83 c4 10             	add    esp,0x10
c001c233:	ba 90 4d 02 c0       	mov    edx,0xc0024d90
c001c238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c23c:	89 10                	mov    DWORD PTR [eax],edx
c001c23e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c242:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c24d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c25b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c269:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c277:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c281:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c289:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c28e:	7f 19                	jg     c001c2a9 <SoundCard::SoundCard(char const*)+0x8d>
c001c290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c294:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c298:	83 c2 54             	add    edx,0x54
c001c29b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c2a3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c2a7:	eb e0                	jmp    c001c289 <SoundCard::SoundCard(char const*)+0x6d>
c001c2a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2ad:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c2b4:	90                   	nop
c001c2b5:	83 c4 1c             	add    esp,0x1c
c001c2b8:	c3                   	ret    
c001c2b9:	90                   	nop

c001c2ba <SoundCard::~SoundCard()>:
c001c2ba:	83 ec 0c             	sub    esp,0xc
c001c2bd:	ba 90 4d 02 c0       	mov    edx,0xc0024d90
c001c2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c6:	89 10                	mov    DWORD PTR [eax],edx
c001c2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cc:	83 ec 0c             	sub    esp,0xc
c001c2cf:	50                   	push   eax
c001c2d0:	e8 8f 17 ff ff       	call   c000da64 <Device::~Device()>
c001c2d5:	83 c4 10             	add    esp,0x10
c001c2d8:	90                   	nop
c001c2d9:	83 c4 0c             	add    esp,0xc
c001c2dc:	c3                   	ret    
c001c2dd:	90                   	nop

c001c2de <SoundCard::~SoundCard()>:
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	83 ec 0c             	sub    esp,0xc
c001c2e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2e8:	e8 cd ff ff ff       	call   c001c2ba <SoundCard::~SoundCard()>
c001c2ed:	83 c4 10             	add    esp,0x10
c001c2f0:	83 ec 08             	sub    esp,0x8
c001c2f3:	68 e8 01 00 00       	push   0x1e8
c001c2f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2fc:	e8 03 03 ff ff       	call   c000c604 <operator delete(void*, unsigned long)>
c001c301:	83 c4 10             	add    esp,0x10
c001c304:	83 c4 0c             	add    esp,0xc
c001c307:	c3                   	ret    

c001c308 <SoundCard::configureRates(int, int, int)>:
c001c308:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c30c:	31 c0                	xor    eax,eax
c001c30e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c315:	75 20                	jne    c001c337 <SoundCard::configureRates(int, int, int)+0x2f>
c001c317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c31b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c325:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c335:	b0 01                	mov    al,0x1
c001c337:	c3                   	ret    

c001c338 <SoundCard::getSamples16(int, short*)>:
c001c338:	55                   	push   ebp
c001c339:	57                   	push   edi
c001c33a:	31 ff                	xor    edi,edi
c001c33c:	56                   	push   esi
c001c33d:	53                   	push   ebx
c001c33e:	31 db                	xor    ebx,ebx
c001c340:	83 ec 18             	sub    esp,0x18
c001c343:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c347:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c34b:	68 2b 4d 02 c0       	push   0xc0024d2b
c001c350:	e8 90 03 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001c355:	83 c4 0c             	add    esp,0xc
c001c358:	8d 04 36             	lea    eax,[esi+esi*1]
c001c35b:	50                   	push   eax
c001c35c:	6a 00                	push   0x0
c001c35e:	55                   	push   ebp
c001c35f:	e8 44 41 fe ff       	call   c00004a8 <memset>
c001c364:	83 c4 10             	add    esp,0x10
c001c367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c36b:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c372:	85 c0                	test   eax,eax
c001c374:	74 1b                	je     c001c391 <SoundCard::getSamples16(int, short*)+0x59>
c001c376:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c37a:	75 15                	jne    c001c391 <SoundCard::getSamples16(int, short*)+0x59>
c001c37c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c380:	55                   	push   ebp
c001c381:	56                   	push   esi
c001c382:	50                   	push   eax
c001c383:	e8 58 03 00 00       	call   c001c6e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c388:	83 c4 10             	add    esp,0x10
c001c38b:	39 c7                	cmp    edi,eax
c001c38d:	7d 02                	jge    c001c391 <SoundCard::getSamples16(int, short*)+0x59>
c001c38f:	89 c7                	mov    edi,eax
c001c391:	43                   	inc    ebx
c001c392:	83 fb 20             	cmp    ebx,0x20
c001c395:	75 d0                	jne    c001c367 <SoundCard::getSamples16(int, short*)+0x2f>
c001c397:	83 c4 0c             	add    esp,0xc
c001c39a:	89 f8                	mov    eax,edi
c001c39c:	5b                   	pop    ebx
c001c39d:	5e                   	pop    esi
c001c39e:	5f                   	pop    edi
c001c39f:	5d                   	pop    ebp
c001c3a0:	c3                   	ret    
c001c3a1:	90                   	nop

c001c3a2 <SoundCard::getSamples32(int, int*)>:
c001c3a2:	55                   	push   ebp
c001c3a3:	57                   	push   edi
c001c3a4:	31 ff                	xor    edi,edi
c001c3a6:	56                   	push   esi
c001c3a7:	31 f6                	xor    esi,esi
c001c3a9:	53                   	push   ebx
c001c3aa:	83 ec 10             	sub    esp,0x10
c001c3ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c3b1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c3b5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c3b9:	c1 e0 02             	shl    eax,0x2
c001c3bc:	50                   	push   eax
c001c3bd:	6a 00                	push   0x0
c001c3bf:	55                   	push   ebp
c001c3c0:	e8 e3 40 fe ff       	call   c00004a8 <memset>
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c3cf:	85 c0                	test   eax,eax
c001c3d1:	74 1b                	je     c001c3ee <SoundCard::getSamples32(int, int*)+0x4c>
c001c3d3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c3d7:	75 15                	jne    c001c3ee <SoundCard::getSamples32(int, int*)+0x4c>
c001c3d9:	53                   	push   ebx
c001c3da:	55                   	push   ebp
c001c3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3df:	50                   	push   eax
c001c3e0:	e8 f7 03 00 00       	call   c001c7dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c3e5:	83 c4 10             	add    esp,0x10
c001c3e8:	39 c6                	cmp    esi,eax
c001c3ea:	7d 02                	jge    c001c3ee <SoundCard::getSamples32(int, int*)+0x4c>
c001c3ec:	89 c6                	mov    esi,eax
c001c3ee:	47                   	inc    edi
c001c3ef:	83 ff 20             	cmp    edi,0x20
c001c3f2:	75 d4                	jne    c001c3c8 <SoundCard::getSamples32(int, int*)+0x26>
c001c3f4:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c3fa:	85 f6                	test   esi,esi
c001c3fc:	75 0f                	jne    c001c40d <SoundCard::getSamples32(int, int*)+0x6b>
c001c3fe:	84 c0                	test   al,al
c001c400:	74 1b                	je     c001c41d <SoundCard::getSamples32(int, int*)+0x7b>
c001c402:	83 ec 0c             	sub    esp,0xc
c001c405:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c407:	53                   	push   ebx
c001c408:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c40b:	eb 0d                	jmp    c001c41a <SoundCard::getSamples32(int, int*)+0x78>
c001c40d:	84 c0                	test   al,al
c001c40f:	75 0c                	jne    c001c41d <SoundCard::getSamples32(int, int*)+0x7b>
c001c411:	83 ec 0c             	sub    esp,0xc
c001c414:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c416:	53                   	push   ebx
c001c417:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c41a:	83 c4 10             	add    esp,0x10
c001c41d:	83 c4 0c             	add    esp,0xc
c001c420:	89 f0                	mov    eax,esi
c001c422:	5b                   	pop    ebx
c001c423:	5e                   	pop    esi
c001c424:	5f                   	pop    edi
c001c425:	5d                   	pop    ebp
c001c426:	c3                   	ret    
c001c427:	90                   	nop

c001c428 <SoundCard::addChannel(SoundPort*)>:
c001c428:	56                   	push   esi
c001c429:	53                   	push   ebx
c001c42a:	53                   	push   ebx
c001c42b:	31 db                	xor    ebx,ebx
c001c42d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c431:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c439:	74 27                	je     c001c462 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c43b:	43                   	inc    ebx
c001c43c:	83 fb 20             	cmp    ebx,0x20
c001c43f:	75 f0                	jne    c001c431 <SoundCard::addChannel(SoundPort*)+0x9>
c001c441:	83 ec 0c             	sub    esp,0xc
c001c444:	83 cb ff             	or     ebx,0xffffffff
c001c447:	68 51 4d 02 c0       	push   0xc0024d51
c001c44c:	e8 94 02 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001c451:	c7 04 24 4a 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d4a
c001c458:	e8 f2 65 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001c45d:	83 c4 10             	add    esp,0x10
c001c460:	eb 1b                	jmp    c001c47d <SoundCard::addChannel(SoundPort*)+0x55>
c001c462:	51                   	push   ecx
c001c463:	51                   	push   ecx
c001c464:	53                   	push   ebx
c001c465:	68 69 4d 02 c0       	push   0xc0024d69
c001c46a:	e8 76 02 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001c46f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c473:	83 c4 10             	add    esp,0x10
c001c476:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c47d:	89 d8                	mov    eax,ebx
c001c47f:	5a                   	pop    edx
c001c480:	5b                   	pop    ebx
c001c481:	5e                   	pop    esi
c001c482:	c3                   	ret    
c001c483:	90                   	nop

c001c484 <SoundCard::removeChannel(int)>:
c001c484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c488:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c48c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c497:	c3                   	ret    

c001c498 <SoundPort::SoundPort(int, int, int, int)>:
c001c498:	83 ec 0c             	sub    esp,0xc
c001c49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4aa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4b6:	89 10                	mov    DWORD PTR [eax],edx
c001c4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4ce:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c4d3:	75 13                	jne    c001c4e8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4db:	05 a0 0f 00 00       	add    eax,0xfa0
c001c4e0:	01 c0                	add    eax,eax
c001c4e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c4e6:	66 90                	xchg   ax,ax
c001c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c4f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c502:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c505:	c1 e0 02             	shl    eax,0x2
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	50                   	push   eax
c001c50c:	e8 86 d2 fe ff       	call   c0009797 <malloc>
c001c511:	83 c4 10             	add    esp,0x10
c001c514:	89 c2                	mov    edx,eax
c001c516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c51d:	90                   	nop
c001c51e:	83 c4 0c             	add    esp,0xc
c001c521:	c3                   	ret    
c001c522:	66 90                	xchg   ax,ax

c001c524 <SoundPort::~SoundPort()>:
c001c524:	83 ec 0c             	sub    esp,0xc
c001c527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c52e:	85 c0                	test   eax,eax
c001c530:	74 1e                	je     c001c550 <SoundPort::~SoundPort()+0x2c>
c001c532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c536:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c539:	83 ec 0c             	sub    esp,0xc
c001c53c:	50                   	push   eax
c001c53d:	e8 65 d2 fe ff       	call   c00097a7 <free>
c001c542:	83 c4 10             	add    esp,0x10
c001c545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c549:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c550:	90                   	nop
c001c551:	83 c4 0c             	add    esp,0xc
c001c554:	c3                   	ret    
c001c555:	90                   	nop
c001c556:	66 90                	xchg   ax,ax

c001c558 <SoundPort::unpause()>:
c001c558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c55c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c560:	c3                   	ret    
c001c561:	90                   	nop
c001c562:	66 90                	xchg   ax,ax

c001c564 <SoundPort::pause()>:
c001c564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c568:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c56c:	c3                   	ret    
c001c56d:	90                   	nop
c001c56e:	66 90                	xchg   ax,ax

c001c570 <SoundPort::getBufferUsed()>:
c001c570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c574:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c577:	c3                   	ret    

c001c578 <SoundPort::getBufferSize()>:
c001c578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c57f:	c3                   	ret    

c001c580 <SoundPort::buffer16(short*, int)>:
c001c580:	55                   	push   ebp
c001c581:	57                   	push   edi
c001c582:	56                   	push   esi
c001c583:	53                   	push   ebx
c001c584:	83 ec 1c             	sub    esp,0x1c
c001c587:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c58b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c58f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c592:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c595:	0f 84 85 00 00 00    	je     c001c620 <SoundPort::buffer16(short*, int)+0xa0>
c001c59b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c59f:	85 c9                	test   ecx,ecx
c001c5a1:	7e 7d                	jle    c001c620 <SoundPort::buffer16(short*, int)+0xa0>
c001c5a3:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c5a7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c5aa:	c1 e1 0f             	shl    ecx,0xf
c001c5ad:	8d 70 01             	lea    esi,[eax+0x1]
c001c5b0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c5b3:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c5b6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5b9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5bc:	74 6e                	je     c001c62c <SoundPort::buffer16(short*, int)+0xac>
c001c5be:	31 f6                	xor    esi,esi
c001c5c0:	eb 22                	jmp    c001c5e4 <SoundPort::buffer16(short*, int)+0x64>
c001c5c2:	66 90                	xchg   ax,ax
c001c5c4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c5c9:	8d 79 01             	lea    edi,[ecx+0x1]
c001c5cc:	c1 e3 0f             	shl    ebx,0xf
c001c5cf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c5d2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c5d5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c5d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5db:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5de:	74 1c                	je     c001c5fc <SoundPort::buffer16(short*, int)+0x7c>
c001c5e0:	89 c6                	mov    esi,eax
c001c5e2:	66 90                	xchg   ax,ax
c001c5e4:	8d 46 01             	lea    eax,[esi+0x1]
c001c5e7:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c5eb:	75 d7                	jne    c001c5c4 <SoundPort::buffer16(short*, int)+0x44>
c001c5ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c5f1:	83 c4 1c             	add    esp,0x1c
c001c5f4:	5b                   	pop    ebx
c001c5f5:	5e                   	pop    esi
c001c5f6:	5f                   	pop    edi
c001c5f7:	5d                   	pop    ebp
c001c5f8:	c3                   	ret    
c001c5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5fc:	8d 46 02             	lea    eax,[esi+0x2]
c001c5ff:	90                   	nop
c001c600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	68 bc 4d 02 c0       	push   0xc0024dbc
c001c60c:	e8 d4 00 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c618:	83 c4 1c             	add    esp,0x1c
c001c61b:	5b                   	pop    ebx
c001c61c:	5e                   	pop    esi
c001c61d:	5f                   	pop    edi
c001c61e:	5d                   	pop    ebp
c001c61f:	c3                   	ret    
c001c620:	83 c4 1c             	add    esp,0x1c
c001c623:	31 c0                	xor    eax,eax
c001c625:	5b                   	pop    ebx
c001c626:	5e                   	pop    esi
c001c627:	5f                   	pop    edi
c001c628:	5d                   	pop    ebp
c001c629:	c3                   	ret    
c001c62a:	66 90                	xchg   ax,ax
c001c62c:	b8 01 00 00 00       	mov    eax,0x1
c001c631:	eb cd                	jmp    c001c600 <SoundPort::buffer16(short*, int)+0x80>
c001c633:	90                   	nop

c001c634 <SoundPort::buffer32(int*, int)>:
c001c634:	55                   	push   ebp
c001c635:	57                   	push   edi
c001c636:	56                   	push   esi
c001c637:	53                   	push   ebx
c001c638:	83 ec 1c             	sub    esp,0x1c
c001c63b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c63f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c643:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c646:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c64a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c64e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c651:	74 79                	je     c001c6cc <SoundPort::buffer32(int*, int)+0x98>
c001c653:	85 c0                	test   eax,eax
c001c655:	7e 75                	jle    c001c6cc <SoundPort::buffer32(int*, int)+0x98>
c001c657:	8d 71 01             	lea    esi,[ecx+0x1]
c001c65a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c65d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c660:	8b 37                	mov    esi,DWORD PTR [edi]
c001c662:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c665:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c668:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c66b:	74 6b                	je     c001c6d8 <SoundPort::buffer32(int*, int)+0xa4>
c001c66d:	31 f6                	xor    esi,esi
c001c66f:	eb 1f                	jmp    c001c690 <SoundPort::buffer32(int*, int)+0x5c>
c001c671:	8d 76 00             	lea    esi,[esi+0x0]
c001c674:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c677:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c67a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c67d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c680:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c684:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c687:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c68a:	74 1c                	je     c001c6a8 <SoundPort::buffer32(int*, int)+0x74>
c001c68c:	89 de                	mov    esi,ebx
c001c68e:	66 90                	xchg   ax,ax
c001c690:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c693:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c697:	75 db                	jne    c001c674 <SoundPort::buffer32(int*, int)+0x40>
c001c699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c69d:	83 c4 1c             	add    esp,0x1c
c001c6a0:	5b                   	pop    ebx
c001c6a1:	5e                   	pop    esi
c001c6a2:	5f                   	pop    edi
c001c6a3:	5d                   	pop    ebp
c001c6a4:	c3                   	ret    
c001c6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6a8:	8d 46 02             	lea    eax,[esi+0x2]
c001c6ab:	90                   	nop
c001c6ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6b0:	83 ec 0c             	sub    esp,0xc
c001c6b3:	68 d7 4d 02 c0       	push   0xc0024dd7
c001c6b8:	e8 28 00 ff ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001c6bd:	83 c4 10             	add    esp,0x10
c001c6c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6c4:	83 c4 1c             	add    esp,0x1c
c001c6c7:	5b                   	pop    ebx
c001c6c8:	5e                   	pop    esi
c001c6c9:	5f                   	pop    edi
c001c6ca:	5d                   	pop    ebp
c001c6cb:	c3                   	ret    
c001c6cc:	83 c4 1c             	add    esp,0x1c
c001c6cf:	31 c0                	xor    eax,eax
c001c6d1:	5b                   	pop    ebx
c001c6d2:	5e                   	pop    esi
c001c6d3:	5f                   	pop    edi
c001c6d4:	5d                   	pop    ebp
c001c6d5:	c3                   	ret    
c001c6d6:	66 90                	xchg   ax,ax
c001c6d8:	b8 01 00 00 00       	mov    eax,0x1
c001c6dd:	eb cd                	jmp    c001c6ac <SoundPort::buffer32(int*, int)+0x78>
c001c6df:	90                   	nop

c001c6e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c6e0:	57                   	push   edi
c001c6e1:	56                   	push   esi
c001c6e2:	53                   	push   ebx
c001c6e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c6eb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c6f1:	39 03                	cmp    DWORD PTR [ebx],eax
c001c6f3:	74 13                	je     c001c708 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c6f5:	83 ec 0c             	sub    esp,0xc
c001c6f8:	68 2c 4e 02 c0       	push   0xc0024e2c
c001c6fd:	e8 4d 63 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001c702:	83 c4 10             	add    esp,0x10
c001c705:	8d 76 00             	lea    esi,[esi+0x0]
c001c708:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c70e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c711:	74 11                	je     c001c724 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c713:	83 ec 0c             	sub    esp,0xc
c001c716:	68 f2 4d 02 c0       	push   0xc0024df2
c001c71b:	e8 2f 63 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001c720:	83 c4 10             	add    esp,0x10
c001c723:	90                   	nop
c001c724:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c72a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c72d:	74 11                	je     c001c740 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c72f:	83 ec 0c             	sub    esp,0xc
c001c732:	68 f2 4d 02 c0       	push   0xc0024df2
c001c737:	e8 13 63 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001c73c:	83 c4 10             	add    esp,0x10
c001c73f:	90                   	nop
c001c740:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c743:	89 c6                	mov    esi,eax
c001c745:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c749:	7e 05                	jle    c001c750 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c74b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c74f:	90                   	nop
c001c750:	85 f6                	test   esi,esi
c001c752:	7e 30                	jle    c001c784 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c754:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c758:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c75b:	31 c9                	xor    ecx,ecx
c001c75d:	01 d7                	add    edi,edx
c001c75f:	90                   	nop
c001c760:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c763:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c766:	85 c0                	test   eax,eax
c001c768:	79 06                	jns    c001c770 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c76a:	05 ff 7f 00 00       	add    eax,0x7fff
c001c76f:	90                   	nop
c001c770:	c1 f8 0f             	sar    eax,0xf
c001c773:	83 c1 04             	add    ecx,0x4
c001c776:	66 01 02             	add    WORD PTR [edx],ax
c001c779:	83 c2 02             	add    edx,0x2
c001c77c:	39 d7                	cmp    edi,edx
c001c77e:	75 e0                	jne    c001c760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c780:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c783:	90                   	nop
c001c784:	56                   	push   esi
c001c785:	89 c2                	mov    edx,eax
c001c787:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c78e:	29 f2                	sub    edx,esi
c001c790:	52                   	push   edx
c001c791:	50                   	push   eax
c001c792:	68 4c 4e 02 c0       	push   0xc0024e4c
c001c797:	e8 49 ff fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001c79c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c79f:	50                   	push   eax
c001c7a0:	01 f8                	add    eax,edi
c001c7a2:	50                   	push   eax
c001c7a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c7a6:	29 f0                	sub    eax,esi
c001c7a8:	c1 e0 02             	shl    eax,0x2
c001c7ab:	50                   	push   eax
c001c7ac:	68 7c 4e 02 c0       	push   0xc0024e7c
c001c7b1:	e8 2f ff fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001c7b6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c7b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c7bc:	83 c4 1c             	add    esp,0x1c
c001c7bf:	01 d7                	add    edi,edx
c001c7c1:	29 f0                	sub    eax,esi
c001c7c3:	c1 e0 02             	shl    eax,0x2
c001c7c6:	50                   	push   eax
c001c7c7:	57                   	push   edi
c001c7c8:	52                   	push   edx
c001c7c9:	e8 12 3c fe ff       	call   c00003e0 <memmove>
c001c7ce:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c7d1:	83 c4 10             	add    esp,0x10
c001c7d4:	89 f0                	mov    eax,esi
c001c7d6:	5b                   	pop    ebx
c001c7d7:	5e                   	pop    esi
c001c7d8:	5f                   	pop    edi
c001c7d9:	c3                   	ret    
c001c7da:	66 90                	xchg   ax,ax

c001c7dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c7dc:	57                   	push   edi
c001c7dd:	56                   	push   esi
c001c7de:	53                   	push   ebx
c001c7df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c7e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c7eb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c7f1:	39 06                	cmp    DWORD PTR [esi],eax
c001c7f3:	74 13                	je     c001c808 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c7f5:	83 ec 0c             	sub    esp,0xc
c001c7f8:	68 a0 4e 02 c0       	push   0xc0024ea0
c001c7fd:	e8 4d 62 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001c802:	83 c4 10             	add    esp,0x10
c001c805:	8d 76 00             	lea    esi,[esi+0x0]
c001c808:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c80e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c811:	74 11                	je     c001c824 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c813:	83 ec 0c             	sub    esp,0xc
c001c816:	68 0e 4e 02 c0       	push   0xc0024e0e
c001c81b:	e8 2f 62 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001c820:	83 c4 10             	add    esp,0x10
c001c823:	90                   	nop
c001c824:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c82a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c82d:	74 11                	je     c001c840 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001c82f:	83 ec 0c             	sub    esp,0xc
c001c832:	68 0e 4e 02 c0       	push   0xc0024e0e
c001c837:	e8 13 62 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001c83c:	83 c4 10             	add    esp,0x10
c001c83f:	90                   	nop
c001c840:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c843:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c847:	7e 07                	jle    c001c850 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001c849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c84d:	8d 76 00             	lea    esi,[esi+0x0]
c001c850:	85 ff                	test   edi,edi
c001c852:	7e 1c                	jle    c001c870 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001c854:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c85b:	31 c0                	xor    eax,eax
c001c85d:	8d 76 00             	lea    esi,[esi+0x0]
c001c860:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c863:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c866:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c869:	83 c0 04             	add    eax,0x4
c001c86c:	39 c1                	cmp    ecx,eax
c001c86e:	75 f0                	jne    c001c860 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001c870:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c873:	50                   	push   eax
c001c874:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c877:	29 f8                	sub    eax,edi
c001c879:	c1 e0 02             	shl    eax,0x2
c001c87c:	50                   	push   eax
c001c87d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c880:	50                   	push   eax
c001c881:	52                   	push   edx
c001c882:	e8 59 3b fe ff       	call   c00003e0 <memmove>
c001c887:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	89 f8                	mov    eax,edi
c001c88f:	5b                   	pop    ebx
c001c890:	5e                   	pop    esi
c001c891:	5f                   	pop    edi
c001c892:	c3                   	ret    
c001c893:	90                   	nop

c001c894 <PCI::open(int, int, void*)>:
c001c894:	83 ec 18             	sub    esp,0x18
c001c897:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c89b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c89f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8a5:	8b 10                	mov    edx,DWORD PTR [eax]
c001c8a7:	50                   	push   eax
c001c8a8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c8ab:	31 c0                	xor    eax,eax
c001c8ad:	83 c4 1c             	add    esp,0x1c
c001c8b0:	c3                   	ret    
c001c8b1:	90                   	nop

c001c8b2 <PCI::close(int, int, void*)>:
c001c8b2:	31 c0                	xor    eax,eax
c001c8b4:	c3                   	ret    
c001c8b5:	90                   	nop

c001c8b6 <PCI::PCI()>:
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bd:	83 ec 08             	sub    esp,0x8
c001c8c0:	68 bf 4e 02 c0       	push   0xc0024ebf
c001c8c5:	50                   	push   eax
c001c8c6:	e8 f1 0b ff ff       	call   c000d4bc <Bus::Bus(char const*)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	ba 94 50 02 c0       	mov    edx,0xc0025094
c001c8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d7:	89 10                	mov    DWORD PTR [eax],edx
c001c8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8eb:	a3 e0 a1 02 c0       	mov    ds:0xc002a1e0,eax
c001c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c8fa:	0f b6 d0             	movzx  edx,al
c001c8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c901:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c912:	0f b6 d0             	movzx  edx,al
c001c915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c919:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c922:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c928:	8d 50 01             	lea    edx,[eax+0x1]
c001c92b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c92f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c935:	0f b6 d0             	movzx  edx,al
c001c938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c940:	83 c9 c0             	or     ecx,0xffffffc0
c001c943:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c947:	90                   	nop
c001c948:	83 c4 0c             	add    esp,0xc
c001c94b:	c3                   	ret    

c001c94c <PCI::readBAR8(unsigned int, int)>:
c001c94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c954:	f6 c2 01             	test   dl,0x1
c001c957:	74 07                	je     c001c960 <PCI::readBAR8(unsigned int, int)+0x14>
c001c959:	83 e2 fc             	and    edx,0xfffffffc
c001c95c:	01 c2                	add    edx,eax
c001c95e:	ec                   	in     al,dx
c001c95f:	c3                   	ret    
c001c960:	83 e2 f0             	and    edx,0xfffffff0
c001c963:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c966:	c3                   	ret    
c001c967:	90                   	nop

c001c968 <PCI::readBAR16(unsigned int, int)>:
c001c968:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c96c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c970:	f6 c2 01             	test   dl,0x1
c001c973:	74 08                	je     c001c97d <PCI::readBAR16(unsigned int, int)+0x15>
c001c975:	83 e2 fc             	and    edx,0xfffffffc
c001c978:	01 c2                	add    edx,eax
c001c97a:	66 ed                	in     ax,dx
c001c97c:	c3                   	ret    
c001c97d:	83 e2 f0             	and    edx,0xfffffff0
c001c980:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c984:	c3                   	ret    
c001c985:	90                   	nop

c001c986 <PCI::readBAR32(unsigned int, int)>:
c001c986:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c98a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c98e:	f6 c2 01             	test   dl,0x1
c001c991:	74 07                	je     c001c99a <PCI::readBAR32(unsigned int, int)+0x14>
c001c993:	83 e2 fc             	and    edx,0xfffffffc
c001c996:	01 c2                	add    edx,eax
c001c998:	ed                   	in     eax,dx
c001c999:	c3                   	ret    
c001c99a:	83 e2 f0             	and    edx,0xfffffff0
c001c99d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c9a0:	c3                   	ret    
c001c9a1:	90                   	nop

c001c9a2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c9a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c9ae:	f6 c2 01             	test   dl,0x1
c001c9b1:	74 07                	je     c001c9ba <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001c9b3:	83 e2 fc             	and    edx,0xfffffffc
c001c9b6:	01 ca                	add    edx,ecx
c001c9b8:	ee                   	out    dx,al
c001c9b9:	c3                   	ret    
c001c9ba:	83 e2 f0             	and    edx,0xfffffff0
c001c9bd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001c9c0:	c3                   	ret    
c001c9c1:	90                   	nop

c001c9c2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001c9c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c9ce:	f6 c2 01             	test   dl,0x1
c001c9d1:	74 08                	je     c001c9db <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001c9d3:	83 e2 fc             	and    edx,0xfffffffc
c001c9d6:	01 ca                	add    edx,ecx
c001c9d8:	66 ef                	out    dx,ax
c001c9da:	c3                   	ret    
c001c9db:	83 e2 f0             	and    edx,0xfffffff0
c001c9de:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001c9e2:	c3                   	ret    
c001c9e3:	90                   	nop

c001c9e4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001c9e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c9f0:	f6 c2 01             	test   dl,0x1
c001c9f3:	74 07                	je     c001c9fc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001c9f5:	83 e2 fc             	and    edx,0xfffffffc
c001c9f8:	01 ca                	add    edx,ecx
c001c9fa:	ef                   	out    dx,eax
c001c9fb:	c3                   	ret    
c001c9fc:	83 e2 f0             	and    edx,0xfffffff0
c001c9ff:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ca02:	c3                   	ret    
c001ca03:	90                   	nop

c001ca04 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ca04:	55                   	push   ebp
c001ca05:	57                   	push   edi
c001ca06:	56                   	push   esi
c001ca07:	53                   	push   ebx
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ca0f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ca13:	89 f0                	mov    eax,esi
c001ca15:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ca19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ca1d:	3c 07                	cmp    al,0x7
c001ca1f:	76 10                	jbe    c001ca31 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ca21:	83 ec 0c             	sub    esp,0xc
c001ca24:	68 c7 4e 02 c0       	push   0xc0024ec7
c001ca29:	e8 21 60 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001ca2e:	83 c4 10             	add    esp,0x10
c001ca31:	80 fb 0f             	cmp    bl,0xf
c001ca34:	76 10                	jbe    c001ca46 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001ca36:	83 ec 0c             	sub    esp,0xc
c001ca39:	68 f7 4e 02 c0       	push   0xc0024ef7
c001ca3e:	e8 0c 60 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001ca43:	83 c4 10             	add    esp,0x10
c001ca46:	8d 04 36             	lea    eax,[esi+esi*1]
c001ca49:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ca4e:	83 c8 f0             	or     eax,0xfffffff0
c001ca51:	ee                   	out    dx,al
c001ca52:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ca57:	89 e8                	mov    eax,ebp
c001ca59:	ee                   	out    dx,al
c001ca5a:	83 c4 0c             	add    esp,0xc
c001ca5d:	89 d8                	mov    eax,ebx
c001ca5f:	66 81 e7 fc 00       	and    di,0xfc
c001ca64:	5b                   	pop    ebx
c001ca65:	c1 e0 08             	shl    eax,0x8
c001ca68:	5e                   	pop    esi
c001ca69:	09 f8                	or     eax,edi
c001ca6b:	5f                   	pop    edi
c001ca6c:	66 0d 00 c0          	or     ax,0xc000
c001ca70:	5d                   	pop    ebp
c001ca71:	c3                   	ret    

c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ca72:	57                   	push   edi
c001ca73:	56                   	push   esi
c001ca74:	53                   	push   ebx
c001ca75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca7d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ca83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca87:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca8b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ca8f:	83 ff 01             	cmp    edi,0x1
c001ca92:	75 3e                	jne    c001cad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001ca94:	89 de                	mov    esi,ebx
c001ca96:	0f b6 c0             	movzx  eax,al
c001ca99:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ca9f:	c1 e0 10             	shl    eax,0x10
c001caa2:	0f b6 c9             	movzx  ecx,cl
c001caa5:	09 f0                	or     eax,esi
c001caa7:	c1 e1 08             	shl    ecx,0x8
c001caaa:	0f b6 d2             	movzx  edx,dl
c001caad:	09 c8                	or     eax,ecx
c001caaf:	c1 e2 0b             	shl    edx,0xb
c001cab2:	09 d0                	or     eax,edx
c001cab4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cab9:	0d 00 00 00 80       	or     eax,0x80000000
c001cabe:	ef                   	out    dx,eax
c001cabf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cac4:	ed                   	in     eax,dx
c001cac5:	83 e3 02             	and    ebx,0x2
c001cac8:	0f b6 cb             	movzx  ecx,bl
c001cacb:	c1 e1 03             	shl    ecx,0x3
c001cace:	d3 e8                	shr    eax,cl
c001cad0:	eb 43                	jmp    c001cb15 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cad2:	83 ff 02             	cmp    edi,0x2
c001cad5:	75 2c                	jne    c001cb03 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cad7:	83 ec 0c             	sub    esp,0xc
c001cada:	0f b6 c9             	movzx  ecx,cl
c001cadd:	0f b6 d2             	movzx  edx,dl
c001cae0:	0f b6 fb             	movzx  edi,bl
c001cae3:	0f b6 c0             	movzx  eax,al
c001cae6:	57                   	push   edi
c001cae7:	51                   	push   ecx
c001cae8:	52                   	push   edx
c001cae9:	50                   	push   eax
c001caea:	56                   	push   esi
c001caeb:	e8 14 ff ff ff       	call   c001ca04 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001caf0:	89 c2                	mov    edx,eax
c001caf2:	ed                   	in     eax,dx
c001caf3:	83 e3 02             	and    ebx,0x2
c001caf6:	83 c4 20             	add    esp,0x20
c001caf9:	0f b6 cb             	movzx  ecx,bl
c001cafc:	c1 e1 03             	shl    ecx,0x3
c001caff:	d3 e8                	shr    eax,cl
c001cb01:	eb 12                	jmp    c001cb15 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cb03:	83 ec 0c             	sub    esp,0xc
c001cb06:	68 27 4f 02 c0       	push   0xc0024f27
c001cb0b:	e8 3f 5f ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	31 c0                	xor    eax,eax
c001cb15:	5b                   	pop    ebx
c001cb16:	5e                   	pop    esi
c001cb17:	5f                   	pop    edi
c001cb18:	c3                   	ret    
c001cb19:	90                   	nop

c001cb1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cb1a:	83 ec 18             	sub    esp,0x18
c001cb1d:	6a 00                	push   0x0
c001cb1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb24:	50                   	push   eax
c001cb25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb2a:	50                   	push   eax
c001cb2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb30:	50                   	push   eax
c001cb31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb35:	e8 38 ff ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb3a:	83 c4 2c             	add    esp,0x2c
c001cb3d:	c3                   	ret    

c001cb3e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cb3e:	83 ec 18             	sub    esp,0x18
c001cb41:	6a 0e                	push   0xe
c001cb43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb48:	50                   	push   eax
c001cb49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb4e:	50                   	push   eax
c001cb4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb54:	50                   	push   eax
c001cb55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb59:	e8 14 ff ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb5e:	83 c4 2c             	add    esp,0x2c
c001cb61:	0f b6 c0             	movzx  eax,al
c001cb64:	c3                   	ret    
c001cb65:	90                   	nop

c001cb66 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cb66:	55                   	push   ebp
c001cb67:	57                   	push   edi
c001cb68:	56                   	push   esi
c001cb69:	53                   	push   ebx
c001cb6a:	83 ec 18             	sub    esp,0x18
c001cb6d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cb72:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cb77:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cb7c:	6a 0a                	push   0xa
c001cb7e:	56                   	push   esi
c001cb7f:	55                   	push   ebp
c001cb80:	57                   	push   edi
c001cb81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb85:	e8 e8 fe ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb8a:	83 c4 14             	add    esp,0x14
c001cb8d:	89 c3                	mov    ebx,eax
c001cb8f:	6a 0a                	push   0xa
c001cb91:	0f b6 db             	movzx  ebx,bl
c001cb94:	56                   	push   esi
c001cb95:	55                   	push   ebp
c001cb96:	57                   	push   edi
c001cb97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb9b:	e8 d2 fe ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cba0:	83 c4 2c             	add    esp,0x2c
c001cba3:	25 00 ff 00 00       	and    eax,0xff00
c001cba8:	09 d8                	or     eax,ebx
c001cbaa:	5b                   	pop    ebx
c001cbab:	5e                   	pop    esi
c001cbac:	5f                   	pop    edi
c001cbad:	5d                   	pop    ebp
c001cbae:	c3                   	ret    
c001cbaf:	90                   	nop

c001cbb0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cbb0:	83 ec 18             	sub    esp,0x18
c001cbb3:	6a 08                	push   0x8
c001cbb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbba:	50                   	push   eax
c001cbbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbc0:	50                   	push   eax
c001cbc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbc6:	50                   	push   eax
c001cbc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbcb:	e8 a2 fe ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbd0:	83 c4 2c             	add    esp,0x2c
c001cbd3:	0f b6 c4             	movzx  eax,ah
c001cbd6:	c3                   	ret    
c001cbd7:	90                   	nop

c001cbd8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cbd8:	83 ec 18             	sub    esp,0x18
c001cbdb:	6a 08                	push   0x8
c001cbdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbe2:	50                   	push   eax
c001cbe3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbe8:	50                   	push   eax
c001cbe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbee:	50                   	push   eax
c001cbef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbf3:	e8 7a fe ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbf8:	83 c4 2c             	add    esp,0x2c
c001cbfb:	c3                   	ret    

c001cbfc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cbfc:	83 ec 18             	sub    esp,0x18
c001cbff:	6a 3c                	push   0x3c
c001cc01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc06:	50                   	push   eax
c001cc07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc0c:	50                   	push   eax
c001cc0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc12:	50                   	push   eax
c001cc13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc17:	e8 56 fe ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc1c:	83 c4 2c             	add    esp,0x2c
c001cc1f:	c3                   	ret    

c001cc20 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cc20:	83 ec 18             	sub    esp,0x18
c001cc23:	6a 18                	push   0x18
c001cc25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc2a:	50                   	push   eax
c001cc2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc30:	50                   	push   eax
c001cc31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc36:	50                   	push   eax
c001cc37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc3b:	e8 32 fe ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc40:	83 c4 2c             	add    esp,0x2c
c001cc43:	0f b6 c4             	movzx  eax,ah
c001cc46:	c3                   	ret    
c001cc47:	90                   	nop

c001cc48 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc48:	55                   	push   ebp
c001cc49:	57                   	push   edi
c001cc4a:	56                   	push   esi
c001cc4b:	53                   	push   ebx
c001cc4c:	83 ec 28             	sub    esp,0x28
c001cc4f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cc53:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cc58:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cc5d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cc62:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cc69:	8d 43 12             	lea    eax,[ebx+0x12]
c001cc6c:	83 c3 10             	add    ebx,0x10
c001cc6f:	0f b6 c0             	movzx  eax,al
c001cc72:	0f b6 db             	movzx  ebx,bl
c001cc75:	50                   	push   eax
c001cc76:	51                   	push   ecx
c001cc77:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cc7b:	57                   	push   edi
c001cc7c:	55                   	push   ebp
c001cc7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc81:	e8 ec fd ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc86:	83 c4 14             	add    esp,0x14
c001cc89:	89 c6                	mov    esi,eax
c001cc8b:	53                   	push   ebx
c001cc8c:	c1 e6 10             	shl    esi,0x10
c001cc8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc93:	51                   	push   ecx
c001cc94:	57                   	push   edi
c001cc95:	55                   	push   ebp
c001cc96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc9a:	e8 d3 fd ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc9f:	83 c4 3c             	add    esp,0x3c
c001cca2:	0f b7 c0             	movzx  eax,ax
c001cca5:	5b                   	pop    ebx
c001cca6:	09 f0                	or     eax,esi
c001cca8:	5e                   	pop    esi
c001cca9:	5f                   	pop    edi
c001ccaa:	5d                   	pop    ebp
c001ccab:	c3                   	ret    

c001ccac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ccac:	55                   	push   ebp
c001ccad:	57                   	push   edi
c001ccae:	56                   	push   esi
c001ccaf:	53                   	push   ebx
c001ccb0:	83 ec 0c             	sub    esp,0xc
c001ccb3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccb7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ccbb:	89 f5                	mov    ebp,esi
c001ccbd:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001ccc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cccb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cccf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ccd3:	83 f9 01             	cmp    ecx,0x1
c001ccd6:	75 5d                	jne    c001cd35 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ccd8:	0f b6 c8             	movzx  ecx,al
c001ccdb:	0f b6 d2             	movzx  edx,dl
c001ccde:	c1 e1 10             	shl    ecx,0x10
c001cce1:	c1 e2 0b             	shl    edx,0xb
c001cce4:	89 f0                	mov    eax,esi
c001cce6:	25 fc 00 00 00       	and    eax,0xfc
c001cceb:	09 c1                	or     ecx,eax
c001cced:	89 e8                	mov    eax,ebp
c001ccef:	0f b6 c0             	movzx  eax,al
c001ccf2:	c1 e0 08             	shl    eax,0x8
c001ccf5:	09 c1                	or     ecx,eax
c001ccf7:	09 d1                	or     ecx,edx
c001ccf9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ccfe:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cd04:	89 c8                	mov    eax,ecx
c001cd06:	ef                   	out    dx,eax
c001cd07:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd0c:	ed                   	in     eax,dx
c001cd0d:	0f b7 db             	movzx  ebx,bx
c001cd10:	83 e6 02             	and    esi,0x2
c001cd13:	74 0a                	je     c001cd1f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cd15:	0f b7 d0             	movzx  edx,ax
c001cd18:	c1 e3 10             	shl    ebx,0x10
c001cd1b:	09 d3                	or     ebx,edx
c001cd1d:	eb 05                	jmp    c001cd24 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cd1f:	66 31 c0             	xor    ax,ax
c001cd22:	09 c3                	or     ebx,eax
c001cd24:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd29:	89 c8                	mov    eax,ecx
c001cd2b:	ef                   	out    dx,eax
c001cd2c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd31:	89 d8                	mov    eax,ebx
c001cd33:	eb 41                	jmp    c001cd76 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cd35:	83 f9 02             	cmp    ecx,0x2
c001cd38:	75 45                	jne    c001cd7f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	0f b6 d2             	movzx  edx,dl
c001cd40:	89 f1                	mov    ecx,esi
c001cd42:	0f b6 c0             	movzx  eax,al
c001cd45:	0f b6 f1             	movzx  esi,cl
c001cd48:	89 e9                	mov    ecx,ebp
c001cd4a:	56                   	push   esi
c001cd4b:	0f b6 c9             	movzx  ecx,cl
c001cd4e:	51                   	push   ecx
c001cd4f:	52                   	push   edx
c001cd50:	50                   	push   eax
c001cd51:	57                   	push   edi
c001cd52:	e8 ad fc ff ff       	call   c001ca04 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd57:	89 c2                	mov    edx,eax
c001cd59:	ed                   	in     eax,dx
c001cd5a:	83 c4 20             	add    esp,0x20
c001cd5d:	0f b7 db             	movzx  ebx,bx
c001cd60:	f6 c2 02             	test   dl,0x2
c001cd63:	74 0c                	je     c001cd71 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cd65:	0f b7 c8             	movzx  ecx,ax
c001cd68:	89 d8                	mov    eax,ebx
c001cd6a:	c1 e0 10             	shl    eax,0x10
c001cd6d:	09 c8                	or     eax,ecx
c001cd6f:	eb 05                	jmp    c001cd76 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cd71:	66 31 c0             	xor    ax,ax
c001cd74:	09 d8                	or     eax,ebx
c001cd76:	ef                   	out    dx,eax
c001cd77:	83 c4 0c             	add    esp,0xc
c001cd7a:	5b                   	pop    ebx
c001cd7b:	5e                   	pop    esi
c001cd7c:	5f                   	pop    edi
c001cd7d:	5d                   	pop    ebp
c001cd7e:	c3                   	ret    
c001cd7f:	c7 44 24 20 27 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f27
c001cd87:	83 c4 0c             	add    esp,0xc
c001cd8a:	5b                   	pop    ebx
c001cd8b:	5e                   	pop    esi
c001cd8c:	5f                   	pop    edi
c001cd8d:	5d                   	pop    ebp
c001cd8e:	e9 bc 5c ff ff       	jmp    c0012a4f <Krnl::panic(char const*)>
c001cd93:	90                   	nop

c001cd94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cd94:	55                   	push   ebp
c001cd95:	57                   	push   edi
c001cd96:	56                   	push   esi
c001cd97:	53                   	push   ebx
c001cd98:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cd9e:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001cda5:	75 0f                	jne    c001cdb6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001cda7:	80 3d ec a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a1ec,0x0
c001cdae:	0f 85 fa 00 00 00    	jne    c001ceae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001cdb4:	eb 2f                	jmp    c001cde5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001cdb6:	83 ec 0c             	sub    esp,0xc
c001cdb9:	68 2d 4f 02 c0       	push   0xc0024f2d
c001cdbe:	e8 2e ca fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cdc3:	83 c4 10             	add    esp,0x10
c001cdc6:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001cdcd:	75 d8                	jne    c001cda7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001cdcf:	e4 60                	in     al,0x60
c001cdd1:	3c 1c                	cmp    al,0x1c
c001cdd3:	74 04                	je     c001cdd9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cdd5:	3c 5a                	cmp    al,0x5a
c001cdd7:	75 f6                	jne    c001cdcf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001cdd9:	e4 60                	in     al,0x60
c001cddb:	3c 5a                	cmp    al,0x5a
c001cddd:	74 fa                	je     c001cdd9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cddf:	3c 1c                	cmp    al,0x1c
c001cde1:	74 f6                	je     c001cdd9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cde3:	eb c2                	jmp    c001cda7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001cde5:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001cdec:	0f 85 86 00 00 00    	jne    c001ce78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001cdf2:	83 ec 0c             	sub    esp,0xc
c001cdf5:	68 14 01 00 00       	push   0x114
c001cdfa:	e8 98 c9 fe ff       	call   c0009797 <malloc>
c001cdff:	83 c4 0c             	add    esp,0xc
c001ce02:	89 c3                	mov    ebx,eax
c001ce04:	ff 35 d0 97 02 c0    	push   DWORD PTR ds:0xc00297d0
c001ce0a:	68 47 4f 02 c0       	push   0xc0024f47
c001ce0f:	50                   	push   eax
c001ce10:	e8 3b fe fe ff       	call   c000cc50 <File::File(char const*, Process*)>
c001ce15:	5a                   	pop    edx
c001ce16:	59                   	pop    ecx
c001ce17:	6a 01                	push   0x1
c001ce19:	53                   	push   ebx
c001ce1a:	e8 0b ff fe ff       	call   c000cd2a <File::open(FileOpenMode)>
c001ce1f:	83 c4 0c             	add    esp,0xc
c001ce22:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001ce26:	50                   	push   eax
c001ce27:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ce2b:	50                   	push   eax
c001ce2c:	53                   	push   ebx
c001ce2d:	e8 a4 01 ff ff       	call   c000cfd6 <File::stat(unsigned long long*, bool*)>
c001ce32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce36:	40                   	inc    eax
c001ce37:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce3a:	e8 58 c9 fe ff       	call   c0009797 <malloc>
c001ce3f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce43:	a3 e8 a1 02 c0       	mov    ds:0xc002a1e8,eax
c001ce48:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001ce4c:	5e                   	pop    esi
c001ce4d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ce4f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001ce53:	51                   	push   ecx
c001ce54:	50                   	push   eax
c001ce55:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001ce59:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001ce5d:	53                   	push   ebx
c001ce5e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ce61:	83 c4 14             	add    esp,0x14
c001ce64:	53                   	push   ebx
c001ce65:	e8 1e ff fe ff       	call   c000cd88 <File::close()>
c001ce6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce6e:	83 c4 10             	add    esp,0x10
c001ce71:	a3 e4 a1 02 c0       	mov    ds:0xc002a1e4,eax
c001ce76:	eb 36                	jmp    c001ceae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	68 60 4f 02 c0       	push   0xc0024f60
c001ce80:	e8 6c c9 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ce85:	83 c4 10             	add    esp,0x10
c001ce88:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001ce8f:	0f 85 5d ff ff ff    	jne    c001cdf2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001ce95:	e4 60                	in     al,0x60
c001ce97:	3c 1c                	cmp    al,0x1c
c001ce99:	74 04                	je     c001ce9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001ce9b:	3c 5a                	cmp    al,0x5a
c001ce9d:	75 f6                	jne    c001ce95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001ce9f:	e4 60                	in     al,0x60
c001cea1:	3c 5a                	cmp    al,0x5a
c001cea3:	74 fa                	je     c001ce9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cea5:	3c 1c                	cmp    al,0x1c
c001cea7:	74 f6                	je     c001ce9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cea9:	e9 44 ff ff ff       	jmp    c001cdf2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001ceae:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001ceb5:	75 0b                	jne    c001cec2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001ceb7:	31 f6                	xor    esi,esi
c001ceb9:	31 db                	xor    ebx,ebx
c001cebb:	31 ed                	xor    ebp,ebp
c001cebd:	e9 a3 01 00 00       	jmp    c001d065 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001cec2:	83 ec 0c             	sub    esp,0xc
c001cec5:	68 72 4f 02 c0       	push   0xc0024f72
c001ceca:	e8 22 c9 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cecf:	8b 15 e0 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262e0
c001ced5:	83 c4 10             	add    esp,0x10
c001ced8:	f6 c2 80             	test   dl,0x80
c001cedb:	74 0c                	je     c001cee9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001cedd:	0f ba e2 0b          	bt     edx,0xb
c001cee1:	72 1a                	jb     c001cefd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001cee3:	eb d2                	jmp    c001ceb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cee5:	3c 5a                	cmp    al,0x5a
c001cee7:	74 0c                	je     c001cef5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cee9:	e4 60                	in     al,0x60
c001ceeb:	3c 1c                	cmp    al,0x1c
c001ceed:	75 f6                	jne    c001cee5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001ceef:	eb 04                	jmp    c001cef5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cef1:	3c 1c                	cmp    al,0x1c
c001cef3:	75 e8                	jne    c001cedd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001cef5:	e4 60                	in     al,0x60
c001cef7:	3c 5a                	cmp    al,0x5a
c001cef9:	74 fa                	je     c001cef5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cefb:	eb f4                	jmp    c001cef1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001cefd:	83 ec 0c             	sub    esp,0xc
c001cf00:	68 77 4f 02 c0       	push   0xc0024f77
c001cf05:	e8 e7 c8 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001cf0a:	83 c4 10             	add    esp,0x10
c001cf0d:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001cf14:	75 a1                	jne    c001ceb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cf16:	e4 60                	in     al,0x60
c001cf18:	3c 5a                	cmp    al,0x5a
c001cf1a:	74 04                	je     c001cf20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001cf1c:	3c 1c                	cmp    al,0x1c
c001cf1e:	75 f6                	jne    c001cf16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001cf20:	e4 60                	in     al,0x60
c001cf22:	3c 5a                	cmp    al,0x5a
c001cf24:	74 fa                	je     c001cf20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001cf26:	3c 1c                	cmp    al,0x1c
c001cf28:	74 f6                	je     c001cf20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001cf2a:	eb 8b                	jmp    c001ceb7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cf2c:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001cf33:	0f 85 3d 01 00 00    	jne    c001d076 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001cf39:	a1 e8 a1 02 c0       	mov    eax,ds:0xc002a1e8
c001cf3e:	8d 7e 01             	lea    edi,[esi+0x1]
c001cf41:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001cf44:	d4 40                	aam    0x40
c001cf46:	d5 39                	aad    0x39
c001cf48:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001cf4f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cf53:	0f 85 53 01 00 00    	jne    c001d0ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001cf59:	8b 15 e8 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e8
c001cf5f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001cf62:	d4 40                	aam    0x40
c001cf64:	d5 39                	aad    0x39
c001cf66:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cf6a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001cf6e:	d4 40                	aam    0x40
c001cf70:	d5 39                	aad    0x39
c001cf72:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cf76:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001cf7a:	d4 40                	aam    0x40
c001cf7c:	d5 39                	aad    0x39
c001cf7e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cf82:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001cf86:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001cf8a:	3c 56                	cmp    al,0x56
c001cf8c:	74 49                	je     c001cfd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001cf8e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001cf92:	d4 40                	aam    0x40
c001cf94:	d5 39                	aad    0x39
c001cf96:	8d 48 d0             	lea    ecx,[eax-0x30]
c001cf99:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001cf9d:	0f b6 c9             	movzx  ecx,cl
c001cfa0:	c1 e1 04             	shl    ecx,0x4
c001cfa3:	d4 40                	aam    0x40
c001cfa5:	d5 39                	aad    0x39
c001cfa7:	83 e8 30             	sub    eax,0x30
c001cfaa:	0f b6 c0             	movzx  eax,al
c001cfad:	09 c1                	or     ecx,eax
c001cfaf:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001cfb3:	c1 e1 04             	shl    ecx,0x4
c001cfb6:	d4 40                	aam    0x40
c001cfb8:	d5 39                	aad    0x39
c001cfba:	83 e8 30             	sub    eax,0x30
c001cfbd:	0f b6 c0             	movzx  eax,al
c001cfc0:	09 c1                	or     ecx,eax
c001cfc2:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001cfc6:	c1 e1 04             	shl    ecx,0x4
c001cfc9:	d4 40                	aam    0x40
c001cfcb:	d5 39                	aad    0x39
c001cfcd:	83 e8 30             	sub    eax,0x30
c001cfd0:	0f b6 c0             	movzx  eax,al
c001cfd3:	09 c8                	or     eax,ecx
c001cfd5:	89 c5                	mov    ebp,eax
c001cfd7:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001cfdb:	80 f9 44             	cmp    cl,0x44
c001cfde:	74 47                	je     c001d027 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001cfe0:	88 c8                	mov    al,cl
c001cfe2:	d4 40                	aam    0x40
c001cfe4:	d5 39                	aad    0x39
c001cfe6:	83 e8 30             	sub    eax,0x30
c001cfe9:	0f b6 f8             	movzx  edi,al
c001cfec:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001cff0:	c1 e7 04             	shl    edi,0x4
c001cff3:	d4 40                	aam    0x40
c001cff5:	d5 39                	aad    0x39
c001cff7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001cffa:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001cffe:	0f b6 db             	movzx  ebx,bl
c001d001:	09 fb                	or     ebx,edi
c001d003:	c1 e3 04             	shl    ebx,0x4
c001d006:	d4 40                	aam    0x40
c001d008:	d5 39                	aad    0x39
c001d00a:	83 e8 30             	sub    eax,0x30
c001d00d:	0f b6 f8             	movzx  edi,al
c001d010:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d014:	09 fb                	or     ebx,edi
c001d016:	89 df                	mov    edi,ebx
c001d018:	c1 e7 04             	shl    edi,0x4
c001d01b:	d4 40                	aam    0x40
c001d01d:	d5 39                	aad    0x39
c001d01f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d022:	0f b6 db             	movzx  ebx,bl
c001d025:	09 fb                	or     ebx,edi
c001d027:	a1 e4 a1 02 c0       	mov    eax,ds:0xc002a1e4
c001d02c:	83 c6 10             	add    esi,0x10
c001d02f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d033:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d037:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d03a:	3c 0a                	cmp    al,0xa
c001d03c:	0f 85 a0 00 00 00    	jne    c001d0e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d042:	3c 0a                	cmp    al,0xa
c001d044:	0f 94 c0             	sete   al
c001d047:	0f b6 c0             	movzx  eax,al
c001d04a:	01 c6                	add    esi,eax
c001d04c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d051:	0f 84 a2 00 00 00    	je     c001d0f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d057:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d05f:	0f 84 94 00 00 00    	je     c001d0f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d065:	39 35 e4 a1 02 c0    	cmp    DWORD PTR ds:0xc002a1e4,esi
c001d06b:	0f 8f bb fe ff ff    	jg     c001cf2c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d071:	e9 e8 00 00 00       	jmp    c001d15e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d076:	83 ec 0c             	sub    esp,0xc
c001d079:	68 7e 4f 02 c0       	push   0xc0024f7e
c001d07e:	e8 6e c7 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d083:	83 c4 10             	add    esp,0x10
c001d086:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d08d:	0f 85 a6 fe ff ff    	jne    c001cf39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d093:	e4 60                	in     al,0x60
c001d095:	3c 5a                	cmp    al,0x5a
c001d097:	74 04                	je     c001d09d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d099:	3c 1c                	cmp    al,0x1c
c001d09b:	75 f6                	jne    c001d093 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d09d:	e4 60                	in     al,0x60
c001d09f:	3c 5a                	cmp    al,0x5a
c001d0a1:	74 fa                	je     c001d09d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d0a3:	3c 1c                	cmp    al,0x1c
c001d0a5:	74 f6                	je     c001d09d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d0a7:	e9 8d fe ff ff       	jmp    c001cf39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d0ac:	83 ec 0c             	sub    esp,0xc
c001d0af:	68 86 4f 02 c0       	push   0xc0024f86
c001d0b4:	e8 38 c7 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d0b9:	83 c4 10             	add    esp,0x10
c001d0bc:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d0c3:	0f 85 90 fe ff ff    	jne    c001cf59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d0c9:	e4 60                	in     al,0x60
c001d0cb:	3c 5a                	cmp    al,0x5a
c001d0cd:	74 04                	je     c001d0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d0cf:	3c 1c                	cmp    al,0x1c
c001d0d1:	75 f6                	jne    c001d0c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d0d3:	e4 60                	in     al,0x60
c001d0d5:	3c 5a                	cmp    al,0x5a
c001d0d7:	74 fa                	je     c001d0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d0d9:	3c 1c                	cmp    al,0x1c
c001d0db:	74 f6                	je     c001d0d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d0dd:	e9 77 fe ff ff       	jmp    c001cf59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d0e2:	47                   	inc    edi
c001d0e3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d0e7:	0f 84 55 ff ff ff    	je     c001d042 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d0ed:	46                   	inc    esi
c001d0ee:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d0f1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d0f4:	e9 3e ff ff ff       	jmp    c001d037 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d0f9:	80 f9 44             	cmp    cl,0x44
c001d0fc:	74 0e                	je     c001d10c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d0fe:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d106:	0f 85 59 ff ff ff    	jne    c001d065 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d10c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d110:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d114:	c1 e0 04             	shl    eax,0x4
c001d117:	83 ea 30             	sub    edx,0x30
c001d11a:	09 d0                	or     eax,edx
c001d11c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d123:	0f 85 3c ff ff ff    	jne    c001d065 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d129:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d12d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d131:	c1 e2 04             	shl    edx,0x4
c001d134:	83 e8 30             	sub    eax,0x30
c001d137:	09 d0                	or     eax,edx
c001d139:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d140:	0f 85 1f ff ff ff    	jne    c001d065 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d146:	50                   	push   eax
c001d147:	50                   	push   eax
c001d148:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d14c:	50                   	push   eax
c001d14d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d154:	e8 0b 34 fe ff       	call   c0000564 <strcpy>
c001d159:	83 c4 10             	add    esp,0x10
c001d15c:	eb 15                	jmp    c001d173 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d15e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d165:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d170:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d173:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d17a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d180:	5b                   	pop    ebx
c001d181:	5e                   	pop    esi
c001d182:	5f                   	pop    edi
c001d183:	5d                   	pop    ebp
c001d184:	c3                   	ret    
c001d185:	90                   	nop

c001d186 <PCI::checkBus(unsigned char)>:
c001d186:	56                   	push   esi
c001d187:	53                   	push   ebx
c001d188:	31 db                	xor    ebx,ebx
c001d18a:	51                   	push   ecx
c001d18b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d190:	52                   	push   edx
c001d191:	53                   	push   ebx
c001d192:	43                   	inc    ebx
c001d193:	56                   	push   esi
c001d194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d198:	e8 bf 07 00 00       	call   c001d95c <PCI::checkDevice(unsigned char, unsigned char)>
c001d19d:	83 c4 10             	add    esp,0x10
c001d1a0:	83 fb 20             	cmp    ebx,0x20
c001d1a3:	75 eb                	jne    c001d190 <PCI::checkBus(unsigned char)+0xa>
c001d1a5:	58                   	pop    eax
c001d1a6:	5b                   	pop    ebx
c001d1a7:	5e                   	pop    esi
c001d1a8:	c3                   	ret    
c001d1a9:	90                   	nop

c001d1aa <PCI::foundDevice(PCIDeviceInfo)>:
c001d1aa:	55                   	push   ebp
c001d1ab:	57                   	push   edi
c001d1ac:	56                   	push   esi
c001d1ad:	53                   	push   ebx
c001d1ae:	83 ec 1c             	sub    esp,0x1c
c001d1b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1b5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d1bb:	0f 84 20 04 00 00    	je     c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d1c1:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d1c8:	75 37                	jne    c001d201 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001d1ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d1ce:	66 81 f9 06 04       	cmp    cx,0x406
c001d1d3:	75 5b                	jne    c001d230 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001d1d5:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d1da:	50                   	push   eax
c001d1db:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d1e0:	50                   	push   eax
c001d1e1:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d1e6:	50                   	push   eax
c001d1e7:	53                   	push   ebx
c001d1e8:	e8 33 fa ff ff       	call   c001cc20 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d1ed:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001d1f1:	0f b6 c0             	movzx  eax,al
c001d1f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d1f8:	83 c4 2c             	add    esp,0x2c
c001d1fb:	5b                   	pop    ebx
c001d1fc:	5e                   	pop    esi
c001d1fd:	5f                   	pop    edi
c001d1fe:	5d                   	pop    ebp
c001d1ff:	eb 85                	jmp    c001d186 <PCI::checkBus(unsigned char)>
c001d201:	83 ec 0c             	sub    esp,0xc
c001d204:	68 8f 4f 02 c0       	push   0xc0024f8f
c001d209:	e8 e3 c5 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d20e:	83 c4 10             	add    esp,0x10
c001d211:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d218:	75 b0                	jne    c001d1ca <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d21a:	e4 60                	in     al,0x60
c001d21c:	3c 5a                	cmp    al,0x5a
c001d21e:	74 04                	je     c001d224 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d220:	3c 1c                	cmp    al,0x1c
c001d222:	75 f6                	jne    c001d21a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001d224:	e4 60                	in     al,0x60
c001d226:	3c 5a                	cmp    al,0x5a
c001d228:	74 fa                	je     c001d224 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d22a:	3c 1c                	cmp    al,0x1c
c001d22c:	74 f6                	je     c001d224 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d22e:	eb 9a                	jmp    c001d1ca <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d230:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d236:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d23a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d23e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d242:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d246:	88 d0                	mov    al,dl
c001d248:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d24d:	74 3b                	je     c001d28a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001d24f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d253:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d256:	85 d2                	test   edx,edx
c001d258:	74 24                	je     c001d27e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d25a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d260:	31 ef                	xor    edi,ebp
c001d262:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d268:	75 14                	jne    c001d27e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d26a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d270:	75 0c                	jne    c001d27e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d272:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d278:	0f 84 63 03 00 00    	je     c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d27e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d282:	8b 12                	mov    edx,DWORD PTR [edx]
c001d284:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d288:	eb be                	jmp    c001d248 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001d28a:	66 81 f9 01 06       	cmp    cx,0x601
c001d28f:	0f 85 81 01 00 00    	jne    c001d416 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001d295:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d29c:	75 25                	jne    c001d2c3 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001d29e:	83 ec 0c             	sub    esp,0xc
c001d2a1:	68 64 01 00 00       	push   0x164
c001d2a6:	e8 ec c4 fe ff       	call   c0009797 <malloc>
c001d2ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2ae:	89 c5                	mov    ebp,eax
c001d2b0:	e8 d3 12 00 00       	call   c001e588 <SATABus::SATABus()>
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d2bf:	74 4a                	je     c001d30b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d2c1:	eb 2f                	jmp    c001d2f2 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d2c3:	83 ec 0c             	sub    esp,0xc
c001d2c6:	68 9f 4f 02 c0       	push   0xc0024f9f
c001d2cb:	e8 21 c5 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d2da:	75 c2                	jne    c001d29e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d2dc:	e4 60                	in     al,0x60
c001d2de:	3c 1c                	cmp    al,0x1c
c001d2e0:	74 04                	je     c001d2e6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d2e2:	3c 5a                	cmp    al,0x5a
c001d2e4:	75 f6                	jne    c001d2dc <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001d2e6:	e4 60                	in     al,0x60
c001d2e8:	3c 5a                	cmp    al,0x5a
c001d2ea:	74 fa                	je     c001d2e6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d2ec:	3c 1c                	cmp    al,0x1c
c001d2ee:	74 f6                	je     c001d2e6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d2f0:	eb ac                	jmp    c001d29e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d2f2:	83 ec 0c             	sub    esp,0xc
c001d2f5:	68 a5 4f 02 c0       	push   0xc0024fa5
c001d2fa:	e8 f2 c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d2ff:	83 c4 10             	add    esp,0x10
c001d302:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d309:	74 1b                	je     c001d326 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001d30b:	50                   	push   eax
c001d30c:	50                   	push   eax
c001d30d:	55                   	push   ebp
c001d30e:	53                   	push   ebx
c001d30f:	e8 4e 08 ff ff       	call   c000db62 <Device::addChild(Device*)>
c001d314:	83 c4 10             	add    esp,0x10
c001d317:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d31e:	74 33                	je     c001d353 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d320:	eb 18                	jmp    c001d33a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001d322:	3c 1c                	cmp    al,0x1c
c001d324:	74 0c                	je     c001d332 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d326:	e4 60                	in     al,0x60
c001d328:	3c 5a                	cmp    al,0x5a
c001d32a:	75 f6                	jne    c001d322 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001d32c:	eb 04                	jmp    c001d332 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d32e:	3c 1c                	cmp    al,0x1c
c001d330:	75 d9                	jne    c001d30b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d332:	e4 60                	in     al,0x60
c001d334:	3c 5a                	cmp    al,0x5a
c001d336:	74 fa                	je     c001d332 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d338:	eb f4                	jmp    c001d32e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001d33a:	83 ec 0c             	sub    esp,0xc
c001d33d:	68 ad 4f 02 c0       	push   0xc0024fad
c001d342:	e8 aa c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d347:	83 c4 10             	add    esp,0x10
c001d34a:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d351:	74 29                	je     c001d37c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001d353:	83 ec 2c             	sub    esp,0x2c
c001d356:	b9 09 00 00 00       	mov    ecx,0x9
c001d35b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d35f:	fc                   	cld    
c001d360:	89 e7                	mov    edi,esp
c001d362:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d364:	55                   	push   ebp
c001d365:	e8 3e 07 ff ff       	call   c000daa8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d36a:	83 c4 30             	add    esp,0x30
c001d36d:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d374:	74 33                	je     c001d3a9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d376:	eb 18                	jmp    c001d390 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001d378:	3c 1c                	cmp    al,0x1c
c001d37a:	74 0c                	je     c001d388 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d37c:	e4 60                	in     al,0x60
c001d37e:	3c 5a                	cmp    al,0x5a
c001d380:	75 f6                	jne    c001d378 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001d382:	eb 04                	jmp    c001d388 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d384:	3c 1c                	cmp    al,0x1c
c001d386:	75 cb                	jne    c001d353 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d388:	e4 60                	in     al,0x60
c001d38a:	3c 5a                	cmp    al,0x5a
c001d38c:	74 fa                	je     c001d388 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d38e:	eb f4                	jmp    c001d384 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d390:	83 ec 0c             	sub    esp,0xc
c001d393:	68 b5 4f 02 c0       	push   0xc0024fb5
c001d398:	e8 54 c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d39d:	83 c4 10             	add    esp,0x10
c001d3a0:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d3a7:	74 23                	je     c001d3cc <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001d3a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d3ac:	6a 00                	push   0x0
c001d3ae:	6a 00                	push   0x0
c001d3b0:	6a 00                	push   0x0
c001d3b2:	55                   	push   ebp
c001d3b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d3b6:	83 c4 10             	add    esp,0x10
c001d3b9:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d3c0:	0f 84 1b 02 00 00    	je     c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d3c6:	eb 18                	jmp    c001d3e0 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001d3c8:	3c 1c                	cmp    al,0x1c
c001d3ca:	74 0c                	je     c001d3d8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d3cc:	e4 60                	in     al,0x60
c001d3ce:	3c 5a                	cmp    al,0x5a
c001d3d0:	75 f6                	jne    c001d3c8 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001d3d2:	eb 04                	jmp    c001d3d8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d3d4:	3c 1c                	cmp    al,0x1c
c001d3d6:	75 d1                	jne    c001d3a9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d3d8:	e4 60                	in     al,0x60
c001d3da:	3c 5a                	cmp    al,0x5a
c001d3dc:	74 fa                	je     c001d3d8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d3de:	eb f4                	jmp    c001d3d4 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001d3e0:	83 ec 0c             	sub    esp,0xc
c001d3e3:	68 bd 4f 02 c0       	push   0xc0024fbd
c001d3e8:	e8 04 c4 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d3ed:	83 c4 10             	add    esp,0x10
c001d3f0:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d3f7:	0f 85 e4 01 00 00    	jne    c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d3fd:	e4 60                	in     al,0x60
c001d3ff:	3c 5a                	cmp    al,0x5a
c001d401:	74 04                	je     c001d407 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d403:	3c 1c                	cmp    al,0x1c
c001d405:	75 f6                	jne    c001d3fd <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001d407:	e4 60                	in     al,0x60
c001d409:	3c 5a                	cmp    al,0x5a
c001d40b:	74 fa                	je     c001d407 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d40d:	3c 1c                	cmp    al,0x1c
c001d40f:	74 f6                	je     c001d407 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d411:	e9 cb 01 00 00       	jmp    c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d416:	66 81 f9 01 01       	cmp    cx,0x101
c001d41b:	0f 85 7a 01 00 00    	jne    c001d59b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001d421:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d428:	75 25                	jne    c001d44f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001d42a:	83 ec 0c             	sub    esp,0xc
c001d42d:	68 70 02 00 00       	push   0x270
c001d432:	e8 60 c3 fe ff       	call   c0009797 <malloc>
c001d437:	89 04 24             	mov    DWORD PTR [esp],eax
c001d43a:	89 c5                	mov    ebp,eax
c001d43c:	e8 df 05 00 00       	call   c001da20 <IDE::IDE()>
c001d441:	83 c4 10             	add    esp,0x10
c001d444:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d44b:	74 4a                	je     c001d497 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d44d:	eb 2f                	jmp    c001d47e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001d44f:	83 ec 0c             	sub    esp,0xc
c001d452:	68 c5 4f 02 c0       	push   0xc0024fc5
c001d457:	e8 95 c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d45c:	83 c4 10             	add    esp,0x10
c001d45f:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d466:	75 c2                	jne    c001d42a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d468:	e4 60                	in     al,0x60
c001d46a:	3c 5a                	cmp    al,0x5a
c001d46c:	74 04                	je     c001d472 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d46e:	3c 1c                	cmp    al,0x1c
c001d470:	75 f6                	jne    c001d468 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001d472:	e4 60                	in     al,0x60
c001d474:	3c 5a                	cmp    al,0x5a
c001d476:	74 fa                	je     c001d472 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d478:	3c 1c                	cmp    al,0x1c
c001d47a:	74 f6                	je     c001d472 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d47c:	eb ac                	jmp    c001d42a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d47e:	83 ec 0c             	sub    esp,0xc
c001d481:	68 cc 4f 02 c0       	push   0xc0024fcc
c001d486:	e8 66 c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d495:	74 1b                	je     c001d4b2 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001d497:	57                   	push   edi
c001d498:	57                   	push   edi
c001d499:	55                   	push   ebp
c001d49a:	53                   	push   ebx
c001d49b:	e8 c2 06 ff ff       	call   c000db62 <Device::addChild(Device*)>
c001d4a0:	83 c4 10             	add    esp,0x10
c001d4a3:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d4aa:	74 33                	je     c001d4df <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d4ac:	eb 18                	jmp    c001d4c6 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001d4ae:	3c 1c                	cmp    al,0x1c
c001d4b0:	74 0c                	je     c001d4be <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d4b2:	e4 60                	in     al,0x60
c001d4b4:	3c 5a                	cmp    al,0x5a
c001d4b6:	75 f6                	jne    c001d4ae <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001d4b8:	eb 04                	jmp    c001d4be <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d4ba:	3c 1c                	cmp    al,0x1c
c001d4bc:	75 d9                	jne    c001d497 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d4be:	e4 60                	in     al,0x60
c001d4c0:	3c 5a                	cmp    al,0x5a
c001d4c2:	74 fa                	je     c001d4be <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d4c4:	eb f4                	jmp    c001d4ba <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001d4c6:	83 ec 0c             	sub    esp,0xc
c001d4c9:	68 d3 4f 02 c0       	push   0xc0024fd3
c001d4ce:	e8 1e c3 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d4d3:	83 c4 10             	add    esp,0x10
c001d4d6:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d4dd:	74 29                	je     c001d508 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001d4df:	83 ec 2c             	sub    esp,0x2c
c001d4e2:	b9 09 00 00 00       	mov    ecx,0x9
c001d4e7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d4eb:	fc                   	cld    
c001d4ec:	89 e7                	mov    edi,esp
c001d4ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d4f0:	55                   	push   ebp
c001d4f1:	e8 b2 05 ff ff       	call   c000daa8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d4f6:	83 c4 30             	add    esp,0x30
c001d4f9:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d500:	74 33                	je     c001d535 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d502:	eb 18                	jmp    c001d51c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001d504:	3c 1c                	cmp    al,0x1c
c001d506:	74 0c                	je     c001d514 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d508:	e4 60                	in     al,0x60
c001d50a:	3c 5a                	cmp    al,0x5a
c001d50c:	75 f6                	jne    c001d504 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001d50e:	eb 04                	jmp    c001d514 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d510:	3c 1c                	cmp    al,0x1c
c001d512:	75 cb                	jne    c001d4df <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d514:	e4 60                	in     al,0x60
c001d516:	3c 5a                	cmp    al,0x5a
c001d518:	74 fa                	je     c001d514 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d51a:	eb f4                	jmp    c001d510 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001d51c:	83 ec 0c             	sub    esp,0xc
c001d51f:	68 da 4f 02 c0       	push   0xc0024fda
c001d524:	e8 c8 c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d529:	83 c4 10             	add    esp,0x10
c001d52c:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d533:	74 23                	je     c001d558 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001d535:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d538:	6a 00                	push   0x0
c001d53a:	6a 00                	push   0x0
c001d53c:	6a 00                	push   0x0
c001d53e:	55                   	push   ebp
c001d53f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d54c:	0f 84 8f 00 00 00    	je     c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d552:	eb 18                	jmp    c001d56c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001d554:	3c 1c                	cmp    al,0x1c
c001d556:	74 0c                	je     c001d564 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d558:	e4 60                	in     al,0x60
c001d55a:	3c 5a                	cmp    al,0x5a
c001d55c:	75 f6                	jne    c001d554 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001d55e:	eb 04                	jmp    c001d564 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d560:	3c 1c                	cmp    al,0x1c
c001d562:	75 d1                	jne    c001d535 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d564:	e4 60                	in     al,0x60
c001d566:	3c 5a                	cmp    al,0x5a
c001d568:	74 fa                	je     c001d564 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d56a:	eb f4                	jmp    c001d560 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001d56c:	83 ec 0c             	sub    esp,0xc
c001d56f:	68 e1 4f 02 c0       	push   0xc0024fe1
c001d574:	e8 78 c2 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d583:	75 5c                	jne    c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d585:	e4 60                	in     al,0x60
c001d587:	3c 5a                	cmp    al,0x5a
c001d589:	74 04                	je     c001d58f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d58b:	3c 1c                	cmp    al,0x1c
c001d58d:	75 f6                	jne    c001d585 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001d58f:	e4 60                	in     al,0x60
c001d591:	3c 5a                	cmp    al,0x5a
c001d593:	74 fa                	je     c001d58f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d595:	3c 1c                	cmp    al,0x1c
c001d597:	74 f6                	je     c001d58f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d599:	eb 46                	jmp    c001d5e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d59b:	83 ec 0c             	sub    esp,0xc
c001d59e:	68 58 01 00 00       	push   0x158
c001d5a3:	e8 ef c1 fe ff       	call   c0009797 <malloc>
c001d5a8:	89 c5                	mov    ebp,eax
c001d5aa:	58                   	pop    eax
c001d5ab:	5a                   	pop    edx
c001d5ac:	68 e8 4f 02 c0       	push   0xc0024fe8
c001d5b1:	55                   	push   ebp
c001d5b2:	e8 b5 08 ff ff       	call   c000de6c <DriverlessDevice::DriverlessDevice(char const*)>
c001d5b7:	59                   	pop    ecx
c001d5b8:	5e                   	pop    esi
c001d5b9:	55                   	push   ebp
c001d5ba:	53                   	push   ebx
c001d5bb:	e8 a2 05 ff ff       	call   c000db62 <Device::addChild(Device*)>
c001d5c0:	83 c4 10             	add    esp,0x10
c001d5c3:	b9 09 00 00 00       	mov    ecx,0x9
c001d5c8:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001d5cc:	fc                   	cld    
c001d5cd:	89 fe                	mov    esi,edi
c001d5cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5d1:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001d5d5:	83 c4 1c             	add    esp,0x1c
c001d5d8:	5b                   	pop    ebx
c001d5d9:	5e                   	pop    esi
c001d5da:	5f                   	pop    edi
c001d5db:	5d                   	pop    ebp
c001d5dc:	e9 c7 04 ff ff       	jmp    c000daa8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d5e1:	83 c4 1c             	add    esp,0x1c
c001d5e4:	5b                   	pop    ebx
c001d5e5:	5e                   	pop    esi
c001d5e6:	5f                   	pop    edi
c001d5e7:	5d                   	pop    ebp
c001d5e8:	c3                   	ret    
c001d5e9:	90                   	nop

c001d5ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d5ea:	55                   	push   ebp
c001d5eb:	57                   	push   edi
c001d5ec:	56                   	push   esi
c001d5ed:	53                   	push   ebx
c001d5ee:	81 ec b4 00 00 00    	sub    esp,0xb4
c001d5f4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001d5fb:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001d602:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d606:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001d60d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d611:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001d618:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d61c:	68 02 50 02 c0       	push   0xc0025002
c001d621:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001d625:	53                   	push   ebx
c001d626:	e8 39 2f fe ff       	call   c0000564 <strcpy>
c001d62b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001d630:	b2 64                	mov    dl,0x64
c001d632:	89 c8                	mov    eax,ecx
c001d634:	f6 f2                	div    dl
c001d636:	b2 0a                	mov    dl,0xa
c001d638:	83 c0 30             	add    eax,0x30
c001d63b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001d63f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001d643:	83 c4 10             	add    esp,0x10
c001d646:	89 c8                	mov    eax,ecx
c001d648:	f6 f2                	div    dl
c001d64a:	89 c1                	mov    ecx,eax
c001d64c:	0f b6 c0             	movzx  eax,al
c001d64f:	88 e9                	mov    cl,ch
c001d651:	f6 f2                	div    dl
c001d653:	88 e0                	mov    al,ah
c001d655:	83 c0 30             	add    eax,0x30
c001d658:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d65c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d660:	8d 41 30             	lea    eax,[ecx+0x30]
c001d663:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001d667:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001d66b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001d670:	f6 f2                	div    dl
c001d672:	89 c1                	mov    ecx,eax
c001d674:	0f b6 c0             	movzx  eax,al
c001d677:	88 e9                	mov    cl,ch
c001d679:	f6 f2                	div    dl
c001d67b:	88 e0                	mov    al,ah
c001d67d:	83 c0 30             	add    eax,0x30
c001d680:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001d684:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001d688:	8d 41 30             	lea    eax,[ecx+0x30]
c001d68b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001d68f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001d693:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001d698:	f6 f2                	div    dl
c001d69a:	89 c1                	mov    ecx,eax
c001d69c:	0f b6 c0             	movzx  eax,al
c001d69f:	88 e9                	mov    cl,ch
c001d6a1:	f6 f2                	div    dl
c001d6a3:	88 e0                	mov    al,ah
c001d6a5:	83 c0 30             	add    eax,0x30
c001d6a8:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d6af:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001d6b3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d6b7:	8d 41 30             	lea    eax,[ecx+0x30]
c001d6ba:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001d6be:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001d6c2:	74 29                	je     c001d6ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	53                   	push   ebx
c001d6c8:	e8 24 c1 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d6d7:	75 14                	jne    c001d6ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d6d9:	e4 60                	in     al,0x60
c001d6db:	3c 1c                	cmp    al,0x1c
c001d6dd:	74 04                	je     c001d6e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d6df:	3c 5a                	cmp    al,0x5a
c001d6e1:	75 f6                	jne    c001d6d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001d6e3:	e4 60                	in     al,0x60
c001d6e5:	3c 5a                	cmp    al,0x5a
c001d6e7:	74 fa                	je     c001d6e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d6e9:	3c 1c                	cmp    al,0x1c
c001d6eb:	74 f6                	je     c001d6e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d6ed:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001d6f2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001d6f7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d6fc:	83 ec 0c             	sub    esp,0xc
c001d6ff:	6a 0c                	push   0xc
c001d701:	56                   	push   esi
c001d702:	53                   	push   ebx
c001d703:	57                   	push   edi
c001d704:	55                   	push   ebp
c001d705:	e8 68 f3 ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d70a:	83 c4 20             	add    esp,0x20
c001d70d:	56                   	push   esi
c001d70e:	53                   	push   ebx
c001d70f:	57                   	push   edi
c001d710:	55                   	push   ebp
c001d711:	e8 50 f4 ff ff       	call   c001cb66 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d716:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001d71b:	56                   	push   esi
c001d71c:	53                   	push   ebx
c001d71d:	57                   	push   edi
c001d71e:	55                   	push   ebp
c001d71f:	e8 d8 f4 ff ff       	call   c001cbfc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d724:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001d728:	83 c4 14             	add    esp,0x14
c001d72b:	6a 3c                	push   0x3c
c001d72d:	56                   	push   esi
c001d72e:	53                   	push   ebx
c001d72f:	57                   	push   edi
c001d730:	55                   	push   ebp
c001d731:	e8 3c f3 ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d736:	0f b6 c4             	movzx  eax,ah
c001d739:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d73d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d741:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001d748:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001d74d:	83 c4 20             	add    esp,0x20
c001d750:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d756:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d75d:	0f 84 38 01 00 00    	je     c001d89b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d763:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d76b:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001d770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d774:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d77a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001d780:	0f 8e 15 01 00 00    	jle    c001d89b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d786:	50                   	push   eax
c001d787:	50                   	push   eax
c001d788:	68 1d 50 02 c0       	push   0xc002501d
c001d78d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d791:	50                   	push   eax
c001d792:	e8 cd 2d fe ff       	call   c0000564 <strcpy>
c001d797:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001d79b:	b9 0a 00 00 00       	mov    ecx,0xa
c001d7a0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d7a4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d7a8:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d7ac:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001d7b0:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001d7b4:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001d7b8:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001d7bc:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001d7c0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001d7c4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d7c8:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001d7cc:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001d7d0:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001d7d4:	83 c4 10             	add    esp,0x10
c001d7d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7db:	99                   	cdq    
c001d7dc:	f7 f9                	idiv   ecx
c001d7de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001d7e2:	99                   	cdq    
c001d7e3:	f7 f9                	idiv   ecx
c001d7e5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d7e9:	83 c2 30             	add    edx,0x30
c001d7ec:	83 c0 30             	add    eax,0x30
c001d7ef:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001d7f3:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001d7f7:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001d7fe:	74 2d                	je     c001d82d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d800:	83 ec 0c             	sub    esp,0xc
c001d803:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d807:	50                   	push   eax
c001d808:	e8 e4 bf fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001d817:	75 14                	jne    c001d82d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d819:	e4 60                	in     al,0x60
c001d81b:	3c 5a                	cmp    al,0x5a
c001d81d:	74 04                	je     c001d823 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d81f:	3c 1c                	cmp    al,0x1c
c001d821:	75 f6                	jne    c001d819 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001d823:	e4 60                	in     al,0x60
c001d825:	3c 5a                	cmp    al,0x5a
c001d827:	74 fa                	je     c001d823 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d829:	3c 1c                	cmp    al,0x1c
c001d82b:	74 f6                	je     c001d823 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d82d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d831:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001d836:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d83c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001d83f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001d846:	39 d3                	cmp    ebx,edx
c001d848:	75 48                	jne    c001d892 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d84a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001d851:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001d855:	75 3b                	jne    c001d892 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d857:	83 ec 0c             	sub    esp,0xc
c001d85a:	68 4c 50 02 c0       	push   0xc002504c
c001d85f:	e8 81 ee fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001d864:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d868:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c001d86d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d873:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001d87b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001d87f:	50                   	push   eax
c001d880:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d884:	53                   	push   ebx
c001d885:	68 71 50 02 c0       	push   0xc0025071
c001d88a:	e8 56 ee fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001d88f:	83 c4 20             	add    esp,0x20
c001d892:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d896:	e9 d0 fe ff ff       	jmp    c001d76b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001d89b:	31 d2                	xor    edx,edx
c001d89d:	83 ec 0c             	sub    esp,0xc
c001d8a0:	56                   	push   esi
c001d8a1:	53                   	push   ebx
c001d8a2:	57                   	push   edi
c001d8a3:	52                   	push   edx
c001d8a4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d8a8:	55                   	push   ebp
c001d8a9:	e8 9a f3 ff ff       	call   c001cc48 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d8b2:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001d8b9:	42                   	inc    edx
c001d8ba:	83 c4 20             	add    esp,0x20
c001d8bd:	83 fa 06             	cmp    edx,0x6
c001d8c0:	75 db                	jne    c001d89d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001d8c2:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001d8c7:	83 ec 0c             	sub    esp,0xc
c001d8ca:	86 e0                	xchg   al,ah
c001d8cc:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001d8d4:	6a 02                	push   0x2
c001d8d6:	56                   	push   esi
c001d8d7:	53                   	push   ebx
c001d8d8:	57                   	push   edi
c001d8d9:	55                   	push   ebp
c001d8da:	e8 93 f1 ff ff       	call   c001ca72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8df:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001d8e7:	83 c4 20             	add    esp,0x20
c001d8ea:	56                   	push   esi
c001d8eb:	53                   	push   ebx
c001d8ec:	57                   	push   edi
c001d8ed:	55                   	push   ebp
c001d8ee:	e8 bd f2 ff ff       	call   c001cbb0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d8f3:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001d8fa:	56                   	push   esi
c001d8fb:	53                   	push   ebx
c001d8fc:	57                   	push   edi
c001d8fd:	55                   	push   ebp
c001d8fe:	e8 17 f2 ff ff       	call   c001cb1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d903:	b9 09 00 00 00       	mov    ecx,0x9
c001d908:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001d910:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001d914:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001d91b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d91f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001d926:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d92a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001d931:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001d935:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001d93c:	83 ec 0c             	sub    esp,0xc
c001d93f:	fc                   	cld    
c001d940:	89 e7                	mov    edi,esp
c001d942:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001d949:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d94b:	55                   	push   ebp
c001d94c:	e8 59 f8 ff ff       	call   c001d1aa <PCI::foundDevice(PCIDeviceInfo)>
c001d951:	81 c4 dc 00 00 00    	add    esp,0xdc
c001d957:	5b                   	pop    ebx
c001d958:	5e                   	pop    esi
c001d959:	5f                   	pop    edi
c001d95a:	5d                   	pop    ebp
c001d95b:	c3                   	ret    

c001d95c <PCI::checkDevice(unsigned char, unsigned char)>:
c001d95c:	55                   	push   ebp
c001d95d:	57                   	push   edi
c001d95e:	56                   	push   esi
c001d95f:	53                   	push   ebx
c001d960:	83 ec 0c             	sub    esp,0xc
c001d963:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d967:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d96c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d971:	6a 00                	push   0x0
c001d973:	56                   	push   esi
c001d974:	57                   	push   edi
c001d975:	55                   	push   ebp
c001d976:	e8 9f f1 ff ff       	call   c001cb1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d97b:	6a 00                	push   0x0
c001d97d:	56                   	push   esi
c001d97e:	57                   	push   edi
c001d97f:	55                   	push   ebp
c001d980:	e8 65 fc ff ff       	call   c001d5ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d985:	83 c4 20             	add    esp,0x20
c001d988:	6a 00                	push   0x0
c001d98a:	56                   	push   esi
c001d98b:	57                   	push   edi
c001d98c:	55                   	push   ebp
c001d98d:	e8 ac f1 ff ff       	call   c001cb3e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	84 c0                	test   al,al
c001d997:	79 27                	jns    c001d9c0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d999:	bb 01 00 00 00       	mov    ebx,0x1
c001d99e:	53                   	push   ebx
c001d99f:	56                   	push   esi
c001d9a0:	57                   	push   edi
c001d9a1:	55                   	push   ebp
c001d9a2:	e8 73 f1 ff ff       	call   c001cb1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d9a7:	83 c4 10             	add    esp,0x10
c001d9aa:	66 40                	inc    ax
c001d9ac:	74 0c                	je     c001d9ba <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d9ae:	53                   	push   ebx
c001d9af:	56                   	push   esi
c001d9b0:	57                   	push   edi
c001d9b1:	55                   	push   ebp
c001d9b2:	e8 33 fc ff ff       	call   c001d5ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d9b7:	83 c4 10             	add    esp,0x10
c001d9ba:	43                   	inc    ebx
c001d9bb:	83 fb 08             	cmp    ebx,0x8
c001d9be:	75 de                	jne    c001d99e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d9c0:	83 c4 0c             	add    esp,0xc
c001d9c3:	5b                   	pop    ebx
c001d9c4:	5e                   	pop    esi
c001d9c5:	5f                   	pop    edi
c001d9c6:	5d                   	pop    ebp
c001d9c7:	c3                   	ret    

c001d9c8 <PCI::detect()>:
c001d9c8:	56                   	push   esi
c001d9c9:	53                   	push   ebx
c001d9ca:	53                   	push   ebx
c001d9cb:	31 db                	xor    ebx,ebx
c001d9cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9d1:	6a 00                	push   0x0
c001d9d3:	6a 00                	push   0x0
c001d9d5:	6a 00                	push   0x0
c001d9d7:	56                   	push   esi
c001d9d8:	e8 61 f1 ff ff       	call   c001cb3e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d9dd:	83 c4 10             	add    esp,0x10
c001d9e0:	a8 80                	test   al,0x80
c001d9e2:	75 21                	jne    c001da05 <PCI::detect()+0x3d>
c001d9e4:	51                   	push   ecx
c001d9e5:	51                   	push   ecx
c001d9e6:	6a 00                	push   0x0
c001d9e8:	56                   	push   esi
c001d9e9:	e8 98 f7 ff ff       	call   c001d186 <PCI::checkBus(unsigned char)>
c001d9ee:	83 c4 10             	add    esp,0x10
c001d9f1:	eb 24                	jmp    c001da17 <PCI::detect()+0x4f>
c001d9f3:	52                   	push   edx
c001d9f4:	52                   	push   edx
c001d9f5:	53                   	push   ebx
c001d9f6:	43                   	inc    ebx
c001d9f7:	56                   	push   esi
c001d9f8:	e8 89 f7 ff ff       	call   c001d186 <PCI::checkBus(unsigned char)>
c001d9fd:	83 c4 10             	add    esp,0x10
c001da00:	83 fb 08             	cmp    ebx,0x8
c001da03:	74 12                	je     c001da17 <PCI::detect()+0x4f>
c001da05:	53                   	push   ebx
c001da06:	6a 00                	push   0x0
c001da08:	6a 00                	push   0x0
c001da0a:	56                   	push   esi
c001da0b:	e8 0a f1 ff ff       	call   c001cb1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001da10:	83 c4 10             	add    esp,0x10
c001da13:	66 40                	inc    ax
c001da15:	74 dc                	je     c001d9f3 <PCI::detect()+0x2b>
c001da17:	58                   	pop    eax
c001da18:	5b                   	pop    ebx
c001da19:	5e                   	pop    esi
c001da1a:	c3                   	ret    
c001da1b:	90                   	nop

c001da1c <IDE::close(int, int, void*)>:
c001da1c:	83 c8 ff             	or     eax,0xffffffff
c001da1f:	c3                   	ret    

c001da20 <IDE::IDE()>:
c001da20:	83 ec 0c             	sub    esp,0xc
c001da23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da27:	83 ec 08             	sub    esp,0x8
c001da2a:	68 b8 50 02 c0       	push   0xc00250b8
c001da2f:	50                   	push   eax
c001da30:	e8 db 04 ff ff       	call   c000df10 <HardDiskController::HardDiskController(char const*)>
c001da35:	83 c4 10             	add    esp,0x10
c001da38:	ba 64 51 02 c0       	mov    edx,0xc0025164
c001da3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da41:	89 10                	mov    DWORD PTR [eax],edx
c001da43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da47:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001da4e:	90                   	nop
c001da4f:	83 c4 0c             	add    esp,0xc
c001da52:	c3                   	ret    
c001da53:	90                   	nop

c001da54 <IDE::prepareInterrupt(unsigned char)>:
c001da54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001da59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da5d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001da65:	c3                   	ret    

c001da66 <selectDrive(unsigned char, unsigned char)>:
c001da66:	c3                   	ret    
c001da67:	90                   	nop

c001da68 <IDE::getBase(unsigned char)>:
c001da68:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001da6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da71:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001da79:	c3                   	ret    

c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001da7a:	55                   	push   ebp
c001da7b:	57                   	push   edi
c001da7c:	56                   	push   esi
c001da7d:	53                   	push   ebx
c001da7e:	83 ec 1c             	sub    esp,0x1c
c001da81:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001da85:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001da89:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001da8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001da90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001da94:	80 f9 03             	cmp    cl,0x3
c001da97:	77 51                	ja     c001daea <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001da99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da9d:	0f b6 f2             	movzx  esi,dl
c001daa0:	0f b6 db             	movzx  ebx,bl
c001daa3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001daa6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001daaa:	83 ca 80             	or     edx,0xffffff80
c001daad:	0f b6 d2             	movzx  edx,dl
c001dab0:	52                   	push   edx
c001dab1:	6a 0c                	push   0xc
c001dab3:	56                   	push   esi
c001dab4:	57                   	push   edi
c001dab5:	e8 c0 ff ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daba:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001dabf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dac3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001dac7:	ee                   	out    dx,al
c001dac8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001dacd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001dad1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001dad5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dad9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dae1:	83 c4 2c             	add    esp,0x2c
c001dae4:	5b                   	pop    ebx
c001dae5:	5e                   	pop    esi
c001dae6:	5f                   	pop    edi
c001dae7:	5d                   	pop    ebp
c001dae8:	eb 90                	jmp    c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daea:	80 fb 07             	cmp    bl,0x7
c001daed:	77 12                	ja     c001db01 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001daef:	0f b6 d2             	movzx  edx,dl
c001daf2:	0f b6 db             	movzx  ebx,bl
c001daf5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001dafd:	89 da                	mov    edx,ebx
c001daff:	eb 2f                	jmp    c001db30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001db01:	80 fb 0d             	cmp    bl,0xd
c001db04:	77 13                	ja     c001db19 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001db06:	0f b6 d2             	movzx  edx,dl
c001db09:	0f b6 db             	movzx  ebx,bl
c001db0c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001db13:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001db17:	eb 17                	jmp    c001db30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001db19:	80 fb 15             	cmp    bl,0x15
c001db1c:	77 13                	ja     c001db31 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001db1e:	0f b6 d2             	movzx  edx,dl
c001db21:	0f b6 db             	movzx  ebx,bl
c001db24:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001db2c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001db30:	ee                   	out    dx,al
c001db31:	83 c4 1c             	add    esp,0x1c
c001db34:	5b                   	pop    ebx
c001db35:	5e                   	pop    esi
c001db36:	5f                   	pop    edi
c001db37:	5d                   	pop    ebp
c001db38:	c3                   	ret    
c001db39:	90                   	nop

c001db3a <IDE::read(unsigned char, unsigned char)>:
c001db3a:	55                   	push   ebp
c001db3b:	57                   	push   edi
c001db3c:	56                   	push   esi
c001db3d:	53                   	push   ebx
c001db3e:	83 ec 1c             	sub    esp,0x1c
c001db41:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001db45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001db49:	8d 43 f8             	lea    eax,[ebx-0x8]
c001db4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001db50:	3c 03                	cmp    al,0x3
c001db52:	77 43                	ja     c001db97 <IDE::read(unsigned char, unsigned char)+0x5d>
c001db54:	0f b6 f2             	movzx  esi,dl
c001db57:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001db5a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001db5e:	83 c8 80             	or     eax,0xffffff80
c001db61:	0f b6 c0             	movzx  eax,al
c001db64:	50                   	push   eax
c001db65:	6a 0c                	push   0xc
c001db67:	56                   	push   esi
c001db68:	57                   	push   edi
c001db69:	e8 0c ff ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db6e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001db73:	0f b6 c3             	movzx  eax,bl
c001db76:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001db7a:	ec                   	in     al,dx
c001db7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001db7f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001db84:	52                   	push   edx
c001db85:	6a 0c                	push   0xc
c001db87:	56                   	push   esi
c001db88:	57                   	push   edi
c001db89:	e8 ec fe ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db8e:	83 c4 20             	add    esp,0x20
c001db91:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db95:	eb 49                	jmp    c001dbe0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001db97:	80 fb 07             	cmp    bl,0x7
c001db9a:	77 12                	ja     c001dbae <IDE::read(unsigned char, unsigned char)+0x74>
c001db9c:	0f b6 d2             	movzx  edx,dl
c001db9f:	0f b6 c3             	movzx  eax,bl
c001dba2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001dbaa:	89 c2                	mov    edx,eax
c001dbac:	eb 31                	jmp    c001dbdf <IDE::read(unsigned char, unsigned char)+0xa5>
c001dbae:	80 fb 0d             	cmp    bl,0xd
c001dbb1:	77 13                	ja     c001dbc6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001dbb3:	0f b6 d2             	movzx  edx,dl
c001dbb6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001dbbd:	0f b6 d3             	movzx  edx,bl
c001dbc0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001dbc4:	eb 19                	jmp    c001dbdf <IDE::read(unsigned char, unsigned char)+0xa5>
c001dbc6:	31 c0                	xor    eax,eax
c001dbc8:	80 fb 15             	cmp    bl,0x15
c001dbcb:	77 13                	ja     c001dbe0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001dbcd:	0f b6 d2             	movzx  edx,dl
c001dbd0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001dbd8:	0f b6 d3             	movzx  edx,bl
c001dbdb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001dbdf:	ec                   	in     al,dx
c001dbe0:	83 c4 1c             	add    esp,0x1c
c001dbe3:	5b                   	pop    ebx
c001dbe4:	5e                   	pop    esi
c001dbe5:	5f                   	pop    edi
c001dbe6:	5d                   	pop    ebp
c001dbe7:	c3                   	ret    

c001dbe8 <IDE::waitInterrupt(unsigned char)>:
c001dbe8:	55                   	push   ebp
c001dbe9:	57                   	push   edi
c001dbea:	56                   	push   esi
c001dbeb:	53                   	push   ebx
c001dbec:	31 db                	xor    ebx,ebx
c001dbee:	83 ec 0c             	sub    esp,0xc
c001dbf1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dbf5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001dbfa:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001dc02:	89 e8                	mov    eax,ebp
c001dc04:	84 c0                	test   al,al
c001dc06:	75 30                	jne    c001dc38 <IDE::waitInterrupt(unsigned char)+0x50>
c001dc08:	50                   	push   eax
c001dc09:	6a 0c                	push   0xc
c001dc0b:	56                   	push   esi
c001dc0c:	57                   	push   edi
c001dc0d:	e8 28 ff ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001dc12:	83 c4 10             	add    esp,0x10
c001dc15:	a8 01                	test   al,0x1
c001dc17:	75 27                	jne    c001dc40 <IDE::waitInterrupt(unsigned char)+0x58>
c001dc19:	f6 c3 04             	test   bl,0x4
c001dc1c:	75 12                	jne    c001dc30 <IDE::waitInterrupt(unsigned char)+0x48>
c001dc1e:	83 fb 32             	cmp    ebx,0x32
c001dc21:	7e 0d                	jle    c001dc30 <IDE::waitInterrupt(unsigned char)+0x48>
c001dc23:	83 ec 0c             	sub    esp,0xc
c001dc26:	6a 64                	push   0x64
c001dc28:	e8 4f 86 ff ff       	call   c001627c <milliTenthSleep(unsigned int)>
c001dc2d:	83 c4 10             	add    esp,0x10
c001dc30:	83 fb 3c             	cmp    ebx,0x3c
c001dc33:	74 0b                	je     c001dc40 <IDE::waitInterrupt(unsigned char)+0x58>
c001dc35:	43                   	inc    ebx
c001dc36:	eb c2                	jmp    c001dbfa <IDE::waitInterrupt(unsigned char)+0x12>
c001dc38:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001dc40:	83 c4 0c             	add    esp,0xc
c001dc43:	89 e8                	mov    eax,ebp
c001dc45:	5b                   	pop    ebx
c001dc46:	5e                   	pop    esi
c001dc47:	5f                   	pop    edi
c001dc48:	5d                   	pop    ebp
c001dc49:	c3                   	ret    

c001dc4a <ideChannel0IRQHandler(regs*, void*)>:
c001dc4a:	83 ec 10             	sub    esp,0x10
c001dc4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc51:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001dc58:	6a 07                	push   0x7
c001dc5a:	6a 00                	push   0x0
c001dc5c:	50                   	push   eax
c001dc5d:	e8 d8 fe ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001dc62:	83 c4 1c             	add    esp,0x1c
c001dc65:	c3                   	ret    

c001dc66 <ideChannel1IRQHandler(regs*, void*)>:
c001dc66:	83 ec 10             	sub    esp,0x10
c001dc69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc6d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001dc74:	6a 07                	push   0x7
c001dc76:	6a 01                	push   0x1
c001dc78:	50                   	push   eax
c001dc79:	e8 bc fe ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001dc7e:	83 c4 1c             	add    esp,0x1c
c001dc81:	c3                   	ret    

c001dc82 <IDE::enableIRQs(unsigned char, bool)>:
c001dc82:	57                   	push   edi
c001dc83:	56                   	push   esi
c001dc84:	be 04 00 00 00       	mov    esi,0x4
c001dc89:	53                   	push   ebx
c001dc8a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001dc8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc93:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001dc98:	0f 94 c0             	sete   al
c001dc9b:	d1 e0                	shl    eax,1
c001dc9d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001dca4:	0f b6 c0             	movzx  eax,al
c001dca7:	50                   	push   eax
c001dca8:	6a 0c                	push   0xc
c001dcaa:	57                   	push   edi
c001dcab:	53                   	push   ebx
c001dcac:	e8 c9 fd ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcb1:	83 c4 10             	add    esp,0x10
c001dcb4:	50                   	push   eax
c001dcb5:	6a 0c                	push   0xc
c001dcb7:	57                   	push   edi
c001dcb8:	53                   	push   ebx
c001dcb9:	e8 7c fe ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001dcbe:	83 c4 10             	add    esp,0x10
c001dcc1:	4e                   	dec    esi
c001dcc2:	75 f0                	jne    c001dcb4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001dcc4:	5b                   	pop    ebx
c001dcc5:	5e                   	pop    esi
c001dcc6:	5f                   	pop    edi
c001dcc7:	c3                   	ret    

c001dcc8 <IDE::open(int, int, void*)>:
c001dcc8:	55                   	push   ebp
c001dcc9:	57                   	push   edi
c001dcca:	56                   	push   esi
c001dccb:	53                   	push   ebx
c001dccc:	83 ec 1c             	sub    esp,0x1c
c001dccf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dcd3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001dcdc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001dce5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001dcec:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001dcf3:	0f 85 cb 02 00 00    	jne    c001dfc4 <IDE::open(int, int, void*)+0x2fc>
c001dcf9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001dcff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001dd03:	83 e0 7f             	and    eax,0x7f
c001dd06:	3c 05                	cmp    al,0x5
c001dd08:	74 04                	je     c001dd0e <IDE::open(int, int, void*)+0x46>
c001dd0a:	3c 0f                	cmp    al,0xf
c001dd0c:	75 32                	jne    c001dd40 <IDE::open(int, int, void*)+0x78>
c001dd0e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001dd14:	83 e0 fc             	and    eax,0xfffffffc
c001dd17:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dd1e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001dd24:	83 e0 fc             	and    eax,0xfffffffc
c001dd27:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dd2e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001dd34:	83 e0 fc             	and    eax,0xfffffffc
c001dd37:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dd3e:	eb 14                	jmp    c001dd54 <IDE::open(int, int, void*)+0x8c>
c001dd40:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001dd4a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001dd54:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001dd5b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001dd62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd66:	89 c6                	mov    esi,eax
c001dd68:	bf f8 0c 00 00       	mov    edi,0xcf8
c001dd6d:	c1 e6 10             	shl    esi,0x10
c001dd70:	89 e8                	mov    eax,ebp
c001dd72:	89 fa                	mov    edx,edi
c001dd74:	c1 e0 0b             	shl    eax,0xb
c001dd77:	09 f0                	or     eax,esi
c001dd79:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001dd80:	c1 e6 08             	shl    esi,0x8
c001dd83:	09 c6                	or     esi,eax
c001dd85:	89 f0                	mov    eax,esi
c001dd87:	0d 08 00 00 80       	or     eax,0x80000008
c001dd8c:	ef                   	out    dx,eax
c001dd8d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001dd92:	89 ca                	mov    edx,ecx
c001dd94:	ed                   	in     eax,dx
c001dd95:	c1 e8 10             	shr    eax,0x10
c001dd98:	3d ff ff 00 00       	cmp    eax,0xffff
c001dd9d:	0f 84 f5 00 00 00    	je     c001de98 <IDE::open(int, int, void*)+0x1d0>
c001dda3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001dda9:	89 fa                	mov    edx,edi
c001ddab:	89 f0                	mov    eax,esi
c001ddad:	ef                   	out    dx,eax
c001ddae:	b0 fe                	mov    al,0xfe
c001ddb0:	89 ca                	mov    edx,ecx
c001ddb2:	ee                   	out    dx,al
c001ddb3:	89 f0                	mov    eax,esi
c001ddb5:	89 fa                	mov    edx,edi
c001ddb7:	ef                   	out    dx,eax
c001ddb8:	89 ca                	mov    edx,ecx
c001ddba:	ed                   	in     eax,dx
c001ddbb:	3c fe                	cmp    al,0xfe
c001ddbd:	0f 85 a9 00 00 00    	jne    c001de6c <IDE::open(int, int, void*)+0x1a4>
c001ddc3:	8b 15 c8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c8
c001ddc9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001ddd0:	74 33                	je     c001de05 <IDE::open(int, int, void*)+0x13d>
c001ddd2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ddd8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001dddc:	40                   	inc    eax
c001dddd:	83 ec 0c             	sub    esp,0xc
c001dde0:	0f b6 c0             	movzx  eax,al
c001dde3:	50                   	push   eax
c001dde4:	55                   	push   ebp
c001dde5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dde9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ddef:	51                   	push   ecx
c001ddf0:	e8 47 2c ff ff       	call   c0010a3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ddf5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ddfa:	83 c4 1c             	add    esp,0x1c
c001ddfd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001de03:	eb 0a                	jmp    c001de0f <IDE::open(int, int, void*)+0x147>
c001de05:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001de0f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001de16:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001de1d:	c1 e1 10             	shl    ecx,0x10
c001de20:	c1 e0 08             	shl    eax,0x8
c001de23:	bf f8 0c 00 00       	mov    edi,0xcf8
c001de28:	09 c1                	or     ecx,eax
c001de2a:	89 fa                	mov    edx,edi
c001de2c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001de33:	c1 e0 0b             	shl    eax,0xb
c001de36:	09 c1                	or     ecx,eax
c001de38:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001de3e:	89 c8                	mov    eax,ecx
c001de40:	ef                   	out    dx,eax
c001de41:	be fc 0c 00 00       	mov    esi,0xcfc
c001de46:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001de4c:	89 f2                	mov    edx,esi
c001de4e:	ee                   	out    dx,al
c001de4f:	89 c8                	mov    eax,ecx
c001de51:	89 fa                	mov    edx,edi
c001de53:	ef                   	out    dx,eax
c001de54:	89 f2                	mov    edx,esi
c001de56:	ed                   	in     eax,dx
c001de57:	0f b6 c0             	movzx  eax,al
c001de5a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001de60:	74 46                	je     c001dea8 <IDE::open(int, int, void*)+0x1e0>
c001de62:	83 ec 0c             	sub    esp,0xc
c001de65:	68 d0 50 02 c0       	push   0xc00250d0
c001de6a:	eb 34                	jmp    c001dea0 <IDE::open(int, int, void*)+0x1d8>
c001de6c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001de75:	75 17                	jne    c001de8e <IDE::open(int, int, void*)+0x1c6>
c001de77:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001de7c:	74 07                	je     c001de85 <IDE::open(int, int, void*)+0x1bd>
c001de7e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001de83:	75 09                	jne    c001de8e <IDE::open(int, int, void*)+0x1c6>
c001de85:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001de8c:	eb 1a                	jmp    c001dea8 <IDE::open(int, int, void*)+0x1e0>
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	68 d8 50 02 c0       	push   0xc00250d8
c001de96:	eb 08                	jmp    c001dea0 <IDE::open(int, int, void*)+0x1d8>
c001de98:	83 ec 0c             	sub    esp,0xc
c001de9b:	68 09 51 02 c0       	push   0xc0025109
c001dea0:	e8 aa 4b ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001dea5:	83 c4 10             	add    esp,0x10
c001dea8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001deaf:	79 1a                	jns    c001decb <IDE::open(int, int, void*)+0x203>
c001deb1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001deb7:	83 e0 fc             	and    eax,0xfffffffc
c001deba:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001dec1:	83 c0 08             	add    eax,0x8
c001dec4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001decb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ded1:	89 c2                	mov    edx,eax
c001ded3:	83 e2 0f             	and    edx,0xf
c001ded6:	66 83 fa 08          	cmp    dx,0x8
c001deda:	75 0a                	jne    c001dee6 <IDE::open(int, int, void*)+0x21e>
c001dedc:	83 e8 02             	sub    eax,0x2
c001dedf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dee6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001deec:	89 c2                	mov    edx,eax
c001deee:	83 e2 0f             	and    edx,0xf
c001def1:	66 83 fa 08          	cmp    dx,0x8
c001def5:	75 0a                	jne    c001df01 <IDE::open(int, int, void*)+0x239>
c001def7:	83 e8 02             	sub    eax,0x2
c001defa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001df01:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001df08:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001df0f:	89 c8                	mov    eax,ecx
c001df11:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001df14:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001df18:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001df1c:	8d 51 01             	lea    edx,[ecx+0x1]
c001df1f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001df24:	0f b6 d2             	movzx  edx,dl
c001df27:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001df2e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001df31:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001df35:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001df39:	8d 48 02             	lea    ecx,[eax+0x2]
c001df3c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001df41:	0f b6 c9             	movzx  ecx,cl
c001df44:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001df4a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001df4d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001df51:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001df55:	8d 50 03             	lea    edx,[eax+0x3]
c001df58:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001df5d:	0f b6 d2             	movzx  edx,dl
c001df60:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001df66:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001df69:	83 c0 04             	add    eax,0x4
c001df6c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001df70:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001df74:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001df7a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001df7f:	56                   	push   esi
c001df80:	56                   	push   esi
c001df81:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001df88:	50                   	push   eax
c001df89:	68 33 51 02 c0       	push   0xc0025133
c001df8e:	e8 52 e7 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001df93:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001df9a:	83 c4 10             	add    esp,0x10
c001df9d:	66 85 f6             	test   si,si
c001dfa0:	74 5f                	je     c001e001 <IDE::open(int, int, void*)+0x339>
c001dfa2:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dfa9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dfac:	89 d0                	mov    eax,edx
c001dfae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dfb2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dfb6:	40                   	inc    eax
c001dfb7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dfbd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dfc2:	eb 3d                	jmp    c001e001 <IDE::open(int, int, void*)+0x339>
c001dfc4:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dfca:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dfd1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dfd8:	66 05 06 02          	add    ax,0x206
c001dfdc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dfe3:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dfea:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dff1:	66 05 06 02          	add    ax,0x206
c001dff5:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dffc:	e9 ca fe ff ff       	jmp    c001decb <IDE::open(int, int, void*)+0x203>
c001e001:	50                   	push   eax
c001e002:	50                   	push   eax
c001e003:	6a 00                	push   0x0
c001e005:	53                   	push   ebx
c001e006:	e8 49 fa ff ff       	call   c001da54 <IDE::prepareInterrupt(unsigned char)>
c001e00b:	5a                   	pop    edx
c001e00c:	59                   	pop    ecx
c001e00d:	6a 01                	push   0x1
c001e00f:	53                   	push   ebx
c001e010:	e8 3f fa ff ff       	call   c001da54 <IDE::prepareInterrupt(unsigned char)>
c001e015:	83 c4 0c             	add    esp,0xc
c001e018:	6a 00                	push   0x0
c001e01a:	6a 00                	push   0x0
c001e01c:	53                   	push   ebx
c001e01d:	e8 60 fc ff ff       	call   c001dc82 <IDE::enableIRQs(unsigned char, bool)>
c001e022:	83 c4 0c             	add    esp,0xc
c001e025:	6a 00                	push   0x0
c001e027:	6a 01                	push   0x1
c001e029:	53                   	push   ebx
c001e02a:	e8 53 fc ff ff       	call   c001dc82 <IDE::enableIRQs(unsigned char, bool)>
c001e02f:	83 c4 10             	add    esp,0x10
c001e032:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e039:	74 34                	je     c001e06f <IDE::open(int, int, void*)+0x3a7>
c001e03b:	83 ec 0c             	sub    esp,0xc
c001e03e:	53                   	push   ebx
c001e03f:	6a 01                	push   0x1
c001e041:	68 4a dc 01 c0       	push   0xc001dc4a
c001e046:	6a 0e                	push   0xe
c001e048:	53                   	push   ebx
c001e049:	e8 c0 fa fe ff       	call   c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e04e:	83 c4 14             	add    esp,0x14
c001e051:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e057:	53                   	push   ebx
c001e058:	6a 01                	push   0x1
c001e05a:	68 66 dc 01 c0       	push   0xc001dc66
c001e05f:	6a 0f                	push   0xf
c001e061:	53                   	push   ebx
c001e062:	e8 a7 fa fe ff       	call   c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e067:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e06d:	eb 38                	jmp    c001e0a7 <IDE::open(int, int, void*)+0x3df>
c001e06f:	83 ec 0c             	sub    esp,0xc
c001e072:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e07c:	53                   	push   ebx
c001e07d:	6a 00                	push   0x0
c001e07f:	68 4a dc 01 c0       	push   0xc001dc4a
c001e084:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e08a:	53                   	push   ebx
c001e08b:	e8 7e fa fe ff       	call   c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e090:	83 c4 14             	add    esp,0x14
c001e093:	53                   	push   ebx
c001e094:	6a 00                	push   0x0
c001e096:	68 66 dc 01 c0       	push   0xc001dc66
c001e09b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e0a1:	53                   	push   ebx
c001e0a2:	e8 67 fa fe ff       	call   c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e0a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e0a9:	83 c4 20             	add    esp,0x20
c001e0ac:	83 ec 0c             	sub    esp,0xc
c001e0af:	53                   	push   ebx
c001e0b0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e0b3:	83 c4 0c             	add    esp,0xc
c001e0b6:	6a 07                	push   0x7
c001e0b8:	6a 00                	push   0x0
c001e0ba:	53                   	push   ebx
c001e0bb:	e8 7a fa ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e0c0:	83 c4 0c             	add    esp,0xc
c001e0c3:	6a 07                	push   0x7
c001e0c5:	6a 01                	push   0x1
c001e0c7:	53                   	push   ebx
c001e0c8:	e8 6d fa ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e0cd:	83 c4 0c             	add    esp,0xc
c001e0d0:	6a 01                	push   0x1
c001e0d2:	6a 00                	push   0x0
c001e0d4:	53                   	push   ebx
c001e0d5:	e8 a8 fb ff ff       	call   c001dc82 <IDE::enableIRQs(unsigned char, bool)>
c001e0da:	83 c4 0c             	add    esp,0xc
c001e0dd:	6a 01                	push   0x1
c001e0df:	6a 01                	push   0x1
c001e0e1:	53                   	push   ebx
c001e0e2:	e8 9b fb ff ff       	call   c001dc82 <IDE::enableIRQs(unsigned char, bool)>
c001e0e7:	83 c4 2c             	add    esp,0x2c
c001e0ea:	31 c0                	xor    eax,eax
c001e0ec:	5b                   	pop    ebx
c001e0ed:	5e                   	pop    esi
c001e0ee:	5f                   	pop    edi
c001e0ef:	5d                   	pop    ebp
c001e0f0:	c3                   	ret    
c001e0f1:	90                   	nop

c001e0f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e0f2:	55                   	push   ebp
c001e0f3:	57                   	push   edi
c001e0f4:	56                   	push   esi
c001e0f5:	53                   	push   ebx
c001e0f6:	83 ec 1c             	sub    esp,0x1c
c001e0f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e101:	8d 50 f8             	lea    edx,[eax-0x8]
c001e104:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e108:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e10c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e110:	80 fa 03             	cmp    dl,0x3
c001e113:	77 5d                	ja     c001e172 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e115:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e119:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e11d:	0f b6 db             	movzx  ebx,bl
c001e120:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e123:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e127:	83 ca 80             	or     edx,0xffffff80
c001e12a:	0f b6 d2             	movzx  edx,dl
c001e12d:	52                   	push   edx
c001e12e:	6a 0c                	push   0xc
c001e130:	53                   	push   ebx
c001e131:	56                   	push   esi
c001e132:	e8 43 f9 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e137:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e13c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e140:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e144:	0f b6 c0             	movzx  eax,al
c001e147:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001e14b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e14d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e152:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e156:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e15a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e15e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e166:	83 c4 2c             	add    esp,0x2c
c001e169:	5b                   	pop    ebx
c001e16a:	5e                   	pop    esi
c001e16b:	5f                   	pop    edi
c001e16c:	5d                   	pop    ebp
c001e16d:	e9 08 f9 ff ff       	jmp    c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e172:	3c 07                	cmp    al,0x7
c001e174:	77 10                	ja     c001e186 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001e176:	0f b6 db             	movzx  ebx,bl
c001e179:	0f b6 d0             	movzx  edx,al
c001e17c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001e184:	eb 2d                	jmp    c001e1b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e186:	3c 0d                	cmp    al,0xd
c001e188:	77 13                	ja     c001e19d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001e18a:	0f b6 db             	movzx  ebx,bl
c001e18d:	0f b6 c0             	movzx  eax,al
c001e190:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001e197:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001e19b:	eb 16                	jmp    c001e1b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e19d:	3c 15                	cmp    al,0x15
c001e19f:	77 14                	ja     c001e1b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001e1a1:	0f b6 db             	movzx  ebx,bl
c001e1a4:	0f b6 c0             	movzx  eax,al
c001e1a7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001e1af:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001e1b3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e1b5:	83 c4 1c             	add    esp,0x1c
c001e1b8:	5b                   	pop    ebx
c001e1b9:	5e                   	pop    esi
c001e1ba:	5f                   	pop    edi
c001e1bb:	5d                   	pop    ebp
c001e1bc:	c3                   	ret    
c001e1bd:	90                   	nop

c001e1be <IDE::detect()>:
c001e1be:	55                   	push   ebp
c001e1bf:	57                   	push   edi
c001e1c0:	56                   	push   esi
c001e1c1:	53                   	push   ebx
c001e1c2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001e1c8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001e1cf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001e1d6:	0f 85 97 02 00 00    	jne    c001e473 <IDE::detect()+0x2b5>
c001e1dc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e1e3:	31 f6                	xor    esi,esi
c001e1e5:	31 ed                	xor    ebp,ebp
c001e1e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e1ef:	89 e8                	mov    eax,ebp
c001e1f1:	c1 e0 06             	shl    eax,0x6
c001e1f4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e1fc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e200:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e204:	c1 e0 04             	shl    eax,0x4
c001e207:	83 c8 a0             	or     eax,0xffffffa0
c001e20a:	0f b6 c0             	movzx  eax,al
c001e20d:	50                   	push   eax
c001e20e:	6a 06                	push   0x6
c001e210:	56                   	push   esi
c001e211:	53                   	push   ebx
c001e212:	e8 63 f8 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e217:	83 c4 0c             	add    esp,0xc
c001e21a:	6a 0c                	push   0xc
c001e21c:	56                   	push   esi
c001e21d:	53                   	push   ebx
c001e21e:	e8 17 f9 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e223:	83 c4 0c             	add    esp,0xc
c001e226:	6a 0c                	push   0xc
c001e228:	56                   	push   esi
c001e229:	53                   	push   ebx
c001e22a:	e8 0b f9 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e22f:	83 c4 0c             	add    esp,0xc
c001e232:	6a 0c                	push   0xc
c001e234:	56                   	push   esi
c001e235:	53                   	push   ebx
c001e236:	e8 ff f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e23b:	83 c4 0c             	add    esp,0xc
c001e23e:	6a 0c                	push   0xc
c001e240:	56                   	push   esi
c001e241:	53                   	push   ebx
c001e242:	e8 f3 f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e247:	68 ec 00 00 00       	push   0xec
c001e24c:	6a 07                	push   0x7
c001e24e:	56                   	push   esi
c001e24f:	53                   	push   ebx
c001e250:	e8 25 f8 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e255:	83 c4 1c             	add    esp,0x1c
c001e258:	6a 0c                	push   0xc
c001e25a:	56                   	push   esi
c001e25b:	53                   	push   ebx
c001e25c:	e8 d9 f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e261:	83 c4 0c             	add    esp,0xc
c001e264:	6a 0c                	push   0xc
c001e266:	56                   	push   esi
c001e267:	53                   	push   ebx
c001e268:	e8 cd f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e26d:	83 c4 0c             	add    esp,0xc
c001e270:	6a 0c                	push   0xc
c001e272:	56                   	push   esi
c001e273:	53                   	push   ebx
c001e274:	e8 c1 f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e279:	83 c4 0c             	add    esp,0xc
c001e27c:	6a 0c                	push   0xc
c001e27e:	56                   	push   esi
c001e27f:	53                   	push   ebx
c001e280:	e8 b5 f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e285:	83 c4 0c             	add    esp,0xc
c001e288:	6a 0c                	push   0xc
c001e28a:	56                   	push   esi
c001e28b:	53                   	push   ebx
c001e28c:	e8 a9 f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	84 c0                	test   al,al
c001e296:	0f 84 5f 01 00 00    	je     c001e3fb <IDE::detect()+0x23d>
c001e29c:	31 ff                	xor    edi,edi
c001e29e:	50                   	push   eax
c001e29f:	6a 0c                	push   0xc
c001e2a1:	56                   	push   esi
c001e2a2:	53                   	push   ebx
c001e2a3:	e8 92 f8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e2a8:	83 c4 10             	add    esp,0x10
c001e2ab:	a8 01                	test   al,0x1
c001e2ad:	0f 85 69 01 00 00    	jne    c001e41c <IDE::detect()+0x25e>
c001e2b3:	84 c0                	test   al,al
c001e2b5:	78 04                	js     c001e2bb <IDE::detect()+0xfd>
c001e2b7:	a8 08                	test   al,0x8
c001e2b9:	75 23                	jne    c001e2de <IDE::detect()+0x120>
c001e2bb:	47                   	inc    edi
c001e2bc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001e2c2:	7e da                	jle    c001e29e <IDE::detect()+0xe0>
c001e2c4:	83 ec 0c             	sub    esp,0xc
c001e2c7:	6a 32                	push   0x32
c001e2c9:	e8 ae 7f ff ff       	call   c001627c <milliTenthSleep(unsigned int)>
c001e2ce:	83 c4 10             	add    esp,0x10
c001e2d1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001e2d7:	75 c5                	jne    c001e29e <IDE::detect()+0xe0>
c001e2d9:	e9 3e 01 00 00       	jmp    c001e41c <IDE::detect()+0x25e>
c001e2de:	31 c9                	xor    ecx,ecx
c001e2e0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001e2e4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001e2e8:	83 ec 0c             	sub    esp,0xc
c001e2eb:	68 80 00 00 00       	push   0x80
c001e2f0:	57                   	push   edi
c001e2f1:	6a 00                	push   0x0
c001e2f3:	56                   	push   esi
c001e2f4:	53                   	push   ebx
c001e2f5:	e8 f8 fd ff ff       	call   c001e0f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e2fa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001e2ff:	89 e8                	mov    eax,ebp
c001e301:	89 d1                	mov    ecx,edx
c001e303:	c1 e0 06             	shl    eax,0x6
c001e306:	01 d8                	add    eax,ebx
c001e308:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001e30f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001e316:	89 f2                	mov    edx,esi
c001e318:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001e31e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001e322:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001e328:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e32c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001e333:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001e33b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001e342:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001e34a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001e350:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e357:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001e35d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001e361:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e365:	83 c4 20             	add    esp,0x20
c001e368:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e36b:	83 c0 02             	add    eax,0x2
c001e36e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e374:	83 c7 02             	add    edi,0x2
c001e377:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e37a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e380:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e384:	75 e2                	jne    c001e368 <IDE::detect()+0x1aa>
c001e386:	89 e8                	mov    eax,ebp
c001e388:	c1 e0 06             	shl    eax,0x6
c001e38b:	01 d8                	add    eax,ebx
c001e38d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e393:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e39a:	66 c1 ea 09          	shr    dx,0x9
c001e39e:	83 e2 01             	and    edx,0x1
c001e3a1:	84 c9                	test   cl,cl
c001e3a3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e3a9:	75 22                	jne    c001e3cd <IDE::detect()+0x20f>
c001e3ab:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e3b2:	74 46                	je     c001e3fa <IDE::detect()+0x23c>
c001e3b4:	83 ec 0c             	sub    esp,0xc
c001e3b7:	68 7c 01 00 00       	push   0x17c
c001e3bc:	e8 d6 b3 fe ff       	call   c0009797 <malloc>
c001e3c1:	89 c7                	mov    edi,eax
c001e3c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3c6:	e8 49 06 00 00       	call   c001ea14 <ATA::ATA()>
c001e3cb:	eb 17                	jmp    c001e3e4 <IDE::detect()+0x226>
c001e3cd:	83 ec 0c             	sub    esp,0xc
c001e3d0:	68 84 01 00 00       	push   0x184
c001e3d5:	e8 bd b3 fe ff       	call   c0009797 <malloc>
c001e3da:	89 c7                	mov    edi,eax
c001e3dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3df:	e8 b8 0c 00 00       	call   c001f09c <ATAPI::ATAPI()>
c001e3e4:	5a                   	pop    edx
c001e3e5:	59                   	pop    ecx
c001e3e6:	57                   	push   edi
c001e3e7:	53                   	push   ebx
c001e3e8:	e8 75 f7 fe ff       	call   c000db62 <Device::addChild(Device*)>
c001e3ed:	8b 07                	mov    eax,DWORD PTR [edi]
c001e3ef:	53                   	push   ebx
c001e3f0:	55                   	push   ebp
c001e3f1:	6a 00                	push   0x0
c001e3f3:	57                   	push   edi
c001e3f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e3f7:	83 c4 20             	add    esp,0x20
c001e3fa:	45                   	inc    ebp
c001e3fb:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e400:	74 0d                	je     c001e40f <IDE::detect()+0x251>
c001e402:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e40a:	e9 e0 fd ff ff       	jmp    c001e1ef <IDE::detect()+0x31>
c001e40f:	4e                   	dec    esi
c001e410:	74 61                	je     c001e473 <IDE::detect()+0x2b5>
c001e412:	be 01 00 00 00       	mov    esi,0x1
c001e417:	e9 cb fd ff ff       	jmp    c001e1e7 <IDE::detect()+0x29>
c001e41c:	50                   	push   eax
c001e41d:	6a 04                	push   0x4
c001e41f:	56                   	push   esi
c001e420:	53                   	push   ebx
c001e421:	e8 14 f7 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e426:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e42a:	83 c4 0c             	add    esp,0xc
c001e42d:	6a 05                	push   0x5
c001e42f:	56                   	push   esi
c001e430:	53                   	push   ebx
c001e431:	e8 04 f7 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e43d:	80 fa 14             	cmp    dl,0x14
c001e440:	75 04                	jne    c001e446 <IDE::detect()+0x288>
c001e442:	3c eb                	cmp    al,0xeb
c001e444:	eb 07                	jmp    c001e44d <IDE::detect()+0x28f>
c001e446:	3c 96                	cmp    al,0x96
c001e448:	75 b1                	jne    c001e3fb <IDE::detect()+0x23d>
c001e44a:	80 fa 69             	cmp    dl,0x69
c001e44d:	75 ac                	jne    c001e3fb <IDE::detect()+0x23d>
c001e44f:	68 a1 00 00 00       	push   0xa1
c001e454:	6a 07                	push   0x7
c001e456:	56                   	push   esi
c001e457:	53                   	push   ebx
c001e458:	e8 1d f6 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e45d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e464:	e8 13 7e ff ff       	call   c001627c <milliTenthSleep(unsigned int)>
c001e469:	83 c4 10             	add    esp,0x10
c001e46c:	b1 01                	mov    cl,0x1
c001e46e:	e9 6d fe ff ff       	jmp    c001e2e0 <IDE::detect()+0x122>
c001e473:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e479:	5b                   	pop    ebx
c001e47a:	5e                   	pop    esi
c001e47b:	5f                   	pop    edi
c001e47c:	5d                   	pop    ebp
c001e47d:	c3                   	ret    

c001e47e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e47e:	55                   	push   ebp
c001e47f:	57                   	push   edi
c001e480:	56                   	push   esi
c001e481:	53                   	push   ebx
c001e482:	83 ec 1c             	sub    esp,0x1c
c001e485:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e489:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e48d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e491:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e495:	88 c3                	mov    bl,al
c001e497:	84 c0                	test   al,al
c001e499:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e49d:	0f 84 81 00 00 00    	je     c001e524 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e4a3:	83 ec 0c             	sub    esp,0xc
c001e4a6:	68 4f 51 02 c0       	push   0xc002514f
c001e4ab:	e8 35 e2 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001e4b0:	83 c4 10             	add    esp,0x10
c001e4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4b7:	3c 01                	cmp    al,0x1
c001e4b9:	74 63                	je     c001e51e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e4bb:	3c 02                	cmp    al,0x2
c001e4bd:	75 53                	jne    c001e512 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e4bf:	d1 e6                	shl    esi,1
c001e4c1:	09 ee                	or     esi,ebp
c001e4c3:	50                   	push   eax
c001e4c4:	89 f0                	mov    eax,esi
c001e4c6:	6a 01                	push   0x1
c001e4c8:	0f b6 f0             	movzx  esi,al
c001e4cb:	c1 e6 06             	shl    esi,0x6
c001e4ce:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e4d6:	50                   	push   eax
c001e4d7:	57                   	push   edi
c001e4d8:	e8 5d f6 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e4dd:	83 c4 10             	add    esp,0x10
c001e4e0:	a8 01                	test   al,0x1
c001e4e2:	74 02                	je     c001e4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e4e4:	b3 07                	mov    bl,0x7
c001e4e6:	a8 02                	test   al,0x2
c001e4e8:	74 02                	je     c001e4ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e4ea:	b3 03                	mov    bl,0x3
c001e4ec:	a8 04                	test   al,0x4
c001e4ee:	74 02                	je     c001e4f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e4f0:	b3 14                	mov    bl,0x14
c001e4f2:	a8 08                	test   al,0x8
c001e4f4:	74 02                	je     c001e4f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e4f6:	b3 03                	mov    bl,0x3
c001e4f8:	a8 10                	test   al,0x10
c001e4fa:	74 02                	je     c001e4fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e4fc:	b3 15                	mov    bl,0x15
c001e4fe:	a8 20                	test   al,0x20
c001e500:	74 02                	je     c001e504 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e502:	b3 03                	mov    bl,0x3
c001e504:	a8 40                	test   al,0x40
c001e506:	74 02                	je     c001e50a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e508:	b3 16                	mov    bl,0x16
c001e50a:	84 c0                	test   al,al
c001e50c:	79 16                	jns    c001e524 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e50e:	b3 0d                	mov    bl,0xd
c001e510:	eb 12                	jmp    c001e524 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e512:	3c 03                	cmp    al,0x3
c001e514:	74 0c                	je     c001e522 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e516:	3c 04                	cmp    al,0x4
c001e518:	75 0a                	jne    c001e524 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e51a:	b3 08                	mov    bl,0x8
c001e51c:	eb 06                	jmp    c001e524 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e51e:	b3 13                	mov    bl,0x13
c001e520:	eb 02                	jmp    c001e524 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e522:	b3 17                	mov    bl,0x17
c001e524:	83 c4 1c             	add    esp,0x1c
c001e527:	88 d8                	mov    al,bl
c001e529:	5b                   	pop    ebx
c001e52a:	5e                   	pop    esi
c001e52b:	5f                   	pop    edi
c001e52c:	5d                   	pop    ebp
c001e52d:	c3                   	ret    

c001e52e <IDE::polling(unsigned char, unsigned int)>:
c001e52e:	57                   	push   edi
c001e52f:	56                   	push   esi
c001e530:	53                   	push   ebx
c001e531:	bb 04 00 00 00       	mov    ebx,0x4
c001e536:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e53a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e53f:	52                   	push   edx
c001e540:	6a 0c                	push   0xc
c001e542:	56                   	push   esi
c001e543:	57                   	push   edi
c001e544:	e8 f1 f5 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e549:	83 c4 10             	add    esp,0x10
c001e54c:	4b                   	dec    ebx
c001e54d:	75 f0                	jne    c001e53f <IDE::polling(unsigned char, unsigned int)+0x11>
c001e54f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e554:	50                   	push   eax
c001e555:	6a 0c                	push   0xc
c001e557:	56                   	push   esi
c001e558:	57                   	push   edi
c001e559:	e8 dc f5 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001e55e:	83 c4 10             	add    esp,0x10
c001e561:	a8 01                	test   al,0x1
c001e563:	75 17                	jne    c001e57c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e565:	a8 20                	test   al,0x20
c001e567:	75 0f                	jne    c001e578 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e569:	4b                   	dec    ebx
c001e56a:	74 10                	je     c001e57c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e56c:	84 c0                	test   al,al
c001e56e:	78 e4                	js     c001e554 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e570:	a8 08                	test   al,0x8
c001e572:	74 e0                	je     c001e554 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e574:	31 c0                	xor    eax,eax
c001e576:	eb 06                	jmp    c001e57e <IDE::polling(unsigned char, unsigned int)+0x50>
c001e578:	b0 01                	mov    al,0x1
c001e57a:	eb 02                	jmp    c001e57e <IDE::polling(unsigned char, unsigned int)+0x50>
c001e57c:	b0 02                	mov    al,0x2
c001e57e:	5b                   	pop    ebx
c001e57f:	5e                   	pop    esi
c001e580:	5f                   	pop    edi
c001e581:	c3                   	ret    

c001e582 <SATABus::close(int, int, void*)>:
c001e582:	31 c0                	xor    eax,eax
c001e584:	c3                   	ret    
c001e585:	90                   	nop

c001e586 <SATABus::detect()>:
c001e586:	c3                   	ret    
c001e587:	90                   	nop

c001e588 <SATABus::SATABus()>:
c001e588:	83 ec 0c             	sub    esp,0xc
c001e58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e58f:	83 ec 08             	sub    esp,0x8
c001e592:	68 88 51 02 c0       	push   0xc0025188
c001e597:	50                   	push   eax
c001e598:	e8 73 f9 fe ff       	call   c000df10 <HardDiskController::HardDiskController(char const*)>
c001e59d:	83 c4 10             	add    esp,0x10
c001e5a0:	ba 30 52 02 c0       	mov    edx,0xc0025230
c001e5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a9:	89 10                	mov    DWORD PTR [eax],edx
c001e5ab:	83 ec 0c             	sub    esp,0xc
c001e5ae:	6a 50                	push   0x50
c001e5b0:	e8 0c b7 fe ff       	call   c0009cc1 <Phys::allocateContiguousPages(int)>
c001e5b5:	83 c4 10             	add    esp,0x10
c001e5b8:	89 c2                	mov    edx,eax
c001e5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5be:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e5c4:	83 ec 0c             	sub    esp,0xc
c001e5c7:	6a 50                	push   0x50
c001e5c9:	e8 bb cd fe ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c001e5ce:	83 c4 10             	add    esp,0x10
c001e5d1:	89 c2                	mov    edx,eax
c001e5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5dd:	a1 b4 63 02 c0       	mov    eax,ds:0xc00263b4
c001e5e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5e6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e5ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5f0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e5f6:	83 ec 0c             	sub    esp,0xc
c001e5f9:	6a 03                	push   0x3
c001e5fb:	6a 50                	push   0x50
c001e5fd:	51                   	push   ecx
c001e5fe:	52                   	push   edx
c001e5ff:	50                   	push   eax
c001e600:	e8 e7 d6 fe ff       	call   c000bcec <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e605:	83 c4 20             	add    esp,0x20
c001e608:	90                   	nop
c001e609:	83 c4 0c             	add    esp,0xc
c001e60c:	c3                   	ret    
c001e60d:	90                   	nop

c001e60e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e60e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e612:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e615:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e618:	09 c2                	or     edx,eax
c001e61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e61e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e624:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e626:	31 c0                	xor    eax,eax
c001e628:	c1 e9 08             	shr    ecx,0x8
c001e62b:	83 e1 0f             	and    ecx,0xf
c001e62e:	39 c8                	cmp    eax,ecx
c001e630:	74 0a                	je     c001e63c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e632:	f6 c2 01             	test   dl,0x1
c001e635:	74 08                	je     c001e63f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e637:	d1 ea                	shr    edx,1
c001e639:	40                   	inc    eax
c001e63a:	eb f2                	jmp    c001e62e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e63c:	83 c8 ff             	or     eax,0xffffffff
c001e63f:	c3                   	ret    

c001e640 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e640:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e644:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e647:	89 c2                	mov    edx,eax
c001e649:	c1 ea 08             	shr    edx,0x8
c001e64c:	83 e2 0f             	and    edx,0xf
c001e64f:	fe ca                	dec    dl
c001e651:	75 31                	jne    c001e684 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e653:	83 e0 0f             	and    eax,0xf
c001e656:	3c 03                	cmp    al,0x3
c001e658:	75 2a                	jne    c001e684 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e65a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e65d:	b8 02 00 00 00       	mov    eax,0x2
c001e662:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e668:	74 1c                	je     c001e686 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e66a:	b8 04 00 00 00       	mov    eax,0x4
c001e66f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e675:	74 0f                	je     c001e686 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e677:	31 c0                	xor    eax,eax
c001e679:	83 fa 03             	cmp    edx,0x3
c001e67c:	0f 94 c0             	sete   al
c001e67f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e683:	c3                   	ret    
c001e684:	31 c0                	xor    eax,eax
c001e686:	c3                   	ret    
c001e687:	90                   	nop

c001e688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e68c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e68f:	0f ba e2 0f          	bt     edx,0xf
c001e693:	72 f7                	jb     c001e68c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e695:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e698:	83 ca 10             	or     edx,0x10
c001e69b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e69e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6a1:	83 ca 01             	or     edx,0x1
c001e6a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6a7:	c3                   	ret    

c001e6a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e6a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6af:	83 e2 fe             	and    edx,0xfffffffe
c001e6b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6b8:	83 e2 ef             	and    edx,0xffffffef
c001e6bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6c1:	0f ba e2 0e          	bt     edx,0xe
c001e6c5:	72 f7                	jb     c001e6be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e6c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6ca:	0f ba e2 0f          	bt     edx,0xf
c001e6ce:	72 ee                	jb     c001e6be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e6d0:	c3                   	ret    
c001e6d1:	90                   	nop

c001e6d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e6d2:	55                   	push   ebp
c001e6d3:	57                   	push   edi
c001e6d4:	56                   	push   esi
c001e6d5:	53                   	push   ebx
c001e6d6:	83 ec 1c             	sub    esp,0x1c
c001e6d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6e1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6e5:	53                   	push   ebx
c001e6e6:	89 fd                	mov    ebp,edi
c001e6e8:	56                   	push   esi
c001e6e9:	c1 e5 0a             	shl    ebp,0xa
c001e6ec:	e8 b7 ff ff ff       	call   c001e6a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e6f1:	83 ec 0c             	sub    esp,0xc
c001e6f4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e6fa:	01 e8                	add    eax,ebp
c001e6fc:	89 03                	mov    DWORD PTR [ebx],eax
c001e6fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e700:	68 00 04 00 00       	push   0x400
c001e705:	6a 00                	push   0x0
c001e707:	50                   	push   eax
c001e708:	e8 9b 1d fe ff       	call   c00004a8 <memset>
c001e70d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e713:	89 fa                	mov    edx,edi
c001e715:	01 e8                	add    eax,ebp
c001e717:	c1 e7 0d             	shl    edi,0xd
c001e71a:	89 03                	mov    DWORD PTR [ebx],eax
c001e71c:	c1 e2 08             	shl    edx,0x8
c001e71f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e726:	81 c2 00 80 00 00    	add    edx,0x8000
c001e72c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e730:	89 d0                	mov    eax,edx
c001e732:	83 c4 1c             	add    esp,0x1c
c001e735:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e73b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e73e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e741:	68 00 01 00 00       	push   0x100
c001e746:	6a 00                	push   0x0
c001e748:	50                   	push   eax
c001e749:	e8 5a 1d fe ff       	call   c00004a8 <memset>
c001e74e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e752:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e758:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e75e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e762:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e765:	83 c4 10             	add    esp,0x10
c001e768:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e76f:	31 ff                	xor    edi,edi
c001e771:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e777:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e77d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e781:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e787:	83 c5 20             	add    ebp,0x20
c001e78a:	01 f8                	add    eax,edi
c001e78c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e78f:	52                   	push   edx
c001e790:	68 00 01 00 00       	push   0x100
c001e795:	6a 00                	push   0x0
c001e797:	50                   	push   eax
c001e798:	e8 0b 1d fe ff       	call   c00004a8 <memset>
c001e79d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7a1:	83 c4 10             	add    esp,0x10
c001e7a4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e7aa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e7b1:	01 f8                	add    eax,edi
c001e7b3:	81 c7 00 01 00 00    	add    edi,0x100
c001e7b9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e7bc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e7c2:	75 b3                	jne    c001e777 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e7c4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e7c8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e7cc:	83 c4 1c             	add    esp,0x1c
c001e7cf:	5b                   	pop    ebx
c001e7d0:	5e                   	pop    esi
c001e7d1:	5f                   	pop    edi
c001e7d2:	5d                   	pop    ebp
c001e7d3:	e9 b0 fe ff ff       	jmp    c001e688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e7d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e7d8:	55                   	push   ebp
c001e7d9:	57                   	push   edi
c001e7da:	56                   	push   esi
c001e7db:	53                   	push   ebx
c001e7dc:	83 ec 0c             	sub    esp,0xc
c001e7df:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e7e3:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001e7ea:	74 2d                	je     c001e819 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	68 ac 51 02 c0       	push   0xc00251ac
c001e7f4:	e8 f8 af fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001e803:	75 14                	jne    c001e819 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e805:	e4 60                	in     al,0x60
c001e807:	3c 1c                	cmp    al,0x1c
c001e809:	74 04                	je     c001e80f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e80b:	3c 5a                	cmp    al,0x5a
c001e80d:	75 f6                	jne    c001e805 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001e80f:	e4 60                	in     al,0x60
c001e811:	3c 5a                	cmp    al,0x5a
c001e813:	74 fa                	je     c001e80f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e815:	3c 1c                	cmp    al,0x1c
c001e817:	74 f6                	je     c001e80f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e819:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e81d:	31 db                	xor    ebx,ebx
c001e81f:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001e822:	f7 c5 01 00 00 00    	test   ebp,0x1
c001e828:	0f 84 78 01 00 00    	je     c001e9a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e82e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e832:	89 d8                	mov    eax,ebx
c001e834:	c1 e0 07             	shl    eax,0x7
c001e837:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001e83e:	50                   	push   eax
c001e83f:	50                   	push   eax
c001e840:	57                   	push   edi
c001e841:	56                   	push   esi
c001e842:	e8 f9 fd ff ff       	call   c001e640 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	83 f8 01             	cmp    eax,0x1
c001e84d:	0f 85 19 01 00 00    	jne    c001e96c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001e853:	50                   	push   eax
c001e854:	53                   	push   ebx
c001e855:	57                   	push   edi
c001e856:	56                   	push   esi
c001e857:	e8 76 fe ff ff       	call   c001e6d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e85c:	83 c4 10             	add    esp,0x10
c001e85f:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001e866:	74 2d                	je     c001e895 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	68 c1 51 02 c0       	push   0xc00251c1
c001e870:	e8 7c af fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e875:	83 c4 10             	add    esp,0x10
c001e878:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001e87f:	75 14                	jne    c001e895 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e881:	e4 60                	in     al,0x60
c001e883:	3c 1c                	cmp    al,0x1c
c001e885:	74 04                	je     c001e88b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e887:	3c 5a                	cmp    al,0x5a
c001e889:	75 f6                	jne    c001e881 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001e88b:	e4 60                	in     al,0x60
c001e88d:	3c 5a                	cmp    al,0x5a
c001e88f:	74 fa                	je     c001e88b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e891:	3c 1c                	cmp    al,0x1c
c001e893:	74 f6                	je     c001e88b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e895:	83 ec 0c             	sub    esp,0xc
c001e898:	68 7c 01 00 00       	push   0x17c
c001e89d:	e8 f5 ae fe ff       	call   c0009797 <malloc>
c001e8a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8a5:	89 c7                	mov    edi,eax
c001e8a7:	e8 28 10 00 00       	call   c001f8d4 <SATA::SATA()>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001e8b6:	74 2d                	je     c001e8e5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001e8b8:	83 ec 0c             	sub    esp,0xc
c001e8bb:	68 d6 51 02 c0       	push   0xc00251d6
c001e8c0:	e8 2c af fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e8c5:	83 c4 10             	add    esp,0x10
c001e8c8:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001e8cf:	75 14                	jne    c001e8e5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001e8d1:	e4 60                	in     al,0x60
c001e8d3:	3c 5a                	cmp    al,0x5a
c001e8d5:	74 04                	je     c001e8db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e8d7:	3c 1c                	cmp    al,0x1c
c001e8d9:	75 f6                	jne    c001e8d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001e8db:	e4 60                	in     al,0x60
c001e8dd:	3c 5a                	cmp    al,0x5a
c001e8df:	74 fa                	je     c001e8db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e8e1:	3c 1c                	cmp    al,0x1c
c001e8e3:	74 f6                	je     c001e8db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e8e5:	50                   	push   eax
c001e8e6:	50                   	push   eax
c001e8e7:	57                   	push   edi
c001e8e8:	56                   	push   esi
c001e8e9:	e8 74 f2 fe ff       	call   c000db62 <Device::addChild(Device*)>
c001e8ee:	83 c4 10             	add    esp,0x10
c001e8f1:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001e8f8:	74 2d                	je     c001e927 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001e8fa:	83 ec 0c             	sub    esp,0xc
c001e8fd:	68 eb 51 02 c0       	push   0xc00251eb
c001e902:	e8 ea ae fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001e911:	75 14                	jne    c001e927 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001e913:	e4 60                	in     al,0x60
c001e915:	3c 1c                	cmp    al,0x1c
c001e917:	74 04                	je     c001e91d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e919:	3c 5a                	cmp    al,0x5a
c001e91b:	75 f6                	jne    c001e913 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001e91d:	e4 60                	in     al,0x60
c001e91f:	3c 5a                	cmp    al,0x5a
c001e921:	74 fa                	je     c001e91d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e923:	3c 1c                	cmp    al,0x1c
c001e925:	74 f6                	je     c001e91d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e927:	8b 07                	mov    eax,DWORD PTR [edi]
c001e929:	56                   	push   esi
c001e92a:	6a 00                	push   0x0
c001e92c:	53                   	push   ebx
c001e92d:	57                   	push   edi
c001e92e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e931:	83 c4 10             	add    esp,0x10
c001e934:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001e93b:	74 69                	je     c001e9a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e93d:	83 ec 0c             	sub    esp,0xc
c001e940:	68 00 52 02 c0       	push   0xc0025200
c001e945:	e8 a7 ae fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001e94a:	83 c4 10             	add    esp,0x10
c001e94d:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001e954:	75 50                	jne    c001e9a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e956:	e4 60                	in     al,0x60
c001e958:	3c 1c                	cmp    al,0x1c
c001e95a:	74 04                	je     c001e960 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001e95c:	3c 5a                	cmp    al,0x5a
c001e95e:	75 f6                	jne    c001e956 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001e960:	e4 60                	in     al,0x60
c001e962:	3c 5a                	cmp    al,0x5a
c001e964:	74 fa                	je     c001e960 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001e966:	3c 1c                	cmp    al,0x1c
c001e968:	74 f6                	je     c001e960 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001e96a:	eb 3a                	jmp    c001e9a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e96c:	83 f8 04             	cmp    eax,0x4
c001e96f:	75 35                	jne    c001e9a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e971:	50                   	push   eax
c001e972:	53                   	push   ebx
c001e973:	57                   	push   edi
c001e974:	56                   	push   esi
c001e975:	e8 58 fd ff ff       	call   c001e6d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e97a:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e981:	e8 11 ae fe ff       	call   c0009797 <malloc>
c001e986:	89 04 24             	mov    DWORD PTR [esp],eax
c001e989:	89 c7                	mov    edi,eax
c001e98b:	e8 ba 17 00 00       	call   c002014a <SATAPI::SATAPI()>
c001e990:	5a                   	pop    edx
c001e991:	59                   	pop    ecx
c001e992:	57                   	push   edi
c001e993:	56                   	push   esi
c001e994:	e8 c9 f1 fe ff       	call   c000db62 <Device::addChild(Device*)>
c001e999:	8b 07                	mov    eax,DWORD PTR [edi]
c001e99b:	56                   	push   esi
c001e99c:	6a 00                	push   0x0
c001e99e:	53                   	push   ebx
c001e99f:	57                   	push   edi
c001e9a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e9a3:	83 c4 20             	add    esp,0x20
c001e9a6:	d1 ed                	shr    ebp,1
c001e9a8:	43                   	inc    ebx
c001e9a9:	83 fb 20             	cmp    ebx,0x20
c001e9ac:	0f 85 70 fe ff ff    	jne    c001e822 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001e9b2:	83 c4 0c             	add    esp,0xc
c001e9b5:	5b                   	pop    ebx
c001e9b6:	5e                   	pop    esi
c001e9b7:	5f                   	pop    edi
c001e9b8:	5d                   	pop    ebp
c001e9b9:	c3                   	ret    

c001e9ba <SATABus::open(int, int, void*)>:
c001e9ba:	53                   	push   ebx
c001e9bb:	83 ec 10             	sub    esp,0x10
c001e9be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e9c2:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001e9c8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e9ce:	50                   	push   eax
c001e9cf:	68 15 52 02 c0       	push   0xc0025215
c001e9d4:	e8 0c dd fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001e9d9:	58                   	pop    eax
c001e9da:	5a                   	pop    edx
c001e9db:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001e9e1:	53                   	push   ebx
c001e9e2:	e8 f1 fd ff ff       	call   c001e7d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e9e7:	31 c0                	xor    eax,eax
c001e9e9:	83 c4 18             	add    esp,0x18
c001e9ec:	5b                   	pop    ebx
c001e9ed:	c3                   	ret    

c001e9ee <ATA::close(int, int, void*)>:
c001e9ee:	83 ec 0c             	sub    esp,0xc
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e9fb:	85 c0                	test   eax,eax
c001e9fd:	74 0c                	je     c001ea0b <ATA::close(int, int, void*)+0x1d>
c001e9ff:	83 ec 0c             	sub    esp,0xc
c001ea02:	8b 10                	mov    edx,DWORD PTR [eax]
c001ea04:	50                   	push   eax
c001ea05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	31 c0                	xor    eax,eax
c001ea0d:	83 c4 0c             	add    esp,0xc
c001ea10:	c3                   	ret    
c001ea11:	90                   	nop

c001ea12 <ATA::powerSaving(PowerSavingLevel)>:
c001ea12:	c3                   	ret    
c001ea13:	90                   	nop

c001ea14 <ATA::ATA()>:
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1b:	83 ec 04             	sub    esp,0x4
c001ea1e:	68 00 02 00 00       	push   0x200
c001ea23:	68 b3 53 02 c0       	push   0xc00253b3
c001ea28:	50                   	push   eax
c001ea29:	e8 6c f5 fe ff       	call   c000df9a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	ba a8 52 02 c0       	mov    edx,0xc00252a8
c001ea36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3a:	89 10                	mov    DWORD PTR [eax],edx
c001ea3c:	90                   	nop
c001ea3d:	83 c4 0c             	add    esp,0xc
c001ea40:	c3                   	ret    
c001ea41:	90                   	nop

c001ea42 <ATA::flush(bool)>:
c001ea42:	53                   	push   ebx
c001ea43:	83 ec 08             	sub    esp,0x8
c001ea46:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001ea4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea4f:	19 c0                	sbb    eax,eax
c001ea51:	83 e0 fd             	and    eax,0xfffffffd
c001ea54:	05 ea 00 00 00       	add    eax,0xea
c001ea59:	50                   	push   eax
c001ea5a:	6a 07                	push   0x7
c001ea5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea63:	50                   	push   eax
c001ea64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea6a:	e8 0b f0 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea6f:	83 c4 0c             	add    esp,0xc
c001ea72:	6a 00                	push   0x0
c001ea74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea7b:	50                   	push   eax
c001ea7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea82:	e8 a7 fa ff ff       	call   c001e52e <IDE::polling(unsigned char, unsigned int)>
c001ea87:	83 c4 18             	add    esp,0x18
c001ea8a:	5b                   	pop    ebx
c001ea8b:	c3                   	ret    

c001ea8c <ATA::readyForCommand()>:
c001ea8c:	56                   	push   esi
c001ea8d:	53                   	push   ebx
c001ea8e:	53                   	push   ebx
c001ea8f:	31 db                	xor    ebx,ebx
c001ea91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea95:	51                   	push   ecx
c001ea96:	6a 0c                	push   0xc
c001ea98:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ea9f:	50                   	push   eax
c001eaa0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eaa6:	e8 8f f0 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001eaab:	83 c4 10             	add    esp,0x10
c001eaae:	a8 88                	test   al,0x88
c001eab0:	74 1f                	je     c001ead1 <ATA::readyForCommand()+0x45>
c001eab2:	43                   	inc    ebx
c001eab3:	83 fb 63             	cmp    ebx,0x63
c001eab6:	7e dd                	jle    c001ea95 <ATA::readyForCommand()+0x9>
c001eab8:	83 ec 0c             	sub    esp,0xc
c001eabb:	6a 0a                	push   0xa
c001eabd:	e8 ba 77 ff ff       	call   c001627c <milliTenthSleep(unsigned int)>
c001eac2:	83 c4 10             	add    esp,0x10
c001eac5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001eacb:	75 c8                	jne    c001ea95 <ATA::readyForCommand()+0x9>
c001eacd:	31 c0                	xor    eax,eax
c001eacf:	eb 02                	jmp    c001ead3 <ATA::readyForCommand()+0x47>
c001ead1:	b0 01                	mov    al,0x1
c001ead3:	5a                   	pop    edx
c001ead4:	5b                   	pop    ebx
c001ead5:	5e                   	pop    esi
c001ead6:	c3                   	ret    
c001ead7:	90                   	nop

c001ead8 <ATA::access(unsigned long long, int, void*, bool)>:
c001ead8:	55                   	push   ebp
c001ead9:	57                   	push   edi
c001eada:	56                   	push   esi
c001eadb:	53                   	push   ebx
c001eadc:	83 ec 38             	sub    esp,0x38
c001eadf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001eae3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001eae7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001eaeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eaef:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001eaf3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eaf7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001eafb:	68 54 52 02 c0       	push   0xc0025254
c001eb00:	e8 e0 db fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001eb05:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001eb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eb0f:	83 c4 10             	add    esp,0x10
c001eb12:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb1c:	c1 e0 06             	shl    eax,0x6
c001eb1f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001eb27:	74 5d                	je     c001eb86 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001eb29:	89 fa                	mov    edx,edi
c001eb2b:	89 f0                	mov    eax,esi
c001eb2d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001eb31:	c1 ea 1c             	shr    edx,0x1c
c001eb34:	89 d1                	mov    ecx,edx
c001eb36:	09 c1                	or     ecx,eax
c001eb38:	74 25                	je     c001eb5f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001eb3a:	31 ed                	xor    ebp,ebp
c001eb3c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001eb43:	89 fa                	mov    edx,edi
c001eb45:	89 f0                	mov    eax,esi
c001eb47:	0f ad d0             	shrd   eax,edx,cl
c001eb4a:	d3 ea                	shr    edx,cl
c001eb4c:	f6 c1 20             	test   cl,0x20
c001eb4f:	74 02                	je     c001eb53 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001eb51:	89 d0                	mov    eax,edx
c001eb53:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001eb57:	45                   	inc    ebp
c001eb58:	83 fd 06             	cmp    ebp,0x6
c001eb5b:	75 df                	jne    c001eb3c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001eb5d:	eb 76                	jmp    c001ebd5 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001eb5f:	89 f0                	mov    eax,esi
c001eb61:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001eb66:	89 fa                	mov    edx,edi
c001eb68:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001eb6f:	0f ac d0 10          	shrd   eax,edx,0x10
c001eb73:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001eb78:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001eb7c:	c1 ee 18             	shr    esi,0x18
c001eb7f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001eb84:	eb 56                	jmp    c001ebdc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001eb86:	6a 00                	push   0x0
c001eb88:	6a 3f                	push   0x3f
c001eb8a:	57                   	push   edi
c001eb8b:	56                   	push   esi
c001eb8c:	e8 af 29 00 00       	call   c0021540 <__umoddi3>
c001eb91:	83 c4 10             	add    esp,0x10
c001eb94:	40                   	inc    eax
c001eb95:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001eb99:	6a 00                	push   0x0
c001eb9b:	68 f0 03 00 00       	push   0x3f0
c001eba0:	57                   	push   edi
c001eba1:	56                   	push   esi
c001eba2:	e8 99 28 00 00       	call   c0021440 <__udivdi3>
c001eba7:	83 c4 10             	add    esp,0x10
c001ebaa:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ebaf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ebb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ebbb:	6a 00                	push   0x0
c001ebbd:	6a 3f                	push   0x3f
c001ebbf:	57                   	push   edi
c001ebc0:	56                   	push   esi
c001ebc1:	e8 7a 28 00 00       	call   c0021440 <__udivdi3>
c001ebc6:	83 c4 10             	add    esp,0x10
c001ebc9:	89 c6                	mov    esi,eax
c001ebcb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ebd0:	83 e6 0f             	and    esi,0xf
c001ebd3:	eb 07                	jmp    c001ebdc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ebd5:	31 f6                	xor    esi,esi
c001ebd7:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ebdc:	bf 01 00 00 00       	mov    edi,0x1
c001ebe1:	50                   	push   eax
c001ebe2:	6a 00                	push   0x0
c001ebe4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebeb:	50                   	push   eax
c001ebec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ebf0:	e8 8d f0 ff ff       	call   c001dc82 <IDE::enableIRQs(unsigned char, bool)>
c001ebf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebf8:	e8 8f fe ff ff       	call   c001ea8c <ATA::readyForCommand()>
c001ebfd:	83 c4 10             	add    esp,0x10
c001ec00:	84 c0                	test   al,al
c001ec02:	0f 84 bc 02 00 00    	je     c001eec4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ec08:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ec0e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ec14:	c1 e0 04             	shl    eax,0x4
c001ec17:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ec1e:	09 c6                	or     esi,eax
c001ec20:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec25:	75 05                	jne    c001ec2c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ec27:	83 ce a0             	or     esi,0xffffffa0
c001ec2a:	eb 03                	jmp    c001ec2f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ec2c:	83 ce e0             	or     esi,0xffffffe0
c001ec2f:	89 f0                	mov    eax,esi
c001ec31:	0f b6 f0             	movzx  esi,al
c001ec34:	56                   	push   esi
c001ec35:	6a 06                	push   0x6
c001ec37:	51                   	push   ecx
c001ec38:	52                   	push   edx
c001ec39:	e8 3c ee ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	6a 00                	push   0x0
c001ec43:	6a 01                	push   0x1
c001ec45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec4c:	50                   	push   eax
c001ec4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec53:	e8 22 ee ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec58:	83 c4 10             	add    esp,0x10
c001ec5b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ec60:	75 6e                	jne    c001ecd0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ec62:	6a 00                	push   0x0
c001ec64:	6a 08                	push   0x8
c001ec66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec6d:	50                   	push   eax
c001ec6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec74:	e8 01 ee ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec79:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ec7e:	50                   	push   eax
c001ec7f:	6a 09                	push   0x9
c001ec81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec88:	50                   	push   eax
c001ec89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec8f:	e8 e6 ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec94:	83 c4 20             	add    esp,0x20
c001ec97:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ec9c:	50                   	push   eax
c001ec9d:	6a 0a                	push   0xa
c001ec9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eca6:	50                   	push   eax
c001eca7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ecad:	e8 c8 ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecb2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ecb7:	50                   	push   eax
c001ecb8:	6a 0b                	push   0xb
c001ecba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecc1:	50                   	push   eax
c001ecc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ecc8:	e8 ad ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eccd:	83 c4 20             	add    esp,0x20
c001ecd0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ecd5:	50                   	push   eax
c001ecd6:	6a 02                	push   0x2
c001ecd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecdf:	50                   	push   eax
c001ece0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ece6:	e8 8f ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eceb:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ecf0:	50                   	push   eax
c001ecf1:	6a 03                	push   0x3
c001ecf3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecfa:	50                   	push   eax
c001ecfb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed01:	e8 74 ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed06:	83 c4 20             	add    esp,0x20
c001ed09:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ed0e:	50                   	push   eax
c001ed0f:	6a 04                	push   0x4
c001ed11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed18:	50                   	push   eax
c001ed19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed1f:	e8 56 ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed24:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ed29:	50                   	push   eax
c001ed2a:	6a 05                	push   0x5
c001ed2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed33:	50                   	push   eax
c001ed34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed3a:	e8 3b ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed3f:	83 c4 20             	add    esp,0x20
c001ed42:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ed47:	0f 94 c0             	sete   al
c001ed4a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ed4f:	74 09                	je     c001ed5a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001ed51:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001ed58:	eb 07                	jmp    c001ed61 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001ed5a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001ed61:	0f b6 c0             	movzx  eax,al
c001ed64:	50                   	push   eax
c001ed65:	6a 07                	push   0x7
c001ed67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed6e:	50                   	push   eax
c001ed6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed75:	e8 00 ed ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed7a:	c7 04 24 61 52 02 c0 	mov    DWORD PTR [esp],0xc0025261
c001ed81:	e8 5f d9 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001ed86:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ed8a:	83 c4 10             	add    esp,0x10
c001ed8d:	85 f6                	test   esi,esi
c001ed8f:	0f 84 f7 00 00 00    	je     c001ee8c <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001ed95:	83 ec 0c             	sub    esp,0xc
c001ed98:	68 64 52 02 c0       	push   0xc0025264
c001ed9d:	e8 43 d9 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001eda2:	83 c4 0c             	add    esp,0xc
c001eda5:	6a 01                	push   0x1
c001eda7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edae:	50                   	push   eax
c001edaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edb5:	e8 74 f7 ff ff       	call   c001e52e <IDE::polling(unsigned char, unsigned int)>
c001edba:	c7 04 24 67 52 02 c0 	mov    DWORD PTR [esp],0xc0025267
c001edc1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001edc5:	e8 1b d9 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001edca:	83 c4 10             	add    esp,0x10
c001edcd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001edd1:	84 c0                	test   al,al
c001edd3:	74 2b                	je     c001ee00 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001edd5:	0f b6 f8             	movzx  edi,al
c001edd8:	57                   	push   edi
c001edd9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ede0:	50                   	push   eax
c001ede1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ede8:	50                   	push   eax
c001ede9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edef:	e8 8a f6 ff ff       	call   c001e47e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001edf4:	c7 04 24 6a 52 02 c0 	mov    DWORD PTR [esp],0xc002526a
c001edfb:	e9 bc 00 00 00       	jmp    c001eebc <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001ee00:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ee05:	74 50                	je     c001ee57 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001ee07:	83 ec 0c             	sub    esp,0xc
c001ee0a:	31 ed                	xor    ebp,ebp
c001ee0c:	68 75 52 02 c0       	push   0xc0025275
c001ee11:	e8 cf d8 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001ee16:	83 c4 10             	add    esp,0x10
c001ee19:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ee1d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001ee21:	50                   	push   eax
c001ee22:	50                   	push   eax
c001ee23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee2a:	50                   	push   eax
c001ee2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee31:	e8 32 ec ff ff       	call   c001da68 <IDE::getBase(unsigned char)>
c001ee36:	89 c2                	mov    edx,eax
c001ee38:	89 f8                	mov    eax,edi
c001ee3a:	66 ef                	out    dx,ax
c001ee3c:	45                   	inc    ebp
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001ee46:	75 d1                	jne    c001ee19 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001ee48:	83 ec 0c             	sub    esp,0xc
c001ee4b:	68 78 52 02 c0       	push   0xc0025278
c001ee50:	e8 90 d8 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001ee55:	eb 24                	jmp    c001ee7b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001ee57:	51                   	push   ecx
c001ee58:	51                   	push   ecx
c001ee59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee60:	50                   	push   eax
c001ee61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee67:	e8 fc eb ff ff       	call   c001da68 <IDE::getBase(unsigned char)>
c001ee6c:	b9 00 01 00 00       	mov    ecx,0x100
c001ee71:	89 c2                	mov    edx,eax
c001ee73:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ee77:	fc                   	cld    
c001ee78:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ee7b:	83 c4 10             	add    esp,0x10
c001ee7e:	4e                   	dec    esi
c001ee7f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ee87:	e9 01 ff ff ff       	jmp    c001ed8d <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ee8c:	31 ff                	xor    edi,edi
c001ee8e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ee93:	74 2f                	je     c001eec4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ee95:	83 ec 0c             	sub    esp,0xc
c001ee98:	68 7b 52 02 c0       	push   0xc002527b
c001ee9d:	e8 43 d8 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001eea2:	58                   	pop    eax
c001eea3:	31 c0                	xor    eax,eax
c001eea5:	5a                   	pop    edx
c001eea6:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001eeab:	0f 94 c0             	sete   al
c001eeae:	50                   	push   eax
c001eeaf:	53                   	push   ebx
c001eeb0:	e8 8d fb ff ff       	call   c001ea42 <ATA::flush(bool)>
c001eeb5:	c7 04 24 7e 52 02 c0 	mov    DWORD PTR [esp],0xc002527e
c001eebc:	e8 24 d8 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001eec1:	83 c4 10             	add    esp,0x10
c001eec4:	83 c4 2c             	add    esp,0x2c
c001eec7:	89 f8                	mov    eax,edi
c001eec9:	5b                   	pop    ebx
c001eeca:	5e                   	pop    esi
c001eecb:	5f                   	pop    edi
c001eecc:	5d                   	pop    ebp
c001eecd:	c3                   	ret    

c001eece <ATA::read(unsigned long long, int, void*)>:
c001eece:	57                   	push   edi
c001eecf:	b8 04 00 00 00       	mov    eax,0x4
c001eed4:	56                   	push   esi
c001eed5:	53                   	push   ebx
c001eed6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eeda:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eede:	8d 7a ff             	lea    edi,[edx-0x1]
c001eee1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eee5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001eee9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001eeef:	77 25                	ja     c001ef16 <ATA::read(unsigned long long, int, void*)+0x48>
c001eef1:	b8 06 00 00 00       	mov    eax,0x6
c001eef6:	85 f6                	test   esi,esi
c001eef8:	74 1c                	je     c001ef16 <ATA::read(unsigned long long, int, void*)+0x48>
c001eefa:	50                   	push   eax
c001eefb:	50                   	push   eax
c001eefc:	6a 00                	push   0x0
c001eefe:	56                   	push   esi
c001eeff:	52                   	push   edx
c001ef00:	53                   	push   ebx
c001ef01:	51                   	push   ecx
c001ef02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ef06:	e8 cd fb ff ff       	call   c001ead8 <ATA::access(unsigned long long, int, void*, bool)>
c001ef0b:	83 c4 20             	add    esp,0x20
c001ef0e:	85 c0                	test   eax,eax
c001ef10:	0f 95 c0             	setne  al
c001ef13:	0f b6 c0             	movzx  eax,al
c001ef16:	5b                   	pop    ebx
c001ef17:	5e                   	pop    esi
c001ef18:	5f                   	pop    edi
c001ef19:	c3                   	ret    

c001ef1a <ATA::write(unsigned long long, int, void*)>:
c001ef1a:	55                   	push   ebp
c001ef1b:	57                   	push   edi
c001ef1c:	56                   	push   esi
c001ef1d:	53                   	push   ebx
c001ef1e:	83 ec 18             	sub    esp,0x18
c001ef21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ef25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ef29:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ef2d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ef31:	68 81 52 02 c0       	push   0xc0025281
c001ef36:	e8 aa d7 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001ef3b:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ef3e:	83 c4 10             	add    esp,0x10
c001ef41:	b8 04 00 00 00       	mov    eax,0x4
c001ef46:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ef4c:	77 25                	ja     c001ef73 <ATA::write(unsigned long long, int, void*)+0x59>
c001ef4e:	b8 06 00 00 00       	mov    eax,0x6
c001ef53:	85 f6                	test   esi,esi
c001ef55:	74 1c                	je     c001ef73 <ATA::write(unsigned long long, int, void*)+0x59>
c001ef57:	50                   	push   eax
c001ef58:	50                   	push   eax
c001ef59:	6a 01                	push   0x1
c001ef5b:	56                   	push   esi
c001ef5c:	53                   	push   ebx
c001ef5d:	55                   	push   ebp
c001ef5e:	57                   	push   edi
c001ef5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ef63:	e8 70 fb ff ff       	call   c001ead8 <ATA::access(unsigned long long, int, void*, bool)>
c001ef68:	83 c4 20             	add    esp,0x20
c001ef6b:	85 c0                	test   eax,eax
c001ef6d:	0f 95 c0             	setne  al
c001ef70:	0f b6 c0             	movzx  eax,al
c001ef73:	83 c4 0c             	add    esp,0xc
c001ef76:	5b                   	pop    ebx
c001ef77:	5e                   	pop    esi
c001ef78:	5f                   	pop    edi
c001ef79:	5d                   	pop    ebp
c001ef7a:	c3                   	ret    
c001ef7b:	90                   	nop

c001ef7c <ATA::detectCHS()>:
c001ef7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ef80:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ef86:	c1 e0 06             	shl    eax,0x6
c001ef89:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ef8f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ef99:	c7 44 24 04 8d 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc002528d
c001efa1:	e9 a9 3a ff ff       	jmp    c0012a4f <Krnl::panic(char const*)>

c001efa6 <ATA::open(int, int, void*)>:
c001efa6:	53                   	push   ebx
c001efa7:	83 ec 08             	sub    esp,0x8
c001efaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001efae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001efb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efb6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001efbc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001efc2:	c1 e0 06             	shl    eax,0x6
c001efc5:	01 d0                	add    eax,edx
c001efc7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001efce:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001efd4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001efdb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001efe5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001efeb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eff2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eff9:	75 0c                	jne    c001f007 <ATA::open(int, int, void*)+0x61>
c001effb:	83 ec 0c             	sub    esp,0xc
c001effe:	53                   	push   ebx
c001efff:	e8 78 ff ff ff       	call   c001ef7c <ATA::detectCHS()>
c001f004:	83 c4 10             	add    esp,0x10
c001f007:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f00d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f013:	c1 e0 06             	shl    eax,0x6
c001f016:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f01d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f027:	d1 e8                	shr    eax,1
c001f029:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f02f:	6a 04                	push   0x4
c001f031:	6a 0c                	push   0xc
c001f033:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f03a:	50                   	push   eax
c001f03b:	52                   	push   edx
c001f03c:	e8 39 ea ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f041:	90                   	nop
c001f042:	90                   	nop
c001f043:	6a 00                	push   0x0
c001f045:	6a 0c                	push   0xc
c001f047:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f04e:	50                   	push   eax
c001f04f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f055:	e8 20 ea ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f05a:	83 c4 14             	add    esp,0x14
c001f05d:	53                   	push   ebx
c001f05e:	e8 9f ef fe ff       	call   c000e002 <PhysicalDisk::startCache()>
c001f063:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f066:	e8 2b 00 ff ff       	call   c000f096 <createPartitionsForDisk(PhysicalDisk*)>
c001f06b:	31 c0                	xor    eax,eax
c001f06d:	83 c4 18             	add    esp,0x18
c001f070:	5b                   	pop    ebx
c001f071:	c3                   	ret    

c001f072 <ATAPI::write(unsigned long long, int, void*)>:
c001f072:	b8 03 00 00 00       	mov    eax,0x3
c001f077:	c3                   	ret    

c001f078 <ATAPI::close(int, int, void*)>:
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f085:	85 c0                	test   eax,eax
c001f087:	74 0c                	je     c001f095 <ATAPI::close(int, int, void*)+0x1d>
c001f089:	83 ec 0c             	sub    esp,0xc
c001f08c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f08e:	50                   	push   eax
c001f08f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f092:	83 c4 10             	add    esp,0x10
c001f095:	31 c0                	xor    eax,eax
c001f097:	83 c4 0c             	add    esp,0xc
c001f09a:	c3                   	ret    
c001f09b:	90                   	nop

c001f09c <ATAPI::ATAPI()>:
c001f09c:	83 ec 0c             	sub    esp,0xc
c001f09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a3:	83 ec 04             	sub    esp,0x4
c001f0a6:	68 00 08 00 00       	push   0x800
c001f0ab:	68 8d 55 02 c0       	push   0xc002558d
c001f0b0:	50                   	push   eax
c001f0b1:	e8 e4 ee fe ff       	call   c000df9a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f0b6:	83 c4 10             	add    esp,0x10
c001f0b9:	ba 20 53 02 c0       	mov    edx,0xc0025320
c001f0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c2:	89 10                	mov    DWORD PTR [eax],edx
c001f0c4:	90                   	nop
c001f0c5:	83 c4 0c             	add    esp,0xc
c001f0c8:	c3                   	ret    
c001f0c9:	90                   	nop

c001f0ca <ATAPI::readyForCommand()>:
c001f0ca:	56                   	push   esi
c001f0cb:	53                   	push   ebx
c001f0cc:	53                   	push   ebx
c001f0cd:	31 db                	xor    ebx,ebx
c001f0cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f0d3:	51                   	push   ecx
c001f0d4:	6a 0c                	push   0xc
c001f0d6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f0dd:	50                   	push   eax
c001f0de:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f0e4:	e8 51 ea ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	a8 88                	test   al,0x88
c001f0ee:	74 25                	je     c001f115 <ATAPI::readyForCommand()+0x4b>
c001f0f0:	43                   	inc    ebx
c001f0f1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f0f7:	7e da                	jle    c001f0d3 <ATAPI::readyForCommand()+0x9>
c001f0f9:	83 ec 0c             	sub    esp,0xc
c001f0fc:	68 5e 01 00 00       	push   0x15e
c001f101:	e8 76 71 ff ff       	call   c001627c <milliTenthSleep(unsigned int)>
c001f106:	83 c4 10             	add    esp,0x10
c001f109:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f10f:	75 c2                	jne    c001f0d3 <ATAPI::readyForCommand()+0x9>
c001f111:	31 c0                	xor    eax,eax
c001f113:	eb 02                	jmp    c001f117 <ATAPI::readyForCommand()+0x4d>
c001f115:	b0 01                	mov    al,0x1
c001f117:	5a                   	pop    edx
c001f118:	5b                   	pop    ebx
c001f119:	5e                   	pop    esi
c001f11a:	c3                   	ret    
c001f11b:	90                   	nop

c001f11c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f11c:	55                   	push   ebp
c001f11d:	57                   	push   edi
c001f11e:	56                   	push   esi
c001f11f:	53                   	push   ebx
c001f120:	83 ec 20             	sub    esp,0x20
c001f123:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f127:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f12b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f12f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f133:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f137:	6a 01                	push   0x1
c001f139:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f140:	50                   	push   eax
c001f141:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f147:	e8 36 eb ff ff       	call   c001dc82 <IDE::enableIRQs(unsigned char, bool)>
c001f14c:	5e                   	pop    esi
c001f14d:	58                   	pop    eax
c001f14e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f155:	50                   	push   eax
c001f156:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f15c:	e8 f3 e8 ff ff       	call   c001da54 <IDE::prepareInterrupt(unsigned char)>
c001f161:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f164:	e8 61 ff ff ff       	call   c001f0ca <ATAPI::readyForCommand()>
c001f169:	83 c4 10             	add    esp,0x10
c001f16c:	84 c0                	test   al,al
c001f16e:	75 0a                	jne    c001f17a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f170:	bb 01 00 00 00       	mov    ebx,0x1
c001f175:	e9 57 02 00 00       	jmp    c001f3d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f17a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001f180:	c1 e0 04             	shl    eax,0x4
c001f183:	0f b6 c0             	movzx  eax,al
c001f186:	50                   	push   eax
c001f187:	6a 06                	push   0x6
c001f189:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f190:	50                   	push   eax
c001f191:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f197:	e8 de e8 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f19c:	6a 00                	push   0x0
c001f19e:	6a 01                	push   0x1
c001f1a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1a7:	50                   	push   eax
c001f1a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1ae:	e8 c7 e8 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1b3:	83 c4 20             	add    esp,0x20
c001f1b6:	0f b6 c3             	movzx  eax,bl
c001f1b9:	0f b6 df             	movzx  ebx,bh
c001f1bc:	50                   	push   eax
c001f1bd:	6a 04                	push   0x4
c001f1bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1c6:	50                   	push   eax
c001f1c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1cd:	e8 a8 e8 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1d2:	53                   	push   ebx
c001f1d3:	6a 05                	push   0x5
c001f1d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1dc:	50                   	push   eax
c001f1dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f1e3:	e8 92 e8 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1e8:	83 c4 20             	add    esp,0x20
c001f1eb:	68 a0 00 00 00       	push   0xa0
c001f1f0:	6a 07                	push   0x7
c001f1f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f1f9:	50                   	push   eax
c001f1fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f200:	e8 75 e8 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f205:	83 c4 0c             	add    esp,0xc
c001f208:	6a 01                	push   0x1
c001f20a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f211:	50                   	push   eax
c001f212:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f218:	e8 11 f3 ff ff       	call   c001e52e <IDE::polling(unsigned char, unsigned int)>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001f226:	84 c0                	test   al,al
c001f228:	74 23                	je     c001f24d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001f22a:	0f b6 d8             	movzx  ebx,al
c001f22d:	0f b6 d2             	movzx  edx,dl
c001f230:	53                   	push   ebx
c001f231:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001f238:	50                   	push   eax
c001f239:	52                   	push   edx
c001f23a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f240:	e8 39 f2 ff ff       	call   c001e47e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f245:	83 c4 10             	add    esp,0x10
c001f248:	e9 84 01 00 00       	jmp    c001f3d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f24d:	0f b6 d2             	movzx  edx,dl
c001f250:	53                   	push   ebx
c001f251:	53                   	push   ebx
c001f252:	52                   	push   edx
c001f253:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f259:	e8 0a e8 ff ff       	call   c001da68 <IDE::getBase(unsigned char)>
c001f25e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f262:	b9 06 00 00 00       	mov    ecx,0x6
c001f267:	89 c2                	mov    edx,eax
c001f269:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f26c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f270:	83 c4 10             	add    esp,0x10
c001f273:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f279:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f280:	85 db                	test   ebx,ebx
c001f282:	0f 84 ec 00 00 00    	je     c001f374 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001f288:	51                   	push   ecx
c001f289:	51                   	push   ecx
c001f28a:	52                   	push   edx
c001f28b:	50                   	push   eax
c001f28c:	e8 57 e9 ff ff       	call   c001dbe8 <IDE::waitInterrupt(unsigned char)>
c001f291:	83 c4 10             	add    esp,0x10
c001f294:	84 c0                	test   al,al
c001f296:	0f 84 d4 fe ff ff    	je     c001f170 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f29c:	56                   	push   esi
c001f29d:	56                   	push   esi
c001f29e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2a5:	50                   	push   eax
c001f2a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2ac:	e8 a3 e7 ff ff       	call   c001da54 <IDE::prepareInterrupt(unsigned char)>
c001f2b1:	83 c4 0c             	add    esp,0xc
c001f2b4:	6a 04                	push   0x4
c001f2b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2bd:	50                   	push   eax
c001f2be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2c4:	e8 71 e8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001f2c9:	83 c4 0c             	add    esp,0xc
c001f2cc:	89 c6                	mov    esi,eax
c001f2ce:	6a 05                	push   0x5
c001f2d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2d7:	50                   	push   eax
c001f2d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2de:	e8 57 e8 ff ff       	call   c001db3a <IDE::read(unsigned char, unsigned char)>
c001f2e3:	89 f1                	mov    ecx,esi
c001f2e5:	0f b6 c0             	movzx  eax,al
c001f2e8:	0f b6 f1             	movzx  esi,cl
c001f2eb:	c1 e0 08             	shl    eax,0x8
c001f2ee:	09 c6                	or     esi,eax
c001f2f0:	d1 fe                	sar    esi,1
c001f2f2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f2f6:	83 c4 10             	add    esp,0x10
c001f2f9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001f2fe:	74 41                	je     c001f341 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001f300:	31 c9                	xor    ecx,ecx
c001f302:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f308:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f30f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f313:	75 0a                	jne    c001f31f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001f315:	01 c9                	add    ecx,ecx
c001f317:	01 cd                	add    ebp,ecx
c001f319:	4b                   	dec    ebx
c001f31a:	e9 54 ff ff ff       	jmp    c001f273 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001f31f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f324:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f328:	51                   	push   ecx
c001f329:	51                   	push   ecx
c001f32a:	52                   	push   edx
c001f32b:	50                   	push   eax
c001f32c:	e8 37 e7 ff ff       	call   c001da68 <IDE::getBase(unsigned char)>
c001f331:	89 c2                	mov    edx,eax
c001f333:	89 f0                	mov    eax,esi
c001f335:	66 ef                	out    dx,ax
c001f337:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f33b:	83 c4 10             	add    esp,0x10
c001f33e:	41                   	inc    ecx
c001f33f:	eb c1                	jmp    c001f302 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001f341:	31 f6                	xor    esi,esi
c001f343:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f349:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f350:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f354:	75 06                	jne    c001f35c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001f356:	01 f6                	add    esi,esi
c001f358:	01 f5                	add    ebp,esi
c001f35a:	eb bd                	jmp    c001f319 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001f35c:	51                   	push   ecx
c001f35d:	51                   	push   ecx
c001f35e:	52                   	push   edx
c001f35f:	50                   	push   eax
c001f360:	e8 03 e7 ff ff       	call   c001da68 <IDE::getBase(unsigned char)>
c001f365:	89 c2                	mov    edx,eax
c001f367:	66 ed                	in     ax,dx
c001f369:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f36e:	83 c4 10             	add    esp,0x10
c001f371:	46                   	inc    esi
c001f372:	eb cf                	jmp    c001f343 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001f374:	51                   	push   ecx
c001f375:	51                   	push   ecx
c001f376:	52                   	push   edx
c001f377:	50                   	push   eax
c001f378:	e8 6b e8 ff ff       	call   c001dbe8 <IDE::waitInterrupt(unsigned char)>
c001f37d:	83 c4 10             	add    esp,0x10
c001f380:	84 c0                	test   al,al
c001f382:	0f 84 e8 fd ff ff    	je     c001f170 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f388:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f38d:	52                   	push   edx
c001f38e:	52                   	push   edx
c001f38f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f396:	50                   	push   eax
c001f397:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f39d:	e8 b2 e6 ff ff       	call   c001da54 <IDE::prepareInterrupt(unsigned char)>
c001f3a2:	83 c4 10             	add    esp,0x10
c001f3a5:	50                   	push   eax
c001f3a6:	50                   	push   eax
c001f3a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f3ae:	50                   	push   eax
c001f3af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f3b5:	e8 ae e6 ff ff       	call   c001da68 <IDE::getBase(unsigned char)>
c001f3ba:	8d 50 07             	lea    edx,[eax+0x7]
c001f3bd:	ec                   	in     al,dx
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	a8 88                	test   al,0x88
c001f3c3:	74 0a                	je     c001f3cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001f3c5:	4b                   	dec    ebx
c001f3c6:	75 dd                	jne    c001f3a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001f3c8:	bb 02 00 00 00       	mov    ebx,0x2
c001f3cd:	eb 02                	jmp    c001f3d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f3cf:	31 db                	xor    ebx,ebx
c001f3d1:	83 c4 1c             	add    esp,0x1c
c001f3d4:	89 d8                	mov    eax,ebx
c001f3d6:	5b                   	pop    ebx
c001f3d7:	5e                   	pop    esi
c001f3d8:	5f                   	pop    edi
c001f3d9:	5d                   	pop    ebp
c001f3da:	c3                   	ret    
c001f3db:	90                   	nop

c001f3dc <ATAPI::diskRemoved()>:
c001f3dc:	53                   	push   ebx
c001f3dd:	83 ec 14             	sub    esp,0x14
c001f3e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f3e4:	68 d8 52 02 c0       	push   0xc00252d8
c001f3e9:	e8 f7 d2 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001f3ee:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f3f5:	c7 04 24 ee 52 02 c0 	mov    DWORD PTR [esp],0xc00252ee
c001f3fc:	e8 e4 d2 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001f401:	58                   	pop    eax
c001f402:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f408:	e8 07 fa fe ff       	call   c000ee14 <LogicalDisk::unmount()>
c001f40d:	c7 04 24 fd 52 02 c0 	mov    DWORD PTR [esp],0xc00252fd
c001f414:	e8 cc d2 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001f419:	5a                   	pop    edx
c001f41a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f420:	e8 37 03 ff ff       	call   c000f75c <VCache::writeWriteBuffer()>
c001f425:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f42b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f42f:	83 c4 18             	add    esp,0x18
c001f432:	5b                   	pop    ebx
c001f433:	e9 14 03 ff ff       	jmp    c000f74c <VCache::invalidateReadBuffer()>

c001f438 <ATAPI::eject()>:
c001f438:	57                   	push   edi
c001f439:	b9 03 00 00 00       	mov    ecx,0x3
c001f43e:	53                   	push   ebx
c001f43f:	83 ec 14             	sub    esp,0x14
c001f442:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f446:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f44a:	fc                   	cld    
c001f44b:	31 c0                	xor    eax,eax
c001f44d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f44f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f454:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f459:	50                   	push   eax
c001f45a:	50                   	push   eax
c001f45b:	6a 00                	push   0x0
c001f45d:	6a 00                	push   0x0
c001f45f:	6a 00                	push   0x0
c001f461:	6a 02                	push   0x2
c001f463:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f467:	50                   	push   eax
c001f468:	53                   	push   ebx
c001f469:	e8 ae fc ff ff       	call   c001f11c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f46e:	83 c4 14             	add    esp,0x14
c001f471:	53                   	push   ebx
c001f472:	e8 65 ff ff ff       	call   c001f3dc <ATAPI::diskRemoved()>
c001f477:	83 c4 24             	add    esp,0x24
c001f47a:	31 c0                	xor    eax,eax
c001f47c:	5b                   	pop    ebx
c001f47d:	5f                   	pop    edi
c001f47e:	c3                   	ret    
c001f47f:	90                   	nop

c001f480 <ATAPI::diskInserted()>:
c001f480:	83 ec 18             	sub    esp,0x18
c001f483:	68 99 55 02 c0       	push   0xc0025599
c001f488:	e8 58 d2 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001f48d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f491:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f498:	83 c4 1c             	add    esp,0x1c
c001f49b:	c3                   	ret    

c001f49c <ATAPI::detectMedia()>:
c001f49c:	56                   	push   esi
c001f49d:	53                   	push   ebx
c001f49e:	83 ec 28             	sub    esp,0x28
c001f4a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f4a5:	6a 0c                	push   0xc
c001f4a7:	6a 00                	push   0x0
c001f4a9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f4ad:	56                   	push   esi
c001f4ae:	e8 f5 0f fe ff       	call   c00004a8 <memset>
c001f4b3:	58                   	pop    eax
c001f4b4:	5a                   	pop    edx
c001f4b5:	6a 00                	push   0x0
c001f4b7:	6a 00                	push   0x0
c001f4b9:	6a 00                	push   0x0
c001f4bb:	6a 00                	push   0x0
c001f4bd:	56                   	push   esi
c001f4be:	53                   	push   ebx
c001f4bf:	e8 58 fc ff ff       	call   c001f11c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f4c4:	83 c4 1c             	add    esp,0x1c
c001f4c7:	6a 0c                	push   0xc
c001f4c9:	6a 00                	push   0x0
c001f4cb:	56                   	push   esi
c001f4cc:	e8 d7 0f fe ff       	call   c00004a8 <memset>
c001f4d1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f4d6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f4db:	59                   	pop    ecx
c001f4dc:	58                   	pop    eax
c001f4dd:	6a 01                	push   0x1
c001f4df:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f4e3:	50                   	push   eax
c001f4e4:	6a 00                	push   0x0
c001f4e6:	6a 12                	push   0x12
c001f4e8:	56                   	push   esi
c001f4e9:	53                   	push   ebx
c001f4ea:	e8 2d fc ff ff       	call   c001f11c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f4ef:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f4f3:	83 c4 20             	add    esp,0x20
c001f4f6:	83 e0 7f             	and    eax,0x7f
c001f4f9:	3c 70                	cmp    al,0x70
c001f4fb:	74 15                	je     c001f512 <ATAPI::detectMedia()+0x76>
c001f4fd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f504:	75 0c                	jne    c001f512 <ATAPI::detectMedia()+0x76>
c001f506:	83 ec 0c             	sub    esp,0xc
c001f509:	53                   	push   ebx
c001f50a:	e8 71 ff ff ff       	call   c001f480 <ATAPI::diskInserted()>
c001f50f:	83 c4 10             	add    esp,0x10
c001f512:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f516:	83 e0 0f             	and    eax,0xf
c001f519:	3c 02                	cmp    al,0x2
c001f51b:	75 1b                	jne    c001f538 <ATAPI::detectMedia()+0x9c>
c001f51d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f522:	75 2d                	jne    c001f551 <ATAPI::detectMedia()+0xb5>
c001f524:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f52b:	74 24                	je     c001f551 <ATAPI::detectMedia()+0xb5>
c001f52d:	83 ec 0c             	sub    esp,0xc
c001f530:	53                   	push   ebx
c001f531:	e8 a6 fe ff ff       	call   c001f3dc <ATAPI::diskRemoved()>
c001f536:	eb 16                	jmp    c001f54e <ATAPI::detectMedia()+0xb2>
c001f538:	84 c0                	test   al,al
c001f53a:	75 15                	jne    c001f551 <ATAPI::detectMedia()+0xb5>
c001f53c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f543:	75 0c                	jne    c001f551 <ATAPI::detectMedia()+0xb5>
c001f545:	83 ec 0c             	sub    esp,0xc
c001f548:	53                   	push   ebx
c001f549:	e8 32 ff ff ff       	call   c001f480 <ATAPI::diskInserted()>
c001f54e:	83 c4 10             	add    esp,0x10
c001f551:	83 c4 24             	add    esp,0x24
c001f554:	5b                   	pop    ebx
c001f555:	5e                   	pop    esi
c001f556:	c3                   	ret    
c001f557:	90                   	nop

c001f558 <ATAPI::open(int, int, void*)>:
c001f558:	56                   	push   esi
c001f559:	53                   	push   ebx
c001f55a:	50                   	push   eax
c001f55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f55f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f563:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f567:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f56d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f573:	c1 e0 06             	shl    eax,0x6
c001f576:	01 d0                	add    eax,edx
c001f578:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f57f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f585:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f58c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f596:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f59c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f5a3:	6a 04                	push   0x4
c001f5a5:	6a 0c                	push   0xc
c001f5a7:	51                   	push   ecx
c001f5a8:	52                   	push   edx
c001f5a9:	e8 cc e4 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5ae:	90                   	nop
c001f5af:	90                   	nop
c001f5b0:	6a 00                	push   0x0
c001f5b2:	6a 0c                	push   0xc
c001f5b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5bb:	50                   	push   eax
c001f5bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5c2:	e8 b3 e4 ff ff       	call   c001da7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c7:	83 c4 14             	add    esp,0x14
c001f5ca:	68 74 01 00 00       	push   0x174
c001f5cf:	e8 c3 a1 fe ff       	call   c0009797 <malloc>
c001f5d4:	83 c4 0c             	add    esp,0xc
c001f5d7:	89 c6                	mov    esi,eax
c001f5d9:	6a 00                	push   0x0
c001f5db:	68 ff ff ff 7f       	push   0x7fffffff
c001f5e0:	6a 00                	push   0x0
c001f5e2:	6a 00                	push   0x0
c001f5e4:	53                   	push   ebx
c001f5e5:	68 76 56 02 c0       	push   0xc0025676
c001f5ea:	50                   	push   eax
c001f5eb:	e8 30 f6 fe ff       	call   c000ec20 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f5f0:	83 c4 14             	add    esp,0x14
c001f5f3:	56                   	push   esi
c001f5f4:	e8 dd f6 fe ff       	call   c000ecd6 <LogicalDisk::assignDriveLetter()>
c001f5f9:	5a                   	pop    edx
c001f5fa:	0f be c0             	movsx  eax,al
c001f5fd:	59                   	pop    ecx
c001f5fe:	50                   	push   eax
c001f5ff:	68 0b 53 02 c0       	push   0xc002530b
c001f604:	e8 dc d0 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001f609:	58                   	pop    eax
c001f60a:	5a                   	pop    edx
c001f60b:	56                   	push   esi
c001f60c:	53                   	push   ebx
c001f60d:	e8 50 e5 fe ff       	call   c000db62 <Device::addChild(Device*)>
c001f612:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f618:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f61b:	e8 e2 e9 fe ff       	call   c000e002 <PhysicalDisk::startCache()>
c001f620:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f627:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f62a:	e8 6d fe ff ff       	call   c001f49c <ATAPI::detectMedia()>
c001f62f:	83 c4 14             	add    esp,0x14
c001f632:	31 c0                	xor    eax,eax
c001f634:	5b                   	pop    ebx
c001f635:	5e                   	pop    esi
c001f636:	c3                   	ret    
c001f637:	90                   	nop

c001f638 <ATAPI::read(unsigned long long, int, void*)>:
c001f638:	55                   	push   ebp
c001f639:	57                   	push   edi
c001f63a:	56                   	push   esi
c001f63b:	53                   	push   ebx
c001f63c:	83 ec 1c             	sub    esp,0x1c
c001f63f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f643:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f647:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f64b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f652:	74 41                	je     c001f695 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f654:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f658:	b9 03 00 00 00       	mov    ecx,0x3
c001f65d:	fc                   	cld    
c001f65e:	31 c0                	xor    eax,eax
c001f660:	86 fb                	xchg   bl,bh
c001f662:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f664:	c1 c3 10             	rol    ebx,0x10
c001f667:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f66c:	89 e8                	mov    eax,ebp
c001f66e:	86 fb                	xchg   bl,bh
c001f670:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f674:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f678:	50                   	push   eax
c001f679:	50                   	push   eax
c001f67a:	55                   	push   ebp
c001f67b:	c1 e5 0b             	shl    ebp,0xb
c001f67e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f682:	6a 00                	push   0x0
c001f684:	55                   	push   ebp
c001f685:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f689:	50                   	push   eax
c001f68a:	56                   	push   esi
c001f68b:	e8 8c fa ff ff       	call   c001f11c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f690:	83 c4 20             	add    esp,0x20
c001f693:	eb 1a                	jmp    c001f6af <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f695:	83 ec 0c             	sub    esp,0xc
c001f698:	56                   	push   esi
c001f699:	e8 fe fd ff ff       	call   c001f49c <ATAPI::detectMedia()>
c001f69e:	83 c4 10             	add    esp,0x10
c001f6a1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f6a8:	75 aa                	jne    c001f654 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f6aa:	b8 02 00 00 00       	mov    eax,0x2
c001f6af:	83 c4 1c             	add    esp,0x1c
c001f6b2:	5b                   	pop    ebx
c001f6b3:	5e                   	pop    esi
c001f6b4:	5f                   	pop    edi
c001f6b5:	5d                   	pop    ebp
c001f6b6:	c3                   	ret    
c001f6b7:	90                   	nop

c001f6b8 <SATA::close(int, int, void*)>:
c001f6b8:	83 ec 0c             	sub    esp,0xc
c001f6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f6c5:	85 c0                	test   eax,eax
c001f6c7:	74 0c                	je     c001f6d5 <SATA::close(int, int, void*)+0x1d>
c001f6c9:	83 ec 0c             	sub    esp,0xc
c001f6cc:	8b 10                	mov    edx,DWORD PTR [eax]
c001f6ce:	50                   	push   eax
c001f6cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f6d2:	83 c4 10             	add    esp,0x10
c001f6d5:	31 c0                	xor    eax,eax
c001f6d7:	83 c4 0c             	add    esp,0xc
c001f6da:	c3                   	ret    
c001f6db:	90                   	nop

c001f6dc <SATA::powerSaving(PowerSavingLevel)>:
c001f6dc:	c3                   	ret    
c001f6dd:	90                   	nop

c001f6de <SATA::open(int, int, void*)>:
c001f6de:	56                   	push   esi
c001f6df:	53                   	push   ebx
c001f6e0:	51                   	push   ecx
c001f6e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6e5:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f6ec:	74 2d                	je     c001f71b <SATA::open(int, int, void*)+0x3d>
c001f6ee:	83 ec 0c             	sub    esp,0xc
c001f6f1:	68 50 53 02 c0       	push   0xc0025350
c001f6f6:	e8 f6 a0 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f6fb:	83 c4 10             	add    esp,0x10
c001f6fe:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f705:	75 14                	jne    c001f71b <SATA::open(int, int, void*)+0x3d>
c001f707:	e4 60                	in     al,0x60
c001f709:	3c 5a                	cmp    al,0x5a
c001f70b:	74 04                	je     c001f711 <SATA::open(int, int, void*)+0x33>
c001f70d:	3c 1c                	cmp    al,0x1c
c001f70f:	75 f6                	jne    c001f707 <SATA::open(int, int, void*)+0x29>
c001f711:	e4 60                	in     al,0x60
c001f713:	3c 5a                	cmp    al,0x5a
c001f715:	74 fa                	je     c001f711 <SATA::open(int, int, void*)+0x33>
c001f717:	3c 1c                	cmp    al,0x1c
c001f719:	74 f6                	je     c001f711 <SATA::open(int, int, void*)+0x33>
c001f71b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f71f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f729:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f72f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f73d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f747:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f74d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f754:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f75b:	74 2d                	je     c001f78a <SATA::open(int, int, void*)+0xac>
c001f75d:	83 ec 0c             	sub    esp,0xc
c001f760:	68 5d 53 02 c0       	push   0xc002535d
c001f765:	e8 87 a0 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f76a:	83 c4 10             	add    esp,0x10
c001f76d:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f774:	75 14                	jne    c001f78a <SATA::open(int, int, void*)+0xac>
c001f776:	e4 60                	in     al,0x60
c001f778:	3c 1c                	cmp    al,0x1c
c001f77a:	74 04                	je     c001f780 <SATA::open(int, int, void*)+0xa2>
c001f77c:	3c 5a                	cmp    al,0x5a
c001f77e:	75 f6                	jne    c001f776 <SATA::open(int, int, void*)+0x98>
c001f780:	e4 60                	in     al,0x60
c001f782:	3c 5a                	cmp    al,0x5a
c001f784:	74 fa                	je     c001f780 <SATA::open(int, int, void*)+0xa2>
c001f786:	3c 1c                	cmp    al,0x1c
c001f788:	74 f6                	je     c001f780 <SATA::open(int, int, void*)+0xa2>
c001f78a:	e8 47 a4 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c001f78f:	89 c6                	mov    esi,eax
c001f791:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f797:	81 c6 00 10 00 00    	add    esi,0x1000
c001f79d:	e8 34 a4 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c001f7a2:	39 c6                	cmp    esi,eax
c001f7a4:	74 10                	je     c001f7b6 <SATA::open(int, int, void*)+0xd8>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	68 6a 53 02 c0       	push   0xc002536a
c001f7ae:	e8 9c 32 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001f7b3:	83 c4 10             	add    esp,0x10
c001f7b6:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f7bd:	74 2d                	je     c001f7ec <SATA::open(int, int, void*)+0x10e>
c001f7bf:	83 ec 0c             	sub    esp,0xc
c001f7c2:	68 7e 53 02 c0       	push   0xc002537e
c001f7c7:	e8 25 a0 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f7cc:	83 c4 10             	add    esp,0x10
c001f7cf:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f7d6:	75 14                	jne    c001f7ec <SATA::open(int, int, void*)+0x10e>
c001f7d8:	e4 60                	in     al,0x60
c001f7da:	3c 1c                	cmp    al,0x1c
c001f7dc:	74 04                	je     c001f7e2 <SATA::open(int, int, void*)+0x104>
c001f7de:	3c 5a                	cmp    al,0x5a
c001f7e0:	75 f6                	jne    c001f7d8 <SATA::open(int, int, void*)+0xfa>
c001f7e2:	e4 60                	in     al,0x60
c001f7e4:	3c 5a                	cmp    al,0x5a
c001f7e6:	74 fa                	je     c001f7e2 <SATA::open(int, int, void*)+0x104>
c001f7e8:	3c 1c                	cmp    al,0x1c
c001f7ea:	74 f6                	je     c001f7e2 <SATA::open(int, int, void*)+0x104>
c001f7ec:	83 ec 0c             	sub    esp,0xc
c001f7ef:	6a 02                	push   0x2
c001f7f1:	e8 93 bb fe ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c001f7f6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f7fc:	6a 03                	push   0x3
c001f7fe:	50                   	push   eax
c001f7ff:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f805:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c001f80b:	e8 e4 c1 fe ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f810:	83 c4 20             	add    esp,0x20
c001f813:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f81a:	74 2d                	je     c001f849 <SATA::open(int, int, void*)+0x16b>
c001f81c:	83 ec 0c             	sub    esp,0xc
c001f81f:	68 8b 53 02 c0       	push   0xc002538b
c001f824:	e8 c8 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f829:	83 c4 10             	add    esp,0x10
c001f82c:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f833:	75 14                	jne    c001f849 <SATA::open(int, int, void*)+0x16b>
c001f835:	e4 60                	in     al,0x60
c001f837:	3c 1c                	cmp    al,0x1c
c001f839:	74 04                	je     c001f83f <SATA::open(int, int, void*)+0x161>
c001f83b:	3c 5a                	cmp    al,0x5a
c001f83d:	75 f6                	jne    c001f835 <SATA::open(int, int, void*)+0x157>
c001f83f:	e4 60                	in     al,0x60
c001f841:	3c 5a                	cmp    al,0x5a
c001f843:	74 fa                	je     c001f83f <SATA::open(int, int, void*)+0x161>
c001f845:	3c 1c                	cmp    al,0x1c
c001f847:	74 f6                	je     c001f83f <SATA::open(int, int, void*)+0x161>
c001f849:	83 ec 0c             	sub    esp,0xc
c001f84c:	53                   	push   ebx
c001f84d:	e8 b0 e7 fe ff       	call   c000e002 <PhysicalDisk::startCache()>
c001f852:	83 c4 10             	add    esp,0x10
c001f855:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f85c:	74 2d                	je     c001f88b <SATA::open(int, int, void*)+0x1ad>
c001f85e:	83 ec 0c             	sub    esp,0xc
c001f861:	68 98 53 02 c0       	push   0xc0025398
c001f866:	e8 86 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f86b:	83 c4 10             	add    esp,0x10
c001f86e:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f875:	75 14                	jne    c001f88b <SATA::open(int, int, void*)+0x1ad>
c001f877:	e4 60                	in     al,0x60
c001f879:	3c 1c                	cmp    al,0x1c
c001f87b:	74 04                	je     c001f881 <SATA::open(int, int, void*)+0x1a3>
c001f87d:	3c 5a                	cmp    al,0x5a
c001f87f:	75 f6                	jne    c001f877 <SATA::open(int, int, void*)+0x199>
c001f881:	e4 60                	in     al,0x60
c001f883:	3c 5a                	cmp    al,0x5a
c001f885:	74 fa                	je     c001f881 <SATA::open(int, int, void*)+0x1a3>
c001f887:	3c 1c                	cmp    al,0x1c
c001f889:	74 f6                	je     c001f881 <SATA::open(int, int, void*)+0x1a3>
c001f88b:	83 ec 0c             	sub    esp,0xc
c001f88e:	53                   	push   ebx
c001f88f:	e8 02 f8 fe ff       	call   c000f096 <createPartitionsForDisk(PhysicalDisk*)>
c001f894:	83 c4 10             	add    esp,0x10
c001f897:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f89e:	74 2d                	je     c001f8cd <SATA::open(int, int, void*)+0x1ef>
c001f8a0:	83 ec 0c             	sub    esp,0xc
c001f8a3:	68 a5 53 02 c0       	push   0xc00253a5
c001f8a8:	e8 44 9f fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f8ad:	83 c4 10             	add    esp,0x10
c001f8b0:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f8b7:	75 14                	jne    c001f8cd <SATA::open(int, int, void*)+0x1ef>
c001f8b9:	e4 60                	in     al,0x60
c001f8bb:	3c 1c                	cmp    al,0x1c
c001f8bd:	74 04                	je     c001f8c3 <SATA::open(int, int, void*)+0x1e5>
c001f8bf:	3c 5a                	cmp    al,0x5a
c001f8c1:	75 f6                	jne    c001f8b9 <SATA::open(int, int, void*)+0x1db>
c001f8c3:	e4 60                	in     al,0x60
c001f8c5:	3c 5a                	cmp    al,0x5a
c001f8c7:	74 fa                	je     c001f8c3 <SATA::open(int, int, void*)+0x1e5>
c001f8c9:	3c 1c                	cmp    al,0x1c
c001f8cb:	74 f6                	je     c001f8c3 <SATA::open(int, int, void*)+0x1e5>
c001f8cd:	5a                   	pop    edx
c001f8ce:	31 c0                	xor    eax,eax
c001f8d0:	5b                   	pop    ebx
c001f8d1:	5e                   	pop    esi
c001f8d2:	c3                   	ret    
c001f8d3:	90                   	nop

c001f8d4 <SATA::SATA()>:
c001f8d4:	83 ec 0c             	sub    esp,0xc
c001f8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8db:	83 ec 04             	sub    esp,0x4
c001f8de:	68 00 02 00 00       	push   0x200
c001f8e3:	68 b2 53 02 c0       	push   0xc00253b2
c001f8e8:	50                   	push   eax
c001f8e9:	e8 ac e6 fe ff       	call   c000df9a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f8ee:	83 c4 10             	add    esp,0x10
c001f8f1:	ba 5c 55 02 c0       	mov    edx,0xc002555c
c001f8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fa:	89 10                	mov    DWORD PTR [eax],edx
c001f8fc:	90                   	nop
c001f8fd:	83 c4 0c             	add    esp,0xc
c001f900:	c3                   	ret    
c001f901:	90                   	nop

c001f902 <SATA::access(unsigned long long, int, void*, bool)>:
c001f902:	55                   	push   ebp
c001f903:	57                   	push   edi
c001f904:	56                   	push   esi
c001f905:	53                   	push   ebx
c001f906:	83 ec 2c             	sub    esp,0x2c
c001f909:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f90d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f911:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f915:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f91c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f920:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f924:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f92c:	75 19                	jne    c001f947 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c001f92e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f933:	7e 41                	jle    c001f976 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001f935:	83 ec 0c             	sub    esp,0xc
c001f938:	68 d1 53 02 c0       	push   0xc00253d1
c001f93d:	e8 0d 31 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c001f942:	83 c4 10             	add    esp,0x10
c001f945:	eb 2f                	jmp    c001f976 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001f947:	83 ec 0c             	sub    esp,0xc
c001f94a:	68 c2 53 02 c0       	push   0xc00253c2
c001f94f:	e8 9d 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f954:	83 c4 10             	add    esp,0x10
c001f957:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f95e:	75 ce                	jne    c001f92e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001f960:	e4 60                	in     al,0x60
c001f962:	3c 1c                	cmp    al,0x1c
c001f964:	74 04                	je     c001f96a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001f966:	3c 5a                	cmp    al,0x5a
c001f968:	75 f6                	jne    c001f960 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c001f96a:	e4 60                	in     al,0x60
c001f96c:	3c 5a                	cmp    al,0x5a
c001f96e:	74 fa                	je     c001f96a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001f970:	3c 1c                	cmp    al,0x1c
c001f972:	74 f6                	je     c001f96a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001f974:	eb b8                	jmp    c001f92e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001f976:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f97d:	75 29                	jne    c001f9a8 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c001f97f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f985:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001f98b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f991:	8d 75 02             	lea    esi,[ebp+0x2]
c001f994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f998:	c1 e6 07             	shl    esi,0x7
c001f99b:	01 c6                	add    esi,eax
c001f99d:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001f9a4:	74 4a                	je     c001f9f0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001f9a6:	eb 2f                	jmp    c001f9d7 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c001f9a8:	83 ec 0c             	sub    esp,0xc
c001f9ab:	68 0a 54 02 c0       	push   0xc002540a
c001f9b0:	e8 3c 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f9b5:	83 c4 10             	add    esp,0x10
c001f9b8:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f9bf:	75 be                	jne    c001f97f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001f9c1:	e4 60                	in     al,0x60
c001f9c3:	3c 1c                	cmp    al,0x1c
c001f9c5:	74 04                	je     c001f9cb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001f9c7:	3c 5a                	cmp    al,0x5a
c001f9c9:	75 f6                	jne    c001f9c1 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c001f9cb:	e4 60                	in     al,0x60
c001f9cd:	3c 5a                	cmp    al,0x5a
c001f9cf:	74 fa                	je     c001f9cb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001f9d1:	3c 1c                	cmp    al,0x1c
c001f9d3:	74 f6                	je     c001f9cb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001f9d5:	eb a8                	jmp    c001f97f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001f9d7:	83 ec 0c             	sub    esp,0xc
c001f9da:	68 19 54 02 c0       	push   0xc0025419
c001f9df:	e8 0d 9e fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001f9e4:	83 c4 10             	add    esp,0x10
c001f9e7:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001f9ee:	74 3d                	je     c001fa2d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c001f9f0:	89 e8                	mov    eax,ebp
c001f9f2:	c1 e0 07             	shl    eax,0x7
c001f9f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f9f9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fa03:	52                   	push   edx
c001fa04:	52                   	push   edx
c001fa05:	56                   	push   esi
c001fa06:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001fa0c:	e8 fd eb ff ff       	call   c001e60e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001fa11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fa15:	83 c4 10             	add    esp,0x10
c001fa18:	b8 01 00 00 00       	mov    eax,0x1
c001fa1d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001fa22:	75 1d                	jne    c001fa41 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c001fa24:	e9 c8 04 00 00       	jmp    c001fef1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001fa29:	3c 5a                	cmp    al,0x5a
c001fa2b:	74 0c                	je     c001fa39 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fa2d:	e4 60                	in     al,0x60
c001fa2f:	3c 1c                	cmp    al,0x1c
c001fa31:	75 f6                	jne    c001fa29 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c001fa33:	eb 04                	jmp    c001fa39 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fa35:	3c 1c                	cmp    al,0x1c
c001fa37:	75 b7                	jne    c001f9f0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fa39:	e4 60                	in     al,0x60
c001fa3b:	3c 5a                	cmp    al,0x5a
c001fa3d:	74 fa                	je     c001fa39 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fa3f:	eb f4                	jmp    c001fa35 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c001fa41:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fa48:	74 3a                	je     c001fa84 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c001fa4a:	83 ec 0c             	sub    esp,0xc
c001fa4d:	68 28 54 02 c0       	push   0xc0025428
c001fa52:	e8 9a 9d fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fa57:	83 c4 10             	add    esp,0x10
c001fa5a:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fa61:	74 0d                	je     c001fa70 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c001fa63:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fa68:	74 34                	je     c001fa9e <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c001fa6a:	eb 1f                	jmp    c001fa8b <SATA::access(unsigned long long, int, void*, bool)+0x189>
c001fa6c:	3c 1c                	cmp    al,0x1c
c001fa6e:	74 0c                	je     c001fa7c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fa70:	e4 60                	in     al,0x60
c001fa72:	3c 5a                	cmp    al,0x5a
c001fa74:	75 f6                	jne    c001fa6c <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c001fa76:	eb 04                	jmp    c001fa7c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fa78:	3c 1c                	cmp    al,0x1c
c001fa7a:	75 e7                	jne    c001fa63 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c001fa7c:	e4 60                	in     al,0x60
c001fa7e:	3c 5a                	cmp    al,0x5a
c001fa80:	74 fa                	je     c001fa7c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fa82:	eb f4                	jmp    c001fa78 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c001fa84:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fa89:	74 1c                	je     c001faa7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fa8b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001fa8f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001fa95:	c1 e1 09             	shl    ecx,0x9
c001fa98:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fa9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fa9e:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001faa5:	75 55                	jne    c001fafc <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c001faa7:	8d 45 02             	lea    eax,[ebp+0x2]
c001faaa:	c1 e0 07             	shl    eax,0x7
c001faad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fab1:	8b 38                	mov    edi,DWORD PTR [eax]
c001fab3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fab9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001fabf:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001fac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac9:	c1 e0 05             	shl    eax,0x5
c001facc:	01 c7                	add    edi,eax
c001face:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fad2:	83 e0 01             	and    eax,0x1
c001fad5:	c1 e0 06             	shl    eax,0x6
c001fad8:	88 c2                	mov    dl,al
c001fada:	8a 07                	mov    al,BYTE PTR [edi]
c001fadc:	83 e0 bf             	and    eax,0xffffffbf
c001fadf:	09 d0                	or     eax,edx
c001fae1:	88 07                	mov    BYTE PTR [edi],al
c001fae3:	8b 07                	mov    eax,DWORD PTR [edi]
c001fae5:	25 e0 ff 00 00       	and    eax,0xffe0
c001faea:	0d 05 00 01 00       	or     eax,0x10005
c001faef:	89 07                	mov    DWORD PTR [edi],eax
c001faf1:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001faf8:	74 4d                	je     c001fb47 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fafa:	eb 32                	jmp    c001fb2e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	68 37 54 02 c0       	push   0xc0025437
c001fb04:	e8 e8 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fb09:	83 c4 10             	add    esp,0x10
c001fb0c:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fb13:	75 92                	jne    c001faa7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fb15:	e4 60                	in     al,0x60
c001fb17:	3c 1c                	cmp    al,0x1c
c001fb19:	74 04                	je     c001fb1f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fb1b:	3c 5a                	cmp    al,0x5a
c001fb1d:	75 f6                	jne    c001fb15 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c001fb1f:	e4 60                	in     al,0x60
c001fb21:	3c 5a                	cmp    al,0x5a
c001fb23:	74 fa                	je     c001fb1f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fb25:	3c 1c                	cmp    al,0x1c
c001fb27:	74 f6                	je     c001fb1f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fb29:	e9 79 ff ff ff       	jmp    c001faa7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fb2e:	83 ec 0c             	sub    esp,0xc
c001fb31:	68 46 54 02 c0       	push   0xc0025446
c001fb36:	e8 b6 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fb3b:	83 c4 10             	add    esp,0x10
c001fb3e:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fb45:	74 3b                	je     c001fb82 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001fb47:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fb4d:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001fb53:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001fb59:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001fb5c:	50                   	push   eax
c001fb5d:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c001fb61:	83 c0 08             	add    eax,0x8
c001fb64:	c1 e0 04             	shl    eax,0x4
c001fb67:	50                   	push   eax
c001fb68:	6a 00                	push   0x0
c001fb6a:	56                   	push   esi
c001fb6b:	e8 38 09 fe ff       	call   c00004a8 <memset>
c001fb70:	83 c4 10             	add    esp,0x10
c001fb73:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fb7a:	74 33                	je     c001fbaf <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fb7c:	eb 18                	jmp    c001fb96 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c001fb7e:	3c 1c                	cmp    al,0x1c
c001fb80:	74 0c                	je     c001fb8e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fb82:	e4 60                	in     al,0x60
c001fb84:	3c 5a                	cmp    al,0x5a
c001fb86:	75 f6                	jne    c001fb7e <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001fb88:	eb 04                	jmp    c001fb8e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fb8a:	3c 1c                	cmp    al,0x1c
c001fb8c:	75 b9                	jne    c001fb47 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fb8e:	e4 60                	in     al,0x60
c001fb90:	3c 5a                	cmp    al,0x5a
c001fb92:	74 fa                	je     c001fb8e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fb94:	eb f4                	jmp    c001fb8a <SATA::access(unsigned long long, int, void*, bool)+0x288>
c001fb96:	83 ec 0c             	sub    esp,0xc
c001fb99:	68 55 54 02 c0       	push   0xc0025455
c001fb9e:	e8 4e 9c fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fba3:	83 c4 10             	add    esp,0x10
c001fba6:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fbad:	74 48                	je     c001fbf7 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c001fbaf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fbb5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001fbbb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fbbf:	c1 e0 09             	shl    eax,0x9
c001fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbc6:	48                   	dec    eax
c001fbc7:	25 ff ff 3f 00       	and    eax,0x3fffff
c001fbcc:	89 c2                	mov    edx,eax
c001fbce:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001fbd4:	25 00 00 c0 ff       	and    eax,0xffc00000
c001fbd9:	09 d0                	or     eax,edx
c001fbdb:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001fbe1:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001fbe8:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fbef:	74 33                	je     c001fc24 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fbf1:	eb 18                	jmp    c001fc0b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c001fbf3:	3c 1c                	cmp    al,0x1c
c001fbf5:	74 0c                	je     c001fc03 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fbf7:	e4 60                	in     al,0x60
c001fbf9:	3c 5a                	cmp    al,0x5a
c001fbfb:	75 f6                	jne    c001fbf3 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c001fbfd:	eb 04                	jmp    c001fc03 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fbff:	3c 1c                	cmp    al,0x1c
c001fc01:	75 ac                	jne    c001fbaf <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fc03:	e4 60                	in     al,0x60
c001fc05:	3c 5a                	cmp    al,0x5a
c001fc07:	74 fa                	je     c001fc03 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fc09:	eb f4                	jmp    c001fbff <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c001fc0b:	83 ec 0c             	sub    esp,0xc
c001fc0e:	68 64 54 02 c0       	push   0xc0025464
c001fc13:	e8 d9 9b fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fc18:	83 c4 10             	add    esp,0x10
c001fc1b:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fc22:	74 63                	je     c001fc87 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c001fc24:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc27:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001fc2b:	66 25 00 7f          	and    ax,0x7f00
c001fc2f:	66 0d 27 80          	or     ax,0x8027
c001fc33:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001fc38:	66 89 06             	mov    WORD PTR [esi],ax
c001fc3b:	19 c0                	sbb    eax,eax
c001fc3d:	83 e0 f0             	and    eax,0xfffffff0
c001fc40:	83 c0 35             	add    eax,0x35
c001fc43:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001fc46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc4a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001fc4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc52:	c1 e8 10             	shr    eax,0x10
c001fc55:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001fc58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc5c:	c1 e8 18             	shr    eax,0x18
c001fc5f:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fc66:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001fc69:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001fc6d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001fc70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc74:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001fc77:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fc7b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001fc7f:	74 33                	je     c001fcb4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fc81:	eb 18                	jmp    c001fc9b <SATA::access(unsigned long long, int, void*, bool)+0x399>
c001fc83:	3c 1c                	cmp    al,0x1c
c001fc85:	74 0c                	je     c001fc93 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fc87:	e4 60                	in     al,0x60
c001fc89:	3c 5a                	cmp    al,0x5a
c001fc8b:	75 f6                	jne    c001fc83 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c001fc8d:	eb 04                	jmp    c001fc93 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fc8f:	3c 1c                	cmp    al,0x1c
c001fc91:	75 91                	jne    c001fc24 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fc93:	e4 60                	in     al,0x60
c001fc95:	3c 5a                	cmp    al,0x5a
c001fc97:	74 fa                	je     c001fc93 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fc99:	eb f4                	jmp    c001fc8f <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c001fc9b:	83 ec 0c             	sub    esp,0xc
c001fc9e:	68 73 54 02 c0       	push   0xc0025473
c001fca3:	e8 49 9b fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fca8:	83 c4 10             	add    esp,0x10
c001fcab:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fcb2:	74 11                	je     c001fcc5 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001fcb4:	89 e8                	mov    eax,ebp
c001fcb6:	31 f6                	xor    esi,esi
c001fcb8:	c1 e0 07             	shl    eax,0x7
c001fcbb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fcbf:	eb 21                	jmp    c001fce2 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c001fcc1:	3c 1c                	cmp    al,0x1c
c001fcc3:	74 0c                	je     c001fcd1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fcc5:	e4 60                	in     al,0x60
c001fcc7:	3c 5a                	cmp    al,0x5a
c001fcc9:	75 f6                	jne    c001fcc1 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c001fccb:	eb 04                	jmp    c001fcd1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fccd:	3c 1c                	cmp    al,0x1c
c001fccf:	75 e3                	jne    c001fcb4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fcd1:	e4 60                	in     al,0x60
c001fcd3:	3c 5a                	cmp    al,0x5a
c001fcd5:	74 fa                	je     c001fcd1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fcd7:	eb f4                	jmp    c001fccd <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c001fcd9:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fcdf:	74 0c                	je     c001fced <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c001fce1:	46                   	inc    esi
c001fce2:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c001fce8:	80 e2 88             	and    dl,0x88
c001fceb:	75 ec                	jne    c001fcd9 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c001fced:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fcf4:	74 3d                	je     c001fd33 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	68 82 54 02 c0       	push   0xc0025482
c001fcfe:	e8 ee 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fd03:	8b 15 e0 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262e0
c001fd09:	83 c4 10             	add    esp,0x10
c001fd0c:	f6 c2 80             	test   dl,0x80
c001fd0f:	74 0e                	je     c001fd1f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c001fd11:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fd17:	75 2f                	jne    c001fd48 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c001fd19:	eb 20                	jmp    c001fd3b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c001fd1b:	3c 1c                	cmp    al,0x1c
c001fd1d:	74 0c                	je     c001fd2b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fd1f:	e4 60                	in     al,0x60
c001fd21:	3c 5a                	cmp    al,0x5a
c001fd23:	75 f6                	jne    c001fd1b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c001fd25:	eb 04                	jmp    c001fd2b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fd27:	3c 1c                	cmp    al,0x1c
c001fd29:	75 e6                	jne    c001fd11 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c001fd2b:	e4 60                	in     al,0x60
c001fd2d:	3c 5a                	cmp    al,0x5a
c001fd2f:	74 fa                	je     c001fd2b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fd31:	eb f4                	jmp    c001fd27 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c001fd33:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fd39:	75 13                	jne    c001fd4e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fd3b:	83 ec 0c             	sub    esp,0xc
c001fd3e:	68 92 54 02 c0       	push   0xc0025492
c001fd43:	e9 d2 00 00 00       	jmp    c001fe1a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c001fd48:	0f ba e2 0b          	bt     edx,0xb
c001fd4c:	72 25                	jb     c001fd73 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c001fd4e:	be 01 00 00 00       	mov    esi,0x1
c001fd53:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001fd57:	89 e8                	mov    eax,ebp
c001fd59:	d3 e6                	shl    esi,cl
c001fd5b:	c1 e0 07             	shl    eax,0x7
c001fd5e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fd62:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fd69:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c001fd6f:	74 4a                	je     c001fdbb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001fd71:	eb 2f                	jmp    c001fda2 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c001fd73:	83 ec 0c             	sub    esp,0xc
c001fd76:	68 a0 54 02 c0       	push   0xc00254a0
c001fd7b:	e8 71 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fd80:	83 c4 10             	add    esp,0x10
c001fd83:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fd8a:	75 c2                	jne    c001fd4e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fd8c:	e4 60                	in     al,0x60
c001fd8e:	3c 5a                	cmp    al,0x5a
c001fd90:	74 04                	je     c001fd96 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fd92:	3c 1c                	cmp    al,0x1c
c001fd94:	75 f6                	jne    c001fd8c <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c001fd96:	e4 60                	in     al,0x60
c001fd98:	3c 5a                	cmp    al,0x5a
c001fd9a:	74 fa                	je     c001fd96 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fd9c:	3c 1c                	cmp    al,0x1c
c001fd9e:	74 f6                	je     c001fd96 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fda0:	eb ac                	jmp    c001fd4e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	68 b0 54 02 c0       	push   0xc00254b0
c001fdaa:	e8 42 9a fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fdaf:	83 c4 10             	add    esp,0x10
c001fdb2:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fdb9:	74 0f                	je     c001fdca <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c001fdbb:	89 e8                	mov    eax,ebp
c001fdbd:	c1 e0 07             	shl    eax,0x7
c001fdc0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fdc4:	eb 24                	jmp    c001fdea <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c001fdc6:	3c 1c                	cmp    al,0x1c
c001fdc8:	74 0c                	je     c001fdd6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001fdca:	e4 60                	in     al,0x60
c001fdcc:	3c 5a                	cmp    al,0x5a
c001fdce:	75 f6                	jne    c001fdc6 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c001fdd0:	eb 04                	jmp    c001fdd6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001fdd2:	3c 1c                	cmp    al,0x1c
c001fdd4:	75 e5                	jne    c001fdbb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001fdd6:	e4 60                	in     al,0x60
c001fdd8:	3c 5a                	cmp    al,0x5a
c001fdda:	74 fa                	je     c001fdd6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001fddc:	eb f4                	jmp    c001fdd2 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c001fdde:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c001fde4:	0f ba e2 1e          	bt     edx,0x1e
c001fde8:	72 28                	jb     c001fe12 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c001fdea:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c001fdf0:	85 d6                	test   esi,edx
c001fdf2:	75 ea                	jne    c001fdde <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c001fdf4:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fdfb:	75 2f                	jne    c001fe2c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c001fdfd:	89 e8                	mov    eax,ebp
c001fdff:	c1 e0 07             	shl    eax,0x7
c001fe02:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fe06:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001fe0c:	0f ba e0 1e          	bt     eax,0x1e
c001fe10:	73 49                	jae    c001fe5b <SATA::access(unsigned long long, int, void*, bool)+0x559>
c001fe12:	83 ec 0c             	sub    esp,0xc
c001fe15:	68 c0 54 02 c0       	push   0xc00254c0
c001fe1a:	e8 c6 c8 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c001fe1f:	83 c4 10             	add    esp,0x10
c001fe22:	b8 01 00 00 00       	mov    eax,0x1
c001fe27:	e9 c5 00 00 00       	jmp    c001fef1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001fe2c:	83 ec 0c             	sub    esp,0xc
c001fe2f:	68 d1 54 02 c0       	push   0xc00254d1
c001fe34:	e8 b8 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fe39:	83 c4 10             	add    esp,0x10
c001fe3c:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fe43:	75 b8                	jne    c001fdfd <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001fe45:	e4 60                	in     al,0x60
c001fe47:	3c 5a                	cmp    al,0x5a
c001fe49:	74 04                	je     c001fe4f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001fe4b:	3c 1c                	cmp    al,0x1c
c001fe4d:	75 f6                	jne    c001fe45 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c001fe4f:	e4 60                	in     al,0x60
c001fe51:	3c 5a                	cmp    al,0x5a
c001fe53:	74 fa                	je     c001fe4f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001fe55:	3c 1c                	cmp    al,0x1c
c001fe57:	74 f6                	je     c001fe4f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001fe59:	eb a2                	jmp    c001fdfd <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001fe5b:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001fe62:	74 3a                	je     c001fe9e <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c001fe64:	83 ec 0c             	sub    esp,0xc
c001fe67:	68 e1 54 02 c0       	push   0xc00254e1
c001fe6c:	e8 80 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fe7b:	74 0d                	je     c001fe8a <SATA::access(unsigned long long, int, void*, bool)+0x588>
c001fe7d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fe82:	75 31                	jne    c001feb5 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c001fe84:	eb 1f                	jmp    c001fea5 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c001fe86:	3c 1c                	cmp    al,0x1c
c001fe88:	74 0c                	je     c001fe96 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001fe8a:	e4 60                	in     al,0x60
c001fe8c:	3c 5a                	cmp    al,0x5a
c001fe8e:	75 f6                	jne    c001fe86 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c001fe90:	eb 04                	jmp    c001fe96 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001fe92:	3c 1c                	cmp    al,0x1c
c001fe94:	75 e7                	jne    c001fe7d <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c001fe96:	e4 60                	in     al,0x60
c001fe98:	3c 5a                	cmp    al,0x5a
c001fe9a:	74 fa                	je     c001fe96 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001fe9c:	eb f4                	jmp    c001fe92 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c001fe9e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fea3:	75 19                	jne    c001febe <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001fea5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001feab:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001feaf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001feb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001feb5:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001febc:	75 04                	jne    c001fec2 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c001febe:	31 c0                	xor    eax,eax
c001fec0:	eb 2f                	jmp    c001fef1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001fec2:	83 ec 0c             	sub    esp,0xc
c001fec5:	68 f1 54 02 c0       	push   0xc00254f1
c001feca:	e8 22 99 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001fecf:	83 c4 10             	add    esp,0x10
c001fed2:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001fed9:	75 e3                	jne    c001febe <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001fedb:	e4 60                	in     al,0x60
c001fedd:	3c 1c                	cmp    al,0x1c
c001fedf:	74 04                	je     c001fee5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001fee1:	3c 5a                	cmp    al,0x5a
c001fee3:	75 f6                	jne    c001fedb <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c001fee5:	e4 60                	in     al,0x60
c001fee7:	3c 5a                	cmp    al,0x5a
c001fee9:	74 fa                	je     c001fee5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001feeb:	3c 1c                	cmp    al,0x1c
c001feed:	74 f6                	je     c001fee5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001feef:	eb cd                	jmp    c001febe <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001fef1:	83 c4 2c             	add    esp,0x2c
c001fef4:	5b                   	pop    ebx
c001fef5:	5e                   	pop    esi
c001fef6:	5f                   	pop    edi
c001fef7:	5d                   	pop    ebp
c001fef8:	c3                   	ret    
c001fef9:	90                   	nop

c001fefa <SATA::read(unsigned long long, int, void*)>:
c001fefa:	55                   	push   ebp
c001fefb:	57                   	push   edi
c001fefc:	56                   	push   esi
c001fefd:	53                   	push   ebx
c001fefe:	83 ec 0c             	sub    esp,0xc
c001ff01:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ff05:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ff09:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ff0d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ff11:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001ff18:	74 2d                	je     c001ff47 <SATA::read(unsigned long long, int, void*)+0x4d>
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	68 01 55 02 c0       	push   0xc0025501
c001ff22:	e8 ca 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ff27:	83 c4 10             	add    esp,0x10
c001ff2a:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001ff31:	75 14                	jne    c001ff47 <SATA::read(unsigned long long, int, void*)+0x4d>
c001ff33:	e4 60                	in     al,0x60
c001ff35:	3c 1c                	cmp    al,0x1c
c001ff37:	74 04                	je     c001ff3d <SATA::read(unsigned long long, int, void*)+0x43>
c001ff39:	3c 5a                	cmp    al,0x5a
c001ff3b:	75 f6                	jne    c001ff33 <SATA::read(unsigned long long, int, void*)+0x39>
c001ff3d:	e4 60                	in     al,0x60
c001ff3f:	3c 5a                	cmp    al,0x5a
c001ff41:	74 fa                	je     c001ff3d <SATA::read(unsigned long long, int, void*)+0x43>
c001ff43:	3c 1c                	cmp    al,0x1c
c001ff45:	74 f6                	je     c001ff3d <SATA::read(unsigned long long, int, void*)+0x43>
c001ff47:	8d 53 ff             	lea    edx,[ebx-0x1]
c001ff4a:	b8 04 00 00 00       	mov    eax,0x4
c001ff4f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001ff55:	0f 87 96 00 00 00    	ja     c001fff1 <SATA::read(unsigned long long, int, void*)+0xf7>
c001ff5b:	b8 06 00 00 00       	mov    eax,0x6
c001ff60:	85 ed                	test   ebp,ebp
c001ff62:	0f 84 89 00 00 00    	je     c001fff1 <SATA::read(unsigned long long, int, void*)+0xf7>
c001ff68:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001ff6f:	74 2d                	je     c001ff9e <SATA::read(unsigned long long, int, void*)+0xa4>
c001ff71:	83 ec 0c             	sub    esp,0xc
c001ff74:	68 0e 55 02 c0       	push   0xc002550e
c001ff79:	e8 73 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ff7e:	83 c4 10             	add    esp,0x10
c001ff81:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001ff88:	75 14                	jne    c001ff9e <SATA::read(unsigned long long, int, void*)+0xa4>
c001ff8a:	e4 60                	in     al,0x60
c001ff8c:	3c 5a                	cmp    al,0x5a
c001ff8e:	74 04                	je     c001ff94 <SATA::read(unsigned long long, int, void*)+0x9a>
c001ff90:	3c 1c                	cmp    al,0x1c
c001ff92:	75 f6                	jne    c001ff8a <SATA::read(unsigned long long, int, void*)+0x90>
c001ff94:	e4 60                	in     al,0x60
c001ff96:	3c 5a                	cmp    al,0x5a
c001ff98:	74 fa                	je     c001ff94 <SATA::read(unsigned long long, int, void*)+0x9a>
c001ff9a:	3c 1c                	cmp    al,0x1c
c001ff9c:	74 f6                	je     c001ff94 <SATA::read(unsigned long long, int, void*)+0x9a>
c001ff9e:	50                   	push   eax
c001ff9f:	50                   	push   eax
c001ffa0:	6a 00                	push   0x0
c001ffa2:	55                   	push   ebp
c001ffa3:	53                   	push   ebx
c001ffa4:	57                   	push   edi
c001ffa5:	56                   	push   esi
c001ffa6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ffaa:	e8 53 f9 ff ff       	call   c001f902 <SATA::access(unsigned long long, int, void*, bool)>
c001ffaf:	83 c4 20             	add    esp,0x20
c001ffb2:	89 c3                	mov    ebx,eax
c001ffb4:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c001ffbb:	74 2d                	je     c001ffea <SATA::read(unsigned long long, int, void*)+0xf0>
c001ffbd:	83 ec 0c             	sub    esp,0xc
c001ffc0:	68 1b 55 02 c0       	push   0xc002551b
c001ffc5:	e8 27 98 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c001ffca:	83 c4 10             	add    esp,0x10
c001ffcd:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c001ffd4:	75 14                	jne    c001ffea <SATA::read(unsigned long long, int, void*)+0xf0>
c001ffd6:	e4 60                	in     al,0x60
c001ffd8:	3c 5a                	cmp    al,0x5a
c001ffda:	74 04                	je     c001ffe0 <SATA::read(unsigned long long, int, void*)+0xe6>
c001ffdc:	3c 1c                	cmp    al,0x1c
c001ffde:	75 f6                	jne    c001ffd6 <SATA::read(unsigned long long, int, void*)+0xdc>
c001ffe0:	e4 60                	in     al,0x60
c001ffe2:	3c 5a                	cmp    al,0x5a
c001ffe4:	74 fa                	je     c001ffe0 <SATA::read(unsigned long long, int, void*)+0xe6>
c001ffe6:	3c 1c                	cmp    al,0x1c
c001ffe8:	74 f6                	je     c001ffe0 <SATA::read(unsigned long long, int, void*)+0xe6>
c001ffea:	31 c0                	xor    eax,eax
c001ffec:	85 db                	test   ebx,ebx
c001ffee:	0f 95 c0             	setne  al
c001fff1:	83 c4 0c             	add    esp,0xc
c001fff4:	5b                   	pop    ebx
c001fff5:	5e                   	pop    esi
c001fff6:	5f                   	pop    edi
c001fff7:	5d                   	pop    ebp
c001fff8:	c3                   	ret    
c001fff9:	90                   	nop

c001fffa <SATA::write(unsigned long long, int, void*)>:
c001fffa:	55                   	push   ebp
c001fffb:	57                   	push   edi
c001fffc:	56                   	push   esi
c001fffd:	53                   	push   ebx
c001fffe:	83 ec 1c             	sub    esp,0x1c
c0020001:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020005:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020009:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002000d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020011:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c0020018:	74 2d                	je     c0020047 <SATA::write(unsigned long long, int, void*)+0x4d>
c002001a:	83 ec 0c             	sub    esp,0xc
c002001d:	68 28 55 02 c0       	push   0xc0025528
c0020022:	e8 ca 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c0020027:	83 c4 10             	add    esp,0x10
c002002a:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c0020031:	75 14                	jne    c0020047 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020033:	e4 60                	in     al,0x60
c0020035:	3c 1c                	cmp    al,0x1c
c0020037:	74 04                	je     c002003d <SATA::write(unsigned long long, int, void*)+0x43>
c0020039:	3c 5a                	cmp    al,0x5a
c002003b:	75 f6                	jne    c0020033 <SATA::write(unsigned long long, int, void*)+0x39>
c002003d:	e4 60                	in     al,0x60
c002003f:	3c 5a                	cmp    al,0x5a
c0020041:	74 fa                	je     c002003d <SATA::write(unsigned long long, int, void*)+0x43>
c0020043:	3c 1c                	cmp    al,0x1c
c0020045:	74 f6                	je     c002003d <SATA::write(unsigned long long, int, void*)+0x43>
c0020047:	8d 55 ff             	lea    edx,[ebp-0x1]
c002004a:	b8 04 00 00 00       	mov    eax,0x4
c002004f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020055:	0f 87 bd 00 00 00    	ja     c0020118 <SATA::write(unsigned long long, int, void*)+0x11e>
c002005b:	b8 06 00 00 00       	mov    eax,0x6
c0020060:	85 db                	test   ebx,ebx
c0020062:	0f 84 b0 00 00 00    	je     c0020118 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020068:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c002006f:	74 2d                	je     c002009e <SATA::write(unsigned long long, int, void*)+0xa4>
c0020071:	83 ec 0c             	sub    esp,0xc
c0020074:	68 36 55 02 c0       	push   0xc0025536
c0020079:	e8 73 97 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c002007e:	83 c4 10             	add    esp,0x10
c0020081:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c0020088:	75 14                	jne    c002009e <SATA::write(unsigned long long, int, void*)+0xa4>
c002008a:	e4 60                	in     al,0x60
c002008c:	3c 1c                	cmp    al,0x1c
c002008e:	74 04                	je     c0020094 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020090:	3c 5a                	cmp    al,0x5a
c0020092:	75 f6                	jne    c002008a <SATA::write(unsigned long long, int, void*)+0x90>
c0020094:	e4 60                	in     al,0x60
c0020096:	3c 5a                	cmp    al,0x5a
c0020098:	74 fa                	je     c0020094 <SATA::write(unsigned long long, int, void*)+0x9a>
c002009a:	3c 1c                	cmp    al,0x1c
c002009c:	74 f6                	je     c0020094 <SATA::write(unsigned long long, int, void*)+0x9a>
c002009e:	c1 e5 09             	shl    ebp,0x9
c00200a1:	01 dd                	add    ebp,ebx
c00200a3:	89 f0                	mov    eax,esi
c00200a5:	89 fa                	mov    edx,edi
c00200a7:	83 c0 01             	add    eax,0x1
c00200aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00200ae:	83 d2 00             	adc    edx,0x0
c00200b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00200b5:	50                   	push   eax
c00200b6:	50                   	push   eax
c00200b7:	6a 01                	push   0x1
c00200b9:	53                   	push   ebx
c00200ba:	81 c3 00 02 00 00    	add    ebx,0x200
c00200c0:	6a 01                	push   0x1
c00200c2:	57                   	push   edi
c00200c3:	56                   	push   esi
c00200c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00200c8:	e8 35 f8 ff ff       	call   c001f902 <SATA::access(unsigned long long, int, void*, bool)>
c00200cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00200d1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00200d5:	83 c4 20             	add    esp,0x20
c00200d8:	39 dd                	cmp    ebp,ebx
c00200da:	75 c7                	jne    c00200a3 <SATA::write(unsigned long long, int, void*)+0xa9>
c00200dc:	f6 05 e1 62 02 c0 08 	test   BYTE PTR ds:0xc00262e1,0x8
c00200e3:	75 04                	jne    c00200e9 <SATA::write(unsigned long long, int, void*)+0xef>
c00200e5:	31 c0                	xor    eax,eax
c00200e7:	eb 2f                	jmp    c0020118 <SATA::write(unsigned long long, int, void*)+0x11e>
c00200e9:	83 ec 0c             	sub    esp,0xc
c00200ec:	68 44 55 02 c0       	push   0xc0025544
c00200f1:	e8 fb 96 fe ff       	call   c00097f1 <Krnl::setBootMessage(char const*)>
c00200f6:	83 c4 10             	add    esp,0x10
c00200f9:	f6 05 e0 62 02 c0 80 	test   BYTE PTR ds:0xc00262e0,0x80
c0020100:	75 e3                	jne    c00200e5 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020102:	e4 60                	in     al,0x60
c0020104:	3c 5a                	cmp    al,0x5a
c0020106:	74 04                	je     c002010c <SATA::write(unsigned long long, int, void*)+0x112>
c0020108:	3c 1c                	cmp    al,0x1c
c002010a:	75 f6                	jne    c0020102 <SATA::write(unsigned long long, int, void*)+0x108>
c002010c:	e4 60                	in     al,0x60
c002010e:	3c 5a                	cmp    al,0x5a
c0020110:	74 fa                	je     c002010c <SATA::write(unsigned long long, int, void*)+0x112>
c0020112:	3c 1c                	cmp    al,0x1c
c0020114:	74 f6                	je     c002010c <SATA::write(unsigned long long, int, void*)+0x112>
c0020116:	eb cd                	jmp    c00200e5 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020118:	83 c4 1c             	add    esp,0x1c
c002011b:	5b                   	pop    ebx
c002011c:	5e                   	pop    esi
c002011d:	5f                   	pop    edi
c002011e:	5d                   	pop    ebp
c002011f:	c3                   	ret    

c0020120 <SATAPI::write(unsigned long long, int, void*)>:
c0020120:	b8 03 00 00 00       	mov    eax,0x3
c0020125:	c3                   	ret    

c0020126 <SATAPI::close(int, int, void*)>:
c0020126:	83 ec 0c             	sub    esp,0xc
c0020129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020133:	85 c0                	test   eax,eax
c0020135:	74 0c                	je     c0020143 <SATAPI::close(int, int, void*)+0x1d>
c0020137:	83 ec 0c             	sub    esp,0xc
c002013a:	8b 10                	mov    edx,DWORD PTR [eax]
c002013c:	50                   	push   eax
c002013d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020140:	83 c4 10             	add    esp,0x10
c0020143:	31 c0                	xor    eax,eax
c0020145:	83 c4 0c             	add    esp,0xc
c0020148:	c3                   	ret    
c0020149:	90                   	nop

c002014a <SATAPI::SATAPI()>:
c002014a:	83 ec 0c             	sub    esp,0xc
c002014d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020151:	83 ec 04             	sub    esp,0x4
c0020154:	68 00 08 00 00       	push   0x800
c0020159:	68 8c 55 02 c0       	push   0xc002558c
c002015e:	50                   	push   eax
c002015f:	e8 36 de fe ff       	call   c000df9a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020164:	83 c4 10             	add    esp,0x10
c0020167:	ba c8 56 02 c0       	mov    edx,0xc00256c8
c002016c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020170:	89 10                	mov    DWORD PTR [eax],edx
c0020172:	90                   	nop
c0020173:	83 c4 0c             	add    esp,0xc
c0020176:	c3                   	ret    
c0020177:	90                   	nop

c0020178 <SATAPI::diskRemoved()>:
c0020178:	c3                   	ret    
c0020179:	90                   	nop

c002017a <SATAPI::diskInserted()>:
c002017a:	83 ec 18             	sub    esp,0x18
c002017d:	68 98 55 02 c0       	push   0xc0025598
c0020182:	e8 5e c5 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0020187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002018b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020192:	83 c4 1c             	add    esp,0x1c
c0020195:	c3                   	ret    

c0020196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020196:	55                   	push   ebp
c0020197:	57                   	push   edi
c0020198:	56                   	push   esi
c0020199:	53                   	push   ebx
c002019a:	83 ec 38             	sub    esp,0x38
c002019d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00201a1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00201a5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00201a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00201ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00201b1:	68 b0 55 02 c0       	push   0xc00255b0
c00201b6:	e8 2a c5 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00201bb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00201c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201cb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00201d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00201d5:	c1 e0 07             	shl    eax,0x7
c00201d8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00201dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00201e0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00201ea:	5a                   	pop    edx
c00201eb:	59                   	pop    ecx
c00201ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201f0:	8d 58 02             	lea    ebx,[eax+0x2]
c00201f3:	c1 e3 07             	shl    ebx,0x7
c00201f6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00201fa:	53                   	push   ebx
c00201fb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020201:	e8 08 e4 ff ff       	call   c001e60e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020206:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002020a:	83 c4 10             	add    esp,0x10
c002020d:	b8 01 00 00 00       	mov    eax,0x1
c0020212:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020217:	0f 84 ff 01 00 00    	je     c002041c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002021d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020223:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020225:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002022b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020231:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020235:	c1 e1 05             	shl    ecx,0x5
c0020238:	01 c8                	add    eax,ecx
c002023a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002023c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020242:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020248:	89 08                	mov    DWORD PTR [eax],ecx
c002024a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020250:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020256:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002025c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002025f:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020262:	50                   	push   eax
c0020263:	68 90 00 00 00       	push   0x90
c0020268:	6a 00                	push   0x0
c002026a:	53                   	push   ebx
c002026b:	e8 38 02 fe ff       	call   c00004a8 <memset>
c0020270:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020274:	b9 0c 00 00 00       	mov    ecx,0xc
c0020279:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002027b:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020281:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020285:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002028b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002028f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020293:	48                   	dec    eax
c0020294:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020299:	89 c1                	mov    ecx,eax
c002029b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00202a1:	25 00 00 c0 ff       	and    eax,0xffc00000
c00202a6:	09 c8                	or     eax,ecx
c00202a8:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00202ae:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00202b1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00202b8:	66 25 00 7f          	and    ax,0x7f00
c00202bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00202c0:	66 0d 27 80          	or     ax,0x8027
c00202c4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00202c8:	66 89 03             	mov    WORD PTR [ebx],ax
c00202cb:	89 d0                	mov    eax,edx
c00202cd:	c1 ea 18             	shr    edx,0x18
c00202d0:	c1 e8 10             	shr    eax,0x10
c00202d3:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00202d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00202d9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00202dd:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00202e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202e4:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00202e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00202f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202f6:	31 c0                	xor    eax,eax
c00202f8:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00202fe:	80 e1 88             	and    cl,0x88
c0020301:	74 0a                	je     c002030d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020303:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020308:	74 0a                	je     c0020314 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c002030a:	40                   	inc    eax
c002030b:	eb eb                	jmp    c00202f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c002030d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020312:	75 0a                	jne    c002031e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020314:	83 ec 0c             	sub    esp,0xc
c0020317:	68 ca 55 02 c0       	push   0xc00255ca
c002031c:	eb 43                	jmp    c0020361 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002031e:	be 01 00 00 00       	mov    esi,0x1
c0020323:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020327:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002032b:	d3 e6                	shl    esi,cl
c002032d:	c1 e7 07             	shl    edi,0x7
c0020330:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020336:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002033b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002033f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020345:	85 c6                	test   esi,eax
c0020347:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002034d:	0f 84 96 00 00 00    	je     c00203e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020353:	0f ba e0 1e          	bt     eax,0x1e
c0020357:	73 1a                	jae    c0020373 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0020359:	83 ec 0c             	sub    esp,0xc
c002035c:	68 df 55 02 c0       	push   0xc00255df
c0020361:	e8 7f c3 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0020366:	83 c4 10             	add    esp,0x10
c0020369:	b8 01 00 00 00       	mov    eax,0x1
c002036e:	e9 a9 00 00 00       	jmp    c002041c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020373:	83 fb 0d             	cmp    ebx,0xd
c0020376:	77 12                	ja     c002038a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0020378:	83 ec 0c             	sub    esp,0xc
c002037b:	68 c8 00 00 00       	push   0xc8
c0020380:	e8 f7 5e ff ff       	call   c001627c <milliTenthSleep(unsigned int)>
c0020385:	83 c4 10             	add    esp,0x10
c0020388:	eb 2a                	jmp    c00203b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002038a:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020390:	83 f8 0d             	cmp    eax,0xd
c0020393:	77 0a                	ja     c002039f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0020395:	83 ec 0c             	sub    esp,0xc
c0020398:	68 58 02 00 00       	push   0x258
c002039d:	eb 28                	jmp    c00203c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002039f:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c00203a5:	83 f8 0d             	cmp    eax,0xd
c00203a8:	77 0a                	ja     c00203b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	68 dc 05 00 00       	push   0x5dc
c00203b2:	eb 13                	jmp    c00203c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00203b4:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00203ba:	83 f8 0d             	cmp    eax,0xd
c00203bd:	77 10                	ja     c00203cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	68 c4 09 00 00       	push   0x9c4
c00203c7:	e8 b0 5e ff ff       	call   c001627c <milliTenthSleep(unsigned int)>
c00203cc:	83 c4 10             	add    esp,0x10
c00203cf:	43                   	inc    ebx
c00203d0:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c00203d6:	0f 85 63 ff ff ff    	jne    c002033f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	68 f2 55 02 c0       	push   0xc00255f2
c00203e4:	e9 78 ff ff ff       	jmp    c0020361 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00203e9:	0f ba e0 1e          	bt     eax,0x1e
c00203ed:	73 0d                	jae    c00203fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	68 06 56 02 c0       	push   0xc0025606
c00203f7:	e9 65 ff ff ff       	jmp    c0020361 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00203fc:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020401:	74 17                	je     c002041a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020403:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020408:	74 10                	je     c002041a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002040a:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020410:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020414:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020418:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002041a:	31 c0                	xor    eax,eax
c002041c:	83 c4 2c             	add    esp,0x2c
c002041f:	5b                   	pop    ebx
c0020420:	5e                   	pop    esi
c0020421:	5f                   	pop    edi
c0020422:	5d                   	pop    ebp
c0020423:	c3                   	ret    

c0020424 <SATAPI::eject()>:
c0020424:	57                   	push   edi
c0020425:	b9 03 00 00 00       	mov    ecx,0x3
c002042a:	83 ec 18             	sub    esp,0x18
c002042d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020431:	fc                   	cld    
c0020432:	31 c0                	xor    eax,eax
c0020434:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020436:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002043b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020440:	50                   	push   eax
c0020441:	6a 00                	push   0x0
c0020443:	6a 00                	push   0x0
c0020445:	6a 00                	push   0x0
c0020447:	6a 00                	push   0x0
c0020449:	6a 02                	push   0x2
c002044b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002044f:	50                   	push   eax
c0020450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020454:	e8 3d fd ff ff       	call   c0020196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020459:	31 c0                	xor    eax,eax
c002045b:	83 c4 38             	add    esp,0x38
c002045e:	5f                   	pop    edi
c002045f:	c3                   	ret    

c0020460 <SATAPI::detectMedia()>:
c0020460:	56                   	push   esi
c0020461:	53                   	push   ebx
c0020462:	83 ec 30             	sub    esp,0x30
c0020465:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020469:	68 1b 56 02 c0       	push   0xc002561b
c002046e:	e8 72 c2 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0020473:	83 c4 0c             	add    esp,0xc
c0020476:	6a 0c                	push   0xc
c0020478:	6a 00                	push   0x0
c002047a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002047e:	56                   	push   esi
c002047f:	e8 24 00 fe ff       	call   c00004a8 <memset>
c0020484:	83 c4 0c             	add    esp,0xc
c0020487:	6a 00                	push   0x0
c0020489:	6a 00                	push   0x0
c002048b:	6a 00                	push   0x0
c002048d:	6a 00                	push   0x0
c002048f:	6a 00                	push   0x0
c0020491:	56                   	push   esi
c0020492:	53                   	push   ebx
c0020493:	e8 fe fc ff ff       	call   c0020196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020498:	83 c4 20             	add    esp,0x20
c002049b:	48                   	dec    eax
c002049c:	74 34                	je     c00204d2 <SATAPI::detectMedia()+0x72>
c002049e:	50                   	push   eax
c002049f:	6a 0c                	push   0xc
c00204a1:	6a 00                	push   0x0
c00204a3:	56                   	push   esi
c00204a4:	e8 ff ff fd ff       	call   c00004a8 <memset>
c00204a9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00204ae:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00204b3:	83 c4 0c             	add    esp,0xc
c00204b6:	6a 01                	push   0x1
c00204b8:	8d 44 24 16          	lea    eax,[esp+0x16]
c00204bc:	50                   	push   eax
c00204bd:	6a 00                	push   0x0
c00204bf:	6a 00                	push   0x0
c00204c1:	6a 12                	push   0x12
c00204c3:	56                   	push   esi
c00204c4:	53                   	push   ebx
c00204c5:	e8 cc fc ff ff       	call   c0020196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00204ca:	83 c4 20             	add    esp,0x20
c00204cd:	48                   	dec    eax
c00204ce:	75 39                	jne    c0020509 <SATAPI::detectMedia()+0xa9>
c00204d0:	eb 1e                	jmp    c00204f0 <SATAPI::detectMedia()+0x90>
c00204d2:	83 ec 0c             	sub    esp,0xc
c00204d5:	68 2f 56 02 c0       	push   0xc002562f
c00204da:	e8 06 c2 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00204e9:	74 b3                	je     c002049e <SATAPI::detectMedia()+0x3e>
c00204eb:	e9 93 00 00 00       	jmp    c0020583 <SATAPI::detectMedia()+0x123>
c00204f0:	83 ec 0c             	sub    esp,0xc
c00204f3:	68 39 56 02 c0       	push   0xc0025639
c00204f8:	e8 e8 c1 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00204fd:	83 c4 10             	add    esp,0x10
c0020500:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020507:	75 7a                	jne    c0020583 <SATAPI::detectMedia()+0x123>
c0020509:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c002050d:	83 e0 7f             	and    eax,0x7f
c0020510:	3c 70                	cmp    al,0x70
c0020512:	74 25                	je     c0020539 <SATAPI::detectMedia()+0xd9>
c0020514:	83 ec 0c             	sub    esp,0xc
c0020517:	68 43 56 02 c0       	push   0xc0025643
c002051c:	e8 c4 c1 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0020521:	83 c4 10             	add    esp,0x10
c0020524:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002052b:	75 0c                	jne    c0020539 <SATAPI::detectMedia()+0xd9>
c002052d:	83 ec 0c             	sub    esp,0xc
c0020530:	53                   	push   ebx
c0020531:	e8 44 fc ff ff       	call   c002017a <SATAPI::diskInserted()>
c0020536:	83 c4 10             	add    esp,0x10
c0020539:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002053d:	83 e0 0f             	and    eax,0xf
c0020540:	3c 02                	cmp    al,0x2
c0020542:	75 16                	jne    c002055a <SATAPI::detectMedia()+0xfa>
c0020544:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020549:	75 38                	jne    c0020583 <SATAPI::detectMedia()+0x123>
c002054b:	83 ec 0c             	sub    esp,0xc
c002054e:	68 4c 56 02 c0       	push   0xc002564c
c0020553:	e8 8d c1 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c0020558:	eb 26                	jmp    c0020580 <SATAPI::detectMedia()+0x120>
c002055a:	84 c0                	test   al,al
c002055c:	75 25                	jne    c0020583 <SATAPI::detectMedia()+0x123>
c002055e:	83 ec 0c             	sub    esp,0xc
c0020561:	68 55 56 02 c0       	push   0xc0025655
c0020566:	e8 7a c1 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c002056b:	83 c4 10             	add    esp,0x10
c002056e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020575:	75 0c                	jne    c0020583 <SATAPI::detectMedia()+0x123>
c0020577:	83 ec 0c             	sub    esp,0xc
c002057a:	53                   	push   ebx
c002057b:	e8 fa fb ff ff       	call   c002017a <SATAPI::diskInserted()>
c0020580:	83 c4 10             	add    esp,0x10
c0020583:	83 c4 24             	add    esp,0x24
c0020586:	5b                   	pop    ebx
c0020587:	5e                   	pop    esi
c0020588:	c3                   	ret    
c0020589:	90                   	nop

c002058a <SATAPI::open(int, int, void*)>:
c002058a:	56                   	push   esi
c002058b:	53                   	push   ebx
c002058c:	51                   	push   ecx
c002058d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020591:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020595:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002059f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00205a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00205af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205b3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00205bd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00205c3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00205ca:	e8 07 96 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c00205cf:	89 c6                	mov    esi,eax
c00205d1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00205d7:	81 c6 00 10 00 00    	add    esi,0x1000
c00205dd:	e8 f4 95 fe ff       	call   c0009bd6 <Phys::allocatePage()>
c00205e2:	39 c6                	cmp    esi,eax
c00205e4:	74 10                	je     c00205f6 <SATAPI::open(int, int, void*)+0x6c>
c00205e6:	83 ec 0c             	sub    esp,0xc
c00205e9:	68 5f 56 02 c0       	push   0xc002565f
c00205ee:	e8 5c 24 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00205f3:	83 c4 10             	add    esp,0x10
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	6a 02                	push   0x2
c00205fb:	e8 89 ad fe ff       	call   c000b389 <Virt::allocateKernelVirtualPages(int)>
c0020600:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020606:	6a 03                	push   0x3
c0020608:	50                   	push   eax
c0020609:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002060f:	ff 35 b4 63 02 c0    	push   DWORD PTR ds:0xc00263b4
c0020615:	e8 da b3 fe ff       	call   c000b9f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c002061a:	83 c4 14             	add    esp,0x14
c002061d:	68 74 01 00 00       	push   0x174
c0020622:	e8 70 91 fe ff       	call   c0009797 <malloc>
c0020627:	83 c4 0c             	add    esp,0xc
c002062a:	89 c6                	mov    esi,eax
c002062c:	6a 00                	push   0x0
c002062e:	68 ff ff ff 7f       	push   0x7fffffff
c0020633:	6a 00                	push   0x0
c0020635:	6a 00                	push   0x0
c0020637:	53                   	push   ebx
c0020638:	68 75 56 02 c0       	push   0xc0025675
c002063d:	50                   	push   eax
c002063e:	e8 dd e5 fe ff       	call   c000ec20 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020643:	83 c4 14             	add    esp,0x14
c0020646:	56                   	push   esi
c0020647:	e8 8a e6 fe ff       	call   c000ecd6 <LogicalDisk::assignDriveLetter()>
c002064c:	5a                   	pop    edx
c002064d:	0f be c0             	movsx  eax,al
c0020650:	59                   	pop    ecx
c0020651:	50                   	push   eax
c0020652:	68 0b 53 02 c0       	push   0xc002530b
c0020657:	e8 89 c0 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c002065c:	58                   	pop    eax
c002065d:	5a                   	pop    edx
c002065e:	56                   	push   esi
c002065f:	53                   	push   ebx
c0020660:	e8 fd d4 fe ff       	call   c000db62 <Device::addChild(Device*)>
c0020665:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002066b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002066e:	e8 8f d9 fe ff       	call   c000e002 <PhysicalDisk::startCache()>
c0020673:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002067a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002067d:	e8 de fd ff ff       	call   c0020460 <SATAPI::detectMedia()>
c0020682:	83 c4 14             	add    esp,0x14
c0020685:	31 c0                	xor    eax,eax
c0020687:	5b                   	pop    ebx
c0020688:	5e                   	pop    esi
c0020689:	c3                   	ret    

c002068a <SATAPI::read(unsigned long long, int, void*)>:
c002068a:	55                   	push   ebp
c002068b:	57                   	push   edi
c002068c:	56                   	push   esi
c002068d:	53                   	push   ebx
c002068e:	83 ec 48             	sub    esp,0x48
c0020691:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0020695:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0020699:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c002069d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00206a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00206a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00206a9:	68 83 56 02 c0       	push   0xc0025683
c00206ae:	e8 32 c0 fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	83 fb 04             	cmp    ebx,0x4
c00206b9:	7e 10                	jle    c00206cb <SATAPI::read(unsigned long long, int, void*)+0x41>
c00206bb:	83 ec 0c             	sub    esp,0xc
c00206be:	68 94 56 02 c0       	push   0xc0025694
c00206c3:	e8 87 23 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00206c8:	83 c4 10             	add    esp,0x10
c00206cb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00206cf:	31 ed                	xor    ebp,ebp
c00206d1:	b9 03 00 00 00       	mov    ecx,0x3
c00206d6:	fc                   	cld    
c00206d7:	89 e8                	mov    eax,ebp
c00206d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206db:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c00206e0:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00206e5:	50                   	push   eax
c00206e6:	6a 00                	push   0x0
c00206e8:	6a 00                	push   0x0
c00206ea:	6a 00                	push   0x0
c00206ec:	6a 00                	push   0x0
c00206ee:	6a 02                	push   0x2
c00206f0:	8d 44 24 30          	lea    eax,[esp+0x30]
c00206f4:	50                   	push   eax
c00206f5:	56                   	push   esi
c00206f6:	e8 9b fa ff ff       	call   c0020196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00206fb:	8d 7c 24 44          	lea    edi,[esp+0x44]
c00206ff:	89 e8                	mov    eax,ebp
c0020701:	b9 03 00 00 00       	mov    ecx,0x3
c0020706:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020708:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002070c:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0020710:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0020715:	86 e0                	xchg   al,ah
c0020717:	c1 c0 10             	rol    eax,0x10
c002071a:	86 e0                	xchg   al,ah
c002071c:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0020720:	83 c4 1c             	add    esp,0x1c
c0020723:	53                   	push   ebx
c0020724:	c1 e3 0b             	shl    ebx,0xb
c0020727:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002072b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002072f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020733:	53                   	push   ebx
c0020734:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020738:	50                   	push   eax
c0020739:	56                   	push   esi
c002073a:	e8 57 fa ff ff       	call   c0020196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002073f:	83 c4 20             	add    esp,0x20
c0020742:	85 c0                	test   eax,eax
c0020744:	74 14                	je     c002075a <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0020746:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002074a:	83 ec 0c             	sub    esp,0xc
c002074d:	56                   	push   esi
c002074e:	e8 0d fd ff ff       	call   c0020460 <SATAPI::detectMedia()>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002075a:	83 c4 3c             	add    esp,0x3c
c002075d:	5b                   	pop    ebx
c002075e:	5e                   	pop    esi
c002075f:	5f                   	pop    edi
c0020760:	5d                   	pop    ebp
c0020761:	c3                   	ret    

c0020762 <IOAPIC::close(int, int, void*)>:
c0020762:	b8 00 00 00 00       	mov    eax,0x0
c0020767:	c3                   	ret    

c0020768 <apicGetBase()>:
c0020768:	55                   	push   ebp
c0020769:	89 e5                	mov    ebp,esp
c002076b:	83 ec 18             	sub    esp,0x18
c002076e:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c0020773:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0020779:	83 e0 08             	and    eax,0x8
c002077c:	84 c0                	test   al,al
c002077e:	75 07                	jne    c0020787 <apicGetBase()+0x1f>
c0020780:	b8 00 00 00 00       	mov    eax,0x0
c0020785:	eb 21                	jmp    c00207a8 <apicGetBase()+0x40>
c0020787:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c002078c:	83 ec 08             	sub    esp,0x8
c002078f:	6a 1b                	push   0x1b
c0020791:	50                   	push   eax
c0020792:	e8 b7 85 fe ff       	call   c0008d4e <Computer::rdmsr(unsigned int)>
c0020797:	83 c4 10             	add    esp,0x10
c002079a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002079d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00207a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00207a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00207a8:	c9                   	leave  
c00207a9:	c3                   	ret    

c00207aa <IOAPIC::IOAPIC()>:
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b1:	83 ec 08             	sub    esp,0x8
c00207b4:	68 f8 56 02 c0       	push   0xc00256f8
c00207b9:	50                   	push   eax
c00207ba:	e8 a7 d5 fe ff       	call   c000dd66 <Device::Device(char const*)>
c00207bf:	83 c4 10             	add    esp,0x10
c00207c2:	ba 1c 57 02 c0       	mov    edx,0xc002571c
c00207c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207cb:	89 10                	mov    DWORD PTR [eax],edx
c00207cd:	90                   	nop
c00207ce:	83 c4 0c             	add    esp,0xc
c00207d1:	c3                   	ret    

c00207d2 <apicOpen()>:
c00207d2:	55                   	push   ebp
c00207d3:	89 e5                	mov    ebp,esp
c00207d5:	53                   	push   ebx
c00207d6:	83 ec 34             	sub    esp,0x34
c00207d9:	a0 40 a2 02 c0       	mov    al,ds:0xc002a240
c00207de:	83 f0 01             	xor    eax,0x1
c00207e1:	84 c0                	test   al,al
c00207e3:	0f 84 91 00 00 00    	je     c002087a <apicOpen()+0xa8>
c00207e9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00207ed:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c00207f2:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c00207f5:	73 7c                	jae    c0020873 <apicOpen()+0xa1>
c00207f7:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00207fe:	83 ec 0c             	sub    esp,0xc
c0020801:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020804:	e8 8e 8f fe ff       	call   c0009797 <malloc>
c0020809:	83 c4 10             	add    esp,0x10
c002080c:	89 c3                	mov    ebx,eax
c002080e:	83 ec 0c             	sub    esp,0xc
c0020811:	53                   	push   ebx
c0020812:	e8 93 ff ff ff       	call   c00207aa <IOAPIC::IOAPIC()>
c0020817:	83 c4 10             	add    esp,0x10
c002081a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002081d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020821:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020824:	89 14 85 20 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5de0],edx
c002082b:	a1 00 a2 02 c0       	mov    eax,ds:0xc002a200
c0020830:	40                   	inc    eax
c0020831:	a3 00 a2 02 c0       	mov    ds:0xc002a200,eax
c0020836:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c002083b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020841:	83 ec 08             	sub    esp,0x8
c0020844:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020847:	50                   	push   eax
c0020848:	e8 15 d3 fe ff       	call   c000db62 <Device::addChild(Device*)>
c002084d:	83 c4 10             	add    esp,0x10
c0020850:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020853:	8b 00                	mov    eax,DWORD PTR [eax]
c0020855:	83 c0 08             	add    eax,0x8
c0020858:	8b 00                	mov    eax,DWORD PTR [eax]
c002085a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002085e:	6a 00                	push   0x0
c0020860:	6a 00                	push   0x0
c0020862:	52                   	push   edx
c0020863:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020866:	ff d0                	call   eax
c0020868:	83 c4 10             	add    esp,0x10
c002086b:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c002086e:	e9 7a ff ff ff       	jmp    c00207ed <apicOpen()+0x1b>
c0020873:	c6 05 40 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a240,0x1
c002087a:	e8 e9 fe ff ff       	call   c0020768 <apicGetBase()>
c002087f:	05 f0 00 00 00       	add    eax,0xf0
c0020884:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020887:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002088a:	8b 00                	mov    eax,DWORD PTR [eax]
c002088c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002088f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020896:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002089d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00208a0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00208a3:	89 10                	mov    DWORD PTR [eax],edx
c00208a5:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00208ac:	a1 f0 8a 02 c0       	mov    eax,ds:0xc0028af0
c00208b1:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00208b4:	7d 70                	jge    c0020926 <apicOpen()+0x154>
c00208b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00208b9:	8b 04 85 00 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7500]
c00208c0:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00208c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00208c6:	8b 04 85 00 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7500]
c00208cd:	c1 e8 08             	shr    eax,0x8
c00208d0:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00208d4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00208d7:	8b 04 85 00 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7500]
c00208de:	c1 e8 18             	shr    eax,0x18
c00208e1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00208e4:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c00208e8:	75 37                	jne    c0020921 <apicOpen()+0x14f>
c00208ea:	e8 79 fe ff ff       	call   c0020768 <apicGetBase()>
c00208ef:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00208f3:	75 07                	jne    c00208fc <apicOpen()+0x12a>
c00208f5:	ba 60 03 00 00       	mov    edx,0x360
c00208fa:	eb 05                	jmp    c0020901 <apicOpen()+0x12f>
c00208fc:	ba 50 03 00 00       	mov    edx,0x350
c0020901:	01 d0                	add    eax,edx
c0020903:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020906:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020909:	8b 00                	mov    eax,DWORD PTR [eax]
c002090b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002090e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020915:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020919:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002091c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002091f:	89 10                	mov    DWORD PTR [eax],edx
c0020921:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0020924:	eb 86                	jmp    c00208ac <apicOpen()+0xda>
c0020926:	90                   	nop
c0020927:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002092a:	c9                   	leave  
c002092b:	c3                   	ret    

c002092c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002092c:	55                   	push   ebp
c002092d:	89 e5                	mov    ebp,esp
c002092f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020932:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020938:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002093b:	72 1d                	jb     c002095a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002093d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020940:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020949:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002094f:	01 d0                	add    eax,edx
c0020951:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020954:	73 04                	jae    c002095a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020956:	b0 01                	mov    al,0x1
c0020958:	eb 02                	jmp    c002095c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002095a:	b0 00                	mov    al,0x0
c002095c:	5d                   	pop    ebp
c002095d:	c3                   	ret    

c002095e <IOAPIC::read(int)>:
c002095e:	55                   	push   ebp
c002095f:	89 e5                	mov    ebp,esp
c0020961:	83 ec 10             	sub    esp,0x10
c0020964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020967:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002096d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020973:	0f b6 d0             	movzx  edx,al
c0020976:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020979:	89 10                	mov    DWORD PTR [eax],edx
c002097b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002097e:	83 c0 10             	add    eax,0x10
c0020981:	8b 00                	mov    eax,DWORD PTR [eax]
c0020983:	c9                   	leave  
c0020984:	c3                   	ret    
c0020985:	90                   	nop

c0020986 <IOAPIC::open(int, int, void*)>:
c0020986:	55                   	push   ebp
c0020987:	89 e5                	mov    ebp,esp
c0020989:	57                   	push   edi
c002098a:	56                   	push   esi
c002098b:	53                   	push   ebx
c002098c:	83 ec 0c             	sub    esp,0xc
c002098f:	83 ec 0c             	sub    esp,0xc
c0020992:	68 00 57 02 c0       	push   0xc0025700
c0020997:	e8 49 bd fe ff       	call   c000c6e5 <Dbg::kprintf(char const*, ...)>
c002099c:	83 c4 10             	add    esp,0x10
c002099f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209a2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00209a5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00209ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00209b4:	8b 14 85 e0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7420]
c00209bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209be:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00209c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209c7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00209cd:	8b 14 85 60 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73a0]
c00209d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209d7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00209dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209e0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00209e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209e9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00209ef:	0f b6 f8             	movzx  edi,al
c00209f2:	89 d0                	mov    eax,edx
c00209f4:	ba 00 00 00 00       	mov    edx,0x0
c00209f9:	89 c1                	mov    ecx,eax
c00209fb:	80 e5 ff             	and    ch,0xff
c00209fe:	89 cb                	mov    ebx,ecx
c0020a00:	0f b6 f2             	movzx  esi,dl
c0020a03:	89 d8                	mov    eax,ebx
c0020a05:	89 f2                	mov    edx,esi
c0020a07:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020a0a:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020a0d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020a11:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020a15:	83 e0 00             	and    eax,0x0
c0020a18:	09 d0                	or     eax,edx
c0020a1a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a21:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020a27:	8d 50 01             	lea    edx,[eax+0x1]
c0020a2a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020a2d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020a33:	0f b6 d0             	movzx  edx,al
c0020a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a39:	83 c2 08             	add    edx,0x8
c0020a3c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020a40:	0f b6 c9             	movzx  ecx,cl
c0020a43:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020a49:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020a4d:	83 ec 08             	sub    esp,0x8
c0020a50:	6a 01                	push   0x1
c0020a52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020a55:	e8 04 ff ff ff       	call   c002095e <IOAPIC::read(int)>
c0020a5a:	83 c4 10             	add    esp,0x10
c0020a5d:	c1 f8 10             	sar    eax,0x10
c0020a60:	0f b6 c0             	movzx  eax,al
c0020a63:	8d 50 01             	lea    edx,[eax+0x1]
c0020a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a69:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020a6f:	b8 00 00 00 00       	mov    eax,0x0
c0020a74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020a77:	5b                   	pop    ebx
c0020a78:	5e                   	pop    esi
c0020a79:	5f                   	pop    edi
c0020a7a:	5d                   	pop    ebp
c0020a7b:	c3                   	ret    

c0020a7c <IOAPIC::write(int, int)>:
c0020a7c:	55                   	push   ebp
c0020a7d:	89 e5                	mov    ebp,esp
c0020a7f:	83 ec 10             	sub    esp,0x10
c0020a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a8b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020a8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020a91:	0f b6 d0             	movzx  edx,al
c0020a94:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020a97:	89 10                	mov    DWORD PTR [eax],edx
c0020a99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020a9c:	8d 50 10             	lea    edx,[eax+0x10]
c0020a9f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020aa2:	89 02                	mov    DWORD PTR [edx],eax
c0020aa4:	90                   	nop
c0020aa5:	c9                   	leave  
c0020aa6:	c3                   	ret    
c0020aa7:	90                   	nop

c0020aa8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020aa8:	55                   	push   ebp
c0020aa9:	89 e5                	mov    ebp,esp
c0020aab:	53                   	push   ebx
c0020aac:	83 ec 2c             	sub    esp,0x2c
c0020aaf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020ab2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020ab5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020ab8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020abb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020abe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020ac1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020ac4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020ac7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020aca:	88 d8                	mov    al,bl
c0020acc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020acf:	88 c8                	mov    al,cl
c0020ad1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020ad4:	88 d0                	mov    al,dl
c0020ad6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020ad9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020add:	83 c0 08             	add    eax,0x8
c0020ae0:	01 c0                	add    eax,eax
c0020ae2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020ae5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020ae9:	83 c0 08             	add    eax,0x8
c0020aec:	01 c0                	add    eax,eax
c0020aee:	40                   	inc    eax
c0020aef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020af2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020af5:	50                   	push   eax
c0020af6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020af9:	e8 60 fe ff ff       	call   c002095e <IOAPIC::read(int)>
c0020afe:	83 c4 08             	add    esp,0x8
c0020b01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020b04:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020b0b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020b0e:	c1 e0 18             	shl    eax,0x18
c0020b11:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020b14:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020b17:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020b1a:	52                   	push   edx
c0020b1b:	50                   	push   eax
c0020b1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b1f:	e8 58 ff ff ff       	call   c0020a7c <IOAPIC::write(int, int)>
c0020b24:	83 c4 0c             	add    esp,0xc
c0020b27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020b2a:	50                   	push   eax
c0020b2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b2e:	e8 2b fe ff ff       	call   c002095e <IOAPIC::read(int)>
c0020b33:	83 c4 08             	add    esp,0x8
c0020b36:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020b39:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020b40:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020b47:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020b4e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020b52:	74 09                	je     c0020b5d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0020b54:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020b5b:	eb 07                	jmp    c0020b64 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020b5d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020b64:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020b68:	74 09                	je     c0020b73 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020b6a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020b71:	eb 07                	jmp    c0020b7a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020b73:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020b7a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020b81:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020b85:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020b88:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020b8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020b8e:	52                   	push   edx
c0020b8f:	50                   	push   eax
c0020b90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b93:	e8 e4 fe ff ff       	call   c0020a7c <IOAPIC::write(int, int)>
c0020b98:	83 c4 0c             	add    esp,0xc
c0020b9b:	90                   	nop
c0020b9c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020b9f:	c9                   	leave  
c0020ba0:	c3                   	ret    
c0020ba1:	66 90                	xchg   ax,ax
c0020ba3:	90                   	nop

c0020ba4 <APICTimer::close(int, int, void*)>:
c0020ba4:	b8 00 00 00 00       	mov    eax,0x0
c0020ba9:	c3                   	ret    
c0020baa:	66 90                	xchg   ax,ax

c0020bac <apicTimerHandler(regs*, void*)>:
c0020bac:	83 ec 0c             	sub    esp,0xc
c0020baf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bb3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020bb5:	b8 10 27 00 00       	mov    eax,0x2710
c0020bba:	ba 00 00 00 00       	mov    edx,0x0
c0020bbf:	f7 f1                	div    ecx
c0020bc1:	83 ec 0c             	sub    esp,0xc
c0020bc4:	50                   	push   eax
c0020bc5:	e8 b2 e8 fe ff       	call   c000f47c <timerHandler(unsigned int)>
c0020bca:	83 c4 10             	add    esp,0x10
c0020bcd:	90                   	nop
c0020bce:	83 c4 0c             	add    esp,0xc
c0020bd1:	c3                   	ret    
c0020bd2:	66 90                	xchg   ax,ax

c0020bd4 <APICTimer::open(int, int, void*)>:
c0020bd4:	83 ec 0c             	sub    esp,0xc
c0020bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bdd:	83 c0 24             	add    eax,0x24
c0020be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020be2:	83 ec 08             	sub    esp,0x8
c0020be5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020be9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bed:	ff d0                	call   eax
c0020bef:	83 c4 10             	add    esp,0x10
c0020bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020bfa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020c08:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020c0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020c12:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020c18:	83 ec 0c             	sub    esp,0xc
c0020c1b:	51                   	push   ecx
c0020c1c:	6a 01                	push   0x1
c0020c1e:	68 ac 0b 02 c0       	push   0xc0020bac
c0020c23:	52                   	push   edx
c0020c24:	50                   	push   eax
c0020c25:	e8 e4 ce fe ff       	call   c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020c2a:	83 c4 20             	add    esp,0x20
c0020c2d:	89 c2                	mov    edx,eax
c0020c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c33:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020c39:	b8 00 00 00 00       	mov    eax,0x0
c0020c3e:	83 c4 0c             	add    esp,0xc
c0020c41:	c3                   	ret    
c0020c42:	66 90                	xchg   ax,ax

c0020c44 <APICTimer::write(int)>:
c0020c44:	83 ec 0c             	sub    esp,0xc
c0020c47:	83 ec 0c             	sub    esp,0xc
c0020c4a:	68 40 57 02 c0       	push   0xc0025740
c0020c4f:	e8 fb 1d ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0020c54:	83 c4 10             	add    esp,0x10
c0020c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020c5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020c65:	90                   	nop
c0020c66:	83 c4 0c             	add    esp,0xc
c0020c69:	c3                   	ret    
c0020c6a:	66 90                	xchg   ax,ax

c0020c6c <APICTimer::APICTimer()>:
c0020c6c:	83 ec 0c             	sub    esp,0xc
c0020c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c73:	83 ec 08             	sub    esp,0x8
c0020c76:	68 50 57 02 c0       	push   0xc0025750
c0020c7b:	50                   	push   eax
c0020c7c:	e8 2f e7 fe ff       	call   c000f3b0 <Timer::Timer(char const*)>
c0020c81:	83 c4 10             	add    esp,0x10
c0020c84:	ba 64 57 02 c0       	mov    edx,0xc0025764
c0020c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c8d:	89 10                	mov    DWORD PTR [eax],edx
c0020c8f:	90                   	nop
c0020c90:	83 c4 0c             	add    esp,0xc
c0020c93:	c3                   	ret    

c0020c94 <PIT::write(int)>:
c0020c94:	83 ec 10             	sub    esp,0x10
c0020c97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020c9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ca9:	a3 44 a2 02 c0       	mov    ds:0xc002a244,eax
c0020cae:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020cb3:	99                   	cdq    
c0020cb4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020cb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cbc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020cc3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020cc8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020ccc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020cd1:	ee                   	out    dx,al
c0020cd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cd6:	0f b6 c0             	movzx  eax,al
c0020cd9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020ce0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020ce4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020ce8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020ced:	ee                   	out    dx,al
c0020cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cf2:	c1 f8 08             	sar    eax,0x8
c0020cf5:	0f b6 c0             	movzx  eax,al
c0020cf8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020cff:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020d03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020d07:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020d0c:	ee                   	out    dx,al
c0020d0d:	90                   	nop
c0020d0e:	83 c4 10             	add    esp,0x10
c0020d11:	c3                   	ret    
c0020d12:	66 90                	xchg   ax,ax

c0020d14 <pitHandler(regs*, void*)>:
c0020d14:	83 ec 0c             	sub    esp,0xc
c0020d17:	8b 0d 44 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a244
c0020d1d:	b8 10 27 00 00       	mov    eax,0x2710
c0020d22:	99                   	cdq    
c0020d23:	f7 f9                	idiv   ecx
c0020d25:	83 ec 0c             	sub    esp,0xc
c0020d28:	50                   	push   eax
c0020d29:	e8 4e e7 fe ff       	call   c000f47c <timerHandler(unsigned int)>
c0020d2e:	83 c4 10             	add    esp,0x10
c0020d31:	90                   	nop
c0020d32:	83 c4 0c             	add    esp,0xc
c0020d35:	c3                   	ret    
c0020d36:	66 90                	xchg   ax,ax

c0020d38 <PIT::open(int, int, void*)>:
c0020d38:	83 ec 0c             	sub    esp,0xc
c0020d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d41:	83 c0 24             	add    eax,0x24
c0020d44:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d46:	83 ec 08             	sub    esp,0x8
c0020d49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d51:	ff d0                	call   eax
c0020d53:	83 c4 10             	add    esp,0x10
c0020d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d5a:	83 ec 0c             	sub    esp,0xc
c0020d5d:	6a 00                	push   0x0
c0020d5f:	6a 01                	push   0x1
c0020d61:	68 14 0d 02 c0       	push   0xc0020d14
c0020d66:	6a 00                	push   0x0
c0020d68:	50                   	push   eax
c0020d69:	e8 a0 cd fe ff       	call   c000db0e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d6e:	83 c4 20             	add    esp,0x20
c0020d71:	89 c2                	mov    edx,eax
c0020d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d77:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020d7d:	b8 00 00 00 00       	mov    eax,0x0
c0020d82:	83 c4 0c             	add    esp,0xc
c0020d85:	c3                   	ret    
c0020d86:	66 90                	xchg   ax,ax

c0020d88 <PIT::close(int, int, void*)>:
c0020d88:	83 ec 0c             	sub    esp,0xc
c0020d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d8f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d9d:	6a 01                	push   0x1
c0020d9f:	68 14 0d 02 c0       	push   0xc0020d14
c0020da4:	6a 00                	push   0x0
c0020da6:	50                   	push   eax
c0020da7:	e8 98 cd fe ff       	call   c000db44 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020dac:	83 c4 10             	add    esp,0x10
c0020daf:	b8 00 00 00 00       	mov    eax,0x0
c0020db4:	83 c4 0c             	add    esp,0xc
c0020db7:	c3                   	ret    

c0020db8 <PIT::PIT()>:
c0020db8:	83 ec 0c             	sub    esp,0xc
c0020dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dbf:	83 ec 08             	sub    esp,0x8
c0020dc2:	68 8c 57 02 c0       	push   0xc002578c
c0020dc7:	50                   	push   eax
c0020dc8:	e8 e3 e5 fe ff       	call   c000f3b0 <Timer::Timer(char const*)>
c0020dcd:	83 c4 10             	add    esp,0x10
c0020dd0:	ba b4 57 02 c0       	mov    edx,0xc00257b4
c0020dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dd9:	89 10                	mov    DWORD PTR [eax],edx
c0020ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ddf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020de5:	0f b6 d0             	movzx  edx,al
c0020de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dec:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020df7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020dfd:	0f b6 d0             	movzx  edx,al
c0020e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e04:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020e13:	8d 50 01             	lea    edx,[eax+0x1]
c0020e16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e1a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020e20:	0f b6 d0             	movzx  edx,al
c0020e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e27:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020e2b:	83 e1 3f             	and    ecx,0x3f
c0020e2e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020e32:	90                   	nop
c0020e33:	83 c4 0c             	add    esp,0xc
c0020e36:	c3                   	ret    
c0020e37:	66 90                	xchg   ax,ax
c0020e39:	66 90                	xchg   ax,ax
c0020e3b:	66 90                	xchg   ax,ax
c0020e3d:	66 90                	xchg   ax,ax
c0020e3f:	90                   	nop

c0020e40 <avxDetect>:
c0020e40:	b8 01 00 00 00       	mov    eax,0x1
c0020e45:	0f a2                	cpuid  
c0020e47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0020e4d:	74 15                	je     c0020e64 <avxDetect.noAVX>
c0020e4f:	b8 01 00 00 00       	mov    eax,0x1
c0020e54:	0f a2                	cpuid  
c0020e56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0020e5c:	74 06                	je     c0020e64 <avxDetect.noAVX>
c0020e5e:	b8 01 00 00 00       	mov    eax,0x1
c0020e63:	c3                   	ret    

c0020e64 <avxDetect.noAVX>:
c0020e64:	b8 00 00 00 00       	mov    eax,0x0
c0020e69:	c3                   	ret    

c0020e6a <avxSave>:
c0020e6a:	53                   	push   ebx
c0020e6b:	52                   	push   edx
c0020e6c:	31 c0                	xor    eax,eax
c0020e6e:	48                   	dec    eax
c0020e6f:	89 c2                	mov    edx,eax
c0020e71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e75:	0f ae 23             	xsave  [ebx]
c0020e78:	5a                   	pop    edx
c0020e79:	5b                   	pop    ebx
c0020e7a:	c3                   	ret    

c0020e7b <avxLoad>:
c0020e7b:	53                   	push   ebx
c0020e7c:	52                   	push   edx
c0020e7d:	31 c0                	xor    eax,eax
c0020e7f:	48                   	dec    eax
c0020e80:	89 c2                	mov    edx,eax
c0020e82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e86:	0f ae 2b             	xrstor [ebx]
c0020e89:	5a                   	pop    edx
c0020e8a:	5b                   	pop    ebx
c0020e8b:	c3                   	ret    

c0020e8c <avxInit>:
c0020e8c:	e8 57 02 00 00       	call   c00210e8 <sseInit>
c0020e91:	50                   	push   eax
c0020e92:	51                   	push   ecx
c0020e93:	0f 20 e0             	mov    eax,cr4
c0020e96:	0d 00 00 04 00       	or     eax,0x40000
c0020e9b:	0f 22 e0             	mov    cr4,eax
c0020e9e:	31 c9                	xor    ecx,ecx
c0020ea0:	0f 01 d0             	xgetbv 
c0020ea3:	0d 07 00 00 00       	or     eax,0x7
c0020ea8:	0f 01 d1             	xsetbv 
c0020eab:	59                   	pop    ecx
c0020eac:	58                   	pop    eax
c0020ead:	c3                   	ret    

c0020eae <avxClose>:
c0020eae:	c3                   	ret    

c0020eaf <wouldSheSayYes>:
c0020eaf:	c3                   	ret    
c0020eb0:	49                   	dec    ecx
c0020eb1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020eb5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020eb9:	75 20                	jne    c0020edb <isr0+0xb>
c0020ebb:	4e                   	dec    esi
c0020ebc:	79 61                	jns    c0020f1f <isr7+0x3>
c0020ebe:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020ec3:	66 90                	xchg   ax,ax
c0020ec5:	66 90                	xchg   ax,ax
c0020ec7:	66 90                	xchg   ax,ax
c0020ec9:	66 90                	xchg   ax,ax
c0020ecb:	66 90                	xchg   ax,ax
c0020ecd:	66 90                	xchg   ax,ax
c0020ecf:	90                   	nop

c0020ed0 <isr0>:
c0020ed0:	fa                   	cli    
c0020ed1:	68 00 00 00 00       	push   0x0
c0020ed6:	68 00 00 00 00       	push   0x0
c0020edb:	e9 44 01 00 00       	jmp    c0021024 <int_common_stub>

c0020ee0 <isr1>:
c0020ee0:	fa                   	cli    
c0020ee1:	6a 00                	push   0x0
c0020ee3:	6a 01                	push   0x1
c0020ee5:	e9 3a 01 00 00       	jmp    c0021024 <int_common_stub>

c0020eea <isr2>:
c0020eea:	fa                   	cli    
c0020eeb:	6a 00                	push   0x0
c0020eed:	6a 02                	push   0x2
c0020eef:	e9 30 01 00 00       	jmp    c0021024 <int_common_stub>

c0020ef4 <isr3>:
c0020ef4:	fa                   	cli    
c0020ef5:	6a 00                	push   0x0
c0020ef7:	6a 03                	push   0x3
c0020ef9:	e9 26 01 00 00       	jmp    c0021024 <int_common_stub>

c0020efe <isr4>:
c0020efe:	fa                   	cli    
c0020eff:	6a 00                	push   0x0
c0020f01:	6a 04                	push   0x4
c0020f03:	e9 1c 01 00 00       	jmp    c0021024 <int_common_stub>

c0020f08 <isr5>:
c0020f08:	fa                   	cli    
c0020f09:	6a 00                	push   0x0
c0020f0b:	6a 05                	push   0x5
c0020f0d:	e9 12 01 00 00       	jmp    c0021024 <int_common_stub>

c0020f12 <isr6>:
c0020f12:	fa                   	cli    
c0020f13:	6a 00                	push   0x0
c0020f15:	6a 06                	push   0x6
c0020f17:	e9 08 01 00 00       	jmp    c0021024 <int_common_stub>

c0020f1c <isr7>:
c0020f1c:	fa                   	cli    
c0020f1d:	6a 00                	push   0x0
c0020f1f:	6a 07                	push   0x7
c0020f21:	e9 fe 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f26 <isr8>:
c0020f26:	fa                   	cli    
c0020f27:	6a 08                	push   0x8
c0020f29:	e9 f6 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f2e <isr9>:
c0020f2e:	fa                   	cli    
c0020f2f:	6a 00                	push   0x0
c0020f31:	6a 09                	push   0x9
c0020f33:	e9 ec 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f38 <isr10>:
c0020f38:	fa                   	cli    
c0020f39:	6a 0a                	push   0xa
c0020f3b:	e9 e4 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f40 <isr11>:
c0020f40:	fa                   	cli    
c0020f41:	6a 0b                	push   0xb
c0020f43:	e9 dc 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f48 <isr12>:
c0020f48:	fa                   	cli    
c0020f49:	6a 0c                	push   0xc
c0020f4b:	e9 d4 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f50 <isr13>:
c0020f50:	fa                   	cli    
c0020f51:	6a 0d                	push   0xd
c0020f53:	e9 cc 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f58 <isr14>:
c0020f58:	fa                   	cli    
c0020f59:	6a 0e                	push   0xe
c0020f5b:	e9 c4 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f60 <isr15>:
c0020f60:	fa                   	cli    
c0020f61:	6a 00                	push   0x0
c0020f63:	6a 0f                	push   0xf
c0020f65:	e9 ba 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f6a <isr16>:
c0020f6a:	fa                   	cli    
c0020f6b:	6a 00                	push   0x0
c0020f6d:	6a 10                	push   0x10
c0020f6f:	e9 b0 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f74 <isr17>:
c0020f74:	fa                   	cli    
c0020f75:	6a 00                	push   0x0
c0020f77:	6a 11                	push   0x11
c0020f79:	e9 a6 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f7e <isr18>:
c0020f7e:	fa                   	cli    
c0020f7f:	6a 00                	push   0x0
c0020f81:	6a 12                	push   0x12
c0020f83:	e9 9c 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f88 <irq3>:
c0020f88:	fa                   	cli    
c0020f89:	6a 00                	push   0x0
c0020f8b:	6a 23                	push   0x23
c0020f8d:	e9 92 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f92 <irq4>:
c0020f92:	fa                   	cli    
c0020f93:	6a 00                	push   0x0
c0020f95:	6a 24                	push   0x24
c0020f97:	e9 88 00 00 00       	jmp    c0021024 <int_common_stub>

c0020f9c <irq5>:
c0020f9c:	fa                   	cli    
c0020f9d:	6a 00                	push   0x0
c0020f9f:	6a 25                	push   0x25
c0020fa1:	e9 7e 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fa6 <irq6>:
c0020fa6:	fa                   	cli    
c0020fa7:	6a 00                	push   0x0
c0020fa9:	6a 26                	push   0x26
c0020fab:	e9 74 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fb0 <irq7>:
c0020fb0:	fa                   	cli    
c0020fb1:	6a 00                	push   0x0
c0020fb3:	6a 27                	push   0x27
c0020fb5:	e9 6a 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fba <irq8>:
c0020fba:	fa                   	cli    
c0020fbb:	6a 00                	push   0x0
c0020fbd:	6a 28                	push   0x28
c0020fbf:	e9 60 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fc4 <irq9>:
c0020fc4:	fa                   	cli    
c0020fc5:	6a 00                	push   0x0
c0020fc7:	6a 29                	push   0x29
c0020fc9:	e9 56 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fce <irq10>:
c0020fce:	fa                   	cli    
c0020fcf:	6a 00                	push   0x0
c0020fd1:	6a 2a                	push   0x2a
c0020fd3:	e9 4c 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fd8 <irq11>:
c0020fd8:	fa                   	cli    
c0020fd9:	6a 00                	push   0x0
c0020fdb:	6a 2b                	push   0x2b
c0020fdd:	e9 42 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fe2 <irq12>:
c0020fe2:	fa                   	cli    
c0020fe3:	6a 00                	push   0x0
c0020fe5:	6a 2c                	push   0x2c
c0020fe7:	e9 38 00 00 00       	jmp    c0021024 <int_common_stub>

c0020fec <irq13>:
c0020fec:	fa                   	cli    
c0020fed:	6a 00                	push   0x0
c0020fef:	6a 2d                	push   0x2d
c0020ff1:	e9 2e 00 00 00       	jmp    c0021024 <int_common_stub>

c0020ff6 <irq14>:
c0020ff6:	fa                   	cli    
c0020ff7:	6a 00                	push   0x0
c0020ff9:	6a 2e                	push   0x2e
c0020ffb:	e9 24 00 00 00       	jmp    c0021024 <int_common_stub>

c0021000 <irq15>:
c0021000:	fa                   	cli    
c0021001:	6a 00                	push   0x0
c0021003:	6a 2f                	push   0x2f
c0021005:	e9 1a 00 00 00       	jmp    c0021024 <int_common_stub>

c002100a <irq1>:
c002100a:	fa                   	cli    
c002100b:	6a 00                	push   0x0
c002100d:	6a 21                	push   0x21
c002100f:	eb 13                	jmp    c0021024 <int_common_stub>

c0021011 <irq2>:
c0021011:	fa                   	cli    
c0021012:	6a 00                	push   0x0
c0021014:	6a 22                	push   0x22
c0021016:	eb 0c                	jmp    c0021024 <int_common_stub>

c0021018 <isr96>:
c0021018:	6a 00                	push   0x0
c002101a:	6a 60                	push   0x60
c002101c:	fb                   	sti    
c002101d:	eb 05                	jmp    c0021024 <int_common_stub>

c002101f <irq0>:
c002101f:	fa                   	cli    
c0021020:	6a 00                	push   0x0
c0021022:	6a 20                	push   0x20

c0021024 <int_common_stub>:
c0021024:	60                   	pusha  
c0021025:	1e                   	push   ds
c0021026:	06                   	push   es
c0021027:	0f a0                	push   fs
c0021029:	0f a8                	push   gs
c002102b:	66 b8 10 00          	mov    ax,0x10
c002102f:	66 8e d8             	mov    ds,ax
c0021032:	66 8e c0             	mov    es,ax
c0021035:	66 8e e0             	mov    fs,ax
c0021038:	66 8e e8             	mov    gs,ax
c002103b:	54                   	push   esp
c002103c:	fc                   	cld    
c002103d:	e8 36 d0 fe ff       	call   c000e078 <int_handler>
c0021042:	81 c4 04 00 00 00    	add    esp,0x4
c0021048:	0f a9                	pop    gs
c002104a:	0f a1                	pop    fs
c002104c:	07                   	pop    es
c002104d:	1f                   	pop    ds
c002104e:	61                   	popa   
c002104f:	81 c4 08 00 00 00    	add    esp,0x8
c0021055:	cf                   	iret   

c0021056 <irq16>:
c0021056:	fa                   	cli    
c0021057:	6a 00                	push   0x0
c0021059:	6a 30                	push   0x30
c002105b:	e9 c4 ff ff ff       	jmp    c0021024 <int_common_stub>

c0021060 <irq17>:
c0021060:	fa                   	cli    
c0021061:	6a 00                	push   0x0
c0021063:	6a 31                	push   0x31
c0021065:	e9 ba ff ff ff       	jmp    c0021024 <int_common_stub>

c002106a <irq18>:
c002106a:	fa                   	cli    
c002106b:	6a 00                	push   0x0
c002106d:	6a 32                	push   0x32
c002106f:	e9 b0 ff ff ff       	jmp    c0021024 <int_common_stub>

c0021074 <irq19>:
c0021074:	fa                   	cli    
c0021075:	6a 00                	push   0x0
c0021077:	6a 33                	push   0x33
c0021079:	e9 a6 ff ff ff       	jmp    c0021024 <int_common_stub>

c002107e <irq20>:
c002107e:	fa                   	cli    
c002107f:	6a 00                	push   0x0
c0021081:	6a 34                	push   0x34
c0021083:	e9 9c ff ff ff       	jmp    c0021024 <int_common_stub>

c0021088 <irq21>:
c0021088:	fa                   	cli    
c0021089:	6a 00                	push   0x0
c002108b:	6a 35                	push   0x35
c002108d:	e9 92 ff ff ff       	jmp    c0021024 <int_common_stub>

c0021092 <irq22>:
c0021092:	fa                   	cli    
c0021093:	6a 00                	push   0x0
c0021095:	6a 36                	push   0x36
c0021097:	e9 88 ff ff ff       	jmp    c0021024 <int_common_stub>

c002109c <irq23>:
c002109c:	fa                   	cli    
c002109d:	6a 00                	push   0x0
c002109f:	6a 37                	push   0x37
c00210a1:	e9 7e ff ff ff       	jmp    c0021024 <int_common_stub>
c00210a6:	66 90                	xchg   ax,ax
c00210a8:	66 90                	xchg   ax,ax
c00210aa:	66 90                	xchg   ax,ax
c00210ac:	66 90                	xchg   ax,ax
c00210ae:	66 90                	xchg   ax,ax

c00210b0 <i386GetRDRAND>:
c00210b0:	b9 64 00 00 00       	mov    ecx,0x64

c00210b5 <retry>:
c00210b5:	0f c7 f0             	rdrand eax
c00210b8:	72 05                	jb     c00210bf <retry.done>
c00210ba:	e2 f9                	loop   c00210b5 <retry>

c00210bc <retry.fail>:
c00210bc:	31 c0                	xor    eax,eax
c00210be:	c3                   	ret    

c00210bf <retry.done>:
c00210bf:	c3                   	ret    

c00210c0 <absolutelyNoChanceInHell>:
c00210c0:	b8 01 00 00 00       	mov    eax,0x1
c00210c5:	0f a2                	cpuid  
c00210c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00210cd:	74 06                	je     c00210d5 <sseDetect.noSSE>
c00210cf:	b8 01 00 00 00       	mov    eax,0x1
c00210d4:	c3                   	ret    

c00210d5 <sseDetect.noSSE>:
c00210d5:	31 c0                	xor    eax,eax
c00210d7:	c3                   	ret    

c00210d8 <sseSave>:
c00210d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210dc:	0f ae 00             	fxsave [eax]
c00210df:	c3                   	ret    

c00210e0 <sseLoad>:
c00210e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210e4:	0f ae 08             	fxrstor [eax]
c00210e7:	c3                   	ret    

c00210e8 <sseInit>:
c00210e8:	e8 42 00 00 00       	call   c002112f <x87Init>
c00210ed:	0f 20 e0             	mov    eax,cr4
c00210f0:	66 0d 00 06          	or     ax,0x600
c00210f4:	0f 22 e0             	mov    cr4,eax
c00210f7:	c3                   	ret    

c00210f8 <sseClose>:
c00210f8:	c3                   	ret    
c00210f9:	66 90                	xchg   ax,ax
c00210fb:	66 90                	xchg   ax,ax
c00210fd:	66 90                	xchg   ax,ax
c00210ff:	90                   	nop

c0021100 <value_37F>:
c0021100:	7f 03                	jg     c0021105 <value_37A+0x1>

c0021102 <value_37E>:
c0021102:	7e 03                	jle    c0021107 <x87Detect+0x1>

c0021104 <value_37A>:
c0021104:	7a 03                	jp     c0021109 <x87Detect+0x3>

c0021106 <x87Detect>:
c0021106:	b8 01 00 00 00       	mov    eax,0x1
c002110b:	0f a2                	cpuid  
c002110d:	f7 c2 01 00 00 00    	test   edx,0x1
c0021113:	74 06                	je     c002111b <x87Detect.nox87>
c0021115:	b8 01 00 00 00       	mov    eax,0x1
c002111a:	c3                   	ret    

c002111b <x87Detect.nox87>:
c002111b:	b8 00 00 00 00       	mov    eax,0x0
c0021120:	c3                   	ret    

c0021121 <x87Save>:
c0021121:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021125:	dd 30                	fnsave [eax]
c0021127:	c3                   	ret    

c0021128 <x87Load>:
c0021128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002112c:	dd 20                	frstor [eax]
c002112e:	c3                   	ret    

c002112f <x87Init>:
c002112f:	0f 20 c0             	mov    eax,cr0
c0021132:	66 25 fb ff          	and    ax,0xfffb
c0021136:	66 0d 22 00          	or     ax,0x22
c002113a:	0f 22 c0             	mov    cr0,eax
c002113d:	db e3                	fninit 
c002113f:	0f 06                	clts   
c0021141:	d9 2d 04 11 02 c0    	fldcw  WORD PTR ds:0xc0021104
c0021147:	c3                   	ret    

c0021148 <x87Close>:
c0021148:	c3                   	ret    
c0021149:	66 90                	xchg   ax,ax
c002114b:	90                   	nop

c002114c <__do_global_ctors_aux>:
c002114c:	a1 10 21 02 c0       	mov    eax,ds:0xc0022110
c0021151:	83 f8 ff             	cmp    eax,0xffffffff
c0021154:	74 1a                	je     c0021170 <__do_global_ctors_aux+0x24>
c0021156:	55                   	push   ebp
c0021157:	89 e5                	mov    ebp,esp
c0021159:	53                   	push   ebx
c002115a:	52                   	push   edx
c002115b:	bb 10 21 02 c0       	mov    ebx,0xc0022110
c0021160:	ff d0                	call   eax
c0021162:	83 eb 04             	sub    ebx,0x4
c0021165:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021167:	83 f8 ff             	cmp    eax,0xffffffff
c002116a:	75 f4                	jne    c0021160 <__do_global_ctors_aux+0x14>
c002116c:	58                   	pop    eax
c002116d:	5b                   	pop    ebx
c002116e:	5d                   	pop    ebp
c002116f:	c3                   	ret    
c0021170:	c3                   	ret    
c0021171:	66 90                	xchg   ax,ax
c0021173:	90                   	nop

c0021174 <__divdi3>:
c0021174:	55                   	push   ebp
c0021175:	57                   	push   edi
c0021176:	56                   	push   esi
c0021177:	53                   	push   ebx
c0021178:	83 ec 1c             	sub    esp,0x1c
c002117b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002117f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021183:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021186:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002118a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002118e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021192:	85 db                	test   ebx,ebx
c0021194:	0f 88 8e 00 00 00    	js     c0021228 <__divdi3+0xb4>
c002119a:	89 dd                	mov    ebp,ebx
c002119c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00211a4:	89 d3                	mov    ebx,edx
c00211a6:	85 d2                	test   edx,edx
c00211a8:	79 0d                	jns    c00211b7 <__divdi3+0x43>
c00211aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00211ae:	f7 d8                	neg    eax
c00211b0:	83 d2 00             	adc    edx,0x0
c00211b3:	f7 da                	neg    edx
c00211b5:	89 d3                	mov    ebx,edx
c00211b7:	89 c7                	mov    edi,eax
c00211b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00211bc:	85 db                	test   ebx,ebx
c00211be:	75 48                	jne    c0021208 <__divdi3+0x94>
c00211c0:	39 ef                	cmp    edi,ebp
c00211c2:	76 24                	jbe    c00211e8 <__divdi3+0x74>
c00211c4:	89 ea                	mov    edx,ebp
c00211c6:	f7 f7                	div    edi
c00211c8:	89 c1                	mov    ecx,eax
c00211ca:	31 f6                	xor    esi,esi
c00211cc:	89 c8                	mov    eax,ecx
c00211ce:	89 f2                	mov    edx,esi
c00211d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00211d4:	85 c9                	test   ecx,ecx
c00211d6:	74 07                	je     c00211df <__divdi3+0x6b>
c00211d8:	f7 d8                	neg    eax
c00211da:	83 d2 00             	adc    edx,0x0
c00211dd:	f7 da                	neg    edx
c00211df:	83 c4 1c             	add    esp,0x1c
c00211e2:	5b                   	pop    ebx
c00211e3:	5e                   	pop    esi
c00211e4:	5f                   	pop    edi
c00211e5:	5d                   	pop    ebp
c00211e6:	c3                   	ret    
c00211e7:	90                   	nop
c00211e8:	85 ff                	test   edi,edi
c00211ea:	75 0b                	jne    c00211f7 <__divdi3+0x83>
c00211ec:	b8 01 00 00 00       	mov    eax,0x1
c00211f1:	31 d2                	xor    edx,edx
c00211f3:	f7 f3                	div    ebx
c00211f5:	89 c7                	mov    edi,eax
c00211f7:	31 d2                	xor    edx,edx
c00211f9:	89 e8                	mov    eax,ebp
c00211fb:	f7 f7                	div    edi
c00211fd:	89 c6                	mov    esi,eax
c00211ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021202:	f7 f7                	div    edi
c0021204:	89 c1                	mov    ecx,eax
c0021206:	eb c4                	jmp    c00211cc <__divdi3+0x58>
c0021208:	39 eb                	cmp    ebx,ebp
c002120a:	77 3c                	ja     c0021248 <__divdi3+0xd4>
c002120c:	0f bd f3             	bsr    esi,ebx
c002120f:	83 f6 1f             	xor    esi,0x1f
c0021212:	75 40                	jne    c0021254 <__divdi3+0xe0>
c0021214:	39 eb                	cmp    ebx,ebp
c0021216:	72 09                	jb     c0021221 <__divdi3+0xad>
c0021218:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002121b:	0f 87 97 00 00 00    	ja     c00212b8 <__divdi3+0x144>
c0021221:	b9 01 00 00 00       	mov    ecx,0x1
c0021226:	eb a4                	jmp    c00211cc <__divdi3+0x58>
c0021228:	f7 d9                	neg    ecx
c002122a:	83 d3 00             	adc    ebx,0x0
c002122d:	f7 db                	neg    ebx
c002122f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021232:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021236:	89 dd                	mov    ebp,ebx
c0021238:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021240:	e9 5f ff ff ff       	jmp    c00211a4 <__divdi3+0x30>
c0021245:	8d 76 00             	lea    esi,[esi+0x0]
c0021248:	31 f6                	xor    esi,esi
c002124a:	31 c9                	xor    ecx,ecx
c002124c:	e9 7b ff ff ff       	jmp    c00211cc <__divdi3+0x58>
c0021251:	8d 76 00             	lea    esi,[esi+0x0]
c0021254:	b8 20 00 00 00       	mov    eax,0x20
c0021259:	29 f0                	sub    eax,esi
c002125b:	89 f1                	mov    ecx,esi
c002125d:	d3 e3                	shl    ebx,cl
c002125f:	89 fa                	mov    edx,edi
c0021261:	88 c1                	mov    cl,al
c0021263:	d3 ea                	shr    edx,cl
c0021265:	09 da                	or     edx,ebx
c0021267:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002126b:	89 f1                	mov    ecx,esi
c002126d:	d3 e7                	shl    edi,cl
c002126f:	89 eb                	mov    ebx,ebp
c0021271:	88 c1                	mov    cl,al
c0021273:	d3 eb                	shr    ebx,cl
c0021275:	89 f1                	mov    ecx,esi
c0021277:	d3 e5                	shl    ebp,cl
c0021279:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002127c:	88 c1                	mov    cl,al
c002127e:	d3 ea                	shr    edx,cl
c0021280:	09 d5                	or     ebp,edx
c0021282:	89 e8                	mov    eax,ebp
c0021284:	89 da                	mov    edx,ebx
c0021286:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002128a:	89 d3                	mov    ebx,edx
c002128c:	89 c5                	mov    ebp,eax
c002128e:	f7 e7                	mul    edi
c0021290:	39 d3                	cmp    ebx,edx
c0021292:	72 18                	jb     c00212ac <__divdi3+0x138>
c0021294:	74 0a                	je     c00212a0 <__divdi3+0x12c>
c0021296:	89 e9                	mov    ecx,ebp
c0021298:	31 f6                	xor    esi,esi
c002129a:	e9 2d ff ff ff       	jmp    c00211cc <__divdi3+0x58>
c002129f:	90                   	nop
c00212a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00212a3:	89 f1                	mov    ecx,esi
c00212a5:	d3 e7                	shl    edi,cl
c00212a7:	39 c7                	cmp    edi,eax
c00212a9:	73 eb                	jae    c0021296 <__divdi3+0x122>
c00212ab:	90                   	nop
c00212ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00212af:	31 f6                	xor    esi,esi
c00212b1:	e9 16 ff ff ff       	jmp    c00211cc <__divdi3+0x58>
c00212b6:	66 90                	xchg   ax,ax
c00212b8:	31 c9                	xor    ecx,ecx
c00212ba:	e9 0d ff ff ff       	jmp    c00211cc <__divdi3+0x58>
c00212bf:	90                   	nop

c00212c0 <__moddi3>:
c00212c0:	55                   	push   ebp
c00212c1:	57                   	push   edi
c00212c2:	56                   	push   esi
c00212c3:	53                   	push   ebx
c00212c4:	83 ec 2c             	sub    esp,0x2c
c00212c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00212cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00212cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00212d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00212d7:	85 db                	test   ebx,ebx
c00212d9:	0f 88 85 00 00 00    	js     c0021364 <__moddi3+0xa4>
c00212df:	89 de                	mov    esi,ebx
c00212e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00212e9:	89 d7                	mov    edi,edx
c00212eb:	85 d2                	test   edx,edx
c00212ed:	79 09                	jns    c00212f8 <__moddi3+0x38>
c00212ef:	f7 d8                	neg    eax
c00212f1:	83 d2 00             	adc    edx,0x0
c00212f4:	f7 da                	neg    edx
c00212f6:	89 d7                	mov    edi,edx
c00212f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212fc:	89 cd                	mov    ebp,ecx
c00212fe:	85 ff                	test   edi,edi
c0021300:	75 52                	jne    c0021354 <__moddi3+0x94>
c0021302:	89 c3                	mov    ebx,eax
c0021304:	39 f0                	cmp    eax,esi
c0021306:	76 24                	jbe    c002132c <__moddi3+0x6c>
c0021308:	89 c8                	mov    eax,ecx
c002130a:	89 f2                	mov    edx,esi
c002130c:	f7 f3                	div    ebx
c002130e:	89 d6                	mov    esi,edx
c0021310:	89 f0                	mov    eax,esi
c0021312:	31 d2                	xor    edx,edx
c0021314:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021318:	85 c9                	test   ecx,ecx
c002131a:	74 07                	je     c0021323 <__moddi3+0x63>
c002131c:	f7 d8                	neg    eax
c002131e:	83 d2 00             	adc    edx,0x0
c0021321:	f7 da                	neg    edx
c0021323:	83 c4 2c             	add    esp,0x2c
c0021326:	5b                   	pop    ebx
c0021327:	5e                   	pop    esi
c0021328:	5f                   	pop    edi
c0021329:	5d                   	pop    ebp
c002132a:	c3                   	ret    
c002132b:	90                   	nop
c002132c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021330:	85 db                	test   ebx,ebx
c0021332:	75 0d                	jne    c0021341 <__moddi3+0x81>
c0021334:	b8 01 00 00 00       	mov    eax,0x1
c0021339:	31 d2                	xor    edx,edx
c002133b:	f7 f7                	div    edi
c002133d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021341:	89 f0                	mov    eax,esi
c0021343:	31 d2                	xor    edx,edx
c0021345:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021349:	f7 f7                	div    edi
c002134b:	89 e8                	mov    eax,ebp
c002134d:	f7 f7                	div    edi
c002134f:	89 d6                	mov    esi,edx
c0021351:	eb bd                	jmp    c0021310 <__moddi3+0x50>
c0021353:	90                   	nop
c0021354:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021358:	39 f7                	cmp    edi,esi
c002135a:	76 20                	jbe    c002137c <__moddi3+0xbc>
c002135c:	89 c8                	mov    eax,ecx
c002135e:	89 f2                	mov    edx,esi
c0021360:	eb b2                	jmp    c0021314 <__moddi3+0x54>
c0021362:	66 90                	xchg   ax,ax
c0021364:	f7 d9                	neg    ecx
c0021366:	83 d3 00             	adc    ebx,0x0
c0021369:	f7 db                	neg    ebx
c002136b:	89 de                	mov    esi,ebx
c002136d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021375:	e9 6f ff ff ff       	jmp    c00212e9 <__moddi3+0x29>
c002137a:	66 90                	xchg   ax,ax
c002137c:	0f bd c7             	bsr    eax,edi
c002137f:	83 f0 1f             	xor    eax,0x1f
c0021382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021386:	75 24                	jne    c00213ac <__moddi3+0xec>
c0021388:	39 f7                	cmp    edi,esi
c002138a:	72 06                	jb     c0021392 <__moddi3+0xd2>
c002138c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021390:	77 0c                	ja     c002139e <__moddi3+0xde>
c0021392:	89 e9                	mov    ecx,ebp
c0021394:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021398:	19 fe                	sbb    esi,edi
c002139a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002139e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213a2:	89 f2                	mov    edx,esi
c00213a4:	e9 6b ff ff ff       	jmp    c0021314 <__moddi3+0x54>
c00213a9:	8d 76 00             	lea    esi,[esi+0x0]
c00213ac:	b8 20 00 00 00       	mov    eax,0x20
c00213b1:	89 c2                	mov    edx,eax
c00213b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00213b7:	29 da                	sub    edx,ebx
c00213b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00213bd:	88 d9                	mov    cl,bl
c00213bf:	d3 e7                	shl    edi,cl
c00213c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213c5:	88 d1                	mov    cl,dl
c00213c7:	d3 e8                	shr    eax,cl
c00213c9:	09 c7                	or     edi,eax
c00213cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00213cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00213d3:	89 d8                	mov    eax,ebx
c00213d5:	88 d9                	mov    cl,bl
c00213d7:	d3 e7                	shl    edi,cl
c00213d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00213dd:	89 f3                	mov    ebx,esi
c00213df:	88 d1                	mov    cl,dl
c00213e1:	d3 eb                	shr    ebx,cl
c00213e3:	89 c7                	mov    edi,eax
c00213e5:	88 c1                	mov    cl,al
c00213e7:	d3 e6                	shl    esi,cl
c00213e9:	89 e8                	mov    eax,ebp
c00213eb:	88 d1                	mov    cl,dl
c00213ed:	d3 e8                	shr    eax,cl
c00213ef:	09 f0                	or     eax,esi
c00213f1:	89 f9                	mov    ecx,edi
c00213f3:	d3 e5                	shl    ebp,cl
c00213f5:	89 da                	mov    edx,ebx
c00213f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00213fb:	89 d3                	mov    ebx,edx
c00213fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021401:	89 c6                	mov    esi,eax
c0021403:	89 d1                	mov    ecx,edx
c0021405:	39 d3                	cmp    ebx,edx
c0021407:	72 27                	jb     c0021430 <__moddi3+0x170>
c0021409:	74 21                	je     c002142c <__moddi3+0x16c>
c002140b:	29 f5                	sub    ebp,esi
c002140d:	19 cb                	sbb    ebx,ecx
c002140f:	89 de                	mov    esi,ebx
c0021411:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021415:	d3 e6                	shl    esi,cl
c0021417:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002141b:	89 f9                	mov    ecx,edi
c002141d:	d3 ed                	shr    ebp,cl
c002141f:	09 ee                	or     esi,ebp
c0021421:	89 f0                	mov    eax,esi
c0021423:	d3 eb                	shr    ebx,cl
c0021425:	89 da                	mov    edx,ebx
c0021427:	e9 e8 fe ff ff       	jmp    c0021314 <__moddi3+0x54>
c002142c:	39 c5                	cmp    ebp,eax
c002142e:	73 db                	jae    c002140b <__moddi3+0x14b>
c0021430:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021434:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021438:	89 d1                	mov    ecx,edx
c002143a:	89 c6                	mov    esi,eax
c002143c:	eb cd                	jmp    c002140b <__moddi3+0x14b>
c002143e:	66 90                	xchg   ax,ax

c0021440 <__udivdi3>:
c0021440:	55                   	push   ebp
c0021441:	57                   	push   edi
c0021442:	56                   	push   esi
c0021443:	53                   	push   ebx
c0021444:	83 ec 1c             	sub    esp,0x1c
c0021447:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002144b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002144f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021453:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021457:	85 d2                	test   edx,edx
c0021459:	75 41                	jne    c002149c <__udivdi3+0x5c>
c002145b:	39 f7                	cmp    edi,esi
c002145d:	76 15                	jbe    c0021474 <__udivdi3+0x34>
c002145f:	89 e8                	mov    eax,ebp
c0021461:	89 f2                	mov    edx,esi
c0021463:	f7 f7                	div    edi
c0021465:	31 db                	xor    ebx,ebx
c0021467:	89 da                	mov    edx,ebx
c0021469:	83 c4 1c             	add    esp,0x1c
c002146c:	5b                   	pop    ebx
c002146d:	5e                   	pop    esi
c002146e:	5f                   	pop    edi
c002146f:	5d                   	pop    ebp
c0021470:	c3                   	ret    
c0021471:	8d 76 00             	lea    esi,[esi+0x0]
c0021474:	89 f9                	mov    ecx,edi
c0021476:	85 ff                	test   edi,edi
c0021478:	75 0b                	jne    c0021485 <__udivdi3+0x45>
c002147a:	b8 01 00 00 00       	mov    eax,0x1
c002147f:	31 d2                	xor    edx,edx
c0021481:	f7 f7                	div    edi
c0021483:	89 c1                	mov    ecx,eax
c0021485:	31 d2                	xor    edx,edx
c0021487:	89 f0                	mov    eax,esi
c0021489:	f7 f1                	div    ecx
c002148b:	89 c3                	mov    ebx,eax
c002148d:	89 e8                	mov    eax,ebp
c002148f:	f7 f1                	div    ecx
c0021491:	89 da                	mov    edx,ebx
c0021493:	83 c4 1c             	add    esp,0x1c
c0021496:	5b                   	pop    ebx
c0021497:	5e                   	pop    esi
c0021498:	5f                   	pop    edi
c0021499:	5d                   	pop    ebp
c002149a:	c3                   	ret    
c002149b:	90                   	nop
c002149c:	39 f2                	cmp    edx,esi
c002149e:	77 1c                	ja     c00214bc <__udivdi3+0x7c>
c00214a0:	0f bd da             	bsr    ebx,edx
c00214a3:	83 f3 1f             	xor    ebx,0x1f
c00214a6:	75 24                	jne    c00214cc <__udivdi3+0x8c>
c00214a8:	39 f2                	cmp    edx,esi
c00214aa:	72 08                	jb     c00214b4 <__udivdi3+0x74>
c00214ac:	39 ef                	cmp    edi,ebp
c00214ae:	0f 87 84 00 00 00    	ja     c0021538 <__udivdi3+0xf8>
c00214b4:	b8 01 00 00 00       	mov    eax,0x1
c00214b9:	eb ac                	jmp    c0021467 <__udivdi3+0x27>
c00214bb:	90                   	nop
c00214bc:	31 db                	xor    ebx,ebx
c00214be:	31 c0                	xor    eax,eax
c00214c0:	89 da                	mov    edx,ebx
c00214c2:	83 c4 1c             	add    esp,0x1c
c00214c5:	5b                   	pop    ebx
c00214c6:	5e                   	pop    esi
c00214c7:	5f                   	pop    edi
c00214c8:	5d                   	pop    ebp
c00214c9:	c3                   	ret    
c00214ca:	66 90                	xchg   ax,ax
c00214cc:	b8 20 00 00 00       	mov    eax,0x20
c00214d1:	29 d8                	sub    eax,ebx
c00214d3:	88 d9                	mov    cl,bl
c00214d5:	d3 e2                	shl    edx,cl
c00214d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00214db:	89 fa                	mov    edx,edi
c00214dd:	88 c1                	mov    cl,al
c00214df:	d3 ea                	shr    edx,cl
c00214e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214e5:	09 d1                	or     ecx,edx
c00214e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00214eb:	88 d9                	mov    cl,bl
c00214ed:	d3 e7                	shl    edi,cl
c00214ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00214f3:	89 f7                	mov    edi,esi
c00214f5:	88 c1                	mov    cl,al
c00214f7:	d3 ef                	shr    edi,cl
c00214f9:	88 d9                	mov    cl,bl
c00214fb:	d3 e6                	shl    esi,cl
c00214fd:	89 ea                	mov    edx,ebp
c00214ff:	88 c1                	mov    cl,al
c0021501:	d3 ea                	shr    edx,cl
c0021503:	09 d6                	or     esi,edx
c0021505:	89 f0                	mov    eax,esi
c0021507:	89 fa                	mov    edx,edi
c0021509:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002150d:	89 d7                	mov    edi,edx
c002150f:	89 c6                	mov    esi,eax
c0021511:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021515:	39 d7                	cmp    edi,edx
c0021517:	72 13                	jb     c002152c <__udivdi3+0xec>
c0021519:	74 09                	je     c0021524 <__udivdi3+0xe4>
c002151b:	89 f0                	mov    eax,esi
c002151d:	31 db                	xor    ebx,ebx
c002151f:	e9 43 ff ff ff       	jmp    c0021467 <__udivdi3+0x27>
c0021524:	88 d9                	mov    cl,bl
c0021526:	d3 e5                	shl    ebp,cl
c0021528:	39 c5                	cmp    ebp,eax
c002152a:	73 ef                	jae    c002151b <__udivdi3+0xdb>
c002152c:	8d 46 ff             	lea    eax,[esi-0x1]
c002152f:	31 db                	xor    ebx,ebx
c0021531:	e9 31 ff ff ff       	jmp    c0021467 <__udivdi3+0x27>
c0021536:	66 90                	xchg   ax,ax
c0021538:	31 c0                	xor    eax,eax
c002153a:	e9 28 ff ff ff       	jmp    c0021467 <__udivdi3+0x27>
c002153f:	90                   	nop

c0021540 <__umoddi3>:
c0021540:	55                   	push   ebp
c0021541:	57                   	push   edi
c0021542:	56                   	push   esi
c0021543:	53                   	push   ebx
c0021544:	83 ec 1c             	sub    esp,0x1c
c0021547:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002154b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002154f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021553:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021557:	89 da                	mov    edx,ebx
c0021559:	85 c0                	test   eax,eax
c002155b:	75 37                	jne    c0021594 <__umoddi3+0x54>
c002155d:	39 df                	cmp    edi,ebx
c002155f:	76 13                	jbe    c0021574 <__umoddi3+0x34>
c0021561:	89 f0                	mov    eax,esi
c0021563:	f7 f7                	div    edi
c0021565:	89 d0                	mov    eax,edx
c0021567:	31 d2                	xor    edx,edx
c0021569:	83 c4 1c             	add    esp,0x1c
c002156c:	5b                   	pop    ebx
c002156d:	5e                   	pop    esi
c002156e:	5f                   	pop    edi
c002156f:	5d                   	pop    ebp
c0021570:	c3                   	ret    
c0021571:	8d 76 00             	lea    esi,[esi+0x0]
c0021574:	89 fd                	mov    ebp,edi
c0021576:	85 ff                	test   edi,edi
c0021578:	75 0b                	jne    c0021585 <__umoddi3+0x45>
c002157a:	b8 01 00 00 00       	mov    eax,0x1
c002157f:	31 d2                	xor    edx,edx
c0021581:	f7 f7                	div    edi
c0021583:	89 c5                	mov    ebp,eax
c0021585:	89 d8                	mov    eax,ebx
c0021587:	31 d2                	xor    edx,edx
c0021589:	f7 f5                	div    ebp
c002158b:	89 f0                	mov    eax,esi
c002158d:	f7 f5                	div    ebp
c002158f:	89 d0                	mov    eax,edx
c0021591:	eb d4                	jmp    c0021567 <__umoddi3+0x27>
c0021593:	90                   	nop
c0021594:	89 f1                	mov    ecx,esi
c0021596:	39 d8                	cmp    eax,ebx
c0021598:	76 0a                	jbe    c00215a4 <__umoddi3+0x64>
c002159a:	89 f0                	mov    eax,esi
c002159c:	83 c4 1c             	add    esp,0x1c
c002159f:	5b                   	pop    ebx
c00215a0:	5e                   	pop    esi
c00215a1:	5f                   	pop    edi
c00215a2:	5d                   	pop    ebp
c00215a3:	c3                   	ret    
c00215a4:	0f bd e8             	bsr    ebp,eax
c00215a7:	83 f5 1f             	xor    ebp,0x1f
c00215aa:	75 1c                	jne    c00215c8 <__umoddi3+0x88>
c00215ac:	39 d8                	cmp    eax,ebx
c00215ae:	72 04                	jb     c00215b4 <__umoddi3+0x74>
c00215b0:	39 f7                	cmp    edi,esi
c00215b2:	77 08                	ja     c00215bc <__umoddi3+0x7c>
c00215b4:	89 da                	mov    edx,ebx
c00215b6:	29 fe                	sub    esi,edi
c00215b8:	19 c2                	sbb    edx,eax
c00215ba:	89 f1                	mov    ecx,esi
c00215bc:	89 c8                	mov    eax,ecx
c00215be:	83 c4 1c             	add    esp,0x1c
c00215c1:	5b                   	pop    ebx
c00215c2:	5e                   	pop    esi
c00215c3:	5f                   	pop    edi
c00215c4:	5d                   	pop    ebp
c00215c5:	c3                   	ret    
c00215c6:	66 90                	xchg   ax,ax
c00215c8:	ba 20 00 00 00       	mov    edx,0x20
c00215cd:	29 ea                	sub    edx,ebp
c00215cf:	89 e9                	mov    ecx,ebp
c00215d1:	d3 e0                	shl    eax,cl
c00215d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215d7:	89 f8                	mov    eax,edi
c00215d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00215dd:	88 d1                	mov    cl,dl
c00215df:	d3 e8                	shr    eax,cl
c00215e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00215e5:	09 c1                	or     ecx,eax
c00215e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00215eb:	89 e9                	mov    ecx,ebp
c00215ed:	d3 e7                	shl    edi,cl
c00215ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00215f3:	89 d8                	mov    eax,ebx
c00215f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00215f9:	88 d1                	mov    cl,dl
c00215fb:	d3 e8                	shr    eax,cl
c00215fd:	89 c7                	mov    edi,eax
c00215ff:	89 e9                	mov    ecx,ebp
c0021601:	d3 e3                	shl    ebx,cl
c0021603:	89 f0                	mov    eax,esi
c0021605:	88 d1                	mov    cl,dl
c0021607:	d3 e8                	shr    eax,cl
c0021609:	09 d8                	or     eax,ebx
c002160b:	89 e9                	mov    ecx,ebp
c002160d:	d3 e6                	shl    esi,cl
c002160f:	89 f3                	mov    ebx,esi
c0021611:	89 fa                	mov    edx,edi
c0021613:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021617:	89 d1                	mov    ecx,edx
c0021619:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002161d:	89 c6                	mov    esi,eax
c002161f:	89 d7                	mov    edi,edx
c0021621:	39 d1                	cmp    ecx,edx
c0021623:	72 27                	jb     c002164c <__umoddi3+0x10c>
c0021625:	74 21                	je     c0021648 <__umoddi3+0x108>
c0021627:	89 ca                	mov    edx,ecx
c0021629:	29 f3                	sub    ebx,esi
c002162b:	19 fa                	sbb    edx,edi
c002162d:	89 d0                	mov    eax,edx
c002162f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021633:	d3 e0                	shl    eax,cl
c0021635:	89 e9                	mov    ecx,ebp
c0021637:	d3 eb                	shr    ebx,cl
c0021639:	09 d8                	or     eax,ebx
c002163b:	d3 ea                	shr    edx,cl
c002163d:	83 c4 1c             	add    esp,0x1c
c0021640:	5b                   	pop    ebx
c0021641:	5e                   	pop    esi
c0021642:	5f                   	pop    edi
c0021643:	5d                   	pop    ebp
c0021644:	c3                   	ret    
c0021645:	8d 76 00             	lea    esi,[esi+0x0]
c0021648:	39 c3                	cmp    ebx,eax
c002164a:	73 db                	jae    c0021627 <__umoddi3+0xe7>
c002164c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021650:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021654:	89 d7                	mov    edi,edx
c0021656:	89 c6                	mov    esi,eax
c0021658:	eb cd                	jmp    c0021627 <__umoddi3+0xe7>

Disassembly of section .init:

c002165a <_init>:
c002165a:	55                   	push   ebp
c002165b:	89 e5                	mov    ebp,esp
c002165d:	e8 b6 ea fd ff       	call   c0000118 <frame_dummy>
c0021662:	e8 e5 fa ff ff       	call   c002114c <__do_global_ctors_aux>
c0021667:	5d                   	pop    ebp
c0021668:	c3                   	ret    

Disassembly of section .fini:

c0021669 <_fini>:
c0021669:	55                   	push   ebp
c002166a:	89 e5                	mov    ebp,esp
c002166c:	e8 37 ea fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021671:	5d                   	pop    ebp
c0021672:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021674 <Computer::~Computer()>:
c0021674:	83 ec 0c             	sub    esp,0xc
c0021677:	ba cc 29 02 c0       	mov    edx,0xc00229cc
c002167c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021680:	89 10                	mov    DWORD PTR [eax],edx
c0021682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021686:	83 ec 0c             	sub    esp,0xc
c0021689:	50                   	push   eax
c002168a:	e8 d5 c3 fe ff       	call   c000da64 <Device::~Device()>
c002168f:	83 c4 10             	add    esp,0x10
c0021692:	90                   	nop
c0021693:	83 c4 0c             	add    esp,0xc
c0021696:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021698 <Computer::~Computer()>:
c0021698:	83 ec 0c             	sub    esp,0xc
c002169b:	83 ec 0c             	sub    esp,0xc
c002169e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216a2:	e8 cd ff ff ff       	call   c0021674 <Computer::~Computer()>
c00216a7:	83 c4 10             	add    esp,0x10
c00216aa:	83 ec 08             	sub    esp,0x8
c00216ad:	68 ec 01 00 00       	push   0x1ec
c00216b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216b6:	e8 49 af fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c00216bb:	83 c4 10             	add    esp,0x10
c00216be:	83 c4 0c             	add    esp,0xc
c00216c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00216c2 <idleCommon()>:
c00216c2:	83 ec 0c             	sub    esp,0xc
c00216c5:	fa                   	cli    
c00216c6:	ff 05 a8 97 02 c0    	inc    DWORD PTR ds:0xc00297a8
c00216cc:	e8 b3 48 ff ff       	call   c0015f84 <schedule()>
c00216d1:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c00216d6:	48                   	dec    eax
c00216d7:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c00216dc:	75 01                	jne    c00216df <idleCommon()+0x1d>
c00216de:	fb                   	sti    
c00216df:	83 c4 0c             	add    esp,0xc
c00216e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00216e4 <LinkedList<UnixFile>::~LinkedList()>:
c00216e4:	90                   	nop
c00216e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00216e6 <LinkedList<UnixFile>::LinkedList()>:
c00216e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00216f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00216fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002170a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021714:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002171b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002171f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021726:	90                   	nop
c0021727:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021728 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021728:	83 ec 0c             	sub    esp,0xc
c002172b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021730:	75 10                	jne    c0021742 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021732:	83 ec 0c             	sub    esp,0xc
c0021735:	68 18 2d 02 c0       	push   0xc0022d18
c002173a:	e8 10 13 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021746:	8b 00                	mov    eax,DWORD PTR [eax]
c0021748:	85 c0                	test   eax,eax
c002174a:	74 34                	je     c0021780 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002174c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021750:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021753:	85 c0                	test   eax,eax
c0021755:	74 29                	je     c0021780 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002175e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021762:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021769:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002176d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021777:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002177e:	eb 65                	jmp    c00217e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021784:	8b 00                	mov    eax,DWORD PTR [eax]
c0021786:	85 c0                	test   eax,eax
c0021788:	75 4b                	jne    c00217d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002178a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021791:	85 c0                	test   eax,eax
c0021793:	75 40                	jne    c00217d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021799:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002179d:	89 10                	mov    DWORD PTR [eax],edx
c002179f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00217aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00217b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217bf:	85 c0                	test   eax,eax
c00217c1:	74 22                	je     c00217e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00217c3:	83 ec 0c             	sub    esp,0xc
c00217c6:	68 3a 2d 02 c0       	push   0xc0022d3a
c00217cb:	e8 7f 12 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00217d0:	83 c4 10             	add    esp,0x10
c00217d3:	eb 10                	jmp    c00217e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00217d5:	83 ec 0c             	sub    esp,0xc
c00217d8:	68 44 2d 02 c0       	push   0xc0022d44
c00217dd:	e8 6d 12 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00217e2:	83 c4 10             	add    esp,0x10
c00217e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217ec:	8d 50 01             	lea    edx,[eax+0x1]
c00217ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217f6:	90                   	nop
c00217f7:	83 c4 0c             	add    esp,0xc
c00217fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00217fc <LinkedList<UnixFile>::getFirstElement()>:
c00217fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021800:	8b 00                	mov    eax,DWORD PTR [eax]
c0021802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021804 <LinkedList<UnixFile>::removeFirst()>:
c0021804:	83 ec 0c             	sub    esp,0xc
c0021807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002180b:	8b 00                	mov    eax,DWORD PTR [eax]
c002180d:	85 c0                	test   eax,eax
c002180f:	75 12                	jne    c0021823 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021811:	83 ec 0c             	sub    esp,0xc
c0021814:	68 50 2d 02 c0       	push   0xc0022d50
c0021819:	e8 31 12 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c002181e:	83 c4 10             	add    esp,0x10
c0021821:	eb 7e                	jmp    c00218a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021827:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002182a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002182d:	85 c0                	test   eax,eax
c002182f:	74 10                	je     c0021841 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021831:	83 ec 0c             	sub    esp,0xc
c0021834:	68 9b 2d 02 c0       	push   0xc0022d9b
c0021839:	e8 11 12 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c002183e:	83 c4 10             	add    esp,0x10
c0021841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021845:	8b 00                	mov    eax,DWORD PTR [eax]
c0021847:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002184a:	85 c0                	test   eax,eax
c002184c:	75 33                	jne    c0021881 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002184e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021867:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002186a:	83 f8 01             	cmp    eax,0x1
c002186d:	74 21                	je     c0021890 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002186f:	83 ec 0c             	sub    esp,0xc
c0021872:	68 74 2d 02 c0       	push   0xc0022d74
c0021877:	e8 d3 11 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c002187c:	83 c4 10             	add    esp,0x10
c002187f:	eb 0f                	jmp    c0021890 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021885:	8b 00                	mov    eax,DWORD PTR [eax]
c0021887:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002188a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188e:	89 10                	mov    DWORD PTR [eax],edx
c0021890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021894:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021897:	8d 50 ff             	lea    edx,[eax-0x1]
c002189a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002189e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00218a1:	83 c4 0c             	add    esp,0xc
c00218a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00218a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00218a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00218ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00218ae <DriverlessDevice::~DriverlessDevice()>:
c00218ae:	ba 7c 35 02 c0       	mov    edx,0xc002357c
c00218b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b7:	89 10                	mov    DWORD PTR [eax],edx
c00218b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218bd:	50                   	push   eax
c00218be:	e8 a1 c1 fe ff       	call   c000da64 <Device::~Device()>
c00218c3:	83 c4 04             	add    esp,0x4
c00218c6:	90                   	nop
c00218c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00218c8 <DriverlessDevice::~DriverlessDevice()>:
c00218c8:	83 ec 0c             	sub    esp,0xc
c00218cb:	83 ec 0c             	sub    esp,0xc
c00218ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218d2:	e8 d7 ff ff ff       	call   c00218ae <DriverlessDevice::~DriverlessDevice()>
c00218d7:	83 c4 10             	add    esp,0x10
c00218da:	83 ec 08             	sub    esp,0x8
c00218dd:	68 58 01 00 00       	push   0x158
c00218e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218e6:	e8 19 ad fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c00218eb:	83 c4 10             	add    esp,0x10
c00218ee:	83 c4 0c             	add    esp,0xc
c00218f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00218f2 <LinkedList<Device>::addElement(Device*)>:
c00218f2:	83 ec 0c             	sub    esp,0xc
c00218f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00218fa:	75 10                	jne    c002190c <LinkedList<Device>::addElement(Device*)+0x1a>
c00218fc:	83 ec 0c             	sub    esp,0xc
c00218ff:	68 18 2d 02 c0       	push   0xc0022d18
c0021904:	e8 46 11 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021909:	83 c4 10             	add    esp,0x10
c002190c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021910:	8b 00                	mov    eax,DWORD PTR [eax]
c0021912:	85 c0                	test   eax,eax
c0021914:	74 3a                	je     c0021950 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002191a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002191d:	85 c0                	test   eax,eax
c002191f:	74 2f                	je     c0021950 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021925:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021928:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002192c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021936:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002193a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002193d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021941:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021944:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002194e:	eb 68                	jmp    c00219b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021954:	8b 00                	mov    eax,DWORD PTR [eax]
c0021956:	85 c0                	test   eax,eax
c0021958:	75 4e                	jne    c00219a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002195a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002195e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021961:	85 c0                	test   eax,eax
c0021963:	75 43                	jne    c00219a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021969:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002196d:	89 10                	mov    DWORD PTR [eax],edx
c002196f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021977:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002197a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021981:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002198b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021992:	85 c0                	test   eax,eax
c0021994:	74 22                	je     c00219b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021996:	83 ec 0c             	sub    esp,0xc
c0021999:	68 3a 2d 02 c0       	push   0xc0022d3a
c002199e:	e8 ac 10 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00219a3:	83 c4 10             	add    esp,0x10
c00219a6:	eb 10                	jmp    c00219b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c00219a8:	83 ec 0c             	sub    esp,0xc
c00219ab:	68 44 2d 02 c0       	push   0xc0022d44
c00219b0:	e8 9a 10 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c00219b5:	83 c4 10             	add    esp,0x10
c00219b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219bf:	8d 50 01             	lea    edx,[eax+0x1]
c00219c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00219c9:	90                   	nop
c00219ca:	83 c4 0c             	add    esp,0xc
c00219cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00219ce <LinkedList<Device>::LinkedList()>:
c00219ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00219ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021a03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021a0e:	90                   	nop
c0021a0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021a10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a16:	85 c0                	test   eax,eax
c0021a18:	75 0e                	jne    c0021a28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021a1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a21:	85 c0                	test   eax,eax
c0021a23:	75 03                	jne    c0021a28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021a25:	b0 01                	mov    al,0x1
c0021a27:	c3                   	ret    
c0021a28:	b0 00                	mov    al,0x0
c0021a2a:	90                   	nop
c0021a2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021a2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a30:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021a34:	83 ec 0c             	sub    esp,0xc
c0021a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a3d:	85 c0                	test   eax,eax
c0021a3f:	75 17                	jne    c0021a58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021a41:	83 ec 0c             	sub    esp,0xc
c0021a44:	68 50 2d 02 c0       	push   0xc0022d50
c0021a49:	e8 01 10 ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021a4e:	83 c4 10             	add    esp,0x10
c0021a51:	e9 92 00 00 00       	jmp    c0021ae8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0021a56:	66 90                	xchg   ax,ax
c0021a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021a62:	85 c0                	test   eax,eax
c0021a64:	0f 95 c0             	setne  al
c0021a67:	84 c0                	test   al,al
c0021a69:	74 11                	je     c0021a7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0021a6b:	83 ec 0c             	sub    esp,0xc
c0021a6e:	68 9b 2d 02 c0       	push   0xc0022d9b
c0021a73:	e8 d7 0f ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021a78:	83 c4 10             	add    esp,0x10
c0021a7b:	90                   	nop
c0021a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021a85:	85 c0                	test   eax,eax
c0021a87:	0f 94 c0             	sete   al
c0021a8a:	84 c0                	test   al,al
c0021a8c:	74 36                	je     c0021ac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0021a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aa7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021aaa:	83 f8 01             	cmp    eax,0x1
c0021aad:	74 25                	je     c0021ad4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021aaf:	83 ec 0c             	sub    esp,0xc
c0021ab2:	68 74 2d 02 c0       	push   0xc0022d74
c0021ab7:	e8 93 0f ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021abc:	83 c4 10             	add    esp,0x10
c0021abf:	eb 13                	jmp    c0021ad4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0021ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021aca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad1:	89 10                	mov    DWORD PTR [eax],edx
c0021ad3:	90                   	nop
c0021ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021adb:	8d 50 ff             	lea    edx,[eax-0x1]
c0021ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ae8:	83 c4 0c             	add    esp,0xc
c0021aeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021aec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021af4:	75 12                	jne    c0021b08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021af6:	83 ec 0c             	sub    esp,0xc
c0021af9:	68 18 2d 02 c0       	push   0xc0022d18
c0021afe:	e8 4c 0f ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021b03:	83 c4 10             	add    esp,0x10
c0021b06:	66 90                	xchg   ax,ax
c0021b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b0e:	85 c0                	test   eax,eax
c0021b10:	74 36                	je     c0021b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b19:	85 c0                	test   eax,eax
c0021b1b:	74 2b                	je     c0021b48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b28:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021b44:	eb 6a                	jmp    c0021bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021b46:	66 90                	xchg   ax,ax
c0021b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b4e:	85 c0                	test   eax,eax
c0021b50:	75 4e                	jne    c0021ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b59:	85 c0                	test   eax,eax
c0021b5b:	75 43                	jne    c0021ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b65:	89 10                	mov    DWORD PTR [eax],edx
c0021b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b87:	85 c0                	test   eax,eax
c0021b89:	74 25                	je     c0021bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021b8b:	83 ec 0c             	sub    esp,0xc
c0021b8e:	68 3a 2d 02 c0       	push   0xc0022d3a
c0021b93:	e8 b7 0e ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021b98:	83 c4 10             	add    esp,0x10
c0021b9b:	eb 13                	jmp    c0021bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0021ba0:	83 ec 0c             	sub    esp,0xc
c0021ba3:	68 44 2d 02 c0       	push   0xc0022d44
c0021ba8:	e8 a2 0e ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021bad:	83 c4 10             	add    esp,0x10
c0021bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0021bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bc1:	90                   	nop
c0021bc2:	83 c4 0c             	add    esp,0xc
c0021bc5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021bc8 <ACPI::~ACPI()>:
c0021bc8:	83 ec 0c             	sub    esp,0xc
c0021bcb:	ba f0 3c 02 c0       	mov    edx,0xc0023cf0
c0021bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd4:	89 10                	mov    DWORD PTR [eax],edx
c0021bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bda:	83 ec 0c             	sub    esp,0xc
c0021bdd:	50                   	push   eax
c0021bde:	e8 81 be fe ff       	call   c000da64 <Device::~Device()>
c0021be3:	83 c4 10             	add    esp,0x10
c0021be6:	90                   	nop
c0021be7:	83 c4 0c             	add    esp,0xc
c0021bea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021bec <ACPI::~ACPI()>:
c0021bec:	83 ec 0c             	sub    esp,0xc
c0021bef:	83 ec 0c             	sub    esp,0xc
c0021bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bf6:	e8 cd ff ff ff       	call   c0021bc8 <ACPI::~ACPI()>
c0021bfb:	83 c4 10             	add    esp,0x10
c0021bfe:	83 ec 08             	sub    esp,0x8
c0021c01:	68 64 12 00 00       	push   0x1264
c0021c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c0a:	e8 f5 a9 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021c0f:	83 c4 10             	add    esp,0x10
c0021c12:	83 c4 0c             	add    esp,0xc
c0021c15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021c18 <LinkedList<Device>::~LinkedList()>:
c0021c18:	90                   	nop
c0021c19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021c1c <LinkedList<Device>::isEmpty()>:
c0021c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c22:	85 c0                	test   eax,eax
c0021c24:	75 0e                	jne    c0021c34 <LinkedList<Device>::isEmpty()+0x18>
c0021c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c2d:	85 c0                	test   eax,eax
c0021c2f:	75 03                	jne    c0021c34 <LinkedList<Device>::isEmpty()+0x18>
c0021c31:	b0 01                	mov    al,0x1
c0021c33:	c3                   	ret    
c0021c34:	b0 00                	mov    al,0x0
c0021c36:	90                   	nop
c0021c37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021c38 <LinkedList<Device>::getFirstElement()>:
c0021c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021c40 <LinkedList<Device>::removeFirst()>:
c0021c40:	83 ec 0c             	sub    esp,0xc
c0021c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c49:	85 c0                	test   eax,eax
c0021c4b:	75 17                	jne    c0021c64 <LinkedList<Device>::removeFirst()+0x24>
c0021c4d:	83 ec 0c             	sub    esp,0xc
c0021c50:	68 50 2d 02 c0       	push   0xc0022d50
c0021c55:	e8 f5 0d ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021c5a:	83 c4 10             	add    esp,0x10
c0021c5d:	e9 92 00 00 00       	jmp    c0021cf4 <LinkedList<Device>::removeFirst()+0xb4>
c0021c62:	66 90                	xchg   ax,ax
c0021c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c6b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021c71:	85 c0                	test   eax,eax
c0021c73:	74 13                	je     c0021c88 <LinkedList<Device>::removeFirst()+0x48>
c0021c75:	83 ec 0c             	sub    esp,0xc
c0021c78:	68 9b 2d 02 c0       	push   0xc0022d9b
c0021c7d:	e8 cd 0d ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021c82:	83 c4 10             	add    esp,0x10
c0021c85:	8d 76 00             	lea    esi,[esi+0x0]
c0021c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c8e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021c94:	85 c0                	test   eax,eax
c0021c96:	75 34                	jne    c0021ccc <LinkedList<Device>::removeFirst()+0x8c>
c0021c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cb4:	83 f8 01             	cmp    eax,0x1
c0021cb7:	74 27                	je     c0021ce0 <LinkedList<Device>::removeFirst()+0xa0>
c0021cb9:	83 ec 0c             	sub    esp,0xc
c0021cbc:	68 74 2d 02 c0       	push   0xc0022d74
c0021cc1:	e8 89 0d ff ff       	call   c0012a4f <Krnl::panic(char const*)>
c0021cc6:	83 c4 10             	add    esp,0x10
c0021cc9:	eb 15                	jmp    c0021ce0 <LinkedList<Device>::removeFirst()+0xa0>
c0021ccb:	90                   	nop
c0021ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cd2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cdc:	89 10                	mov    DWORD PTR [eax],edx
c0021cde:	66 90                	xchg   ax,ax
c0021ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ce7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0021cf4:	83 c4 0c             	add    esp,0xc
c0021cf7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0021cf8 <CPU::~CPU()>:
c0021cf8:	83 ec 0c             	sub    esp,0xc
c0021cfb:	ba dc 3e 02 c0       	mov    edx,0xc0023edc
c0021d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d04:	89 10                	mov    DWORD PTR [eax],edx
c0021d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0a:	83 ec 0c             	sub    esp,0xc
c0021d0d:	50                   	push   eax
c0021d0e:	e8 51 bd fe ff       	call   c000da64 <Device::~Device()>
c0021d13:	83 c4 10             	add    esp,0x10
c0021d16:	90                   	nop
c0021d17:	83 c4 0c             	add    esp,0xc
c0021d1a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021d1c <CPU::~CPU()>:
c0021d1c:	83 ec 0c             	sub    esp,0xc
c0021d1f:	83 ec 0c             	sub    esp,0xc
c0021d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d26:	e8 cd ff ff ff       	call   c0021cf8 <CPU::~CPU()>
c0021d2b:	83 c4 10             	add    esp,0x10
c0021d2e:	83 ec 08             	sub    esp,0x8
c0021d31:	68 94 11 00 00       	push   0x1194
c0021d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d3a:	e8 c5 a8 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	83 c4 0c             	add    esp,0xc
c0021d45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021d48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021d48:	90                   	nop
c0021d49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021d4c <ThreadControlBlock::ThreadControlBlock()>:
c0021d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d50:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021d57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d5b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d66:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021d6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d71:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0021d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d7c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d87:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0021d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d8f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021d93:	90                   	nop
c0021d94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021d98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021da6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021db1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021dd8:	90                   	nop
c0021dd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021ddc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021ddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021de0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021de3:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021de4 <Vm::_FPUState::_FPUState()>:
c0021de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021de8:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021def:	90                   	nop
c0021df0:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021df2 <PCI::~PCI()>:
c0021df2:	83 ec 0c             	sub    esp,0xc
c0021df5:	ba 94 50 02 c0       	mov    edx,0xc0025094
c0021dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dfe:	89 10                	mov    DWORD PTR [eax],edx
c0021e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	50                   	push   eax
c0021e08:	e8 e7 b6 fe ff       	call   c000d4f4 <Bus::~Bus()>
c0021e0d:	83 c4 10             	add    esp,0x10
c0021e10:	90                   	nop
c0021e11:	83 c4 0c             	add    esp,0xc
c0021e14:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021e16 <PCI::~PCI()>:
c0021e16:	83 ec 0c             	sub    esp,0xc
c0021e19:	83 ec 0c             	sub    esp,0xc
c0021e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e20:	e8 cd ff ff ff       	call   c0021df2 <PCI::~PCI()>
c0021e25:	83 c4 10             	add    esp,0x10
c0021e28:	83 ec 08             	sub    esp,0x8
c0021e2b:	68 5c 01 00 00       	push   0x15c
c0021e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e34:	e8 cb a7 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021e39:	83 c4 10             	add    esp,0x10
c0021e3c:	83 c4 0c             	add    esp,0xc
c0021e3f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021e40 <IDE::~IDE()>:
c0021e40:	83 ec 0c             	sub    esp,0xc
c0021e43:	ba 64 51 02 c0       	mov    edx,0xc0025164
c0021e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4c:	89 10                	mov    DWORD PTR [eax],edx
c0021e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e52:	83 ec 0c             	sub    esp,0xc
c0021e55:	50                   	push   eax
c0021e56:	e8 ed c0 fe ff       	call   c000df48 <HardDiskController::~HardDiskController()>
c0021e5b:	83 c4 10             	add    esp,0x10
c0021e5e:	90                   	nop
c0021e5f:	83 c4 0c             	add    esp,0xc
c0021e62:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021e64 <IDE::~IDE()>:
c0021e64:	83 ec 0c             	sub    esp,0xc
c0021e67:	83 ec 0c             	sub    esp,0xc
c0021e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e6e:	e8 cd ff ff ff       	call   c0021e40 <IDE::~IDE()>
c0021e73:	83 c4 10             	add    esp,0x10
c0021e76:	83 ec 08             	sub    esp,0x8
c0021e79:	68 70 02 00 00       	push   0x270
c0021e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e82:	e8 7d a7 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021e87:	83 c4 10             	add    esp,0x10
c0021e8a:	83 c4 0c             	add    esp,0xc
c0021e8d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021e8e <SATABus::~SATABus()>:
c0021e8e:	83 ec 0c             	sub    esp,0xc
c0021e91:	ba 30 52 02 c0       	mov    edx,0xc0025230
c0021e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e9a:	89 10                	mov    DWORD PTR [eax],edx
c0021e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea0:	83 ec 0c             	sub    esp,0xc
c0021ea3:	50                   	push   eax
c0021ea4:	e8 9f c0 fe ff       	call   c000df48 <HardDiskController::~HardDiskController()>
c0021ea9:	83 c4 10             	add    esp,0x10
c0021eac:	90                   	nop
c0021ead:	83 c4 0c             	add    esp,0xc
c0021eb0:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021eb2 <SATABus::~SATABus()>:
c0021eb2:	83 ec 0c             	sub    esp,0xc
c0021eb5:	83 ec 0c             	sub    esp,0xc
c0021eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ebc:	e8 cd ff ff ff       	call   c0021e8e <SATABus::~SATABus()>
c0021ec1:	83 c4 10             	add    esp,0x10
c0021ec4:	83 ec 08             	sub    esp,0x8
c0021ec7:	68 64 01 00 00       	push   0x164
c0021ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ed0:	e8 2f a7 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021ed5:	83 c4 10             	add    esp,0x10
c0021ed8:	83 c4 0c             	add    esp,0xc
c0021edb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021edc <ATA::~ATA()>:
c0021edc:	83 ec 0c             	sub    esp,0xc
c0021edf:	ba a8 52 02 c0       	mov    edx,0xc00252a8
c0021ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee8:	89 10                	mov    DWORD PTR [eax],edx
c0021eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eee:	83 ec 0c             	sub    esp,0xc
c0021ef1:	50                   	push   eax
c0021ef2:	e8 33 c1 fe ff       	call   c000e02a <PhysicalDisk::~PhysicalDisk()>
c0021ef7:	83 c4 10             	add    esp,0x10
c0021efa:	90                   	nop
c0021efb:	83 c4 0c             	add    esp,0xc
c0021efe:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021f00 <ATA::~ATA()>:
c0021f00:	83 ec 0c             	sub    esp,0xc
c0021f03:	83 ec 0c             	sub    esp,0xc
c0021f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f0a:	e8 cd ff ff ff       	call   c0021edc <ATA::~ATA()>
c0021f0f:	83 c4 10             	add    esp,0x10
c0021f12:	83 ec 08             	sub    esp,0x8
c0021f15:	68 7c 01 00 00       	push   0x17c
c0021f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f1e:	e8 e1 a6 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021f23:	83 c4 10             	add    esp,0x10
c0021f26:	83 c4 0c             	add    esp,0xc
c0021f29:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021f2a <ATAPI::~ATAPI()>:
c0021f2a:	83 ec 0c             	sub    esp,0xc
c0021f2d:	ba 20 53 02 c0       	mov    edx,0xc0025320
c0021f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f36:	89 10                	mov    DWORD PTR [eax],edx
c0021f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f3c:	83 ec 0c             	sub    esp,0xc
c0021f3f:	50                   	push   eax
c0021f40:	e8 e5 c0 fe ff       	call   c000e02a <PhysicalDisk::~PhysicalDisk()>
c0021f45:	83 c4 10             	add    esp,0x10
c0021f48:	90                   	nop
c0021f49:	83 c4 0c             	add    esp,0xc
c0021f4c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021f4e <ATAPI::~ATAPI()>:
c0021f4e:	83 ec 0c             	sub    esp,0xc
c0021f51:	83 ec 0c             	sub    esp,0xc
c0021f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f58:	e8 cd ff ff ff       	call   c0021f2a <ATAPI::~ATAPI()>
c0021f5d:	83 c4 10             	add    esp,0x10
c0021f60:	83 ec 08             	sub    esp,0x8
c0021f63:	68 84 01 00 00       	push   0x184
c0021f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f6c:	e8 93 a6 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021f71:	83 c4 10             	add    esp,0x10
c0021f74:	83 c4 0c             	add    esp,0xc
c0021f77:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021f78 <SATA::~SATA()>:
c0021f78:	83 ec 0c             	sub    esp,0xc
c0021f7b:	ba 5c 55 02 c0       	mov    edx,0xc002555c
c0021f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f84:	89 10                	mov    DWORD PTR [eax],edx
c0021f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f8a:	83 ec 0c             	sub    esp,0xc
c0021f8d:	50                   	push   eax
c0021f8e:	e8 97 c0 fe ff       	call   c000e02a <PhysicalDisk::~PhysicalDisk()>
c0021f93:	83 c4 10             	add    esp,0x10
c0021f96:	90                   	nop
c0021f97:	83 c4 0c             	add    esp,0xc
c0021f9a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021f9c <SATA::~SATA()>:
c0021f9c:	83 ec 0c             	sub    esp,0xc
c0021f9f:	83 ec 0c             	sub    esp,0xc
c0021fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fa6:	e8 cd ff ff ff       	call   c0021f78 <SATA::~SATA()>
c0021fab:	83 c4 10             	add    esp,0x10
c0021fae:	83 ec 08             	sub    esp,0x8
c0021fb1:	68 7c 01 00 00       	push   0x17c
c0021fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fba:	e8 45 a6 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c0021fbf:	83 c4 10             	add    esp,0x10
c0021fc2:	83 c4 0c             	add    esp,0xc
c0021fc5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021fc6 <SATAPI::~SATAPI()>:
c0021fc6:	83 ec 0c             	sub    esp,0xc
c0021fc9:	ba c8 56 02 c0       	mov    edx,0xc00256c8
c0021fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd2:	89 10                	mov    DWORD PTR [eax],edx
c0021fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	50                   	push   eax
c0021fdc:	e8 49 c0 fe ff       	call   c000e02a <PhysicalDisk::~PhysicalDisk()>
c0021fe1:	83 c4 10             	add    esp,0x10
c0021fe4:	90                   	nop
c0021fe5:	83 c4 0c             	add    esp,0xc
c0021fe8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021fea <SATAPI::~SATAPI()>:
c0021fea:	83 ec 0c             	sub    esp,0xc
c0021fed:	83 ec 0c             	sub    esp,0xc
c0021ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ff4:	e8 cd ff ff ff       	call   c0021fc6 <SATAPI::~SATAPI()>
c0021ff9:	83 c4 10             	add    esp,0x10
c0021ffc:	83 ec 08             	sub    esp,0x8
c0021fff:	68 84 01 00 00       	push   0x184
c0022004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022008:	e8 f7 a5 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c002200d:	83 c4 10             	add    esp,0x10
c0022010:	83 c4 0c             	add    esp,0xc
c0022013:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0022014 <IOAPIC::~IOAPIC()>:
c0022014:	83 ec 0c             	sub    esp,0xc
c0022017:	ba 1c 57 02 c0       	mov    edx,0xc002571c
c002201c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022020:	89 10                	mov    DWORD PTR [eax],edx
c0022022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022026:	83 ec 0c             	sub    esp,0xc
c0022029:	50                   	push   eax
c002202a:	e8 35 ba fe ff       	call   c000da64 <Device::~Device()>
c002202f:	83 c4 10             	add    esp,0x10
c0022032:	90                   	nop
c0022033:	83 c4 0c             	add    esp,0xc
c0022036:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022038 <IOAPIC::~IOAPIC()>:
c0022038:	83 ec 0c             	sub    esp,0xc
c002203b:	83 ec 0c             	sub    esp,0xc
c002203e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022042:	e8 cd ff ff ff       	call   c0022014 <IOAPIC::~IOAPIC()>
c0022047:	83 c4 10             	add    esp,0x10
c002204a:	83 ec 08             	sub    esp,0x8
c002204d:	68 68 01 00 00       	push   0x168
c0022052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022056:	e8 a9 a5 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c002205b:	83 c4 10             	add    esp,0x10
c002205e:	83 c4 0c             	add    esp,0xc
c0022061:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0022064 <APICTimer::~APICTimer()>:
c0022064:	83 ec 0c             	sub    esp,0xc
c0022067:	ba 64 57 02 c0       	mov    edx,0xc0025764
c002206c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022070:	89 10                	mov    DWORD PTR [eax],edx
c0022072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022076:	83 ec 0c             	sub    esp,0xc
c0022079:	50                   	push   eax
c002207a:	e8 69 d3 fe ff       	call   c000f3e8 <Timer::~Timer()>
c002207f:	83 c4 10             	add    esp,0x10
c0022082:	90                   	nop
c0022083:	83 c4 0c             	add    esp,0xc
c0022086:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022088 <APICTimer::~APICTimer()>:
c0022088:	83 ec 0c             	sub    esp,0xc
c002208b:	83 ec 0c             	sub    esp,0xc
c002208e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022092:	e8 cd ff ff ff       	call   c0022064 <APICTimer::~APICTimer()>
c0022097:	83 c4 10             	add    esp,0x10
c002209a:	83 ec 08             	sub    esp,0x8
c002209d:	68 60 01 00 00       	push   0x160
c00220a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220a6:	e8 59 a5 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c00220ab:	83 c4 10             	add    esp,0x10
c00220ae:	83 c4 0c             	add    esp,0xc
c00220b1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00220b4 <PIT::~PIT()>:
c00220b4:	83 ec 0c             	sub    esp,0xc
c00220b7:	ba b4 57 02 c0       	mov    edx,0xc00257b4
c00220bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c0:	89 10                	mov    DWORD PTR [eax],edx
c00220c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c6:	83 ec 0c             	sub    esp,0xc
c00220c9:	50                   	push   eax
c00220ca:	e8 19 d3 fe ff       	call   c000f3e8 <Timer::~Timer()>
c00220cf:	83 c4 10             	add    esp,0x10
c00220d2:	90                   	nop
c00220d3:	83 c4 0c             	add    esp,0xc
c00220d6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00220d8 <PIT::~PIT()>:
c00220d8:	83 ec 0c             	sub    esp,0xc
c00220db:	83 ec 0c             	sub    esp,0xc
c00220de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220e2:	e8 cd ff ff ff       	call   c00220b4 <PIT::~PIT()>
c00220e7:	83 c4 10             	add    esp,0x10
c00220ea:	83 ec 08             	sub    esp,0x8
c00220ed:	68 5c 01 00 00       	push   0x15c
c00220f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220f6:	e8 09 a5 fe ff       	call   c000c604 <operator delete(void*, unsigned long)>
c00220fb:	83 c4 10             	add    esp,0x10
c00220fe:	83 c4 0c             	add    esp,0xc
c0022101:	c3                   	ret    
