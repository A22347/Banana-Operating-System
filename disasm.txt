
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 42 f6 00 00       	call   c000f662 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 82 02 00       	call   c00282a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb fc 8e 02 c0       	mov    ebx,0xc0028efc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 08 8f 02 c0    	cmp    ebx,0xc0028f08
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 cc 02 c0       	mov    eax,0xc002cc98
c0000049:	3d 98 cc 02 c0       	cmp    eax,0xc002cc98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 cc 02 c0       	push   0xc002cc98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 cc 02 c0       	mov    eax,0xc002cc98
c0000075:	2d 98 cc 02 c0       	sub    eax,0xc002cc98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 cc 02 c0       	push   0xc002cc98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d2c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 10 8f 02 c0       	mov    ebx,0xc0028f10
c00000bb:	81 eb 0c 8f 02 c0    	sub    ebx,0xc0028f0c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 0c 8f 02 c0       	mov    esi,0xc0028f0c
c00000ca:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc d2 02 c0       	mov    ds:0xc002d2cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 cc 02 c0       	push   0xc002cc98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 d2 02 c0       	push   0xc002d2d0
c000012c:	68 98 cc 02 c0       	push   0xc002cc98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 e3 cd 01 00       	call   c001d186 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 ef 1f 01 00       	call   c00123aa <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 c1 cd 01 00       	call   c001d186 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 69 d2 01 00       	call   c001d64d <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 7f d8 01 00       	call   c001dc6c <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 d7 02 c0 	lgdtd  ds:0xc002d710
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 e7 3c 01 00       	call   c00142c9 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 d2 02 c0       	mov    ds:0xc002d2e8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 d2 02 c0    	mov    DWORD PTR ds:0xc002d2e8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2e8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 20 8f 02 c0 02 	test   BYTE PTR [edx-0x3ffd70e0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 20 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70e0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 20 8f 02 c0 08 	test   BYTE PTR [edx-0x3ffd70e0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 20 8f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd70e0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 20 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70e0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d300
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 d3 02 c0    	mov    DWORD PTR ds:0xc002d300,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 d3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2cfc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cfc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 d3 02 c0    	mov    DWORD PTR ds:0xc002d300,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d33c
c0000e38:	c7 42 0c 34 d3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d334
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c d3 02 c0    	mov    DWORD PTR ds:0xc002d33c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 d3 02 c0 02 	test   BYTE PTR ds:0xc002d300,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d300
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 d3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2cfc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 d3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2cfc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 d3 02 c0 	lea    edx,[eax*8-0x3ffd2ccc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d340
c00011ba:	81 fb 34 d3 02 c0    	cmp    ebx,0xc002d334
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 d3 02 c0       	cmp    eax,0xc002d334
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c d3 02 c0       	mov    ds:0xc002d33c,eax
c00011f6:	a3 40 d3 02 c0       	mov    ds:0xc002d340,eax
c00011fb:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d334
c0001209:	c7 40 0c 34 d3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d334
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 d3 02 c0       	mov    ds:0xc002d340,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d334
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 d2 02 c0 	lea    ebp,[edx*4-0x3ffd2d08]
c000125a:	8b 14 95 00 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d00]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 d3 02 c0 	lea    ecx,[edx*4-0x3ffd2d00]
c0001275:	8b 14 95 00 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d00]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 d6 02 c0 	or     DWORD PTR [edi*4-0x3ffd29cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 d3 02 c0 	lea    eax,[eax*8-0x3ffd2ccc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c d3 02 c0    	mov    DWORD PTR ds:0xc002d33c,ecx
c000132f:	89 0d 40 d3 02 c0    	mov    DWORD PTR ds:0xc002d340,ecx
c0001335:	c7 41 08 34 d3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d334
c000133c:	c7 41 0c 34 d3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d334
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c d3 02 c0 	lea    edx,[ecx*8-0x3ffd2cd4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd29cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd29cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c d3 02 c0 	lea    edx,[eax*4-0x3ffd2cd4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 d6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd29cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c d3 02 c0    	mov    DWORD PTR ds:0xc002d33c,edi
c0001402:	89 3d 40 d3 02 c0    	mov    DWORD PTR ds:0xc002d340,edi
c0001408:	c7 47 08 34 d3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d334
c000140f:	c7 47 0c 34 d3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d334
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 d3 02 c0    	mov    DWORD PTR ds:0xc002d330,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 d3 02 c0       	mov    edx,0xc002d300
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d300,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d654
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d654,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 d6 02 c0    	mov    DWORD PTR ds:0xc002d654,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c d3 02 c0    	mov    DWORD PTR ds:0xc002d32c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d300,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c d6 02 c0    	push   DWORD PTR ds:0xc002d65c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d300,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c d6 02 c0       	mov    eax,ds:0xc002d65c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d32c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2cfc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 d3 02 c0       	mov    eax,0xc002d334
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c d6 02 c0       	cmp    eax,0xc002d62c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 d6 02 c0       	mov    eax,ds:0xc002d668
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d650
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d664
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d674
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 24 90 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6fdc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 d3 02 c0       	mov    ds:0xc002d300,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 d6 02 c0    	mov    DWORD PTR ds:0xc002d644,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 d6 02 c0    	mov    DWORD PTR ds:0xc002d648,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c d6 02 c0    	mov    DWORD PTR ds:0xc002d64c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d654,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf240]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 aa ea 01 00       	jmp    c002069c <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf240]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 db ea 01 00       	jmp    c00206e3 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 0d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf240]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 03 eb 01 00       	jmp    c002072a <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 fa 46 02 00       	call   c0026604 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 40 91 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ec0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 40 91 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ec0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 40 90 02 c0       	mov    edx,0xc0029040
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 60 91 02 c0       	mov    edx,0xc0029160
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba d4 bb 02 c0       	mov    edx,0xc002bbd4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 6c 91 02 c0       	mov    edx,0xc002916c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 50 91 02 c0       	mov    edx,0xc0029150
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 d6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2960]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 d6 02 c0    	mov    ax,ds:0xc002d680
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 d6 02 c0    	mov    ds:0xc002d680,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 f7 34 02 00       	call   c0026604 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 72 91 02 c0       	mov    eax,0xc0029172
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad c0 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6f40]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 7b 91 02 c0       	mov    eax,0xc002917b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 40 91 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ec0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 c2 1e 02 00       	call   c0026604 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 50 91 02 c0       	mov    edx,0xc0029150
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 40 90 02 c0       	mov    edx,0xc0029040
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 50 90 02 c0       	mov    edx,0xc0029050
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2960]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2960],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 89 08 02 00       	call   c0026604 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 6f 08 02 00       	call   c0026604 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 97 90 02 c0       	mov    eax,0xc0029097
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 90 90 02 c0       	mov    eax,0xc0029090
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2960]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 80 90 02 c0       	mov    esi,0xc0029080
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 b2 ef 01 00       	call   c0026604 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 60 91 02 c0       	mov    edx,0xc0029160
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 60 90 02 c0       	mov    edx,0xc0029060
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 70 90 02 c0       	mov    edx,0xc0029070
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 82 91 02 c0       	mov    edx,0xc0029182
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 8e 91 02 c0       	mov    edx,0xc002918e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba a2 91 02 c0       	mov    edx,0xc00291a2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 33 71 00 00       	call   c000f59c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2d 71 00 00       	call   c000f5ac <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c c0 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc00294c0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 c0 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc00294c0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 c0 92 02 c0       	mov    eax,0xc00292c0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 00 92 02 c0       	mov    eax,0xc0029200
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 c0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e40]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 72 6e 00 00       	call   c000f5ac <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 5c 6e 00 00       	call   c000f5ac <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 06 f9 01 00       	call   c00280d7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 c9 f8 01 00       	call   c00280b9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 9d f8 01 00       	call   c00280d7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 50 ef 01 00       	call   c00277dc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 d2 f9 01 00       	call   c0028270 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 17 f8 01 00       	call   c00280d7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 59 f7 01 00       	call   c00280d7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 26 f7 01 00       	call   c00280b9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 13 f6 01 00       	call   c00280d7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 db f5 01 00       	call   c00280b9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 3b 6a 00 00       	call   c000f5cc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d6 69 00 00       	call   c000f5ac <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 e7 f3 01 00       	call   c00280d7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ac f3 01 00       	call   c00280b9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 20 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65e0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 bc f0 01 00       	call   c0027e6b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 3a ea 01 00       	call   c0027808 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 f6 f2 01 00       	call   c00280db <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 e4 f3 01 00       	call   c00281ff <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ce e9 01 00       	call   c0027808 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 79 f2 01 00       	call   c00280d5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 5a f2 01 00       	call   c00280d9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 f0 f3 01 00       	call   c0028290 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 9a ef 01 00       	call   c0027e6b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 18 e9 01 00       	call   c0027808 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 d4 f1 01 00       	call   c00280db <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 c2 f2 01 00       	call   c00281ff <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ac e8 01 00       	call   c0027808 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 57 f1 01 00       	call   c00280d5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 37 f1 01 00       	call   c00280d9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 cc f2 01 00       	call   c0028290 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 72 f0 01 00       	call   c00280d7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 30 f0 01 00       	call   c00280b9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 18 f0 01 00       	call   c00280d7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 8a ed 01 00       	call   c0027e6b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 8c e0 01 00       	call   c002718b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ef e6 01 00       	call   c0027808 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 41 ed 01 00       	call   c0027e6b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 47 e0 01 00       	call   c002718b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 16 ed 01 00       	call   c0027e6b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 66 ef 01 00       	call   c00280d5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 43 e6 01 00       	call   c00277dc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 c5 f0 01 00       	call   c0028270 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 ec ee 01 00       	call   c00280b9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 e7 e5 01 00       	call   c00277dc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 65 ec 01 00       	call   c0027e6b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 e8 e5 01 00       	call   c0027808 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 3a ec 01 00       	call   c0027e6b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 a1 e8 01 00       	call   c0027aec <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 20 df 01 00       	call   c002718b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 80 d8 01 00       	call   c0026b20 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 57 ef 01 00       	call   c00281ff <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 40 e5 01 00       	call   c0027808 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 27 ef 01 00       	call   c00281ff <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 99 de 01 00       	call   c002718b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 d2 ed 01 00       	call   c00280db <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ba e7 01 00       	call   c0027aec <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 40 de 01 00       	call   c002718b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 2e ef 01 00       	call   c0028290 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 00 eb 01 00       	call   c0027e6b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 57 e4 01 00       	call   c00277dc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 36 ed 01 00       	call   c00280d7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 cf dd 01 00       	call   c002718b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 fb e3 01 00       	call   c00277dc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 9d ee 01 00       	call   c0028290 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 4e ea 01 00       	call   c0027e6b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 cb e3 01 00       	call   c0027808 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 1e ea 01 00       	call   c0027e6b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 24 dd 01 00       	call   c002718b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 f4 e9 01 00       	call   c0027e6b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 46 ec 01 00       	call   c00280d7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 1d e3 01 00       	call   c00277dc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 9f ed 01 00       	call   c0028270 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 c6 eb 01 00       	call   c00280b9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 c0 e2 01 00       	call   c00277dc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 3e e9 01 00       	call   c0027e6b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 c1 e2 01 00       	call   c0027808 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 13 e9 01 00       	call   c0027e6b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 7a e5 01 00       	call   c0027aec <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 f9 db 01 00       	call   c002718b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 49 d5 01 00       	call   c0026b20 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 20 ec 01 00       	call   c00281ff <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 09 e2 01 00       	call   c0027808 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 f0 eb 01 00       	call   c00281ff <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 62 db 01 00       	call   c002718b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 9b ea 01 00       	call   c00280db <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 82 e4 01 00       	call   c0027aec <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 01 db 01 00       	call   c002718b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ef eb 01 00       	call   c0028290 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 c1 e7 01 00       	call   c0027e6b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 18 e1 01 00       	call   c00277dc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 f7 e9 01 00       	call   c00280d7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 90 da 01 00       	call   c002718b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 bc e0 01 00       	call   c00277dc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 31 e7 01 00       	call   c0027e6b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 37 da 01 00       	call   c002718b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 94 9a 02 c0       	mov    eax,0xc0029a94
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6f 5d 00 00       	call   c000f5ac <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 71 5d 00 00       	call   c000f5cc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ac e5 01 00       	call   c0027e6b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 2a df 01 00       	call   c0027808 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 bc d1 01 00       	call   c0026b20 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 93 e8 01 00       	call   c00281ff <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 7c de 01 00       	call   c0027808 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 5f e8 01 00       	call   c00281ff <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 d1 d7 01 00       	call   c002718b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 31 e8 01 00       	call   c00281ff <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 20 de 01 00       	call   c0027808 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 89 d7 01 00       	call   c002718b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 aa d0 01 00       	call   c0026b20 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 81 e7 01 00       	call   c00281ff <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 6a dd 01 00       	call   c0027808 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 4d e7 01 00       	call   c00281ff <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 bf d6 01 00       	call   c002718b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 1f e7 01 00       	call   c00281ff <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 0e dd 01 00       	call   c0027808 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 77 d6 01 00       	call   c002718b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 55 d6 01 00       	call   c002718b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 31 cf 01 00       	call   c0026b20 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 08 e6 01 00       	call   c00281ff <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 f1 db 01 00       	call   c0027808 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 d4 e5 01 00       	call   c00281ff <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 46 d5 01 00       	call   c002718b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 a6 e5 01 00       	call   c00281ff <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 8f db 01 00       	call   c0027808 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 f8 d4 01 00       	call   c002718b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 58 e5 01 00       	call   c00281ff <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 41 db 01 00       	call   c0027808 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 aa d4 01 00       	call   c002718b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 bf cd 01 00       	call   c0026b20 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 96 e4 01 00       	call   c00281ff <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 7f da 01 00       	call   c0027808 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 66 e4 01 00       	call   c00281ff <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 d8 d3 01 00       	call   c002718b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 38 e4 01 00       	call   c00281ff <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 21 da 01 00       	call   c0027808 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 8a d3 01 00       	call   c002718b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ea e3 01 00       	call   c00281ff <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 d3 d9 01 00       	call   c0027808 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 3c d3 01 00       	call   c002718b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 10 d3 01 00       	call   c002718b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 6d d9 01 00       	call   c0027808 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 29 e2 01 00       	call   c00280db <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 b8 d2 01 00       	call   c002718b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 15 d9 01 00       	call   c0027808 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 d1 e1 01 00       	call   c00280db <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 4b cb 01 00       	call   c0026b20 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 22 e2 01 00       	call   c00281ff <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 0b d8 01 00       	call   c0027808 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 ee e1 01 00       	call   c00281ff <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 60 d1 01 00       	call   c002718b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 c0 e1 01 00       	call   c00281ff <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 a9 d7 01 00       	call   c0027808 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 12 d1 01 00       	call   c002718b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 72 e1 01 00       	call   c00281ff <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 5b d7 01 00       	call   c0027808 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 c4 d0 01 00       	call   c002718b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 24 e1 01 00       	call   c00281ff <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 0d d7 01 00       	call   c0027808 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 76 d0 01 00       	call   c002718b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 d6 e0 01 00       	call   c00281ff <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 bf d6 01 00       	call   c0027808 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 28 d0 01 00       	call   c002718b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 2a c9 01 00       	call   c0026b20 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 01 e0 01 00       	call   c00281ff <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ea d5 01 00       	call   c0027808 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 d1 df 01 00       	call   c00281ff <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 43 cf 01 00       	call   c002718b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 a3 df 01 00       	call   c00281ff <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 8c d5 01 00       	call   c0027808 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 f5 ce 01 00       	call   c002718b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 55 df 01 00       	call   c00281ff <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 3e d5 01 00       	call   c0027808 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 a7 ce 01 00       	call   c002718b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 07 df 01 00       	call   c00281ff <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 f0 d4 01 00       	call   c0027808 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 59 ce 01 00       	call   c002718b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 b9 de 01 00       	call   c00281ff <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 a2 d4 01 00       	call   c0027808 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 0b ce 01 00       	call   c002718b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 df cd 01 00       	call   c002718b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 3c d4 01 00       	call   c0027808 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 f8 dc 01 00       	call   c00280db <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 87 cd 01 00       	call   c002718b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 e4 d3 01 00       	call   c0027808 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 a0 dc 01 00       	call   c00280db <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 2e cd 01 00       	call   c002718b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 8b d3 01 00       	call   c0027808 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 47 dc 01 00       	call   c00280db <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 d5 cc 01 00       	call   c002718b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 32 d3 01 00       	call   c0027808 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 ee db 01 00       	call   c00280db <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 4c c5 01 00       	call   c0026b20 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 23 dc 01 00       	call   c00281ff <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 0c d2 01 00       	call   c0027808 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ef db 01 00       	call   c00281ff <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 61 cb 01 00       	call   c002718b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 c1 db 01 00       	call   c00281ff <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 aa d1 01 00       	call   c0027808 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 13 cb 01 00       	call   c002718b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 73 db 01 00       	call   c00281ff <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 5c d1 01 00       	call   c0027808 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 c5 ca 01 00       	call   c002718b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 25 db 01 00       	call   c00281ff <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 0e d1 01 00       	call   c0027808 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 77 ca 01 00       	call   c002718b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 d7 da 01 00       	call   c00281ff <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 c0 d0 01 00       	call   c0027808 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 29 ca 01 00       	call   c002718b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 89 da 01 00       	call   c00281ff <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 72 d0 01 00       	call   c0027808 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 d8 c9 01 00       	call   c002718b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 38 da 01 00       	call   c00281ff <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 21 d0 01 00       	call   c0027808 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 8a c9 01 00       	call   c002718b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 84 c2 01 00       	call   c0026b20 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 5b d9 01 00       	call   c00281ff <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 44 cf 01 00       	call   c0027808 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 24 d9 01 00       	call   c00281ff <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 96 c8 01 00       	call   c002718b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 f6 d8 01 00       	call   c00281ff <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 df ce 01 00       	call   c0027808 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 48 c8 01 00       	call   c002718b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 a8 d8 01 00       	call   c00281ff <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 91 ce 01 00       	call   c0027808 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 fa c7 01 00       	call   c002718b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 5a d8 01 00       	call   c00281ff <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 43 ce 01 00       	call   c0027808 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ac c7 01 00       	call   c002718b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 0c d8 01 00       	call   c00281ff <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 f5 cd 01 00       	call   c0027808 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 5e c7 01 00       	call   c002718b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 be d7 01 00       	call   c00281ff <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 a7 cd 01 00       	call   c0027808 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 0d c7 01 00       	call   c002718b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 6d d7 01 00       	call   c00281ff <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 56 cd 01 00       	call   c0027808 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 c5 c6 01 00       	call   c002718b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 9e c6 01 00       	call   c002718b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 fc cc 01 00       	call   c0027808 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 b8 d5 01 00       	call   c00280db <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 47 c6 01 00       	call   c002718b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 a5 cc 01 00       	call   c0027808 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 61 d5 01 00       	call   c00280db <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ef c5 01 00       	call   c002718b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 4d cc 01 00       	call   c0027808 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 09 d5 01 00       	call   c00280db <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 97 c5 01 00       	call   c002718b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 f5 cb 01 00       	call   c0027808 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 b1 d4 01 00       	call   c00280db <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 3f c5 01 00       	call   c002718b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 9d cb 01 00       	call   c0027808 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 59 d4 01 00       	call   c00280db <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 ed c4 01 00       	call   c002718b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 4b cb 01 00       	call   c0027808 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 07 d4 01 00       	call   c00280db <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 1b bd 01 00       	call   c0026b20 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 f2 d3 01 00       	call   c00281ff <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 db c9 01 00       	call   c0027808 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 c2 d3 01 00       	call   c00281ff <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 34 c3 01 00       	call   c002718b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 c4 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd653c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 68 d3 01 00       	call   c00281ff <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 51 c9 01 00       	call   c0027808 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 bc c2 01 00       	call   c002718b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 09 d3 01 00       	call   c00281ff <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 f2 c8 01 00       	call   c0027808 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 5d c2 01 00       	call   c002718b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 aa d2 01 00       	call   c00281ff <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 93 c8 01 00       	call   c0027808 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 fe c1 01 00       	call   c002718b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 4b d2 01 00       	call   c00281ff <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 34 c8 01 00       	call   c0027808 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 9f c1 01 00       	call   c002718b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 ec d1 01 00       	call   c00281ff <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 d5 c7 01 00       	call   c0027808 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 40 c1 01 00       	call   c002718b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 8d d1 01 00       	call   c00281ff <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 76 c7 01 00       	call   c0027808 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 e1 c0 01 00       	call   c002718b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 2e d1 01 00       	call   c00281ff <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 17 c7 01 00       	call   c0027808 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 82 c0 01 00       	call   c002718b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 cf d0 01 00       	call   c00281ff <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 b8 c6 01 00       	call   c0027808 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 23 c0 01 00       	call   c002718b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 2d b9 01 00       	call   c0026b20 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 04 d0 01 00       	call   c00281ff <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 ed c5 01 00       	call   c0027808 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 d4 cf 01 00       	call   c00281ff <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 46 bf 01 00       	call   c002718b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 e0 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6520]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 79 cf 01 00       	call   c00281ff <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 62 c5 01 00       	call   c0027808 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 cd be 01 00       	call   c002718b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 19 cf 01 00       	call   c00281ff <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 02 c5 01 00       	call   c0027808 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 6d be 01 00       	call   c002718b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 b9 ce 01 00       	call   c00281ff <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 a2 c4 01 00       	call   c0027808 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 0d be 01 00       	call   c002718b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 59 ce 01 00       	call   c00281ff <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 42 c4 01 00       	call   c0027808 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ad bd 01 00       	call   c002718b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 f9 cd 01 00       	call   c00281ff <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 e2 c3 01 00       	call   c0027808 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 4d bd 01 00       	call   c002718b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 99 cd 01 00       	call   c00281ff <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 82 c3 01 00       	call   c0027808 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 ed bc 01 00       	call   c002718b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 39 cd 01 00       	call   c00281ff <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 22 c3 01 00       	call   c0027808 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 8d bc 01 00       	call   c002718b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 d9 cc 01 00       	call   c00281ff <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 c2 c2 01 00       	call   c0027808 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 2d bc 01 00       	call   c002718b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 fc 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6504]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 d2 bb 01 00       	call   c002718b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 2f c2 01 00       	call   c0027808 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 eb ca 01 00       	call   c00280db <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 75 bb 01 00       	call   c002718b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 d2 c1 01 00       	call   c0027808 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 8e ca 01 00       	call   c00280db <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 18 bb 01 00       	call   c002718b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 75 c1 01 00       	call   c0027808 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 31 ca 01 00       	call   c00280db <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 bb ba 01 00       	call   c002718b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 18 c1 01 00       	call   c0027808 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 d4 c9 01 00       	call   c00280db <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 5e ba 01 00       	call   c002718b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 bb c0 01 00       	call   c0027808 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 77 c9 01 00       	call   c00280db <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 01 ba 01 00       	call   c002718b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 5e c0 01 00       	call   c0027808 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 1a c9 01 00       	call   c00280db <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 a4 b9 01 00       	call   c002718b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 01 c0 01 00       	call   c0027808 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 bd c8 01 00       	call   c00280db <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 47 b9 01 00       	call   c002718b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 a4 bf 01 00       	call   c0027808 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 60 c8 01 00       	call   c00280db <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 5c bf 01 00       	call   c0027808 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 d4 c9 01 00       	jmp    c0028290 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 3e c6 01 00       	call   c00280d7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 fc c5 01 00       	call   c00280b9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 93 c3 01 00       	call   c0027e6b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 94 b6 01 00       	call   c002718b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 63 c3 01 00       	call   c0027e6b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ca bf 01 00       	call   c0027aec <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 69 c5 01 00       	call   c00280b9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 6c c5 01 00       	call   c00280d7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 3f c5 01 00       	call   c00280d7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 38 bf 01 00       	call   c0027aec <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 c2 c6 01 00       	call   c0028290 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 9d c6 01 00       	call   c0028290 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 6f c2 01 00       	call   c0027e6b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 c6 bb 01 00       	call   c00277dc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 a5 c4 01 00       	call   c00280d7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 3e b5 01 00       	call   c002718b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 62 bb 01 00       	call   c00277dc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 04 c6 01 00       	call   c0028290 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 3c be 01 00       	call   c0027aec <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 b9 b4 01 00       	call   c002718b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 e5 c0 01 00       	call   c0027e6b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 e5 b3 01 00       	call   c002718b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 c5 b3 01 00       	call   c002718b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 95 c0 01 00       	call   c0027e6b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 e5 c2 01 00       	call   c00280d5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 c4 b9 01 00       	call   c00277dc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 46 c4 01 00       	call   c0028270 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 6d c2 01 00       	call   c00280b9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 6b b9 01 00       	call   c00277dc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 e9 bf 01 00       	call   c0027e6b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 6c b9 01 00       	call   c0027808 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 be bf 01 00       	call   c0027e6b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 25 bc 01 00       	call   c0027aec <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 a4 b2 01 00       	call   c002718b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 6e bf 01 00       	call   c0027e6b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ba c1 01 00       	call   c00280d7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 af b8 01 00       	call   c0027808 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 81 b8 01 00       	call   c0027808 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ba be 01 00       	call   c0027e6b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 1e bb 01 00       	call   c0027aec <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 e6 ba 01 00       	call   c0027aec <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 65 b1 01 00       	call   c002718b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 52 c2 01 00       	call   c0028290 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 24 be 01 00       	call   c0027e6b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 7b b7 01 00       	call   c00277dc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 5a c0 01 00       	call   c00280d7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 f2 b0 01 00       	call   c002718b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 16 b7 01 00       	call   c00277dc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 b8 c1 01 00       	call   c0028290 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 79 bf 01 00       	call   c00280d7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 37 bf 01 00       	call   c00280b9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ce bc 01 00       	call   c0027e6b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 cf af 01 00       	call   c002718b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 9e bc 01 00       	call   c0027e6b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 05 b9 01 00       	call   c0027aec <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 a4 be 01 00       	call   c00280b9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 a7 be 01 00       	call   c00280d7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 7a be 01 00       	call   c00280d7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 73 b8 01 00       	call   c0027aec <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 fd bf 01 00       	call   c0028290 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 d8 bf 01 00       	call   c0028290 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 aa bb 01 00       	call   c0027e6b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 01 b5 01 00       	call   c00277dc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 e0 bd 01 00       	call   c00280d7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 79 ae 01 00       	call   c002718b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 9d b4 01 00       	call   c00277dc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 3f bf 01 00       	call   c0028290 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 77 b7 01 00       	call   c0027aec <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 f4 ad 01 00       	call   c002718b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 1f ba 01 00       	call   c0027e6b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 1f ad 01 00       	call   c002718b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ff ac 01 00       	call   c002718b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 cf b9 01 00       	call   c0027e6b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 1f bc 01 00       	call   c00280d5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 fd b2 01 00       	call   c00277dc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 7f bd 01 00       	call   c0028270 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 a6 bb 01 00       	call   c00280b9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 a3 b2 01 00       	call   c00277dc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 21 b9 01 00       	call   c0027e6b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 a4 b2 01 00       	call   c0027808 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 f6 b8 01 00       	call   c0027e6b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 5d b5 01 00       	call   c0027aec <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 dc ab 01 00       	call   c002718b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 a6 b8 01 00       	call   c0027e6b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 f2 ba 01 00       	call   c00280d7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 e7 b1 01 00       	call   c0027808 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 b9 b1 01 00       	call   c0027808 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 f0 b7 01 00       	call   c0027e6b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 54 b4 01 00       	call   c0027aec <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 21 b4 01 00       	call   c0027aec <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 a0 aa 01 00       	call   c002718b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 8d bb 01 00       	call   c0028290 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 5f b7 01 00       	call   c0027e6b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 b6 b0 01 00       	call   c00277dc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 95 b9 01 00       	call   c00280d7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 2d aa 01 00       	call   c002718b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 51 b0 01 00       	call   c00277dc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 f3 ba 01 00       	call   c0028290 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 b4 b8 01 00       	call   c00280d7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 72 b8 01 00       	call   c00280b9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 09 b6 01 00       	call   c0027e6b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 0a a9 01 00       	call   c002718b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 d9 b5 01 00       	call   c0027e6b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 40 b2 01 00       	call   c0027aec <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 df b7 01 00       	call   c00280b9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 e2 b7 01 00       	call   c00280d7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 b5 b7 01 00       	call   c00280d7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ae b1 01 00       	call   c0027aec <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 38 b9 01 00       	call   c0028290 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 13 b9 01 00       	call   c0028290 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 e5 b4 01 00       	call   c0027e6b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 3c ae 01 00       	call   c00277dc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 1b b7 01 00       	call   c00280d7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 b4 a7 01 00       	call   c002718b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 d8 ad 01 00       	call   c00277dc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 7a b8 01 00       	call   c0028290 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 b2 b0 01 00       	call   c0027aec <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 2f a7 01 00       	call   c002718b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 5a b3 01 00       	call   c0027e6b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 5a a6 01 00       	call   c002718b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 3a a6 01 00       	call   c002718b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 0a b3 01 00       	call   c0027e6b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 5a b5 01 00       	call   c00280d5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 38 ac 01 00       	call   c00277dc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ba b6 01 00       	call   c0028270 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 e1 b4 01 00       	call   c00280b9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 de ab 01 00       	call   c00277dc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 5c b2 01 00       	call   c0027e6b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 df ab 01 00       	call   c0027808 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 31 b2 01 00       	call   c0027e6b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 98 ae 01 00       	call   c0027aec <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 17 a5 01 00       	call   c002718b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 e1 b1 01 00       	call   c0027e6b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 2d b4 01 00       	call   c00280d7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 22 ab 01 00       	call   c0027808 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 f4 aa 01 00       	call   c0027808 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 2b b1 01 00       	call   c0027e6b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 8f ad 01 00       	call   c0027aec <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 5c ad 01 00       	call   c0027aec <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 db a3 01 00       	call   c002718b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 c8 b4 01 00       	call   c0028290 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 9a b0 01 00       	call   c0027e6b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 f1 a9 01 00       	call   c00277dc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 d0 b2 01 00       	call   c00280d7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 68 a3 01 00       	call   c002718b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 8c a9 01 00       	call   c00277dc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 2e b4 01 00       	call   c0028290 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ef b1 01 00       	call   c00280d7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ad b1 01 00       	call   c00280b9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 44 af 01 00       	call   c0027e6b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 45 a2 01 00       	call   c002718b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 14 af 01 00       	call   c0027e6b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 7b ab 01 00       	call   c0027aec <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 1a b1 01 00       	call   c00280b9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 1d b1 01 00       	call   c00280d7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 f0 b0 01 00       	call   c00280d7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 e9 aa 01 00       	call   c0027aec <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 73 b2 01 00       	call   c0028290 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 4e b2 01 00       	call   c0028290 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 20 ae 01 00       	call   c0027e6b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 77 a7 01 00       	call   c00277dc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 56 b0 01 00       	call   c00280d7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ef a0 01 00       	call   c002718b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 13 a7 01 00       	call   c00277dc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 b5 b1 01 00       	call   c0028290 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 ed a9 01 00       	call   c0027aec <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 6a a0 01 00       	call   c002718b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 95 ac 01 00       	call   c0027e6b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 95 9f 01 00       	call   c002718b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 75 9f 01 00       	call   c002718b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 45 ac 01 00       	call   c0027e6b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 95 ae 01 00       	call   c00280d5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 73 a5 01 00       	call   c00277dc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 f5 af 01 00       	call   c0028270 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 1c ae 01 00       	call   c00280b9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 19 a5 01 00       	call   c00277dc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 97 ab 01 00       	call   c0027e6b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 1a a5 01 00       	call   c0027808 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 6c ab 01 00       	call   c0027e6b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 d3 a7 01 00       	call   c0027aec <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 52 9e 01 00       	call   c002718b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 1c ab 01 00       	call   c0027e6b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 68 ad 01 00       	call   c00280d7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 5d a4 01 00       	call   c0027808 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 2f a4 01 00       	call   c0027808 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 66 aa 01 00       	call   c0027e6b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ca a6 01 00       	call   c0027aec <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 97 a6 01 00       	call   c0027aec <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 16 9d 01 00       	call   c002718b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 03 ae 01 00       	call   c0028290 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 d5 a9 01 00       	call   c0027e6b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 2c a3 01 00       	call   c00277dc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 0b ac 01 00       	call   c00280d7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 a3 9c 01 00       	call   c002718b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 c7 a2 01 00       	call   c00277dc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 69 ad 01 00       	call   c0028290 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 27 ab 01 00       	call   c00280d7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 e5 aa 01 00       	call   c00280b9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 7c a8 01 00       	call   c0027e6b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 7d 9b 01 00       	call   c002718b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 4c a8 01 00       	call   c0027e6b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 b3 a4 01 00       	call   c0027aec <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 52 aa 01 00       	call   c00280b9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 55 aa 01 00       	call   c00280d7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 28 aa 01 00       	call   c00280d7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 21 a4 01 00       	call   c0027aec <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 ab ab 01 00       	call   c0028290 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 82 ab 01 00       	call   c0028290 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 54 a7 01 00       	call   c0027e6b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 ab a0 01 00       	call   c00277dc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 8a a9 01 00       	call   c00280d7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 23 9a 01 00       	call   c002718b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 4b a0 01 00       	call   c00277dc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 ed aa 01 00       	call   c0028290 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 26 a3 01 00       	call   c0027aec <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 a3 99 01 00       	call   c002718b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 cf a5 01 00       	call   c0027e6b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 cf 98 01 00       	call   c002718b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 af 98 01 00       	call   c002718b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 7f a5 01 00       	call   c0027e6b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 b3 a7 01 00       	call   c00280b9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 aa 9e 01 00       	call   c00277dc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 2c a9 01 00       	call   c0028270 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 53 a7 01 00       	call   c00280b9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 4d 9e 01 00       	call   c00277dc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 cb a4 01 00       	call   c0027e6b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 4e 9e 01 00       	call   c0027808 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 a0 a4 01 00       	call   c0027e6b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 07 a1 01 00       	call   c0027aec <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 86 97 01 00       	call   c002718b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 50 a4 01 00       	call   c0027e6b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 9c a6 01 00       	call   c00280d7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 91 9d 01 00       	call   c0027808 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 63 9d 01 00       	call   c0027808 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 a7 a3 01 00       	call   c0027e6b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 0e a0 01 00       	call   c0027aec <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 f7 9c 01 00       	call   c0027808 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 b3 a5 01 00       	call   c00280db <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 a6 9f 01 00       	call   c0027aec <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 25 96 01 00       	call   c002718b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 12 a7 01 00       	call   c0028290 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 e4 a2 01 00       	call   c0027e6b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 3b 9c 01 00       	call   c00277dc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 1a a5 01 00       	call   c00280d7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 b2 95 01 00       	call   c002718b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 da 9b 01 00       	call   c00277dc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 7c a6 01 00       	call   c0028290 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 24 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64dc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 18 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64e8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 35 19 00 00       	call   c000f5ac <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 2f a3 01 00       	call   c00280d7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 ed a2 01 00       	call   c00280b9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 d9 a2 01 00       	call   c00280d7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 4b a0 01 00       	call   c0027e6b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 c9 99 01 00       	call   c0027808 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 1b a0 01 00       	call   c0027e6b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 21 93 01 00       	call   c002718b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 f0 9f 01 00       	call   c0027e6b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 40 a2 01 00       	call   c00280d5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 21 99 01 00       	call   c00277dc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 a3 a3 01 00       	call   c0028270 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ca a1 01 00       	call   c00280b9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 c9 98 01 00       	call   c00277dc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 47 9f 01 00       	call   c0027e6b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ca 98 01 00       	call   c0027808 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 1c 9f 01 00       	call   c0027e6b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 83 9b 01 00       	call   c0027aec <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 02 92 01 00       	call   c002718b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 2a 9b 01 00       	call   c0027aec <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 b0 91 01 00       	call   c002718b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 9e a2 01 00       	call   c0028290 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 70 9e 01 00       	call   c0027e6b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 c7 97 01 00       	call   c00277dc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 a6 a0 01 00       	call   c00280d7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 3f 91 01 00       	call   c002718b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 6b 97 01 00       	call   c00277dc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 0d a2 01 00       	call   c0028290 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ba 9d 01 00       	call   c0027e6b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 37 97 01 00       	call   c0027808 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 88 9d 01 00       	call   c0027e6b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 8e 90 01 00       	call   c002718b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 5e 9d 01 00       	call   c0027e6b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 b2 9f 01 00       	call   c00280d9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 8b 96 01 00       	call   c00277dc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 0d a1 01 00       	call   c0028270 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 34 9f 01 00       	call   c00280b9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 32 96 01 00       	call   c00277dc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 b0 9c 01 00       	call   c0027e6b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 33 96 01 00       	call   c0027808 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 85 9c 01 00       	call   c0027e6b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 ec 98 01 00       	call   c0027aec <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 6b 8f 01 00       	call   c002718b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 87 98 01 00       	call   c0027aec <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 06 8f 01 00       	call   c002718b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 f4 9f 01 00       	call   c0028290 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 c6 9b 01 00       	call   c0027e6b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 1d 95 01 00       	call   c00277dc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 fc 9d 01 00       	call   c00280d7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 95 8e 01 00       	call   c002718b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 c1 94 01 00       	call   c00277dc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 32 9b 01 00       	call   c0027e6b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 38 8e 01 00       	call   c002718b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 3e 9c 02 c0       	mov    eax,0xc0029c3e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 4f 9c 02 c0       	mov    eax,0xc0029c4f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 77 11 00 00       	call   c000f5ac <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 79 11 00 00       	call   c000f5cc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f3 10 00 00       	jmp    c000f59c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0e 11 00 00       	jmp    c000f5bc <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000e4e3:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c20,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c000e50d:	e8 a9 f3 00 00       	call   c001d8bb <schedule()>
c000e512:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000e517:	48                   	dec    eax
c000e518:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 d8 02 c0       	mov    eax,ds:0xc002d870
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 86 9c 02 c0       	push   0xc0029c86
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 d7 02 c0       	mov    eax,0xc002d708
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 8f 9c 02 c0       	push   0xc0029c8f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 04 66 02 c0       	mov    eax,0xc0026604
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 99 9c 02 c0       	push   0xc0029c99
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 38 63 02 c0       	mov    eax,0xc0026338
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 a2 9c 02 c0       	push   0xc0029ca2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 04 67 02 c0       	mov    eax,0xc0026704
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ac 9c 02 c0       	push   0xc0029cac
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 84 64 02 c0       	mov    eax,0xc0026484
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 b5 9c 02 c0       	push   0xc0029cb5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c d7 02 c0       	mov    eax,0xc002d70c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 c2 9c 02 c0       	push   0xc0029cc2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d d7 02 c0       	mov    eax,0xc002d70d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 19 55 00 00       	call   c0013b86 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 cf 9c 02 c0       	push   0xc0029ccf
c000e69e:	e8 53 0f 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ed 0e 00 00       	call   c000f59c <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c000e6be:	68 e8 9c 02 c0       	push   0xc0029ce8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 d3 ed 00 00       	call   c001d49e <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 b6 ef 00 00       	call   c001d696 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 7a e0 01 c0       	push   0xc001e07a
c000e6e9:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c000e6ef:	e8 a2 ef 00 00       	call   c001d696 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 08 0c 03 c0       	mov    ds:0xc0030c08,eax
c000e6fc:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e701:	c6 05 0d d7 02 c0 01 	mov    BYTE PTR ds:0xc002d70d,0x1
c000e708:	e8 e9 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 13 fd 00 00       	call   c001e425 <Vm::initialise8086()>
c000e712:	e8 37 42 00 00       	call   c001294e <Fs::initVFS()>
c000e717:	c7 04 24 f5 9c 02 c0 	mov    DWORD PTR [esp],0xc0029cf5
c000e71e:	e8 d3 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e723:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 cc 9d 02 c0       	push   0xc0029dcc
c000e742:	e8 af 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e747:	e8 dd d5 00 00       	call   c001bd29 <Sys::loadSyscalls()>
c000e74c:	e8 d5 b4 00 00       	call   c0019c26 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 0f 9d 02 c0       	push   0xc0029d0f
c000e75b:	68 18 9d 02 c0       	push   0xc0029d18
c000e760:	e8 86 c3 00 00       	call   c001aaeb <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 d1 4c 00 00       	call   c001343e <User::loadClockSettings(int)>
c000e76d:	c7 04 24 f0 9d 02 c0 	mov    DWORD PTR [esp],0xc0029df0
c000e774:	e8 7d 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 bc 53 00 00       	call   c0013b46 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 20 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d20
c000e791:	e8 60 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e796:	e8 f3 af 00 00       	call   c001978e <Krnl::startCPUs()>
c000e79b:	c7 04 24 3a 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d3a
c000e7a2:	e8 4f 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 4b 9d 02 c0       	push   0xc0029d4b
c000e7b6:	e8 3e e7 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 63 e9 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 c0 f2 00 00       	call   c001da91 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 67 9d 02 c0       	push   0xc0029d67
c000e7e5:	50                   	push   eax
c000e7e6:	e8 15 54 00 00       	call   c0013c00 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 3c 9e 02 c0       	mov    edx,0xc0029e3c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 21 d7 02 c0 04 	test   BYTE PTR ds:0xc002d721,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 47 79 01 00       	call   c00262c6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 66 9d 00 00       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 3f 9d 00 00       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 1d 9d 00 00       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 fb 9c 00 00       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 20 d7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d720,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 09 9c 00 00       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 e4 9b 00 00       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 b1 77 01 00       	call   c0026280 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 6e 77 01 00       	call   c0026260 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 00 9c 00 00       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 70 9d 02 c0       	push   0xc0029d70
c000eb62:	e8 c8 b1 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 76 9d 02 c0       	push   0xc0029d76
c000eb9a:	e8 90 b1 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 10 9e 02 c0       	push   0xc0029e10
c000ebf0:	e8 01 0a 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 20 d7 02 c0 04 	test   BYTE PTR ds:0xc002d720,0x4
c000ec03:	0f 94 05 40 c6 02 c0 	sete   BYTE PTR ds:0xc002c640
c000ec0a:	e8 8d 09 00 00       	call   c000f59c <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 7b 8d 00 00       	call   c0017994 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 d4 4d 00 00       	call   c00139fc <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 20 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d20
c000ec41:	e8 b0 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 4a 09 00 00       	call   c000f59c <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 7c 9b 00 00       	call   c00187d8 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 91 4d 00 00       	call   c00139fc <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 0d 53 00 00       	call   c0013f94 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 61 4d 00 00       	call   c00139fc <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 7c 9d 02 c0       	push   0xc0029d7c
c000ecb8:	e8 39 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 ef ea 00 00       	call   c001d7b8 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 97 9d 02 c0       	push   0xc0029d97
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 ad 38 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 a8 9d 02 c0       	push   0xc0029da8
c000ed34:	e8 f6 af 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 b5 9d 02 c0       	push   0xc0029db5
c000ed49:	e8 e1 af 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 bf 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029dbf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 ca af 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 12 d7 02 c0       	mov    ds:0xc002d712,eax
c000ee21:	66 89 15 10 d7 02 c0 	mov    WORD PTR ds:0xc002d710,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000ef38:	48                   	dec    eax
c000ef39:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 81 93 01 00       	call   c0028310 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 78 93 01 00       	call   c0028310 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 18 d7 02 c0 ff 07 	mov    WORD PTR ds:0xc002d718,0x7ff
c000f085:	a3 1a d7 02 c0       	mov    ds:0xc002d71a,eax
c000f08a:	0f 01 1d 18 d7 02 c0 	lidtd  ds:0xc002d718
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c000f37c:	e8 03 27 00 00       	call   c0011a84 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0d 02 00 00       	call   c000f59c <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 6d 17 00 00       	call   c0010b0c <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 9e 17 00 00       	call   c0010b4c <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d dc c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c4dc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 dc c4 02 c0       	mov    eax,ds:0xc002c4dc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 60 9e 02 c0       	push   0xc0029e60
c000f455:	e8 6a 31 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 dc c4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c4dc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c000f481:	8b 2d dc c4 02 c0    	mov    ebp,DWORD PTR ds:0xc002c4dc
c000f487:	e8 b4 04 00 00       	call   c000f940 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 e9 24 00 00       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d dc c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c4dc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 90 9e 02 c0       	push   0xc0029e90
c000f50d:	e8 1d a8 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 95 9e 02 c0       	push   0xc0029e95
c000f523:	e8 07 a8 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000f543:	48                   	dec    eax
c000f544:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	68 01 08 00 00       	push   0x801
c000f55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55e:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c000f564:	e8 1b 25 00 00       	call   c0011a84 <VAS::allocatePages(int, int)>
c000f569:	83 c4 1c             	add    esp,0x1c
c000f56c:	c3                   	ret    

c000f56d <liballoc_free(void*, int)>:
c000f56d:	83 ec 14             	sub    esp,0x14
c000f570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f574:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c000f57a:	e8 af 21 00 00       	call   c001172e <VAS::freeAllocatedPages(unsigned long)>
c000f57f:	b8 00 00 00 00       	mov    eax,0x0
c000f584:	83 c4 1c             	add    esp,0x1c
c000f587:	c3                   	ret    

c000f588 <realloc>:
c000f588:	83 ec 14             	sub    esp,0x14
c000f58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f593:	e8 94 20 ff ff       	call   c000162c <dlrealloc>
c000f598:	83 c4 1c             	add    esp,0x1c
c000f59b:	c3                   	ret    

c000f59c <malloc>:
c000f59c:	83 ec 18             	sub    esp,0x18
c000f59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a3:	e8 47 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a8:	83 c4 1c             	add    esp,0x1c
c000f5ab:	c3                   	ret    

c000f5ac <free>:
c000f5ac:	83 ec 18             	sub    esp,0x18
c000f5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b3:	e8 dc 17 ff ff       	call   c0000d94 <dlfree>
c000f5b8:	83 c4 1c             	add    esp,0x1c
c000f5bb:	c3                   	ret    

c000f5bc <rfree>:
c000f5bc:	83 ec 18             	sub    esp,0x18
c000f5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c3:	e8 cc 17 ff ff       	call   c0000d94 <dlfree>
c000f5c8:	83 c4 1c             	add    esp,0x1c
c000f5cb:	c3                   	ret    

c000f5cc <calloc>:
c000f5cc:	56                   	push   esi
c000f5cd:	53                   	push   ebx
c000f5ce:	83 ec 10             	sub    esp,0x10
c000f5d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5da:	53                   	push   ebx
c000f5db:	e8 bc ff ff ff       	call   c000f59c <malloc>
c000f5e0:	89 c6                	mov    esi,eax
c000f5e2:	83 c4 0c             	add    esp,0xc
c000f5e5:	53                   	push   ebx
c000f5e6:	6a 00                	push   0x0
c000f5e8:	50                   	push   eax
c000f5e9:	e8 62 11 ff ff       	call   c0000750 <memset>
c000f5ee:	89 f0                	mov    eax,esi
c000f5f0:	83 c4 14             	add    esp,0x14
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    

c000f5f6 <Krnl::setBootMessage(char const*)>:
c000f5f6:	57                   	push   edi
c000f5f7:	56                   	push   esi
c000f5f8:	53                   	push   ebx
c000f5f9:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5ff:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f606:	68 9e 00 00 00       	push   0x9e
c000f60b:	6a 00                	push   0x0
c000f60d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f611:	56                   	push   esi
c000f612:	e8 39 11 ff ff       	call   c0000750 <memset>
c000f617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f61a:	e8 4d 11 ff ff       	call   c000076c <strlen>
c000f61f:	ba 50 00 00 00       	mov    edx,0x50
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	29 c2                	sub    edx,eax
c000f629:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62d:	d1 ea                	shr    edx,1
c000f62f:	84 c0                	test   al,al
c000f631:	74 19                	je     c000f64c <Krnl::setBootMessage(char const*)+0x56>
c000f633:	01 d2                	add    edx,edx
c000f635:	43                   	inc    ebx
c000f636:	01 f2                	add    edx,esi
c000f638:	80 cc 0f             	or     ah,0xf
c000f63b:	83 c2 02             	add    edx,0x2
c000f63e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f642:	43                   	inc    ebx
c000f643:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f648:	84 c0                	test   al,al
c000f64a:	75 ec                	jne    c000f638 <Krnl::setBootMessage(char const*)+0x42>
c000f64c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f651:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f658:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65e:	5b                   	pop    ebx
c000f65f:	5e                   	pop    esi
c000f660:	5f                   	pop    edi
c000f661:	c3                   	ret    

c000f662 <kernel_main>:
c000f662:	57                   	push   edi
c000f663:	bf f9 03 00 00       	mov    edi,0x3f9
c000f668:	56                   	push   esi
c000f669:	89 fa                	mov    edx,edi
c000f66b:	53                   	push   ebx
c000f66c:	31 f6                	xor    esi,esi
c000f66e:	83 ec 2c             	sub    esp,0x2c
c000f671:	89 f0                	mov    eax,esi
c000f673:	ee                   	out    dx,al
c000f674:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f679:	b0 80                	mov    al,0x80
c000f67b:	89 da                	mov    edx,ebx
c000f67d:	ee                   	out    dx,al
c000f67e:	b1 03                	mov    cl,0x3
c000f680:	ba f8 03 00 00       	mov    edx,0x3f8
c000f685:	88 c8                	mov    al,cl
c000f687:	ee                   	out    dx,al
c000f688:	89 f0                	mov    eax,esi
c000f68a:	89 fa                	mov    edx,edi
c000f68c:	ee                   	out    dx,al
c000f68d:	88 c8                	mov    al,cl
c000f68f:	89 da                	mov    edx,ebx
c000f691:	ee                   	out    dx,al
c000f692:	b0 c7                	mov    al,0xc7
c000f694:	ba fa 03 00 00       	mov    edx,0x3fa
c000f699:	ee                   	out    dx,al
c000f69a:	b0 0b                	mov    al,0xb
c000f69c:	ba fc 03 00 00       	mov    edx,0x3fc
c000f6a1:	ee                   	out    dx,al
c000f6a2:	68 9c 9e 02 c0       	push   0xc0029e9c
c000f6a7:	e8 18 2f 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c000f6ac:	e8 5d 09 00 00       	call   c001000e <installVgaTextImplementation()>
c000f6b1:	0f b6 05 e0 c4 02 c0 	movzx  eax,BYTE PTR ds:0xc002c4e0
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	84 c0                	test   al,al
c000f6bd:	74 6c                	je     c000f72b <kernel_main+0xc9>
c000f6bf:	31 db                	xor    ebx,ebx
c000f6c1:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c6:	be 05 00 00 00       	mov    esi,0x5
c000f6cb:	31 c9                	xor    ecx,ecx
c000f6cd:	eb 2a                	jmp    c000f6f9 <kernel_main+0x97>
c000f6cf:	3c 0d                	cmp    al,0xd
c000f6d1:	74 1a                	je     c000f6ed <kernel_main+0x8b>
c000f6d3:	3c 0a                	cmp    al,0xa
c000f6d5:	74 40                	je     c000f717 <kernel_main+0xb5>
c000f6d7:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6da:	80 cc 0e             	or     ah,0xe
c000f6dd:	c1 e2 04             	shl    edx,0x4
c000f6e0:	01 ca                	add    edx,ecx
c000f6e2:	41                   	inc    ecx
c000f6e3:	01 fa                	add    edx,edi
c000f6e5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ed:	43                   	inc    ebx
c000f6ee:	0f b6 83 e0 c4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3b20]
c000f6f5:	84 c0                	test   al,al
c000f6f7:	74 32                	je     c000f72b <kernel_main+0xc9>
c000f6f9:	80 b9 16 c5 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3aea],0xdb
c000f700:	75 cd                	jne    c000f6cf <kernel_main+0x6d>
c000f702:	0f b6 91 15 c5 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3aeb]
c000f709:	83 e2 fe             	and    edx,0xfffffffe
c000f70c:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f712:	75 bb                	jne    c000f6cf <kernel_main+0x6d>
c000f714:	47                   	inc    edi
c000f715:	eb b8                	jmp    c000f6cf <kernel_main+0x6d>
c000f717:	43                   	inc    ebx
c000f718:	46                   	inc    esi
c000f719:	31 c9                	xor    ecx,ecx
c000f71b:	0f b6 83 e0 c4 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3b20]
c000f722:	bf 0a 00 00 00       	mov    edi,0xa
c000f727:	84 c0                	test   al,al
c000f729:	75 ce                	jne    c000f6f9 <kernel_main+0x97>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 b4 9e 02 c0       	push   0xc0029eb4
c000f733:	e8 be fe ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000f738:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73d:	a3 20 d7 02 c0       	mov    ds:0xc002d720,eax
c000f742:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f747:	05 ff 0f 00 00       	add    eax,0xfff
c000f74c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f751:	89 04 24             	mov    DWORD PTR [esp],eax
c000f754:	e8 49 03 00 00       	call   c000faa2 <Phys::physicalMemorySetup(unsigned int)>
c000f759:	e8 26 1c 00 00       	call   c0011384 <Virt::virtualMemorySetup()>
c000f75e:	58                   	pop    eax
c000f75f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f763:	53                   	push   ebx
c000f764:	e8 ed 1d 00 00       	call   c0011556 <VAS::VAS()>
c000f769:	89 1d 70 d8 02 c0    	mov    DWORD PTR ds:0xc002d870,ebx
c000f76f:	e8 ac 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f774:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f77b:	e8 1c fe ff ff       	call   c000f59c <malloc>
c000f780:	89 04 24             	mov    DWORD PTR [esp],eax
c000f783:	89 c6                	mov    esi,eax
c000f785:	e8 4c f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f78a:	6a 00                	push   0x0
c000f78c:	89 35 08 d7 02 c0    	mov    DWORD PTR ds:0xc002d708,esi
c000f792:	6a 00                	push   0x0
c000f794:	6a 00                	push   0x0
c000f796:	56                   	push   esi
c000f797:	e8 46 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f79c:	83 c4 14             	add    esp,0x14
c000f79f:	53                   	push   ebx
c000f7a0:	e8 61 20 00 00       	call   c0011806 <VAS::~VAS()>
c000f7a5:	83 c4 30             	add    esp,0x30
c000f7a8:	5b                   	pop    ebx
c000f7a9:	5e                   	pop    esi
c000f7aa:	5f                   	pop    edi
c000f7ab:	c3                   	ret    

c000f7ac <Phys::allocateDMA(unsigned long)>:
c000f7ac:	55                   	push   ebp
c000f7ad:	31 d2                	xor    edx,edx
c000f7af:	57                   	push   edi
c000f7b0:	31 ed                	xor    ebp,ebp
c000f7b2:	56                   	push   esi
c000f7b3:	31 c9                	xor    ecx,ecx
c000f7b5:	53                   	push   ebx
c000f7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c0:	31 c0                	xor    eax,eax
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x23>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d0                	mov    eax,edx
c000f7cf:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7d2:	39 de                	cmp    esi,ebx
c000f7d4:	74 20                	je     c000f7f6 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 d9                	mov    ecx,ebx
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x43>
c000f7de:	80 ba 60 d7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd28a0],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7ef:	5b                   	pop    ebx
c000f7f0:	31 c0                	xor    eax,eax
c000f7f2:	5e                   	pop    esi
c000f7f3:	5f                   	pop    edi
c000f7f4:	5d                   	pop    ebp
c000f7f5:	c3                   	ret    
c000f7f6:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f9:	89 d7                	mov    edi,edx
c000f7fb:	4f                   	dec    edi
c000f7fc:	79 03                	jns    c000f801 <Phys::allocateDMA(unsigned long)+0x55>
c000f7fe:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f801:	c1 ff 04             	sar    edi,0x4
c000f804:	89 c2                	mov    edx,eax
c000f806:	c1 fa 04             	sar    edx,0x4
c000f809:	39 fa                	cmp    edx,edi
c000f80b:	75 2f                	jne    c000f83c <Phys::allocateDMA(unsigned long)+0x90>
c000f80d:	85 db                	test   ebx,ebx
c000f80f:	74 1a                	je     c000f82b <Phys::allocateDMA(unsigned long)+0x7f>
c000f811:	be 60 d7 02 c0       	mov    esi,0xc002d760
c000f816:	8d 90 60 d7 02 c0    	lea    edx,[eax-0x3ffd28a0]
c000f81c:	f7 d6                	not    esi
c000f81e:	29 c6                	sub    esi,eax
c000f820:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f823:	42                   	inc    edx
c000f824:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f827:	39 d9                	cmp    ecx,ebx
c000f829:	7f f5                	jg     c000f820 <Phys::allocateDMA(unsigned long)+0x74>
c000f82b:	85 ff                	test   edi,edi
c000f82d:	74 13                	je     c000f842 <Phys::allocateDMA(unsigned long)+0x96>
c000f82f:	5b                   	pop    ebx
c000f830:	05 50 20 0c 00       	add    eax,0xc2050
c000f835:	5e                   	pop    esi
c000f836:	c1 e0 0c             	shl    eax,0xc
c000f839:	5f                   	pop    edi
c000f83a:	5d                   	pop    ebp
c000f83b:	c3                   	ret    
c000f83c:	89 ea                	mov    edx,ebp
c000f83e:	31 c9                	xor    ecx,ecx
c000f840:	eb a7                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x3d>
c000f842:	5b                   	pop    ebx
c000f843:	c1 e0 0c             	shl    eax,0xc
c000f846:	5e                   	pop    esi
c000f847:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f84c:	5f                   	pop    edi
c000f84d:	5d                   	pop    ebp
c000f84e:	c3                   	ret    

c000f84f <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f853:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f857:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85d:	c1 e9 0c             	shr    ecx,0xc
c000f860:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f865:	76 25                	jbe    c000f88c <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f867:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f86c:	c1 e8 0c             	shr    eax,0xc
c000f86f:	8d 50 10             	lea    edx,[eax+0x10]
c000f872:	85 c9                	test   ecx,ecx
c000f874:	74 15                	je     c000f88b <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f876:	8d 82 60 d7 02 c0    	lea    eax,[edx-0x3ffd28a0]
c000f87c:	8d 94 11 60 d7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd28a0]
c000f883:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f886:	40                   	inc    eax
c000f887:	39 d0                	cmp    eax,edx
c000f889:	75 f8                	jne    c000f883 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f88b:	c3                   	ret    
c000f88c:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f892:	c1 ea 0c             	shr    edx,0xc
c000f895:	eb db                	jmp    c000f872 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f897 <Phys::setPageState(unsigned long, bool)>:
c000f897:	56                   	push   esi
c000f898:	ba 01 00 00 00       	mov    edx,0x1
c000f89d:	53                   	push   ebx
c000f89e:	8b 35 24 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c624
c000f8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8ac:	89 c8                	mov    eax,ecx
c000f8ae:	83 e1 07             	and    ecx,0x7
c000f8b1:	c1 e8 03             	shr    eax,0x3
c000f8b4:	d3 e3                	shl    ebx,cl
c000f8b6:	01 c6                	add    esi,eax
c000f8b8:	d3 e2                	shl    edx,cl
c000f8ba:	f7 d2                	not    edx
c000f8bc:	20 16                	and    BYTE PTR [esi],dl
c000f8be:	03 05 24 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c624
c000f8c4:	08 18                	or     BYTE PTR [eax],bl
c000f8c6:	5b                   	pop    ebx
c000f8c7:	5e                   	pop    esi
c000f8c8:	c3                   	ret    

c000f8c9 <Phys::getPageState(unsigned long)>:
c000f8c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8cd:	8b 15 24 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c624
c000f8d3:	89 c8                	mov    eax,ecx
c000f8d5:	83 e1 07             	and    ecx,0x7
c000f8d8:	c1 e8 03             	shr    eax,0x3
c000f8db:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8df:	d3 f8                	sar    eax,cl
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c3                   	ret    

c000f8e5 <Phys::freePage(unsigned long)>:
c000f8e5:	53                   	push   ebx
c000f8e6:	83 ec 08             	sub    esp,0x8
c000f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ed:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8f2:	76 3a                	jbe    c000f92e <Phys::freePage(unsigned long)+0x49>
c000f8f4:	c1 e8 0c             	shr    eax,0xc
c000f8f7:	50                   	push   eax
c000f8f8:	89 c3                	mov    ebx,eax
c000f8fa:	e8 ca ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f8ff:	5a                   	pop    edx
c000f900:	84 c0                	test   al,al
c000f902:	74 19                	je     c000f91d <Phys::freePage(unsigned long)+0x38>
c000f904:	83 ec 08             	sub    esp,0x8
c000f907:	ff 0d 50 d7 02 c0    	dec    DWORD PTR ds:0xc002d750
c000f90d:	6a 00                	push   0x0
c000f90f:	53                   	push   ebx
c000f910:	e8 82 ff ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 c4 08             	add    esp,0x8
c000f91b:	5b                   	pop    ebx
c000f91c:	c3                   	ret    
c000f91d:	c7 44 24 10 d3 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ed3
c000f925:	83 c4 08             	add    esp,0x8
c000f928:	5b                   	pop    ebx
c000f929:	e9 01 a4 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>
c000f92e:	68 00 10 00 00       	push   0x1000
c000f933:	50                   	push   eax
c000f934:	e8 16 ff ff ff       	call   c000f84f <Phys::freeDMA(unsigned long, unsigned long)>
c000f939:	59                   	pop    ecx
c000f93a:	5b                   	pop    ebx
c000f93b:	83 c4 08             	add    esp,0x8
c000f93e:	5b                   	pop    ebx
c000f93f:	c3                   	ret    

c000f940 <Phys::allocatePage()>:
c000f940:	56                   	push   esi
c000f941:	53                   	push   ebx
c000f942:	51                   	push   ecx
c000f943:	8b 35 44 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d744
c000f949:	89 f3                	mov    ebx,esi
c000f94b:	eb 0a                	jmp    c000f957 <Phys::allocatePage()+0x17>
c000f94d:	89 1d 44 d7 02 c0    	mov    DWORD PTR ds:0xc002d744,ebx
c000f953:	39 de                	cmp    esi,ebx
c000f955:	74 24                	je     c000f97b <Phys::allocatePage()+0x3b>
c000f957:	53                   	push   ebx
c000f958:	e8 6c ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f95d:	5a                   	pop    edx
c000f95e:	84 c0                	test   al,al
c000f960:	74 76                	je     c000f9d8 <Phys::allocatePage()+0x98>
c000f962:	43                   	inc    ebx
c000f963:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f969:	75 e2                	jne    c000f94d <Phys::allocatePage()+0xd>
c000f96b:	31 db                	xor    ebx,ebx
c000f96d:	c7 05 44 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d744,0x0
c000f977:	39 de                	cmp    esi,ebx
c000f979:	75 dc                	jne    c000f957 <Phys::allocatePage()+0x17>
c000f97b:	83 ec 0c             	sub    esp,0xc
c000f97e:	68 02 9f 02 c0       	push   0xc0029f02
c000f983:	e8 3c 2c 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c000f988:	59                   	pop    ecx
c000f989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f98e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f991:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f997:	e8 3a 29 00 00       	call   c00122d6 <VAS::scanForEviction()>
c000f99c:	83 c4 10             	add    esp,0x10
c000f99f:	85 c0                	test   eax,eax
c000f9a1:	75 67                	jne    c000fa0a <Phys::allocatePage()+0xca>
c000f9a3:	83 ec 0c             	sub    esp,0xc
c000f9a6:	68 00 10 00 00       	push   0x1000
c000f9ab:	e8 fc fd ff ff       	call   c000f7ac <Phys::allocateDMA(unsigned long)>
c000f9b0:	83 c4 10             	add    esp,0x10
c000f9b3:	85 c0                	test   eax,eax
c000f9b5:	75 53                	jne    c000fa0a <Phys::allocatePage()+0xca>
c000f9b7:	83 ec 0c             	sub    esp,0xc
c000f9ba:	68 1a 9f 02 c0       	push   0xc0029f1a
c000f9bf:	e8 6b a3 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000f9c4:	83 c4 10             	add    esp,0x10
c000f9c7:	8b 1d 44 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d744
c000f9cd:	53                   	push   ebx
c000f9ce:	e8 f6 fe ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f9d3:	5a                   	pop    edx
c000f9d4:	84 c0                	test   al,al
c000f9d6:	75 8a                	jne    c000f962 <Phys::allocatePage()+0x22>
c000f9d8:	6a 01                	push   0x1
c000f9da:	53                   	push   ebx
c000f9db:	e8 b7 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f9e0:	83 ec 0c             	sub    esp,0xc
c000f9e3:	a1 50 d7 02 c0       	mov    eax,ds:0xc002d750
c000f9e8:	ff 35 54 d7 02 c0    	push   DWORD PTR ds:0xc002d754
c000f9ee:	40                   	inc    eax
c000f9ef:	50                   	push   eax
c000f9f0:	a3 50 d7 02 c0       	mov    ds:0xc002d750,eax
c000f9f5:	68 e9 9e 02 c0       	push   0xc0029ee9
c000f9fa:	e8 c5 2b 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c000f9ff:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c000fa04:	83 c4 20             	add    esp,0x20
c000fa07:	c1 e0 0c             	shl    eax,0xc
c000fa0a:	5a                   	pop    edx
c000fa0b:	5b                   	pop    ebx
c000fa0c:	5e                   	pop    esi
c000fa0d:	c3                   	ret    

c000fa0e <Phys::allocateContiguousPages(int)>:
c000fa0e:	57                   	push   edi
c000fa0f:	56                   	push   esi
c000fa10:	53                   	push   ebx
c000fa11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa15:	fa                   	cli    
c000fa16:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000fa1c:	31 db                	xor    ebx,ebx
c000fa1e:	85 db                	test   ebx,ebx
c000fa20:	75 11                	jne    c000fa33 <Phys::allocateContiguousPages(int)+0x25>
c000fa22:	e8 19 ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa27:	83 fe 01             	cmp    esi,0x1
c000fa2a:	89 c7                	mov    edi,eax
c000fa2c:	74 21                	je     c000fa4f <Phys::allocateContiguousPages(int)+0x41>
c000fa2e:	bb 01 00 00 00       	mov    ebx,0x1
c000fa33:	e8 08 ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa38:	89 da                	mov    edx,ebx
c000fa3a:	c1 e2 0c             	shl    edx,0xc
c000fa3d:	01 fa                	add    edx,edi
c000fa3f:	39 c2                	cmp    edx,eax
c000fa41:	74 20                	je     c000fa63 <Phys::allocateContiguousPages(int)+0x55>
c000fa43:	bb 01 00 00 00       	mov    ebx,0x1
c000fa48:	89 c7                	mov    edi,eax
c000fa4a:	83 fe 01             	cmp    esi,0x1
c000fa4d:	75 e4                	jne    c000fa33 <Phys::allocateContiguousPages(int)+0x25>
c000fa4f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000fa54:	48                   	dec    eax
c000fa55:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000fa5a:	75 01                	jne    c000fa5d <Phys::allocateContiguousPages(int)+0x4f>
c000fa5c:	fb                   	sti    
c000fa5d:	89 f8                	mov    eax,edi
c000fa5f:	5b                   	pop    ebx
c000fa60:	5e                   	pop    esi
c000fa61:	5f                   	pop    edi
c000fa62:	c3                   	ret    
c000fa63:	43                   	inc    ebx
c000fa64:	39 f3                	cmp    ebx,esi
c000fa66:	75 b6                	jne    c000fa1e <Phys::allocateContiguousPages(int)+0x10>
c000fa68:	eb e5                	jmp    c000fa4f <Phys::allocateContiguousPages(int)+0x41>

c000fa6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa70:	39 1d 48 d7 02 c0    	cmp    DWORD PTR ds:0xc002d748,ebx
c000fa76:	73 06                	jae    c000fa7e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa78:	89 1d 48 d7 02 c0    	mov    DWORD PTR ds:0xc002d748,ebx
c000fa7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa82:	c1 eb 0c             	shr    ebx,0xc
c000fa85:	c1 e8 0c             	shr    eax,0xc
c000fa88:	39 d8                	cmp    eax,ebx
c000fa8a:	73 13                	jae    c000fa9f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa8c:	6a 00                	push   0x0
c000fa8e:	8d 70 01             	lea    esi,[eax+0x1]
c000fa91:	50                   	push   eax
c000fa92:	e8 00 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fa97:	5a                   	pop    edx
c000fa98:	89 f0                	mov    eax,esi
c000fa9a:	59                   	pop    ecx
c000fa9b:	39 f3                	cmp    ebx,esi
c000fa9d:	75 ed                	jne    c000fa8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa9f:	5b                   	pop    ebx
c000faa0:	5e                   	pop    esi
c000faa1:	c3                   	ret    

c000faa2 <Phys::physicalMemorySetup(unsigned int)>:
c000faa2:	55                   	push   ebp
c000faa3:	57                   	push   edi
c000faa4:	56                   	push   esi
c000faa5:	53                   	push   ebx
c000faa6:	31 db                	xor    ebx,ebx
c000faa8:	83 ec 40             	sub    esp,0x40
c000faab:	6a 30                	push   0x30
c000faad:	6a 00                	push   0x0
c000faaf:	68 60 d7 02 c0       	push   0xc002d760
c000fab4:	e8 97 0c ff ff       	call   c0000750 <memset>
c000fab9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fabd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fac2:	05 00 10 00 00       	add    eax,0x1000
c000fac7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000facb:	5a                   	pop    edx
c000facc:	59                   	pop    ecx
c000facd:	50                   	push   eax
c000face:	68 28 9f 02 c0       	push   0xc0029f28
c000fad3:	e8 ec 2a 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c000fad8:	83 c4 10             	add    esp,0x10
c000fadb:	83 ec 08             	sub    esp,0x8
c000fade:	6a 01                	push   0x1
c000fae0:	53                   	push   ebx
c000fae1:	43                   	inc    ebx
c000fae2:	e8 b0 fd ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fae7:	83 c4 10             	add    esp,0x10
c000faea:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faf0:	75 e9                	jne    c000fadb <Phys::physicalMemorySetup(unsigned int)+0x39>
c000faf2:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000faf9:	66 85 c0             	test   ax,ax
c000fafc:	0f 84 b5 01 00 00    	je     c000fcb7 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fb02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb06:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb0c:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb11:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb17:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb1d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb21:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb25:	01 c1                	add    ecx,eax
c000fb27:	11 d3                	adc    ebx,edx
c000fb29:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb2d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb31:	31 ff                	xor    edi,edi
c000fb33:	89 d3                	mov    ebx,edx
c000fb35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb39:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb3f:	09 cb                	or     ebx,ecx
c000fb41:	0f 85 80 01 00 00    	jne    c000fcc7 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb47:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb53:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb58:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb5c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb64:	eb 49                	jmp    c000fbaf <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb6a:	83 c3 18             	add    ebx,0x18
c000fb6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb75:	39 d0                	cmp    eax,edx
c000fb77:	0f 84 4a 01 00 00    	je     c000fcc7 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb7d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb80:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb83:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb88:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb90:	01 c6                	add    esi,eax
c000fb92:	89 d5                	mov    ebp,edx
c000fb94:	11 d7                	adc    edi,edx
c000fb96:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb9a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb9e:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fba1:	31 ff                	xor    edi,edi
c000fba3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fba7:	09 cd                	or     ebp,ecx
c000fba9:	0f 85 18 01 00 00    	jne    c000fcc7 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbaf:	89 f1                	mov    ecx,esi
c000fbb1:	83 f1 01             	xor    ecx,0x1
c000fbb4:	09 f9                	or     ecx,edi
c000fbb6:	75 ae                	jne    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbb8:	be 00 00 08 00       	mov    esi,0x80000
c000fbbd:	89 cf                	mov    edi,ecx
c000fbbf:	39 c6                	cmp    esi,eax
c000fbc1:	19 d7                	sbb    edi,edx
c000fbc3:	0f 82 98 00 00 00    	jb     c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbc9:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fbcd:	89 cd                	mov    ebp,ecx
c000fbcf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd7:	19 fd                	sbb    ebp,edi
c000fbd9:	0f 83 82 00 00 00    	jae    c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbdf:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbe4:	39 f0                	cmp    eax,esi
c000fbe6:	19 f9                	sbb    ecx,edi
c000fbe8:	0f 82 03 01 00 00    	jb     c000fcf1 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbee:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbf7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbfb:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fc01:	83 d7 ff             	adc    edi,0xffffffff
c000fc04:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc08:	31 c0                	xor    eax,eax
c000fc0a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc0e:	39 f2                	cmp    edx,esi
c000fc10:	89 c2                	mov    edx,eax
c000fc12:	19 fa                	sbb    edx,edi
c000fc14:	0f 83 4c ff ff ff    	jae    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc1a:	b8 00 00 08 00       	mov    eax,0x80000
c000fc1f:	83 ec 08             	sub    esp,0x8
c000fc22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc26:	50                   	push   eax
c000fc27:	e8 3e fe ff ff       	call   c000fa6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc34:	83 c4 0c             	add    esp,0xc
c000fc37:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc3b:	03 05 54 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d754
c000fc41:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc48:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c000fc4d:	52                   	push   edx
c000fc4e:	50                   	push   eax
c000fc4f:	68 4e 9f 02 c0       	push   0xc0029f4e
c000fc54:	e8 6b 29 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c000fc59:	83 c4 10             	add    esp,0x10
c000fc5c:	e9 05 ff ff ff       	jmp    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc61:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc69:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc6d:	39 ee                	cmp    esi,ebp
c000fc6f:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc73:	0f 82 ed fe ff ff    	jb     c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc79:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc7e:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc82:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc86:	0f 83 da fe ff ff    	jae    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc8c:	39 e8                	cmp    eax,ebp
c000fc8e:	89 d1                	mov    ecx,edx
c000fc90:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc94:	73 89                	jae    c000fc1f <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc9e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fca2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcb2:	e9 68 ff ff ff       	jmp    c000fc1f <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcb7:	83 ec 0c             	sub    esp,0xc
c000fcba:	68 40 9f 02 c0       	push   0xc0029f40
c000fcbf:	e8 6b a0 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000fcc4:	83 c4 10             	add    esp,0x10
c000fcc7:	bb 40 01 00 00       	mov    ebx,0x140
c000fccc:	83 ec 08             	sub    esp,0x8
c000fccf:	6a 00                	push   0x0
c000fcd1:	53                   	push   ebx
c000fcd2:	43                   	inc    ebx
c000fcd3:	e8 bf fb ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fcd8:	ff 05 54 d7 02 c0    	inc    DWORD PTR ds:0xc002d754
c000fcde:	83 c4 10             	add    esp,0x10
c000fce1:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fce7:	75 e3                	jne    c000fccc <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fce9:	83 c4 3c             	add    esp,0x3c
c000fcec:	5b                   	pop    ebx
c000fced:	5e                   	pop    esi
c000fcee:	5f                   	pop    edi
c000fcef:	5d                   	pop    ebp
c000fcf0:	c3                   	ret    
c000fcf1:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcf9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd01:	e9 e8 fe ff ff       	jmp    c000fbee <Phys::physicalMemorySetup(unsigned int)+0x14c>

c000fd06 <Pipe::isAtty()>:
c000fd06:	31 c0                	xor    eax,eax
c000fd08:	c3                   	ret    
c000fd09:	90                   	nop

c000fd0a <Pipe::~Pipe()>:
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	ba ac 9f 02 c0       	mov    edx,0xc0029fac
c000fd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd16:	89 10                	mov    DWORD PTR [eax],edx
c000fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	50                   	push   eax
c000fd20:	e8 3f 12 00 00       	call   c0010f64 <UnixFile::~UnixFile()>
c000fd25:	83 c4 10             	add    esp,0x10
c000fd28:	90                   	nop
c000fd29:	83 c4 0c             	add    esp,0xc
c000fd2c:	c3                   	ret    
c000fd2d:	90                   	nop

c000fd2e <Pipe::~Pipe()>:
c000fd2e:	83 ec 0c             	sub    esp,0xc
c000fd31:	83 ec 0c             	sub    esp,0xc
c000fd34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd38:	e8 cd ff ff ff       	call   c000fd0a <Pipe::~Pipe()>
c000fd3d:	83 c4 10             	add    esp,0x10
c000fd40:	83 ec 08             	sub    esp,0x8
c000fd43:	6a 20                	push   0x20
c000fd45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd49:	e8 9e 27 00 00       	call   c00124ec <operator delete(void*, unsigned long)>
c000fd4e:	83 c4 10             	add    esp,0x10
c000fd51:	83 c4 0c             	add    esp,0xc
c000fd54:	c3                   	ret    
c000fd55:	90                   	nop

c000fd56 <Pipe::read(unsigned long long, void*, int*)>:
c000fd56:	55                   	push   ebp
c000fd57:	57                   	push   edi
c000fd58:	56                   	push   esi
c000fd59:	53                   	push   ebx
c000fd5a:	83 ec 1c             	sub    esp,0x1c
c000fd5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd61:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd69:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd6c:	89 c8                	mov    eax,ecx
c000fd6e:	99                   	cdq    
c000fd6f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd73:	74 24                	je     c000fd99 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd75:	39 f9                	cmp    ecx,edi
c000fd77:	89 d1                	mov    ecx,edx
c000fd79:	19 f1                	sbb    ecx,esi
c000fd7b:	73 1c                	jae    c000fd99 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd7d:	fa                   	cli    
c000fd7e:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c000fd84:	e8 32 db 00 00       	call   c001d8bb <schedule()>
c000fd89:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c000fd8e:	48                   	dec    eax
c000fd8f:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c000fd94:	75 d3                	jne    c000fd69 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd96:	fb                   	sti    
c000fd97:	eb d0                	jmp    c000fd69 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd99:	39 f8                	cmp    eax,edi
c000fd9b:	89 d1                	mov    ecx,edx
c000fd9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fda0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fda4:	19 f1                	sbb    ecx,esi
c000fda6:	73 07                	jae    c000fdaf <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fda8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fdaf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fdb2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fdb5:	29 f7                	sub    edi,esi
c000fdb7:	89 f8                	mov    eax,edi
c000fdb9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fdbd:	99                   	cdq    
c000fdbe:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fdc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc5:	19 d0                	sbb    eax,edx
c000fdc7:	73 07                	jae    c000fdd0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fdc9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fdcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdd0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdd3:	89 ea                	mov    edx,ebp
c000fdd5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdd9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdde:	74 0d                	je     c000fded <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fde0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fde3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fde7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fded:	85 d2                	test   edx,edx
c000fdef:	74 11                	je     c000fe02 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdf5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdf8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdfc:	89 d1                	mov    ecx,edx
c000fdfe:	89 c7                	mov    edi,eax
c000fe00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe05:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe08:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe0b:	99                   	cdq    
c000fe0c:	89 f7                	mov    edi,esi
c000fe0e:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe11:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe15:	c1 ff 1f             	sar    edi,0x1f
c000fe18:	57                   	push   edi
c000fe19:	56                   	push   esi
c000fe1a:	52                   	push   edx
c000fe1b:	50                   	push   eax
c000fe1c:	e8 e3 68 01 00       	call   c0026704 <__umoddi3>
c000fe21:	83 c4 10             	add    esp,0x10
c000fe24:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe27:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe2c:	75 10                	jne    c000fe3e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe2e:	83 ec 0c             	sub    esp,0xc
c000fe31:	68 6a 9f 02 c0       	push   0xc0029f6a
c000fe36:	e8 f4 9e 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe45:	89 10                	mov    DWORD PTR [eax],edx
c000fe47:	83 c4 1c             	add    esp,0x1c
c000fe4a:	31 c0                	xor    eax,eax
c000fe4c:	5b                   	pop    ebx
c000fe4d:	5e                   	pop    esi
c000fe4e:	5f                   	pop    edi
c000fe4f:	5d                   	pop    ebp
c000fe50:	c3                   	ret    
c000fe51:	90                   	nop

c000fe52 <Pipe::write(unsigned long long, void*, int*)>:
c000fe52:	55                   	push   ebp
c000fe53:	57                   	push   edi
c000fe54:	56                   	push   esi
c000fe55:	53                   	push   ebx
c000fe56:	83 ec 1c             	sub    esp,0x1c
c000fe59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe61:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe64:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe68:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe6f:	89 d8                	mov    eax,ebx
c000fe71:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe74:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe78:	89 d6                	mov    esi,edx
c000fe7a:	89 d7                	mov    edi,edx
c000fe7c:	c1 ff 1f             	sar    edi,0x1f
c000fe7f:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe82:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe86:	c1 f8 1f             	sar    eax,0x1f
c000fe89:	39 f3                	cmp    ebx,esi
c000fe8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe93:	19 f8                	sbb    eax,edi
c000fe95:	b8 01 00 00 00       	mov    eax,0x1
c000fe9a:	72 6e                	jb     c000ff0a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe9f:	01 d0                	add    eax,edx
c000fea1:	99                   	cdq    
c000fea2:	f7 fb                	idiv   ebx
c000fea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea8:	29 d3                	sub    ebx,edx
c000feaa:	89 d7                	mov    edi,edx
c000feac:	89 de                	mov    esi,ebx
c000feae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000feb1:	c1 fb 1f             	sar    ebx,0x1f
c000feb4:	39 f2                	cmp    edx,esi
c000feb6:	19 d8                	sbb    eax,ebx
c000feb8:	b8 00 00 00 00       	mov    eax,0x0
c000febd:	72 04                	jb     c000fec3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000febf:	89 d0                	mov    eax,edx
c000fec1:	29 f0                	sub    eax,esi
c000fec3:	89 d3                	mov    ebx,edx
c000fec5:	29 c3                	sub    ebx,eax
c000fec7:	74 0b                	je     c000fed4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fec9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fecc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fed0:	89 d9                	mov    ecx,ebx
c000fed2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fed4:	85 c0                	test   eax,eax
c000fed6:	74 0d                	je     c000fee5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000fed8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000fedc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fedf:	89 de                	mov    esi,ebx
c000fee1:	89 c1                	mov    ecx,eax
c000fee3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fee8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000feed:	75 10                	jne    c000feff <Pipe::write(unsigned long long, void*, int*)+0xad>
c000feef:	83 ec 0c             	sub    esp,0xc
c000fef2:	68 86 9f 02 c0       	push   0xc0029f86
c000fef7:	e8 33 9e 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c000fefc:	83 c4 10             	add    esp,0x10
c000feff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff03:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff06:	89 08                	mov    DWORD PTR [eax],ecx
c000ff08:	31 c0                	xor    eax,eax
c000ff0a:	83 c4 1c             	add    esp,0x1c
c000ff0d:	5b                   	pop    ebx
c000ff0e:	5e                   	pop    esi
c000ff0f:	5f                   	pop    edi
c000ff10:	5d                   	pop    ebp
c000ff11:	c3                   	ret    

c000ff12 <Pipe::Pipe(int)>:
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff19:	83 ec 08             	sub    esp,0x8
c000ff1c:	6a 00                	push   0x0
c000ff1e:	50                   	push   eax
c000ff1f:	e8 5e 0e 00 00       	call   c0010d82 <UnixFile::UnixFile(int)>
c000ff24:	83 c4 10             	add    esp,0x10
c000ff27:	ba ac 9f 02 c0       	mov    edx,0xc0029fac
c000ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff30:	89 10                	mov    DWORD PTR [eax],edx
c000ff32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff41:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff57:	83 ec 0c             	sub    esp,0xc
c000ff5a:	50                   	push   eax
c000ff5b:	e8 3c f6 ff ff       	call   c000f59c <malloc>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	89 c2                	mov    edx,eax
c000ff65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff70:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff74:	90                   	nop
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <VgaText::isAtty()>:
c000ff7a:	b0 01                	mov    al,0x1
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <VgaText::~VgaText()>:
c000ff7e:	83 ec 0c             	sub    esp,0xc
c000ff81:	ba 34 a0 02 c0       	mov    edx,0xc002a034
c000ff86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8a:	89 10                	mov    DWORD PTR [eax],edx
c000ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff90:	83 ec 0c             	sub    esp,0xc
c000ff93:	50                   	push   eax
c000ff94:	e8 cb 0f 00 00       	call   c0010f64 <UnixFile::~UnixFile()>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	90                   	nop
c000ff9d:	83 c4 0c             	add    esp,0xc
c000ffa0:	c3                   	ret    
c000ffa1:	90                   	nop

c000ffa2 <VgaText::~VgaText()>:
c000ffa2:	83 ec 0c             	sub    esp,0xc
c000ffa5:	83 ec 0c             	sub    esp,0xc
c000ffa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffac:	e8 cd ff ff ff       	call   c000ff7e <VgaText::~VgaText()>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	83 ec 08             	sub    esp,0x8
c000ffb7:	68 c4 02 00 00       	push   0x2c4
c000ffbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffc0:	e8 27 25 00 00       	call   c00124ec <operator delete(void*, unsigned long)>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	83 c4 0c             	add    esp,0xc
c000ffcb:	c3                   	ret    

c000ffcc <VgaText::read(unsigned long long, void*, int*)>:
c000ffcc:	83 ec 10             	sub    esp,0x10
c000ffcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffdb:	e8 aa 5a 00 00       	call   c0015a8a <readKeyboard(VgaText*, char*, unsigned long)>
c000ffe0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffe4:	89 02                	mov    DWORD PTR [edx],eax
c000ffe6:	31 c0                	xor    eax,eax
c000ffe8:	83 c4 1c             	add    esp,0x1c
c000ffeb:	c3                   	ret    

c000ffec <setTerminalScrollLock(bool)>:
c000ffec:	c3                   	ret    

c000ffed <addToTerminalCycle(VgaText*)>:
c000ffed:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c000fff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff7:	85 d2                	test   edx,edx
c000fff9:	75 09                	jne    c0010004 <addToTerminalCycle(VgaText*)+0x17>
c000fffb:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000fffe:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c0010003:	c3                   	ret    
c0010004:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010007:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001000a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001000d:	c3                   	ret    

c001000e <installVgaTextImplementation()>:
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	6a 20                	push   0x20
c0010013:	6a 00                	push   0x0
c0010015:	68 a0 d7 02 c0       	push   0xc002d7a0
c001001a:	e8 31 07 ff ff       	call   c0000750 <memset>
c001001f:	83 c4 1c             	add    esp,0x1c
c0010022:	c3                   	ret    

c0010023 <scrollTerminalScrollLock(int)>:
c0010023:	c3                   	ret    

c0010024 <VgaText::updateTitle()>:
c0010024:	53                   	push   ebx
c0010025:	31 c0                	xor    eax,eax
c0010027:	83 ec 58             	sub    esp,0x58
c001002a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001002e:	89 e1                	mov    ecx,esp
c0010030:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010034:	40                   	inc    eax
c0010035:	83 f8 50             	cmp    eax,0x50
c0010038:	75 f6                	jne    c0010030 <VgaText::updateTitle()+0xc>
c001003a:	31 c0                	xor    eax,eax
c001003c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010043:	84 db                	test   bl,bl
c0010045:	74 06                	je     c001004d <VgaText::updateTitle()+0x29>
c0010047:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001004a:	40                   	inc    eax
c001004b:	eb ef                	jmp    c001003c <VgaText::updateTitle()+0x18>
c001004d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010050:	85 c0                	test   eax,eax
c0010052:	74 09                	je     c001005d <VgaText::updateTitle()+0x39>
c0010054:	53                   	push   ebx
c0010055:	53                   	push   ebx
c0010056:	51                   	push   ecx
c0010057:	52                   	push   edx
c0010058:	ff d0                	call   eax
c001005a:	83 c4 10             	add    esp,0x10
c001005d:	83 c4 58             	add    esp,0x58
c0010060:	5b                   	pop    ebx
c0010061:	c3                   	ret    

c0010062 <VgaText::load()>:
c0010062:	53                   	push   ebx
c0010063:	31 c0                	xor    eax,eax
c0010065:	83 ec 58             	sub    esp,0x58
c0010068:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001006c:	89 e2                	mov    edx,esp
c001006e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010072:	40                   	inc    eax
c0010073:	83 f8 50             	cmp    eax,0x50
c0010076:	75 f6                	jne    c001006e <VgaText::load()+0xc>
c0010078:	31 c0                	xor    eax,eax
c001007a:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010081:	84 c9                	test   cl,cl
c0010083:	74 06                	je     c001008b <VgaText::load()+0x29>
c0010085:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010088:	40                   	inc    eax
c0010089:	eb ef                	jmp    c001007a <VgaText::load()+0x18>
c001008b:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001008e:	85 c0                	test   eax,eax
c0010090:	74 09                	je     c001009b <VgaText::load()+0x39>
c0010092:	51                   	push   ecx
c0010093:	51                   	push   ecx
c0010094:	52                   	push   edx
c0010095:	53                   	push   ebx
c0010096:	ff d0                	call   eax
c0010098:	83 c4 10             	add    esp,0x10
c001009b:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001009e:	85 c0                	test   eax,eax
c00100a0:	74 09                	je     c00100ab <VgaText::load()+0x49>
c00100a2:	83 ec 0c             	sub    esp,0xc
c00100a5:	53                   	push   ebx
c00100a6:	ff d0                	call   eax
c00100a8:	83 c4 10             	add    esp,0x10
c00100ab:	83 c4 58             	add    esp,0x58
c00100ae:	5b                   	pop    ebx
c00100af:	c3                   	ret    

c00100b0 <VgaText::updateCursor()>:
c00100b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b4:	39 05 c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,eax
c00100ba:	75 09                	jne    c00100c5 <VgaText::updateCursor()+0x15>
c00100bc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00100bf:	85 c0                	test   eax,eax
c00100c1:	74 02                	je     c00100c5 <VgaText::updateCursor()+0x15>
c00100c3:	ff e0                	jmp    eax
c00100c5:	c3                   	ret    

c00100c6 <VgaText::doANSI_SGR(int)>:
c00100c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ce:	85 d2                	test   edx,edx
c00100d0:	75 0b                	jne    c00100dd <VgaText::doANSI_SGR(int)+0x17>
c00100d2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100d5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100d8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100db:	eb 59                	jmp    c0010136 <VgaText::doANSI_SGR(int)+0x70>
c00100dd:	83 fa 07             	cmp    edx,0x7
c00100e0:	75 0b                	jne    c00100ed <VgaText::doANSI_SGR(int)+0x27>
c00100e2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100e5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100e8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100eb:	eb 49                	jmp    c0010136 <VgaText::doANSI_SGR(int)+0x70>
c00100ed:	83 fa 1b             	cmp    edx,0x1b
c00100f0:	74 e0                	je     c00100d2 <VgaText::doANSI_SGR(int)+0xc>
c00100f2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100f5:	83 f9 07             	cmp    ecx,0x7
c00100f8:	77 09                	ja     c0010103 <VgaText::doANSI_SGR(int)+0x3d>
c00100fa:	8b 14 8d 60 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd39a0]
c0010101:	eb 20                	jmp    c0010123 <VgaText::doANSI_SGR(int)+0x5d>
c0010103:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010106:	83 f9 07             	cmp    ecx,0x7
c0010109:	77 09                	ja     c0010114 <VgaText::doANSI_SGR(int)+0x4e>
c001010b:	8b 14 8d 60 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd39a0]
c0010112:	eb 22                	jmp    c0010136 <VgaText::doANSI_SGR(int)+0x70>
c0010114:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010117:	83 f9 07             	cmp    ecx,0x7
c001011a:	77 0b                	ja     c0010127 <VgaText::doANSI_SGR(int)+0x61>
c001011c:	8b 14 95 18 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ae8]
c0010123:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010126:	c3                   	ret    
c0010127:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001012a:	83 f9 07             	cmp    ecx,0x7
c001012d:	77 0a                	ja     c0010139 <VgaText::doANSI_SGR(int)+0x73>
c001012f:	8b 14 95 f0 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3b10]
c0010136:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010139:	c3                   	ret    

c001013a <VgaText::setDefaultBgColour(VgaColour)>:
c001013a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001013e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010142:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010145:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010148:	c3                   	ret    
c0010149:	90                   	nop

c001014a <VgaText::setDefaultFgColour(VgaColour)>:
c001014a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001014e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010152:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010155:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010158:	c3                   	ret    
c0010159:	90                   	nop

c001015a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001015a:	53                   	push   ebx
c001015b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001015f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010163:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010167:	51                   	push   ecx
c0010168:	e8 cd ff ff ff       	call   c001013a <VgaText::setDefaultBgColour(VgaColour)>
c001016d:	58                   	pop    eax
c001016e:	5a                   	pop    edx
c001016f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010173:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010177:	5b                   	pop    ebx
c0010178:	eb d0                	jmp    c001014a <VgaText::setDefaultFgColour(VgaColour)>

c001017a <VgaText::setTitleTextColour(VgaColour)>:
c001017a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010182:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010185:	e9 9a fe ff ff       	jmp    c0010024 <VgaText::updateTitle()>

c001018a <VgaText::setTitleColour(VgaColour)>:
c001018a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010192:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010195:	e9 8a fe ff ff       	jmp    c0010024 <VgaText::updateTitle()>

c001019a <VgaText::setTitle(char*)>:
c001019a:	53                   	push   ebx
c001019b:	83 ec 10             	sub    esp,0x10
c001019e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a6:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101ac:	50                   	push   eax
c00101ad:	e8 5a 06 ff ff       	call   c000080c <strcpy>
c00101b2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101b6:	83 c4 18             	add    esp,0x18
c00101b9:	5b                   	pop    ebx
c00101ba:	e9 65 fe ff ff       	jmp    c0010024 <VgaText::updateTitle()>
c00101bf:	90                   	nop

c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00101c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101c9:	83 e0 0f             	and    eax,0xf
c00101cc:	c1 e2 04             	shl    edx,0x4
c00101cf:	09 d0                	or     eax,edx
c00101d1:	c3                   	ret    

c00101d2 <VgaText::scrollScreen()>:
c00101d2:	55                   	push   ebp
c00101d3:	b9 01 00 00 00       	mov    ecx,0x1
c00101d8:	57                   	push   edi
c00101d9:	56                   	push   esi
c00101da:	53                   	push   ebx
c00101db:	83 ec 0c             	sub    esp,0xc
c00101de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101e2:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101e8:	31 ff                	xor    edi,edi
c00101ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101ed:	83 f9 17             	cmp    ecx,0x17
c00101f0:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101f3:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101fa:	75 27                	jne    c0010223 <VgaText::scrollScreen()+0x51>
c00101fc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101ff:	01 f5                	add    ebp,esi
c0010201:	f7 c7 01 00 00 00    	test   edi,0x1
c0010207:	74 16                	je     c001021f <VgaText::scrollScreen()+0x4d>
c0010209:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001020d:	50                   	push   eax
c001020e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010212:	50                   	push   eax
c0010213:	e8 a8 ff ff ff       	call   c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010218:	5a                   	pop    edx
c0010219:	5a                   	pop    edx
c001021a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001021d:	eb 04                	jmp    c0010223 <VgaText::scrollScreen()+0x51>
c001021f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010223:	47                   	inc    edi
c0010224:	46                   	inc    esi
c0010225:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001022b:	75 bd                	jne    c00101ea <VgaText::scrollScreen()+0x18>
c001022d:	41                   	inc    ecx
c001022e:	83 f9 18             	cmp    ecx,0x18
c0010231:	75 af                	jne    c00101e2 <VgaText::scrollScreen()+0x10>
c0010233:	39 1d c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,ebx
c0010239:	75 1b                	jne    c0010256 <VgaText::scrollScreen()+0x84>
c001023b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001023f:	74 05                	je     c0010246 <VgaText::scrollScreen()+0x74>
c0010241:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010244:	eb 10                	jmp    c0010256 <VgaText::scrollScreen()+0x84>
c0010246:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010249:	85 c0                	test   eax,eax
c001024b:	74 09                	je     c0010256 <VgaText::scrollScreen()+0x84>
c001024d:	83 ec 0c             	sub    esp,0xc
c0010250:	53                   	push   ebx
c0010251:	ff d0                	call   eax
c0010253:	83 c4 10             	add    esp,0x10
c0010256:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001025a:	83 c4 0c             	add    esp,0xc
c001025d:	5b                   	pop    ebx
c001025e:	5e                   	pop    esi
c001025f:	5f                   	pop    edi
c0010260:	5d                   	pop    ebp
c0010261:	e9 4a fe ff ff       	jmp    c00100b0 <VgaText::updateCursor()>

c0010266 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010266:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001026b:	c1 e0 08             	shl    eax,0x8
c001026e:	89 c2                	mov    edx,eax
c0010270:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010275:	09 d0                	or     eax,edx
c0010277:	c3                   	ret    

c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010278:	56                   	push   esi
c0010279:	53                   	push   ebx
c001027a:	51                   	push   ecx
c001027b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001027f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010284:	50                   	push   eax
c0010285:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001028a:	50                   	push   eax
c001028b:	e8 30 ff ff ff       	call   c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010290:	5b                   	pop    ebx
c0010291:	0f b6 c0             	movzx  eax,al
c0010294:	5e                   	pop    esi
c0010295:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001029a:	50                   	push   eax
c001029b:	53                   	push   ebx
c001029c:	e8 c5 ff ff ff       	call   c0010266 <VgaText::combineCharAndColour(char, unsigned char)>
c00102a1:	5a                   	pop    edx
c00102a2:	5e                   	pop    esi
c00102a3:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102a6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102ac:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102b0:	0f b7 d2             	movzx  edx,dx
c00102b3:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102b7:	39 0d c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,ecx
c00102bd:	75 10                	jne    c00102cf <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102bf:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00102c2:	85 c0                	test   eax,eax
c00102c4:	74 09                	je     c00102cf <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102c6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102ca:	5a                   	pop    edx
c00102cb:	5b                   	pop    ebx
c00102cc:	5e                   	pop    esi
c00102cd:	ff e0                	jmp    eax
c00102cf:	58                   	pop    eax
c00102d0:	5b                   	pop    ebx
c00102d1:	5e                   	pop    esi
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <VgaText::getCursorX()>:
c00102d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102db:	c3                   	ret    

c00102dc <VgaText::getCursorY()>:
c00102dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102e3:	c3                   	ret    

c00102e4 <VgaText::setCursor(int, int)>:
c00102e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102f6:	e9 b5 fd ff ff       	jmp    c00100b0 <VgaText::updateCursor()>

c00102fb <setActiveTerminal(VgaText*)>:
c00102fb:	53                   	push   ebx
c00102fc:	83 ec 08             	sub    esp,0x8
c00102ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010303:	85 db                	test   ebx,ebx
c0010305:	75 11                	jne    c0010318 <setActiveTerminal(VgaText*)+0x1d>
c0010307:	c7 44 24 10 c0 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029fc0
c001030f:	83 c4 08             	add    esp,0x8
c0010312:	5b                   	pop    ebx
c0010313:	e9 17 9a 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>
c0010318:	a1 c4 d7 02 c0       	mov    eax,ds:0xc002d7c4
c001031d:	85 c0                	test   eax,eax
c001031f:	74 0c                	je     c001032d <setActiveTerminal(VgaText*)+0x32>
c0010321:	83 ec 0c             	sub    esp,0xc
c0010324:	50                   	push   eax
c0010325:	e8 86 fd ff ff       	call   c00100b0 <VgaText::updateCursor()>
c001032a:	83 c4 10             	add    esp,0x10
c001032d:	89 1d c4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c4,ebx
c0010333:	51                   	push   ecx
c0010334:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010337:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001033a:	53                   	push   ebx
c001033b:	e8 a4 ff ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c0010340:	83 c4 10             	add    esp,0x10
c0010343:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010347:	75 07                	jne    c0010350 <setActiveTerminal(VgaText*)+0x55>
c0010349:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010350:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010354:	83 c4 08             	add    esp,0x8
c0010357:	5b                   	pop    ebx
c0010358:	e9 05 fd ff ff       	jmp    c0010062 <VgaText::load()>

c001035d <doTerminalCycle()>:
c001035d:	83 ec 18             	sub    esp,0x18
c0010360:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c0010365:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010368:	50                   	push   eax
c0010369:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c001036e:	e8 88 ff ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c0010373:	83 c4 1c             	add    esp,0x1c
c0010376:	c3                   	ret    
c0010377:	90                   	nop

c0010378 <VgaText::setCursorX(int)>:
c0010378:	83 ec 10             	sub    esp,0x10
c001037b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001037f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010386:	50                   	push   eax
c0010387:	e8 58 ff ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c001038c:	83 c4 1c             	add    esp,0x1c
c001038f:	c3                   	ret    

c0010390 <VgaText::setCursorY(int)>:
c0010390:	83 ec 10             	sub    esp,0x10
c0010393:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001039b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001039e:	50                   	push   eax
c001039f:	e8 40 ff ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c00103a4:	83 c4 1c             	add    esp,0x1c
c00103a7:	c3                   	ret    

c00103a8 <VgaText::incrementCursor(bool)>:
c00103a8:	56                   	push   esi
c00103a9:	53                   	push   ebx
c00103aa:	51                   	push   ecx
c00103ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103b6:	40                   	inc    eax
c00103b7:	83 f8 50             	cmp    eax,0x50
c00103ba:	74 05                	je     c00103c1 <VgaText::incrementCursor(bool)+0x19>
c00103bc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00103bf:	eb 24                	jmp    c00103e5 <VgaText::incrementCursor(bool)+0x3d>
c00103c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103cb:	8d 50 01             	lea    edx,[eax+0x1]
c00103ce:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103d1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103d4:	75 0f                	jne    c00103e5 <VgaText::incrementCursor(bool)+0x3d>
c00103d6:	83 ec 0c             	sub    esp,0xc
c00103d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103dc:	53                   	push   ebx
c00103dd:	e8 f0 fd ff ff       	call   c00101d2 <VgaText::scrollScreen()>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 f0                	mov    eax,esi
c00103e7:	84 c0                	test   al,al
c00103e9:	74 0c                	je     c00103f7 <VgaText::incrementCursor(bool)+0x4f>
c00103eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ef:	5a                   	pop    edx
c00103f0:	5b                   	pop    ebx
c00103f1:	5e                   	pop    esi
c00103f2:	e9 b9 fc ff ff       	jmp    c00100b0 <VgaText::updateCursor()>
c00103f7:	58                   	pop    eax
c00103f8:	5b                   	pop    ebx
c00103f9:	5e                   	pop    esi
c00103fa:	c3                   	ret    
c00103fb:	90                   	nop

c00103fc <VgaText::decrementCursor(bool)>:
c00103fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010400:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010404:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010407:	85 c0                	test   eax,eax
c0010409:	74 04                	je     c001040f <VgaText::decrementCursor(bool)+0x13>
c001040b:	48                   	dec    eax
c001040c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001040f:	84 c9                	test   cl,cl
c0010411:	74 09                	je     c001041c <VgaText::decrementCursor(bool)+0x20>
c0010413:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010417:	e9 94 fc ff ff       	jmp    c00100b0 <VgaText::updateCursor()>
c001041c:	c3                   	ret    
c001041d:	90                   	nop

c001041e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001041e:	53                   	push   ebx
c001041f:	83 ec 08             	sub    esp,0x8
c0010422:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010426:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001042a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001042e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010432:	3c 07                	cmp    al,0x7
c0010434:	75 2a                	jne    c0010460 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010436:	a1 78 d8 02 c0       	mov    eax,ds:0xc002d878
c001043b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010443:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001044b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010453:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010457:	83 c4 08             	add    esp,0x8
c001045a:	5b                   	pop    ebx
c001045b:	e9 70 2f 00 00       	jmp    c00133d0 <Buzzer::beep(int, int, bool)>
c0010460:	3c 0d                	cmp    al,0xd
c0010462:	75 09                	jne    c001046d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010464:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001046b:	eb 2c                	jmp    c0010499 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001046d:	3c 0a                	cmp    al,0xa
c001046f:	75 31                	jne    c00104a2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010471:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010474:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001047b:	8d 50 01             	lea    edx,[eax+0x1]
c001047e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010481:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010484:	75 0f                	jne    c0010495 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010486:	83 ec 0c             	sub    esp,0xc
c0010489:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001048c:	53                   	push   ebx
c001048d:	e8 40 fd ff ff       	call   c00101d2 <VgaText::scrollScreen()>
c0010492:	83 c4 10             	add    esp,0x10
c0010495:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010499:	83 c4 08             	add    esp,0x8
c001049c:	5b                   	pop    ebx
c001049d:	e9 0e fc ff ff       	jmp    c00100b0 <VgaText::updateCursor()>
c00104a2:	3c 08                	cmp    al,0x8
c00104a4:	75 25                	jne    c00104cb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104a6:	50                   	push   eax
c00104a7:	50                   	push   eax
c00104a8:	6a 01                	push   0x1
c00104aa:	53                   	push   ebx
c00104ab:	e8 4c ff ff ff       	call   c00103fc <VgaText::decrementCursor(bool)>
c00104b0:	5a                   	pop    edx
c00104b1:	59                   	pop    ecx
c00104b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00104be:	6a 20                	push   0x20
c00104c0:	53                   	push   ebx
c00104c1:	e8 b2 fd ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104c6:	83 c4 28             	add    esp,0x28
c00104c9:	5b                   	pop    ebx
c00104ca:	c3                   	ret    
c00104cb:	83 ec 08             	sub    esp,0x8
c00104ce:	0f be c0             	movsx  eax,al
c00104d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104d4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104d7:	51                   	push   ecx
c00104d8:	52                   	push   edx
c00104d9:	50                   	push   eax
c00104da:	53                   	push   ebx
c00104db:	e8 98 fd ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104e0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104e4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104ec:	83 c4 28             	add    esp,0x28
c00104ef:	5b                   	pop    ebx
c00104f0:	e9 b3 fe ff ff       	jmp    c00103a8 <VgaText::incrementCursor(bool)>
c00104f5:	90                   	nop

c00104f6 <VgaText::doUpdate()>:
c00104f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104fa:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104fd:	85 c0                	test   eax,eax
c00104ff:	74 02                	je     c0010503 <VgaText::doUpdate()+0xd>
c0010501:	ff e0                	jmp    eax
c0010503:	c3                   	ret    

c0010504 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010504:	55                   	push   ebp
c0010505:	31 ed                	xor    ebp,ebp
c0010507:	57                   	push   edi
c0010508:	56                   	push   esi
c0010509:	53                   	push   ebx
c001050a:	83 ec 1c             	sub    esp,0x1c
c001050d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010511:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010516:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001051d:	50                   	push   eax
c001051e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010523:	50                   	push   eax
c0010524:	e8 97 fc ff ff       	call   c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010529:	59                   	pop    ecx
c001052a:	0f b6 c0             	movzx  eax,al
c001052d:	5e                   	pop    esi
c001052e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010533:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010537:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001053a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001053e:	0f b7 f6             	movzx  esi,si
c0010541:	01 f6                	add    esi,esi
c0010543:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010546:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010549:	84 c0                	test   al,al
c001054b:	0f 84 fd 00 00 00    	je     c001064e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010551:	3c 0d                	cmp    al,0xd
c0010553:	75 0c                	jne    c0010561 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010555:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001055c:	e9 e7 00 00 00       	jmp    c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010561:	3c 0a                	cmp    al,0xa
c0010563:	75 47                	jne    c00105ac <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010565:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010568:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001056f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010572:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010575:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010578:	75 0f                	jne    c0010589 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c001057a:	83 ec 0c             	sub    esp,0xc
c001057d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010580:	53                   	push   ebx
c0010581:	e8 4c fc ff ff       	call   c00101d2 <VgaText::scrollScreen()>
c0010586:	83 c4 10             	add    esp,0x10
c0010589:	83 ec 0c             	sub    esp,0xc
c001058c:	31 ed                	xor    ebp,ebp
c001058e:	53                   	push   ebx
c001058f:	e8 1c fb ff ff       	call   c00100b0 <VgaText::updateCursor()>
c0010594:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001059f:	0f b7 f6             	movzx  esi,si
c00105a2:	01 f6                	add    esi,esi
c00105a4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105a7:	e9 9c 00 00 00       	jmp    c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105ac:	3c 08                	cmp    al,0x8
c00105ae:	75 35                	jne    c00105e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105b0:	56                   	push   esi
c00105b1:	56                   	push   esi
c00105b2:	6a 01                	push   0x1
c00105b4:	53                   	push   ebx
c00105b5:	e8 42 fe ff ff       	call   c00103fc <VgaText::decrementCursor(bool)>
c00105ba:	58                   	pop    eax
c00105bb:	5a                   	pop    edx
c00105bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105bf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105c2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105c5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105c8:	6a 20                	push   0x20
c00105ca:	53                   	push   ebx
c00105cb:	e8 a8 fc ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105d0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105d5:	83 c4 20             	add    esp,0x20
c00105d8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105db:	0f b7 f6             	movzx  esi,si
c00105de:	01 f6                	add    esi,esi
c00105e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105e3:	eb 63                	jmp    c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105e5:	51                   	push   ecx
c00105e6:	51                   	push   ecx
c00105e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105eb:	50                   	push   eax
c00105ec:	e8 75 fc ff ff       	call   c0010266 <VgaText::combineCharAndColour(char, unsigned char)>
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	66 89 06             	mov    WORD PTR [esi],ax
c00105f7:	39 1d c4 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c4,ebx
c00105fd:	75 21                	jne    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105ff:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 1a                	je     c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010606:	52                   	push   edx
c0010607:	52                   	push   edx
c0010608:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001060b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001060e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010612:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010616:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010619:	51                   	push   ecx
c001061a:	53                   	push   ebx
c001061b:	ff d0                	call   eax
c001061d:	83 c4 20             	add    esp,0x20
c0010620:	83 c6 02             	add    esi,0x2
c0010623:	50                   	push   eax
c0010624:	50                   	push   eax
c0010625:	6a 00                	push   0x0
c0010627:	53                   	push   ebx
c0010628:	e8 7b fd ff ff       	call   c00103a8 <VgaText::incrementCursor(bool)>
c001062d:	83 c4 10             	add    esp,0x10
c0010630:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010634:	75 0d                	jne    c0010643 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010636:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001063b:	0f b7 f6             	movzx  esi,si
c001063e:	01 f6                	add    esi,esi
c0010640:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010643:	bd 01 00 00 00       	mov    ebp,0x1
c0010648:	47                   	inc    edi
c0010649:	e9 f8 fe ff ff       	jmp    c0010546 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	53                   	push   ebx
c0010652:	e8 59 fa ff ff       	call   c00100b0 <VgaText::updateCursor()>
c0010657:	83 c4 10             	add    esp,0x10
c001065a:	89 e8                	mov    eax,ebp
c001065c:	84 c0                	test   al,al
c001065e:	74 0c                	je     c001066c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010660:	83 ec 0c             	sub    esp,0xc
c0010663:	53                   	push   ebx
c0010664:	e8 8d fe ff ff       	call   c00104f6 <VgaText::doUpdate()>
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010673:	83 c4 1c             	add    esp,0x1c
c0010676:	5b                   	pop    ebx
c0010677:	5e                   	pop    esi
c0010678:	5f                   	pop    edi
c0010679:	5d                   	pop    ebp
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <VgaText::clearScreen()>:
c001067c:	57                   	push   edi
c001067d:	56                   	push   esi
c001067e:	31 f6                	xor    esi,esi
c0010680:	53                   	push   ebx
c0010681:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010685:	52                   	push   edx
c0010686:	6a 00                	push   0x0
c0010688:	6a 00                	push   0x0
c001068a:	53                   	push   ebx
c001068b:	e8 54 fc ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c0010690:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010697:	83 c4 10             	add    esp,0x10
c001069a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001069d:	7e 20                	jle    c00106bf <VgaText::clearScreen()+0x43>
c001069f:	31 ff                	xor    edi,edi
c00106a1:	50                   	push   eax
c00106a2:	50                   	push   eax
c00106a3:	56                   	push   esi
c00106a4:	57                   	push   edi
c00106a5:	47                   	inc    edi
c00106a6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106a9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106ac:	6a 20                	push   0x20
c00106ae:	53                   	push   ebx
c00106af:	e8 c4 fb ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106b4:	83 c4 20             	add    esp,0x20
c00106b7:	83 ff 50             	cmp    edi,0x50
c00106ba:	75 e5                	jne    c00106a1 <VgaText::clearScreen()+0x25>
c00106bc:	46                   	inc    esi
c00106bd:	eb db                	jmp    c001069a <VgaText::clearScreen()+0x1e>
c00106bf:	83 ec 0c             	sub    esp,0xc
c00106c2:	53                   	push   ebx
c00106c3:	e8 2e fe ff ff       	call   c00104f6 <VgaText::doUpdate()>
c00106c8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	5b                   	pop    ebx
c00106d3:	5e                   	pop    esi
c00106d4:	5f                   	pop    edi
c00106d5:	c3                   	ret    

c00106d6 <VgaText::putchar(char)>:
c00106d6:	56                   	push   esi
c00106d7:	53                   	push   ebx
c00106d8:	83 ec 14             	sub    esp,0x14
c00106db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106e3:	3c 5b                	cmp    al,0x5b
c00106e5:	75 18                	jne    c00106ff <VgaText::putchar(char)+0x29>
c00106e7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106eb:	74 1f                	je     c001070c <VgaText::putchar(char)+0x36>
c00106ed:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106f3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106fa:	e9 bd 00 00 00       	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c00106ff:	3c 1b                	cmp    al,0x1b
c0010701:	75 09                	jne    c001070c <VgaText::putchar(char)+0x36>
c0010703:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010707:	e9 b0 00 00 00       	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c001070c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001070f:	84 c9                	test   cl,cl
c0010711:	0f 84 92 00 00 00    	je     c00107a9 <VgaText::putchar(char)+0xd3>
c0010717:	8d 50 c0             	lea    edx,[eax-0x40]
c001071a:	80 fa 3e             	cmp    dl,0x3e
c001071d:	77 76                	ja     c0010795 <VgaText::putchar(char)+0xbf>
c001071f:	3c 6d                	cmp    al,0x6d
c0010721:	75 47                	jne    c001076a <VgaText::putchar(char)+0x94>
c0010723:	31 f6                	xor    esi,esi
c0010725:	31 d2                	xor    edx,edx
c0010727:	31 c0                	xor    eax,eax
c0010729:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001072c:	7e 2d                	jle    c001075b <VgaText::putchar(char)+0x85>
c001072e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010733:	80 fa 3b             	cmp    dl,0x3b
c0010736:	75 17                	jne    c001074f <VgaText::putchar(char)+0x79>
c0010738:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001073c:	50                   	push   eax
c001073d:	53                   	push   ebx
c001073e:	e8 83 f9 ff ff       	call   c00100c6 <VgaText::doANSI_SGR(int)>
c0010743:	59                   	pop    ecx
c0010744:	31 d2                	xor    edx,edx
c0010746:	58                   	pop    eax
c0010747:	31 c0                	xor    eax,eax
c0010749:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001074d:	eb 09                	jmp    c0010758 <VgaText::putchar(char)+0x82>
c001074f:	6b c0 0a             	imul   eax,eax,0xa
c0010752:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010756:	88 ca                	mov    dl,cl
c0010758:	46                   	inc    esi
c0010759:	eb ce                	jmp    c0010729 <VgaText::putchar(char)+0x53>
c001075b:	84 d2                	test   dl,dl
c001075d:	74 2e                	je     c001078d <VgaText::putchar(char)+0xb7>
c001075f:	50                   	push   eax
c0010760:	53                   	push   ebx
c0010761:	e8 60 f9 ff ff       	call   c00100c6 <VgaText::doANSI_SGR(int)>
c0010766:	58                   	pop    eax
c0010767:	5a                   	pop    edx
c0010768:	eb 23                	jmp    c001078d <VgaText::putchar(char)+0xb7>
c001076a:	3c 4a                	cmp    al,0x4a
c001076c:	75 1f                	jne    c001078d <VgaText::putchar(char)+0xb7>
c001076e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010772:	75 19                	jne    c001078d <VgaText::putchar(char)+0xb7>
c0010774:	83 ec 0c             	sub    esp,0xc
c0010777:	53                   	push   ebx
c0010778:	e8 ff fe ff ff       	call   c001067c <VgaText::clearScreen()>
c001077d:	83 c4 0c             	add    esp,0xc
c0010780:	6a 00                	push   0x0
c0010782:	6a 00                	push   0x0
c0010784:	53                   	push   ebx
c0010785:	e8 5a fb ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c001078a:	83 c4 10             	add    esp,0x10
c001078d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010793:	eb 27                	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c0010795:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010798:	83 fa 0e             	cmp    edx,0xe
c001079b:	7f 1f                	jg     c00107bc <VgaText::putchar(char)+0xe6>
c001079d:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107a0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107a3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107a7:	eb 13                	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c00107a9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107ac:	0f be c0             	movsx  eax,al
c00107af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107b2:	50                   	push   eax
c00107b3:	53                   	push   ebx
c00107b4:	e8 65 fc ff ff       	call   c001041e <VgaText::putchar(char, VgaColour, VgaColour)>
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	83 c4 14             	add    esp,0x14
c00107bf:	5b                   	pop    ebx
c00107c0:	5e                   	pop    esi
c00107c1:	c3                   	ret    

c00107c2 <VgaText::putx(unsigned int)>:
c00107c2:	57                   	push   edi
c00107c3:	b9 11 00 00 00       	mov    ecx,0x11
c00107c8:	56                   	push   esi
c00107c9:	be ce 9f 02 c0       	mov    esi,0xc0029fce
c00107ce:	53                   	push   ebx
c00107cf:	83 ec 20             	sub    esp,0x20
c00107d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107d6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107da:	fc                   	cld    
c00107db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107dd:	be 08 00 00 00       	mov    esi,0x8
c00107e2:	50                   	push   eax
c00107e3:	50                   	push   eax
c00107e4:	89 d8                	mov    eax,ebx
c00107e6:	c1 e3 04             	shl    ebx,0x4
c00107e9:	c1 e8 1c             	shr    eax,0x1c
c00107ec:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107f1:	50                   	push   eax
c00107f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107f6:	e8 db fe ff ff       	call   c00106d6 <VgaText::putchar(char)>
c00107fb:	83 c4 10             	add    esp,0x10
c00107fe:	4e                   	dec    esi
c00107ff:	75 e1                	jne    c00107e2 <VgaText::putx(unsigned int)+0x20>
c0010801:	83 c4 20             	add    esp,0x20
c0010804:	5b                   	pop    ebx
c0010805:	5e                   	pop    esi
c0010806:	5f                   	pop    edi
c0010807:	c3                   	ret    

c0010808 <VgaText::puts(char const*)>:
c0010808:	53                   	push   ebx
c0010809:	83 ec 08             	sub    esp,0x8
c001080c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010810:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010813:	84 c0                	test   al,al
c0010815:	74 12                	je     c0010829 <VgaText::puts(char const*)+0x21>
c0010817:	43                   	inc    ebx
c0010818:	51                   	push   ecx
c0010819:	51                   	push   ecx
c001081a:	50                   	push   eax
c001081b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081f:	e8 b2 fe ff ff       	call   c00106d6 <VgaText::putchar(char)>
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	eb e7                	jmp    c0010810 <VgaText::puts(char const*)+0x8>
c0010829:	83 c4 08             	add    esp,0x8
c001082c:	5b                   	pop    ebx
c001082d:	c3                   	ret    

c001082e <VgaText::VgaText(char const*)>:
c001082e:	57                   	push   edi
c001082f:	56                   	push   esi
c0010830:	53                   	push   ebx
c0010831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010835:	83 ec 08             	sub    esp,0x8
c0010838:	6a 00                	push   0x0
c001083a:	50                   	push   eax
c001083b:	e8 42 05 00 00       	call   c0010d82 <UnixFile::UnixFile(int)>
c0010840:	83 c4 10             	add    esp,0x10
c0010843:	ba 34 a0 02 c0       	mov    edx,0xc002a034
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	89 10                	mov    DWORD PTR [eax],edx
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010868:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001086c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010870:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010878:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001087f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010883:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001088a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010899:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	8d 50 60             	lea    edx,[eax+0x60]
c00108a7:	bb a0 d7 02 c0       	mov    ebx,0xc002d7a0
c00108ac:	b8 08 00 00 00       	mov    eax,0x8
c00108b1:	fc                   	cld    
c00108b2:	89 d7                	mov    edi,edx
c00108b4:	89 de                	mov    esi,ebx
c00108b6:	89 c1                	mov    ecx,eax
c00108b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108be:	05 82 00 00 00       	add    eax,0x82
c00108c3:	83 ec 08             	sub    esp,0x8
c00108c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ca:	50                   	push   eax
c00108cb:	e8 3c ff fe ff       	call   c000080c <strcpy>
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108de:	83 ec 0c             	sub    esp,0xc
c00108e1:	6a 01                	push   0x1
c00108e3:	e8 dd 08 00 00       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c00108e8:	83 c4 10             	add    esp,0x10
c00108eb:	89 c2                	mov    edx,eax
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108f4:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c00108fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010901:	89 c6                	mov    esi,eax
c0010903:	e8 38 f0 ff ff       	call   c000f940 <Phys::allocatePage()>
c0010908:	6a 05                	push   0x5
c001090a:	56                   	push   esi
c001090b:	50                   	push   eax
c001090c:	53                   	push   ebx
c001090d:	e8 70 10 00 00       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010919:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001091c:	83 ec 04             	sub    esp,0x4
c001091f:	68 00 0f 00 00       	push   0xf00
c0010924:	6a 00                	push   0x0
c0010926:	50                   	push   eax
c0010927:	e8 24 fe fe ff       	call   c0000750 <memset>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	83 ec 04             	sub    esp,0x4
c0010932:	6a 00                	push   0x0
c0010934:	6a 07                	push   0x7
c0010936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093a:	e8 1b f8 ff ff       	call   c001015a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001093f:	83 c4 10             	add    esp,0x10
c0010942:	83 ec 04             	sub    esp,0x4
c0010945:	6a 00                	push   0x0
c0010947:	6a 00                	push   0x0
c0010949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001094d:	e8 92 f9 ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c0010952:	83 c4 10             	add    esp,0x10
c0010955:	83 ec 0c             	sub    esp,0xc
c0010958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001095c:	e8 1b fd ff ff       	call   c001067c <VgaText::clearScreen()>
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001096c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010970:	05 02 01 00 00       	add    eax,0x102
c0010975:	83 ec 04             	sub    esp,0x4
c0010978:	68 96 00 00 00       	push   0x96
c001097d:	6a 00                	push   0x0
c001097f:	50                   	push   eax
c0010980:	e8 cb fd fe ff       	call   c0000750 <memset>
c0010985:	83 c4 10             	add    esp,0x10
c0010988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098c:	05 98 01 00 00       	add    eax,0x198
c0010991:	83 ec 04             	sub    esp,0x4
c0010994:	68 2c 01 00 00       	push   0x12c
c0010999:	6a 00                	push   0x0
c001099b:	50                   	push   eax
c001099c:	e8 af fd fe ff       	call   c0000750 <memset>
c00109a1:	83 c4 10             	add    esp,0x10
c00109a4:	90                   	nop
c00109a5:	5b                   	pop    ebx
c00109a6:	5e                   	pop    esi
c00109a7:	5f                   	pop    edi
c00109a8:	c3                   	ret    
c00109a9:	90                   	nop

c00109aa <VgaText::receiveKey(unsigned char)>:
c00109aa:	55                   	push   ebp
c00109ab:	57                   	push   edi
c00109ac:	56                   	push   esi
c00109ad:	53                   	push   ebx
c00109ae:	83 ec 1c             	sub    esp,0x1c
c00109b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109b9:	84 db                	test   bl,bl
c00109bb:	0f 84 c9 00 00 00    	je     c0010a8a <VgaText::receiveKey(unsigned char)+0xe0>
c00109c1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109c7:	80 fb 08             	cmp    bl,0x8
c00109ca:	75 2c                	jne    c00109f8 <VgaText::receiveKey(unsigned char)+0x4e>
c00109cc:	83 ec 0c             	sub    esp,0xc
c00109cf:	57                   	push   edi
c00109d0:	e8 97 fd fe ff       	call   c000076c <strlen>
c00109d5:	83 c4 10             	add    esp,0x10
c00109d8:	85 c0                	test   eax,eax
c00109da:	74 41                	je     c0010a1d <VgaText::receiveKey(unsigned char)+0x73>
c00109dc:	50                   	push   eax
c00109dd:	50                   	push   eax
c00109de:	6a 08                	push   0x8
c00109e0:	56                   	push   esi
c00109e1:	e8 f0 fc ff ff       	call   c00106d6 <VgaText::putchar(char)>
c00109e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109e9:	e8 7e fd fe ff       	call   c000076c <strlen>
c00109ee:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109f6:	eb 22                	jmp    c0010a1a <VgaText::receiveKey(unsigned char)+0x70>
c00109f8:	0f be c3             	movsx  eax,bl
c00109fb:	52                   	push   edx
c00109fc:	52                   	push   edx
c00109fd:	50                   	push   eax
c00109fe:	56                   	push   esi
c00109ff:	e8 d2 fc ff ff       	call   c00106d6 <VgaText::putchar(char)>
c0010a04:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a08:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a0d:	59                   	pop    ecx
c0010a0e:	5d                   	pop    ebp
c0010a0f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a13:	50                   	push   eax
c0010a14:	57                   	push   edi
c0010a15:	e8 32 ff fe ff       	call   c000094c <strcat>
c0010a1a:	83 c4 10             	add    esp,0x10
c0010a1d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a24:	75 05                	jne    c0010a2b <VgaText::receiveKey(unsigned char)+0x81>
c0010a26:	80 fb 0a             	cmp    bl,0xa
c0010a29:	75 53                	jne    c0010a7e <VgaText::receiveKey(unsigned char)+0xd4>
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a34:	53                   	push   ebx
c0010a35:	e8 32 fd fe ff       	call   c000076c <strlen>
c0010a3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a3d:	89 c5                	mov    ebp,eax
c0010a3f:	e8 28 fd fe ff       	call   c000076c <strlen>
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a4b:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a50:	76 10                	jbe    c0010a62 <VgaText::receiveKey(unsigned char)+0xb8>
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	68 df 9f 02 c0       	push   0xc0029fdf
c0010a5a:	e8 d0 92 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	50                   	push   eax
c0010a63:	50                   	push   eax
c0010a64:	57                   	push   edi
c0010a65:	53                   	push   ebx
c0010a66:	e8 e1 fe fe ff       	call   c000094c <strcat>
c0010a6b:	83 c4 0c             	add    esp,0xc
c0010a6e:	68 96 00 00 00       	push   0x96
c0010a73:	6a 00                	push   0x0
c0010a75:	57                   	push   edi
c0010a76:	e8 d5 fc fe ff       	call   c0000750 <memset>
c0010a7b:	83 c4 10             	add    esp,0x10
c0010a7e:	83 ec 0c             	sub    esp,0xc
c0010a81:	56                   	push   esi
c0010a82:	e8 6f fa ff ff       	call   c00104f6 <VgaText::doUpdate()>
c0010a87:	83 c4 10             	add    esp,0x10
c0010a8a:	83 c4 1c             	add    esp,0x1c
c0010a8d:	5b                   	pop    ebx
c0010a8e:	5e                   	pop    esi
c0010a8f:	5f                   	pop    edi
c0010a90:	5d                   	pop    ebp
c0010a91:	c3                   	ret    

c0010a92 <VgaText::write(unsigned long long, void*, int*)>:
c0010a92:	55                   	push   ebp
c0010a93:	57                   	push   edi
c0010a94:	56                   	push   esi
c0010a95:	53                   	push   ebx
c0010a96:	83 ec 0c             	sub    esp,0xc
c0010a99:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a9d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010aa1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aa5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010aac:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010aaf:	39 eb                	cmp    ebx,ebp
c0010ab1:	74 13                	je     c0010ac6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010ab3:	43                   	inc    ebx
c0010ab4:	50                   	push   eax
c0010ab5:	50                   	push   eax
c0010ab6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010aba:	50                   	push   eax
c0010abb:	56                   	push   esi
c0010abc:	e8 15 fc ff ff       	call   c00106d6 <VgaText::putchar(char)>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	eb e9                	jmp    c0010aaf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010ac6:	83 ec 0c             	sub    esp,0xc
c0010ac9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010ad0:	56                   	push   esi
c0010ad1:	e8 20 fa ff ff       	call   c00104f6 <VgaText::doUpdate()>
c0010ad6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ada:	89 38                	mov    DWORD PTR [eax],edi
c0010adc:	83 c4 1c             	add    esp,0x1c
c0010adf:	31 c0                	xor    eax,eax
c0010ae1:	5b                   	pop    ebx
c0010ae2:	5e                   	pop    esi
c0010ae3:	5f                   	pop    edi
c0010ae4:	5d                   	pop    ebp
c0010ae5:	c3                   	ret    

c0010ae6 <newTerminal(char*)>:
c0010ae6:	83 ec 28             	sub    esp,0x28
c0010ae9:	68 c4 02 00 00       	push   0x2c4
c0010aee:	e8 a9 ea ff ff       	call   c000f59c <malloc>
c0010af3:	5a                   	pop    edx
c0010af4:	59                   	pop    ecx
c0010af5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010af9:	50                   	push   eax
c0010afa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010afe:	e8 2b fd ff ff       	call   c001082e <VgaText::VgaText(char const*)>
c0010b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b07:	83 c4 2c             	add    esp,0x2c
c0010b0a:	c3                   	ret    
c0010b0b:	90                   	nop

c0010b0c <TSS::TSS()>:
c0010b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b17:	90                   	nop
c0010b18:	c3                   	ret    
c0010b19:	90                   	nop

c0010b1a <TSS::setESP(unsigned long)>:
c0010b1a:	55                   	push   ebp
c0010b1b:	89 e5                	mov    ebp,esp
c0010b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b26:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b29:	90                   	nop
c0010b2a:	5d                   	pop    ebp
c0010b2b:	c3                   	ret    

c0010b2c <TSS::flush()>:
c0010b2c:	55                   	push   ebp
c0010b2d:	89 e5                	mov    ebp,esp
c0010b2f:	83 ec 10             	sub    esp,0x10
c0010b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b37:	83 c8 03             	or     eax,0x3
c0010b3a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b3e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b42:	66 89 d0             	mov    ax,dx
c0010b45:	0f 00 d8             	ltr    ax
c0010b48:	90                   	nop
c0010b49:	c9                   	leave  
c0010b4a:	c3                   	ret    
c0010b4b:	90                   	nop

c0010b4c <TSS::setup(unsigned long, unsigned long)>:
c0010b4c:	55                   	push   ebp
c0010b4d:	89 e5                	mov    ebp,esp
c0010b4f:	83 ec 18             	sub    esp,0x18
c0010b52:	83 ec 0c             	sub    esp,0xc
c0010b55:	6a 68                	push   0x68
c0010b57:	e8 40 ea ff ff       	call   c000f59c <malloc>
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	89 c2                	mov    edx,eax
c0010b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b6d:	83 ec 04             	sub    esp,0x4
c0010b70:	6a 68                	push   0x68
c0010b72:	6a 00                	push   0x0
c0010b74:	50                   	push   eax
c0010b75:	e8 d6 fb fe ff       	call   c0000750 <memset>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b83:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b9b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b9e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bcb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bf2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bfe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c07:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c14:	0f 20 da             	mov    edx,cr3
c0010c17:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c1d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c26:	83 ec 08             	sub    esp,0x8
c0010c29:	50                   	push   eax
c0010c2a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c2d:	50                   	push   eax
c0010c2e:	e8 5f e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c33:	83 c4 10             	add    esp,0x10
c0010c36:	83 ec 08             	sub    esp,0x8
c0010c39:	6a 68                	push   0x68
c0010c3b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c3e:	50                   	push   eax
c0010c3f:	e8 6a e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c4b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c4e:	83 e0 0f             	and    eax,0xf
c0010c51:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c54:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c57:	83 c8 40             	or     eax,0x40
c0010c5a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c5d:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0010c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c68:	05 78 01 00 00       	add    eax,0x178
c0010c6d:	83 ec 04             	sub    esp,0x4
c0010c70:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c73:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c76:	50                   	push   eax
c0010c77:	e8 66 e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	89 c2                	mov    edx,eax
c0010c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c84:	89 10                	mov    DWORD PTR [eax],edx
c0010c86:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0010c8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c91:	05 78 01 00 00       	add    eax,0x178
c0010c96:	83 ec 0c             	sub    esp,0xc
c0010c99:	50                   	push   eax
c0010c9a:	e8 6d e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ca7:	c9                   	leave  
c0010ca8:	c3                   	ret    
c0010ca9:	90                   	nop

c0010caa <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cba:	75 08                	jne    c0010cc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cbc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010cc2:	eb 38                	jmp    c0010cfc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010cc4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010cc9:	75 17                	jne    c0010ce2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ccb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cd3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cdf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010ce2:	89 c1                	mov    ecx,eax
c0010ce4:	83 e1 fd             	and    ecx,0xfffffffd
c0010ce7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ced:	74 cd                	je     c0010cbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cef:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cf4:	83 e0 ef             	and    eax,0xffffffef
c0010cf7:	83 f8 08             	cmp    eax,0x8
c0010cfa:	76 c0                	jbe    c0010cbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cfc:	31 c0                	xor    eax,eax
c0010cfe:	c3                   	ret    
c0010cff:	90                   	nop

c0010d00 <ReservedFilename::isAtty()>:
c0010d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d07:	31 c0                	xor    eax,eax
c0010d09:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d0f:	74 09                	je     c0010d1a <ReservedFilename::isAtty()+0x1a>
c0010d11:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d17:	0f 94 c0             	sete   al
c0010d1a:	c3                   	ret    
c0010d1b:	90                   	nop

c0010d1c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d2b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d30:	75 08                	jne    c0010d3a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d32:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d38:	eb 3d                	jmp    c0010d77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d3a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d3f:	75 17                	jne    c0010d58 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d55:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d5d:	75 04                	jne    c0010d63 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d5f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d61:	eb 14                	jmp    c0010d77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d63:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d68:	74 c8                	je     c0010d32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d6a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d6f:	83 e0 ef             	and    eax,0xffffffef
c0010d72:	83 f8 08             	cmp    eax,0x8
c0010d75:	76 bb                	jbe    c0010d32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d77:	31 c0                	xor    eax,eax
c0010d79:	c3                   	ret    

c0010d7a <UnixFile::getFileDescriptor()>:
c0010d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	c3                   	ret    

c0010d82 <UnixFile::UnixFile(int)>:
c0010d82:	53                   	push   ebx
c0010d83:	83 ec 28             	sub    esp,0x28
c0010d86:	ba fc a0 02 c0       	mov    edx,0xc002a0fc
c0010d8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d8f:	89 10                	mov    DWORD PTR [eax],edx
c0010d91:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d99:	0f 8f 8c 01 00 00    	jg     c0010f2b <UnixFile::UnixFile(int)+0x1a9>
c0010d9f:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0010da4:	8d 50 01             	lea    edx,[eax+0x1]
c0010da7:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0010dad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010db1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010db4:	83 ec 08             	sub    esp,0x8
c0010db7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010dbb:	68 58 d8 02 c0       	push   0xc002d858
c0010dc0:	e8 b1 75 01 00       	call   c0028376 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	a0 54 d8 02 c0       	mov    al,ds:0xc002d854
c0010dcd:	83 f0 01             	xor    eax,0x1
c0010dd0:	84 c0                	test   al,al
c0010dd2:	0f 84 54 01 00 00    	je     c0010f2c <UnixFile::UnixFile(int)+0x1aa>
c0010dd8:	c6 05 54 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d854,0x1
c0010ddf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010de7:	83 ec 0c             	sub    esp,0xc
c0010dea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dee:	e8 a9 e7 ff ff       	call   c000f59c <malloc>
c0010df3:	83 c4 10             	add    esp,0x10
c0010df6:	89 c3                	mov    ebx,eax
c0010df8:	83 ec 08             	sub    esp,0x8
c0010dfb:	68 03 ff ff 0f       	push   0xfffff03
c0010e00:	53                   	push   ebx
c0010e01:	e8 2c 01 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	89 1d 4c d8 02 c0    	mov    DWORD PTR ds:0xc002d84c,ebx
c0010e0f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e17:	83 ec 0c             	sub    esp,0xc
c0010e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1e:	e8 79 e7 ff ff       	call   c000f59c <malloc>
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	89 c3                	mov    ebx,eax
c0010e28:	83 ec 08             	sub    esp,0x8
c0010e2b:	68 01 ff ff 0f       	push   0xfffff01
c0010e30:	53                   	push   ebx
c0010e31:	e8 fc 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e36:	83 c4 10             	add    esp,0x10
c0010e39:	89 1d 50 d8 02 c0    	mov    DWORD PTR ds:0xc002d850,ebx
c0010e3f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e47:	83 ec 0c             	sub    esp,0xc
c0010e4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e4e:	e8 49 e7 ff ff       	call   c000f59c <malloc>
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	89 c3                	mov    ebx,eax
c0010e58:	83 ec 08             	sub    esp,0x8
c0010e5b:	68 00 ff ff 0f       	push   0xfffff00
c0010e60:	53                   	push   ebx
c0010e61:	e8 cc 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e66:	83 c4 10             	add    esp,0x10
c0010e69:	89 1d 44 d8 02 c0    	mov    DWORD PTR ds:0xc002d844,ebx
c0010e6f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e7e:	e8 19 e7 ff ff       	call   c000f59c <malloc>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	89 c3                	mov    ebx,eax
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	68 02 ff ff 0f       	push   0xfffff02
c0010e90:	53                   	push   ebx
c0010e91:	e8 9c 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	89 1d 48 d8 02 c0    	mov    DWORD PTR ds:0xc002d848,ebx
c0010e9f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010ea7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010eac:	7f 7e                	jg     c0010f2c <UnixFile::UnixFile(int)+0x1aa>
c0010eae:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010eb6:	83 ec 0c             	sub    esp,0xc
c0010eb9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ebd:	e8 da e6 ff ff       	call   c000f59c <malloc>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	89 c3                	mov    ebx,eax
c0010ec7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ecb:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010ed0:	83 ec 08             	sub    esp,0x8
c0010ed3:	50                   	push   eax
c0010ed4:	53                   	push   ebx
c0010ed5:	e8 58 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010eda:	83 c4 10             	add    esp,0x10
c0010edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee1:	89 1c 85 20 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27e0],ebx
c0010ee8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ef7:	e8 a0 e6 ff ff       	call   c000f59c <malloc>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	89 c3                	mov    ebx,eax
c0010f01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f05:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f0a:	83 ec 08             	sub    esp,0x8
c0010f0d:	50                   	push   eax
c0010f0e:	53                   	push   ebx
c0010f0f:	e8 1e 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010f14:	83 c4 10             	add    esp,0x10
c0010f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1b:	89 1c 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],ebx
c0010f22:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f26:	e9 7c ff ff ff       	jmp    c0010ea7 <UnixFile::UnixFile(int)+0x125>
c0010f2b:	90                   	nop
c0010f2c:	83 c4 28             	add    esp,0x28
c0010f2f:	5b                   	pop    ebx
c0010f30:	c3                   	ret    
c0010f31:	90                   	nop

c0010f32 <ReservedFilename::ReservedFilename(int)>:
c0010f32:	83 ec 0c             	sub    esp,0xc
c0010f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f39:	83 ec 08             	sub    esp,0x8
c0010f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f40:	50                   	push   eax
c0010f41:	e8 3c fe ff ff       	call   c0010d82 <UnixFile::UnixFile(int)>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	ba 18 a1 02 c0       	mov    edx,0xc002a118
c0010f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f52:	89 10                	mov    DWORD PTR [eax],edx
c0010f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f5f:	90                   	nop
c0010f60:	83 c4 0c             	add    esp,0xc
c0010f63:	c3                   	ret    

c0010f64 <UnixFile::~UnixFile()>:
c0010f64:	83 ec 1c             	sub    esp,0x1c
c0010f67:	ba fc a0 02 c0       	mov    edx,0xc002a0fc
c0010f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f70:	89 10                	mov    DWORD PTR [eax],edx
c0010f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f79:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f7e:	7f 73                	jg     c0010ff3 <UnixFile::~UnixFile()+0x8f>
c0010f80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	68 58 d8 02 c0       	push   0xc002d858
c0010f90:	e8 b5 74 01 00       	call   c002844a <LinkedList<UnixFile>::getFirstElement()>
c0010f95:	83 c4 10             	add    esp,0x10
c0010f98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	68 58 d8 02 c0       	push   0xc002d858
c0010fa4:	e8 a9 74 01 00       	call   c0028452 <LinkedList<UnixFile>::removeFirst()>
c0010fa9:	83 c4 10             	add    esp,0x10
c0010fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fb0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010fb4:	74 40                	je     c0010ff6 <UnixFile::~UnixFile()+0x92>
c0010fb6:	83 ec 08             	sub    esp,0x8
c0010fb9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fbd:	68 58 d8 02 c0       	push   0xc002d858
c0010fc2:	e8 af 73 01 00       	call   c0028376 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fc7:	83 c4 10             	add    esp,0x10
c0010fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fce:	8d 50 01             	lea    edx,[eax+0x1]
c0010fd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fd5:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fda:	0f 94 c0             	sete   al
c0010fdd:	84 c0                	test   al,al
c0010fdf:	74 a7                	je     c0010f88 <UnixFile::~UnixFile()+0x24>
c0010fe1:	83 ec 0c             	sub    esp,0xc
c0010fe4:	68 d4 a0 02 c0       	push   0xc002a0d4
c0010fe9:	e8 41 8d 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	eb 95                	jmp    c0010f88 <UnixFile::~UnixFile()+0x24>
c0010ff3:	90                   	nop
c0010ff4:	eb 01                	jmp    c0010ff7 <UnixFile::~UnixFile()+0x93>
c0010ff6:	90                   	nop
c0010ff7:	90                   	nop
c0010ff8:	83 c4 1c             	add    esp,0x1c
c0010ffb:	c3                   	ret    

c0010ffc <UnixFile::~UnixFile()>:
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	83 ec 0c             	sub    esp,0xc
c0011002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011006:	e8 59 ff ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c001100b:	83 c4 10             	add    esp,0x10
c001100e:	83 ec 08             	sub    esp,0x8
c0011011:	6a 0c                	push   0xc
c0011013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011017:	e8 d0 14 00 00       	call   c00124ec <operator delete(void*, unsigned long)>
c001101c:	83 c4 10             	add    esp,0x10
c001101f:	83 c4 0c             	add    esp,0xc
c0011022:	c3                   	ret    
c0011023:	90                   	nop

c0011024 <ReservedFilename::~ReservedFilename()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	ba 18 a1 02 c0       	mov    edx,0xc002a118
c001102c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011030:	89 10                	mov    DWORD PTR [eax],edx
c0011032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	50                   	push   eax
c001103a:	e8 25 ff ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	90                   	nop
c0011043:	83 c4 0c             	add    esp,0xc
c0011046:	c3                   	ret    
c0011047:	90                   	nop

c0011048 <ReservedFilename::~ReservedFilename()>:
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	83 ec 0c             	sub    esp,0xc
c001104e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011052:	e8 cd ff ff ff       	call   c0011024 <ReservedFilename::~ReservedFilename()>
c0011057:	83 c4 10             	add    esp,0x10
c001105a:	83 ec 08             	sub    esp,0x8
c001105d:	6a 0c                	push   0xc
c001105f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011063:	e8 84 14 00 00       	call   c00124ec <operator delete(void*, unsigned long)>
c0011068:	83 c4 10             	add    esp,0x10
c001106b:	83 c4 0c             	add    esp,0xc
c001106e:	c3                   	ret    

c001106f <getFromFileDescriptor(int)>:
c001106f:	53                   	push   ebx
c0011070:	83 ec 08             	sub    esp,0x8
c0011073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011077:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001107d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011083:	7f 2c                	jg     c00110b1 <getFromFileDescriptor(int)+0x42>
c0011085:	83 ec 0c             	sub    esp,0xc
c0011088:	68 58 d8 02 c0       	push   0xc002d858
c001108d:	e8 b8 73 01 00       	call   c002844a <LinkedList<UnixFile>::getFirstElement()>
c0011092:	83 c4 10             	add    esp,0x10
c0011095:	85 c0                	test   eax,eax
c0011097:	75 04                	jne    c001109d <getFromFileDescriptor(int)+0x2e>
c0011099:	31 c0                	xor    eax,eax
c001109b:	eb 6e                	jmp    c001110b <getFromFileDescriptor(int)+0x9c>
c001109d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110a0:	74 69                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110a2:	52                   	push   edx
c00110a3:	52                   	push   edx
c00110a4:	50                   	push   eax
c00110a5:	68 58 d8 02 c0       	push   0xc002d858
c00110aa:	e8 45 74 01 00       	call   c00284f4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110af:	eb e1                	jmp    c0011092 <getFromFileDescriptor(int)+0x23>
c00110b1:	a1 4c d8 02 c0       	mov    eax,ds:0xc002d84c
c00110b6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110bc:	74 4d                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110be:	a1 50 d8 02 c0       	mov    eax,ds:0xc002d850
c00110c3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110c9:	74 40                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110cb:	a1 48 d8 02 c0       	mov    eax,ds:0xc002d848
c00110d0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110d6:	74 33                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110d8:	a1 44 d8 02 c0       	mov    eax,ds:0xc002d844
c00110dd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110e3:	74 26                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110e5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110eb:	83 f8 08             	cmp    eax,0x8
c00110ee:	77 09                	ja     c00110f9 <getFromFileDescriptor(int)+0x8a>
c00110f0:	8b 04 85 20 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27e0]
c00110f7:	eb 12                	jmp    c001110b <getFromFileDescriptor(int)+0x9c>
c00110f9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110ff:	83 fb 08             	cmp    ebx,0x8
c0011102:	77 95                	ja     c0011099 <getFromFileDescriptor(int)+0x2a>
c0011104:	8b 04 9d e0 d7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2820]
c001110b:	83 c4 08             	add    esp,0x8
c001110e:	5b                   	pop    ebx
c001110f:	c3                   	ret    

c0011110 <__static_initialization_and_destruction_0(int, int)>:
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011118:	75 34                	jne    c001114e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001111a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011122:	75 2a                	jne    c001114e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011124:	83 ec 0c             	sub    esp,0xc
c0011127:	68 58 d8 02 c0       	push   0xc002d858
c001112c:	e8 03 72 01 00       	call   c0028334 <LinkedList<UnixFile>::LinkedList()>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	83 ec 04             	sub    esp,0x4
c0011137:	68 d8 c4 02 c0       	push   0xc002c4d8
c001113c:	68 58 d8 02 c0       	push   0xc002d858
c0011141:	68 32 83 02 c0       	push   0xc0028332
c0011146:	e8 1b 13 00 00       	call   c0012466 <__cxa_atexit>
c001114b:	83 c4 10             	add    esp,0x10
c001114e:	90                   	nop
c001114f:	83 c4 0c             	add    esp,0xc
c0011152:	c3                   	ret    

c0011153 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	83 ec 08             	sub    esp,0x8
c0011159:	68 ff ff 00 00       	push   0xffff
c001115e:	6a 01                	push   0x1
c0011160:	e8 ab ff ff ff       	call   c0011110 <__static_initialization_and_destruction_0(int, int)>
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	83 c4 0c             	add    esp,0xc
c001116b:	c3                   	ret    

c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001116c:	53                   	push   ebx
c001116d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011171:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011175:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001117b:	89 c8                	mov    eax,ecx
c001117d:	d1 e8                	shr    eax,1
c001117f:	03 05 a8 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c6a8
c0011185:	83 e1 01             	and    ecx,0x1
c0011188:	8a 10                	mov    dl,BYTE PTR [eax]
c001118a:	75 09                	jne    c0011195 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001118c:	83 e2 f0             	and    edx,0xfffffff0
c001118f:	09 da                	or     edx,ebx
c0011191:	88 10                	mov    BYTE PTR [eax],dl
c0011193:	5b                   	pop    ebx
c0011194:	c3                   	ret    
c0011195:	c1 e3 04             	shl    ebx,0x4
c0011198:	83 e2 0f             	and    edx,0xf
c001119b:	09 da                	or     edx,ebx
c001119d:	88 10                	mov    BYTE PTR [eax],dl
c001119f:	5b                   	pop    ebx
c00111a0:	c3                   	ret    

c00111a1 <Virt::getPageState(unsigned long)>:
c00111a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a5:	8b 0d a8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6a8
c00111ab:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111b1:	89 d0                	mov    eax,edx
c00111b3:	d1 e8                	shr    eax,1
c00111b5:	83 e2 01             	and    edx,0x1
c00111b8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111bb:	75 04                	jne    c00111c1 <Virt::getPageState(unsigned long)+0x20>
c00111bd:	83 e0 0f             	and    eax,0xf
c00111c0:	c3                   	ret    
c00111c1:	c0 e8 04             	shr    al,0x4
c00111c4:	c3                   	ret    

c00111c5 <Virt::allocateKernelVirtualPages(int)>:
c00111c5:	55                   	push   ebp
c00111c6:	31 ed                	xor    ebp,ebp
c00111c8:	57                   	push   edi
c00111c9:	56                   	push   esi
c00111ca:	53                   	push   ebx
c00111cb:	31 db                	xor    ebx,ebx
c00111cd:	83 ec 1c             	sub    esp,0x1c
c00111d0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111d4:	8b 3d a4 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c6a4
c00111da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111df:	57                   	push   edi
c00111e0:	e8 bc ff ff ff       	call   c00111a1 <Virt::getPageState(unsigned long)>
c00111e5:	5a                   	pop    edx
c00111e6:	84 c0                	test   al,al
c00111e8:	75 3a                	jne    c0011224 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111ea:	85 db                	test   ebx,ebx
c00111ec:	75 02                	jne    c00111f0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111ee:	89 fd                	mov    ebp,edi
c00111f0:	43                   	inc    ebx
c00111f1:	39 f3                	cmp    ebx,esi
c00111f3:	74 5a                	je     c001124f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111f5:	47                   	inc    edi
c00111f6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111fc:	76 31                	jbe    c001122f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111fe:	c7 05 a4 c6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c6a4,0xc8000
c0011208:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001120d:	75 28                	jne    c0011237 <Virt::allocateKernelVirtualPages(int)+0x72>
c001120f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011214:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011219:	57                   	push   edi
c001121a:	e8 82 ff ff ff       	call   c00111a1 <Virt::getPageState(unsigned long)>
c001121f:	5a                   	pop    edx
c0011220:	84 c0                	test   al,al
c0011222:	74 c6                	je     c00111ea <Virt::allocateKernelVirtualPages(int)+0x25>
c0011224:	31 db                	xor    ebx,ebx
c0011226:	47                   	inc    edi
c0011227:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001122d:	77 cf                	ja     c00111fe <Virt::allocateKernelVirtualPages(int)+0x39>
c001122f:	89 3d a4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a4,edi
c0011235:	eb a8                	jmp    c00111df <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011237:	83 ec 0c             	sub    esp,0xc
c001123a:	68 2c a1 02 c0       	push   0xc002a12c
c001123f:	e8 eb 8a 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0011244:	8b 3d a4 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c6a4
c001124a:	83 c4 10             	add    esp,0x10
c001124d:	eb 90                	jmp    c00111df <Virt::allocateKernelVirtualPages(int)+0x1a>
c001124f:	89 2d a4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a4,ebp
c0011255:	4b                   	dec    ebx
c0011256:	74 5f                	je     c00112b7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011258:	85 f6                	test   esi,esi
c001125a:	74 3d                	je     c0011299 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001125c:	89 e8                	mov    eax,ebp
c001125e:	31 db                	xor    ebx,ebx
c0011260:	8d 7e ff             	lea    edi,[esi-0x1]
c0011263:	eb 14                	jmp    c0011279 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011265:	6a 01                	push   0x1
c0011267:	43                   	inc    ebx
c0011268:	50                   	push   eax
c0011269:	e8 fe fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126e:	58                   	pop    eax
c001126f:	39 f3                	cmp    ebx,esi
c0011271:	5a                   	pop    edx
c0011272:	74 25                	je     c0011299 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011274:	a1 a4 c6 02 c0       	mov    eax,ds:0xc002c6a4
c0011279:	8d 50 01             	lea    edx,[eax+0x1]
c001127c:	85 db                	test   ebx,ebx
c001127e:	89 15 a4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a4,edx
c0011284:	74 20                	je     c00112a6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011286:	39 df                	cmp    edi,ebx
c0011288:	75 db                	jne    c0011265 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001128a:	6a 03                	push   0x3
c001128c:	43                   	inc    ebx
c001128d:	50                   	push   eax
c001128e:	e8 d9 fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011293:	59                   	pop    ecx
c0011294:	39 f3                	cmp    ebx,esi
c0011296:	58                   	pop    eax
c0011297:	75 db                	jne    c0011274 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011299:	83 c4 1c             	add    esp,0x1c
c001129c:	89 e8                	mov    eax,ebp
c001129e:	5b                   	pop    ebx
c001129f:	c1 e0 0c             	shl    eax,0xc
c00112a2:	5e                   	pop    esi
c00112a3:	5f                   	pop    edi
c00112a4:	5d                   	pop    ebp
c00112a5:	c3                   	ret    
c00112a6:	6a 02                	push   0x2
c00112a8:	bb 01 00 00 00       	mov    ebx,0x1
c00112ad:	50                   	push   eax
c00112ae:	e8 b9 fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112b3:	58                   	pop    eax
c00112b4:	5a                   	pop    edx
c00112b5:	eb bd                	jmp    c0011274 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112b7:	6a 04                	push   0x4
c00112b9:	8d 45 01             	lea    eax,[ebp+0x1]
c00112bc:	55                   	push   ebp
c00112bd:	a3 a4 c6 02 c0       	mov    ds:0xc002c6a4,eax
c00112c2:	e8 a5 fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c7:	59                   	pop    ecx
c00112c8:	89 e8                	mov    eax,ebp
c00112ca:	5b                   	pop    ebx
c00112cb:	c1 e0 0c             	shl    eax,0xc
c00112ce:	83 c4 1c             	add    esp,0x1c
c00112d1:	5b                   	pop    ebx
c00112d2:	5e                   	pop    esi
c00112d3:	5f                   	pop    edi
c00112d4:	5d                   	pop    ebp
c00112d5:	c3                   	ret    

c00112d6 <Virt::freeSwapfilePage(unsigned long)>:
c00112d6:	53                   	push   ebx
c00112d7:	8b 15 6c d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d86c
c00112dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112e1:	b8 01 00 00 00       	mov    eax,0x1
c00112e6:	89 cb                	mov    ebx,ecx
c00112e8:	d3 e0                	shl    eax,cl
c00112ea:	c1 eb 05             	shr    ebx,0x5
c00112ed:	f7 d0                	not    eax
c00112ef:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112f2:	5b                   	pop    ebx
c00112f3:	c3                   	ret    

c00112f4 <Virt::swapIDToSector(unsigned long)>:
c00112f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112f8:	0f af 05 ac c6 02 c0 	imul   eax,DWORD PTR ds:0xc002c6ac
c00112ff:	03 05 b4 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c6b4
c0011305:	c3                   	ret    

c0011306 <Virt::allocateSwapfilePage()>:
c0011306:	55                   	push   ebp
c0011307:	31 d2                	xor    edx,edx
c0011309:	57                   	push   edi
c001130a:	56                   	push   esi
c001130b:	53                   	push   ebx
c001130c:	83 ec 0c             	sub    esp,0xc
c001130f:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0011315:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001131a:	f7 f1                	div    ecx
c001131c:	39 0d b0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6b0,ecx
c0011322:	72 2d                	jb     c0011351 <Virt::allocateSwapfilePage()+0x4b>
c0011324:	8b 35 6c d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d86c
c001132a:	8b 16                	mov    edx,DWORD PTR [esi]
c001132c:	f6 c2 01             	test   dl,0x1
c001132f:	74 3c                	je     c001136d <Virt::allocateSwapfilePage()+0x67>
c0011331:	31 c9                	xor    ecx,ecx
c0011333:	bf 01 00 00 00       	mov    edi,0x1
c0011338:	eb 12                	jmp    c001134c <Virt::allocateSwapfilePage()+0x46>
c001133a:	89 fd                	mov    ebp,edi
c001133c:	89 ca                	mov    edx,ecx
c001133e:	d3 e5                	shl    ebp,cl
c0011340:	c1 ea 05             	shr    edx,0x5
c0011343:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011346:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011348:	85 ea                	test   edx,ebp
c001134a:	74 2a                	je     c0011376 <Virt::allocateSwapfilePage()+0x70>
c001134c:	41                   	inc    ecx
c001134d:	39 c8                	cmp    eax,ecx
c001134f:	77 e9                	ja     c001133a <Virt::allocateSwapfilePage()+0x34>
c0011351:	83 ec 0c             	sub    esp,0xc
c0011354:	68 b3 a2 02 c0       	push   0xc002a2b3
c0011359:	e8 d1 89 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	31 c9                	xor    ecx,ecx
c0011363:	83 c4 0c             	add    esp,0xc
c0011366:	89 c8                	mov    eax,ecx
c0011368:	5b                   	pop    ebx
c0011369:	5e                   	pop    esi
c001136a:	5f                   	pop    edi
c001136b:	5d                   	pop    ebp
c001136c:	c3                   	ret    
c001136d:	89 f3                	mov    ebx,esi
c001136f:	bd 01 00 00 00       	mov    ebp,0x1
c0011374:	31 c9                	xor    ecx,ecx
c0011376:	09 ea                	or     edx,ebp
c0011378:	89 c8                	mov    eax,ecx
c001137a:	89 13                	mov    DWORD PTR [ebx],edx
c001137c:	83 c4 0c             	add    esp,0xc
c001137f:	5b                   	pop    ebx
c0011380:	5e                   	pop    esi
c0011381:	5f                   	pop    edi
c0011382:	5d                   	pop    ebp
c0011383:	c3                   	ret    

c0011384 <Virt::virtualMemorySetup()>:
c0011384:	53                   	push   ebx
c0011385:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001138a:	6a 0f                	push   0xf
c001138c:	53                   	push   ebx
c001138d:	43                   	inc    ebx
c001138e:	e8 d9 fd ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011393:	58                   	pop    eax
c0011394:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001139a:	5a                   	pop    edx
c001139b:	75 ed                	jne    c001138a <Virt::virtualMemorySetup()+0x6>
c001139d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113a2:	6a 00                	push   0x0
c00113a4:	53                   	push   ebx
c00113a5:	43                   	inc    ebx
c00113a6:	e8 c1 fd ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ab:	59                   	pop    ecx
c00113ac:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113b2:	58                   	pop    eax
c00113b3:	75 ed                	jne    c00113a2 <Virt::virtualMemorySetup()+0x1e>
c00113b5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113ba:	6a 0f                	push   0xf
c00113bc:	53                   	push   ebx
c00113bd:	43                   	inc    ebx
c00113be:	e8 a9 fd ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c3:	58                   	pop    eax
c00113c4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113ca:	5a                   	pop    edx
c00113cb:	75 ed                	jne    c00113ba <Virt::virtualMemorySetup()+0x36>
c00113cd:	5b                   	pop    ebx
c00113ce:	c3                   	ret    

c00113cf <Virt::setupPageSwapping(int)>:
c00113cf:	57                   	push   edi
c00113d0:	56                   	push   esi
c00113d1:	53                   	push   ebx
c00113d2:	83 ec 1c             	sub    esp,0x1c
c00113d5:	68 14 01 00 00       	push   0x114
c00113da:	e8 bd e1 ff ff       	call   c000f59c <malloc>
c00113df:	83 c4 0c             	add    esp,0xc
c00113e2:	89 c6                	mov    esi,eax
c00113e4:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c00113ea:	68 ca a2 02 c0       	push   0xc002a2ca
c00113ef:	50                   	push   eax
c00113f0:	e8 2d 17 00 00       	call   c0012b22 <File::File(char const*, Process*)>
c00113f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f8:	e8 01 19 00 00       	call   c0012cfe <File::unlink()>
c00113fd:	58                   	pop    eax
c00113fe:	5a                   	pop    edx
c00113ff:	6a 12                	push   0x12
c0011401:	56                   	push   esi
c0011402:	e8 7f 17 00 00       	call   c0012b86 <File::open(FileOpenMode)>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	85 c0                	test   eax,eax
c001140c:	0f 85 2f 01 00 00    	jne    c0011541 <Virt::setupPageSwapping(int)+0x172>
c0011412:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011416:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001141e:	c1 e3 08             	shl    ebx,0x8
c0011421:	83 ec 0c             	sub    esp,0xc
c0011424:	68 00 00 01 00       	push   0x10000
c0011429:	e8 6e e1 ff ff       	call   c000f59c <malloc>
c001142e:	83 c4 0c             	add    esp,0xc
c0011431:	89 c7                	mov    edi,eax
c0011433:	68 00 00 01 00       	push   0x10000
c0011438:	68 ee 00 00 00       	push   0xee
c001143d:	50                   	push   eax
c001143e:	e8 0d f3 fe ff       	call   c0000750 <memset>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	85 db                	test   ebx,ebx
c0011448:	79 03                	jns    c001144d <Virt::setupPageSwapping(int)+0x7e>
c001144a:	83 c3 0f             	add    ebx,0xf
c001144d:	c1 fb 04             	sar    ebx,0x4
c0011450:	4b                   	dec    ebx
c0011451:	83 fb ff             	cmp    ebx,0xffffffff
c0011454:	74 41                	je     c0011497 <Virt::setupPageSwapping(int)+0xc8>
c0011456:	83 ec 0c             	sub    esp,0xc
c0011459:	8b 06                	mov    eax,DWORD PTR [esi]
c001145b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001145f:	52                   	push   edx
c0011460:	57                   	push   edi
c0011461:	6a 00                	push   0x0
c0011463:	68 00 00 01 00       	push   0x10000
c0011468:	56                   	push   esi
c0011469:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001146c:	83 c4 20             	add    esp,0x20
c001146f:	85 c0                	test   eax,eax
c0011471:	0f 85 b5 00 00 00    	jne    c001152c <Virt::setupPageSwapping(int)+0x15d>
c0011477:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c001147f:	74 cf                	je     c0011450 <Virt::setupPageSwapping(int)+0x81>
c0011481:	83 ec 0c             	sub    esp,0xc
c0011484:	4b                   	dec    ebx
c0011485:	68 fc a2 02 c0       	push   0xc002a2fc
c001148a:	e8 a0 88 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	83 fb ff             	cmp    ebx,0xffffffff
c0011495:	75 bf                	jne    c0011456 <Virt::setupPageSwapping(int)+0x87>
c0011497:	83 ec 0c             	sub    esp,0xc
c001149a:	56                   	push   esi
c001149b:	e8 44 17 00 00       	call   c0012be4 <File::close()>
c00114a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114a3:	e8 14 e1 ff ff       	call   c000f5bc <rfree>
c00114a8:	83 c4 10             	add    esp,0x10
c00114ab:	85 f6                	test   esi,esi
c00114ad:	74 0c                	je     c00114bb <Virt::setupPageSwapping(int)+0xec>
c00114af:	83 ec 0c             	sub    esp,0xc
c00114b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b4:	56                   	push   esi
c00114b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	83 ec 08             	sub    esp,0x8
c00114be:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00114c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00114cb:	68 ca a2 02 c0       	push   0xc002a2ca
c00114d0:	50                   	push   eax
c00114d1:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114d8:	c6 05 b8 c6 02 c0 43 	mov    BYTE PTR ds:0xc002c6b8,0x43
c00114df:	c1 e2 0b             	shl    edx,0xb
c00114e2:	a3 b4 c6 02 c0       	mov    ds:0xc002c6b4,eax
c00114e7:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00114ed:	c7 05 ac c6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c6ac,0x8
c00114f7:	c1 ea 08             	shr    edx,0x8
c00114fa:	89 14 24             	mov    DWORD PTR [esp],edx
c00114fd:	e8 9a e0 ff ff       	call   c000f59c <malloc>
c0011502:	83 c4 0c             	add    esp,0xc
c0011505:	89 c1                	mov    ecx,eax
c0011507:	a3 6c d8 02 c0       	mov    ds:0xc002d86c,eax
c001150c:	31 d2                	xor    edx,edx
c001150e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0011513:	f7 35 ac c6 02 c0    	div    DWORD PTR ds:0xc002c6ac
c0011519:	c1 e8 05             	shr    eax,0x5
c001151c:	50                   	push   eax
c001151d:	6a 00                	push   0x0
c001151f:	51                   	push   ecx
c0011520:	e8 2b f2 fe ff       	call   c0000750 <memset>
c0011525:	83 c4 20             	add    esp,0x20
c0011528:	5b                   	pop    ebx
c0011529:	5e                   	pop    esi
c001152a:	5f                   	pop    edi
c001152b:	c3                   	ret    
c001152c:	83 ec 0c             	sub    esp,0xc
c001152f:	68 fc a2 02 c0       	push   0xc002a2fc
c0011534:	e8 f6 87 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	e9 36 ff ff ff       	jmp    c0011477 <Virt::setupPageSwapping(int)+0xa8>
c0011541:	83 ec 0c             	sub    esp,0xc
c0011544:	68 e1 a2 02 c0       	push   0xc002a2e1
c0011549:	e8 e1 87 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c001154e:	83 c4 10             	add    esp,0x10
c0011551:	e9 bc fe ff ff       	jmp    c0011412 <Virt::setupPageSwapping(int)+0x43>

c0011556 <VAS::VAS()>:
c0011556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001156c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011570:	a3 70 d8 02 c0       	mov    ds:0xc002d870,eax
c0011575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011579:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001157d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011581:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011588:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001158f:	90                   	nop
c0011590:	c3                   	ret    
c0011591:	90                   	nop

c0011592 <VAS::VAS(VAS*)>:
c0011592:	83 ec 0c             	sub    esp,0xc
c0011595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011599:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115ab:	83 ec 0c             	sub    esp,0xc
c00115ae:	68 4c a1 02 c0       	push   0xc002a14c
c00115b3:	e8 77 87 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c00115b8:	83 c4 10             	add    esp,0x10
c00115bb:	90                   	nop
c00115bc:	83 c4 0c             	add    esp,0xc
c00115bf:	c3                   	ret    

c00115c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115c4:	89 c2                	mov    edx,eax
c00115c6:	c1 e8 0a             	shr    eax,0xa
c00115c9:	c1 ea 16             	shr    edx,0x16
c00115cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115d1:	19 c9                	sbb    ecx,ecx
c00115d3:	c1 e2 0c             	shl    edx,0xc
c00115d6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115dc:	25 fc 0f 00 00       	and    eax,0xffc
c00115e1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115e8:	01 d0                	add    eax,edx
c00115ea:	c3                   	ret    
c00115eb:	90                   	nop

c00115ec <VAS::getPageTableEntry(unsigned long)>:
c00115ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115f0:	89 ca                	mov    edx,ecx
c00115f2:	c1 e9 0a             	shr    ecx,0xa
c00115f5:	c1 ea 16             	shr    edx,0x16
c00115f8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115fe:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011604:	c1 e0 0c             	shl    eax,0xc
c0011607:	8d 04 08             	lea    eax,[eax+ecx*1]
c001160a:	c3                   	ret    

c001160b <Virt::freeKernelVirtualPages(unsigned long)>:
c001160b:	57                   	push   edi
c001160c:	56                   	push   esi
c001160d:	be 01 00 00 00       	mov    esi,0x1
c0011612:	53                   	push   ebx
c0011613:	83 ec 10             	sub    esp,0x10
c0011616:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001161a:	c1 eb 0c             	shr    ebx,0xc
c001161d:	eb 3f                	jmp    c001165e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001161f:	83 ec 08             	sub    esp,0x8
c0011622:	57                   	push   edi
c0011623:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c0011629:	e8 be ff ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	8b 00                	mov    eax,DWORD PTR [eax]
c0011633:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011637:	f6 c4 04             	test   ah,0x4
c001163a:	75 5f                	jne    c001169b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001163c:	80 fa 04             	cmp    dl,0x4
c001163f:	74 78                	je     c00116b9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011641:	80 fa 02             	cmp    dl,0x2
c0011644:	0f 84 88 00 00 00    	je     c00116d2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001164a:	80 fa 03             	cmp    dl,0x3
c001164d:	0f 84 ad 00 00 00    	je     c0011700 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011653:	fe ca                	dec    dl
c0011655:	0f 84 92 00 00 00    	je     c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001165b:	43                   	inc    ebx
c001165c:	31 f6                	xor    esi,esi
c001165e:	53                   	push   ebx
c001165f:	89 df                	mov    edi,ebx
c0011661:	e8 3b fb ff ff       	call   c00111a1 <Virt::getPageState(unsigned long)>
c0011666:	c1 e7 0c             	shl    edi,0xc
c0011669:	59                   	pop    ecx
c001166a:	84 c0                	test   al,al
c001166c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011670:	75 ad                	jne    c001161f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	68 02 a3 02 c0       	push   0xc002a302
c001167a:	e8 b0 86 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c001167f:	58                   	pop    eax
c0011680:	5a                   	pop    edx
c0011681:	57                   	push   edi
c0011682:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c0011688:	e8 5f ff ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	8b 00                	mov    eax,DWORD PTR [eax]
c0011692:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011696:	f6 c4 04             	test   ah,0x4
c0011699:	74 c0                	je     c001165b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001169b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001169f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	50                   	push   eax
c00116a8:	e8 38 e2 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116b4:	80 fa 04             	cmp    dl,0x4
c00116b7:	75 88                	jne    c0011641 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116b9:	89 f0                	mov    eax,esi
c00116bb:	84 c0                	test   al,al
c00116bd:	75 47                	jne    c0011706 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116bf:	c7 44 24 20 70 a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a170
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	5b                   	pop    ebx
c00116cb:	5e                   	pop    esi
c00116cc:	5f                   	pop    edi
c00116cd:	e9 5d 86 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>
c00116d2:	89 f0                	mov    eax,esi
c00116d4:	84 c0                	test   al,al
c00116d6:	75 15                	jne    c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116d8:	83 ec 0c             	sub    esp,0xc
c00116db:	68 1e a3 02 c0       	push   0xc002a31e
c00116e0:	e8 4a 86 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	e9 6e ff ff ff       	jmp    c001165b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116ed:	83 ec 08             	sub    esp,0x8
c00116f0:	6a 00                	push   0x0
c00116f2:	53                   	push   ebx
c00116f3:	e8 74 fa ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	e9 5b ff ff ff       	jmp    c001165b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011700:	89 f0                	mov    eax,esi
c0011702:	84 c0                	test   al,al
c0011704:	75 15                	jne    c001171b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011706:	83 ec 08             	sub    esp,0x8
c0011709:	6a 00                	push   0x0
c001170b:	53                   	push   ebx
c001170c:	e8 5b fa ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011711:	83 c4 10             	add    esp,0x10
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	5b                   	pop    ebx
c0011718:	5e                   	pop    esi
c0011719:	5f                   	pop    edi
c001171a:	c3                   	ret    
c001171b:	c7 44 24 20 3a a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a33a
c0011723:	83 c4 10             	add    esp,0x10
c0011726:	5b                   	pop    ebx
c0011727:	5e                   	pop    esi
c0011728:	5f                   	pop    edi
c0011729:	e9 01 86 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>

c001172e <VAS::freeAllocatedPages(unsigned long)>:
c001172e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011732:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011736:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001173a:	74 09                	je     c0011745 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001173c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011740:	e9 c6 fe ff ff       	jmp    c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011745:	c7 44 24 04 94 a1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a194
c001174d:	e9 72 0e 00 00       	jmp    c00125c4 <Dbg::kprintf(char const*, ...)>

c0011752 <VAS::virtualToPhysical(unsigned long)>:
c0011752:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011756:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001175a:	e8 8d fe ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001175f:	5a                   	pop    edx
c0011760:	8b 00                	mov    eax,DWORD PTR [eax]
c0011762:	59                   	pop    ecx
c0011763:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011768:	c3                   	ret    
c0011769:	90                   	nop

c001176a <VAS::reflagRange(unsigned long, int, int, int)>:
c001176a:	55                   	push   ebp
c001176b:	57                   	push   edi
c001176c:	56                   	push   esi
c001176d:	53                   	push   ebx
c001176e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011772:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011776:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001177a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001177e:	85 db                	test   ebx,ebx
c0011780:	7e 22                	jle    c00117a4 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011782:	c1 e3 0c             	shl    ebx,0xc
c0011785:	01 f3                	add    ebx,esi
c0011787:	56                   	push   esi
c0011788:	81 c6 00 10 00 00    	add    esi,0x1000
c001178e:	55                   	push   ebp
c001178f:	e8 58 fe ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c0011794:	5a                   	pop    edx
c0011795:	59                   	pop    ecx
c0011796:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011798:	21 f9                	and    ecx,edi
c001179a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001179e:	39 f3                	cmp    ebx,esi
c00117a0:	89 08                	mov    DWORD PTR [eax],ecx
c00117a2:	75 e3                	jne    c0011787 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117a4:	5b                   	pop    ebx
c00117a5:	5e                   	pop    esi
c00117a6:	5f                   	pop    edi
c00117a7:	5d                   	pop    ebp
c00117a8:	c3                   	ret    
c00117a9:	90                   	nop

c00117aa <VAS::setToWriteCombining(unsigned long, int)>:
c00117aa:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00117af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117b5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117bc:	75 01                	jne    c00117bf <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117be:	c3                   	ret    
c00117bf:	68 80 00 00 00       	push   0x80
c00117c4:	6a ff                	push   0xffffffff
c00117c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117d2:	e8 93 ff ff ff       	call   c001176a <VAS::reflagRange(unsigned long, int, int, int)>
c00117d7:	83 c4 14             	add    esp,0x14
c00117da:	c3                   	ret    
c00117db:	90                   	nop

c00117dc <VAS::mapOtherVASIn(bool, VAS*)>:
c00117dc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ec:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117ef:	19 c0                	sbb    eax,eax
c00117f1:	83 ca 03             	or     edx,0x3
c00117f4:	83 e0 fc             	and    eax,0xfffffffc
c00117f7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117fe:	0f 20 d8             	mov    eax,cr3
c0011801:	0f 22 d8             	mov    cr3,eax
c0011804:	c3                   	ret    
c0011805:	90                   	nop

c0011806 <VAS::~VAS()>:
c0011806:	83 ec 2c             	sub    esp,0x2c
c0011809:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011811:	fa                   	cli    
c0011812:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0011817:	40                   	inc    eax
c0011818:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001181d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011822:	8b 00                	mov    eax,DWORD PTR [eax]
c0011824:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011827:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001182d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011831:	6a 01                	push   0x1
c0011833:	50                   	push   eax
c0011834:	e8 a3 ff ff ff       	call   c00117dc <VAS::mapOtherVASIn(bool, VAS*)>
c0011839:	83 c4 0c             	add    esp,0xc
c001183c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011844:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001184c:	0f 8f d4 00 00 00    	jg     c0011926 <VAS::~VAS()+0x120>
c0011852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011856:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011859:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001185d:	c1 e2 02             	shl    edx,0x2
c0011860:	01 d0                	add    eax,edx
c0011862:	8b 00                	mov    eax,DWORD PTR [eax]
c0011864:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186c:	83 e0 01             	and    eax,0x1
c001186f:	0f 84 a8 00 00 00    	je     c001191d <VAS::~VAS()+0x117>
c0011875:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001187d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011885:	7f 72                	jg     c00118f9 <VAS::~VAS()+0xf3>
c0011887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001188b:	c1 e0 0a             	shl    eax,0xa
c001188e:	89 c2                	mov    edx,eax
c0011890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011894:	01 d0                	add    eax,edx
c0011896:	c1 e0 0c             	shl    eax,0xc
c0011899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001189d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118b1:	6a 01                	push   0x1
c00118b3:	50                   	push   eax
c00118b4:	e8 07 fd ff ff       	call   c00115c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118b9:	83 c4 0c             	add    esp,0xc
c00118bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ce:	25 01 04 00 00       	and    eax,0x401
c00118d3:	3d 01 04 00 00       	cmp    eax,0x401
c00118d8:	75 19                	jne    c00118f3 <VAS::~VAS()+0xed>
c00118da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118de:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e3:	83 ec 0c             	sub    esp,0xc
c00118e6:	50                   	push   eax
c00118e7:	e8 f9 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118ec:	83 c4 10             	add    esp,0x10
c00118ef:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118f7:	eb 84                	jmp    c001187d <VAS::~VAS()+0x77>
c00118f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118fd:	25 00 04 00 00       	and    eax,0x400
c0011902:	74 19                	je     c001191d <VAS::~VAS()+0x117>
c0011904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011908:	25 00 f0 ff ff       	and    eax,0xfffff000
c001190d:	83 ec 0c             	sub    esp,0xc
c0011910:	50                   	push   eax
c0011911:	e8 cf df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011916:	83 c4 10             	add    esp,0x10
c0011919:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001191d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011921:	e9 1e ff ff ff       	jmp    c0011844 <VAS::~VAS()+0x3e>
c0011926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001192a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001192d:	83 ec 0c             	sub    esp,0xc
c0011930:	50                   	push   eax
c0011931:	e8 d5 fc ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011936:	83 c4 10             	add    esp,0x10
c0011939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001193d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011940:	83 ec 0c             	sub    esp,0xc
c0011943:	50                   	push   eax
c0011944:	e8 9c df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011949:	83 c4 10             	add    esp,0x10
c001194c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011954:	c1 e0 02             	shl    eax,0x2
c0011957:	83 ec 08             	sub    esp,0x8
c001195a:	50                   	push   eax
c001195b:	68 b8 a1 02 c0       	push   0xc002a1b8
c0011960:	e8 5f 0c 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001196d:	48                   	dec    eax
c001196e:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0011973:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0011978:	85 c0                	test   eax,eax
c001197a:	75 01                	jne    c001197d <VAS::~VAS()+0x177>
c001197c:	fb                   	sti    
c001197d:	90                   	nop
c001197e:	83 c4 2c             	add    esp,0x2c
c0011981:	c3                   	ret    

c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011982:	55                   	push   ebp
c0011983:	57                   	push   edi
c0011984:	56                   	push   esi
c0011985:	53                   	push   ebx
c0011986:	83 ec 1c             	sub    esp,0x1c
c0011989:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001198d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011991:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011997:	77 08                	ja     c00119a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011999:	0f 20 d8             	mov    eax,cr3
c001199c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001199f:	75 47                	jne    c00119e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119a5:	09 d8                	or     eax,ebx
c00119a7:	a9 ff 0f 00 00       	test   eax,0xfff
c00119ac:	75 57                	jne    c0011a05 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119ae:	89 de                	mov    esi,ebx
c00119b0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119b3:	c1 ee 16             	shr    esi,0x16
c00119b6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119bd:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119c1:	74 54                	je     c0011a17 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119c7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119cd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119d1:	c1 e6 0c             	shl    esi,0xc
c00119d4:	c1 eb 0a             	shr    ebx,0xa
c00119d7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119dd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119e0:	83 c4 1c             	add    esp,0x1c
c00119e3:	5b                   	pop    ebx
c00119e4:	5e                   	pop    esi
c00119e5:	5f                   	pop    edi
c00119e6:	5d                   	pop    ebp
c00119e7:	c3                   	ret    
c00119e8:	83 ec 0c             	sub    esp,0xc
c00119eb:	68 d8 a1 02 c0       	push   0xc002a1d8
c00119f0:	e8 cf 0b 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119fc:	09 d8                	or     eax,ebx
c00119fe:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a03:	74 a9                	je     c00119ae <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	68 40 a2 02 c0       	push   0xc002a240
c0011a0d:	e8 1d 83 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	eb 97                	jmp    c00119ae <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a1b:	e8 20 df ff ff       	call   c000f940 <Phys::allocatePage()>
c0011a20:	83 ec 0c             	sub    esp,0xc
c0011a23:	89 c5                	mov    ebp,eax
c0011a25:	8b 0d 70 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d870
c0011a2b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a2f:	6a 01                	push   0x1
c0011a31:	e8 8f f7 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011a36:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a3d:	6a 01                	push   0x1
c0011a3f:	50                   	push   eax
c0011a40:	55                   	push   ebp
c0011a41:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a47:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a4b:	51                   	push   ecx
c0011a4c:	e8 27 02 00 00       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a51:	83 c4 1c             	add    esp,0x1c
c0011a54:	68 00 10 00 00       	push   0x1000
c0011a59:	6a 00                	push   0x0
c0011a5b:	50                   	push   eax
c0011a5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a60:	e8 eb ec fe ff       	call   c0000750 <memset>
c0011a65:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a69:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a6c:	e8 9a fb ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011a71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a75:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a78:	83 c4 10             	add    esp,0x10
c0011a7b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a7e:	e9 40 ff ff ff       	jmp    c00119c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a83:	90                   	nop

c0011a84 <VAS::allocatePages(int, int)>:
c0011a84:	55                   	push   ebp
c0011a85:	57                   	push   edi
c0011a86:	56                   	push   esi
c0011a87:	53                   	push   ebx
c0011a88:	83 ec 1c             	sub    esp,0x1c
c0011a8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a8f:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011a94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a9a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011aa0:	83 e0 01             	and    eax,0x1
c0011aa3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011aa7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011aab:	0f 85 cc 00 00 00    	jne    c0011b7d <VAS::allocatePages(int, int)+0xf9>
c0011ab1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ab4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ab8:	85 c0                	test   eax,eax
c0011aba:	0f 84 a1 00 00 00    	je     c0011b61 <VAS::allocatePages(int, int)+0xdd>
c0011ac0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ac4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ac8:	c1 e6 0c             	shl    esi,0xc
c0011acb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011acf:	85 c0                	test   eax,eax
c0011ad1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ad4:	7e 33                	jle    c0011b09 <VAS::allocatePages(int, int)+0x85>
c0011ad6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ada:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ade:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ae4:	e8 57 de ff ff       	call   c000f940 <Phys::allocatePage()>
c0011ae9:	55                   	push   ebp
c0011aea:	53                   	push   ebx
c0011aeb:	50                   	push   eax
c0011aec:	57                   	push   edi
c0011aed:	e8 90 fe ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011af2:	83 c4 10             	add    esp,0x10
c0011af5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011afa:	74 03                	je     c0011aff <VAS::allocatePages(int, int)+0x7b>
c0011afc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b05:	39 de                	cmp    esi,ebx
c0011b07:	75 db                	jne    c0011ae4 <VAS::allocatePages(int, int)+0x60>
c0011b09:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b0e:	75 12                	jne    c0011b22 <VAS::allocatePages(int, int)+0x9e>
c0011b10:	0f 20 d8             	mov    eax,cr3
c0011b13:	0f 22 d8             	mov    cr3,eax
c0011b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b1a:	83 c4 1c             	add    esp,0x1c
c0011b1d:	5b                   	pop    ebx
c0011b1e:	5e                   	pop    esi
c0011b1f:	5f                   	pop    edi
c0011b20:	5d                   	pop    ebp
c0011b21:	c3                   	ret    
c0011b22:	c1 ee 0a             	shr    esi,0xa
c0011b25:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b29:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b2f:	c1 eb 0a             	shr    ebx,0xa
c0011b32:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b38:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b3e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b44:	39 c3                	cmp    ebx,eax
c0011b46:	77 ce                	ja     c0011b16 <VAS::allocatePages(int, int)+0x92>
c0011b48:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b4b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b51:	39 d8                	cmp    eax,ebx
c0011b53:	73 f3                	jae    c0011b48 <VAS::allocatePages(int, int)+0xc4>
c0011b55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b59:	83 c4 1c             	add    esp,0x1c
c0011b5c:	5b                   	pop    ebx
c0011b5d:	5e                   	pop    esi
c0011b5e:	5f                   	pop    edi
c0011b5f:	5d                   	pop    ebp
c0011b60:	c3                   	ret    
c0011b61:	83 ec 0c             	sub    esp,0xc
c0011b64:	68 64 a2 02 c0       	push   0xc002a264
c0011b69:	e8 c1 81 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0011b6e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	e9 43 ff ff ff       	jmp    c0011ac0 <VAS::allocatePages(int, int)+0x3c>
c0011b7d:	83 ec 0c             	sub    esp,0xc
c0011b80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b84:	e8 3c f6 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011b89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b8d:	83 c4 10             	add    esp,0x10
c0011b90:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b95:	0f 87 9b 00 00 00    	ja     c0011c36 <VAS::allocatePages(int, int)+0x1b2>
c0011b9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b9f:	85 d2                	test   edx,edx
c0011ba1:	7e 3c                	jle    c0011bdf <VAS::allocatePages(int, int)+0x15b>
c0011ba3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ba7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011bab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011baf:	c1 e5 0c             	shl    ebp,0xc
c0011bb2:	81 ce 00 04 00 00    	or     esi,0x400
c0011bb8:	01 dd                	add    ebp,ebx
c0011bba:	e8 81 dd ff ff       	call   c000f940 <Phys::allocatePage()>
c0011bbf:	56                   	push   esi
c0011bc0:	53                   	push   ebx
c0011bc1:	50                   	push   eax
c0011bc2:	57                   	push   edi
c0011bc3:	e8 ba fd ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bd0:	74 03                	je     c0011bd5 <VAS::allocatePages(int, int)+0x151>
c0011bd2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bdb:	39 dd                	cmp    ebp,ebx
c0011bdd:	75 db                	jne    c0011bba <VAS::allocatePages(int, int)+0x136>
c0011bdf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011be4:	0f 84 26 ff ff ff    	je     c0011b10 <VAS::allocatePages(int, int)+0x8c>
c0011bea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bf2:	89 d3                	mov    ebx,edx
c0011bf4:	c1 e0 0c             	shl    eax,0xc
c0011bf7:	c1 eb 0a             	shr    ebx,0xa
c0011bfa:	01 d0                	add    eax,edx
c0011bfc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c02:	c1 e8 0a             	shr    eax,0xa
c0011c05:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c0b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c10:	2d 00 00 40 00       	sub    eax,0x400000
c0011c15:	39 c3                	cmp    ebx,eax
c0011c17:	0f 87 f9 fe ff ff    	ja     c0011b16 <VAS::allocatePages(int, int)+0x92>
c0011c1d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c20:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c26:	39 d8                	cmp    eax,ebx
c0011c28:	73 f3                	jae    c0011c1d <VAS::allocatePages(int, int)+0x199>
c0011c2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c2e:	83 c4 1c             	add    esp,0x1c
c0011c31:	5b                   	pop    ebx
c0011c32:	5e                   	pop    esi
c0011c33:	5f                   	pop    edi
c0011c34:	5d                   	pop    ebp
c0011c35:	c3                   	ret    
c0011c36:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011c3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c41:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c48:	0f 84 4d ff ff ff    	je     c0011b9b <VAS::allocatePages(int, int)+0x117>
c0011c4e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c56:	e9 40 ff ff ff       	jmp    c0011b9b <VAS::allocatePages(int, int)+0x117>
c0011c5b:	90                   	nop

c0011c5c <VAS::setCPUSpecific(unsigned long)>:
c0011c5c:	83 ec 0c             	sub    esp,0xc
c0011c5f:	6a 05                	push   0x5
c0011c61:	68 00 00 40 c2       	push   0xc2400000
c0011c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c6e:	e8 0f fd ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c73:	83 c4 1c             	add    esp,0x1c
c0011c76:	c3                   	ret    
c0011c77:	90                   	nop

c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c78:	55                   	push   ebp
c0011c79:	57                   	push   edi
c0011c7a:	56                   	push   esi
c0011c7b:	53                   	push   ebx
c0011c7c:	83 ec 1c             	sub    esp,0x1c
c0011c7f:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011c84:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c8e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c92:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c98:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c9c:	83 e0 01             	and    eax,0x1
c0011c9f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ca3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ca7:	85 c0                	test   eax,eax
c0011ca9:	7e 39                	jle    c0011ce4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011cab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011caf:	89 f3                	mov    ebx,esi
c0011cb1:	c1 e0 0c             	shl    eax,0xc
c0011cb4:	01 f0                	add    eax,esi
c0011cb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cba:	55                   	push   ebp
c0011cbb:	53                   	push   ebx
c0011cbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cc0:	29 f0                	sub    eax,esi
c0011cc2:	01 d8                	add    eax,ebx
c0011cc4:	50                   	push   eax
c0011cc5:	57                   	push   edi
c0011cc6:	e8 b7 fc ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd3:	74 03                	je     c0011cd8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cd5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cde:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ce2:	75 d6                	jne    c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011ce4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ce9:	75 10                	jne    c0011cfb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ceb:	0f 20 d8             	mov    eax,cr3
c0011cee:	0f 22 d8             	mov    cr3,eax
c0011cf1:	83 c4 1c             	add    esp,0x1c
c0011cf4:	89 f0                	mov    eax,esi
c0011cf6:	5b                   	pop    ebx
c0011cf7:	5e                   	pop    esi
c0011cf8:	5f                   	pop    edi
c0011cf9:	5d                   	pop    ebp
c0011cfa:	c3                   	ret    
c0011cfb:	89 f3                	mov    ebx,esi
c0011cfd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d01:	c1 eb 0a             	shr    ebx,0xa
c0011d04:	c1 e0 0c             	shl    eax,0xc
c0011d07:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d0d:	01 f0                	add    eax,esi
c0011d0f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d15:	c1 e8 0a             	shr    eax,0xa
c0011d18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d1d:	2d 00 00 40 00       	sub    eax,0x400000
c0011d22:	39 c3                	cmp    ebx,eax
c0011d24:	77 cb                	ja     c0011cf1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d26:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d29:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d2f:	39 d8                	cmp    eax,ebx
c0011d31:	73 f3                	jae    c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d33:	83 c4 1c             	add    esp,0x1c
c0011d36:	89 f0                	mov    eax,esi
c0011d38:	5b                   	pop    ebx
c0011d39:	5e                   	pop    esi
c0011d3a:	5f                   	pop    edi
c0011d3b:	5d                   	pop    ebp
c0011d3c:	c3                   	ret    
c0011d3d:	90                   	nop

c0011d3e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d3e:	55                   	push   ebp
c0011d3f:	57                   	push   edi
c0011d40:	56                   	push   esi
c0011d41:	53                   	push   ebx
c0011d42:	83 ec 1c             	sub    esp,0x1c
c0011d45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d4d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d51:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d55:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d5a:	75 4a                	jne    c0011da6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d5c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d60:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d63:	c1 eb 16             	shr    ebx,0x16
c0011d66:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d6d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d71:	74 4d                	je     c0011dc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d77:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d7b:	c1 e8 0a             	shr    eax,0xa
c0011d7e:	80 fa 01             	cmp    dl,0x1
c0011d81:	19 d2                	sbb    edx,edx
c0011d83:	c1 e3 0c             	shl    ebx,0xc
c0011d86:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d8a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d90:	25 fc 0f 00 00       	and    eax,0xffc
c0011d95:	01 d8                	add    eax,ebx
c0011d97:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d9e:	83 c4 1c             	add    esp,0x1c
c0011da1:	5b                   	pop    ebx
c0011da2:	5e                   	pop    esi
c0011da3:	5f                   	pop    edi
c0011da4:	5d                   	pop    ebp
c0011da5:	c3                   	ret    
c0011da6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011daa:	83 ec 0c             	sub    esp,0xc
c0011dad:	68 90 a2 02 c0       	push   0xc002a290
c0011db2:	e8 78 7f 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011dbe:	eb 9c                	jmp    c0011d5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011dc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dc4:	e8 77 db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011dc9:	83 ec 0c             	sub    esp,0xc
c0011dcc:	89 c5                	mov    ebp,eax
c0011dce:	8b 0d 70 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d870
c0011dd4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dd8:	6a 01                	push   0x1
c0011dda:	e8 e6 f3 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011ddf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011de6:	6a 01                	push   0x1
c0011de8:	50                   	push   eax
c0011de9:	55                   	push   ebp
c0011dea:	81 cd 07 04 00 00    	or     ebp,0x407
c0011df0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011df4:	51                   	push   ecx
c0011df5:	e8 7e fe ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dfa:	83 c4 1c             	add    esp,0x1c
c0011dfd:	68 00 10 00 00       	push   0x1000
c0011e02:	6a 00                	push   0x0
c0011e04:	50                   	push   eax
c0011e05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e09:	e8 42 e9 fe ff       	call   c0000750 <memset>
c0011e0e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e12:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e15:	e8 f1 f7 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011e1a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e1d:	83 c4 10             	add    esp,0x10
c0011e20:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e27:	e9 47 ff ff ff       	jmp    c0011d73 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e2c <VAS::VAS(bool)>:
c0011e2c:	53                   	push   ebx
c0011e2d:	83 ec 28             	sub    esp,0x28
c0011e30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e34:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e52:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e56:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e59:	e8 e2 da ff ff       	call   c000f940 <Phys::allocatePage()>
c0011e5e:	89 c2                	mov    edx,eax
c0011e60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e64:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e67:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0011e6d:	83 ec 0c             	sub    esp,0xc
c0011e70:	6a 01                	push   0x1
c0011e72:	e8 4e f3 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	89 c2                	mov    edx,eax
c0011e7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e80:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e83:	83 ec 0c             	sub    esp,0xc
c0011e86:	6a 03                	push   0x3
c0011e88:	6a 01                	push   0x1
c0011e8a:	52                   	push   edx
c0011e8b:	50                   	push   eax
c0011e8c:	53                   	push   ebx
c0011e8d:	e8 e6 fd ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e92:	83 c4 20             	add    esp,0x20
c0011e95:	89 c2                	mov    edx,eax
c0011e97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e9e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ea6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011eae:	7f 1c                	jg     c0011ecc <VAS::VAS(bool)+0xa0>
c0011eb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011eb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ebb:	c1 e2 02             	shl    edx,0x2
c0011ebe:	01 d0                	add    eax,edx
c0011ec0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ec6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011eca:	eb da                	jmp    c0011ea6 <VAS::VAS(bool)+0x7a>
c0011ecc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011ed4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011edc:	7f 7a                	jg     c0011f58 <VAS::VAS(bool)+0x12c>
c0011ede:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee2:	2d 00 02 00 00       	sub    eax,0x200
c0011ee7:	c1 e0 0c             	shl    eax,0xc
c0011eea:	83 c8 03             	or     eax,0x3
c0011eed:	89 c2                	mov    edx,eax
c0011eef:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011ef4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011efa:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f00:	83 e0 10             	and    eax,0x10
c0011f03:	84 c0                	test   al,al
c0011f05:	74 07                	je     c0011f0e <VAS::VAS(bool)+0xe2>
c0011f07:	b8 00 01 00 00       	mov    eax,0x100
c0011f0c:	eb 05                	jmp    c0011f13 <VAS::VAS(bool)+0xe7>
c0011f0e:	b8 00 00 00 00       	mov    eax,0x0
c0011f13:	09 d0                	or     eax,edx
c0011f15:	89 c1                	mov    ecx,eax
c0011f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f22:	c1 e2 02             	shl    edx,0x2
c0011f25:	01 d0                	add    eax,edx
c0011f27:	89 ca                	mov    edx,ecx
c0011f29:	89 10                	mov    DWORD PTR [eax],edx
c0011f2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f2f:	2d 40 03 00 00       	sub    eax,0x340
c0011f34:	83 f8 7f             	cmp    eax,0x7f
c0011f37:	77 16                	ja     c0011f4f <VAS::VAS(bool)+0x123>
c0011f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f3d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f44:	c1 e2 02             	shl    edx,0x2
c0011f47:	01 d0                	add    eax,edx
c0011f49:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f4f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f53:	e9 7c ff ff ff       	jmp    c0011ed4 <VAS::VAS(bool)+0xa8>
c0011f58:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011f5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f63:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f69:	83 e0 10             	and    eax,0x10
c0011f6c:	84 c0                	test   al,al
c0011f6e:	74 07                	je     c0011f77 <VAS::VAS(bool)+0x14b>
c0011f70:	b8 03 41 00 00       	mov    eax,0x4103
c0011f75:	eb 05                	jmp    c0011f7c <VAS::VAS(bool)+0x150>
c0011f77:	b8 03 40 00 00       	mov    eax,0x4003
c0011f7c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f80:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f83:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f89:	89 02                	mov    DWORD PTR [edx],eax
c0011f8b:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011f90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f96:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f9c:	83 ec 08             	sub    esp,0x8
c0011f9f:	50                   	push   eax
c0011fa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fa4:	e8 b3 fc ff ff       	call   c0011c5c <VAS::setCPUSpecific(unsigned long)>
c0011fa9:	83 c4 10             	add    esp,0x10
c0011fac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011fb3:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011fb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc4:	83 e0 10             	and    eax,0x10
c0011fc7:	84 c0                	test   al,al
c0011fc9:	74 07                	je     c0011fd2 <VAS::VAS(bool)+0x1a6>
c0011fcb:	b8 00 01 00 00       	mov    eax,0x100
c0011fd0:	eb 05                	jmp    c0011fd7 <VAS::VAS(bool)+0x1ab>
c0011fd2:	b8 00 00 00 00       	mov    eax,0x0
c0011fd7:	09 c2                	or     edx,eax
c0011fd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fe0:	05 fc 0f 00 00       	add    eax,0xffc
c0011fe5:	83 ca 03             	or     edx,0x3
c0011fe8:	89 10                	mov    DWORD PTR [eax],edx
c0011fea:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0011fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff5:	83 ec 0c             	sub    esp,0xc
c0011ff8:	50                   	push   eax
c0011ff9:	e8 fe 1c 00 00       	call   c0013cfc <Device::getName()>
c0011ffe:	83 c4 10             	add    esp,0x10
c0012001:	83 ec 08             	sub    esp,0x8
c0012004:	68 54 a3 02 c0       	push   0xc002a354
c0012009:	50                   	push   eax
c001200a:	e8 89 e8 fe ff       	call   c0000898 <strcmp>
c001200f:	83 c4 10             	add    esp,0x10
c0012012:	85 c0                	test   eax,eax
c0012014:	0f 94 c0             	sete   al
c0012017:	84 c0                	test   al,al
c0012019:	0f 84 87 00 00 00    	je     c00120a6 <VAS::VAS(bool)+0x27a>
c001201f:	fa                   	cli    
c0012020:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0012025:	40                   	inc    eax
c0012026:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001202b:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0012030:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012036:	05 7c 09 00 00       	add    eax,0x97c
c001203b:	83 ec 0c             	sub    esp,0xc
c001203e:	50                   	push   eax
c001203f:	e8 da cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012044:	83 c4 10             	add    esp,0x10
c0012047:	25 00 f0 ff ff       	and    eax,0xfffff000
c001204c:	89 c3                	mov    ebx,eax
c001204e:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0012053:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012059:	05 7c 09 00 00       	add    eax,0x97c
c001205e:	83 ec 0c             	sub    esp,0xc
c0012061:	50                   	push   eax
c0012062:	e8 b7 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	83 ec 08             	sub    esp,0x8
c001206d:	50                   	push   eax
c001206e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012072:	e8 75 f5 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	8b 00                	mov    eax,DWORD PTR [eax]
c001207c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012081:	6a 11                	push   0x11
c0012083:	53                   	push   ebx
c0012084:	50                   	push   eax
c0012085:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012089:	e8 f4 f8 ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c001208e:	83 c4 10             	add    esp,0x10
c0012091:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0012096:	48                   	dec    eax
c0012097:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001209c:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00120a1:	85 c0                	test   eax,eax
c00120a3:	75 01                	jne    c00120a6 <VAS::VAS(bool)+0x27a>
c00120a5:	fb                   	sti    
c00120a6:	90                   	nop
c00120a7:	83 c4 28             	add    esp,0x28
c00120aa:	5b                   	pop    ebx
c00120ab:	c3                   	ret    

c00120ac <VAS::evict(unsigned long)>:
c00120ac:	55                   	push   ebp
c00120ad:	57                   	push   edi
c00120ae:	56                   	push   esi
c00120af:	53                   	push   ebx
c00120b0:	83 ec 1c             	sub    esp,0x1c
c00120b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120bf:	e8 42 f2 ff ff       	call   c0011306 <Virt::allocateSwapfilePage()>
c00120c4:	89 c7                	mov    edi,eax
c00120c6:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c00120cb:	85 c0                	test   eax,eax
c00120cd:	7e 3d                	jle    c001210c <VAS::evict(unsigned long)+0x60>
c00120cf:	89 ee                	mov    esi,ebp
c00120d1:	31 db                	xor    ebx,ebx
c00120d3:	83 ec 0c             	sub    esp,0xc
c00120d6:	57                   	push   edi
c00120d7:	e8 18 f2 ff ff       	call   c00112f4 <Virt::swapIDToSector(unsigned long)>
c00120dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00120df:	01 d8                	add    eax,ebx
c00120e1:	6a 01                	push   0x1
c00120e3:	31 d2                	xor    edx,edx
c00120e5:	43                   	inc    ebx
c00120e6:	52                   	push   edx
c00120e7:	81 c6 00 02 00 00    	add    esi,0x200
c00120ed:	50                   	push   eax
c00120ee:	0f be 05 b8 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c6b8
c00120f5:	ff 34 85 fc db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2404]
c00120fc:	e8 83 3e 00 00       	call   c0015f84 <LogicalDisk::write(unsigned long long, int, void*)>
c0012101:	83 c4 20             	add    esp,0x20
c0012104:	39 1d ac c6 02 c0    	cmp    DWORD PTR ds:0xc002c6ac,ebx
c001210a:	7f c7                	jg     c00120d3 <VAS::evict(unsigned long)+0x27>
c001210c:	83 ec 08             	sub    esp,0x8
c001210f:	c1 e7 0b             	shl    edi,0xb
c0012112:	55                   	push   ebp
c0012113:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012117:	e8 d0 f4 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001211c:	83 c4 0c             	add    esp,0xc
c001211f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012121:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012127:	09 d7                	or     edi,edx
c0012129:	89 38                	mov    DWORD PTR [eax],edi
c001212b:	a1 68 d8 02 c0       	mov    eax,ds:0xc002d868
c0012130:	40                   	inc    eax
c0012131:	a3 68 d8 02 c0       	mov    ds:0xc002d868,eax
c0012136:	0f 20 da             	mov    edx,cr3
c0012139:	0f 22 da             	mov    cr3,edx
c001213c:	50                   	push   eax
c001213d:	55                   	push   ebp
c001213e:	68 62 a3 02 c0       	push   0xc002a362
c0012143:	e8 7c 04 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0012148:	a1 64 d8 02 c0       	mov    eax,ds:0xc002d864
c001214d:	c7 44 24 40 77 a3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a377
c0012155:	8d 50 01             	lea    edx,[eax+0x1]
c0012158:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001215c:	89 15 64 d8 02 c0    	mov    DWORD PTR ds:0xc002d864,edx
c0012162:	83 c4 2c             	add    esp,0x2c
c0012165:	5b                   	pop    ebx
c0012166:	5e                   	pop    esi
c0012167:	5f                   	pop    edi
c0012168:	5d                   	pop    ebp
c0012169:	e9 56 04 00 00       	jmp    c00125c4 <Dbg::kprintf(char const*, ...)>

c001216e <VAS::tryLoadBackOffDisk(unsigned long)>:
c001216e:	55                   	push   ebp
c001216f:	57                   	push   edi
c0012170:	56                   	push   esi
c0012171:	53                   	push   ebx
c0012172:	83 ec 14             	sub    esp,0x14
c0012175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012179:	68 88 a3 02 c0       	push   0xc002a388
c001217e:	e8 41 04 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0012183:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012187:	5e                   	pop    esi
c0012188:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001218e:	5f                   	pop    edi
c001218f:	53                   	push   ebx
c0012190:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012194:	e8 53 f4 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c0012199:	5d                   	pop    ebp
c001219a:	89 c6                	mov    esi,eax
c001219c:	5a                   	pop    edx
c001219d:	ff 30                	push   DWORD PTR [eax]
c001219f:	68 9b a3 02 c0       	push   0xc002a39b
c00121a4:	e8 1b 04 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00121a9:	83 c4 10             	add    esp,0x10
c00121ac:	85 db                	test   ebx,ebx
c00121ae:	74 1c                	je     c00121cc <VAS::tryLoadBackOffDisk(unsigned long)+0x5e>
c00121b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00121b2:	31 c0                	xor    eax,eax
c00121b4:	89 fa                	mov    edx,edi
c00121b6:	81 e2 01 04 00 00    	and    edx,0x401
c00121bc:	81 fa 00 04 00 00    	cmp    edx,0x400
c00121c2:	74 12                	je     c00121d6 <VAS::tryLoadBackOffDisk(unsigned long)+0x68>
c00121c4:	83 c4 0c             	add    esp,0xc
c00121c7:	5b                   	pop    ebx
c00121c8:	5e                   	pop    esi
c00121c9:	5f                   	pop    edi
c00121ca:	5d                   	pop    ebp
c00121cb:	c3                   	ret    
c00121cc:	83 c4 0c             	add    esp,0xc
c00121cf:	31 c0                	xor    eax,eax
c00121d1:	5b                   	pop    ebx
c00121d2:	5e                   	pop    esi
c00121d3:	5f                   	pop    edi
c00121d4:	5d                   	pop    ebp
c00121d5:	c3                   	ret    
c00121d6:	e8 65 d7 ff ff       	call   c000f940 <Phys::allocatePage()>
c00121db:	c1 ef 0b             	shr    edi,0xb
c00121de:	83 ec 08             	sub    esp,0x8
c00121e1:	89 c5                	mov    ebp,eax
c00121e3:	50                   	push   eax
c00121e4:	68 a9 a3 02 c0       	push   0xc002a3a9
c00121e9:	e8 d6 03 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00121ee:	8b 16                	mov    edx,DWORD PTR [esi]
c00121f0:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00121f6:	09 ea                	or     edx,ebp
c00121f8:	81 ca 01 08 00 00    	or     edx,0x801
c00121fe:	89 16                	mov    DWORD PTR [esi],edx
c0012200:	c7 04 24 b6 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3b6
c0012207:	e8 b8 03 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001220c:	83 c4 10             	add    esp,0x10
c001220f:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0012215:	85 c9                	test   ecx,ecx
c0012217:	7e 3d                	jle    c0012256 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012219:	89 dd                	mov    ebp,ebx
c001221b:	31 f6                	xor    esi,esi
c001221d:	83 ec 0c             	sub    esp,0xc
c0012220:	57                   	push   edi
c0012221:	e8 ce f0 ff ff       	call   c00112f4 <Virt::swapIDToSector(unsigned long)>
c0012226:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012229:	01 f0                	add    eax,esi
c001222b:	6a 01                	push   0x1
c001222d:	31 d2                	xor    edx,edx
c001222f:	46                   	inc    esi
c0012230:	52                   	push   edx
c0012231:	81 c5 00 02 00 00    	add    ebp,0x200
c0012237:	50                   	push   eax
c0012238:	0f be 05 b8 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c6b8
c001223f:	ff 34 85 fc db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2404]
c0012246:	e8 cd 3c 00 00       	call   c0015f18 <LogicalDisk::read(unsigned long long, int, void*)>
c001224b:	83 c4 20             	add    esp,0x20
c001224e:	39 35 ac c6 02 c0    	cmp    DWORD PTR ds:0xc002c6ac,esi
c0012254:	7f c7                	jg     c001221d <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c0012256:	a1 68 d8 02 c0       	mov    eax,ds:0xc002d868
c001225b:	48                   	dec    eax
c001225c:	52                   	push   edx
c001225d:	a3 68 d8 02 c0       	mov    ds:0xc002d868,eax
c0012262:	50                   	push   eax
c0012263:	53                   	push   ebx
c0012264:	68 c6 a3 02 c0       	push   0xc002a3c6
c0012269:	e8 56 03 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001226e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012271:	e8 60 f0 ff ff       	call   c00112d6 <Virt::freeSwapfilePage(unsigned long)>
c0012276:	c7 04 24 db a3 02 c0 	mov    DWORD PTR [esp],0xc002a3db
c001227d:	e8 42 03 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0012282:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	48                   	dec    eax
c001228b:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0012290:	85 c0                	test   eax,eax
c0012292:	74 2d                	je     c00122c1 <VAS::tryLoadBackOffDisk(unsigned long)+0x153>
c0012294:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012298:	25 ff 0f 00 00       	and    eax,0xfff
c001229d:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00122a2:	77 20                	ja     c00122c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>
c00122a4:	0f 20 d8             	mov    eax,cr3
c00122a7:	0f 22 d8             	mov    cr3,eax
c00122aa:	83 ec 0c             	sub    esp,0xc
c00122ad:	68 01 a4 02 c0       	push   0xc002a401
c00122b2:	e8 0d 03 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00122b7:	83 c4 10             	add    esp,0x10
c00122ba:	b0 01                	mov    al,0x1
c00122bc:	e9 03 ff ff ff       	jmp    c00121c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c00122c1:	fb                   	sti    
c00122c2:	eb d0                	jmp    c0012294 <VAS::tryLoadBackOffDisk(unsigned long)+0x126>
c00122c4:	83 ec 0c             	sub    esp,0xc
c00122c7:	68 f1 a3 02 c0       	push   0xc002a3f1
c00122cc:	e8 f3 02 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00122d1:	83 c4 10             	add    esp,0x10
c00122d4:	eb ce                	jmp    c00122a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x136>

c00122d6 <VAS::scanForEviction()>:
c00122d6:	57                   	push   edi
c00122d7:	56                   	push   esi
c00122d8:	53                   	push   ebx
c00122d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122dd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122e0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122e6:	75 0e                	jne    c00122f6 <VAS::scanForEviction()+0x20>
c00122e8:	89 da                	mov    edx,ebx
c00122ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00122ed:	c1 ea 16             	shr    edx,0x16
c00122f0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00122f4:	74 46                	je     c001233c <VAS::scanForEviction()+0x66>
c00122f6:	83 ec 08             	sub    esp,0x8
c00122f9:	53                   	push   ebx
c00122fa:	56                   	push   esi
c00122fb:	e8 ec f2 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	8b 38                	mov    edi,DWORD PTR [eax]
c0012305:	89 fa                	mov    edx,edi
c0012307:	81 e2 01 08 00 00    	and    edx,0x801
c001230d:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012313:	74 64                	je     c0012379 <VAS::scanForEviction()+0xa3>
c0012315:	81 c3 00 10 00 00    	add    ebx,0x1000
c001231b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012321:	77 37                	ja     c001235a <VAS::scanForEviction()+0x84>
c0012323:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012326:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001232c:	75 c8                	jne    c00122f6 <VAS::scanForEviction()+0x20>
c001232e:	89 da                	mov    edx,ebx
c0012330:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012333:	c1 ea 16             	shr    edx,0x16
c0012336:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001233a:	75 ba                	jne    c00122f6 <VAS::scanForEviction()+0x20>
c001233c:	83 ec 0c             	sub    esp,0xc
c001233f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012345:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012348:	68 0f a4 02 c0       	push   0xc002a40f
c001234d:	e8 72 02 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0012352:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012355:	83 c4 10             	add    esp,0x10
c0012358:	eb 86                	jmp    c00122e0 <VAS::scanForEviction()+0xa>
c001235a:	83 ec 0c             	sub    esp,0xc
c001235d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012364:	68 24 a4 02 c0       	push   0xc002a424
c0012369:	e8 56 02 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001236e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012371:	83 c4 10             	add    esp,0x10
c0012374:	e9 67 ff ff ff       	jmp    c00122e0 <VAS::scanForEviction()+0xa>
c0012379:	f7 c7 20 00 00 00    	test   edi,0x20
c001237f:	74 0a                	je     c001238b <VAS::scanForEviction()+0xb5>
c0012381:	83 e7 df             	and    edi,0xffffffdf
c0012384:	89 38                	mov    DWORD PTR [eax],edi
c0012386:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012389:	eb 8a                	jmp    c0012315 <VAS::scanForEviction()+0x3f>
c001238b:	83 ec 08             	sub    esp,0x8
c001238e:	53                   	push   ebx
c001238f:	56                   	push   esi
c0012390:	e8 17 fd ff ff       	call   c00120ac <VAS::evict(unsigned long)>
c0012395:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001239c:	83 c4 10             	add    esp,0x10
c001239f:	89 f8                	mov    eax,edi
c00123a1:	5b                   	pop    ebx
c00123a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123a7:	5e                   	pop    esi
c00123a8:	5f                   	pop    edi
c00123a9:	c3                   	ret    

c00123aa <mapVASFirstTime>:
c00123aa:	55                   	push   ebp
c00123ab:	57                   	push   edi
c00123ac:	56                   	push   esi
c00123ad:	53                   	push   ebx
c00123ae:	83 ec 0c             	sub    esp,0xc
c00123b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123b6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00123b9:	4a                   	dec    edx
c00123ba:	0f 84 8e 00 00 00    	je     c001244e <mapVASFirstTime+0xa4>
c00123c0:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00123c3:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00123c6:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00123cb:	c1 e5 15             	shl    ebp,0x15
c00123ce:	be 00 90 e7 01       	mov    esi,0x1e79000
c00123d3:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00123d9:	29 eb                	sub    ebx,ebp
c00123db:	29 ee                	sub    esi,ebp
c00123dd:	e8 5e d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c00123e2:	83 ec 0c             	sub    esp,0xc
c00123e5:	68 03 04 00 00       	push   0x403
c00123ea:	6a 01                	push   0x1
c00123ec:	53                   	push   ebx
c00123ed:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00123f3:	50                   	push   eax
c00123f4:	57                   	push   edi
c00123f5:	e8 7e f8 ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123fa:	83 c4 20             	add    esp,0x20
c00123fd:	39 f3                	cmp    ebx,esi
c00123ff:	75 dc                	jne    c00123dd <mapVASFirstTime+0x33>
c0012401:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012406:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001240b:	29 ee                	sub    esi,ebp
c001240d:	29 e8                	sub    eax,ebp
c001240f:	89 c5                	mov    ebp,eax
c0012411:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012415:	19 db                	sbb    ebx,ebx
c0012417:	e8 24 d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c001241c:	83 e3 04             	and    ebx,0x4
c001241f:	83 ec 0c             	sub    esp,0xc
c0012422:	81 c3 03 04 00 00    	add    ebx,0x403
c0012428:	53                   	push   ebx
c0012429:	6a 01                	push   0x1
c001242b:	56                   	push   esi
c001242c:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012432:	50                   	push   eax
c0012433:	57                   	push   edi
c0012434:	e8 3f f8 ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012439:	83 c4 20             	add    esp,0x20
c001243c:	39 f5                	cmp    ebp,esi
c001243e:	75 d1                	jne    c0012411 <mapVASFirstTime+0x67>
c0012440:	0f 20 d8             	mov    eax,cr3
c0012443:	0f 22 d8             	mov    cr3,eax
c0012446:	83 c4 0c             	add    esp,0xc
c0012449:	5b                   	pop    ebx
c001244a:	5e                   	pop    esi
c001244b:	5f                   	pop    edi
c001244c:	5d                   	pop    ebp
c001244d:	c3                   	ret    
c001244e:	83 ec 0c             	sub    esp,0xc
c0012451:	68 35 a4 02 c0       	push   0xc002a435
c0012456:	e8 69 01 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	83 c4 0c             	add    esp,0xc
c0012461:	5b                   	pop    ebx
c0012462:	5e                   	pop    esi
c0012463:	5f                   	pop    edi
c0012464:	5d                   	pop    ebp
c0012465:	c3                   	ret    

c0012466 <__cxa_atexit>:
c0012466:	31 c0                	xor    eax,eax
c0012468:	c3                   	ret    

c0012469 <__cxa_finalize>:
c0012469:	c3                   	ret    

c001246a <__stack_chk_fail>:
c001246a:	55                   	push   ebp
c001246b:	89 e5                	mov    ebp,esp
c001246d:	83 ec 14             	sub    esp,0x14
c0012470:	68 4e a4 02 c0       	push   0xc002a44e
c0012475:	e8 4a 01 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001247a:	58                   	pop    eax
c001247b:	5a                   	pop    edx
c001247c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001247f:	68 9e a4 02 c0       	push   0xc002a49e
c0012484:	e8 3b 01 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0012489:	59                   	pop    ecx
c001248a:	58                   	pop    eax
c001248b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001248e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012491:	68 9e a4 02 c0       	push   0xc002a49e
c0012496:	e8 29 01 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001249b:	5a                   	pop    edx
c001249c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001249f:	59                   	pop    ecx
c00124a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00124a2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124a5:	68 9e a4 02 c0       	push   0xc002a49e
c00124aa:	e8 15 01 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00124af:	5a                   	pop    edx
c00124b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124b3:	59                   	pop    ecx
c00124b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00124b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00124b8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124bb:	68 9e a4 02 c0       	push   0xc002a49e
c00124c0:	e8 ff 00 00 00       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00124c5:	c7 04 24 a6 a4 02 c0 	mov    DWORD PTR [esp],0xc002a4a6
c00124cc:	e8 5e 78 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c00124d1:	83 c4 10             	add    esp,0x10
c00124d4:	c9                   	leave  
c00124d5:	c3                   	ret    

c00124d6 <__cxa_pure_virtual>:
c00124d6:	83 ec 18             	sub    esp,0x18
c00124d9:	68 be a4 02 c0       	push   0xc002a4be
c00124de:	e8 4c 78 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c00124e3:	83 c4 1c             	add    esp,0x1c
c00124e6:	c3                   	ret    

c00124e7 <operator new[](unsigned long)>:
c00124e7:	e9 b0 d0 ff ff       	jmp    c000f59c <malloc>

c00124ec <operator delete(void*, unsigned long)>:
c00124ec:	e9 cb d0 ff ff       	jmp    c000f5bc <rfree>

c00124f1 <operator delete[](void*)>:
c00124f1:	e9 c6 d0 ff ff       	jmp    c000f5bc <rfree>

c00124f6 <operator delete[](void*, unsigned long)>:
c00124f6:	e9 c1 d0 ff ff       	jmp    c000f5bc <rfree>

c00124fb <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00124fb:	55                   	push   ebp
c00124fc:	b9 11 00 00 00       	mov    ecx,0x11
c0012501:	57                   	push   edi
c0012502:	56                   	push   esi
c0012503:	be ce 9f 02 c0       	mov    esi,0xc0029fce
c0012508:	53                   	push   ebx
c0012509:	83 ec 20             	sub    esp,0x20
c001250c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012510:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012514:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012518:	fc                   	cld    
c0012519:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001251b:	89 ee                	mov    esi,ebp
c001251d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012521:	eb 02                	jmp    c0012525 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012523:	89 c6                	mov    esi,eax
c0012525:	31 d2                	xor    edx,edx
c0012527:	41                   	inc    ecx
c0012528:	89 f0                	mov    eax,esi
c001252a:	f7 f3                	div    ebx
c001252c:	39 de                	cmp    esi,ebx
c001252e:	73 f3                	jae    c0012523 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012530:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012533:	eb 02                	jmp    c0012537 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012535:	89 c5                	mov    ebp,eax
c0012537:	31 d2                	xor    edx,edx
c0012539:	49                   	dec    ecx
c001253a:	89 e8                	mov    eax,ebp
c001253c:	f7 f3                	div    ebx
c001253e:	39 dd                	cmp    ebp,ebx
c0012540:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012544:	88 11                	mov    BYTE PTR [ecx],dl
c0012546:	73 ed                	jae    c0012535 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012548:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001254c:	83 c4 20             	add    esp,0x20
c001254f:	5b                   	pop    ebx
c0012550:	5e                   	pop    esi
c0012551:	5f                   	pop    edi
c0012552:	5d                   	pop    ebp
c0012553:	c3                   	ret    

c0012554 <Dbg::logc(char)>:
c0012554:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012558:	ba fd 03 00 00       	mov    edx,0x3fd
c001255d:	ec                   	in     al,dx
c001255e:	a8 20                	test   al,0x20
c0012560:	74 fb                	je     c001255d <Dbg::logc(char)+0x9>
c0012562:	ba f8 03 00 00       	mov    edx,0x3f8
c0012567:	88 c8                	mov    al,cl
c0012569:	ee                   	out    dx,al
c001256a:	c3                   	ret    

c001256b <Dbg::logs(char*)>:
c001256b:	53                   	push   ebx
c001256c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012570:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012573:	84 c0                	test   al,al
c0012575:	74 0f                	je     c0012586 <Dbg::logs(char*)+0x1b>
c0012577:	50                   	push   eax
c0012578:	43                   	inc    ebx
c0012579:	e8 d6 ff ff ff       	call   c0012554 <Dbg::logc(char)>
c001257e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012581:	5a                   	pop    edx
c0012582:	84 c0                	test   al,al
c0012584:	75 f1                	jne    c0012577 <Dbg::logs(char*)+0xc>
c0012586:	5b                   	pop    ebx
c0012587:	c3                   	ret    

c0012588 <Dbg::logWriteInt(unsigned int)>:
c0012588:	83 ec 10             	sub    esp,0x10
c001258b:	6a 0a                	push   0xa
c001258d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012591:	50                   	push   eax
c0012592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012596:	e8 60 ff ff ff       	call   c00124fb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001259b:	50                   	push   eax
c001259c:	e8 ca ff ff ff       	call   c001256b <Dbg::logs(char*)>
c00125a1:	83 c4 20             	add    esp,0x20
c00125a4:	c3                   	ret    

c00125a5 <Dbg::logWriteIntBase(unsigned int, int)>:
c00125a5:	83 ec 10             	sub    esp,0x10
c00125a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00125b0:	50                   	push   eax
c00125b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125b5:	e8 41 ff ff ff       	call   c00124fb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125ba:	50                   	push   eax
c00125bb:	e8 ab ff ff ff       	call   c001256b <Dbg::logs(char*)>
c00125c0:	83 c4 20             	add    esp,0x20
c00125c3:	c3                   	ret    

c00125c4 <Dbg::kprintf(char const*, ...)>:
c00125c4:	55                   	push   ebp
c00125c5:	57                   	push   edi
c00125c6:	56                   	push   esi
c00125c7:	53                   	push   ebx
c00125c8:	83 ec 0c             	sub    esp,0xc
c00125cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125cf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00125d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125d7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00125da:	84 c0                	test   al,al
c00125dc:	74 4a                	je     c0012628 <Dbg::kprintf(char const*, ...)+0x64>
c00125de:	31 db                	xor    ebx,ebx
c00125e0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00125e3:	3c 25                	cmp    al,0x25
c00125e5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00125e8:	0f 85 e4 00 00 00    	jne    c00126d2 <Dbg::kprintf(char const*, ...)+0x10e>
c00125ee:	83 c3 02             	add    ebx,0x2
c00125f1:	8a 07                	mov    al,BYTE PTR [edi]
c00125f3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00125f6:	83 e8 25             	sub    eax,0x25
c00125f9:	3c 53                	cmp    al,0x53
c00125fb:	0f 87 ba 00 00 00    	ja     c00126bb <Dbg::kprintf(char const*, ...)+0xf7>
c0012601:	0f b6 c0             	movzx  eax,al
c0012604:	ff 24 85 d4 a4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5b2c]
c001260b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001260f:	89 c8                	mov    eax,ecx
c0012611:	83 c1 04             	add    ecx,0x4
c0012614:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012618:	ff 30                	push   DWORD PTR [eax]
c001261a:	e8 69 ff ff ff       	call   c0012588 <Dbg::logWriteInt(unsigned int)>
c001261f:	5f                   	pop    edi
c0012620:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012624:	84 c0                	test   al,al
c0012626:	75 b8                	jne    c00125e0 <Dbg::kprintf(char const*, ...)+0x1c>
c0012628:	83 c4 0c             	add    esp,0xc
c001262b:	5b                   	pop    ebx
c001262c:	5e                   	pop    esi
c001262d:	5f                   	pop    edi
c001262e:	5d                   	pop    ebp
c001262f:	c3                   	ret    
c0012630:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012634:	89 c8                	mov    eax,ecx
c0012636:	83 c1 04             	add    ecx,0x4
c0012639:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001263d:	ff 30                	push   DWORD PTR [eax]
c001263f:	e8 27 ff ff ff       	call   c001256b <Dbg::logs(char*)>
c0012644:	58                   	pop    eax
c0012645:	eb d9                	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>
c0012647:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001264b:	89 d0                	mov    eax,edx
c001264d:	83 c2 04             	add    edx,0x4
c0012650:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012654:	ff 30                	push   DWORD PTR [eax]
c0012656:	e8 2d ff ff ff       	call   c0012588 <Dbg::logWriteInt(unsigned int)>
c001265b:	58                   	pop    eax
c001265c:	eb c2                	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>
c001265e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012662:	89 d0                	mov    eax,edx
c0012664:	83 c2 04             	add    edx,0x4
c0012667:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001266a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001266e:	50                   	push   eax
c001266f:	e8 e0 fe ff ff       	call   c0012554 <Dbg::logc(char)>
c0012674:	58                   	pop    eax
c0012675:	eb a9                	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>
c0012677:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001267b:	89 c8                	mov    eax,ecx
c001267d:	83 c1 04             	add    ecx,0x4
c0012680:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012684:	6a 10                	push   0x10
c0012686:	ff 30                	push   DWORD PTR [eax]
c0012688:	e8 18 ff ff ff       	call   c00125a5 <Dbg::logWriteIntBase(unsigned int, int)>
c001268d:	59                   	pop    ecx
c001268e:	5f                   	pop    edi
c001268f:	eb 8f                	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>
c0012691:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012695:	89 d0                	mov    eax,edx
c0012697:	83 c2 08             	add    edx,0x8
c001269a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001269e:	6a 10                	push   0x10
c00126a0:	ff 30                	push   DWORD PTR [eax]
c00126a2:	e8 fe fe ff ff       	call   c00125a5 <Dbg::logWriteIntBase(unsigned int, int)>
c00126a7:	58                   	pop    eax
c00126a8:	5a                   	pop    edx
c00126a9:	e9 72 ff ff ff       	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>
c00126ae:	6a 25                	push   0x25
c00126b0:	e8 9f fe ff ff       	call   c0012554 <Dbg::logc(char)>
c00126b5:	58                   	pop    eax
c00126b6:	e9 65 ff ff ff       	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>
c00126bb:	6a 25                	push   0x25
c00126bd:	e8 92 fe ff ff       	call   c0012554 <Dbg::logc(char)>
c00126c2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00126c5:	50                   	push   eax
c00126c6:	e8 89 fe ff ff       	call   c0012554 <Dbg::logc(char)>
c00126cb:	5a                   	pop    edx
c00126cc:	59                   	pop    ecx
c00126cd:	e9 4e ff ff ff       	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>
c00126d2:	50                   	push   eax
c00126d3:	89 eb                	mov    ebx,ebp
c00126d5:	e8 7a fe ff ff       	call   c0012554 <Dbg::logc(char)>
c00126da:	89 fd                	mov    ebp,edi
c00126dc:	58                   	pop    eax
c00126dd:	e9 3e ff ff ff       	jmp    c0012620 <Dbg::kprintf(char const*, ...)+0x5c>

c00126e2 <File::read(unsigned long long, void*, int*)>:
c00126e2:	53                   	push   ebx
c00126e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126eb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126f2:	3c 19                	cmp    al,0x19
c00126f4:	77 35                	ja     c001272b <File::read(unsigned long long, void*, int*)+0x49>
c00126f6:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c00126fd:	85 c0                	test   eax,eax
c00126ff:	74 2a                	je     c001272b <File::read(unsigned long long, void*, int*)+0x49>
c0012701:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012707:	85 c0                	test   eax,eax
c0012709:	74 20                	je     c001272b <File::read(unsigned long long, void*, int*)+0x49>
c001270b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001270f:	74 21                	je     c0012732 <File::read(unsigned long long, void*, int*)+0x50>
c0012711:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012713:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012717:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001271d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012721:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012725:	5b                   	pop    ebx
c0012726:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012729:	ff e0                	jmp    eax
c001272b:	b8 0b 00 00 00       	mov    eax,0xb
c0012730:	eb 05                	jmp    c0012737 <File::read(unsigned long long, void*, int*)+0x55>
c0012732:	b8 05 00 00 00       	mov    eax,0x5
c0012737:	5b                   	pop    ebx
c0012738:	c3                   	ret    
c0012739:	90                   	nop

c001273a <File::write(unsigned long long, void*, int*)>:
c001273a:	53                   	push   ebx
c001273b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001273f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012743:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001274a:	3c 19                	cmp    al,0x19
c001274c:	77 35                	ja     c0012783 <File::write(unsigned long long, void*, int*)+0x49>
c001274e:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c0012755:	85 c0                	test   eax,eax
c0012757:	74 2a                	je     c0012783 <File::write(unsigned long long, void*, int*)+0x49>
c0012759:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001275f:	85 c0                	test   eax,eax
c0012761:	74 20                	je     c0012783 <File::write(unsigned long long, void*, int*)+0x49>
c0012763:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012767:	74 21                	je     c001278a <File::write(unsigned long long, void*, int*)+0x50>
c0012769:	8b 08                	mov    ecx,DWORD PTR [eax]
c001276b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001276f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012775:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012779:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001277d:	5b                   	pop    ebx
c001277e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012781:	ff e0                	jmp    eax
c0012783:	b8 0b 00 00 00       	mov    eax,0xb
c0012788:	eb 05                	jmp    c001278f <File::write(unsigned long long, void*, int*)+0x55>
c001278a:	b8 05 00 00 00       	mov    eax,0x5
c001278f:	5b                   	pop    ebx
c0012790:	c3                   	ret    
c0012791:	90                   	nop

c0012792 <Directory::read(unsigned long long, void*, int*)>:
c0012792:	53                   	push   ebx
c0012793:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012797:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001279b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127a2:	3c 19                	cmp    al,0x19
c00127a4:	77 35                	ja     c00127db <Directory::read(unsigned long long, void*, int*)+0x49>
c00127a6:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c00127ad:	85 c0                	test   eax,eax
c00127af:	74 2a                	je     c00127db <Directory::read(unsigned long long, void*, int*)+0x49>
c00127b1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127b7:	85 c0                	test   eax,eax
c00127b9:	74 20                	je     c00127db <Directory::read(unsigned long long, void*, int*)+0x49>
c00127bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127bf:	74 21                	je     c00127e2 <Directory::read(unsigned long long, void*, int*)+0x50>
c00127c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127c7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127d5:	5b                   	pop    ebx
c00127d6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00127d9:	ff e0                	jmp    eax
c00127db:	b8 0b 00 00 00       	mov    eax,0xb
c00127e0:	eb 05                	jmp    c00127e7 <Directory::read(unsigned long long, void*, int*)+0x55>
c00127e2:	b8 05 00 00 00       	mov    eax,0x5
c00127e7:	5b                   	pop    ebx
c00127e8:	c3                   	ret    
c00127e9:	90                   	nop

c00127ea <Directory::write(unsigned long long, void*, int*)>:
c00127ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127ee:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00127f5:	b8 0b 00 00 00       	mov    eax,0xb
c00127fa:	80 fa 19             	cmp    dl,0x19
c00127fd:	77 18                	ja     c0012817 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00127ff:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0012806:	85 d2                	test   edx,edx
c0012808:	74 0d                	je     c0012817 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001280a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012811:	19 c0                	sbb    eax,eax
c0012813:	83 e0 0a             	and    eax,0xa
c0012816:	40                   	inc    eax
c0012817:	c3                   	ret    

c0012818 <File::isAtty()>:
c0012818:	31 c0                	xor    eax,eax
c001281a:	c3                   	ret    
c001281b:	90                   	nop

c001281c <Directory::isAtty()>:
c001281c:	31 c0                	xor    eax,eax
c001281e:	c3                   	ret    
c001281f:	90                   	nop

c0012820 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012820:	b8 0a 00 00 00       	mov    eax,0xa
c0012825:	c3                   	ret    

c0012826 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012826:	b8 0a 00 00 00       	mov    eax,0xa
c001282b:	c3                   	ret    

c001282c <Filesystem::getFileFirstSector(char const*)>:
c001282c:	31 c0                	xor    eax,eax
c001282e:	31 d2                	xor    edx,edx
c0012830:	c3                   	ret    
c0012831:	90                   	nop

c0012832 <File::~File()>:
c0012832:	83 ec 0c             	sub    esp,0xc
c0012835:	ba 94 a6 02 c0       	mov    edx,0xc002a694
c001283a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283e:	89 10                	mov    DWORD PTR [eax],edx
c0012840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012844:	83 ec 0c             	sub    esp,0xc
c0012847:	50                   	push   eax
c0012848:	e8 17 e7 ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c001284d:	83 c4 10             	add    esp,0x10
c0012850:	90                   	nop
c0012851:	83 c4 0c             	add    esp,0xc
c0012854:	c3                   	ret    
c0012855:	90                   	nop

c0012856 <File::~File()>:
c0012856:	83 ec 0c             	sub    esp,0xc
c0012859:	83 ec 0c             	sub    esp,0xc
c001285c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012860:	e8 cd ff ff ff       	call   c0012832 <File::~File()>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	83 ec 08             	sub    esp,0x8
c001286b:	68 14 01 00 00       	push   0x114
c0012870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012874:	e8 73 fc ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	83 c4 0c             	add    esp,0xc
c001287f:	c3                   	ret    

c0012880 <Directory::~Directory()>:
c0012880:	83 ec 0c             	sub    esp,0xc
c0012883:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c0012888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001288c:	89 10                	mov    DWORD PTR [eax],edx
c001288e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	50                   	push   eax
c0012896:	e8 c9 e6 ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c001289b:	83 c4 10             	add    esp,0x10
c001289e:	90                   	nop
c001289f:	83 c4 0c             	add    esp,0xc
c00128a2:	c3                   	ret    
c00128a3:	90                   	nop

c00128a4 <Directory::~Directory()>:
c00128a4:	83 ec 0c             	sub    esp,0xc
c00128a7:	83 ec 0c             	sub    esp,0xc
c00128aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ae:	e8 cd ff ff ff       	call   c0012880 <Directory::~Directory()>
c00128b3:	83 c4 10             	add    esp,0x10
c00128b6:	83 ec 08             	sub    esp,0x8
c00128b9:	68 14 01 00 00       	push   0x114
c00128be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c2:	e8 25 fc ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c00128c7:	83 c4 10             	add    esp,0x10
c00128ca:	83 c4 0c             	add    esp,0xc
c00128cd:	c3                   	ret    

c00128ce <Filesystem::Filesystem()>:
c00128ce:	ba 2c a6 02 c0       	mov    edx,0xc002a62c
c00128d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d7:	89 10                	mov    DWORD PTR [eax],edx
c00128d9:	8b 15 74 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d874
c00128df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00128e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128ea:	a3 74 d8 02 c0       	mov    ds:0xc002d874,eax
c00128ef:	90                   	nop
c00128f0:	c3                   	ret    
c00128f1:	90                   	nop

c00128f2 <Filesystem::~Filesystem()>:
c00128f2:	ba 2c a6 02 c0       	mov    edx,0xc002a62c
c00128f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128fb:	89 10                	mov    DWORD PTR [eax],edx
c00128fd:	90                   	nop
c00128fe:	c3                   	ret    
c00128ff:	90                   	nop

c0012900 <Filesystem::~Filesystem()>:
c0012900:	83 ec 0c             	sub    esp,0xc
c0012903:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012907:	e8 e6 ff ff ff       	call   c00128f2 <Filesystem::~Filesystem()>
c001290c:	83 c4 04             	add    esp,0x4
c001290f:	83 ec 08             	sub    esp,0x8
c0012912:	6a 08                	push   0x8
c0012914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012918:	e8 cf fb ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001291d:	83 c4 10             	add    esp,0x10
c0012920:	83 c4 0c             	add    esp,0xc
c0012923:	c3                   	ret    

c0012924 <Fs::getcwd(Process*, char*, int)>:
c0012924:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012928:	31 c0                	xor    eax,eax
c001292a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001292d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012931:	7d 15                	jge    c0012948 <Fs::getcwd(Process*, char*, int)+0x24>
c0012933:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012937:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001293e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012941:	84 c9                	test   cl,cl
c0012943:	74 06                	je     c001294b <Fs::getcwd(Process*, char*, int)+0x27>
c0012945:	40                   	inc    eax
c0012946:	eb e2                	jmp    c001292a <Fs::getcwd(Process*, char*, int)+0x6>
c0012948:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001294b:	31 c0                	xor    eax,eax
c001294d:	c3                   	ret    

c001294e <Fs::initVFS()>:
c001294e:	83 ec 18             	sub    esp,0x18
c0012951:	6a 08                	push   0x8
c0012953:	e8 44 cc ff ff       	call   c000f59c <malloc>
c0012958:	89 04 24             	mov    DWORD PTR [esp],eax
c001295b:	e8 ce de 00 00       	call   c002082e <FAT::FAT()>
c0012960:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012967:	e8 30 cc ff ff       	call   c000f59c <malloc>
c001296c:	89 04 24             	mov    DWORD PTR [esp],eax
c001296f:	e8 c6 f0 00 00       	call   c0021a3a <ISO9660::ISO9660()>
c0012974:	83 c4 1c             	add    esp,0x1c
c0012977:	c3                   	ret    

c0012978 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012978:	55                   	push   ebp
c0012979:	57                   	push   edi
c001297a:	56                   	push   esi
c001297b:	53                   	push   ebx
c001297c:	81 ec 10 04 00 00    	sub    esp,0x410
c0012982:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012989:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012990:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012997:	68 00 04 00 00       	push   0x400
c001299c:	6a 00                	push   0x0
c001299e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129a2:	56                   	push   esi
c00129a3:	e8 a8 dd fe ff       	call   c0000750 <memset>
c00129a8:	83 c4 10             	add    esp,0x10
c00129ab:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00129af:	75 0b                	jne    c00129bc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00129b1:	50                   	push   eax
c00129b2:	50                   	push   eax
c00129b3:	57                   	push   edi
c00129b4:	56                   	push   esi
c00129b5:	e8 52 de fe ff       	call   c000080c <strcpy>
c00129ba:	eb 41                	jmp    c00129fd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00129bc:	8a 07                	mov    al,BYTE PTR [edi]
c00129be:	3c 5c                	cmp    al,0x5c
c00129c0:	74 04                	je     c00129c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00129c2:	3c 2f                	cmp    al,0x2f
c00129c4:	75 18                	jne    c00129de <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00129c6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00129c9:	3c 60                	cmp    al,0x60
c00129cb:	7e 03                	jle    c00129d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00129cd:	83 e8 20             	sub    eax,0x20
c00129d0:	88 04 24             	mov    BYTE PTR [esp],al
c00129d3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00129da:	50                   	push   eax
c00129db:	50                   	push   eax
c00129dc:	eb 18                	jmp    c00129f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00129de:	50                   	push   eax
c00129df:	50                   	push   eax
c00129e0:	55                   	push   ebp
c00129e1:	56                   	push   esi
c00129e2:	e8 25 de fe ff       	call   c000080c <strcpy>
c00129e7:	5a                   	pop    edx
c00129e8:	59                   	pop    ecx
c00129e9:	68 0a b9 02 c0       	push   0xc002b90a
c00129ee:	56                   	push   esi
c00129ef:	e8 58 df fe ff       	call   c000094c <strcat>
c00129f4:	5d                   	pop    ebp
c00129f5:	58                   	pop    eax
c00129f6:	57                   	push   edi
c00129f7:	56                   	push   esi
c00129f8:	e8 4f df fe ff       	call   c000094c <strcat>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a03:	3c 60                	cmp    al,0x60
c0012a05:	7e 03                	jle    c0012a0a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012a07:	83 e8 20             	sub    eax,0x20
c0012a0a:	88 04 24             	mov    BYTE PTR [esp],al
c0012a0d:	88 03                	mov    BYTE PTR [ebx],al
c0012a0f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a16:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a1c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a20:	bf 03 00 00 00       	mov    edi,0x3
c0012a25:	b8 03 00 00 00       	mov    eax,0x3
c0012a2a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a2d:	84 d2                	test   dl,dl
c0012a2f:	0f 84 91 00 00 00    	je     c0012ac6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a35:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a38:	80 fa 5c             	cmp    dl,0x5c
c0012a3b:	74 05                	je     c0012a42 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012a3d:	80 fa 2f             	cmp    dl,0x2f
c0012a40:	75 12                	jne    c0012a54 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a42:	89 c5                	mov    ebp,eax
c0012a44:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a49:	74 09                	je     c0012a54 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a4b:	40                   	inc    eax
c0012a4c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a50:	89 cf                	mov    edi,ecx
c0012a52:	eb d6                	jmp    c0012a2a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a54:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a59:	75 5b                	jne    c0012ab6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a5b:	80 fa 2e             	cmp    dl,0x2e
c0012a5e:	75 56                	jne    c0012ab6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a60:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012a64:	74 19                	je     c0012a7f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012a66:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a6b:	74 53                	je     c0012ac0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a6d:	89 f9                	mov    ecx,edi
c0012a6f:	41                   	inc    ecx
c0012a70:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a73:	80 fa 2f             	cmp    dl,0x2f
c0012a76:	74 f7                	je     c0012a6f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a78:	80 fa 5c             	cmp    dl,0x5c
c0012a7b:	74 f2                	je     c0012a6f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a7d:	eb d1                	jmp    c0012a50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a7f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a84:	74 3a                	je     c0012ac0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a86:	83 f8 03             	cmp    eax,0x3
c0012a89:	74 c5                	je     c0012a50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a8b:	41                   	inc    ecx
c0012a8c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a8f:	80 fa 2f             	cmp    dl,0x2f
c0012a92:	74 f7                	je     c0012a8b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a94:	80 fa 5c             	cmp    dl,0x5c
c0012a97:	74 f2                	je     c0012a8b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a99:	48                   	dec    eax
c0012a9a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a9e:	75 06                	jne    c0012aa6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012aa0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012aa4:	eb f3                	jmp    c0012a99 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012aa6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012aaa:	74 07                	je     c0012ab3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012aac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ab0:	48                   	dec    eax
c0012ab1:	eb f3                	jmp    c0012aa6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ab3:	40                   	inc    eax
c0012ab4:	eb 9a                	jmp    c0012a50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ab6:	80 fa 2f             	cmp    dl,0x2f
c0012ab9:	74 95                	je     c0012a50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012abb:	80 fa 5c             	cmp    dl,0x5c
c0012abe:	74 90                	je     c0012a50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ac0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ac3:	40                   	inc    eax
c0012ac4:	eb 8a                	jmp    c0012a50 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ac6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012aca:	83 ec 0c             	sub    esp,0xc
c0012acd:	53                   	push   ebx
c0012ace:	e8 99 dc fe ff       	call   c000076c <strlen>
c0012ad3:	83 c4 10             	add    esp,0x10
c0012ad6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012adb:	75 26                	jne    c0012b03 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012add:	83 ec 0c             	sub    esp,0xc
c0012ae0:	53                   	push   ebx
c0012ae1:	e8 86 dc fe ff       	call   c000076c <strlen>
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012aee:	74 26                	je     c0012b16 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012af0:	83 ec 0c             	sub    esp,0xc
c0012af3:	53                   	push   ebx
c0012af4:	e8 73 dc fe ff       	call   c000076c <strlen>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b01:	eb c7                	jmp    c0012aca <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012b03:	83 ec 0c             	sub    esp,0xc
c0012b06:	53                   	push   ebx
c0012b07:	e8 60 dc fe ff       	call   c000076c <strlen>
c0012b0c:	83 c4 10             	add    esp,0x10
c0012b0f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b14:	74 c7                	je     c0012add <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012b16:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b1c:	5b                   	pop    ebx
c0012b1d:	5e                   	pop    esi
c0012b1e:	5f                   	pop    edi
c0012b1f:	5d                   	pop    ebp
c0012b20:	c3                   	ret    
c0012b21:	90                   	nop

c0012b22 <File::File(char const*, Process*)>:
c0012b22:	83 ec 0c             	sub    esp,0xc
c0012b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b29:	83 ec 08             	sub    esp,0x8
c0012b2c:	6a 00                	push   0x0
c0012b2e:	50                   	push   eax
c0012b2f:	e8 4e e2 ff ff       	call   c0010d82 <UnixFile::UnixFile(int)>
c0012b34:	83 c4 10             	add    esp,0x10
c0012b37:	ba 94 a6 02 c0       	mov    edx,0xc002a694
c0012b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b40:	89 10                	mov    DWORD PTR [eax],edx
c0012b42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b46:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	83 c0 0d             	add    eax,0xd
c0012b53:	83 ec 04             	sub    esp,0x4
c0012b56:	52                   	push   edx
c0012b57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b5b:	50                   	push   eax
c0012b5c:	e8 17 fe ff ff       	call   c0012978 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012b61:	83 c4 10             	add    esp,0x10
c0012b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b68:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012b6b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b72:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012b80:	90                   	nop
c0012b81:	83 c4 0c             	add    esp,0xc
c0012b84:	c3                   	ret    
c0012b85:	90                   	nop

c0012b86 <File::open(FileOpenMode)>:
c0012b86:	53                   	push   ebx
c0012b87:	b8 0b 00 00 00       	mov    eax,0xb
c0012b8c:	83 ec 08             	sub    esp,0x8
c0012b8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b93:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012b9a:	80 fa 19             	cmp    dl,0x19
c0012b9d:	77 40                	ja     c0012bdf <File::open(FileOpenMode)+0x59>
c0012b9f:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0012ba6:	85 d2                	test   edx,edx
c0012ba8:	74 35                	je     c0012bdf <File::open(FileOpenMode)+0x59>
c0012baa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bb0:	85 d2                	test   edx,edx
c0012bb2:	74 2b                	je     c0012bdf <File::open(FileOpenMode)+0x59>
c0012bb4:	b8 06 00 00 00       	mov    eax,0x6
c0012bb9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012bbd:	75 20                	jne    c0012bdf <File::open(FileOpenMode)+0x59>
c0012bbf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bc1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012bc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bcb:	51                   	push   ecx
c0012bcc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012bcf:	51                   	push   ecx
c0012bd0:	52                   	push   edx
c0012bd1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012bd4:	83 c4 10             	add    esp,0x10
c0012bd7:	85 c0                	test   eax,eax
c0012bd9:	75 04                	jne    c0012bdf <File::open(FileOpenMode)+0x59>
c0012bdb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012bdf:	83 c4 08             	add    esp,0x8
c0012be2:	5b                   	pop    ebx
c0012be3:	c3                   	ret    

c0012be4 <File::close()>:
c0012be4:	53                   	push   ebx
c0012be5:	b8 0b 00 00 00       	mov    eax,0xb
c0012bea:	83 ec 08             	sub    esp,0x8
c0012bed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012bf1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012bf8:	80 fa 19             	cmp    dl,0x19
c0012bfb:	77 41                	ja     c0012c3e <File::close()+0x5a>
c0012bfd:	8b 1c 95 00 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2300]
c0012c04:	85 db                	test   ebx,ebx
c0012c06:	74 36                	je     c0012c3e <File::close()+0x5a>
c0012c08:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c0f:	74 2d                	je     c0012c3e <File::close()+0x5a>
c0012c11:	b8 05 00 00 00       	mov    eax,0x5
c0012c16:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c1a:	74 22                	je     c0012c3e <File::close()+0x5a>
c0012c1c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c20:	8b 04 95 00 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2300]
c0012c27:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c2d:	53                   	push   ebx
c0012c2e:	53                   	push   ebx
c0012c2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c31:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c37:	50                   	push   eax
c0012c38:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c3b:	83 c4 10             	add    esp,0x10
c0012c3e:	83 c4 08             	add    esp,0x8
c0012c41:	5b                   	pop    ebx
c0012c42:	c3                   	ret    
c0012c43:	90                   	nop

c0012c44 <File::seek(unsigned long long)>:
c0012c44:	56                   	push   esi
c0012c45:	53                   	push   ebx
c0012c46:	b8 0b 00 00 00       	mov    eax,0xb
c0012c4b:	51                   	push   ecx
c0012c4c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c54:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c5f:	80 fa 19             	cmp    dl,0x19
c0012c62:	77 31                	ja     c0012c95 <File::seek(unsigned long long)+0x51>
c0012c64:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0012c6b:	85 d2                	test   edx,edx
c0012c6d:	74 26                	je     c0012c95 <File::seek(unsigned long long)+0x51>
c0012c6f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c75:	85 d2                	test   edx,edx
c0012c77:	74 1c                	je     c0012c95 <File::seek(unsigned long long)+0x51>
c0012c79:	b8 05 00 00 00       	mov    eax,0x5
c0012c7e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012c82:	74 11                	je     c0012c95 <File::seek(unsigned long long)+0x51>
c0012c84:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c86:	53                   	push   ebx
c0012c87:	51                   	push   ecx
c0012c88:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012c8e:	52                   	push   edx
c0012c8f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	5a                   	pop    edx
c0012c96:	5b                   	pop    ebx
c0012c97:	5e                   	pop    esi
c0012c98:	c3                   	ret    
c0012c99:	90                   	nop

c0012c9a <File::tell(unsigned long long*)>:
c0012c9a:	83 ec 0c             	sub    esp,0xc
c0012c9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012ca2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ca6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cad:	80 fa 19             	cmp    dl,0x19
c0012cb0:	77 34                	ja     c0012ce6 <File::tell(unsigned long long*)+0x4c>
c0012cb2:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0012cb9:	85 d2                	test   edx,edx
c0012cbb:	74 29                	je     c0012ce6 <File::tell(unsigned long long*)+0x4c>
c0012cbd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cc3:	85 d2                	test   edx,edx
c0012cc5:	74 1f                	je     c0012ce6 <File::tell(unsigned long long*)+0x4c>
c0012cc7:	b8 05 00 00 00       	mov    eax,0x5
c0012ccc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cd0:	74 14                	je     c0012ce6 <File::tell(unsigned long long*)+0x4c>
c0012cd2:	50                   	push   eax
c0012cd3:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cd9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012cdf:	52                   	push   edx
c0012ce0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ce3:	83 c4 10             	add    esp,0x10
c0012ce6:	83 c4 0c             	add    esp,0xc
c0012ce9:	c3                   	ret    

c0012cea <File::rewind()>:
c0012cea:	83 ec 10             	sub    esp,0x10
c0012ced:	6a 00                	push   0x0
c0012cef:	6a 00                	push   0x0
c0012cf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf5:	e8 4a ff ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c0012cfa:	83 c4 1c             	add    esp,0x1c
c0012cfd:	c3                   	ret    

c0012cfe <File::unlink()>:
c0012cfe:	83 ec 0c             	sub    esp,0xc
c0012d01:	b8 0b 00 00 00       	mov    eax,0xb
c0012d06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d0a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d11:	80 f9 19             	cmp    cl,0x19
c0012d14:	77 2f                	ja     c0012d45 <File::unlink()+0x47>
c0012d16:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012d1d:	85 c9                	test   ecx,ecx
c0012d1f:	74 24                	je     c0012d45 <File::unlink()+0x47>
c0012d21:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d27:	85 c9                	test   ecx,ecx
c0012d29:	74 1a                	je     c0012d45 <File::unlink()+0x47>
c0012d2b:	b8 06 00 00 00       	mov    eax,0x6
c0012d30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d34:	75 0f                	jne    c0012d45 <File::unlink()+0x47>
c0012d36:	83 c2 0d             	add    edx,0xd
c0012d39:	50                   	push   eax
c0012d3a:	50                   	push   eax
c0012d3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d3d:	52                   	push   edx
c0012d3e:	51                   	push   ecx
c0012d3f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d42:	83 c4 10             	add    esp,0x10
c0012d45:	83 c4 0c             	add    esp,0xc
c0012d48:	c3                   	ret    
c0012d49:	90                   	nop

c0012d4a <File::rename(char const*)>:
c0012d4a:	83 ec 0c             	sub    esp,0xc
c0012d4d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d5d:	80 f9 19             	cmp    cl,0x19
c0012d60:	77 32                	ja     c0012d94 <File::rename(char const*)+0x4a>
c0012d62:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012d69:	85 c9                	test   ecx,ecx
c0012d6b:	74 27                	je     c0012d94 <File::rename(char const*)+0x4a>
c0012d6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d73:	85 c9                	test   ecx,ecx
c0012d75:	74 1d                	je     c0012d94 <File::rename(char const*)+0x4a>
c0012d77:	b8 06 00 00 00       	mov    eax,0x6
c0012d7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d80:	75 12                	jne    c0012d94 <File::rename(char const*)+0x4a>
c0012d82:	83 c2 0d             	add    edx,0xd
c0012d85:	50                   	push   eax
c0012d86:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d8c:	52                   	push   edx
c0012d8d:	51                   	push   ecx
c0012d8e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	83 c4 0c             	add    esp,0xc
c0012d97:	c3                   	ret    

c0012d98 <File::chfatattr(unsigned char, unsigned char)>:
c0012d98:	57                   	push   edi
c0012d99:	b8 0b 00 00 00       	mov    eax,0xb
c0012d9e:	56                   	push   esi
c0012d9f:	53                   	push   ebx
c0012da0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012da4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012da8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012daf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012db3:	80 f9 19             	cmp    cl,0x19
c0012db6:	77 37                	ja     c0012def <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012db8:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012dbf:	85 c9                	test   ecx,ecx
c0012dc1:	74 2c                	je     c0012def <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dc3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dc9:	85 c9                	test   ecx,ecx
c0012dcb:	74 22                	je     c0012def <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dcd:	b8 06 00 00 00       	mov    eax,0x6
c0012dd2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dd6:	75 17                	jne    c0012def <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dd8:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012dda:	89 f0                	mov    eax,esi
c0012ddc:	83 c2 0d             	add    edx,0xd
c0012ddf:	0f b6 f0             	movzx  esi,al
c0012de2:	0f b6 db             	movzx  ebx,bl
c0012de5:	56                   	push   esi
c0012de6:	53                   	push   ebx
c0012de7:	52                   	push   edx
c0012de8:	51                   	push   ecx
c0012de9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	5b                   	pop    ebx
c0012df0:	5e                   	pop    esi
c0012df1:	5f                   	pop    edi
c0012df2:	c3                   	ret    
c0012df3:	90                   	nop

c0012df4 <File::exists()>:
c0012df4:	83 ec 0c             	sub    esp,0xc
c0012df7:	31 c0                	xor    eax,eax
c0012df9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dfd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e04:	80 f9 19             	cmp    cl,0x19
c0012e07:	77 24                	ja     c0012e2d <File::exists()+0x39>
c0012e09:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012e10:	85 c9                	test   ecx,ecx
c0012e12:	74 19                	je     c0012e2d <File::exists()+0x39>
c0012e14:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e1a:	85 c9                	test   ecx,ecx
c0012e1c:	74 0f                	je     c0012e2d <File::exists()+0x39>
c0012e1e:	83 c2 0d             	add    edx,0xd
c0012e21:	50                   	push   eax
c0012e22:	50                   	push   eax
c0012e23:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e25:	52                   	push   edx
c0012e26:	51                   	push   ecx
c0012e27:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	83 c4 0c             	add    esp,0xc
c0012e30:	c3                   	ret    
c0012e31:	90                   	nop

c0012e32 <File::stat(unsigned long long*, bool*)>:
c0012e32:	56                   	push   esi
c0012e33:	53                   	push   ebx
c0012e34:	50                   	push   eax
c0012e35:	b8 0b 00 00 00       	mov    eax,0xb
c0012e3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e4d:	80 f9 19             	cmp    cl,0x19
c0012e50:	77 3d                	ja     c0012e8f <File::stat(unsigned long long*, bool*)+0x5d>
c0012e52:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0012e59:	85 c9                	test   ecx,ecx
c0012e5b:	74 32                	je     c0012e8f <File::stat(unsigned long long*, bool*)+0x5d>
c0012e5d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e63:	85 c9                	test   ecx,ecx
c0012e65:	74 28                	je     c0012e8f <File::stat(unsigned long long*, bool*)+0x5d>
c0012e67:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e69:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e6d:	74 13                	je     c0012e82 <File::stat(unsigned long long*, bool*)+0x50>
c0012e6f:	83 ec 04             	sub    esp,0x4
c0012e72:	56                   	push   esi
c0012e73:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012e79:	51                   	push   ecx
c0012e7a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012e7d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012e80:	eb 0a                	jmp    c0012e8c <File::stat(unsigned long long*, bool*)+0x5a>
c0012e82:	53                   	push   ebx
c0012e83:	83 c2 0d             	add    edx,0xd
c0012e86:	56                   	push   esi
c0012e87:	52                   	push   edx
c0012e88:	51                   	push   ecx
c0012e89:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012e8c:	83 c4 10             	add    esp,0x10
c0012e8f:	5a                   	pop    edx
c0012e90:	5b                   	pop    ebx
c0012e91:	5e                   	pop    esi
c0012e92:	c3                   	ret    

c0012e93 <Fs::setcwd(Process*, char*)>:
c0012e93:	55                   	push   ebp
c0012e94:	57                   	push   edi
c0012e95:	56                   	push   esi
c0012e96:	53                   	push   ebx
c0012e97:	81 ec 20 02 00 00    	sub    esp,0x220
c0012e9d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012ea4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012eaa:	57                   	push   edi
c0012eab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012eb2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012eb6:	56                   	push   esi
c0012eb7:	e8 bc fa ff ff       	call   c0012978 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ebc:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ebf:	e8 a8 d8 fe ff       	call   c000076c <strlen>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	83 f8 02             	cmp    eax,0x2
c0012eca:	77 17                	ja     c0012ee3 <Fs::setcwd(Process*, char*)+0x50>
c0012ecc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012ed1:	83 e8 41             	sub    eax,0x41
c0012ed4:	83 f8 19             	cmp    eax,0x19
c0012ed7:	76 24                	jbe    c0012efd <Fs::setcwd(Process*, char*)+0x6a>
c0012ed9:	b8 03 00 00 00       	mov    eax,0x3
c0012ede:	e9 e0 00 00 00       	jmp    c0012fc3 <Fs::setcwd(Process*, char*)+0x130>
c0012ee3:	83 ec 0c             	sub    esp,0xc
c0012ee6:	56                   	push   esi
c0012ee7:	e8 80 d8 fe ff       	call   c000076c <strlen>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	83 f8 03             	cmp    eax,0x3
c0012ef2:	75 34                	jne    c0012f28 <Fs::setcwd(Process*, char*)+0x95>
c0012ef4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012ef9:	75 2d                	jne    c0012f28 <Fs::setcwd(Process*, char*)+0x95>
c0012efb:	eb cf                	jmp    c0012ecc <Fs::setcwd(Process*, char*)+0x39>
c0012efd:	8b 14 85 00 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2300]
c0012f04:	b8 05 00 00 00       	mov    eax,0x5
c0012f09:	85 d2                	test   edx,edx
c0012f0b:	0f 84 b2 00 00 00    	je     c0012fc3 <Fs::setcwd(Process*, char*)+0x130>
c0012f11:	b8 06 00 00 00       	mov    eax,0x6
c0012f16:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f1d:	0f 85 92 00 00 00    	jne    c0012fb5 <Fs::setcwd(Process*, char*)+0x122>
c0012f23:	e9 9b 00 00 00       	jmp    c0012fc3 <Fs::setcwd(Process*, char*)+0x130>
c0012f28:	83 ec 0c             	sub    esp,0xc
c0012f2b:	68 14 01 00 00       	push   0x114
c0012f30:	e8 67 c6 ff ff       	call   c000f59c <malloc>
c0012f35:	83 c4 0c             	add    esp,0xc
c0012f38:	89 c3                	mov    ebx,eax
c0012f3a:	55                   	push   ebp
c0012f3b:	56                   	push   esi
c0012f3c:	50                   	push   eax
c0012f3d:	e8 e0 fb ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c0012f42:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012f47:	83 c4 0c             	add    esp,0xc
c0012f4a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012f4e:	50                   	push   eax
c0012f4f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f53:	50                   	push   eax
c0012f54:	53                   	push   ebx
c0012f55:	e8 d8 fe ff ff       	call   c0012e32 <File::stat(unsigned long long*, bool*)>
c0012f5a:	83 c4 10             	add    esp,0x10
c0012f5d:	83 f8 02             	cmp    eax,0x2
c0012f60:	74 04                	je     c0012f66 <Fs::setcwd(Process*, char*)+0xd3>
c0012f62:	85 c0                	test   eax,eax
c0012f64:	74 1c                	je     c0012f82 <Fs::setcwd(Process*, char*)+0xef>
c0012f66:	b8 01 00 00 00       	mov    eax,0x1
c0012f6b:	85 db                	test   ebx,ebx
c0012f6d:	74 54                	je     c0012fc3 <Fs::setcwd(Process*, char*)+0x130>
c0012f6f:	83 ec 0c             	sub    esp,0xc
c0012f72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f74:	53                   	push   ebx
c0012f75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f78:	83 c4 10             	add    esp,0x10
c0012f7b:	b8 01 00 00 00       	mov    eax,0x1
c0012f80:	eb 41                	jmp    c0012fc3 <Fs::setcwd(Process*, char*)+0x130>
c0012f82:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012f87:	75 1c                	jne    c0012fa5 <Fs::setcwd(Process*, char*)+0x112>
c0012f89:	b8 02 00 00 00       	mov    eax,0x2
c0012f8e:	85 db                	test   ebx,ebx
c0012f90:	74 31                	je     c0012fc3 <Fs::setcwd(Process*, char*)+0x130>
c0012f92:	83 ec 0c             	sub    esp,0xc
c0012f95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f97:	53                   	push   ebx
c0012f98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	b8 02 00 00 00       	mov    eax,0x2
c0012fa3:	eb 1e                	jmp    c0012fc3 <Fs::setcwd(Process*, char*)+0x130>
c0012fa5:	85 db                	test   ebx,ebx
c0012fa7:	74 0c                	je     c0012fb5 <Fs::setcwd(Process*, char*)+0x122>
c0012fa9:	83 ec 0c             	sub    esp,0xc
c0012fac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fae:	53                   	push   ebx
c0012faf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fb2:	83 c4 10             	add    esp,0x10
c0012fb5:	50                   	push   eax
c0012fb6:	50                   	push   eax
c0012fb7:	56                   	push   esi
c0012fb8:	57                   	push   edi
c0012fb9:	e8 4e d8 fe ff       	call   c000080c <strcpy>
c0012fbe:	83 c4 10             	add    esp,0x10
c0012fc1:	31 c0                	xor    eax,eax
c0012fc3:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012fc9:	5b                   	pop    ebx
c0012fca:	5e                   	pop    esi
c0012fcb:	5f                   	pop    edi
c0012fcc:	5d                   	pop    ebp
c0012fcd:	c3                   	ret    

c0012fce <Directory::Directory(char const*, Process*)>:
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd5:	83 ec 08             	sub    esp,0x8
c0012fd8:	6a 00                	push   0x0
c0012fda:	50                   	push   eax
c0012fdb:	e8 a2 dd ff ff       	call   c0010d82 <UnixFile::UnixFile(int)>
c0012fe0:	83 c4 10             	add    esp,0x10
c0012fe3:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c0012fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fec:	89 10                	mov    DWORD PTR [eax],edx
c0012fee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffc:	83 c0 0d             	add    eax,0xd
c0012fff:	83 ec 04             	sub    esp,0x4
c0013002:	52                   	push   edx
c0013003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013007:	50                   	push   eax
c0013008:	e8 6b f9 ff ff       	call   c0012978 <Fs::standardiseFiles(char*, char const*, char const*)>
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013014:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013017:	8d 50 bf             	lea    edx,[eax-0x41]
c001301a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013028:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001302c:	90                   	nop
c001302d:	83 c4 0c             	add    esp,0xc
c0013030:	c3                   	ret    
c0013031:	90                   	nop

c0013032 <Directory::open()>:
c0013032:	53                   	push   ebx
c0013033:	b8 0b 00 00 00       	mov    eax,0xb
c0013038:	83 ec 08             	sub    esp,0x8
c001303b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001303f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013046:	80 fa 19             	cmp    dl,0x19
c0013049:	77 3d                	ja     c0013088 <Directory::open()+0x56>
c001304b:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c0013052:	85 d2                	test   edx,edx
c0013054:	74 32                	je     c0013088 <Directory::open()+0x56>
c0013056:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001305c:	85 d2                	test   edx,edx
c001305e:	74 28                	je     c0013088 <Directory::open()+0x56>
c0013060:	b8 06 00 00 00       	mov    eax,0x6
c0013065:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013069:	75 1d                	jne    c0013088 <Directory::open()+0x56>
c001306b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013071:	50                   	push   eax
c0013072:	8b 02                	mov    eax,DWORD PTR [edx]
c0013074:	51                   	push   ecx
c0013075:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013078:	51                   	push   ecx
c0013079:	52                   	push   edx
c001307a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	85 c0                	test   eax,eax
c0013082:	75 04                	jne    c0013088 <Directory::open()+0x56>
c0013084:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013088:	83 c4 08             	add    esp,0x8
c001308b:	5b                   	pop    ebx
c001308c:	c3                   	ret    
c001308d:	90                   	nop

c001308e <Directory::close()>:
c001308e:	53                   	push   ebx
c001308f:	b8 0b 00 00 00       	mov    eax,0xb
c0013094:	83 ec 08             	sub    esp,0x8
c0013097:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001309b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130a2:	80 fa 19             	cmp    dl,0x19
c00130a5:	77 41                	ja     c00130e8 <Directory::close()+0x5a>
c00130a7:	8b 1c 95 00 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2300]
c00130ae:	85 db                	test   ebx,ebx
c00130b0:	74 36                	je     c00130e8 <Directory::close()+0x5a>
c00130b2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00130b9:	74 2d                	je     c00130e8 <Directory::close()+0x5a>
c00130bb:	b8 05 00 00 00       	mov    eax,0x5
c00130c0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130c4:	74 22                	je     c00130e8 <Directory::close()+0x5a>
c00130c6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00130ca:	8b 04 95 00 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2300]
c00130d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130d7:	53                   	push   ebx
c00130d8:	53                   	push   ebx
c00130d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00130db:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00130e1:	50                   	push   eax
c00130e2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	83 c4 08             	add    esp,0x8
c00130eb:	5b                   	pop    ebx
c00130ec:	c3                   	ret    
c00130ed:	90                   	nop

c00130ee <Directory::unlink()>:
c00130ee:	83 ec 0c             	sub    esp,0xc
c00130f1:	b8 0b 00 00 00       	mov    eax,0xb
c00130f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013101:	80 f9 19             	cmp    cl,0x19
c0013104:	77 2f                	ja     c0013135 <Directory::unlink()+0x47>
c0013106:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c001310d:	85 c9                	test   ecx,ecx
c001310f:	74 24                	je     c0013135 <Directory::unlink()+0x47>
c0013111:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013117:	85 c9                	test   ecx,ecx
c0013119:	74 1a                	je     c0013135 <Directory::unlink()+0x47>
c001311b:	b8 06 00 00 00       	mov    eax,0x6
c0013120:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013124:	75 0f                	jne    c0013135 <Directory::unlink()+0x47>
c0013126:	83 c2 0d             	add    edx,0xd
c0013129:	50                   	push   eax
c001312a:	50                   	push   eax
c001312b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001312d:	52                   	push   edx
c001312e:	51                   	push   ecx
c001312f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013132:	83 c4 10             	add    esp,0x10
c0013135:	83 c4 0c             	add    esp,0xc
c0013138:	c3                   	ret    
c0013139:	90                   	nop

c001313a <Directory::rename(char const*)>:
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	b8 0b 00 00 00       	mov    eax,0xb
c0013142:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013146:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001314d:	80 f9 19             	cmp    cl,0x19
c0013150:	77 32                	ja     c0013184 <Directory::rename(char const*)+0x4a>
c0013152:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0013159:	85 c9                	test   ecx,ecx
c001315b:	74 27                	je     c0013184 <Directory::rename(char const*)+0x4a>
c001315d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013163:	85 c9                	test   ecx,ecx
c0013165:	74 1d                	je     c0013184 <Directory::rename(char const*)+0x4a>
c0013167:	b8 06 00 00 00       	mov    eax,0x6
c001316c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013170:	75 12                	jne    c0013184 <Directory::rename(char const*)+0x4a>
c0013172:	83 c2 0d             	add    edx,0xd
c0013175:	50                   	push   eax
c0013176:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001317c:	52                   	push   edx
c001317d:	51                   	push   ecx
c001317e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013181:	83 c4 10             	add    esp,0x10
c0013184:	83 c4 0c             	add    esp,0xc
c0013187:	c3                   	ret    

c0013188 <Directory::exists()>:
c0013188:	83 ec 0c             	sub    esp,0xc
c001318b:	31 c0                	xor    eax,eax
c001318d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013191:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013198:	80 f9 19             	cmp    cl,0x19
c001319b:	77 24                	ja     c00131c1 <Directory::exists()+0x39>
c001319d:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c00131a4:	85 c9                	test   ecx,ecx
c00131a6:	74 19                	je     c00131c1 <Directory::exists()+0x39>
c00131a8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131ae:	85 c9                	test   ecx,ecx
c00131b0:	74 0f                	je     c00131c1 <Directory::exists()+0x39>
c00131b2:	83 c2 0d             	add    edx,0xd
c00131b5:	50                   	push   eax
c00131b6:	50                   	push   eax
c00131b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131b9:	52                   	push   edx
c00131ba:	51                   	push   ecx
c00131bb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00131be:	83 c4 10             	add    esp,0x10
c00131c1:	83 c4 0c             	add    esp,0xc
c00131c4:	c3                   	ret    
c00131c5:	90                   	nop

c00131c6 <Directory::read(dirent*)>:
c00131c6:	83 ec 1c             	sub    esp,0x1c
c00131c9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00131d2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131d9:	80 fa 19             	cmp    dl,0x19
c00131dc:	77 30                	ja     c001320e <Directory::read(dirent*)+0x48>
c00131de:	8b 14 95 00 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2300]
c00131e5:	85 d2                	test   edx,edx
c00131e7:	74 25                	je     c001320e <Directory::read(dirent*)+0x48>
c00131e9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131f0:	74 1c                	je     c001320e <Directory::read(dirent*)+0x48>
c00131f2:	83 ec 0c             	sub    esp,0xc
c00131f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131fb:	52                   	push   edx
c00131fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013200:	6a 00                	push   0x0
c0013202:	68 10 01 00 00       	push   0x110
c0013207:	51                   	push   ecx
c0013208:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001320b:	83 c4 20             	add    esp,0x20
c001320e:	83 c4 1c             	add    esp,0x1c
c0013211:	c3                   	ret    

c0013212 <Directory::create()>:
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	b8 0b 00 00 00       	mov    eax,0xb
c001321a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001321e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013225:	80 f9 19             	cmp    cl,0x19
c0013228:	77 2f                	ja     c0013259 <Directory::create()+0x47>
c001322a:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c0013231:	85 c9                	test   ecx,ecx
c0013233:	74 24                	je     c0013259 <Directory::create()+0x47>
c0013235:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001323b:	85 c9                	test   ecx,ecx
c001323d:	74 1a                	je     c0013259 <Directory::create()+0x47>
c001323f:	b8 06 00 00 00       	mov    eax,0x6
c0013244:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013248:	75 0f                	jne    c0013259 <Directory::create()+0x47>
c001324a:	83 c2 0d             	add    edx,0xd
c001324d:	50                   	push   eax
c001324e:	50                   	push   eax
c001324f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013251:	52                   	push   edx
c0013252:	51                   	push   ecx
c0013253:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013256:	83 c4 10             	add    esp,0x10
c0013259:	83 c4 0c             	add    esp,0xc
c001325c:	c3                   	ret    
c001325d:	90                   	nop

c001325e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001325e:	b8 0a 00 00 00       	mov    eax,0xa
c0013263:	c3                   	ret    

c0013264 <Bus::Bus(char const*)>:
c0013264:	83 ec 0c             	sub    esp,0xc
c0013267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326b:	83 ec 08             	sub    esp,0x8
c001326e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013272:	50                   	push   eax
c0013273:	e8 88 09 00 00       	call   c0013c00 <Device::Device(char const*)>
c0013278:	83 c4 10             	add    esp,0x10
c001327b:	ba cc a6 02 c0       	mov    edx,0xc002a6cc
c0013280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013284:	89 10                	mov    DWORD PTR [eax],edx
c0013286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013294:	90                   	nop
c0013295:	83 c4 0c             	add    esp,0xc
c0013298:	c3                   	ret    
c0013299:	90                   	nop

c001329a <Bus::~Bus()>:
c001329a:	83 ec 0c             	sub    esp,0xc
c001329d:	ba cc a6 02 c0       	mov    edx,0xc002a6cc
c00132a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a6:	89 10                	mov    DWORD PTR [eax],edx
c00132a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	50                   	push   eax
c00132b0:	e8 15 06 00 00       	call   c00138ca <Device::~Device()>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	90                   	nop
c00132b9:	83 c4 0c             	add    esp,0xc
c00132bc:	c3                   	ret    
c00132bd:	90                   	nop

c00132be <Bus::~Bus()>:
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	83 ec 0c             	sub    esp,0xc
c00132c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c8:	e8 cd ff ff ff       	call   c001329a <Bus::~Bus()>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	83 ec 08             	sub    esp,0x8
c00132d3:	68 58 01 00 00       	push   0x158
c00132d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132dc:	e8 0b f2 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c00132e1:	83 c4 10             	add    esp,0x10
c00132e4:	83 c4 0c             	add    esp,0xc
c00132e7:	c3                   	ret    

c00132e8 <Buzzer::Buzzer(char const*)>:
c00132e8:	83 ec 0c             	sub    esp,0xc
c00132eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ef:	83 ec 08             	sub    esp,0x8
c00132f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132f6:	50                   	push   eax
c00132f7:	e8 04 09 00 00       	call   c0013c00 <Device::Device(char const*)>
c00132fc:	83 c4 10             	add    esp,0x10
c00132ff:	ba f8 a6 02 c0       	mov    edx,0xc002a6f8
c0013304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013308:	89 10                	mov    DWORD PTR [eax],edx
c001330a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013326:	90                   	nop
c0013327:	83 c4 0c             	add    esp,0xc
c001332a:	c3                   	ret    
c001332b:	90                   	nop

c001332c <Buzzer::~Buzzer()>:
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	ba f8 a6 02 c0       	mov    edx,0xc002a6f8
c0013334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013338:	89 10                	mov    DWORD PTR [eax],edx
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	50                   	push   eax
c0013342:	e8 83 05 00 00       	call   c00138ca <Device::~Device()>
c0013347:	83 c4 10             	add    esp,0x10
c001334a:	90                   	nop
c001334b:	83 c4 0c             	add    esp,0xc
c001334e:	c3                   	ret    
c001334f:	90                   	nop

c0013350 <Buzzer::~Buzzer()>:
c0013350:	83 ec 0c             	sub    esp,0xc
c0013353:	83 ec 0c             	sub    esp,0xc
c0013356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335a:	e8 cd ff ff ff       	call   c001332c <Buzzer::~Buzzer()>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	83 ec 08             	sub    esp,0x8
c0013365:	68 5c 01 00 00       	push   0x15c
c001336a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001336e:	e8 79 f1 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	83 c4 0c             	add    esp,0xc
c0013379:	c3                   	ret    

c001337a <Buzzer::stop()>:
c001337a:	83 ec 14             	sub    esp,0x14
c001337d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013381:	8b 10                	mov    edx,DWORD PTR [eax]
c0013383:	6a 00                	push   0x0
c0013385:	50                   	push   eax
c0013386:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013389:	83 c4 1c             	add    esp,0x1c
c001338c:	c3                   	ret    

c001338d <beepThread(void*)>:
c001338d:	53                   	push   ebx
c001338e:	83 ec 08             	sub    esp,0x8
c0013391:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0013396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001339a:	48                   	dec    eax
c001339b:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c00133a0:	75 01                	jne    c00133a3 <beepThread(void*)+0x16>
c00133a2:	fb                   	sti    
c00133a3:	50                   	push   eax
c00133a4:	50                   	push   eax
c00133a5:	b8 40 42 0f 00       	mov    eax,0xf4240
c00133aa:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00133b0:	52                   	push   edx
c00133b1:	50                   	push   eax
c00133b2:	e8 de a7 00 00       	call   c001db95 <nanoSleep(unsigned long long)>
c00133b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133ba:	e8 bb ff ff ff       	call   c001337a <Buzzer::stop()>
c00133bf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00133c7:	83 c4 18             	add    esp,0x18
c00133ca:	5b                   	pop    ebx
c00133cb:	e9 c1 a6 00 00       	jmp    c001da91 <blockTask(TaskState)>

c00133d0 <Buzzer::beep(int, int, bool)>:
c00133d0:	57                   	push   edi
c00133d1:	56                   	push   esi
c00133d2:	53                   	push   ebx
c00133d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00133db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133df:	52                   	push   edx
c00133e0:	52                   	push   edx
c00133e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00133e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e7:	56                   	push   esi
c00133e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	89 f8                	mov    eax,edi
c00133f0:	84 c0                	test   al,al
c00133f2:	74 1f                	je     c0013413 <Buzzer::beep(int, int, bool)+0x43>
c00133f4:	50                   	push   eax
c00133f5:	50                   	push   eax
c00133f6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00133fc:	99                   	cdq    
c00133fd:	52                   	push   edx
c00133fe:	50                   	push   eax
c00133ff:	e8 91 a7 00 00       	call   c001db95 <nanoSleep(unsigned long long)>
c0013404:	83 c4 10             	add    esp,0x10
c0013407:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001340b:	5b                   	pop    ebx
c001340c:	5e                   	pop    esi
c001340d:	5f                   	pop    edi
c001340e:	e9 67 ff ff ff       	jmp    c001337a <Buzzer::stop()>
c0013413:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013419:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001341e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013426:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001342a:	c7 44 24 14 8d 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc001338d
c0013432:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013436:	5b                   	pop    ebx
c0013437:	5e                   	pop    esi
c0013438:	5f                   	pop    edi
c0013439:	e9 58 a2 00 00       	jmp    c001d696 <Process::createThread(void (*)(void*), void*, int)>

c001343e <User::loadClockSettings(int)>:
c001343e:	53                   	push   ebx
c001343f:	83 ec 14             	sub    esp,0x14
c0013442:	68 14 01 00 00       	push   0x114
c0013447:	e8 50 c1 ff ff       	call   c000f59c <malloc>
c001344c:	83 c4 0c             	add    esp,0xc
c001344f:	89 c3                	mov    ebx,eax
c0013451:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c0013457:	68 20 a7 02 c0       	push   0xc002a720
c001345c:	50                   	push   eax
c001345d:	e8 c0 f6 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c0013462:	58                   	pop    eax
c0013463:	5a                   	pop    edx
c0013464:	6a 01                	push   0x1
c0013466:	53                   	push   ebx
c0013467:	e8 1a f7 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c001346c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001346f:	e8 70 f7 ff ff       	call   c0012be4 <File::close()>
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	85 db                	test   ebx,ebx
c0013479:	74 0f                	je     c001348a <User::loadClockSettings(int)+0x4c>
c001347b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001347d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013481:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013484:	83 c4 08             	add    esp,0x8
c0013487:	5b                   	pop    ebx
c0013488:	ff e0                	jmp    eax
c001348a:	83 c4 08             	add    esp,0x8
c001348d:	5b                   	pop    ebx
c001348e:	c3                   	ret    
c001348f:	90                   	nop

c0013490 <Clock::Clock(char const*)>:
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013497:	83 ec 08             	sub    esp,0x8
c001349a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001349e:	50                   	push   eax
c001349f:	e8 5c 07 00 00       	call   c0013c00 <Device::Device(char const*)>
c00134a4:	83 c4 10             	add    esp,0x10
c00134a7:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c00134ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b0:	89 10                	mov    DWORD PTR [eax],edx
c00134b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134c0:	90                   	nop
c00134c1:	83 c4 0c             	add    esp,0xc
c00134c4:	c3                   	ret    
c00134c5:	90                   	nop

c00134c6 <Clock::~Clock()>:
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c00134ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d2:	89 10                	mov    DWORD PTR [eax],edx
c00134d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	50                   	push   eax
c00134dc:	e8 e9 03 00 00       	call   c00138ca <Device::~Device()>
c00134e1:	83 c4 10             	add    esp,0x10
c00134e4:	90                   	nop
c00134e5:	83 c4 0c             	add    esp,0xc
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <Clock::~Clock()>:
c00134ea:	83 ec 0c             	sub    esp,0xc
c00134ed:	83 ec 0c             	sub    esp,0xc
c00134f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f4:	e8 cd ff ff ff       	call   c00134c6 <Clock::~Clock()>
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	83 ec 08             	sub    esp,0x8
c00134ff:	68 58 01 00 00       	push   0x158
c0013504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013508:	e8 df ef ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	83 c4 0c             	add    esp,0xc
c0013513:	c3                   	ret    

c0013514 <Clock::timeInSecondsLocal()>:
c0013514:	53                   	push   ebx
c0013515:	83 ec 14             	sub    esp,0x14
c0013518:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001351c:	8b 10                	mov    edx,DWORD PTR [eax]
c001351e:	50                   	push   eax
c001351f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013522:	0f b6 0d 7c d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d87c
c0013529:	03 0d 80 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d880
c001352f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013535:	89 cb                	mov    ebx,ecx
c0013537:	c1 fb 1f             	sar    ebx,0x1f
c001353a:	01 c8                	add    eax,ecx
c001353c:	11 da                	adc    edx,ebx
c001353e:	83 c4 10             	add    esp,0x10
c0013541:	31 c9                	xor    ecx,ecx
c0013543:	80 3d 7d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d87d,0x0
c001354a:	74 05                	je     c0013551 <Clock::timeInSecondsLocal()+0x3d>
c001354c:	b9 08 07 00 00       	mov    ecx,0x708
c0013551:	31 db                	xor    ebx,ebx
c0013553:	01 c8                	add    eax,ecx
c0013555:	11 da                	adc    edx,ebx
c0013557:	83 c4 08             	add    esp,0x8
c001355a:	5b                   	pop    ebx
c001355b:	c3                   	ret    

c001355c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001355c:	57                   	push   edi
c001355d:	56                   	push   esi
c001355e:	53                   	push   ebx
c001355f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013563:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013567:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013569:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001356d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013570:	0f b6 05 7c d8 02 c0 	movzx  eax,BYTE PTR ds:0xc002d87c
c0013577:	03 05 80 d8 02 c0    	add    eax,DWORD PTR ds:0xc002d880
c001357d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013583:	99                   	cdq    
c0013584:	29 c6                	sub    esi,eax
c0013586:	19 d7                	sbb    edi,edx
c0013588:	89 f0                	mov    eax,esi
c001358a:	89 fa                	mov    edx,edi
c001358c:	31 f6                	xor    esi,esi
c001358e:	80 3d 7d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d87d,0x0
c0013595:	74 05                	je     c001359c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013597:	be 08 07 00 00       	mov    esi,0x708
c001359c:	31 ff                	xor    edi,edi
c001359e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135a2:	29 f0                	sub    eax,esi
c00135a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135a8:	19 fa                	sbb    edx,edi
c00135aa:	89 d8                	mov    eax,ebx
c00135ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135b0:	5b                   	pop    ebx
c00135b1:	5e                   	pop    esi
c00135b2:	5f                   	pop    edi
c00135b3:	ff e0                	jmp    eax

c00135b5 <datetimeToSeconds(datetime_t)>:
c00135b5:	55                   	push   ebp
c00135b6:	57                   	push   edi
c00135b7:	56                   	push   esi
c00135b8:	53                   	push   ebx
c00135b9:	83 ec 14             	sub    esp,0x14
c00135bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135c0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135c4:	89 d3                	mov    ebx,edx
c00135c6:	0f b6 c6             	movzx  eax,dh
c00135c9:	c1 eb 10             	shr    ebx,0x10
c00135cc:	48                   	dec    eax
c00135cd:	66 81 eb 6c 07       	sub    bx,0x76c
c00135d2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00135d6:	0f b6 f5             	movzx  esi,ch
c00135d9:	89 cf                	mov    edi,ecx
c00135db:	6b f6 3c             	imul   esi,esi,0x3c
c00135de:	c1 ef 10             	shr    edi,0x10
c00135e1:	0f b6 c9             	movzx  ecx,cl
c00135e4:	89 f8                	mov    eax,edi
c00135e6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135ec:	0f b6 f8             	movzx  edi,al
c00135ef:	0f b6 d2             	movzx  edx,dl
c00135f2:	01 fe                	add    esi,edi
c00135f4:	01 f1                	add    ecx,esi
c00135f6:	0f b7 f3             	movzx  esi,bx
c00135f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00135fd:	c1 f9 1f             	sar    ecx,0x1f
c0013600:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013605:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013609:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001360e:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0013615:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013619:	76 29                	jbe    c0013644 <datetimeToSeconds(datetime_t)+0x8f>
c001361b:	f6 c3 03             	test   bl,0x3
c001361e:	75 24                	jne    c0013644 <datetimeToSeconds(datetime_t)+0x8f>
c0013620:	31 d2                	xor    edx,edx
c0013622:	bf 64 00 00 00       	mov    edi,0x64
c0013627:	89 d8                	mov    eax,ebx
c0013629:	66 f7 f7             	div    di
c001362c:	66 85 d2             	test   dx,dx
c001362f:	75 12                	jne    c0013643 <datetimeToSeconds(datetime_t)+0x8e>
c0013631:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013637:	bf 90 01 00 00       	mov    edi,0x190
c001363c:	99                   	cdq    
c001363d:	f7 ff                	idiv   edi
c001363f:	85 d2                	test   edx,edx
c0013641:	75 01                	jne    c0013644 <datetimeToSeconds(datetime_t)+0x8f>
c0013643:	41                   	inc    ecx
c0013644:	66 83 fb 46          	cmp    bx,0x46
c0013648:	76 45                	jbe    c001368f <datetimeToSeconds(datetime_t)+0xda>
c001364a:	bb 46 00 00 00       	mov    ebx,0x46
c001364f:	bf 64 00 00 00       	mov    edi,0x64
c0013654:	bd 90 01 00 00       	mov    ebp,0x190
c0013659:	b8 6d 01 00 00       	mov    eax,0x16d
c001365e:	f6 c3 03             	test   bl,0x3
c0013661:	75 23                	jne    c0013686 <datetimeToSeconds(datetime_t)+0xd1>
c0013663:	89 d8                	mov    eax,ebx
c0013665:	99                   	cdq    
c0013666:	f7 ff                	idiv   edi
c0013668:	b8 6e 01 00 00       	mov    eax,0x16e
c001366d:	85 d2                	test   edx,edx
c001366f:	75 15                	jne    c0013686 <datetimeToSeconds(datetime_t)+0xd1>
c0013671:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013677:	99                   	cdq    
c0013678:	f7 fd                	idiv   ebp
c001367a:	83 fa 01             	cmp    edx,0x1
c001367d:	19 c0                	sbb    eax,eax
c001367f:	f7 d0                	not    eax
c0013681:	05 6e 01 00 00       	add    eax,0x16e
c0013686:	01 c1                	add    ecx,eax
c0013688:	43                   	inc    ebx
c0013689:	39 f3                	cmp    ebx,esi
c001368b:	7c cc                	jl     c0013659 <datetimeToSeconds(datetime_t)+0xa4>
c001368d:	eb 35                	jmp    c00136c4 <datetimeToSeconds(datetime_t)+0x10f>
c001368f:	74 33                	je     c00136c4 <datetimeToSeconds(datetime_t)+0x10f>
c0013691:	b8 45 00 00 00       	mov    eax,0x45
c0013696:	89 c2                	mov    edx,eax
c0013698:	83 e2 03             	and    edx,0x3
c001369b:	39 f0                	cmp    eax,esi
c001369d:	7e 0f                	jle    c00136ae <datetimeToSeconds(datetime_t)+0xf9>
c001369f:	83 fa 01             	cmp    edx,0x1
c00136a2:	19 d2                	sbb    edx,edx
c00136a4:	48                   	dec    eax
c00136a5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136ac:	eb e8                	jmp    c0013696 <datetimeToSeconds(datetime_t)+0xe1>
c00136ae:	b8 6d 01 00 00       	mov    eax,0x16d
c00136b3:	85 d2                	test   edx,edx
c00136b5:	75 0b                	jne    c00136c2 <datetimeToSeconds(datetime_t)+0x10d>
c00136b7:	66 83 fb 01          	cmp    bx,0x1
c00136bb:	19 c0                	sbb    eax,eax
c00136bd:	05 6e 01 00 00       	add    eax,0x16e
c00136c2:	29 c1                	sub    ecx,eax
c00136c4:	b8 80 51 01 00       	mov    eax,0x15180
c00136c9:	f7 e9                	imul   ecx
c00136cb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00136cf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00136d3:	83 c4 14             	add    esp,0x14
c00136d6:	5b                   	pop    ebx
c00136d7:	5e                   	pop    esi
c00136d8:	5f                   	pop    edi
c00136d9:	5d                   	pop    ebp
c00136da:	c3                   	ret    
c00136db:	90                   	nop

c00136dc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00136dc:	57                   	push   edi
c00136dd:	56                   	push   esi
c00136de:	53                   	push   ebx
c00136df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00136e5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00136e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f0:	e8 c0 fe ff ff       	call   c00135b5 <datetimeToSeconds(datetime_t)>
c00136f5:	59                   	pop    ecx
c00136f6:	0f b6 0d 7c d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d87c
c00136fd:	5b                   	pop    ebx
c00136fe:	03 0d 80 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d880
c0013704:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001370a:	89 cb                	mov    ebx,ecx
c001370c:	c1 fb 1f             	sar    ebx,0x1f
c001370f:	29 c8                	sub    eax,ecx
c0013711:	19 da                	sbb    edx,ebx
c0013713:	31 c9                	xor    ecx,ecx
c0013715:	80 3d 7d d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d87d,0x0
c001371c:	74 05                	je     c0013723 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001371e:	b9 08 07 00 00       	mov    ecx,0x708
c0013723:	31 db                	xor    ebx,ebx
c0013725:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013729:	29 c8                	sub    eax,ecx
c001372b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001372f:	19 da                	sbb    edx,ebx
c0013731:	89 f8                	mov    eax,edi
c0013733:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013737:	5b                   	pop    ebx
c0013738:	5e                   	pop    esi
c0013739:	5f                   	pop    edi
c001373a:	ff e0                	jmp    eax

c001373c <secondsToDatetime(unsigned long long)>:
c001373c:	55                   	push   ebp
c001373d:	57                   	push   edi
c001373e:	56                   	push   esi
c001373f:	53                   	push   ebx
c0013740:	83 ec 1c             	sub    esp,0x1c
c0013743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013747:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001374b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001374f:	6a 00                	push   0x0
c0013751:	68 80 51 01 00       	push   0x15180
c0013756:	55                   	push   ebp
c0013757:	57                   	push   edi
c0013758:	e8 a7 2e 01 00       	call   c0026604 <__udivdi3>
c001375d:	83 c4 10             	add    esp,0x10
c0013760:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013766:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001376a:	6a 00                	push   0x0
c001376c:	68 80 51 01 00       	push   0x15180
c0013771:	55                   	push   ebp
c0013772:	57                   	push   edi
c0013773:	bf 10 0e 00 00       	mov    edi,0xe10
c0013778:	e8 87 2f 01 00       	call   c0026704 <__umoddi3>
c001377d:	83 c4 10             	add    esp,0x10
c0013780:	99                   	cdq    
c0013781:	f7 ff                	idiv   edi
c0013783:	bf 3c 00 00 00       	mov    edi,0x3c
c0013788:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001378b:	89 d0                	mov    eax,edx
c001378d:	99                   	cdq    
c001378e:	f7 ff                	idiv   edi
c0013790:	85 db                	test   ebx,ebx
c0013792:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013795:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013798:	79 11                	jns    c00137ab <secondsToDatetime(unsigned long long)+0x6f>
c001379a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001379e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137a4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137a9:	eb 07                	jmp    c00137b2 <secondsToDatetime(unsigned long long)+0x76>
c00137ab:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137b0:	89 d8                	mov    eax,ebx
c00137b2:	bf b4 05 00 00       	mov    edi,0x5b4
c00137b7:	99                   	cdq    
c00137b8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137bd:	f7 f9                	idiv   ecx
c00137bf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137c8:	31 d2                	xor    edx,edx
c00137ca:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00137d2:	01 c3                	add    ebx,eax
c00137d4:	89 d8                	mov    eax,ebx
c00137d6:	f7 f1                	div    ecx
c00137d8:	31 d2                	xor    edx,edx
c00137da:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00137dd:	89 d8                	mov    eax,ebx
c00137df:	f7 f7                	div    edi
c00137e1:	31 d2                	xor    edx,edx
c00137e3:	29 c1                	sub    ecx,eax
c00137e5:	89 d8                	mov    eax,ebx
c00137e7:	f7 f5                	div    ebp
c00137e9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00137ee:	29 c1                	sub    ecx,eax
c00137f0:	31 d2                	xor    edx,edx
c00137f2:	89 c8                	mov    eax,ecx
c00137f4:	f7 f5                	div    ebp
c00137f6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00137fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ff:	31 d2                	xor    edx,edx
c0013801:	89 c8                	mov    eax,ecx
c0013803:	f7 f5                	div    ebp
c0013805:	31 d2                	xor    edx,edx
c0013807:	01 c3                	add    ebx,eax
c0013809:	89 c8                	mov    eax,ecx
c001380b:	f7 f7                	div    edi
c001380d:	bf 99 00 00 00       	mov    edi,0x99
c0013812:	29 c3                	sub    ebx,eax
c0013814:	31 d2                	xor    edx,edx
c0013816:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001381e:	29 c3                	sub    ebx,eax
c0013820:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013823:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013826:	bb 05 00 00 00       	mov    ebx,0x5
c001382b:	83 c1 02             	add    ecx,0x2
c001382e:	89 c8                	mov    eax,ecx
c0013830:	f7 f7                	div    edi
c0013832:	31 d2                	xor    edx,edx
c0013834:	89 c7                	mov    edi,eax
c0013836:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001383c:	83 c0 02             	add    eax,0x2
c001383f:	f7 f3                	div    ebx
c0013841:	89 eb                	mov    ebx,ebp
c0013843:	29 c3                	sub    ebx,eax
c0013845:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001384b:	88 1e                	mov    BYTE PTR [esi],bl
c001384d:	19 c0                	sbb    eax,eax
c001384f:	31 d2                	xor    edx,edx
c0013851:	83 e0 0c             	and    eax,0xc
c0013854:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013858:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013860:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013864:	83 f9 01             	cmp    ecx,0x1
c0013867:	0f 96 c2             	setbe  dl
c001386a:	41                   	inc    ecx
c001386b:	01 d0                	add    eax,edx
c001386d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013870:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013874:	83 c4 1c             	add    esp,0x1c
c0013877:	89 f0                	mov    eax,esi
c0013879:	5b                   	pop    ebx
c001387a:	5e                   	pop    esi
c001387b:	5f                   	pop    edi
c001387c:	5d                   	pop    ebp
c001387d:	c2 04 00             	ret    0x4

c0013880 <Clock::timeInDatetimeLocal()>:
c0013880:	53                   	push   ebx
c0013881:	83 ec 14             	sub    esp,0x14
c0013884:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013888:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001388c:	e8 83 fc ff ff       	call   c0013514 <Clock::timeInSecondsLocal()>
c0013891:	83 c4 0c             	add    esp,0xc
c0013894:	52                   	push   edx
c0013895:	50                   	push   eax
c0013896:	53                   	push   ebx
c0013897:	e8 a0 fe ff ff       	call   c001373c <secondsToDatetime(unsigned long long)>
c001389c:	89 d8                	mov    eax,ebx
c001389e:	83 c4 14             	add    esp,0x14
c00138a1:	5b                   	pop    ebx
c00138a2:	c2 04 00             	ret    0x4
c00138a5:	90                   	nop

c00138a6 <Device::hibernate()>:
c00138a6:	c3                   	ret    
c00138a7:	90                   	nop

c00138a8 <Device::wake()>:
c00138a8:	c3                   	ret    
c00138a9:	90                   	nop

c00138aa <Device::detect()>:
c00138aa:	c3                   	ret    
c00138ab:	90                   	nop

c00138ac <Device::disableLegacy()>:
c00138ac:	c3                   	ret    
c00138ad:	90                   	nop

c00138ae <Device::powerSaving(PowerSavingLevel)>:
c00138ae:	c3                   	ret    
c00138af:	90                   	nop

c00138b0 <DriverlessDevice::close(int, int, void*)>:
c00138b0:	31 c0                	xor    eax,eax
c00138b2:	c3                   	ret    
c00138b3:	90                   	nop

c00138b4 <DriverlessDevice::detect()>:
c00138b4:	c3                   	ret    
c00138b5:	90                   	nop

c00138b6 <DriverlessDevice::open(int, int, void*)>:
c00138b6:	83 ec 18             	sub    esp,0x18
c00138b9:	68 b0 a7 02 c0       	push   0xc002a7b0
c00138be:	e8 6c 64 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c00138c3:	83 c8 ff             	or     eax,0xffffffff
c00138c6:	83 c4 1c             	add    esp,0x1c
c00138c9:	c3                   	ret    

c00138ca <Device::~Device()>:
c00138ca:	ba 10 a8 02 c0       	mov    edx,0xc002a810
c00138cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138d3:	89 10                	mov    DWORD PTR [eax],edx
c00138d5:	90                   	nop
c00138d6:	c3                   	ret    
c00138d7:	90                   	nop

c00138d8 <Device::~Device()>:
c00138d8:	83 ec 0c             	sub    esp,0xc
c00138db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00138df:	e8 e6 ff ff ff       	call   c00138ca <Device::~Device()>
c00138e4:	83 c4 04             	add    esp,0x4
c00138e7:	83 ec 08             	sub    esp,0x8
c00138ea:	68 58 01 00 00       	push   0x158
c00138ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138f3:	e8 f4 eb ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	83 c4 0c             	add    esp,0xc
c00138fe:	c3                   	ret    
c00138ff:	90                   	nop

c0013900 <Device::findAndLoadDriver()>:
c0013900:	c7 44 24 04 ce a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a7ce
c0013908:	e9 b7 ec ff ff       	jmp    c00125c4 <Dbg::kprintf(char const*, ...)>
c001390d:	90                   	nop

c001390e <Device::preOpenPCI(PCIDeviceInfo)>:
c001390e:	57                   	push   edi
c001390f:	b9 09 00 00 00       	mov    ecx,0x9
c0013914:	56                   	push   esi
c0013915:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013919:	8d 74 24 10          	lea    esi,[esp+0x10]
c001391d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013927:	81 c7 18 01 00 00    	add    edi,0x118
c001392d:	fc                   	cld    
c001392e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013930:	5e                   	pop    esi
c0013931:	5f                   	pop    edi
c0013932:	c3                   	ret    
c0013933:	90                   	nop

c0013934 <Device::preOpenACPI(void*, char*, char*)>:
c0013934:	57                   	push   edi
c0013935:	b9 1e 00 00 00       	mov    ecx,0x1e
c001393a:	56                   	push   esi
c001393b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001393f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013943:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001394d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013953:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013959:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001395d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001395f:	b9 0e 00 00 00       	mov    ecx,0xe
c0013964:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001396a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001396e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013970:	5e                   	pop    esi
c0013971:	5f                   	pop    edi
c0013972:	c3                   	ret    
c0013973:	90                   	nop

c0013974 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013978:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001397d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013984:	75 0b                	jne    c0013991 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013986:	8b 00                	mov    eax,DWORD PTR [eax]
c0013988:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001398c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001398f:	eb 1e                	jmp    c00139af <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013991:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0013996:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001399c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139ac:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139af:	ff e0                	jmp    eax
c00139b1:	90                   	nop

c00139b2 <Device::getParent()>:
c00139b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00139bc:	c3                   	ret    
c00139bd:	90                   	nop

c00139be <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139c7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139ce:	75 0b                	jne    c00139db <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00139d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00139d2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139d6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00139d9:	eb 1e                	jmp    c00139f9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00139db:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00139e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139e6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139ee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139f6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00139f9:	ff e0                	jmp    eax
c00139fb:	90                   	nop

c00139fc <Device::addChild(Device*)>:
c00139fc:	53                   	push   ebx
c00139fd:	83 ec 08             	sub    esp,0x8
c0013a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a08:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a0e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a16:	85 d2                	test   edx,edx
c0013a18:	74 04                	je     c0013a1e <Device::addChild(Device*)+0x22>
c0013a1a:	89 d3                	mov    ebx,edx
c0013a1c:	eb f6                	jmp    c0013a14 <Device::addChild(Device*)+0x18>
c0013a1e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a21:	83 ec 0c             	sub    esp,0xc
c0013a24:	6a 08                	push   0x8
c0013a26:	e8 71 bb ff ff       	call   c000f59c <malloc>
c0013a2b:	89 03                	mov    DWORD PTR [ebx],eax
c0013a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a3a:	83 c4 18             	add    esp,0x18
c0013a3d:	5b                   	pop    ebx
c0013a3e:	c3                   	ret    
c0013a3f:	90                   	nop

c0013a40 <Device::removeAllChildren()>:
c0013a40:	56                   	push   esi
c0013a41:	53                   	push   ebx
c0013a42:	52                   	push   edx
c0013a43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a47:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a50:	74 17                	je     c0013a69 <Device::removeAllChildren()+0x29>
c0013a52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a55:	85 c0                	test   eax,eax
c0013a57:	74 0c                	je     c0013a65 <Device::removeAllChildren()+0x25>
c0013a59:	83 ec 0c             	sub    esp,0xc
c0013a5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a5e:	50                   	push   eax
c0013a5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a62:	83 c4 10             	add    esp,0x10
c0013a65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a67:	eb e4                	jmp    c0013a4d <Device::removeAllChildren()+0xd>
c0013a69:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a82:	58                   	pop    eax
c0013a83:	5b                   	pop    ebx
c0013a84:	5e                   	pop    esi
c0013a85:	c3                   	ret    

c0013a86 <Device::hibernateAll()>:
c0013a86:	53                   	push   ebx
c0013a87:	83 ec 14             	sub    esp,0x14
c0013a8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a90:	53                   	push   ebx
c0013a91:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013a94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a9a:	83 c4 10             	add    esp,0x10
c0013a9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aa0:	74 0f                	je     c0013ab1 <Device::hibernateAll()+0x2b>
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013aa8:	e8 d9 ff ff ff       	call   c0013a86 <Device::hibernateAll()>
c0013aad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013aaf:	eb e9                	jmp    c0013a9a <Device::hibernateAll()+0x14>
c0013ab1:	83 c4 08             	add    esp,0x8
c0013ab4:	5b                   	pop    ebx
c0013ab5:	c3                   	ret    

c0013ab6 <Device::wakeAll()>:
c0013ab6:	53                   	push   ebx
c0013ab7:	83 ec 14             	sub    esp,0x14
c0013aba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013abe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ac0:	53                   	push   ebx
c0013ac1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ac4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ad0:	74 0f                	je     c0013ae1 <Device::wakeAll()+0x2b>
c0013ad2:	83 ec 0c             	sub    esp,0xc
c0013ad5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ad8:	e8 d9 ff ff ff       	call   c0013ab6 <Device::wakeAll()>
c0013add:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013adf:	eb e9                	jmp    c0013aca <Device::wakeAll()+0x14>
c0013ae1:	83 c4 08             	add    esp,0x8
c0013ae4:	5b                   	pop    ebx
c0013ae5:	c3                   	ret    

c0013ae6 <Device::detectAll()>:
c0013ae6:	53                   	push   ebx
c0013ae7:	83 ec 14             	sub    esp,0x14
c0013aea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013aee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013af0:	53                   	push   ebx
c0013af1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013af4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013afa:	83 c4 10             	add    esp,0x10
c0013afd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b00:	74 0f                	je     c0013b11 <Device::detectAll()+0x2b>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b08:	e8 d9 ff ff ff       	call   c0013ae6 <Device::detectAll()>
c0013b0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b0f:	eb e9                	jmp    c0013afa <Device::detectAll()+0x14>
c0013b11:	83 c4 08             	add    esp,0x8
c0013b14:	5b                   	pop    ebx
c0013b15:	c3                   	ret    

c0013b16 <Device::disableLegacyAll()>:
c0013b16:	53                   	push   ebx
c0013b17:	83 ec 14             	sub    esp,0x14
c0013b1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b20:	53                   	push   ebx
c0013b21:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b24:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b30:	74 0f                	je     c0013b41 <Device::disableLegacyAll()+0x2b>
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b38:	e8 d9 ff ff ff       	call   c0013b16 <Device::disableLegacyAll()>
c0013b3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b3f:	eb e9                	jmp    c0013b2a <Device::disableLegacyAll()+0x14>
c0013b41:	83 c4 08             	add    esp,0x8
c0013b44:	5b                   	pop    ebx
c0013b45:	c3                   	ret    

c0013b46 <Device::loadDriversForAll()>:
c0013b46:	53                   	push   ebx
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b4e:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013b55:	75 0c                	jne    c0013b63 <Device::loadDriversForAll()+0x1d>
c0013b57:	83 ec 0c             	sub    esp,0xc
c0013b5a:	53                   	push   ebx
c0013b5b:	e8 a0 fd ff ff       	call   c0013900 <Device::findAndLoadDriver()>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b6c:	74 12                	je     c0013b80 <Device::loadDriversForAll()+0x3a>
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b74:	e8 cd ff ff ff       	call   c0013b46 <Device::loadDriversForAll()>
c0013b79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b7b:	83 c4 10             	add    esp,0x10
c0013b7e:	eb e9                	jmp    c0013b69 <Device::loadDriversForAll()+0x23>
c0013b80:	83 c4 08             	add    esp,0x8
c0013b83:	5b                   	pop    ebx
c0013b84:	c3                   	ret    
c0013b85:	90                   	nop

c0013b86 <Device::closeAll()>:
c0013b86:	53                   	push   ebx
c0013b87:	83 ec 08             	sub    esp,0x8
c0013b8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b90:	6a 00                	push   0x0
c0013b92:	6a 00                	push   0x0
c0013b94:	6a 00                	push   0x0
c0013b96:	53                   	push   ebx
c0013b97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba0:	83 c4 10             	add    esp,0x10
c0013ba3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ba6:	74 0f                	je     c0013bb7 <Device::closeAll()+0x31>
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bae:	e8 d3 ff ff ff       	call   c0013b86 <Device::closeAll()>
c0013bb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb5:	eb e9                	jmp    c0013ba0 <Device::closeAll()+0x1a>
c0013bb7:	83 c4 08             	add    esp,0x8
c0013bba:	5b                   	pop    ebx
c0013bbb:	c3                   	ret    

c0013bbc <Device::powerSavingAll(PowerSavingLevel)>:
c0013bbc:	56                   	push   esi
c0013bbd:	53                   	push   ebx
c0013bbe:	83 ec 0c             	sub    esp,0xc
c0013bc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bc5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bcb:	56                   	push   esi
c0013bcc:	53                   	push   ebx
c0013bcd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013bd0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bdc:	74 0f                	je     c0013bed <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013bde:	52                   	push   edx
c0013bdf:	52                   	push   edx
c0013be0:	56                   	push   esi
c0013be1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013be4:	e8 d3 ff ff ff       	call   c0013bbc <Device::powerSavingAll(PowerSavingLevel)>
c0013be9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013beb:	eb e9                	jmp    c0013bd6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013bed:	58                   	pop    eax
c0013bee:	5b                   	pop    ebx
c0013bef:	5e                   	pop    esi
c0013bf0:	c3                   	ret    
c0013bf1:	90                   	nop

c0013bf2 <Device::setName(char const*)>:
c0013bf2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013bfa:	e9 0d cc fe ff       	jmp    c000080c <strcpy>
c0013bff:	90                   	nop

c0013c00 <Device::Device(char const*)>:
c0013c00:	83 ec 1c             	sub    esp,0x1c
c0013c03:	ba 10 a8 02 c0       	mov    edx,0xc002a810
c0013c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c0c:	89 10                	mov    DWORD PTR [eax],edx
c0013c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c12:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c20:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c2e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c3c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c46:	83 ec 08             	sub    esp,0x8
c0013c49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c51:	e8 9c ff ff ff       	call   c0013bf2 <Device::setName(char const*)>
c0013c56:	83 c4 10             	add    esp,0x10
c0013c59:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c61:	83 ec 0c             	sub    esp,0xc
c0013c64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c68:	e8 2f b9 ff ff       	call   c000f59c <malloc>
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c81:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c9b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ca1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cac:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cde:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cec:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013cf6:	90                   	nop
c0013cf7:	83 c4 1c             	add    esp,0x1c
c0013cfa:	c3                   	ret    
c0013cfb:	90                   	nop

c0013cfc <Device::getName()>:
c0013cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d00:	05 d0 00 00 00       	add    eax,0xd0
c0013d05:	c3                   	ret    

c0013d06 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d06:	83 ec 0c             	sub    esp,0xc
c0013d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0d:	83 ec 08             	sub    esp,0x8
c0013d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d14:	50                   	push   eax
c0013d15:	e8 e6 fe ff ff       	call   c0013c00 <Device::Device(char const*)>
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c0013d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d26:	89 10                	mov    DWORD PTR [eax],edx
c0013d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d36:	90                   	nop
c0013d37:	83 c4 0c             	add    esp,0xc
c0013d3a:	c3                   	ret    
c0013d3b:	90                   	nop

c0013d3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d3c:	57                   	push   edi
c0013d3d:	56                   	push   esi
c0013d3e:	53                   	push   ebx
c0013d3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d47:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d4b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d51:	75 0c                	jne    c0013d5f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d53:	52                   	push   edx
c0013d54:	52                   	push   edx
c0013d55:	53                   	push   ebx
c0013d56:	56                   	push   esi
c0013d57:	e8 e4 47 01 00       	call   c0028540 <LinkedList<Device>::addElement(Device*)>
c0013d5c:	83 c4 10             	add    esp,0x10
c0013d5f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d65:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d68:	74 12                	je     c0013d7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d6a:	50                   	push   eax
c0013d6b:	57                   	push   edi
c0013d6c:	56                   	push   esi
c0013d6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d70:	e8 c7 ff ff ff       	call   c0013d3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	eb e9                	jmp    c0013d65 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d7c:	5b                   	pop    ebx
c0013d7d:	5e                   	pop    esi
c0013d7e:	5f                   	pop    edi
c0013d7f:	c3                   	ret    

c0013d80 <getDevicesOfType(DeviceType)>:
c0013d80:	53                   	push   ebx
c0013d81:	83 ec 14             	sub    esp,0x14
c0013d84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d88:	53                   	push   ebx
c0013d89:	e8 8e 48 01 00       	call   c002861c <LinkedList<Device>::LinkedList()>
c0013d8e:	83 c4 0c             	add    esp,0xc
c0013d91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d95:	53                   	push   ebx
c0013d96:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c0013d9c:	e8 9b ff ff ff       	call   c0013d3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013da1:	89 d8                	mov    eax,ebx
c0013da3:	83 c4 18             	add    esp,0x18
c0013da6:	5b                   	pop    ebx
c0013da7:	c2 04 00             	ret    0x4

c0013daa <HardDiskController::HardDiskController(char const*)>:
c0013daa:	83 ec 0c             	sub    esp,0xc
c0013dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db1:	83 ec 08             	sub    esp,0x8
c0013db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013db8:	50                   	push   eax
c0013db9:	e8 42 fe ff ff       	call   c0013c00 <Device::Device(char const*)>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0013dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dca:	89 10                	mov    DWORD PTR [eax],edx
c0013dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013dda:	90                   	nop
c0013ddb:	83 c4 0c             	add    esp,0xc
c0013dde:	c3                   	ret    
c0013ddf:	90                   	nop

c0013de0 <HardDiskController::~HardDiskController()>:
c0013de0:	83 ec 0c             	sub    esp,0xc
c0013de3:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0013de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dec:	89 10                	mov    DWORD PTR [eax],edx
c0013dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df2:	83 ec 0c             	sub    esp,0xc
c0013df5:	50                   	push   eax
c0013df6:	e8 cf fa ff ff       	call   c00138ca <Device::~Device()>
c0013dfb:	83 c4 10             	add    esp,0x10
c0013dfe:	90                   	nop
c0013dff:	83 c4 0c             	add    esp,0xc
c0013e02:	c3                   	ret    
c0013e03:	90                   	nop

c0013e04 <HardDiskController::~HardDiskController()>:
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	83 ec 0c             	sub    esp,0xc
c0013e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e0e:	e8 cd ff ff ff       	call   c0013de0 <HardDiskController::~HardDiskController()>
c0013e13:	83 c4 10             	add    esp,0x10
c0013e16:	83 ec 08             	sub    esp,0x8
c0013e19:	68 58 01 00 00       	push   0x158
c0013e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e22:	e8 c5 e6 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0013e27:	83 c4 10             	add    esp,0x10
c0013e2a:	83 c4 0c             	add    esp,0xc
c0013e2d:	c3                   	ret    

c0013e2e <PhysicalDisk::eject()>:
c0013e2e:	83 c8 ff             	or     eax,0xffffffff
c0013e31:	c3                   	ret    

c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e39:	83 ec 08             	sub    esp,0x8
c0013e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e40:	50                   	push   eax
c0013e41:	e8 ba fd ff ff       	call   c0013c00 <Device::Device(char const*)>
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	ba 94 a8 02 c0       	mov    edx,0xc002a894
c0013e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e52:	89 10                	mov    DWORD PTR [eax],edx
c0013e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e58:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e63:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e94:	90                   	nop
c0013e95:	83 c4 0c             	add    esp,0xc
c0013e98:	c3                   	ret    
c0013e99:	90                   	nop

c0013e9a <PhysicalDisk::startCache()>:
c0013e9a:	56                   	push   esi
c0013e9b:	53                   	push   ebx
c0013e9c:	83 ec 10             	sub    esp,0x10
c0013e9f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ea3:	6a 44                	push   0x44
c0013ea5:	e8 f2 b6 ff ff       	call   c000f59c <malloc>
c0013eaa:	89 c6                	mov    esi,eax
c0013eac:	58                   	pop    eax
c0013ead:	5a                   	pop    edx
c0013eae:	53                   	push   ebx
c0013eaf:	56                   	push   esi
c0013eb0:	e8 71 28 00 00       	call   c0016726 <VCache::VCache(PhysicalDisk*)>
c0013eb5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ebb:	83 c4 14             	add    esp,0x14
c0013ebe:	5b                   	pop    ebx
c0013ebf:	5e                   	pop    esi
c0013ec0:	c3                   	ret    
c0013ec1:	90                   	nop

c0013ec2 <PhysicalDisk::~PhysicalDisk()>:
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	ba 94 a8 02 c0       	mov    edx,0xc002a894
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	89 10                	mov    DWORD PTR [eax],edx
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	83 ec 0c             	sub    esp,0xc
c0013ed7:	50                   	push   eax
c0013ed8:	e8 ed f9 ff ff       	call   c00138ca <Device::~Device()>
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	90                   	nop
c0013ee1:	83 c4 0c             	add    esp,0xc
c0013ee4:	c3                   	ret    
c0013ee5:	90                   	nop

c0013ee6 <PhysicalDisk::~PhysicalDisk()>:
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	83 ec 0c             	sub    esp,0xc
c0013eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef0:	e8 cd ff ff ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c0013ef5:	83 c4 10             	add    esp,0x10
c0013ef8:	83 ec 08             	sub    esp,0x8
c0013efb:	68 6c 01 00 00       	push   0x16c
c0013f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f04:	e8 e3 e5 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0013f09:	83 c4 10             	add    esp,0x10
c0013f0c:	83 c4 0c             	add    esp,0xc
c0013f0f:	c3                   	ret    

c0013f10 <FPU::FPU(char const*)>:
c0013f10:	83 ec 0c             	sub    esp,0xc
c0013f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f17:	83 ec 08             	sub    esp,0x8
c0013f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1e:	50                   	push   eax
c0013f1f:	e8 dc fc ff ff       	call   c0013c00 <Device::Device(char const*)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	ba d8 a8 02 c0       	mov    edx,0xc002a8d8
c0013f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f30:	89 10                	mov    DWORD PTR [eax],edx
c0013f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f36:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f40:	90                   	nop
c0013f41:	83 c4 0c             	add    esp,0xc
c0013f44:	c3                   	ret    
c0013f45:	90                   	nop

c0013f46 <FPU::~FPU()>:
c0013f46:	83 ec 0c             	sub    esp,0xc
c0013f49:	ba d8 a8 02 c0       	mov    edx,0xc002a8d8
c0013f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f52:	89 10                	mov    DWORD PTR [eax],edx
c0013f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	50                   	push   eax
c0013f5c:	e8 69 f9 ff ff       	call   c00138ca <Device::~Device()>
c0013f61:	83 c4 10             	add    esp,0x10
c0013f64:	90                   	nop
c0013f65:	83 c4 0c             	add    esp,0xc
c0013f68:	c3                   	ret    
c0013f69:	90                   	nop

c0013f6a <FPU::~FPU()>:
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	83 ec 0c             	sub    esp,0xc
c0013f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f74:	e8 cd ff ff ff       	call   c0013f46 <FPU::~FPU()>
c0013f79:	83 c4 10             	add    esp,0x10
c0013f7c:	83 ec 08             	sub    esp,0x8
c0013f7f:	68 58 01 00 00       	push   0x158
c0013f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f88:	e8 5f e5 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	83 c4 0c             	add    esp,0xc
c0013f93:	c3                   	ret    

c0013f94 <setupFPU()>:
c0013f94:	53                   	push   ebx
c0013f95:	83 ec 08             	sub    esp,0x8
c0013f98:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0013f9e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fa5:	74 19                	je     c0013fc0 <setupFPU()+0x2c>
c0013fa7:	83 ec 0c             	sub    esp,0xc
c0013faa:	68 58 01 00 00       	push   0x158
c0013faf:	e8 e8 b5 ff ff       	call   c000f59c <malloc>
c0013fb4:	89 c3                	mov    ebx,eax
c0013fb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fb9:	e8 c8 11 01 00       	call   c0025186 <AVX::AVX()>
c0013fbe:	eb 5b                	jmp    c001401b <setupFPU()+0x87>
c0013fc0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fc6:	84 c0                	test   al,al
c0013fc8:	79 19                	jns    c0013fe3 <setupFPU()+0x4f>
c0013fca:	83 ec 0c             	sub    esp,0xc
c0013fcd:	68 58 01 00 00       	push   0x158
c0013fd2:	e8 c5 b5 ff ff       	call   c000f59c <malloc>
c0013fd7:	89 c3                	mov    ebx,eax
c0013fd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fdc:	e8 cb 12 01 00       	call   c00252ac <SSE::SSE()>
c0013fe1:	eb 38                	jmp    c001401b <setupFPU()+0x87>
c0013fe3:	a8 20                	test   al,0x20
c0013fe5:	74 19                	je     c0014000 <setupFPU()+0x6c>
c0013fe7:	83 ec 0c             	sub    esp,0xc
c0013fea:	68 58 01 00 00       	push   0x158
c0013fef:	e8 a8 b5 ff ff       	call   c000f59c <malloc>
c0013ff4:	89 c3                	mov    ebx,eax
c0013ff6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ff9:	e8 18 12 01 00       	call   c0025216 <MMX::MMX()>
c0013ffe:	eb 1b                	jmp    c001401b <setupFPU()+0x87>
c0014000:	a8 10                	test   al,0x10
c0014002:	74 1c                	je     c0014020 <setupFPU()+0x8c>
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	68 58 01 00 00       	push   0x158
c001400c:	e8 8b b5 ff ff       	call   c000f59c <malloc>
c0014011:	89 c3                	mov    ebx,eax
c0014013:	89 04 24             	mov    DWORD PTR [esp],eax
c0014016:	e8 1f 13 01 00       	call   c002533a <x87::x87()>
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	eb 24                	jmp    c0014044 <setupFPU()+0xb0>
c0014020:	83 e0 ef             	and    eax,0xffffffef
c0014023:	83 ec 0c             	sub    esp,0xc
c0014026:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001402c:	68 c4 a8 02 c0       	push   0xc002a8c4
c0014031:	e8 8e e5 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014036:	0f 20 c0             	mov    eax,cr0
c0014039:	83 c8 04             	or     eax,0x4
c001403c:	0f 22 c0             	mov    cr0,eax
c001403f:	31 db                	xor    ebx,ebx
c0014041:	83 c4 10             	add    esp,0x10
c0014044:	89 d8                	mov    eax,ebx
c0014046:	83 c4 08             	add    esp,0x8
c0014049:	5b                   	pop    ebx
c001404a:	c3                   	ret    
c001404b:	90                   	nop

c001404c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001404c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014054:	c1 e0 04             	shl    eax,0x4
c0014057:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001405b:	8d 50 10             	lea    edx,[eax+0x10]
c001405e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014064:	74 08                	je     c001406e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014066:	83 c0 04             	add    eax,0x4
c0014069:	39 d0                	cmp    eax,edx
c001406b:	75 f1                	jne    c001405e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001406d:	c3                   	ret    
c001406e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014078:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014082:	eb e2                	jmp    c0014066 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014084 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014084:	57                   	push   edi
c0014085:	31 c0                	xor    eax,eax
c0014087:	56                   	push   esi
c0014088:	53                   	push   ebx
c0014089:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001408d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014091:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014095:	89 da                	mov    edx,ebx
c0014097:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001409b:	c1 e2 04             	shl    edx,0x4
c001409e:	01 ca                	add    edx,ecx
c00140a0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140a8:	74 16                	je     c00140c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140aa:	40                   	inc    eax
c00140ab:	83 f8 04             	cmp    eax,0x4
c00140ae:	75 f0                	jne    c00140a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140b0:	c7 44 24 10 08 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a908
c00140b8:	5b                   	pop    ebx
c00140b9:	5e                   	pop    esi
c00140ba:	5f                   	pop    edi
c00140bb:	e9 6f 5c 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>
c00140c0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140c3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140c6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140cc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140d2:	5b                   	pop    ebx
c00140d3:	5e                   	pop    esi
c00140d4:	5f                   	pop    edi
c00140d5:	c3                   	ret    

c00140d6 <doubleFault(regs*, void*)>:
c00140d6:	55                   	push   ebp
c00140d7:	89 e5                	mov    ebp,esp
c00140d9:	83 ec 08             	sub    esp,0x8
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	68 15 a9 02 c0       	push   0xc002a915
c00140e4:	e8 46 5c 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c00140e9:	83 c4 10             	add    esp,0x10
c00140ec:	90                   	nop
c00140ed:	c9                   	leave  
c00140ee:	c3                   	ret    
c00140ef:	90                   	nop

c00140f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00140f0:	56                   	push   esi
c00140f1:	53                   	push   ebx
c00140f2:	50                   	push   eax
c00140f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140fb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014100:	75 35                	jne    c0014137 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014102:	8d 43 20             	lea    eax,[ebx+0x20]
c0014105:	31 d2                	xor    edx,edx
c0014107:	89 c1                	mov    ecx,eax
c0014109:	c1 e1 04             	shl    ecx,0x4
c001410c:	01 f1                	add    ecx,esi
c001410e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014116:	74 3e                	je     c0014156 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014118:	42                   	inc    edx
c0014119:	83 fa 04             	cmp    edx,0x4
c001411c:	75 f0                	jne    c001410e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001411e:	83 ec 0c             	sub    esp,0xc
c0014121:	68 2f a9 02 c0       	push   0xc002a92f
c0014126:	e8 04 5c 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c001412b:	83 c4 10             	add    esp,0x10
c001412e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014133:	5a                   	pop    edx
c0014134:	5b                   	pop    ebx
c0014135:	5e                   	pop    esi
c0014136:	c3                   	ret    
c0014137:	83 ec 0c             	sub    esp,0xc
c001413a:	56                   	push   esi
c001413b:	e8 bc fb ff ff       	call   c0013cfc <Device::getName()>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014146:	75 ba                	jne    c0014102 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014148:	83 fb 0f             	cmp    ebx,0xf
c001414b:	7f 29                	jg     c0014176 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001414d:	0f b6 9b 60 c9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd36a0]
c0014154:	eb ac                	jmp    c0014102 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014156:	8d 04 82             	lea    eax,[edx+eax*4]
c0014159:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001415d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014160:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014166:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001416a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014170:	89 d8                	mov    eax,ebx
c0014172:	5a                   	pop    edx
c0014173:	5b                   	pop    ebx
c0014174:	5e                   	pop    esi
c0014175:	c3                   	ret    
c0014176:	83 ec 0c             	sub    esp,0xc
c0014179:	68 22 a9 02 c0       	push   0xc002a922
c001417e:	e8 ac 5b 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0014183:	83 c4 10             	add    esp,0x10
c0014186:	e9 77 ff ff ff       	jmp    c0014102 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001418b:	90                   	nop

c001418c <InterruptController::clearAllHandlers(int, bool)>:
c001418c:	56                   	push   esi
c001418d:	53                   	push   ebx
c001418e:	52                   	push   edx
c001418f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014193:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014197:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001419c:	75 61                	jne    c00141ff <InterruptController::clearAllHandlers(int, bool)+0x73>
c001419e:	8d 46 20             	lea    eax,[esi+0x20]
c00141a1:	c1 e6 04             	shl    esi,0x4
c00141a4:	c1 e0 04             	shl    eax,0x4
c00141a7:	01 de                	add    esi,ebx
c00141a9:	01 d8                	add    eax,ebx
c00141ab:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141b5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141bf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141c9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141d3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141dd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141e7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00141f1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00141fb:	58                   	pop    eax
c00141fc:	5b                   	pop    ebx
c00141fd:	5e                   	pop    esi
c00141fe:	c3                   	ret    
c00141ff:	83 ec 0c             	sub    esp,0xc
c0014202:	53                   	push   ebx
c0014203:	e8 f4 fa ff ff       	call   c0013cfc <Device::getName()>
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001420e:	75 8e                	jne    c001419e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014210:	83 fe 0f             	cmp    esi,0xf
c0014213:	7f 09                	jg     c001421e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014215:	0f b6 b6 60 c9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd36a0]
c001421c:	eb 80                	jmp    c001419e <InterruptController::clearAllHandlers(int, bool)+0x12>
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	68 3c a9 02 c0       	push   0xc002a93c
c0014226:	e8 04 5b 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c001422b:	83 c4 10             	add    esp,0x10
c001422e:	e9 6b ff ff ff       	jmp    c001419e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014233:	90                   	nop

c0014234 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014234:	56                   	push   esi
c0014235:	53                   	push   ebx
c0014236:	52                   	push   edx
c0014237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001423b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001423f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014244:	75 3a                	jne    c0014280 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001424a:	8d 50 20             	lea    edx,[eax+0x20]
c001424d:	c1 e2 04             	shl    edx,0x4
c0014250:	8d 04 16             	lea    eax,[esi+edx*1]
c0014253:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014257:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001425d:	74 0b                	je     c001426a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001425f:	83 c0 04             	add    eax,0x4
c0014262:	39 d0                	cmp    eax,edx
c0014264:	75 f1                	jne    c0014257 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014266:	58                   	pop    eax
c0014267:	5b                   	pop    ebx
c0014268:	5e                   	pop    esi
c0014269:	c3                   	ret    
c001426a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014274:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001427e:	eb df                	jmp    c001425f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014280:	83 ec 0c             	sub    esp,0xc
c0014283:	56                   	push   esi
c0014284:	e8 73 fa ff ff       	call   c0013cfc <Device::getName()>
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001428f:	75 b5                	jne    c0014246 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014291:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014296:	7f 11                	jg     c00142a9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014298:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001429c:	0f b6 80 60 c9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd36a0]
c00142a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142a7:	eb 9d                	jmp    c0014246 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142a9:	83 ec 0c             	sub    esp,0xc
c00142ac:	68 49 a9 02 c0       	push   0xc002a949
c00142b1:	e8 79 5a 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c00142b6:	83 c4 10             	add    esp,0x10
c00142b9:	eb 8b                	jmp    c0014246 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142bb <nmiHandler(regs*, void*)>:
c00142bb:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00142c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c4:	e9 37 aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00142c9 <int_handler>:
c00142c9:	55                   	push   ebp
c00142ca:	57                   	push   edi
c00142cb:	56                   	push   esi
c00142cc:	53                   	push   ebx
c00142cd:	83 ec 0c             	sub    esp,0xc
c00142d0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142d4:	80 3d 44 02 03 c0 00 	cmp    BYTE PTR ds:0xc0030244,0x0
c00142db:	74 0b                	je     c00142e8 <int_handler+0x1f>
c00142dd:	fa                   	cli    
c00142de:	f4                   	hlt    
c00142df:	80 3d 44 02 03 c0 00 	cmp    BYTE PTR ds:0xc0030244,0x0
c00142e6:	75 f5                	jne    c00142dd <int_handler+0x14>
c00142e8:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00142ed:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00142f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142f6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00142fc:	8d 43 e0             	lea    eax,[ebx-0x20]
c00142ff:	83 f8 17             	cmp    eax,0x17
c0014302:	77 13                	ja     c0014317 <int_handler+0x4e>
c0014304:	83 ec 08             	sub    esp,0x8
c0014307:	8b 17                	mov    edx,DWORD PTR [edi]
c0014309:	8d 43 e0             	lea    eax,[ebx-0x20]
c001430c:	0f b6 c0             	movzx  eax,al
c001430f:	50                   	push   eax
c0014310:	57                   	push   edi
c0014311:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014314:	83 c4 10             	add    esp,0x10
c0014317:	83 c3 15             	add    ebx,0x15
c001431a:	c1 e3 04             	shl    ebx,0x4
c001431d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014321:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014328:	31 db                	xor    ebx,ebx
c001432a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001432e:	85 c0                	test   eax,eax
c0014330:	74 13                	je     c0014345 <int_handler+0x7c>
c0014332:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014335:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014339:	74 1c                	je     c0014357 <int_handler+0x8e>
c001433b:	83 ec 08             	sub    esp,0x8
c001433e:	52                   	push   edx
c001433f:	56                   	push   esi
c0014340:	ff d0                	call   eax
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	43                   	inc    ebx
c0014346:	83 fb 04             	cmp    ebx,0x4
c0014349:	75 df                	jne    c001432a <int_handler+0x61>
c001434b:	83 c4 0c             	add    esp,0xc
c001434e:	31 c0                	xor    eax,eax
c0014350:	5b                   	pop    ebx
c0014351:	31 d2                	xor    edx,edx
c0014353:	5e                   	pop    esi
c0014354:	5f                   	pop    edi
c0014355:	5d                   	pop    ebp
c0014356:	c3                   	ret    
c0014357:	83 ec 08             	sub    esp,0x8
c001435a:	52                   	push   edx
c001435b:	56                   	push   esi
c001435c:	ff d0                	call   eax
c001435e:	83 c4 10             	add    esp,0x10
c0014361:	83 c4 0c             	add    esp,0xc
c0014364:	5b                   	pop    ebx
c0014365:	5e                   	pop    esi
c0014366:	5f                   	pop    edi
c0014367:	5d                   	pop    ebp
c0014368:	c3                   	ret    
c0014369:	90                   	nop

c001436a <InterruptController::InterruptController(char const*)>:
c001436a:	83 ec 1c             	sub    esp,0x1c
c001436d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014371:	83 ec 08             	sub    esp,0x8
c0014374:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014378:	50                   	push   eax
c0014379:	e8 82 f8 ff ff       	call   c0013c00 <Device::Device(char const*)>
c001437e:	83 c4 10             	add    esp,0x10
c0014381:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c0014386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001438a:	89 10                	mov    DWORD PTR [eax],edx
c001438c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014390:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001439a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143a2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143aa:	7f 5e                	jg     c001440a <InterruptController::InterruptController(char const*)+0xa0>
c00143ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143b4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143b9:	7f 49                	jg     c0014404 <InterruptController::InterruptController(char const*)+0x9a>
c00143bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143ce:	01 ca                	add    edx,ecx
c00143d0:	83 c2 54             	add    edx,0x54
c00143d3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143ee:	01 ca                	add    edx,ecx
c00143f0:	81 c2 54 04 00 00    	add    edx,0x454
c00143f6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143fe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014402:	eb b0                	jmp    c00143b4 <InterruptController::InterruptController(char const*)+0x4a>
c0014404:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014408:	eb 98                	jmp    c00143a2 <InterruptController::InterruptController(char const*)+0x38>
c001440a:	90                   	nop
c001440b:	83 c4 1c             	add    esp,0x1c
c001440e:	c3                   	ret    
c001440f:	90                   	nop

c0014410 <InterruptController::~InterruptController()>:
c0014410:	83 ec 0c             	sub    esp,0xc
c0014413:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c0014418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441c:	89 10                	mov    DWORD PTR [eax],edx
c001441e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	50                   	push   eax
c0014426:	e8 9f f4 ff ff       	call   c00138ca <Device::~Device()>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	90                   	nop
c001442f:	83 c4 0c             	add    esp,0xc
c0014432:	c3                   	ret    
c0014433:	90                   	nop

c0014434 <InterruptController::~InterruptController()>:
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	83 ec 0c             	sub    esp,0xc
c001443a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001443e:	e8 cd ff ff ff       	call   c0014410 <InterruptController::~InterruptController()>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	83 ec 08             	sub    esp,0x8
c0014449:	68 58 21 00 00       	push   0x2158
c001444e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014452:	e8 95 e0 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0014457:	83 c4 10             	add    esp,0x10
c001445a:	83 c4 0c             	add    esp,0xc
c001445d:	c3                   	ret    

c001445e <displayDebugInfo(regs*)>:
c001445e:	55                   	push   ebp
c001445f:	57                   	push   edi
c0014460:	56                   	push   esi
c0014461:	53                   	push   ebx
c0014462:	83 ec 24             	sub    esp,0x24
c0014465:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014469:	0f 20 c2             	mov    edx,cr0
c001446c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014470:	0f 20 d7             	mov    edi,cr2
c0014473:	0f 20 de             	mov    esi,cr3
c0014476:	0f 20 e5             	mov    ebp,cr4
c0014479:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001447c:	68 56 a9 02 c0       	push   0xc002a956
c0014481:	e8 3e e1 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014486:	59                   	pop    ecx
c0014487:	58                   	pop    eax
c0014488:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001448b:	68 61 a9 02 c0       	push   0xc002a961
c0014490:	e8 2f e1 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014495:	58                   	pop    eax
c0014496:	5a                   	pop    edx
c0014497:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001449a:	68 6c a9 02 c0       	push   0xc002a96c
c001449f:	e8 20 e1 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00144a4:	59                   	pop    ecx
c00144a5:	58                   	pop    eax
c00144a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144a9:	68 77 a9 02 c0       	push   0xc002a977
c00144ae:	e8 11 e1 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00144b3:	58                   	pop    eax
c00144b4:	5a                   	pop    edx
c00144b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144b8:	68 82 a9 02 c0       	push   0xc002a982
c00144bd:	e8 02 e1 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00144c2:	59                   	pop    ecx
c00144c3:	58                   	pop    eax
c00144c4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144c7:	68 8d a9 02 c0       	push   0xc002a98d
c00144cc:	e8 f3 e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00144d1:	58                   	pop    eax
c00144d2:	5a                   	pop    edx
c00144d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144d6:	68 98 a9 02 c0       	push   0xc002a998
c00144db:	e8 e4 e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00144e0:	59                   	pop    ecx
c00144e1:	58                   	pop    eax
c00144e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144e5:	68 a3 a9 02 c0       	push   0xc002a9a3
c00144ea:	e8 d5 e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00144ef:	58                   	pop    eax
c00144f0:	5a                   	pop    edx
c00144f1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00144f4:	68 ae a9 02 c0       	push   0xc002a9ae
c00144f9:	e8 c6 e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00144fe:	59                   	pop    ecx
c00144ff:	58                   	pop    eax
c0014500:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014503:	68 bd a9 02 c0       	push   0xc002a9bd
c0014508:	e8 b7 e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001450d:	58                   	pop    eax
c001450e:	5a                   	pop    edx
c001450f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014512:	68 c8 a9 02 c0       	push   0xc002a9c8
c0014517:	e8 a8 e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001451c:	59                   	pop    ecx
c001451d:	58                   	pop    eax
c001451e:	57                   	push   edi
c001451f:	68 d3 a9 02 c0       	push   0xc002a9d3
c0014524:	e8 9b e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014529:	58                   	pop    eax
c001452a:	5a                   	pop    edx
c001452b:	56                   	push   esi
c001452c:	68 de a9 02 c0       	push   0xc002a9de
c0014531:	e8 8e e0 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014536:	59                   	pop    ecx
c0014537:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001453c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014542:	e8 b4 bd ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c0014547:	58                   	pop    eax
c0014548:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001454b:	5a                   	pop    edx
c001454c:	c1 e0 05             	shl    eax,0x5
c001454f:	05 c0 c6 02 c0       	add    eax,0xc002c6c0
c0014554:	50                   	push   eax
c0014555:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001455a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014560:	e8 a3 c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014565:	59                   	pop    ecx
c0014566:	58                   	pop    eax
c0014567:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001456c:	68 e9 a9 02 c0       	push   0xc002a9e9
c0014571:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014577:	e8 8c c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001457c:	58                   	pop    eax
c001457d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014582:	5a                   	pop    edx
c0014583:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014586:	83 c0 0c             	add    eax,0xc
c0014589:	50                   	push   eax
c001458a:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001458f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014595:	e8 6e c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001459a:	59                   	pop    ecx
c001459b:	58                   	pop    eax
c001459c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145a1:	68 f2 a9 02 c0       	push   0xc002a9f2
c00145a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ac:	e8 57 c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00145b1:	58                   	pop    eax
c00145b2:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145b7:	5a                   	pop    edx
c00145b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145c1:	e8 fc c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00145c6:	59                   	pop    ecx
c00145c7:	58                   	pop    eax
c00145c8:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145cd:	68 fa a9 02 c0       	push   0xc002a9fa
c00145d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d8:	e8 2b c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00145dd:	58                   	pop    eax
c00145de:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145e3:	5a                   	pop    edx
c00145e4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ed:	e8 d0 c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00145f2:	59                   	pop    ecx
c00145f3:	58                   	pop    eax
c00145f4:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00145f9:	68 02 aa 02 c0       	push   0xc002aa02
c00145fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014604:	e8 ff c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014609:	58                   	pop    eax
c001460a:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001460f:	5a                   	pop    edx
c0014610:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014613:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014619:	e8 a4 c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001461e:	59                   	pop    ecx
c001461f:	58                   	pop    eax
c0014620:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014625:	68 0a aa 02 c0       	push   0xc002aa0a
c001462a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014630:	e8 d3 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014635:	58                   	pop    eax
c0014636:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001463b:	5a                   	pop    edx
c001463c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001463f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014645:	e8 78 c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001464a:	59                   	pop    ecx
c001464b:	58                   	pop    eax
c001464c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014651:	68 12 aa 02 c0       	push   0xc002aa12
c0014656:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465c:	e8 a7 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014661:	58                   	pop    eax
c0014662:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014667:	5a                   	pop    edx
c0014668:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001466b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014671:	e8 4c c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014676:	59                   	pop    ecx
c0014677:	58                   	pop    eax
c0014678:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001467d:	68 1a aa 02 c0       	push   0xc002aa1a
c0014682:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014688:	e8 7b c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001468d:	58                   	pop    eax
c001468e:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014693:	5a                   	pop    edx
c0014694:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014697:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469d:	e8 20 c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00146a2:	59                   	pop    ecx
c00146a3:	58                   	pop    eax
c00146a4:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146a9:	68 22 aa 02 c0       	push   0xc002aa22
c00146ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b4:	e8 4f c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00146b9:	58                   	pop    eax
c00146ba:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146bf:	5a                   	pop    edx
c00146c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146c4:	52                   	push   edx
c00146c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cb:	e8 f2 c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00146d0:	59                   	pop    ecx
c00146d1:	58                   	pop    eax
c00146d2:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146d7:	68 2b aa 02 c0       	push   0xc002aa2b
c00146dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e2:	e8 21 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00146e7:	58                   	pop    eax
c00146e8:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00146ed:	5a                   	pop    edx
c00146ee:	57                   	push   edi
c00146ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f5:	e8 c8 c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00146fa:	59                   	pop    ecx
c00146fb:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014700:	5f                   	pop    edi
c0014701:	68 33 aa 02 c0       	push   0xc002aa33
c0014706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470c:	e8 f7 c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014711:	58                   	pop    eax
c0014712:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014717:	5a                   	pop    edx
c0014718:	56                   	push   esi
c0014719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471f:	e8 9e c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014724:	59                   	pop    ecx
c0014725:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001472a:	5e                   	pop    esi
c001472b:	68 3b aa 02 c0       	push   0xc002aa3b
c0014730:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014736:	e8 cd c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001473b:	5f                   	pop    edi
c001473c:	58                   	pop    eax
c001473d:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014742:	55                   	push   ebp
c0014743:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014749:	e8 74 c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001474e:	58                   	pop    eax
c001474f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014754:	5a                   	pop    edx
c0014755:	68 43 aa 02 c0       	push   0xc002aa43
c001475a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014760:	e8 a3 c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014765:	0f 21 c0             	mov    eax,db0
c0014768:	59                   	pop    ecx
c0014769:	5e                   	pop    esi
c001476a:	50                   	push   eax
c001476b:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014770:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014776:	e8 47 c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001477b:	5f                   	pop    edi
c001477c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014781:	5d                   	pop    ebp
c0014782:	68 4c aa 02 c0       	push   0xc002aa4c
c0014787:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478d:	e8 76 c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014792:	0f 21 c8             	mov    eax,db1
c0014795:	5a                   	pop    edx
c0014796:	59                   	pop    ecx
c0014797:	50                   	push   eax
c0014798:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 1a c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00147a8:	5e                   	pop    esi
c00147a9:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147ae:	5f                   	pop    edi
c00147af:	68 54 aa 02 c0       	push   0xc002aa54
c00147b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ba:	e8 49 c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00147bf:	0f 21 d0             	mov    eax,db2
c00147c2:	5d                   	pop    ebp
c00147c3:	5a                   	pop    edx
c00147c4:	50                   	push   eax
c00147c5:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d0:	e8 ed bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00147d5:	59                   	pop    ecx
c00147d6:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147db:	5e                   	pop    esi
c00147dc:	68 5c aa 02 c0       	push   0xc002aa5c
c00147e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e7:	e8 1c c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00147ec:	0f 21 d8             	mov    eax,db3
c00147ef:	5f                   	pop    edi
c00147f0:	5d                   	pop    ebp
c00147f1:	50                   	push   eax
c00147f2:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 c0 bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014802:	58                   	pop    eax
c0014803:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014808:	5a                   	pop    edx
c0014809:	68 64 aa 02 c0       	push   0xc002aa64
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 ef bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014819:	0f 21 f0             	mov    eax,db6
c001481c:	59                   	pop    ecx
c001481d:	5e                   	pop    esi
c001481e:	50                   	push   eax
c001481f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482a:	e8 93 bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001482f:	5f                   	pop    edi
c0014830:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014835:	5d                   	pop    ebp
c0014836:	68 6c aa 02 c0       	push   0xc002aa6c
c001483b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014841:	e8 c2 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014846:	0f 21 f8             	mov    eax,db7
c0014849:	5a                   	pop    edx
c001484a:	59                   	pop    ecx
c001484b:	50                   	push   eax
c001484c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014851:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014857:	e8 66 bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001485c:	5e                   	pop    esi
c001485d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014860:	e8 43 86 00 00       	call   c001cea8 <Thr::getDriverNameFromAddress(unsigned long)>
c0014865:	83 c4 10             	add    esp,0x10
c0014868:	85 c0                	test   eax,eax
c001486a:	74 7d                	je     c00148e9 <displayDebugInfo(regs*)+0x48b>
c001486c:	89 c6                	mov    esi,eax
c001486e:	50                   	push   eax
c001486f:	50                   	push   eax
c0014870:	56                   	push   esi
c0014871:	68 74 aa 02 c0       	push   0xc002aa74
c0014876:	e8 49 dd ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001487b:	5a                   	pop    edx
c001487c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014881:	59                   	pop    ecx
c0014882:	68 82 aa 02 c0       	push   0xc002aa82
c0014887:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488d:	e8 76 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014892:	5f                   	pop    edi
c0014893:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0014898:	5d                   	pop    ebp
c0014899:	56                   	push   esi
c001489a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a0:	e8 63 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00148a5:	58                   	pop    eax
c00148a6:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00148ab:	5a                   	pop    edx
c00148ac:	68 8e aa 02 c0       	push   0xc002aa8e
c00148b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b7:	e8 4c bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00148bc:	59                   	pop    ecx
c00148bd:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00148c2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00148c8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148cb:	e8 0f 86 00 00       	call   c001cedf <Thr::getDriverOffsetFromAddress(unsigned long)>
c00148d0:	5b                   	pop    ebx
c00148d1:	5d                   	pop    ebp
c00148d2:	50                   	push   eax
c00148d3:	57                   	push   edi
c00148d4:	e8 e9 be ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00148d9:	58                   	pop    eax
c00148da:	5a                   	pop    edx
c00148db:	56                   	push   esi
c00148dc:	68 9a aa 02 c0       	push   0xc002aa9a
c00148e1:	e8 de dc ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00148e6:	83 c4 10             	add    esp,0x10
c00148e9:	fa                   	cli    
c00148ea:	f4                   	hlt    
c00148eb:	eb fe                	jmp    c00148eb <displayDebugInfo(regs*)+0x48d>

c00148ed <x87EmulHandler(regs*, void*)>:
c00148ed:	83 ec 0c             	sub    esp,0xc
c00148f0:	0f 20 c2             	mov    edx,cr0
c00148f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00148fc:	75 4b                	jne    c0014949 <x87EmulHandler(regs*, void*)+0x5c>
c00148fe:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0014903:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014909:	85 c0                	test   eax,eax
c001490b:	74 05                	je     c0014912 <x87EmulHandler(regs*, void*)+0x25>
c001490d:	83 e2 08             	and    edx,0x8
c0014910:	75 17                	jne    c0014929 <x87EmulHandler(regs*, void*)+0x3c>
c0014912:	83 ec 0c             	sub    esp,0xc
c0014915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014919:	e8 5d a9 00 00       	call   c001f27b <Vm::x87Handler(regs*)>
c001491e:	83 c4 10             	add    esp,0x10
c0014921:	84 c0                	test   al,al
c0014923:	74 24                	je     c0014949 <x87EmulHandler(regs*, void*)+0x5c>
c0014925:	83 c4 0c             	add    esp,0xc
c0014928:	c3                   	ret    
c0014929:	83 ec 0c             	sub    esp,0xc
c001492c:	68 c0 aa 02 c0       	push   0xc002aac0
c0014931:	e8 8e dc ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014936:	0f 06                	clts   
c0014938:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	a3 88 d8 02 c0       	mov    ds:0xc002d888,eax
c0014945:	83 c4 0c             	add    esp,0xc
c0014948:	c3                   	ret    
c0014949:	83 ec 0c             	sub    esp,0xc
c001494c:	68 aa aa 02 c0       	push   0xc002aaaa
c0014951:	e8 6e dc ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014956:	5a                   	pop    edx
c0014957:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001495b:	e8 fe fa ff ff       	call   c001445e <displayDebugInfo(regs*)>

c0014960 <gpFault(regs*, void*)>:
c0014960:	53                   	push   ebx
c0014961:	83 ec 14             	sub    esp,0x14
c0014964:	c7 05 84 d8 02 c0 54 e7 01 c0 	mov    DWORD PTR ds:0xc002d884,0xc001e754
c001496e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014972:	53                   	push   ebx
c0014973:	e8 dc 9d 00 00       	call   c001e754 <Vm::faultHandler(regs*)>
c0014978:	83 c4 10             	add    esp,0x10
c001497b:	84 c0                	test   al,al
c001497d:	74 05                	je     c0014984 <gpFault(regs*, void*)+0x24>
c001497f:	83 c4 08             	add    esp,0x8
c0014982:	5b                   	pop    ebx
c0014983:	c3                   	ret    
c0014984:	83 ec 0c             	sub    esp,0xc
c0014987:	68 cd aa 02 c0       	push   0xc002aacd
c001498c:	e8 33 dc ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014994:	e8 c5 fa ff ff       	call   c001445e <displayDebugInfo(regs*)>

c0014999 <pgFault(regs*, void*)>:
c0014999:	83 ec 18             	sub    esp,0x18
c001499c:	68 e8 aa 02 c0       	push   0xc002aae8
c00149a1:	e8 1e dc ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00149a6:	0f 20 d0             	mov    eax,cr2
c00149a9:	5a                   	pop    edx
c00149aa:	59                   	pop    ecx
c00149ab:	50                   	push   eax
c00149ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00149ba:	e8 af d7 ff ff       	call   c001216e <VAS::tryLoadBackOffDisk(unsigned long)>
c00149bf:	83 c4 10             	add    esp,0x10
c00149c2:	84 c0                	test   al,al
c00149c4:	74 04                	je     c00149ca <pgFault(regs*, void*)+0x31>
c00149c6:	83 c4 0c             	add    esp,0xc
c00149c9:	c3                   	ret    
c00149ca:	83 ec 0c             	sub    esp,0xc
c00149cd:	68 f2 aa 02 c0       	push   0xc002aaf2
c00149d2:	e8 ed db ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00149d7:	58                   	pop    eax
c00149d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149dc:	e8 7d fa ff ff       	call   c001445e <displayDebugInfo(regs*)>

c00149e1 <otherISRHandler(regs*, void*)>:
c00149e1:	53                   	push   ebx
c00149e2:	83 ec 0c             	sub    esp,0xc
c00149e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149e9:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00149ec:	50                   	push   eax
c00149ed:	50                   	push   eax
c00149ee:	68 ff aa 02 c0       	push   0xc002aaff
c00149f3:	e8 cc db ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00149f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149fb:	e8 5e fa ff ff       	call   c001445e <displayDebugInfo(regs*)>

c0014a00 <opcodeFault(regs*, void*)>:
c0014a00:	55                   	push   ebp
c0014a01:	89 e5                	mov    ebp,esp
c0014a03:	56                   	push   esi
c0014a04:	53                   	push   ebx
c0014a05:	83 ec 40             	sub    esp,0x40
c0014a08:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0014a0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a13:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a19:	84 c0                	test   al,al
c0014a1b:	74 24                	je     c0014a41 <opcodeFault(regs*, void*)+0x41>
c0014a1d:	83 ec 0c             	sub    esp,0xc
c0014a20:	68 1c ab 02 c0       	push   0xc002ab1c
c0014a25:	e8 9a db ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a30:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a33:	8d 50 19             	lea    edx,[eax+0x19]
c0014a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a39:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a3c:	e9 d5 05 00 00       	jmp    c0015016 <opcodeFault(regs*, void*)+0x616>
c0014a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a47:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a4a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a4e:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a55:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a58:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014a5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a60:	3c f0                	cmp    al,0xf0
c0014a62:	75 17                	jne    c0014a7b <opcodeFault(regs*, void*)+0x7b>
c0014a64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a6d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a73:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a76:	e9 da 00 00 00       	jmp    c0014b55 <opcodeFault(regs*, void*)+0x155>
c0014a7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a7e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a80:	3c f2                	cmp    al,0xf2
c0014a82:	74 09                	je     c0014a8d <opcodeFault(regs*, void*)+0x8d>
c0014a84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a87:	8a 00                	mov    al,BYTE PTR [eax]
c0014a89:	3c f3                	cmp    al,0xf3
c0014a8b:	75 1b                	jne    c0014aa8 <opcodeFault(regs*, void*)+0xa8>
c0014a8d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a91:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a9a:	8d 50 01             	lea    edx,[eax+0x1]
c0014a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aa3:	e9 ad 00 00 00       	jmp    c0014b55 <opcodeFault(regs*, void*)+0x155>
c0014aa8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aab:	8a 00                	mov    al,BYTE PTR [eax]
c0014aad:	3c 66                	cmp    al,0x66
c0014aaf:	75 1f                	jne    c0014ad0 <opcodeFault(regs*, void*)+0xd0>
c0014ab1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ab5:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014ab9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ac2:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014acb:	e9 85 00 00 00       	jmp    c0014b55 <opcodeFault(regs*, void*)+0x155>
c0014ad0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad5:	3c 67                	cmp    al,0x67
c0014ad7:	75 18                	jne    c0014af1 <opcodeFault(regs*, void*)+0xf1>
c0014ad9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014add:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae6:	8d 50 01             	lea    edx,[eax+0x1]
c0014ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aef:	eb 64                	jmp    c0014b55 <opcodeFault(regs*, void*)+0x155>
c0014af1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014af4:	8a 00                	mov    al,BYTE PTR [eax]
c0014af6:	3c 2e                	cmp    al,0x2e
c0014af8:	74 09                	je     c0014b03 <opcodeFault(regs*, void*)+0x103>
c0014afa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afd:	8a 00                	mov    al,BYTE PTR [eax]
c0014aff:	3c 3e                	cmp    al,0x3e
c0014b01:	75 18                	jne    c0014b1b <opcodeFault(regs*, void*)+0x11b>
c0014b03:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b07:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b10:	8d 50 01             	lea    edx,[eax+0x1]
c0014b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b16:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b19:	eb 3a                	jmp    c0014b55 <opcodeFault(regs*, void*)+0x155>
c0014b1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b1e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b20:	3c 36                	cmp    al,0x36
c0014b22:	74 1b                	je     c0014b3f <opcodeFault(regs*, void*)+0x13f>
c0014b24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b27:	8a 00                	mov    al,BYTE PTR [eax]
c0014b29:	3c 26                	cmp    al,0x26
c0014b2b:	74 12                	je     c0014b3f <opcodeFault(regs*, void*)+0x13f>
c0014b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b30:	8a 00                	mov    al,BYTE PTR [eax]
c0014b32:	3c 64                	cmp    al,0x64
c0014b34:	74 09                	je     c0014b3f <opcodeFault(regs*, void*)+0x13f>
c0014b36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b39:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3b:	3c 65                	cmp    al,0x65
c0014b3d:	75 16                	jne    c0014b55 <opcodeFault(regs*, void*)+0x155>
c0014b3f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b43:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b4c:	8d 50 01             	lea    edx,[eax+0x1]
c0014b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b52:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b58:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5a:	3c 0f                	cmp    al,0xf
c0014b5c:	0f 85 ad 00 00 00    	jne    c0014c0f <opcodeFault(regs*, void*)+0x20f>
c0014b62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b65:	40                   	inc    eax
c0014b66:	8a 00                	mov    al,BYTE PTR [eax]
c0014b68:	3c c2                	cmp    al,0xc2
c0014b6a:	74 0e                	je     c0014b7a <opcodeFault(regs*, void*)+0x17a>
c0014b6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6f:	40                   	inc    eax
c0014b70:	8a 00                	mov    al,BYTE PTR [eax]
c0014b72:	3c c3                	cmp    al,0xc3
c0014b74:	0f 85 95 00 00 00    	jne    c0014c0f <opcodeFault(regs*, void*)+0x20f>
c0014b7a:	83 ec 0c             	sub    esp,0xc
c0014b7d:	68 3f ab 02 c0       	push   0xc002ab3f
c0014b82:	e8 3d da ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014b87:	83 c4 10             	add    esp,0x10
c0014b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b90:	8d 50 01             	lea    edx,[eax+0x1]
c0014b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b99:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba1:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ba4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba7:	88 10                	mov    BYTE PTR [eax],dl
c0014ba9:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014bac:	50                   	push   eax
c0014bad:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bb0:	50                   	push   eax
c0014bb1:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014bb4:	50                   	push   eax
c0014bb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bb8:	e8 8b 48 00 00       	call   c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014bbd:	83 c4 10             	add    esp,0x10
c0014bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bc6:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014bc9:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014bcc:	01 d0                	add    eax,edx
c0014bce:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bd7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014bda:	48                   	dec    eax
c0014bdb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be1:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014be4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bea:	83 ec 04             	sub    esp,0x4
c0014bed:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014bf0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014bf3:	50                   	push   eax
c0014bf4:	e8 bb b5 fe ff       	call   c00001b4 <voodooXADD>
c0014bf9:	83 c4 10             	add    esp,0x10
c0014bfc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014bff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c02:	01 c2                	add    edx,eax
c0014c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c07:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c0a:	e9 07 04 00 00       	jmp    c0015016 <opcodeFault(regs*, void*)+0x616>
c0014c0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c12:	8a 00                	mov    al,BYTE PTR [eax]
c0014c14:	3c 0f                	cmp    al,0xf
c0014c16:	0f 85 8b 01 00 00    	jne    c0014da7 <opcodeFault(regs*, void*)+0x3a7>
c0014c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1f:	40                   	inc    eax
c0014c20:	8a 00                	mov    al,BYTE PTR [eax]
c0014c22:	3c c7                	cmp    al,0xc7
c0014c24:	0f 86 7d 01 00 00    	jbe    c0014da7 <opcodeFault(regs*, void*)+0x3a7>
c0014c2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2d:	40                   	inc    eax
c0014c2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c30:	3c cf                	cmp    al,0xcf
c0014c32:	0f 87 6f 01 00 00    	ja     c0014da7 <opcodeFault(regs*, void*)+0x3a7>
c0014c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3b:	40                   	inc    eax
c0014c3c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3e:	83 c0 38             	add    eax,0x38
c0014c41:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c44:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c48:	75 0b                	jne    c0014c55 <opcodeFault(regs*, void*)+0x255>
c0014c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c53:	eb 75                	jmp    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014c55:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c59:	75 0b                	jne    c0014c66 <opcodeFault(regs*, void*)+0x266>
c0014c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c64:	eb 64                	jmp    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014c66:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c6a:	75 0b                	jne    c0014c77 <opcodeFault(regs*, void*)+0x277>
c0014c6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014c72:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c75:	eb 53                	jmp    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014c77:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c7b:	75 0b                	jne    c0014c88 <opcodeFault(regs*, void*)+0x288>
c0014c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014c83:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c86:	eb 42                	jmp    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014c88:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c8c:	75 0b                	jne    c0014c99 <opcodeFault(regs*, void*)+0x299>
c0014c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c91:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014c94:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c97:	eb 31                	jmp    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014c99:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c9d:	75 0b                	jne    c0014caa <opcodeFault(regs*, void*)+0x2aa>
c0014c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ca5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ca8:	eb 20                	jmp    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014caa:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cae:	75 0b                	jne    c0014cbb <opcodeFault(regs*, void*)+0x2bb>
c0014cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014cb6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cb9:	eb 0f                	jmp    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014cbb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cbf:	75 09                	jne    c0014cca <opcodeFault(regs*, void*)+0x2ca>
c0014cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014cc7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cca:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014cce:	74 10                	je     c0014ce0 <opcodeFault(regs*, void*)+0x2e0>
c0014cd0:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014cd7:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014cde:	eb 2d                	jmp    c0014d0d <opcodeFault(regs*, void*)+0x30d>
c0014ce0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ce3:	c1 e0 18             	shl    eax,0x18
c0014ce6:	89 c2                	mov    edx,eax
c0014ce8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ceb:	c1 e0 08             	shl    eax,0x8
c0014cee:	25 00 00 ff 00       	and    eax,0xff0000
c0014cf3:	09 c2                	or     edx,eax
c0014cf5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cf8:	c1 e8 08             	shr    eax,0x8
c0014cfb:	25 00 ff 00 00       	and    eax,0xff00
c0014d00:	09 c2                	or     edx,eax
c0014d02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d05:	c1 e8 18             	shr    eax,0x18
c0014d08:	09 d0                	or     eax,edx
c0014d0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d0d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d11:	75 0b                	jne    c0014d1e <opcodeFault(regs*, void*)+0x31e>
c0014d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d16:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d19:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d1c:	eb 75                	jmp    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d1e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d22:	75 0b                	jne    c0014d2f <opcodeFault(regs*, void*)+0x32f>
c0014d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d27:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d2d:	eb 64                	jmp    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d2f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d33:	75 0b                	jne    c0014d40 <opcodeFault(regs*, void*)+0x340>
c0014d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d38:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d3b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d3e:	eb 53                	jmp    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d40:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d44:	75 0b                	jne    c0014d51 <opcodeFault(regs*, void*)+0x351>
c0014d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d49:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d4f:	eb 42                	jmp    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d51:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d55:	75 0b                	jne    c0014d62 <opcodeFault(regs*, void*)+0x362>
c0014d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d5d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d60:	eb 31                	jmp    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d62:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d66:	75 0b                	jne    c0014d73 <opcodeFault(regs*, void*)+0x373>
c0014d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d71:	eb 20                	jmp    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d73:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d77:	75 0b                	jne    c0014d84 <opcodeFault(regs*, void*)+0x384>
c0014d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d7f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014d82:	eb 0f                	jmp    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d84:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d88:	75 09                	jne    c0014d93 <opcodeFault(regs*, void*)+0x393>
c0014d8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d90:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d99:	8d 50 02             	lea    edx,[eax+0x2]
c0014d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014da2:	e9 6f 02 00 00       	jmp    c0015016 <opcodeFault(regs*, void*)+0x616>
c0014da7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014daa:	8a 00                	mov    al,BYTE PTR [eax]
c0014dac:	3c 0f                	cmp    al,0xf
c0014dae:	0f 85 8d 01 00 00    	jne    c0014f41 <opcodeFault(regs*, void*)+0x541>
c0014db4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db7:	40                   	inc    eax
c0014db8:	8a 00                	mov    al,BYTE PTR [eax]
c0014dba:	3c c7                	cmp    al,0xc7
c0014dbc:	0f 85 7f 01 00 00    	jne    c0014f41 <opcodeFault(regs*, void*)+0x541>
c0014dc2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dcb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dd4:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014dd7:	50                   	push   eax
c0014dd8:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ddb:	50                   	push   eax
c0014ddc:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ddf:	50                   	push   eax
c0014de0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014de3:	e8 60 46 00 00       	call   c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014de8:	83 c4 10             	add    esp,0x10
c0014deb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014dee:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014df1:	83 f0 01             	xor    eax,0x1
c0014df4:	84 c0                	test   al,al
c0014df6:	0f 84 45 01 00 00    	je     c0014f41 <opcodeFault(regs*, void*)+0x541>
c0014dfc:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014dff:	3c 01                	cmp    al,0x1
c0014e01:	0f 85 3a 01 00 00    	jne    c0014f41 <opcodeFault(regs*, void*)+0x541>
c0014e07:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e0a:	83 f0 01             	xor    eax,0x1
c0014e0d:	84 c0                	test   al,al
c0014e0f:	0f 84 2c 01 00 00    	je     c0014f41 <opcodeFault(regs*, void*)+0x541>
c0014e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e18:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e1b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e1e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e25:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e28:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e2b:	89 c2                	mov    edx,eax
c0014e2d:	b8 00 00 00 00       	mov    eax,0x0
c0014e32:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e35:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e3e:	ba 00 00 00 00       	mov    edx,0x0
c0014e43:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e46:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e4f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e52:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014e59:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e5c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e5f:	89 c2                	mov    edx,eax
c0014e61:	b8 00 00 00 00       	mov    eax,0x0
c0014e66:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e69:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e72:	ba 00 00 00 00       	mov    edx,0x0
c0014e77:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014e7a:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014e7d:	fa                   	cli    
c0014e7e:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0014e83:	40                   	inc    eax
c0014e84:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0014e89:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e91:	89 c1                	mov    ecx,eax
c0014e93:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014e96:	89 cb                	mov    ebx,ecx
c0014e98:	89 d0                	mov    eax,edx
c0014e9a:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014e9d:	89 c6                	mov    esi,eax
c0014e9f:	89 f0                	mov    eax,esi
c0014ea1:	09 d8                	or     eax,ebx
c0014ea3:	85 c0                	test   eax,eax
c0014ea5:	75 21                	jne    c0014ec8 <opcodeFault(regs*, void*)+0x4c8>
c0014ea7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014eaa:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ead:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014eb0:	89 01                	mov    DWORD PTR [ecx],eax
c0014eb2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ebb:	83 c8 40             	or     eax,0x40
c0014ebe:	89 c2                	mov    edx,eax
c0014ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ec6:	eb 3e                	jmp    c0014f06 <opcodeFault(regs*, void*)+0x506>
c0014ec8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ecb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ece:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ed3:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ed6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014edf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ee2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014ee5:	89 d0                	mov    eax,edx
c0014ee7:	31 d2                	xor    edx,edx
c0014ee9:	89 c3                	mov    ebx,eax
c0014eeb:	89 d6                	mov    esi,edx
c0014eed:	89 da                	mov    edx,ebx
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014efb:	83 e0 bf             	and    eax,0xffffffbf
c0014efe:	89 c2                	mov    edx,eax
c0014f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f03:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f06:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0014f0b:	48                   	dec    eax
c0014f0c:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0014f11:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0014f16:	85 c0                	test   eax,eax
c0014f18:	75 01                	jne    c0014f1b <opcodeFault(regs*, void*)+0x51b>
c0014f1a:	fb                   	sti    
c0014f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f21:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f24:	01 c2                	add    edx,eax
c0014f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f29:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	68 4e ab 02 c0       	push   0xc002ab4e
c0014f34:	e8 8b d6 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	e9 d5 00 00 00       	jmp    c0015016 <opcodeFault(regs*, void*)+0x616>
c0014f41:	83 ec 0c             	sub    esp,0xc
c0014f44:	68 61 ab 02 c0       	push   0xc002ab61
c0014f49:	e8 76 d6 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f54:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f5d:	c1 e0 04             	shl    eax,0x4
c0014f60:	01 d0                	add    eax,edx
c0014f62:	83 c0 03             	add    eax,0x3
c0014f65:	8a 00                	mov    al,BYTE PTR [eax]
c0014f67:	0f b6 d8             	movzx  ebx,al
c0014f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f76:	c1 e0 04             	shl    eax,0x4
c0014f79:	01 d0                	add    eax,edx
c0014f7b:	83 c0 02             	add    eax,0x2
c0014f7e:	8a 00                	mov    al,BYTE PTR [eax]
c0014f80:	0f b6 c8             	movzx  ecx,al
c0014f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f86:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f8f:	c1 e0 04             	shl    eax,0x4
c0014f92:	01 d0                	add    eax,edx
c0014f94:	40                   	inc    eax
c0014f95:	8a 00                	mov    al,BYTE PTR [eax]
c0014f97:	0f b6 d0             	movzx  edx,al
c0014f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9d:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fa6:	c1 e0 04             	shl    eax,0x4
c0014fa9:	01 f0                	add    eax,esi
c0014fab:	8a 00                	mov    al,BYTE PTR [eax]
c0014fad:	0f b6 c0             	movzx  eax,al
c0014fb0:	83 ec 0c             	sub    esp,0xc
c0014fb3:	53                   	push   ebx
c0014fb4:	51                   	push   ecx
c0014fb5:	52                   	push   edx
c0014fb6:	50                   	push   eax
c0014fb7:	68 74 ab 02 c0       	push   0xc002ab74
c0014fbc:	e8 03 d6 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0014fc1:	83 c4 20             	add    esp,0x20
c0014fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fca:	83 c0 03             	add    eax,0x3
c0014fcd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fcf:	0f b6 d8             	movzx  ebx,al
c0014fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fd8:	83 c0 02             	add    eax,0x2
c0014fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdd:	0f b6 c8             	movzx  ecx,al
c0014fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fe6:	40                   	inc    eax
c0014fe7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe9:	0f b6 d0             	movzx  edx,al
c0014fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ff2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff4:	0f b6 c0             	movzx  eax,al
c0014ff7:	83 ec 0c             	sub    esp,0xc
c0014ffa:	53                   	push   ebx
c0014ffb:	51                   	push   ecx
c0014ffc:	52                   	push   edx
c0014ffd:	50                   	push   eax
c0014ffe:	68 9c ab 02 c0       	push   0xc002ab9c
c0015003:	e8 bc d5 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0015008:	83 c4 20             	add    esp,0x20
c001500b:	83 ec 0c             	sub    esp,0xc
c001500e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015011:	e8 48 f4 ff ff       	call   c001445e <displayDebugInfo(regs*)>
c0015016:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015019:	5b                   	pop    ebx
c001501a:	5e                   	pop    esi
c001501b:	5d                   	pop    ebp
c001501c:	c3                   	ret    

c001501d <displayProgramFault(char const*)>:
c001501d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015022:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015025:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001502b:	85 c0                	test   eax,eax
c001502d:	74 15                	je     c0015044 <displayProgramFault(char const*)+0x27>
c001502f:	83 ec 0c             	sub    esp,0xc
c0015032:	6a 04                	push   0x4
c0015034:	6a 0f                	push   0xf
c0015036:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001503a:	50                   	push   eax
c001503b:	e8 c4 b4 ff ff       	call   c0010504 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015040:	83 c4 1c             	add    esp,0x1c
c0015043:	c3                   	ret    
c0015044:	c3                   	ret    

c0015045 <setupInterruptController()>:
c0015045:	55                   	push   ebp
c0015046:	89 e5                	mov    ebp,esp
c0015048:	53                   	push   ebx
c0015049:	83 ec 24             	sub    esp,0x24
c001504c:	b8 00 00 00 00       	mov    eax,0x0
c0015051:	85 c0                	test   eax,eax
c0015053:	0f 95 c0             	setne  al
c0015056:	84 c0                	test   al,al
c0015058:	74 5b                	je     c00150b5 <setupInterruptController()+0x70>
c001505a:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015061:	83 ec 0c             	sub    esp,0xc
c0015064:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015067:	e8 30 a5 ff ff       	call   c000f59c <malloc>
c001506c:	83 c4 10             	add    esp,0x10
c001506f:	89 c3                	mov    ebx,eax
c0015071:	83 ec 0c             	sub    esp,0xc
c0015074:	53                   	push   ebx
c0015075:	e8 fe 04 01 00       	call   c0025578 <APIC::APIC()>
c001507a:	83 c4 10             	add    esp,0x10
c001507d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015080:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015083:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015086:	8b 00                	mov    eax,DWORD PTR [eax]
c0015088:	83 c0 08             	add    eax,0x8
c001508b:	8b 00                	mov    eax,DWORD PTR [eax]
c001508d:	6a 00                	push   0x0
c001508f:	6a 00                	push   0x0
c0015091:	6a 00                	push   0x0
c0015093:	52                   	push   edx
c0015094:	ff d0                	call   eax
c0015096:	83 c4 10             	add    esp,0x10
c0015099:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001509e:	83 ec 08             	sub    esp,0x8
c00150a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00150a4:	50                   	push   eax
c00150a5:	e8 52 e9 ff ff       	call   c00139fc <Device::addChild(Device*)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150b0:	e9 79 03 00 00       	jmp    c001542e <setupInterruptController()+0x3e9>
c00150b5:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00150ba:	84 c0                	test   al,al
c00150bc:	75 14                	jne    c00150d2 <setupInterruptController()+0x8d>
c00150be:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00150c3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00150c9:	83 e2 fe             	and    edx,0xfffffffe
c00150cc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00150d2:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00150d7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150dd:	83 e0 01             	and    eax,0x1
c00150e0:	84 c0                	test   al,al
c00150e2:	0f 95 c0             	setne  al
c00150e5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150e8:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150ef:	83 ec 0c             	sub    esp,0xc
c00150f2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150f5:	e8 a2 a4 ff ff       	call   c000f59c <malloc>
c00150fa:	83 c4 10             	add    esp,0x10
c00150fd:	89 c3                	mov    ebx,eax
c00150ff:	83 ec 0c             	sub    esp,0xc
c0015102:	53                   	push   ebx
c0015103:	e8 c8 09 01 00       	call   c0025ad0 <PIC::PIC()>
c0015108:	83 c4 10             	add    esp,0x10
c001510b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001510e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015111:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015114:	8b 00                	mov    eax,DWORD PTR [eax]
c0015116:	83 c0 08             	add    eax,0x8
c0015119:	8b 00                	mov    eax,DWORD PTR [eax]
c001511b:	6a 00                	push   0x0
c001511d:	6a 00                	push   0x0
c001511f:	6a 00                	push   0x0
c0015121:	52                   	push   edx
c0015122:	ff d0                	call   eax
c0015124:	83 c4 10             	add    esp,0x10
c0015127:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001512b:	74 73                	je     c00151a0 <setupInterruptController()+0x15b>
c001512d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015130:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015133:	8b 00                	mov    eax,DWORD PTR [eax]
c0015135:	83 c0 0c             	add    eax,0xc
c0015138:	8b 00                	mov    eax,DWORD PTR [eax]
c001513a:	6a 00                	push   0x0
c001513c:	6a 00                	push   0x0
c001513e:	6a 00                	push   0x0
c0015140:	52                   	push   edx
c0015141:	ff d0                	call   eax
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001514a:	74 15                	je     c0015161 <setupInterruptController()+0x11c>
c001514c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015151:	83 c0 04             	add    eax,0x4
c0015154:	8b 00                	mov    eax,DWORD PTR [eax]
c0015156:	83 ec 0c             	sub    esp,0xc
c0015159:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001515c:	ff d0                	call   eax
c001515e:	83 c4 10             	add    esp,0x10
c0015161:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015168:	83 ec 0c             	sub    esp,0xc
c001516b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001516e:	e8 29 a4 ff ff       	call   c000f59c <malloc>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	89 c3                	mov    ebx,eax
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	53                   	push   ebx
c001517c:	e8 f7 03 01 00       	call   c0025578 <APIC::APIC()>
c0015181:	83 c4 10             	add    esp,0x10
c0015184:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015187:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001518a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001518d:	8b 00                	mov    eax,DWORD PTR [eax]
c001518f:	83 c0 08             	add    eax,0x8
c0015192:	8b 00                	mov    eax,DWORD PTR [eax]
c0015194:	6a 00                	push   0x0
c0015196:	6a 00                	push   0x0
c0015198:	6a 00                	push   0x0
c001519a:	52                   	push   edx
c001519b:	ff d0                	call   eax
c001519d:	83 c4 10             	add    esp,0x10
c00151a0:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00151a5:	83 ec 08             	sub    esp,0x8
c00151a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ab:	50                   	push   eax
c00151ac:	e8 4b e8 ff ff       	call   c00139fc <Device::addChild(Device*)>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	c7 05 88 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d888,0x0
c00151be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c3:	83 c0 24             	add    eax,0x24
c00151c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c8:	6a 00                	push   0x0
c00151ca:	68 e1 49 01 c0       	push   0xc00149e1
c00151cf:	6a 00                	push   0x0
c00151d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151d4:	ff d0                	call   eax
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151de:	83 c0 24             	add    eax,0x24
c00151e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e3:	6a 00                	push   0x0
c00151e5:	68 e1 49 01 c0       	push   0xc00149e1
c00151ea:	6a 01                	push   0x1
c00151ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ef:	ff d0                	call   eax
c00151f1:	83 c4 10             	add    esp,0x10
c00151f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f9:	83 c0 24             	add    eax,0x24
c00151fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fe:	6a 00                	push   0x0
c0015200:	68 bb 42 01 c0       	push   0xc00142bb
c0015205:	6a 02                	push   0x2
c0015207:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001520a:	ff d0                	call   eax
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015212:	8b 00                	mov    eax,DWORD PTR [eax]
c0015214:	83 c0 24             	add    eax,0x24
c0015217:	8b 00                	mov    eax,DWORD PTR [eax]
c0015219:	6a 00                	push   0x0
c001521b:	68 e1 49 01 c0       	push   0xc00149e1
c0015220:	6a 03                	push   0x3
c0015222:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015225:	ff d0                	call   eax
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522d:	8b 00                	mov    eax,DWORD PTR [eax]
c001522f:	83 c0 24             	add    eax,0x24
c0015232:	8b 00                	mov    eax,DWORD PTR [eax]
c0015234:	6a 00                	push   0x0
c0015236:	68 e1 49 01 c0       	push   0xc00149e1
c001523b:	6a 04                	push   0x4
c001523d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015240:	ff d0                	call   eax
c0015242:	83 c4 10             	add    esp,0x10
c0015245:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015248:	8b 00                	mov    eax,DWORD PTR [eax]
c001524a:	83 c0 24             	add    eax,0x24
c001524d:	8b 00                	mov    eax,DWORD PTR [eax]
c001524f:	6a 00                	push   0x0
c0015251:	68 e1 49 01 c0       	push   0xc00149e1
c0015256:	6a 05                	push   0x5
c0015258:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001525b:	ff d0                	call   eax
c001525d:	83 c4 10             	add    esp,0x10
c0015260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015263:	8b 00                	mov    eax,DWORD PTR [eax]
c0015265:	83 c0 24             	add    eax,0x24
c0015268:	8b 00                	mov    eax,DWORD PTR [eax]
c001526a:	6a 00                	push   0x0
c001526c:	68 00 4a 01 c0       	push   0xc0014a00
c0015271:	6a 06                	push   0x6
c0015273:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015276:	ff d0                	call   eax
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015280:	83 c0 24             	add    eax,0x24
c0015283:	8b 00                	mov    eax,DWORD PTR [eax]
c0015285:	6a 00                	push   0x0
c0015287:	68 ed 48 01 c0       	push   0xc00148ed
c001528c:	6a 07                	push   0x7
c001528e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015291:	ff d0                	call   eax
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015299:	8b 00                	mov    eax,DWORD PTR [eax]
c001529b:	83 c0 24             	add    eax,0x24
c001529e:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a0:	6a 00                	push   0x0
c00152a2:	68 d6 40 01 c0       	push   0xc00140d6
c00152a7:	6a 08                	push   0x8
c00152a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ac:	ff d0                	call   eax
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b6:	83 c0 24             	add    eax,0x24
c00152b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bb:	6a 00                	push   0x0
c00152bd:	68 e1 49 01 c0       	push   0xc00149e1
c00152c2:	6a 09                	push   0x9
c00152c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c7:	ff d0                	call   eax
c00152c9:	83 c4 10             	add    esp,0x10
c00152cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d1:	83 c0 24             	add    eax,0x24
c00152d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d6:	6a 00                	push   0x0
c00152d8:	68 e1 49 01 c0       	push   0xc00149e1
c00152dd:	6a 0a                	push   0xa
c00152df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e2:	ff d0                	call   eax
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ec:	83 c0 24             	add    eax,0x24
c00152ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f1:	6a 00                	push   0x0
c00152f3:	68 e1 49 01 c0       	push   0xc00149e1
c00152f8:	6a 0b                	push   0xb
c00152fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152fd:	ff d0                	call   eax
c00152ff:	83 c4 10             	add    esp,0x10
c0015302:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015305:	8b 00                	mov    eax,DWORD PTR [eax]
c0015307:	83 c0 24             	add    eax,0x24
c001530a:	8b 00                	mov    eax,DWORD PTR [eax]
c001530c:	6a 00                	push   0x0
c001530e:	68 e1 49 01 c0       	push   0xc00149e1
c0015313:	6a 0c                	push   0xc
c0015315:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015318:	ff d0                	call   eax
c001531a:	83 c4 10             	add    esp,0x10
c001531d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015320:	8b 00                	mov    eax,DWORD PTR [eax]
c0015322:	83 c0 24             	add    eax,0x24
c0015325:	8b 00                	mov    eax,DWORD PTR [eax]
c0015327:	6a 00                	push   0x0
c0015329:	68 60 49 01 c0       	push   0xc0014960
c001532e:	6a 0d                	push   0xd
c0015330:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015333:	ff d0                	call   eax
c0015335:	83 c4 10             	add    esp,0x10
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	83 c0 24             	add    eax,0x24
c0015340:	8b 00                	mov    eax,DWORD PTR [eax]
c0015342:	6a 00                	push   0x0
c0015344:	68 99 49 01 c0       	push   0xc0014999
c0015349:	6a 0e                	push   0xe
c001534b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534e:	ff d0                	call   eax
c0015350:	83 c4 10             	add    esp,0x10
c0015353:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015356:	8b 00                	mov    eax,DWORD PTR [eax]
c0015358:	83 c0 24             	add    eax,0x24
c001535b:	8b 00                	mov    eax,DWORD PTR [eax]
c001535d:	6a 00                	push   0x0
c001535f:	68 e1 49 01 c0       	push   0xc00149e1
c0015364:	6a 0f                	push   0xf
c0015366:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015369:	ff d0                	call   eax
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015371:	8b 00                	mov    eax,DWORD PTR [eax]
c0015373:	83 c0 24             	add    eax,0x24
c0015376:	8b 00                	mov    eax,DWORD PTR [eax]
c0015378:	6a 00                	push   0x0
c001537a:	68 e1 49 01 c0       	push   0xc00149e1
c001537f:	6a 10                	push   0x10
c0015381:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015384:	ff d0                	call   eax
c0015386:	83 c4 10             	add    esp,0x10
c0015389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538c:	8b 00                	mov    eax,DWORD PTR [eax]
c001538e:	83 c0 24             	add    eax,0x24
c0015391:	8b 00                	mov    eax,DWORD PTR [eax]
c0015393:	6a 00                	push   0x0
c0015395:	68 e1 49 01 c0       	push   0xc00149e1
c001539a:	6a 11                	push   0x11
c001539c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539f:	ff d0                	call   eax
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a9:	83 c0 24             	add    eax,0x24
c00153ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ae:	6a 00                	push   0x0
c00153b0:	68 e1 49 01 c0       	push   0xc00149e1
c00153b5:	6a 12                	push   0x12
c00153b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ba:	ff d0                	call   eax
c00153bc:	83 c4 10             	add    esp,0x10
c00153bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c4:	83 c0 24             	add    eax,0x24
c00153c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c9:	6a 00                	push   0x0
c00153cb:	68 e1 49 01 c0       	push   0xc00149e1
c00153d0:	6a 13                	push   0x13
c00153d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d5:	ff d0                	call   eax
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153df:	83 c0 24             	add    eax,0x24
c00153e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e4:	6a 00                	push   0x0
c00153e6:	68 e1 49 01 c0       	push   0xc00149e1
c00153eb:	6a 14                	push   0x14
c00153ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f0:	ff d0                	call   eax
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fa:	83 c0 24             	add    eax,0x24
c00153fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ff:	6a 00                	push   0x0
c0015401:	68 e1 49 01 c0       	push   0xc00149e1
c0015406:	6a 1e                	push   0x1e
c0015408:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540b:	ff d0                	call   eax
c001540d:	83 c4 10             	add    esp,0x10
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	8b 00                	mov    eax,DWORD PTR [eax]
c0015415:	83 c0 24             	add    eax,0x24
c0015418:	8b 00                	mov    eax,DWORD PTR [eax]
c001541a:	6a 00                	push   0x0
c001541c:	68 1e bf 01 c0       	push   0xc001bf1e
c0015421:	6a 60                	push   0x60
c0015423:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015426:	ff d0                	call   eax
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015431:	c9                   	leave  
c0015432:	c3                   	ret    
c0015433:	90                   	nop

c0015434 <InterruptController::convertLegacyIRQNumber(int)>:
c0015434:	55                   	push   ebp
c0015435:	89 e5                	mov    ebp,esp
c0015437:	83 ec 08             	sub    esp,0x8
c001543a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543d:	83 ec 0c             	sub    esp,0xc
c0015440:	50                   	push   eax
c0015441:	e8 b6 e8 ff ff       	call   c0013cfc <Device::getName()>
c0015446:	83 c4 10             	add    esp,0x10
c0015449:	8a 00                	mov    al,BYTE PTR [eax]
c001544b:	3c 41                	cmp    al,0x41
c001544d:	0f 94 c0             	sete   al
c0015450:	84 c0                	test   al,al
c0015452:	74 28                	je     c001547c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015454:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015458:	7f 12                	jg     c001546c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001545a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001545d:	05 60 c9 02 c0       	add    eax,0xc002c960
c0015462:	8a 00                	mov    al,BYTE PTR [eax]
c0015464:	0f b6 c0             	movzx  eax,al
c0015467:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001546a:	eb 10                	jmp    c001547c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001546c:	83 ec 0c             	sub    esp,0xc
c001546f:	68 c4 ab 02 c0       	push   0xc002abc4
c0015474:	e8 b6 48 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0015479:	83 c4 10             	add    esp,0x10
c001547c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001547f:	c9                   	leave  
c0015480:	c3                   	ret    
c0015481:	90                   	nop

c0015482 <startGUI(void*)>:
c0015482:	55                   	push   ebp
c0015483:	89 e5                	mov    ebp,esp
c0015485:	53                   	push   ebx
c0015486:	83 ec 04             	sub    esp,0x4
c0015489:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001548e:	48                   	dec    eax
c001548f:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015494:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015499:	85 c0                	test   eax,eax
c001549b:	75 01                	jne    c001549e <startGUI(void*)+0x1c>
c001549d:	fb                   	sti    
c001549e:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c00154a4:	83 ec 08             	sub    esp,0x8
c00154a7:	6a 01                	push   0x1
c00154a9:	68 44 ac 02 c0       	push   0xc002ac44
c00154ae:	e8 46 7a 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	83 ec 08             	sub    esp,0x8
c00154b9:	53                   	push   ebx
c00154ba:	50                   	push   eax
c00154bb:	e8 67 7c 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c00154c0:	83 c4 10             	add    esp,0x10
c00154c3:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c00154c9:	83 ec 08             	sub    esp,0x8
c00154cc:	6a 01                	push   0x1
c00154ce:	68 5e ac 02 c0       	push   0xc002ac5e
c00154d3:	e8 21 7a 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c00154d8:	83 c4 10             	add    esp,0x10
c00154db:	83 ec 08             	sub    esp,0x8
c00154de:	53                   	push   ebx
c00154df:	50                   	push   eax
c00154e0:	e8 42 7c 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c00154e5:	83 c4 10             	add    esp,0x10
c00154e8:	90                   	nop
c00154e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154ec:	c9                   	leave  
c00154ed:	c3                   	ret    

c00154ee <startGUIVESA(void*)>:
c00154ee:	55                   	push   ebp
c00154ef:	89 e5                	mov    ebp,esp
c00154f1:	53                   	push   ebx
c00154f2:	83 ec 04             	sub    esp,0x4
c00154f5:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00154fa:	48                   	dec    eax
c00154fb:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015500:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015505:	85 c0                	test   eax,eax
c0015507:	75 01                	jne    c001550a <startGUIVESA(void*)+0x1c>
c0015509:	fb                   	sti    
c001550a:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c0015510:	83 ec 08             	sub    esp,0x8
c0015513:	6a 01                	push   0x1
c0015515:	68 78 ac 02 c0       	push   0xc002ac78
c001551a:	e8 da 79 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	83 ec 08             	sub    esp,0x8
c0015525:	53                   	push   ebx
c0015526:	50                   	push   eax
c0015527:	e8 fb 7b 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c001552c:	83 c4 10             	add    esp,0x10
c001552f:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c0015535:	83 ec 08             	sub    esp,0x8
c0015538:	6a 01                	push   0x1
c001553a:	68 5e ac 02 c0       	push   0xc002ac5e
c001553f:	e8 b5 79 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c0015544:	83 c4 10             	add    esp,0x10
c0015547:	83 ec 08             	sub    esp,0x8
c001554a:	53                   	push   ebx
c001554b:	50                   	push   eax
c001554c:	e8 d6 7b 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	90                   	nop
c0015555:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015558:	c9                   	leave  
c0015559:	c3                   	ret    

c001555a <sendKeyToTerminal(unsigned char)>:
c001555a:	55                   	push   ebp
c001555b:	89 e5                	mov    ebp,esp
c001555d:	83 ec 28             	sub    esp,0x28
c0015560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015563:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015566:	a1 c4 d7 02 c0       	mov    eax,ds:0xc002d7c4
c001556b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001556f:	83 ec 08             	sub    esp,0x8
c0015572:	52                   	push   edx
c0015573:	50                   	push   eax
c0015574:	e8 31 b4 ff ff       	call   c00109aa <VgaText::receiveKey(unsigned char)>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015580:	0f 85 8f 00 00 00    	jne    c0015615 <sendKeyToTerminal(unsigned char)+0xbb>
c0015586:	fa                   	cli    
c0015587:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001558c:	40                   	inc    eax
c001558d:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015592:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c0015597:	40                   	inc    eax
c0015598:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001559d:	a1 a0 d8 02 c0       	mov    eax,ds:0xc002d8a0
c00155a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155a5:	c7 05 a0 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8a0,0x0
c00155af:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155b3:	74 1f                	je     c00155d4 <sendKeyToTerminal(unsigned char)+0x7a>
c00155b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00155bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155c4:	83 ec 0c             	sub    esp,0xc
c00155c7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155ca:	e8 6f 87 00 00       	call   c001dd3e <unblockTask(ThreadControlBlock*)>
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	eb db                	jmp    c00155af <sendKeyToTerminal(unsigned char)+0x55>
c00155d4:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c00155d9:	48                   	dec    eax
c00155da:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c00155df:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c00155e4:	85 c0                	test   eax,eax
c00155e6:	75 18                	jne    c0015600 <sendKeyToTerminal(unsigned char)+0xa6>
c00155e8:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c00155ed:	85 c0                	test   eax,eax
c00155ef:	74 0f                	je     c0015600 <sendKeyToTerminal(unsigned char)+0xa6>
c00155f1:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c00155fb:	e8 bb 82 00 00       	call   c001d8bb <schedule()>
c0015600:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015605:	48                   	dec    eax
c0015606:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001560b:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015610:	85 c0                	test   eax,eax
c0015612:	75 01                	jne    c0015615 <sendKeyToTerminal(unsigned char)+0xbb>
c0015614:	fb                   	sti    
c0015615:	90                   	nop
c0015616:	c9                   	leave  
c0015617:	c3                   	ret    

c0015618 <sendKeyboardToken(KeyboardToken)>:
c0015618:	55                   	push   ebp
c0015619:	89 e5                	mov    ebp,esp
c001561b:	83 ec 18             	sub    esp,0x18
c001561e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015624:	0f b7 c0             	movzx  eax,ax
c0015627:	83 f2 01             	xor    edx,0x1
c001562a:	88 90 c0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2740],dl
c0015630:	a1 a8 d8 02 c0       	mov    eax,ds:0xc002d8a8
c0015635:	85 c0                	test   eax,eax
c0015637:	74 24                	je     c001565d <sendKeyboardToken(KeyboardToken)+0x45>
c0015639:	8b 0d a8 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8a8
c001563f:	83 ec 04             	sub    esp,0x4
c0015642:	68 c0 d8 02 c0       	push   0xc002d8c0
c0015647:	83 ec 08             	sub    esp,0x8
c001564a:	89 e2                	mov    edx,esp
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	89 02                	mov    DWORD PTR [edx],eax
c0015651:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015654:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015658:	ff d1                	call   ecx
c001565a:	83 c4 10             	add    esp,0x10
c001565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015660:	66 3d 03 02          	cmp    ax,0x203
c0015664:	75 07                	jne    c001566d <sendKeyboardToken(KeyboardToken)+0x55>
c0015666:	a0 c0 d9 02 c0       	mov    al,ds:0xc002d9c0
c001566b:	84 c0                	test   al,al
c001566d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015671:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015674:	a0 c8 dc 02 c0       	mov    al,ds:0xc002dcc8
c0015679:	38 c2                	cmp    dl,al
c001567b:	74 1c                	je     c0015699 <sendKeyboardToken(KeyboardToken)+0x81>
c001567d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015680:	a2 c8 dc 02 c0       	mov    ds:0xc002dcc8,al
c0015685:	a0 c8 dc 02 c0       	mov    al,ds:0xc002dcc8
c001568a:	0f b6 c0             	movzx  eax,al
c001568d:	83 ec 0c             	sub    esp,0xc
c0015690:	50                   	push   eax
c0015691:	e8 56 a9 ff ff       	call   c000ffec <setTerminalScrollLock(bool)>
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001569c:	84 c0                	test   al,al
c001569e:	0f 84 ae 00 00 00    	je     c0015752 <sendKeyboardToken(KeyboardToken)+0x13a>
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	66 3d 10 03          	cmp    ax,0x310
c00156ab:	75 06                	jne    c00156b3 <sendKeyboardToken(KeyboardToken)+0x9b>
c00156ad:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00156b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b6:	66 3d 11 03          	cmp    ax,0x311
c00156ba:	75 06                	jne    c00156c2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00156bc:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00156c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c5:	66 3d 12 03          	cmp    ax,0x312
c00156c9:	75 06                	jne    c00156d1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00156cb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00156d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d4:	66 3d 13 03          	cmp    ax,0x313
c00156d8:	75 06                	jne    c00156e0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00156da:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00156e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e3:	66 3d 14 03          	cmp    ax,0x314
c00156e7:	75 06                	jne    c00156ef <sendKeyboardToken(KeyboardToken)+0xd7>
c00156e9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00156ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f2:	66 3d 15 03          	cmp    ax,0x315
c00156f6:	75 06                	jne    c00156fe <sendKeyboardToken(KeyboardToken)+0xe6>
c00156f8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015701:	66 3d 16 03          	cmp    ax,0x316
c0015705:	75 06                	jne    c001570d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015707:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001570d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015710:	66 3d 17 03          	cmp    ax,0x317
c0015714:	75 06                	jne    c001571c <sendKeyboardToken(KeyboardToken)+0x104>
c0015716:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001571c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571f:	66 3d 18 03          	cmp    ax,0x318
c0015723:	75 06                	jne    c001572b <sendKeyboardToken(KeyboardToken)+0x113>
c0015725:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001572b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572e:	66 3d 19 03          	cmp    ax,0x319
c0015732:	75 06                	jne    c001573a <sendKeyboardToken(KeyboardToken)+0x122>
c0015734:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001573a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573d:	66 3d 1a 03          	cmp    ax,0x31a
c0015741:	0f 85 c9 00 00 00    	jne    c0015810 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015747:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001574d:	e9 be 00 00 00       	jmp    c0015810 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	66 3d 10 03          	cmp    ax,0x310
c0015759:	75 0a                	jne    c0015765 <sendKeyboardToken(KeyboardToken)+0x14d>
c001575b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015761:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015768:	66 3d 11 03          	cmp    ax,0x311
c001576c:	75 0a                	jne    c0015778 <sendKeyboardToken(KeyboardToken)+0x160>
c001576e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015774:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577b:	66 3d 12 03          	cmp    ax,0x312
c001577f:	75 0a                	jne    c001578b <sendKeyboardToken(KeyboardToken)+0x173>
c0015781:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015787:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578e:	66 3d 13 03          	cmp    ax,0x313
c0015792:	75 0a                	jne    c001579e <sendKeyboardToken(KeyboardToken)+0x186>
c0015794:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001579a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001579e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a1:	66 3d 14 03          	cmp    ax,0x314
c00157a5:	75 0a                	jne    c00157b1 <sendKeyboardToken(KeyboardToken)+0x199>
c00157a7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00157ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b4:	66 3d 15 03          	cmp    ax,0x315
c00157b8:	75 0a                	jne    c00157c4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00157ba:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c7:	66 3d 16 03          	cmp    ax,0x316
c00157cb:	75 0a                	jne    c00157d7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00157cd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00157d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	66 3d 17 03          	cmp    ax,0x317
c00157de:	75 0a                	jne    c00157ea <sendKeyboardToken(KeyboardToken)+0x1d2>
c00157e0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00157e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ed:	66 3d 18 03          	cmp    ax,0x318
c00157f1:	75 0a                	jne    c00157fd <sendKeyboardToken(KeyboardToken)+0x1e5>
c00157f3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00157f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015800:	66 3d 19 03          	cmp    ax,0x319
c0015804:	75 0a                	jne    c0015810 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015806:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001580c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015813:	66 3d 00 02          	cmp    ax,0x200
c0015817:	75 2c                	jne    c0015845 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015819:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c001581e:	83 f0 01             	xor    eax,0x1
c0015821:	84 c0                	test   al,al
c0015823:	74 20                	je     c0015845 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015825:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001582a:	6a 01                	push   0x1
c001582c:	6a 00                	push   0x0
c001582e:	68 82 54 01 c0       	push   0xc0015482
c0015833:	50                   	push   eax
c0015834:	e8 5d 7e 00 00       	call   c001d696 <Process::createThread(void (*)(void*), void*, int)>
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	c6 05 c0 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dcc0,0x1
c0015843:	eb 33                	jmp    c0015878 <sendKeyboardToken(KeyboardToken)+0x260>
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	66 3d 01 02          	cmp    ax,0x201
c001584c:	75 2a                	jne    c0015878 <sendKeyboardToken(KeyboardToken)+0x260>
c001584e:	a0 c0 dc 02 c0       	mov    al,ds:0xc002dcc0
c0015853:	83 f0 01             	xor    eax,0x1
c0015856:	84 c0                	test   al,al
c0015858:	74 1e                	je     c0015878 <sendKeyboardToken(KeyboardToken)+0x260>
c001585a:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001585f:	6a 01                	push   0x1
c0015861:	6a 00                	push   0x0
c0015863:	68 ee 54 01 c0       	push   0xc00154ee
c0015868:	50                   	push   eax
c0015869:	e8 28 7e 00 00       	call   c001d696 <Process::createThread(void (*)(void*), void*, int)>
c001586e:	83 c4 10             	add    esp,0x10
c0015871:	c6 05 c0 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dcc0,0x1
c0015878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587b:	66 3d 1d 03          	cmp    ax,0x31d
c001587f:	75 06                	jne    c0015887 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015881:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588a:	66 3d 1c 03          	cmp    ax,0x31c
c001588e:	75 06                	jne    c0015896 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015890:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015899:	66 3d 1b 03          	cmp    ax,0x31b
c001589d:	75 06                	jne    c00158a5 <sendKeyboardToken(KeyboardToken)+0x28d>
c001589f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00158a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a8:	66 3d 1e 03          	cmp    ax,0x31e
c00158ac:	75 06                	jne    c00158b4 <sendKeyboardToken(KeyboardToken)+0x29c>
c00158ae:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	66 3d 1f 03          	cmp    ax,0x31f
c00158bb:	75 06                	jne    c00158c3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00158bd:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00158c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c6:	66 3d 1a 03          	cmp    ax,0x31a
c00158ca:	75 06                	jne    c00158d2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00158cc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00158d2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00158d6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158d9:	83 f0 01             	xor    eax,0x1
c00158dc:	84 c0                	test   al,al
c00158de:	74 77                	je     c0015957 <sendKeyboardToken(KeyboardToken)+0x33f>
c00158e0:	a0 c1 d9 02 c0       	mov    al,ds:0xc002d9c1
c00158e5:	84 c0                	test   al,al
c00158e7:	74 41                	je     c001592a <sendKeyboardToken(KeyboardToken)+0x312>
c00158e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158ed:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00158f1:	74 2b                	je     c001591e <sendKeyboardToken(KeyboardToken)+0x306>
c00158f3:	8b 15 c4 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dcc4
c00158f9:	89 d0                	mov    eax,edx
c00158fb:	c1 e0 02             	shl    eax,0x2
c00158fe:	01 d0                	add    eax,edx
c0015900:	01 c0                	add    eax,eax
c0015902:	a3 c4 dc 02 c0       	mov    ds:0xc002dcc4,eax
c0015907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590a:	0f b7 c0             	movzx  eax,ax
c001590d:	8d 50 d0             	lea    edx,[eax-0x30]
c0015910:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c0015915:	01 d0                	add    eax,edx
c0015917:	a3 c4 dc 02 c0       	mov    ds:0xc002dcc4,eax
c001591c:	eb 6d                	jmp    c001598b <sendKeyboardToken(KeyboardToken)+0x373>
c001591e:	c7 05 c4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcc4,0x0
c0015928:	eb 61                	jmp    c001598b <sendKeyboardToken(KeyboardToken)+0x373>
c001592a:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c001592f:	85 c0                	test   eax,eax
c0015931:	74 18                	je     c001594b <sendKeyboardToken(KeyboardToken)+0x333>
c0015933:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c0015938:	0f b6 c0             	movzx  eax,al
c001593b:	83 ec 0c             	sub    esp,0xc
c001593e:	50                   	push   eax
c001593f:	e8 16 fc ff ff       	call   c001555a <sendKeyToTerminal(unsigned char)>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001594b:	c7 05 c4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcc4,0x0
c0015955:	eb 34                	jmp    c001598b <sendKeyboardToken(KeyboardToken)+0x373>
c0015957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595a:	66 3d 01 01          	cmp    ax,0x101
c001595e:	75 2b                	jne    c001598b <sendKeyboardToken(KeyboardToken)+0x373>
c0015960:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c0015965:	85 c0                	test   eax,eax
c0015967:	74 18                	je     c0015981 <sendKeyboardToken(KeyboardToken)+0x369>
c0015969:	a1 c4 dc 02 c0       	mov    eax,ds:0xc002dcc4
c001596e:	0f b6 c0             	movzx  eax,al
c0015971:	83 ec 0c             	sub    esp,0xc
c0015974:	50                   	push   eax
c0015975:	e8 e0 fb ff ff       	call   c001555a <sendKeyToTerminal(unsigned char)>
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015981:	c7 05 c4 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dcc4,0x0
c001598b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001598e:	83 f0 01             	xor    eax,0x1
c0015991:	84 c0                	test   al,al
c0015993:	74 4c                	je     c00159e1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015995:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015998:	83 f0 01             	xor    eax,0x1
c001599b:	84 c0                	test   al,al
c001599d:	74 42                	je     c00159e1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001599f:	a0 c0 d9 02 c0       	mov    al,ds:0xc002d9c0
c00159a4:	83 f0 01             	xor    eax,0x1
c00159a7:	84 c0                	test   al,al
c00159a9:	74 36                	je     c00159e1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ae:	66 83 f8 1f          	cmp    ax,0x1f
c00159b2:	76 09                	jbe    c00159bd <sendKeyboardToken(KeyboardToken)+0x3a5>
c00159b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b7:	66 83 f8 7e          	cmp    ax,0x7e
c00159bb:	76 12                	jbe    c00159cf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c0:	66 83 f8 0a          	cmp    ax,0xa
c00159c4:	74 09                	je     c00159cf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c9:	66 83 f8 08          	cmp    ax,0x8
c00159cd:	75 12                	jne    c00159e1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d2:	0f b6 c0             	movzx  eax,al
c00159d5:	83 ec 0c             	sub    esp,0xc
c00159d8:	50                   	push   eax
c00159d9:	e8 7c fb ff ff       	call   c001555a <sendKeyToTerminal(unsigned char)>
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159e4:	83 f0 01             	xor    eax,0x1
c00159e7:	84 c0                	test   al,al
c00159e9:	74 4f                	je     c0015a3a <sendKeyboardToken(KeyboardToken)+0x422>
c00159eb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159ee:	83 f0 01             	xor    eax,0x1
c00159f1:	84 c0                	test   al,al
c00159f3:	74 45                	je     c0015a3a <sendKeyboardToken(KeyboardToken)+0x422>
c00159f5:	a0 c0 d9 02 c0       	mov    al,ds:0xc002d9c0
c00159fa:	84 c0                	test   al,al
c00159fc:	74 3c                	je     c0015a3a <sendKeyboardToken(KeyboardToken)+0x422>
c00159fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a01:	66 83 f8 3f          	cmp    ax,0x3f
c0015a05:	76 33                	jbe    c0015a3a <sendKeyboardToken(KeyboardToken)+0x422>
c0015a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0a:	66 83 f8 7f          	cmp    ax,0x7f
c0015a0e:	77 2a                	ja     c0015a3a <sendKeyboardToken(KeyboardToken)+0x422>
c0015a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a13:	88 c2                	mov    dl,al
c0015a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a18:	66 83 f8 5f          	cmp    ax,0x5f
c0015a1c:	76 04                	jbe    c0015a22 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015a1e:	b0 20                	mov    al,0x20
c0015a20:	eb 02                	jmp    c0015a24 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015a22:	b0 00                	mov    al,0x0
c0015a24:	29 c2                	sub    edx,eax
c0015a26:	88 d0                	mov    al,dl
c0015a28:	83 e8 40             	sub    eax,0x40
c0015a2b:	0f b6 c0             	movzx  eax,al
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	50                   	push   eax
c0015a32:	e8 23 fb ff ff       	call   c001555a <sendKeyToTerminal(unsigned char)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3d:	66 3d 00 03          	cmp    ax,0x300
c0015a41:	75 0f                	jne    c0015a52 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a43:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a46:	83 f0 01             	xor    eax,0x1
c0015a49:	84 c0                	test   al,al
c0015a4b:	74 05                	je     c0015a52 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a4d:	e8 0b a9 ff ff       	call   c001035d <doTerminalCycle()>
c0015a52:	90                   	nop
c0015a53:	c9                   	leave  
c0015a54:	c3                   	ret    

c0015a55 <clearInternalKeybuffer(VgaText*)>:
c0015a55:	55                   	push   ebp
c0015a56:	89 e5                	mov    ebp,esp
c0015a58:	83 ec 08             	sub    esp,0x8
c0015a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5e:	05 98 01 00 00       	add    eax,0x198
c0015a63:	83 ec 0c             	sub    esp,0xc
c0015a66:	50                   	push   eax
c0015a67:	e8 00 ad fe ff       	call   c000076c <strlen>
c0015a6c:	83 c4 10             	add    esp,0x10
c0015a6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a72:	81 c2 98 01 00 00    	add    edx,0x198
c0015a78:	83 ec 04             	sub    esp,0x4
c0015a7b:	50                   	push   eax
c0015a7c:	6a 00                	push   0x0
c0015a7e:	52                   	push   edx
c0015a7f:	e8 cc ac fe ff       	call   c0000750 <memset>
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	90                   	nop
c0015a88:	c9                   	leave  
c0015a89:	c3                   	ret    

c0015a8a <readKeyboard(VgaText*, char*, unsigned long)>:
c0015a8a:	55                   	push   ebp
c0015a8b:	89 e5                	mov    ebp,esp
c0015a8d:	83 ec 18             	sub    esp,0x18
c0015a90:	a1 a8 d8 02 c0       	mov    eax,ds:0xc002d8a8
c0015a95:	85 c0                	test   eax,eax
c0015a97:	74 2a                	je     c0015ac3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015a99:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015a9f:	8b 0d a8 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8a8
c0015aa5:	83 ec 04             	sub    esp,0x4
c0015aa8:	68 c0 d8 02 c0       	push   0xc002d8c0
c0015aad:	83 ec 08             	sub    esp,0x8
c0015ab0:	89 e2                	mov    edx,esp
c0015ab2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015ab5:	89 02                	mov    DWORD PTR [edx],eax
c0015ab7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015aba:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015abe:	ff d1                	call   ecx
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	fb                   	sti    
c0015ac4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015acb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015acf:	0f 84 a1 00 00 00    	je     c0015b76 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ade:	84 c0                	test   al,al
c0015ae0:	75 28                	jne    c0015b0a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015ae2:	fa                   	cli    
c0015ae3:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015ae8:	40                   	inc    eax
c0015ae9:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015aee:	e8 c8 7d 00 00       	call   c001d8bb <schedule()>
c0015af3:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015af8:	48                   	dec    eax
c0015af9:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0015afe:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0015b03:	85 c0                	test   eax,eax
c0015b05:	75 ce                	jne    c0015ad5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b07:	fb                   	sti    
c0015b08:	eb cb                	jmp    c0015ad5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b0d:	8d 50 01             	lea    edx,[eax+0x1]
c0015b10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b16:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015b1c:	88 10                	mov    BYTE PTR [eax],dl
c0015b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b21:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015b27:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2d:	05 98 01 00 00       	add    eax,0x198
c0015b32:	83 ec 0c             	sub    esp,0xc
c0015b35:	50                   	push   eax
c0015b36:	e8 31 ac fe ff       	call   c000076c <strlen>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b41:	81 c2 98 01 00 00    	add    edx,0x198
c0015b47:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015b4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b4d:	81 c2 98 01 00 00    	add    edx,0x198
c0015b53:	83 ec 04             	sub    esp,0x4
c0015b56:	50                   	push   eax
c0015b57:	51                   	push   ecx
c0015b58:	52                   	push   edx
c0015b59:	e8 2a ab fe ff       	call   c0000688 <memmove>
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015b64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015b67:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015b6b:	0f 85 5a ff ff ff    	jne    c0015acb <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015b71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b74:	eb 03                	jmp    c0015b79 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015b76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b79:	c9                   	leave  
c0015b7a:	c3                   	ret    
c0015b7b:	90                   	nop

c0015b7c <Keyboard::Keyboard(char const*)>:
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b83:	83 ec 08             	sub    esp,0x8
c0015b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b8a:	50                   	push   eax
c0015b8b:	e8 70 e0 ff ff       	call   c0013c00 <Device::Device(char const*)>
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c0015b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b9c:	89 10                	mov    DWORD PTR [eax],edx
c0015b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ba2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015bac:	c6 05 a4 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d8a4,0x1
c0015bb3:	90                   	nop
c0015bb4:	83 c4 0c             	add    esp,0xc
c0015bb7:	c3                   	ret    

c0015bb8 <Keyboard::~Keyboard()>:
c0015bb8:	83 ec 0c             	sub    esp,0xc
c0015bbb:	ba 9c ac 02 c0       	mov    edx,0xc002ac9c
c0015bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc4:	89 10                	mov    DWORD PTR [eax],edx
c0015bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bca:	83 ec 0c             	sub    esp,0xc
c0015bcd:	50                   	push   eax
c0015bce:	e8 f7 dc ff ff       	call   c00138ca <Device::~Device()>
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	90                   	nop
c0015bd7:	83 c4 0c             	add    esp,0xc
c0015bda:	c3                   	ret    
c0015bdb:	90                   	nop

c0015bdc <Keyboard::~Keyboard()>:
c0015bdc:	83 ec 0c             	sub    esp,0xc
c0015bdf:	83 ec 0c             	sub    esp,0xc
c0015be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015be6:	e8 cd ff ff ff       	call   c0015bb8 <Keyboard::~Keyboard()>
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	83 ec 08             	sub    esp,0x8
c0015bf1:	68 5c 01 00 00       	push   0x15c
c0015bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bfa:	e8 ed c8 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	83 c4 0c             	add    esp,0xc
c0015c05:	c3                   	ret    

c0015c06 <LogicalDisk::close(int, int, void*)>:
c0015c06:	83 c8 ff             	or     eax,0xffffffff
c0015c09:	c3                   	ret    

c0015c0a <LogicalDisk::~LogicalDisk()>:
c0015c0a:	83 ec 0c             	sub    esp,0xc
c0015c0d:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0015c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c16:	89 10                	mov    DWORD PTR [eax],edx
c0015c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	50                   	push   eax
c0015c20:	e8 a5 dc ff ff       	call   c00138ca <Device::~Device()>
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	90                   	nop
c0015c29:	83 c4 0c             	add    esp,0xc
c0015c2c:	c3                   	ret    
c0015c2d:	90                   	nop

c0015c2e <LogicalDisk::~LogicalDisk()>:
c0015c2e:	83 ec 0c             	sub    esp,0xc
c0015c31:	83 ec 0c             	sub    esp,0xc
c0015c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c38:	e8 cd ff ff ff       	call   c0015c0a <LogicalDisk::~LogicalDisk()>
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	83 ec 08             	sub    esp,0x8
c0015c43:	68 74 01 00 00       	push   0x174
c0015c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c4c:	e8 9b c8 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0015c51:	83 c4 10             	add    esp,0x10
c0015c54:	83 c4 0c             	add    esp,0xc
c0015c57:	c3                   	ret    

c0015c58 <LogicalDisk::open(int, int, void*)>:
c0015c58:	83 ec 18             	sub    esp,0x18
c0015c5b:	68 c8 ac 02 c0       	push   0xc002acc8
c0015c60:	e8 ca 40 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0015c65:	83 c8 ff             	or     eax,0xffffffff
c0015c68:	83 c4 1c             	add    esp,0x1c
c0015c6b:	c3                   	ret    

c0015c6c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015c6c:	53                   	push   ebx
c0015c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c79:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015c7f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015c85:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015c8b:	77 10                	ja     c0015c9d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015c8d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015c93:	89 d3                	mov    ebx,edx
c0015c95:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015c9b:	72 05                	jb     c0015ca2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015c9d:	83 c8 ff             	or     eax,0xffffffff
c0015ca0:	89 c2                	mov    edx,eax
c0015ca2:	5b                   	pop    ebx
c0015ca3:	c3                   	ret    

c0015ca4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015ca4:	56                   	push   esi
c0015ca5:	83 c8 ff             	or     eax,0xffffffff
c0015ca8:	53                   	push   ebx
c0015ca9:	89 c2                	mov    edx,eax
c0015cab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015cb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015cb7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cbd:	77 27                	ja     c0015ce6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cbf:	89 d8                	mov    eax,ebx
c0015cc1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015cc7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ccd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cd2:	89 c2                	mov    edx,eax
c0015cd4:	73 10                	jae    c0015ce6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cd6:	89 c8                	mov    eax,ecx
c0015cd8:	89 da                	mov    edx,ebx
c0015cda:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015ce0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015ce6:	5b                   	pop    ebx
c0015ce7:	5e                   	pop    esi
c0015ce8:	c3                   	ret    
c0015ce9:	90                   	nop

c0015cea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015cea:	83 ec 1c             	sub    esp,0x1c
c0015ced:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cfd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d01:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d10:	83 ec 08             	sub    esp,0x8
c0015d13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d17:	50                   	push   eax
c0015d18:	e8 e3 de ff ff       	call   c0013c00 <Device::Device(char const*)>
c0015d1d:	83 c4 10             	add    esp,0x10
c0015d20:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c0015d25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d29:	89 10                	mov    DWORD PTR [eax],edx
c0015d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d2f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d3a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d45:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015d4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d5b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015d61:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015d67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d72:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015d78:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d86:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d90:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015d9a:	90                   	nop
c0015d9b:	83 c4 1c             	add    esp,0x1c
c0015d9e:	c3                   	ret    
c0015d9f:	90                   	nop

c0015da0 <LogicalDisk::assignDriveLetter()>:
c0015da0:	55                   	push   ebp
c0015da1:	57                   	push   edi
c0015da2:	56                   	push   esi
c0015da3:	53                   	push   ebx
c0015da4:	83 ec 14             	sub    esp,0x14
c0015da7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015dab:	8b 3d e0 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dce0
c0015db1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015db7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015dbb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015dc1:	8b 3d e4 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dce4
c0015dc7:	3c 01                	cmp    al,0x1
c0015dc9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015dcd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015dd1:	19 c0                	sbb    eax,eax
c0015dd3:	83 e0 02             	and    eax,0x2
c0015dd6:	83 c0 41             	add    eax,0x41
c0015dd9:	0f be e8             	movsx  ebp,al
c0015ddc:	3c 43                	cmp    al,0x43
c0015dde:	75 10                	jne    c0015df0 <LogicalDisk::assignDriveLetter()+0x50>
c0015de0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015de7:	75 5d                	jne    c0015e46 <LogicalDisk::assignDriveLetter()+0xa6>
c0015de9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015dee:	75 56                	jne    c0015e46 <LogicalDisk::assignDriveLetter()+0xa6>
c0015df0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015df3:	ba 01 00 00 00       	mov    edx,0x1
c0015df8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015dfc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e00:	d3 e2                	shl    edx,cl
c0015e02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e06:	89 d7                	mov    edi,edx
c0015e08:	89 d6                	mov    esi,edx
c0015e0a:	c1 ff 1f             	sar    edi,0x1f
c0015e0d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e11:	21 f9                	and    ecx,edi
c0015e13:	09 d1                	or     ecx,edx
c0015e15:	75 2f                	jne    c0015e46 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e1f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e25:	09 f2                	or     edx,esi
c0015e27:	89 15 e0 dc 02 c0    	mov    DWORD PTR ds:0xc002dce0,edx
c0015e2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e31:	09 fa                	or     edx,edi
c0015e33:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015e37:	89 15 e4 dc 02 c0    	mov    DWORD PTR ds:0xc002dce4,edx
c0015e3d:	89 1c bd 00 dd 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2300],ebx
c0015e44:	eb 08                	jmp    c0015e4e <LogicalDisk::assignDriveLetter()+0xae>
c0015e46:	45                   	inc    ebp
c0015e47:	40                   	inc    eax
c0015e48:	3c 5b                	cmp    al,0x5b
c0015e4a:	75 90                	jne    c0015ddc <LogicalDisk::assignDriveLetter()+0x3c>
c0015e4c:	31 c0                	xor    eax,eax
c0015e4e:	83 c4 14             	add    esp,0x14
c0015e51:	5b                   	pop    ebx
c0015e52:	5e                   	pop    esi
c0015e53:	5f                   	pop    edi
c0015e54:	5d                   	pop    ebp
c0015e55:	c3                   	ret    

c0015e56 <LogicalDisk::mount()>:
c0015e56:	56                   	push   esi
c0015e57:	53                   	push   ebx
c0015e58:	53                   	push   ebx
c0015e59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e5d:	8b 1d 74 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d874
c0015e63:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015e6d:	85 db                	test   ebx,ebx
c0015e6f:	74 27                	je     c0015e98 <LogicalDisk::mount()+0x42>
c0015e71:	51                   	push   ecx
c0015e72:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015e79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e7b:	83 e8 41             	sub    eax,0x41
c0015e7e:	50                   	push   eax
c0015e7f:	56                   	push   esi
c0015e80:	53                   	push   ebx
c0015e81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	84 c0                	test   al,al
c0015e89:	74 08                	je     c0015e93 <LogicalDisk::mount()+0x3d>
c0015e8b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015e91:	eb 07                	jmp    c0015e9a <LogicalDisk::mount()+0x44>
c0015e93:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e96:	eb d5                	jmp    c0015e6d <LogicalDisk::mount()+0x17>
c0015e98:	31 c0                	xor    eax,eax
c0015e9a:	5a                   	pop    edx
c0015e9b:	5b                   	pop    ebx
c0015e9c:	5e                   	pop    esi
c0015e9d:	c3                   	ret    

c0015e9e <LogicalDisk::unmount()>:
c0015e9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015eac:	c3                   	ret    
c0015ead:	90                   	nop

c0015eae <LogicalDisk::eject()>:
c0015eae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015eb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015eba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ebe:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015ec1:	90                   	nop

c0015ec2 <LogicalDisk::unassignDriveLetter()>:
c0015ec2:	57                   	push   edi
c0015ec3:	56                   	push   esi
c0015ec4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ec8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015ecf:	84 c9                	test   cl,cl
c0015ed1:	75 0f                	jne    c0015ee2 <LogicalDisk::unassignDriveLetter()+0x20>
c0015ed3:	c7 44 24 0c ec ac 02 c0 	mov    DWORD PTR [esp+0xc],0xc002acec
c0015edb:	5e                   	pop    esi
c0015edc:	5f                   	pop    edi
c0015edd:	e9 4d 3e 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>
c0015ee2:	83 e9 41             	sub    ecx,0x41
c0015ee5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015eec:	b8 01 00 00 00       	mov    eax,0x1
c0015ef1:	c7 04 8d 00 dd 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2300],0x0
c0015efc:	d3 e0                	shl    eax,cl
c0015efe:	89 c7                	mov    edi,eax
c0015f00:	f7 d0                	not    eax
c0015f02:	c1 ff 1f             	sar    edi,0x1f
c0015f05:	21 05 e0 dc 02 c0    	and    DWORD PTR ds:0xc002dce0,eax
c0015f0b:	89 fe                	mov    esi,edi
c0015f0d:	f7 d6                	not    esi
c0015f0f:	21 35 e4 dc 02 c0    	and    DWORD PTR ds:0xc002dce4,esi
c0015f15:	5e                   	pop    esi
c0015f16:	5f                   	pop    edi
c0015f17:	c3                   	ret    

c0015f18 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f18:	57                   	push   edi
c0015f19:	56                   	push   esi
c0015f1a:	53                   	push   ebx
c0015f1b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f23:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f2b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f31:	77 41                	ja     c0015f74 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015f33:	99                   	cdq    
c0015f34:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f3a:	01 c8                	add    eax,ecx
c0015f3c:	11 da                	adc    edx,ebx
c0015f3e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f44:	19 d7                	sbb    edi,edx
c0015f46:	72 33                	jb     c0015f7b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015f48:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f4e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f54:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f58:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f5c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f6c:	5b                   	pop    ebx
c0015f6d:	5e                   	pop    esi
c0015f6e:	5f                   	pop    edi
c0015f6f:	e9 cc 0a 00 00       	jmp    c0016a40 <VCache::read(unsigned long long, int, void*)>
c0015f74:	b8 05 00 00 00       	mov    eax,0x5
c0015f79:	eb 05                	jmp    c0015f80 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015f7b:	b8 07 00 00 00       	mov    eax,0x7
c0015f80:	5b                   	pop    ebx
c0015f81:	5e                   	pop    esi
c0015f82:	5f                   	pop    edi
c0015f83:	c3                   	ret    

c0015f84 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015f84:	57                   	push   edi
c0015f85:	56                   	push   esi
c0015f86:	53                   	push   ebx
c0015f87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f97:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f9d:	77 41                	ja     c0015fe0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015f9f:	99                   	cdq    
c0015fa0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fa6:	01 c8                	add    eax,ecx
c0015fa8:	11 da                	adc    edx,ebx
c0015faa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fb0:	19 d7                	sbb    edi,edx
c0015fb2:	72 33                	jb     c0015fe7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015fb4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015fba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015fc0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015fc4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015fc8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015fce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fd8:	5b                   	pop    ebx
c0015fd9:	5e                   	pop    esi
c0015fda:	5f                   	pop    edi
c0015fdb:	e9 76 09 00 00       	jmp    c0016956 <VCache::write(unsigned long long, int, void*)>
c0015fe0:	b8 05 00 00 00       	mov    eax,0x5
c0015fe5:	eb 05                	jmp    c0015fec <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015fe7:	b8 07 00 00 00       	mov    eax,0x7
c0015fec:	5b                   	pop    ebx
c0015fed:	5e                   	pop    esi
c0015fee:	5f                   	pop    edi
c0015fef:	c3                   	ret    

c0015ff0 <Mouse::Mouse(char const*)>:
c0015ff0:	83 ec 0c             	sub    esp,0xc
c0015ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff7:	83 ec 08             	sub    esp,0x8
c0015ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ffe:	50                   	push   eax
c0015fff:	e8 fc db ff ff       	call   c0013c00 <Device::Device(char const*)>
c0016004:	83 c4 10             	add    esp,0x10
c0016007:	ba 40 ad 02 c0       	mov    edx,0xc002ad40
c001600c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016010:	89 10                	mov    DWORD PTR [eax],edx
c0016012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016016:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016020:	90                   	nop
c0016021:	83 c4 0c             	add    esp,0xc
c0016024:	c3                   	ret    
c0016025:	90                   	nop

c0016026 <Mouse::~Mouse()>:
c0016026:	83 ec 0c             	sub    esp,0xc
c0016029:	ba 40 ad 02 c0       	mov    edx,0xc002ad40
c001602e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016032:	89 10                	mov    DWORD PTR [eax],edx
c0016034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016038:	83 ec 0c             	sub    esp,0xc
c001603b:	50                   	push   eax
c001603c:	e8 89 d8 ff ff       	call   c00138ca <Device::~Device()>
c0016041:	83 c4 10             	add    esp,0x10
c0016044:	90                   	nop
c0016045:	83 c4 0c             	add    esp,0xc
c0016048:	c3                   	ret    
c0016049:	90                   	nop

c001604a <Mouse::~Mouse()>:
c001604a:	83 ec 0c             	sub    esp,0xc
c001604d:	83 ec 0c             	sub    esp,0xc
c0016050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016054:	e8 cd ff ff ff       	call   c0016026 <Mouse::~Mouse()>
c0016059:	83 c4 10             	add    esp,0x10
c001605c:	83 ec 08             	sub    esp,0x8
c001605f:	68 58 01 00 00       	push   0x158
c0016064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016068:	e8 7f c4 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001606d:	83 c4 10             	add    esp,0x10
c0016070:	83 c4 0c             	add    esp,0xc
c0016073:	c3                   	ret    

c0016074 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016074:	55                   	push   ebp
c0016075:	57                   	push   edi
c0016076:	56                   	push   esi
c0016077:	53                   	push   ebx
c0016078:	81 ec 28 01 00 00    	sub    esp,0x128
c001607e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016085:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001608c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016093:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001609a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001609e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00160a2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160a9:	e8 4e dc ff ff       	call   c0013cfc <Device::getName()>
c00160ae:	5a                   	pop    edx
c00160af:	59                   	pop    ecx
c00160b0:	50                   	push   eax
c00160b1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00160b5:	55                   	push   ebp
c00160b6:	e8 51 a7 fe ff       	call   c000080c <strcpy>
c00160bb:	5b                   	pop    ebx
c00160bc:	58                   	pop    eax
c00160bd:	68 64 ad 02 c0       	push   0xc002ad64
c00160c2:	55                   	push   ebp
c00160c3:	e8 84 a8 fe ff       	call   c000094c <strcat>
c00160c8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00160cf:	e8 c8 94 ff ff       	call   c000f59c <malloc>
c00160d4:	83 c4 0c             	add    esp,0xc
c00160d7:	89 c3                	mov    ebx,eax
c00160d9:	57                   	push   edi
c00160da:	56                   	push   esi
c00160db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160e3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00160ea:	55                   	push   ebp
c00160eb:	50                   	push   eax
c00160ec:	e8 f9 fb ff ff       	call   c0015cea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00160f1:	83 c4 14             	add    esp,0x14
c00160f4:	53                   	push   ebx
c00160f5:	e8 a6 fc ff ff       	call   c0015da0 <LogicalDisk::assignDriveLetter()>
c00160fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160fd:	e8 54 fd ff ff       	call   c0015e56 <LogicalDisk::mount()>
c0016102:	58                   	pop    eax
c0016103:	5a                   	pop    edx
c0016104:	53                   	push   ebx
c0016105:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001610c:	e8 eb d8 ff ff       	call   c00139fc <Device::addChild(Device*)>
c0016111:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016117:	5b                   	pop    ebx
c0016118:	5e                   	pop    esi
c0016119:	5f                   	pop    edi
c001611a:	5d                   	pop    ebp
c001611b:	c3                   	ret    

c001611c <createPartitionsForDisk(PhysicalDisk*)>:
c001611c:	55                   	push   ebp
c001611d:	57                   	push   edi
c001611e:	56                   	push   esi
c001611f:	53                   	push   ebx
c0016120:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016126:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001612d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016133:	3d 00 02 00 00       	cmp    eax,0x200
c0016138:	74 27                	je     c0016161 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001613a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016140:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016146:	83 ec 10             	sub    esp,0x10
c0016149:	0f a4 f7 0a          	shld   edi,esi,0xa
c001614d:	99                   	cdq    
c001614e:	c1 e6 0a             	shl    esi,0xa
c0016151:	52                   	push   edx
c0016152:	89 fd                	mov    ebp,edi
c0016154:	50                   	push   eax
c0016155:	55                   	push   ebp
c0016156:	56                   	push   esi
c0016157:	e8 a8 04 01 00       	call   c0026604 <__udivdi3>
c001615c:	e9 b1 00 00 00       	jmp    c0016212 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016161:	83 ec 0c             	sub    esp,0xc
c0016164:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016166:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001616a:	56                   	push   esi
c001616b:	6a 01                	push   0x1
c001616d:	6a 00                	push   0x0
c001616f:	6a 00                	push   0x0
c0016171:	53                   	push   ebx
c0016172:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016175:	83 c4 20             	add    esp,0x20
c0016178:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016180:	75 0a                	jne    c001618c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016182:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001618a:	74 2c                	je     c00161b8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001618c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016192:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016198:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001619e:	83 ec 10             	sub    esp,0x10
c00161a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161a5:	89 f7                	mov    edi,esi
c00161a7:	c1 e0 0a             	shl    eax,0xa
c00161aa:	c1 ff 1f             	sar    edi,0x1f
c00161ad:	57                   	push   edi
c00161ae:	56                   	push   esi
c00161af:	52                   	push   edx
c00161b0:	50                   	push   eax
c00161b1:	e8 4e 04 01 00       	call   c0026604 <__udivdi3>
c00161b6:	eb 5a                	jmp    c0016212 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161b8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00161bf:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00161c6:	83 e1 7f             	and    ecx,0x7f
c00161c9:	83 e0 7f             	and    eax,0x7f
c00161cc:	01 c1                	add    ecx,eax
c00161ce:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00161d5:	83 e0 7f             	and    eax,0x7f
c00161d8:	01 c1                	add    ecx,eax
c00161da:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00161e1:	83 e0 7f             	and    eax,0x7f
c00161e4:	00 c1                	add    cl,al
c00161e6:	74 41                	je     c0016229 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00161e8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161ee:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161f4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161fa:	83 ec 10             	sub    esp,0x10
c00161fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016201:	89 f7                	mov    edi,esi
c0016203:	c1 e0 0a             	shl    eax,0xa
c0016206:	c1 ff 1f             	sar    edi,0x1f
c0016209:	57                   	push   edi
c001620a:	56                   	push   esi
c001620b:	52                   	push   edx
c001620c:	50                   	push   eax
c001620d:	e8 f2 03 01 00       	call   c0026604 <__udivdi3>
c0016212:	83 c4 14             	add    esp,0x14
c0016215:	52                   	push   edx
c0016216:	50                   	push   eax
c0016217:	6a 00                	push   0x0
c0016219:	6a 00                	push   0x0
c001621b:	53                   	push   ebx
c001621c:	e8 53 fe ff ff       	call   c0016074 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016221:	83 c4 20             	add    esp,0x20
c0016224:	e9 79 01 00 00       	jmp    c00163a2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016229:	89 f0                	mov    eax,esi
c001622b:	31 f6                	xor    esi,esi
c001622d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016234:	75 02                	jne    c0016238 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016236:	89 f1                	mov    ecx,esi
c0016238:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001623f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016246:	c1 e2 08             	shl    edx,0x8
c0016249:	c1 e7 10             	shl    edi,0x10
c001624c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016254:	09 fa                	or     edx,edi
c0016256:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001625e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016265:	83 c0 10             	add    eax,0x10
c0016268:	09 fa                	or     edx,edi
c001626a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016271:	c1 e7 18             	shl    edi,0x18
c0016274:	09 fa                	or     edx,edi
c0016276:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001627d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016281:	c1 e7 10             	shl    edi,0x10
c0016284:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001628b:	c1 e2 08             	shl    edx,0x8
c001628e:	09 fa                	or     edx,edi
c0016290:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016297:	09 fa                	or     edx,edi
c0016299:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00162a0:	c1 e7 18             	shl    edi,0x18
c00162a3:	09 fa                	or     edx,edi
c00162a5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00162a9:	46                   	inc    esi
c00162aa:	83 fe 04             	cmp    esi,0x4
c00162ad:	0f 85 7a ff ff ff    	jne    c001622d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00162b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b7:	83 f0 01             	xor    eax,0x1
c00162ba:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00162be:	75 57                	jne    c0016317 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162c4:	83 f0 01             	xor    eax,0x1
c00162c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00162cb:	75 4a                	jne    c0016317 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162cd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00162d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00162d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00162e1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162e7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162ed:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162f7:	89 f7                	mov    edi,esi
c00162f9:	c1 e0 0a             	shl    eax,0xa
c00162fc:	c1 ff 1f             	sar    edi,0x1f
c00162ff:	57                   	push   edi
c0016300:	56                   	push   esi
c0016301:	52                   	push   edx
c0016302:	50                   	push   eax
c0016303:	e8 fc 02 01 00       	call   c0026604 <__udivdi3>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001630f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016313:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016317:	84 c9                	test   cl,cl
c0016319:	74 53                	je     c001636e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001631b:	0f b6 c9             	movzx  ecx,cl
c001631e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016322:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016326:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001632a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001632e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016332:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016336:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001633a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001633e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016342:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001634a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001634e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016352:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016356:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001635a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001635e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016362:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016366:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001636a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001636e:	31 ed                	xor    ebp,ebp
c0016370:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016374:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016378:	89 f8                	mov    eax,edi
c001637a:	09 f0                	or     eax,esi
c001637c:	74 1e                	je     c001639c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001637e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016382:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016386:	89 d1                	mov    ecx,edx
c0016388:	09 c1                	or     ecx,eax
c001638a:	74 10                	je     c001639c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	57                   	push   edi
c0016390:	56                   	push   esi
c0016391:	52                   	push   edx
c0016392:	50                   	push   eax
c0016393:	53                   	push   ebx
c0016394:	e8 db fc ff ff       	call   c0016074 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016399:	83 c4 20             	add    esp,0x20
c001639c:	45                   	inc    ebp
c001639d:	83 fd 04             	cmp    ebp,0x4
c00163a0:	75 ce                	jne    c0016370 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00163a2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00163a8:	5b                   	pop    ebx
c00163a9:	5e                   	pop    esi
c00163aa:	5f                   	pop    edi
c00163ab:	5d                   	pop    ebp
c00163ac:	c3                   	ret    
c00163ad:	90                   	nop

c00163ae <Serial::Serial(char const*)>:
c00163ae:	83 ec 0c             	sub    esp,0xc
c00163b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b5:	83 ec 08             	sub    esp,0x8
c00163b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163bc:	50                   	push   eax
c00163bd:	e8 3e d8 ff ff       	call   c0013c00 <Device::Device(char const*)>
c00163c2:	83 c4 10             	add    esp,0x10
c00163c5:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c00163ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ce:	89 10                	mov    DWORD PTR [eax],edx
c00163d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00163de:	90                   	nop
c00163df:	83 c4 0c             	add    esp,0xc
c00163e2:	c3                   	ret    
c00163e3:	90                   	nop

c00163e4 <Serial::~Serial()>:
c00163e4:	83 ec 0c             	sub    esp,0xc
c00163e7:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c00163ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f0:	89 10                	mov    DWORD PTR [eax],edx
c00163f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f6:	83 ec 0c             	sub    esp,0xc
c00163f9:	50                   	push   eax
c00163fa:	e8 cb d4 ff ff       	call   c00138ca <Device::~Device()>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	90                   	nop
c0016403:	83 c4 0c             	add    esp,0xc
c0016406:	c3                   	ret    
c0016407:	90                   	nop

c0016408 <Serial::~Serial()>:
c0016408:	83 ec 0c             	sub    esp,0xc
c001640b:	83 ec 0c             	sub    esp,0xc
c001640e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016412:	e8 cd ff ff ff       	call   c00163e4 <Serial::~Serial()>
c0016417:	83 c4 10             	add    esp,0x10
c001641a:	83 ec 08             	sub    esp,0x8
c001641d:	68 58 01 00 00       	push   0x158
c0016422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016426:	e8 c1 c0 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	83 c4 0c             	add    esp,0xc
c0016431:	c3                   	ret    

c0016432 <Timer::Timer(char const*)>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016439:	83 ec 08             	sub    esp,0x8
c001643c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016440:	50                   	push   eax
c0016441:	e8 ba d7 ff ff       	call   c0013c00 <Device::Device(char const*)>
c0016446:	83 c4 10             	add    esp,0x10
c0016449:	ba bc ad 02 c0       	mov    edx,0xc002adbc
c001644e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016452:	89 10                	mov    DWORD PTR [eax],edx
c0016454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016458:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016462:	90                   	nop
c0016463:	83 c4 0c             	add    esp,0xc
c0016466:	c3                   	ret    
c0016467:	90                   	nop

c0016468 <Timer::~Timer()>:
c0016468:	83 ec 0c             	sub    esp,0xc
c001646b:	ba bc ad 02 c0       	mov    edx,0xc002adbc
c0016470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016474:	89 10                	mov    DWORD PTR [eax],edx
c0016476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647a:	83 ec 0c             	sub    esp,0xc
c001647d:	50                   	push   eax
c001647e:	e8 47 d4 ff ff       	call   c00138ca <Device::~Device()>
c0016483:	83 c4 10             	add    esp,0x10
c0016486:	90                   	nop
c0016487:	83 c4 0c             	add    esp,0xc
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <Timer::~Timer()>:
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	83 ec 0c             	sub    esp,0xc
c0016492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016496:	e8 cd ff ff ff       	call   c0016468 <Timer::~Timer()>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	83 ec 08             	sub    esp,0x8
c00164a1:	68 5c 01 00 00       	push   0x15c
c00164a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164aa:	e8 3d c0 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	83 c4 0c             	add    esp,0xc
c00164b5:	c3                   	ret    

c00164b6 <Timer::read()>:
c00164b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164c0:	c3                   	ret    

c00164c1 <timerHandler(unsigned long long)>:
c00164c1:	55                   	push   ebp
c00164c2:	57                   	push   edi
c00164c3:	56                   	push   esi
c00164c4:	53                   	push   ebx
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00164cc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00164d0:	01 35 70 dd 02 c0    	add    DWORD PTR ds:0xc002dd70,esi
c00164d6:	11 3d 74 dd 02 c0    	adc    DWORD PTR ds:0xc002dd74,edi
c00164dc:	80 3d 0d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d70d,0x0
c00164e3:	0f 84 42 01 00 00    	je     c001662b <timerHandler(unsigned long long)+0x16a>
c00164e9:	fa                   	cli    
c00164ea:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c00164f9:	68 38 0c 03 c0       	push   0xc0030c38
c00164fe:	e8 5b 21 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	84 c0                	test   al,al
c0016508:	0f 85 a2 00 00 00    	jne    c00165b0 <timerHandler(unsigned long long)+0xef>
c001650e:	83 ec 0c             	sub    esp,0xc
c0016511:	68 38 0c 03 c0       	push   0xc0030c38
c0016516:	e8 5f 21 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	89 c3                	mov    ebx,eax
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	68 38 0c 03 c0       	push   0xc0030c38
c0016528:	e8 4d 21 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001652d:	c7 04 24 38 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c38
c0016534:	89 c5                	mov    ebp,eax
c0016536:	e8 47 21 01 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001653b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001653e:	83 c4 10             	add    esp,0x10
c0016541:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016544:	39 15 70 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd70,edx
c001654a:	a1 74 dd 02 c0       	mov    eax,ds:0xc002dd74
c001654f:	19 c8                	sbb    eax,ecx
c0016551:	72 21                	jb     c0016574 <timerHandler(unsigned long long)+0xb3>
c0016553:	83 ec 0c             	sub    esp,0xc
c0016556:	55                   	push   ebp
c0016557:	e8 e2 77 00 00       	call   c001dd3e <unblockTask(ThreadControlBlock*)>
c001655c:	83 c4 10             	add    esp,0x10
c001655f:	39 eb                	cmp    ebx,ebp
c0016561:	75 21                	jne    c0016584 <timerHandler(unsigned long long)+0xc3>
c0016563:	83 ec 0c             	sub    esp,0xc
c0016566:	68 38 0c 03 c0       	push   0xc0030c38
c001656b:	e8 0a 21 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016570:	89 c3                	mov    ebx,eax
c0016572:	eb 0d                	jmp    c0016581 <timerHandler(unsigned long long)+0xc0>
c0016574:	50                   	push   eax
c0016575:	50                   	push   eax
c0016576:	55                   	push   ebp
c0016577:	68 38 0c 03 c0       	push   0xc0030c38
c001657c:	e8 af 21 01 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	68 38 0c 03 c0       	push   0xc0030c38
c001658c:	e8 cd 20 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	84 c0                	test   al,al
c0016596:	75 18                	jne    c00165b0 <timerHandler(unsigned long long)+0xef>
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	68 38 0c 03 c0       	push   0xc0030c38
c00165a0:	e8 d5 20 01 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	39 d8                	cmp    eax,ebx
c00165aa:	0f 85 70 ff ff ff    	jne    c0016520 <timerHandler(unsigned long long)+0x5f>
c00165b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165b5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00165b9:	74 3d                	je     c00165f8 <timerHandler(unsigned long long)+0x137>
c00165bb:	80 3d 0c d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d70c,0x0
c00165c2:	74 34                	je     c00165f8 <timerHandler(unsigned long long)+0x137>
c00165c4:	fa                   	cli    
c00165c5:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c00165cb:	31 d2                	xor    edx,edx
c00165cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165d2:	89 f9                	mov    ecx,edi
c00165d4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00165d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00165df:	39 c6                	cmp    esi,eax
c00165e1:	19 d1                	sbb    ecx,edx
c00165e3:	72 05                	jb     c00165ea <timerHandler(unsigned long long)+0x129>
c00165e5:	e8 d1 72 00 00       	call   c001d8bb <schedule()>
c00165ea:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c00165ef:	48                   	dec    eax
c00165f0:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c00165f5:	75 01                	jne    c00165f8 <timerHandler(unsigned long long)+0x137>
c00165f7:	fb                   	sti    
c00165f8:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c00165fd:	48                   	dec    eax
c00165fe:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c0016603:	75 18                	jne    c001661d <timerHandler(unsigned long long)+0x15c>
c0016605:	83 3d 20 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c20,0x0
c001660c:	74 0f                	je     c001661d <timerHandler(unsigned long long)+0x15c>
c001660e:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c0016618:	e8 9e 72 00 00       	call   c001d8bb <schedule()>
c001661d:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0016622:	48                   	dec    eax
c0016623:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c0016628:	75 01                	jne    c001662b <timerHandler(unsigned long long)+0x16a>
c001662a:	fb                   	sti    
c001662b:	83 c4 0c             	add    esp,0xc
c001662e:	5b                   	pop    ebx
c001662f:	5e                   	pop    esi
c0016630:	5f                   	pop    edi
c0016631:	5d                   	pop    ebp
c0016632:	c3                   	ret    

c0016633 <setupTimer(int)>:
c0016633:	57                   	push   edi
c0016634:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0016639:	56                   	push   esi
c001663a:	53                   	push   ebx
c001663b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001663f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016645:	83 ec 0c             	sub    esp,0xc
c0016648:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001664e:	e8 a9 d6 ff ff       	call   c0013cfc <Device::getName()>
c0016653:	83 c4 10             	add    esp,0x10
c0016656:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016659:	0f 85 8d 00 00 00    	jne    c00166ec <setupTimer(int)+0xb9>
c001665f:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0016664:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001666b:	74 7f                	je     c00166ec <setupTimer(int)+0xb9>
c001666d:	83 ec 0c             	sub    esp,0xc
c0016670:	68 5c 01 00 00       	push   0x15c
c0016675:	e8 22 8f ff ff       	call   c000f59c <malloc>
c001667a:	89 04 24             	mov    DWORD PTR [esp],eax
c001667d:	89 c3                	mov    ebx,eax
c001667f:	e8 56 fb 00 00       	call   c00261da <PIT::PIT()>
c0016684:	59                   	pop    ecx
c0016685:	5f                   	pop    edi
c0016686:	53                   	push   ebx
c0016687:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c001668d:	e8 6a d3 ff ff       	call   c00139fc <Device::addChild(Device*)>
c0016692:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016694:	6a 00                	push   0x0
c0016696:	6a 00                	push   0x0
c0016698:	56                   	push   esi
c0016699:	53                   	push   ebx
c001669a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001669d:	83 c4 14             	add    esp,0x14
c00166a0:	68 60 01 00 00       	push   0x160
c00166a5:	e8 f2 8e ff ff       	call   c000f59c <malloc>
c00166aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00166ad:	89 c7                	mov    edi,eax
c00166af:	e8 d6 f9 00 00       	call   c002608a <APICTimer::APICTimer()>
c00166b4:	6a 00                	push   0x0
c00166b6:	6a 00                	push   0x0
c00166b8:	56                   	push   esi
c00166b9:	57                   	push   edi
c00166ba:	e8 cd f8 00 00       	call   c0025f8c <APICTimer::open(int, int, void*)>
c00166bf:	83 c4 20             	add    esp,0x20
c00166c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166c4:	6a 00                	push   0x0
c00166c6:	6a 00                	push   0x0
c00166c8:	6a 00                	push   0x0
c00166ca:	53                   	push   ebx
c00166cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166ce:	58                   	pop    eax
c00166cf:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00166d4:	5a                   	pop    edx
c00166d5:	57                   	push   edi
c00166d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166dc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00166e2:	e8 15 d3 ff ff       	call   c00139fc <Device::addChild(Device*)>
c00166e7:	83 c4 10             	add    esp,0x10
c00166ea:	eb 33                	jmp    c001671f <setupTimer(int)+0xec>
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 5c 01 00 00       	push   0x15c
c00166f4:	e8 a3 8e ff ff       	call   c000f59c <malloc>
c00166f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00166fc:	89 c3                	mov    ebx,eax
c00166fe:	e8 d7 fa 00 00       	call   c00261da <PIT::PIT()>
c0016703:	58                   	pop    eax
c0016704:	5a                   	pop    edx
c0016705:	53                   	push   ebx
c0016706:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c001670c:	e8 eb d2 ff ff       	call   c00139fc <Device::addChild(Device*)>
c0016711:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016713:	6a 00                	push   0x0
c0016715:	6a 00                	push   0x0
c0016717:	56                   	push   esi
c0016718:	53                   	push   ebx
c0016719:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001671c:	83 c4 20             	add    esp,0x20
c001671f:	89 d8                	mov    eax,ebx
c0016721:	5b                   	pop    ebx
c0016722:	5e                   	pop    esi
c0016723:	5f                   	pop    edi
c0016724:	c3                   	ret    
c0016725:	90                   	nop

c0016726 <VCache::VCache(PhysicalDisk*)>:
c0016726:	53                   	push   ebx
c0016727:	83 ec 18             	sub    esp,0x18
c001672a:	ba ec ad 02 c0       	mov    edx,0xc002adec
c001672f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016733:	89 10                	mov    DWORD PTR [eax],edx
c0016735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016739:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016744:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001674b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016756:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001675d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016761:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016768:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001676f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016773:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001677a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016786:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001678d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016798:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001679c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a0:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00167a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00167b7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167bf:	83 ec 0c             	sub    esp,0xc
c00167c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167c6:	e8 d1 8d ff ff       	call   c000f59c <malloc>
c00167cb:	83 c4 10             	add    esp,0x10
c00167ce:	89 c3                	mov    ebx,eax
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	53                   	push   ebx
c00167d4:	e8 ab 6e 00 00       	call   c001d684 <Mutex::Mutex()>
c00167d9:	83 c4 10             	add    esp,0x10
c00167dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00167eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00167ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00167f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167fd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016807:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001680a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001680e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016814:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001681a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001681e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016821:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016828:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001682c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016830:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016836:	05 00 01 00 00       	add    eax,0x100
c001683b:	c1 e0 04             	shl    eax,0x4
c001683e:	83 ec 0c             	sub    esp,0xc
c0016841:	50                   	push   eax
c0016842:	e8 55 8d ff ff       	call   c000f59c <malloc>
c0016847:	83 c4 10             	add    esp,0x10
c001684a:	89 c2                	mov    edx,eax
c001684c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016850:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016857:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001685e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016862:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016866:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001686a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016870:	c1 e0 07             	shl    eax,0x7
c0016873:	83 ec 0c             	sub    esp,0xc
c0016876:	50                   	push   eax
c0016877:	e8 20 8d ff ff       	call   c000f59c <malloc>
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	89 c2                	mov    edx,eax
c0016881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016885:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016888:	90                   	nop
c0016889:	83 c4 18             	add    esp,0x18
c001688c:	5b                   	pop    ebx
c001688d:	c3                   	ret    

c001688e <VCache::invalidateReadBuffer()>:
c001688e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016892:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016898:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001689c:	c3                   	ret    
c001689d:	90                   	nop

c001689e <VCache::writeWriteBuffer()>:
c001689e:	53                   	push   ebx
c001689f:	83 ec 14             	sub    esp,0x14
c00168a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00168a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00168ab:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00168ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168b1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00168b4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00168b7:	50                   	push   eax
c00168b8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00168bb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00168c2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00168c9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00168cd:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00168d4:	83 c4 28             	add    esp,0x28
c00168d7:	5b                   	pop    ebx
c00168d8:	c3                   	ret    
c00168d9:	90                   	nop

c00168da <VCache::~VCache()>:
c00168da:	83 ec 0c             	sub    esp,0xc
c00168dd:	ba ec ad 02 c0       	mov    edx,0xc002adec
c00168e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e6:	89 10                	mov    DWORD PTR [eax],edx
c00168e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ec:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00168ef:	84 c0                	test   al,al
c00168f1:	74 0f                	je     c0016902 <VCache::~VCache()+0x28>
c00168f3:	83 ec 0c             	sub    esp,0xc
c00168f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168fa:	e8 9f ff ff ff       	call   c001689e <VCache::writeWriteBuffer()>
c00168ff:	83 c4 10             	add    esp,0x10
c0016902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016906:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016909:	83 ec 0c             	sub    esp,0xc
c001690c:	50                   	push   eax
c001690d:	e8 9a 8c ff ff       	call   c000f5ac <free>
c0016912:	83 c4 10             	add    esp,0x10
c0016915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016919:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	50                   	push   eax
c0016920:	e8 87 8c ff ff       	call   c000f5ac <free>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	90                   	nop
c0016929:	83 c4 0c             	add    esp,0xc
c001692c:	c3                   	ret    
c001692d:	90                   	nop

c001692e <VCache::~VCache()>:
c001692e:	83 ec 0c             	sub    esp,0xc
c0016931:	83 ec 0c             	sub    esp,0xc
c0016934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016938:	e8 9d ff ff ff       	call   c00168da <VCache::~VCache()>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	83 ec 08             	sub    esp,0x8
c0016943:	6a 44                	push   0x44
c0016945:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016949:	e8 9e bb ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001694e:	83 c4 10             	add    esp,0x10
c0016951:	83 c4 0c             	add    esp,0xc
c0016954:	c3                   	ret    
c0016955:	90                   	nop

c0016956 <VCache::write(unsigned long long, int, void*)>:
c0016956:	55                   	push   ebp
c0016957:	57                   	push   edi
c0016958:	56                   	push   esi
c0016959:	53                   	push   ebx
c001695a:	83 ec 18             	sub    esp,0x18
c001695d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016961:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016965:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016969:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001696c:	e8 59 72 00 00       	call   c001dbca <Semaphore::acquire()>
c0016971:	83 c4 10             	add    esp,0x10
c0016974:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016978:	74 0c                	je     c0016986 <VCache::write(unsigned long long, int, void*)+0x30>
c001697a:	83 ec 0c             	sub    esp,0xc
c001697d:	53                   	push   ebx
c001697e:	e8 0b ff ff ff       	call   c001688e <VCache::invalidateReadBuffer()>
c0016983:	83 c4 10             	add    esp,0x10
c0016986:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001698a:	74 5c                	je     c00169e8 <VCache::write(unsigned long long, int, void*)+0x92>
c001698c:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001698f:	89 e8                	mov    eax,ebp
c0016991:	99                   	cdq    
c0016992:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016995:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016998:	89 c1                	mov    ecx,eax
c001699a:	89 d0                	mov    eax,edx
c001699c:	31 f1                	xor    ecx,esi
c001699e:	31 f8                	xor    eax,edi
c00169a0:	09 c1                	or     ecx,eax
c00169a2:	75 38                	jne    c00169dc <VCache::write(unsigned long long, int, void*)+0x86>
c00169a4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00169a9:	75 31                	jne    c00169dc <VCache::write(unsigned long long, int, void*)+0x86>
c00169ab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169ae:	89 ef                	mov    edi,ebp
c00169b0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00169b6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169ba:	0f af f9             	imul   edi,ecx
c00169bd:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00169c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169c5:	40                   	inc    eax
c00169c6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00169c9:	83 c0 80             	add    eax,0xffffff80
c00169cc:	75 5c                	jne    c0016a2a <VCache::write(unsigned long long, int, void*)+0xd4>
c00169ce:	83 ec 0c             	sub    esp,0xc
c00169d1:	53                   	push   ebx
c00169d2:	e8 c7 fe ff ff       	call   c001689e <VCache::writeWriteBuffer()>
c00169d7:	83 c4 10             	add    esp,0x10
c00169da:	eb 4e                	jmp    c0016a2a <VCache::write(unsigned long long, int, void*)+0xd4>
c00169dc:	83 ec 0c             	sub    esp,0xc
c00169df:	53                   	push   ebx
c00169e0:	e8 b9 fe ff ff       	call   c001689e <VCache::writeWriteBuffer()>
c00169e5:	83 c4 10             	add    esp,0x10
c00169e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169eb:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00169f0:	7f 22                	jg     c0016a14 <VCache::write(unsigned long long, int, void*)+0xbe>
c00169f2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00169f5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00169f8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00169fc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a00:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016a03:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016a06:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a0c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a12:	eb 16                	jmp    c0016a2a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a21:	57                   	push   edi
c0016a22:	56                   	push   esi
c0016a23:	50                   	push   eax
c0016a24:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a27:	83 c4 20             	add    esp,0x20
c0016a2a:	83 ec 0c             	sub    esp,0xc
c0016a2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a30:	e8 f1 77 00 00       	call   c001e226 <Semaphore::release()>
c0016a35:	83 c4 1c             	add    esp,0x1c
c0016a38:	31 c0                	xor    eax,eax
c0016a3a:	5b                   	pop    ebx
c0016a3b:	5e                   	pop    esi
c0016a3c:	5f                   	pop    edi
c0016a3d:	5d                   	pop    ebp
c0016a3e:	c3                   	ret    
c0016a3f:	90                   	nop

c0016a40 <VCache::read(unsigned long long, int, void*)>:
c0016a40:	55                   	push   ebp
c0016a41:	57                   	push   edi
c0016a42:	56                   	push   esi
c0016a43:	53                   	push   ebx
c0016a44:	83 ec 28             	sub    esp,0x28
c0016a47:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016a4b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a4f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a53:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016a57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a5a:	e8 6b 71 00 00       	call   c001dbca <Semaphore::acquire()>
c0016a5f:	83 c4 10             	add    esp,0x10
c0016a62:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a66:	74 0c                	je     c0016a74 <VCache::read(unsigned long long, int, void*)+0x34>
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	53                   	push   ebx
c0016a6c:	e8 2d fe ff ff       	call   c001689e <VCache::writeWriteBuffer()>
c0016a71:	83 c4 10             	add    esp,0x10
c0016a74:	83 fd 01             	cmp    ebp,0x1
c0016a77:	0f 85 80 00 00 00    	jne    c0016afd <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a84:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016a8b:	75 70                	jne    c0016afd <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a8d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016a90:	89 e9                	mov    ecx,ebp
c0016a92:	f7 d9                	neg    ecx
c0016a94:	89 c8                	mov    eax,ecx
c0016a96:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016a9a:	c1 f8 1f             	sar    eax,0x1f
c0016a9d:	21 f1                	and    ecx,esi
c0016a9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016aa3:	89 c8                	mov    eax,ecx
c0016aa5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016aa9:	21 f9                	and    ecx,edi
c0016aab:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016aaf:	89 ca                	mov    edx,ecx
c0016ab1:	74 0a                	je     c0016abd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ab3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016ab6:	75 05                	jne    c0016abd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ab8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016abb:	74 23                	je     c0016ae0 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016abd:	83 ec 0c             	sub    esp,0xc
c0016ac0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016ac4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016ac8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016acb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016ace:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ad0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ad3:	55                   	push   ebp
c0016ad4:	52                   	push   edx
c0016ad5:	50                   	push   eax
c0016ad6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ada:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016add:	83 c4 20             	add    esp,0x20
c0016ae0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ae3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ae7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016aed:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016af0:	48                   	dec    eax
c0016af1:	21 c6                	and    esi,eax
c0016af3:	0f af f1             	imul   esi,ecx
c0016af6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016af9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016afb:	eb 1d                	jmp    c0016b1a <VCache::read(unsigned long long, int, void*)+0xda>
c0016afd:	83 ec 0c             	sub    esp,0xc
c0016b00:	53                   	push   ebx
c0016b01:	e8 88 fd ff ff       	call   c001688e <VCache::invalidateReadBuffer()>
c0016b06:	5a                   	pop    edx
c0016b07:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b10:	55                   	push   ebp
c0016b11:	57                   	push   edi
c0016b12:	56                   	push   esi
c0016b13:	50                   	push   eax
c0016b14:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016b17:	83 c4 20             	add    esp,0x20
c0016b1a:	83 ec 0c             	sub    esp,0xc
c0016b1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b20:	e8 01 77 00 00       	call   c001e226 <Semaphore::release()>
c0016b25:	83 c4 2c             	add    esp,0x2c
c0016b28:	31 c0                	xor    eax,eax
c0016b2a:	5b                   	pop    ebx
c0016b2b:	5e                   	pop    esi
c0016b2c:	5f                   	pop    edi
c0016b2d:	5d                   	pop    ebp
c0016b2e:	c3                   	ret    
c0016b2f:	90                   	nop

c0016b30 <Video::putrect(int, int, int, int, unsigned int)>:
c0016b30:	55                   	push   ebp
c0016b31:	57                   	push   edi
c0016b32:	56                   	push   esi
c0016b33:	53                   	push   ebx
c0016b34:	83 ec 1c             	sub    esp,0x1c
c0016b37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b3f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b43:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016b47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b4f:	01 df                	add    edi,ebx
c0016b51:	39 fb                	cmp    ebx,edi
c0016b53:	7d 1f                	jge    c0016b74 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016b55:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b59:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016b5d:	7d 12                	jge    c0016b71 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b5f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b65:	53                   	push   ebx
c0016b66:	55                   	push   ebp
c0016b67:	45                   	inc    ebp
c0016b68:	56                   	push   esi
c0016b69:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016b6c:	83 c4 10             	add    esp,0x10
c0016b6f:	eb e8                	jmp    c0016b59 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016b71:	43                   	inc    ebx
c0016b72:	eb dd                	jmp    c0016b51 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016b74:	83 c4 1c             	add    esp,0x1c
c0016b77:	5b                   	pop    ebx
c0016b78:	5e                   	pop    esi
c0016b79:	5f                   	pop    edi
c0016b7a:	5d                   	pop    ebp
c0016b7b:	c3                   	ret    

c0016b7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016b7c:	55                   	push   ebp
c0016b7d:	57                   	push   edi
c0016b7e:	31 ff                	xor    edi,edi
c0016b80:	56                   	push   esi
c0016b81:	53                   	push   ebx
c0016b82:	83 ec 1c             	sub    esp,0x1c
c0016b85:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016b89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b8d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016b94:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016b99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b9d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ba1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ba5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ba8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016bac:	01 f9                	add    ecx,edi
c0016bae:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016bb2:	7d 2f                	jge    c0016be3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016bb4:	31 f6                	xor    esi,esi
c0016bb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016bba:	01 f2                	add    edx,esi
c0016bbc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016bc0:	7d 1a                	jge    c0016bdc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016bc2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bc5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016bc8:	46                   	inc    esi
c0016bc9:	51                   	push   ecx
c0016bca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016bce:	52                   	push   edx
c0016bcf:	55                   	push   ebp
c0016bd0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bda:	eb da                	jmp    c0016bb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016bdc:	47                   	inc    edi
c0016bdd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016be1:	eb c5                	jmp    c0016ba8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016be3:	83 c4 1c             	add    esp,0x1c
c0016be6:	5b                   	pop    ebx
c0016be7:	5e                   	pop    esi
c0016be8:	5f                   	pop    edi
c0016be9:	5d                   	pop    ebp
c0016bea:	c3                   	ret    
c0016beb:	90                   	nop

c0016bec <Video::blit(unsigned int*, int, int, int, int)>:
c0016bec:	55                   	push   ebp
c0016bed:	57                   	push   edi
c0016bee:	56                   	push   esi
c0016bef:	53                   	push   ebx
c0016bf0:	83 ec 1c             	sub    esp,0x1c
c0016bf3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bf7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bfb:	85 c0                	test   eax,eax
c0016bfd:	79 02                	jns    c0016c01 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016bff:	31 c0                	xor    eax,eax
c0016c01:	c1 e0 02             	shl    eax,0x2
c0016c04:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c0c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c10:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016c14:	39 d8                	cmp    eax,ebx
c0016c16:	7e 49                	jle    c0016c61 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c18:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c1e:	7c 41                	jl     c0016c61 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c20:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016c24:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c28:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c2c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016c30:	39 f9                	cmp    ecx,edi
c0016c32:	7e 22                	jle    c0016c56 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016c34:	83 c5 04             	add    ebp,0x4
c0016c37:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c3d:	7c 14                	jl     c0016c53 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016c3f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016c41:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016c44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c48:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c4c:	56                   	push   esi
c0016c4d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	47                   	inc    edi
c0016c54:	eb d2                	jmp    c0016c28 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016c56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c5a:	43                   	inc    ebx
c0016c5b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c5f:	eb ab                	jmp    c0016c0c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c61:	83 c4 1c             	add    esp,0x1c
c0016c64:	5b                   	pop    ebx
c0016c65:	5e                   	pop    esi
c0016c66:	5f                   	pop    edi
c0016c67:	5d                   	pop    ebp
c0016c68:	c3                   	ret    
c0016c69:	90                   	nop

c0016c6a <Video::clearScreen(unsigned int)>:
c0016c6a:	57                   	push   edi
c0016c6b:	56                   	push   esi
c0016c6c:	53                   	push   ebx
c0016c6d:	31 db                	xor    ebx,ebx
c0016c6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c73:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c79:	7e 1f                	jle    c0016c9a <Video::clearScreen(unsigned int)+0x30>
c0016c7b:	31 ff                	xor    edi,edi
c0016c7d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c83:	7e 12                	jle    c0016c97 <Video::clearScreen(unsigned int)+0x2d>
c0016c85:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c8b:	53                   	push   ebx
c0016c8c:	57                   	push   edi
c0016c8d:	47                   	inc    edi
c0016c8e:	56                   	push   esi
c0016c8f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	eb e6                	jmp    c0016c7d <Video::clearScreen(unsigned int)+0x13>
c0016c97:	43                   	inc    ebx
c0016c98:	eb d9                	jmp    c0016c73 <Video::clearScreen(unsigned int)+0x9>
c0016c9a:	5b                   	pop    ebx
c0016c9b:	5e                   	pop    esi
c0016c9c:	5f                   	pop    edi
c0016c9d:	c3                   	ret    

c0016c9e <Video::putpixel(int, int, unsigned int)>:
c0016c9e:	c7 44 24 04 f4 ad 02 c0 	mov    DWORD PTR [esp+0x4],0xc002adf4
c0016ca6:	e9 84 30 00 00       	jmp    c0019d2f <Krnl::panic(char const*)>
c0016cab:	90                   	nop

c0016cac <Video::Video(char const*)>:
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb3:	83 ec 08             	sub    esp,0x8
c0016cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cba:	50                   	push   eax
c0016cbb:	e8 40 cf ff ff       	call   c0013c00 <Device::Device(char const*)>
c0016cc0:	83 c4 10             	add    esp,0x10
c0016cc3:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0016cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccc:	89 10                	mov    DWORD PTR [eax],edx
c0016cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016cdc:	90                   	nop
c0016cdd:	83 c4 0c             	add    esp,0xc
c0016ce0:	c3                   	ret    
c0016ce1:	90                   	nop

c0016ce2 <Video::~Video()>:
c0016ce2:	83 ec 0c             	sub    esp,0xc
c0016ce5:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0016cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cee:	89 10                	mov    DWORD PTR [eax],edx
c0016cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	50                   	push   eax
c0016cf8:	e8 cd cb ff ff       	call   c00138ca <Device::~Device()>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	90                   	nop
c0016d01:	83 c4 0c             	add    esp,0xc
c0016d04:	c3                   	ret    
c0016d05:	90                   	nop

c0016d06 <Video::~Video()>:
c0016d06:	83 ec 0c             	sub    esp,0xc
c0016d09:	83 ec 0c             	sub    esp,0xc
c0016d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d10:	e8 cd ff ff ff       	call   c0016ce2 <Video::~Video()>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	83 ec 08             	sub    esp,0x8
c0016d1b:	68 64 01 00 00       	push   0x164
c0016d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d24:	e8 c3 b7 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 c4 0c             	add    esp,0xc
c0016d2f:	c3                   	ret    

c0016d30 <Video::isMonochrome()>:
c0016d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d34:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016d3a:	c3                   	ret    
c0016d3b:	90                   	nop

c0016d3c <Video::getWidth()>:
c0016d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d40:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d46:	c3                   	ret    
c0016d47:	90                   	nop

c0016d48 <Video::getHeight()>:
c0016d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d4c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d52:	c3                   	ret    
c0016d53:	90                   	nop

c0016d54 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016d54:	55                   	push   ebp
c0016d55:	57                   	push   edi
c0016d56:	56                   	push   esi
c0016d57:	53                   	push   ebx
c0016d58:	83 ec 2c             	sub    esp,0x2c
c0016d5b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d5f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d63:	83 f8 01             	cmp    eax,0x1
c0016d66:	19 c9                	sbb    ecx,ecx
c0016d68:	31 db                	xor    ebx,ebx
c0016d6a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016d6e:	89 cd                	mov    ebp,ecx
c0016d70:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016d78:	f7 d5                	not    ebp
c0016d7a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016d80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d84:	01 d8                	add    eax,ebx
c0016d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d8a:	56                   	push   esi
c0016d8b:	e8 b8 ff ff ff       	call   c0016d48 <Video::getHeight()>
c0016d90:	59                   	pop    ecx
c0016d91:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d95:	7e 70                	jle    c0016e07 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016d97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d9b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d9f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016da2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016da6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016daa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016db1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016db5:	89 f8                	mov    eax,edi
c0016db7:	83 c0 20             	add    eax,0x20
c0016dba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dbe:	56                   	push   esi
c0016dbf:	e8 78 ff ff ff       	call   c0016d3c <Video::getWidth()>
c0016dc4:	5a                   	pop    edx
c0016dc5:	39 c7                	cmp    edi,eax
c0016dc7:	7d 34                	jge    c0016dfd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016dc9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016dce:	74 05                	je     c0016dd5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016dd0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dd2:	55                   	push   ebp
c0016dd3:	eb 0d                	jmp    c0016de2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016dd5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016dda:	74 12                	je     c0016dee <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ddc:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016de2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016de6:	57                   	push   edi
c0016de7:	56                   	push   esi
c0016de8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016df2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016df6:	47                   	inc    edi
c0016df7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016dfb:	75 c1                	jne    c0016dbe <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016dfd:	43                   	inc    ebx
c0016dfe:	83 fb 20             	cmp    ebx,0x20
c0016e01:	0f 85 79 ff ff ff    	jne    c0016d80 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016e07:	83 c4 2c             	add    esp,0x2c
c0016e0a:	5b                   	pop    ebx
c0016e0b:	5e                   	pop    esi
c0016e0c:	5f                   	pop    edi
c0016e0d:	5d                   	pop    ebp
c0016e0e:	c3                   	ret    
c0016e0f:	90                   	nop

c0016e10 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016e10:	55                   	push   ebp
c0016e11:	57                   	push   edi
c0016e12:	56                   	push   esi
c0016e13:	53                   	push   ebx
c0016e14:	83 ec 28             	sub    esp,0x28
c0016e17:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e1b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016e1f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016e23:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016e27:	c1 e6 08             	shl    esi,0x8
c0016e2a:	01 c6                	add    esi,eax
c0016e2c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016e30:	c1 e0 08             	shl    eax,0x8
c0016e33:	01 d0                	add    eax,edx
c0016e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e3d:	0f af c6             	imul   eax,esi
c0016e40:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016e47:	50                   	push   eax
c0016e48:	e8 4f 87 ff ff       	call   c000f59c <malloc>
c0016e4d:	83 c4 10             	add    esp,0x10
c0016e50:	89 c7                	mov    edi,eax
c0016e52:	85 c0                	test   eax,eax
c0016e54:	75 10                	jne    c0016e66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016e56:	83 ec 0c             	sub    esp,0xc
c0016e59:	68 15 ae 02 c0       	push   0xc002ae15
c0016e5e:	e8 cc 2e 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016e69:	ba 12 00 00 00       	mov    edx,0x12
c0016e6e:	84 c0                	test   al,al
c0016e70:	74 11                	je     c0016e83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016e72:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016e76:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016e7a:	c1 fa 03             	sar    edx,0x3
c0016e7d:	0f af d1             	imul   edx,ecx
c0016e80:	83 c2 12             	add    edx,0x12
c0016e83:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016e87:	74 04                	je     c0016e8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016e89:	85 f6                	test   esi,esi
c0016e8b:	75 12                	jne    c0016e9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016e8d:	83 ec 0c             	sub    esp,0xc
c0016e90:	68 25 ae 02 c0       	push   0xc002ae25
c0016e95:	e8 2a b7 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0016e9a:	e9 b8 00 00 00       	jmp    c0016f57 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016e9f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016ea3:	80 f9 02             	cmp    cl,0x2
c0016ea6:	0f 85 96 00 00 00    	jne    c0016f42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016eac:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016eb1:	75 0e                	jne    c0016ec1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016eb3:	84 c0                	test   al,al
c0016eb5:	75 0a                	jne    c0016ec1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016eb7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016eba:	83 e8 18             	sub    eax,0x18
c0016ebd:	a8 f7                	test   al,0xf7
c0016ebf:	74 0a                	je     c0016ecb <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016ec1:	83 ec 0c             	sub    esp,0xc
c0016ec4:	68 3a ae 02 c0       	push   0xc002ae3a
c0016ec9:	eb 7f                	jmp    c0016f4a <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016ecb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ed3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016edb:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016edf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016ee7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016eeb:	75 0c                	jne    c0016ef9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016eed:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016ef2:	c1 e0 18             	shl    eax,0x18
c0016ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ef9:	45                   	inc    ebp
c0016efa:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016eff:	c1 e1 10             	shl    ecx,0x10
c0016f02:	89 c8                	mov    eax,ecx
c0016f04:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016f09:	c1 e1 08             	shl    ecx,0x8
c0016f0c:	09 c1                	or     ecx,eax
c0016f0e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016f12:	09 c1                	or     ecx,eax
c0016f14:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016f18:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016f1c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016f20:	c1 f8 03             	sar    eax,0x3
c0016f23:	01 c2                	add    edx,eax
c0016f25:	89 e8                	mov    eax,ebp
c0016f27:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016f2b:	39 c6                	cmp    esi,eax
c0016f2d:	7f b0                	jg     c0016edf <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016f2f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016f33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f37:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016f3a:	7e 22                	jle    c0016f5e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016f3c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016f40:	eb 99                	jmp    c0016edb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016f42:	50                   	push   eax
c0016f43:	50                   	push   eax
c0016f44:	51                   	push   ecx
c0016f45:	68 48 ae 02 c0       	push   0xc002ae48
c0016f4a:	e8 75 b6 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0016f4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f52:	e8 55 86 ff ff       	call   c000f5ac <free>
c0016f57:	83 c4 10             	add    esp,0x10
c0016f5a:	31 ff                	xor    edi,edi
c0016f5c:	eb 0f                	jmp    c0016f6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016f5e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f62:	89 30                	mov    DWORD PTR [eax],esi
c0016f64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f68:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016f6b:	89 30                	mov    DWORD PTR [eax],esi
c0016f6d:	83 c4 1c             	add    esp,0x1c
c0016f70:	89 f8                	mov    eax,edi
c0016f72:	5b                   	pop    ebx
c0016f73:	5e                   	pop    esi
c0016f74:	5f                   	pop    edi
c0016f75:	5d                   	pop    ebp
c0016f76:	c3                   	ret    
c0016f77:	90                   	nop

c0016f78 <Video::putTGA(int, int, unsigned char*, int)>:
c0016f78:	55                   	push   ebp
c0016f79:	57                   	push   edi
c0016f7a:	56                   	push   esi
c0016f7b:	53                   	push   ebx
c0016f7c:	83 ec 28             	sub    esp,0x28
c0016f7f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f83:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f87:	50                   	push   eax
c0016f88:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f8c:	50                   	push   eax
c0016f8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f95:	56                   	push   esi
c0016f96:	e8 75 fe ff ff       	call   c0016e10 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016f9b:	83 c4 20             	add    esp,0x20
c0016f9e:	85 c0                	test   eax,eax
c0016fa0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fa4:	74 35                	je     c0016fdb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fa6:	89 c7                	mov    edi,eax
c0016fa8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fac:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016fb0:	39 d8                	cmp    eax,ebx
c0016fb2:	7e 27                	jle    c0016fdb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fb4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fbc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016fc0:	39 e8                	cmp    eax,ebp
c0016fc2:	7e 14                	jle    c0016fd8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016fc4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fc6:	83 c7 04             	add    edi,0x4
c0016fc9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016fcc:	53                   	push   ebx
c0016fcd:	55                   	push   ebp
c0016fce:	45                   	inc    ebp
c0016fcf:	56                   	push   esi
c0016fd0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fd3:	83 c4 10             	add    esp,0x10
c0016fd6:	eb e0                	jmp    c0016fb8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016fd8:	43                   	inc    ebx
c0016fd9:	eb cd                	jmp    c0016fa8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016fdb:	83 c4 1c             	add    esp,0x1c
c0016fde:	5b                   	pop    ebx
c0016fdf:	5e                   	pop    esi
c0016fe0:	5f                   	pop    edi
c0016fe1:	5d                   	pop    ebp
c0016fe2:	c3                   	ret    
c0016fe3:	90                   	nop

c0016fe4 <ACPI::close(int, int, void*)>:
c0016fe4:	83 ec 1c             	sub    esp,0x1c
c0016fe7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016fef:	74 0a                	je     c0016ffb <ACPI::close(int, int, void*)+0x17>
c0016ff1:	b8 00 00 00 00       	mov    eax,0x0
c0016ff6:	e9 8a 00 00 00       	jmp    c0017085 <ACPI::close(int, int, void*)+0xa1>
c0016ffb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017000:	75 27                	jne    c0017029 <ACPI::close(int, int, void*)+0x45>
c0017002:	a1 a8 fd 02 c0       	mov    eax,ds:0xc002fda8
c0017007:	85 c0                	test   eax,eax
c0017009:	74 07                	je     c0017012 <ACPI::close(int, int, void*)+0x2e>
c001700b:	a1 a8 fd 02 c0       	mov    eax,ds:0xc002fda8
c0017010:	ff d0                	call   eax
c0017012:	83 ec 0c             	sub    esp,0xc
c0017015:	68 a4 ae 02 c0       	push   0xc002aea4
c001701a:	e8 10 2d 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c001701f:	83 c4 10             	add    esp,0x10
c0017022:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017027:	eb 5c                	jmp    c0017085 <ACPI::close(int, int, void*)+0xa1>
c0017029:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001702e:	75 50                	jne    c0017080 <ACPI::close(int, int, void*)+0x9c>
c0017030:	a1 a4 fd 02 c0       	mov    eax,ds:0xc002fda4
c0017035:	85 c0                	test   eax,eax
c0017037:	74 07                	je     c0017040 <ACPI::close(int, int, void*)+0x5c>
c0017039:	a1 a4 fd 02 c0       	mov    eax,ds:0xc002fda4
c001703e:	ff d0                	call   eax
c0017040:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017045:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001704a:	83 e0 02             	and    eax,0x2
c001704d:	74 1c                	je     c001706b <ACPI::close(int, int, void*)+0x87>
c001704f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001705a:	89 c2                	mov    edx,eax
c001705c:	ec                   	in     al,dx
c001705d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017061:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017065:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017069:	eb da                	jmp    c0017045 <ACPI::close(int, int, void*)+0x61>
c001706b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017072:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017077:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001707b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001707f:	ee                   	out    dx,al
c0017080:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017085:	83 c4 1c             	add    esp,0x1c
c0017088:	c3                   	ret    

c0017089 <findRSDP()>:
c0017089:	83 ec 1c             	sub    esp,0x1c
c001708c:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017091:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017097:	83 e0 04             	and    eax,0x4
c001709a:	84 c0                	test   al,al
c001709c:	75 07                	jne    c00170a5 <findRSDP()+0x1c>
c001709e:	b8 00 00 00 00       	mov    eax,0x0
c00170a3:	eb 6a                	jmp    c001710f <findRSDP()+0x86>
c00170a5:	a1 54 d7 02 c0       	mov    eax,ds:0xc002d754
c00170aa:	3d ff 07 00 00       	cmp    eax,0x7ff
c00170af:	7f 1b                	jg     c00170cc <findRSDP()+0x43>
c00170b1:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00170b6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170bc:	83 e2 fb             	and    edx,0xfffffffb
c00170bf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170c5:	b8 00 00 00 00       	mov    eax,0x0
c00170ca:	eb 43                	jmp    c001710f <findRSDP()+0x86>
c00170cc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00170d4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00170dc:	77 2c                	ja     c001710a <findRSDP()+0x81>
c00170de:	83 ec 04             	sub    esp,0x4
c00170e1:	6a 08                	push   0x8
c00170e3:	68 3f af 02 c0       	push   0xc002af3f
c00170e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170ec:	e8 5b 95 fe ff       	call   c000064c <memcmp>
c00170f1:	83 c4 10             	add    esp,0x10
c00170f4:	85 c0                	test   eax,eax
c00170f6:	0f 94 c0             	sete   al
c00170f9:	84 c0                	test   al,al
c00170fb:	74 06                	je     c0017103 <findRSDP()+0x7a>
c00170fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017101:	eb 0c                	jmp    c001710f <findRSDP()+0x86>
c0017103:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017108:	eb ca                	jmp    c00170d4 <findRSDP()+0x4b>
c001710a:	b8 00 00 00 00       	mov    eax,0x0
c001710f:	83 c4 1c             	add    esp,0x1c
c0017112:	c3                   	ret    

c0017113 <loadACPITables(unsigned char*)>:
c0017113:	57                   	push   edi
c0017114:	56                   	push   esi
c0017115:	53                   	push   ebx
c0017116:	83 ec 60             	sub    esp,0x60
c0017119:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001711e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017124:	83 e0 04             	and    eax,0x4
c0017127:	84 c0                	test   al,al
c0017129:	0f 84 33 02 00 00    	je     c0017362 <loadACPITables(unsigned char*)+0x24f>
c001712f:	a0 c0 ff 02 c0       	mov    al,ds:0xc002ffc0
c0017134:	84 c0                	test   al,al
c0017136:	74 75                	je     c00171ad <loadACPITables(unsigned char*)+0x9a>
c0017138:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001713c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017140:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017147:	83 e8 24             	sub    eax,0x24
c001714a:	c1 e8 03             	shr    eax,0x3
c001714d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017151:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017159:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001715d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017161:	0f 8d b2 00 00 00    	jge    c0017219 <loadACPITables(unsigned char*)+0x106>
c0017167:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001716b:	83 c0 24             	add    eax,0x24
c001716e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017172:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017176:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001717a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001717e:	c1 e0 03             	shl    eax,0x3
c0017181:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017185:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017189:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001718c:	8b 00                	mov    eax,DWORD PTR [eax]
c001718e:	89 c1                	mov    ecx,eax
c0017190:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c0017195:	8d 50 01             	lea    edx,[eax+0x1]
c0017198:	89 15 ac fd 02 c0    	mov    DWORD PTR ds:0xc002fdac,edx
c001719e:	89 ca                	mov    edx,ecx
c00171a0:	89 14 c5 c4 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd023c],edx
c00171a7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00171ab:	eb ac                	jmp    c0017159 <loadACPITables(unsigned char*)+0x46>
c00171ad:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00171b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171bc:	83 e8 24             	sub    eax,0x24
c00171bf:	c1 e8 02             	shr    eax,0x2
c00171c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171c6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00171ce:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00171d2:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00171d6:	7d 41                	jge    c0017219 <loadACPITables(unsigned char*)+0x106>
c00171d8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171dc:	83 c0 24             	add    eax,0x24
c00171df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00171e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171e7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00171eb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00171ef:	c1 e0 02             	shl    eax,0x2
c00171f2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00171f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00171fc:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c0017201:	8d 50 01             	lea    edx,[eax+0x1]
c0017204:	89 15 ac fd 02 c0    	mov    DWORD PTR ds:0xc002fdac,edx
c001720a:	89 ca                	mov    edx,ecx
c001720c:	89 14 c5 c4 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd023c],edx
c0017213:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017217:	eb b5                	jmp    c00171ce <loadACPITables(unsigned char*)+0xbb>
c0017219:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017221:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c0017226:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001722a:	0f 8d 33 01 00 00    	jge    c0017363 <loadACPITables(unsigned char*)+0x250>
c0017230:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017234:	8b 04 c5 c4 fd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd023c]
c001723b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001723f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017243:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017247:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001724b:	25 ff 0f 00 00       	and    eax,0xfff
c0017250:	89 c6                	mov    esi,eax
c0017252:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0017258:	83 ec 0c             	sub    esp,0xc
c001725b:	6a 01                	push   0x1
c001725d:	e8 63 9f ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017269:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001726f:	83 ec 0c             	sub    esp,0xc
c0017272:	6a 01                	push   0x1
c0017274:	6a 01                	push   0x1
c0017276:	50                   	push   eax
c0017277:	52                   	push   edx
c0017278:	53                   	push   ebx
c0017279:	e8 fa a9 ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001727e:	83 c4 20             	add    esp,0x20
c0017281:	09 f0                	or     eax,esi
c0017283:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017287:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001728b:	c1 e0 03             	shl    eax,0x3
c001728e:	05 c0 fd 02 c0       	add    eax,0xc002fdc0
c0017293:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001729b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001729f:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00172a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00172bb:	89 c6                	mov    esi,eax
c00172bd:	89 d7                	mov    edi,edx
c00172bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172c1:	89 c8                	mov    eax,ecx
c00172c3:	89 fa                	mov    edx,edi
c00172c5:	89 f3                	mov    ebx,esi
c00172c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00172cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00172cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00172de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172e2:	05 00 10 00 00       	add    eax,0x1000
c00172e7:	c1 e8 0c             	shr    eax,0xc
c00172ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00172f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172fa:	25 ff 0f 00 00       	and    eax,0xfff
c00172ff:	89 c6                	mov    esi,eax
c0017301:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0017307:	83 ec 0c             	sub    esp,0xc
c001730a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001730e:	e8 b2 9e ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0017313:	83 c4 10             	add    esp,0x10
c0017316:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001731a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017320:	83 ec 0c             	sub    esp,0xc
c0017323:	6a 01                	push   0x1
c0017325:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017329:	50                   	push   eax
c001732a:	52                   	push   edx
c001732b:	53                   	push   ebx
c001732c:	e8 47 a9 ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017331:	83 c4 20             	add    esp,0x20
c0017334:	09 f0                	or     eax,esi
c0017336:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001733a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001733e:	83 ec 0c             	sub    esp,0xc
c0017341:	50                   	push   eax
c0017342:	e8 c4 a2 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0017347:	83 c4 10             	add    esp,0x10
c001734a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001734e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017352:	89 14 c5 c4 fd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd023c],edx
c0017359:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001735d:	e9 bf fe ff ff       	jmp    c0017221 <loadACPITables(unsigned char*)+0x10e>
c0017362:	90                   	nop
c0017363:	83 c4 60             	add    esp,0x60
c0017366:	5b                   	pop    ebx
c0017367:	5e                   	pop    esi
c0017368:	5f                   	pop    edi
c0017369:	c3                   	ret    

c001736a <findRSDT(unsigned char*)>:
c001736a:	57                   	push   edi
c001736b:	56                   	push   esi
c001736c:	53                   	push   ebx
c001736d:	83 ec 50             	sub    esp,0x50
c0017370:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017375:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001737b:	83 e0 04             	and    eax,0x4
c001737e:	84 c0                	test   al,al
c0017380:	75 0a                	jne    c001738c <findRSDT(unsigned char*)+0x22>
c0017382:	b8 00 00 00 00       	mov    eax,0x0
c0017387:	e9 21 01 00 00       	jmp    c00174ad <findRSDT(unsigned char*)+0x143>
c001738c:	89 e0                	mov    eax,esp
c001738e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017392:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017396:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001739a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00173a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00173b2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00173b6:	89 c6                	mov    esi,eax
c00173b8:	89 d7                	mov    edi,edx
c00173ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173bc:	89 c8                	mov    eax,ecx
c00173be:	89 fa                	mov    edx,edi
c00173c0:	89 f3                	mov    ebx,esi
c00173c2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00173c6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00173ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00173d2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00173d6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00173de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00173ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00173f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00173f6:	25 ff 0f 00 00       	and    eax,0xfff
c00173fb:	89 c6                	mov    esi,eax
c00173fd:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0017403:	83 ec 0c             	sub    esp,0xc
c0017406:	6a 02                	push   0x2
c0017408:	e8 b8 9d ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017414:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001741a:	83 ec 0c             	sub    esp,0xc
c001741d:	6a 01                	push   0x1
c001741f:	6a 02                	push   0x2
c0017421:	50                   	push   eax
c0017422:	52                   	push   edx
c0017423:	53                   	push   ebx
c0017424:	e8 4f a8 ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017429:	83 c4 20             	add    esp,0x20
c001742c:	09 f0                	or     eax,esi
c001742e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017432:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017436:	25 ff 0f 00 00       	and    eax,0xfff
c001743b:	89 c6                	mov    esi,eax
c001743d:	8b 1d 70 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d870
c0017443:	83 ec 0c             	sub    esp,0xc
c0017446:	6a 02                	push   0x2
c0017448:	e8 78 9d ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017454:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001745a:	83 ec 0c             	sub    esp,0xc
c001745d:	6a 01                	push   0x1
c001745f:	6a 02                	push   0x2
c0017461:	50                   	push   eax
c0017462:	52                   	push   edx
c0017463:	53                   	push   ebx
c0017464:	e8 0f a8 ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017469:	83 c4 20             	add    esp,0x20
c001746c:	09 f0                	or     eax,esi
c001746e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017472:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017477:	75 11                	jne    c001748a <findRSDT(unsigned char*)+0x120>
c0017479:	c6 05 c0 ff 02 c0 00 	mov    BYTE PTR ds:0xc002ffc0,0x0
c0017480:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017484:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017488:	eb 1f                	jmp    c00174a9 <findRSDT(unsigned char*)+0x13f>
c001748a:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001748f:	75 11                	jne    c00174a2 <findRSDT(unsigned char*)+0x138>
c0017491:	c6 05 c0 ff 02 c0 01 	mov    BYTE PTR ds:0xc002ffc0,0x1
c0017498:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001749c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174a0:	eb 07                	jmp    c00174a9 <findRSDT(unsigned char*)+0x13f>
c00174a2:	b8 00 00 00 00       	mov    eax,0x0
c00174a7:	eb 04                	jmp    c00174ad <findRSDT(unsigned char*)+0x143>
c00174a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174ad:	83 c4 50             	add    esp,0x50
c00174b0:	5b                   	pop    ebx
c00174b1:	5e                   	pop    esi
c00174b2:	5f                   	pop    edi
c00174b3:	c3                   	ret    

c00174b4 <findDataTable(unsigned char*, char*)>:
c00174b4:	83 ec 1c             	sub    esp,0x1c
c00174b7:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00174bc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174c2:	83 e0 04             	and    eax,0x4
c00174c5:	84 c0                	test   al,al
c00174c7:	75 07                	jne    c00174d0 <findDataTable(unsigned char*, char*)+0x1c>
c00174c9:	b8 00 00 00 00       	mov    eax,0x0
c00174ce:	eb 52                	jmp    c0017522 <findDataTable(unsigned char*, char*)+0x6e>
c00174d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00174d8:	a1 ac fd 02 c0       	mov    eax,ds:0xc002fdac
c00174dd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00174e1:	7d 3a                	jge    c001751d <findDataTable(unsigned char*, char*)+0x69>
c00174e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174e7:	c1 e0 03             	shl    eax,0x3
c00174ea:	05 c0 fd 02 c0       	add    eax,0xc002fdc0
c00174ef:	83 ec 04             	sub    esp,0x4
c00174f2:	6a 04                	push   0x4
c00174f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174f8:	50                   	push   eax
c00174f9:	e8 4e 91 fe ff       	call   c000064c <memcmp>
c00174fe:	83 c4 10             	add    esp,0x10
c0017501:	85 c0                	test   eax,eax
c0017503:	0f 94 c0             	sete   al
c0017506:	84 c0                	test   al,al
c0017508:	74 0d                	je     c0017517 <findDataTable(unsigned char*, char*)+0x63>
c001750a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001750e:	8b 04 c5 c4 fd 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd023c]
c0017515:	eb 0b                	jmp    c0017522 <findDataTable(unsigned char*, char*)+0x6e>
c0017517:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001751b:	eb bb                	jmp    c00174d8 <findDataTable(unsigned char*, char*)+0x24>
c001751d:	b8 00 00 00 00       	mov    eax,0x0
c0017522:	83 c4 1c             	add    esp,0x1c
c0017525:	c3                   	ret    

c0017526 <scanMADT()>:
c0017526:	53                   	push   ebx
c0017527:	83 ec 38             	sub    esp,0x38
c001752a:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001752f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017535:	83 e0 04             	and    eax,0x4
c0017538:	84 c0                	test   al,al
c001753a:	0f 84 4a 04 00 00    	je     c001798a <scanMADT()+0x464>
c0017540:	e8 44 fb ff ff       	call   c0017089 <findRSDP()>
c0017545:	a3 cc ff 02 c0       	mov    ds:0xc002ffcc,eax
c001754a:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c001754f:	85 c0                	test   eax,eax
c0017551:	75 19                	jne    c001756c <scanMADT()+0x46>
c0017553:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017558:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001755e:	83 e2 fb             	and    edx,0xfffffffb
c0017561:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017567:	e9 22 04 00 00       	jmp    c001798e <scanMADT()+0x468>
c001756c:	a1 cc ff 02 c0       	mov    eax,ds:0xc002ffcc
c0017571:	83 ec 0c             	sub    esp,0xc
c0017574:	50                   	push   eax
c0017575:	e8 f0 fd ff ff       	call   c001736a <findRSDT(unsigned char*)>
c001757a:	83 c4 10             	add    esp,0x10
c001757d:	a3 c8 ff 02 c0       	mov    ds:0xc002ffc8,eax
c0017582:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c0017587:	85 c0                	test   eax,eax
c0017589:	75 19                	jne    c00175a4 <scanMADT()+0x7e>
c001758b:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017590:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017596:	83 e2 fb             	and    edx,0xfffffffb
c0017599:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001759f:	e9 ea 03 00 00       	jmp    c001798e <scanMADT()+0x468>
c00175a4:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c00175a9:	83 ec 0c             	sub    esp,0xc
c00175ac:	50                   	push   eax
c00175ad:	e8 61 fb ff ff       	call   c0017113 <loadACPITables(unsigned char*)>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c00175ba:	83 ec 08             	sub    esp,0x8
c00175bd:	68 48 af 02 c0       	push   0xc002af48
c00175c2:	50                   	push   eax
c00175c3:	e8 ec fe ff ff       	call   c00174b4 <findDataTable(unsigned char*, char*)>
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175cf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00175d4:	75 19                	jne    c00175ef <scanMADT()+0xc9>
c00175d6:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00175db:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175e1:	83 e2 fe             	and    edx,0xfffffffe
c00175e4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175ea:	e9 9f 03 00 00       	jmp    c001798e <scanMADT()+0x468>
c00175ef:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00175f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175fe:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017602:	0f 87 86 03 00 00    	ja     c001798e <scanMADT()+0x468>
c0017608:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017610:	0f 87 78 03 00 00    	ja     c001798e <scanMADT()+0x468>
c0017616:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001761a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001761e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017622:	8d 50 01             	lea    edx,[eax+0x1]
c0017625:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017629:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001762d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017631:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017635:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017639:	8d 50 01             	lea    edx,[eax+0x1]
c001763c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017640:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017644:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017648:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001764c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017651:	0f 86 36 03 00 00    	jbe    c001798d <scanMADT()+0x467>
c0017657:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001765c:	75 57                	jne    c00176b5 <scanMADT()+0x18f>
c001765e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017662:	8d 50 01             	lea    edx,[eax+0x1]
c0017665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017669:	8a 15 c0 01 03 c0    	mov    dl,BYTE PTR ds:0xc00301c0
c001766f:	0f b6 d2             	movzx  edx,dl
c0017672:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017676:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001767a:	88 82 00 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfe00],al
c0017680:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017684:	8d 50 01             	lea    edx,[eax+0x1]
c0017687:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001768b:	8a 15 c0 01 03 c0    	mov    dl,BYTE PTR ds:0xc00301c0
c0017691:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017694:	88 0d c0 01 03 c0    	mov    BYTE PTR ds:0xc00301c0,cl
c001769a:	0f b6 d2             	movzx  edx,dl
c001769d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176a1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176a5:	88 82 e0 01 03 c0    	mov    BYTE PTR [edx-0x3ffcfe20],al
c00176ab:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176b0:	e9 c1 02 00 00       	jmp    c0017976 <scanMADT()+0x450>
c00176b5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00176ba:	0f 85 14 01 00 00    	jne    c00177d4 <scanMADT()+0x2ae>
c00176c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c4:	8d 50 01             	lea    edx,[eax+0x1]
c00176c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176cb:	8a 15 80 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030080
c00176d1:	0f b6 d2             	movzx  edx,dl
c00176d4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176d8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176dc:	88 82 a0 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff60],al
c00176e2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00176e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ee:	01 d0                	add    eax,edx
c00176f0:	83 c0 2c             	add    eax,0x2c
c00176f3:	8a 00                	mov    al,BYTE PTR [eax]
c00176f5:	0f b6 d0             	movzx  edx,al
c00176f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176fc:	8d 48 01             	lea    ecx,[eax+0x1]
c00176ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017703:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017707:	0f b6 c0             	movzx  eax,al
c001770a:	c1 e0 08             	shl    eax,0x8
c001770d:	89 d1                	mov    ecx,edx
c001770f:	09 c1                	or     ecx,eax
c0017711:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017715:	8d 50 02             	lea    edx,[eax+0x2]
c0017718:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001771c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017720:	0f b6 c0             	movzx  eax,al
c0017723:	c1 e0 10             	shl    eax,0x10
c0017726:	09 c1                	or     ecx,eax
c0017728:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772c:	8d 50 03             	lea    edx,[eax+0x3]
c001772f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017733:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017737:	0f b6 c0             	movzx  eax,al
c001773a:	c1 e0 18             	shl    eax,0x18
c001773d:	09 c1                	or     ecx,eax
c001773f:	89 ca                	mov    edx,ecx
c0017741:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c0017746:	0f b6 c0             	movzx  eax,al
c0017749:	89 14 85 c0 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcff40],edx
c0017750:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017755:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017759:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001775d:	01 d0                	add    eax,edx
c001775f:	83 c0 2c             	add    eax,0x2c
c0017762:	8a 00                	mov    al,BYTE PTR [eax]
c0017764:	0f b6 d0             	movzx  edx,al
c0017767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776b:	8d 48 01             	lea    ecx,[eax+0x1]
c001776e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017772:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017776:	0f b6 c0             	movzx  eax,al
c0017779:	c1 e0 08             	shl    eax,0x8
c001777c:	89 d1                	mov    ecx,edx
c001777e:	09 c1                	or     ecx,eax
c0017780:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017784:	8d 50 02             	lea    edx,[eax+0x2]
c0017787:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001778b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001778f:	0f b6 c0             	movzx  eax,al
c0017792:	c1 e0 10             	shl    eax,0x10
c0017795:	09 c1                	or     ecx,eax
c0017797:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001779b:	8d 50 03             	lea    edx,[eax+0x3]
c001779e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177a6:	0f b6 c0             	movzx  eax,al
c00177a9:	c1 e0 18             	shl    eax,0x18
c00177ac:	09 c1                	or     ecx,eax
c00177ae:	89 ca                	mov    edx,ecx
c00177b0:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00177b5:	0f b6 c0             	movzx  eax,al
c00177b8:	89 14 85 40 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfec0],edx
c00177bf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177c4:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00177c9:	40                   	inc    eax
c00177ca:	a2 80 00 03 c0       	mov    ds:0xc0030080,al
c00177cf:	e9 a2 01 00 00       	jmp    c0017976 <scanMADT()+0x450>
c00177d4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00177d9:	0f 85 e9 00 00 00    	jne    c00178c8 <scanMADT()+0x3a2>
c00177df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e3:	8d 50 01             	lea    edx,[eax+0x1]
c00177e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177ee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177f2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00177f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177fa:	8d 50 01             	lea    edx,[eax+0x1]
c00177fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017801:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017805:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017809:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001780d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017811:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017815:	01 d0                	add    eax,edx
c0017817:	83 c0 2c             	add    eax,0x2c
c001781a:	8a 00                	mov    al,BYTE PTR [eax]
c001781c:	0f b6 d0             	movzx  edx,al
c001781f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017823:	8d 48 01             	lea    ecx,[eax+0x1]
c0017826:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001782a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001782e:	0f b6 c0             	movzx  eax,al
c0017831:	c1 e0 08             	shl    eax,0x8
c0017834:	89 d1                	mov    ecx,edx
c0017836:	09 c1                	or     ecx,eax
c0017838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001783c:	8d 50 02             	lea    edx,[eax+0x2]
c001783f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017843:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017847:	0f b6 c0             	movzx  eax,al
c001784a:	c1 e0 10             	shl    eax,0x10
c001784d:	09 c1                	or     ecx,eax
c001784f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017853:	8d 50 03             	lea    edx,[eax+0x3]
c0017856:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001785a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001785e:	0f b6 c0             	movzx  eax,al
c0017861:	c1 e0 18             	shl    eax,0x18
c0017864:	09 c8                	or     eax,ecx
c0017866:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001786a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001786f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017877:	01 d0                	add    eax,edx
c0017879:	83 c0 2c             	add    eax,0x2c
c001787c:	8a 00                	mov    al,BYTE PTR [eax]
c001787e:	0f b6 c0             	movzx  eax,al
c0017881:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017885:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017888:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001788c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017890:	0f b6 d2             	movzx  edx,dl
c0017893:	c1 e2 08             	shl    edx,0x8
c0017896:	09 d0                	or     eax,edx
c0017898:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001789d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00178a2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00178a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178ab:	88 90 60 c9 02 c0    	mov    BYTE PTR [eax-0x3ffd36a0],dl
c00178b1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00178b6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00178bb:	66 89 84 12 60 00 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcffa0],ax
c00178c3:	e9 ae 00 00 00       	jmp    c0017976 <scanMADT()+0x450>
c00178c8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00178cd:	0f 85 97 00 00 00    	jne    c001796a <scanMADT()+0x444>
c00178d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d7:	8d 50 01             	lea    edx,[eax+0x1]
c00178da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178e6:	0f b6 c0             	movzx  eax,al
c00178e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f5:	01 d0                	add    eax,edx
c00178f7:	83 c0 2c             	add    eax,0x2c
c00178fa:	8a 00                	mov    al,BYTE PTR [eax]
c00178fc:	0f b6 d0             	movzx  edx,al
c00178ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017903:	8d 48 01             	lea    ecx,[eax+0x1]
c0017906:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001790a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001790e:	0f b6 c0             	movzx  eax,al
c0017911:	c1 e0 08             	shl    eax,0x8
c0017914:	09 d0                	or     eax,edx
c0017916:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001791a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001791f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017923:	8d 50 01             	lea    edx,[eax+0x1]
c0017926:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001792a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001792e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017932:	0f b6 c0             	movzx  eax,al
c0017935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793d:	c1 e0 08             	shl    eax,0x8
c0017940:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017944:	89 c1                	mov    ecx,eax
c0017946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001794a:	c1 e0 18             	shl    eax,0x18
c001794d:	89 c3                	mov    ebx,eax
c001794f:	a1 d0 ff 02 c0       	mov    eax,ds:0xc002ffd0
c0017954:	8d 50 01             	lea    edx,[eax+0x1]
c0017957:	89 15 d0 ff 02 c0    	mov    DWORD PTR ds:0xc002ffd0,edx
c001795d:	09 d9                	or     ecx,ebx
c001795f:	89 ca                	mov    edx,ecx
c0017961:	89 14 85 e0 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0020],edx
c0017968:	eb 0c                	jmp    c0017976 <scanMADT()+0x450>
c001796a:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001796f:	75 05                	jne    c0017976 <scanMADT()+0x450>
c0017971:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017976:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001797b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001797f:	01 d0                	add    eax,edx
c0017981:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017985:	e9 6d fc ff ff       	jmp    c00175f7 <scanMADT()+0xd1>
c001798a:	90                   	nop
c001798b:	eb 01                	jmp    c001798e <scanMADT()+0x468>
c001798d:	90                   	nop
c001798e:	83 c4 38             	add    esp,0x38
c0017991:	5b                   	pop    ebx
c0017992:	c3                   	ret    
c0017993:	90                   	nop

c0017994 <ACPI::ACPI()>:
c0017994:	83 ec 0c             	sub    esp,0xc
c0017997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001799b:	83 ec 08             	sub    esp,0x8
c001799e:	68 4d af 02 c0       	push   0xc002af4d
c00179a3:	50                   	push   eax
c00179a4:	e8 57 c2 ff ff       	call   c0013c00 <Device::Device(char const*)>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	ba a8 b0 02 c0       	mov    edx,0xc002b0a8
c00179b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b5:	89 10                	mov    DWORD PTR [eax],edx
c00179b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179bb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00179c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00179d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00179de:	e8 43 fb ff ff       	call   c0017526 <scanMADT()>
c00179e3:	90                   	nop
c00179e4:	83 c4 0c             	add    esp,0xc
c00179e7:	c3                   	ret    

c00179e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00179e8:	83 ec 2c             	sub    esp,0x2c
c00179eb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00179ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179f3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179f7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00179fb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a00:	88 d0                	mov    al,dl
c0017a02:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a06:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a17:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a1d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017a21:	0f 8d 97 00 00 00    	jge    c0017abe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017a27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a2f:	83 c2 2a             	add    edx,0x2a
c0017a32:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017a36:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017a3b:	75 78                	jne    c0017ab5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a45:	83 c2 2a             	add    edx,0x2a
c0017a48:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017a4c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017a50:	75 63                	jne    c0017ab5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a52:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a57:	74 3a                	je     c0017a93 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017a59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a61:	83 c2 2a             	add    edx,0x2a
c0017a64:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017a68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a6f:	39 c2                	cmp    edx,eax
c0017a71:	74 10                	je     c0017a83 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017a73:	83 ec 0c             	sub    esp,0xc
c0017a76:	68 c8 ae 02 c0       	push   0xc002aec8
c0017a7b:	e8 af 22 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0017a80:	83 c4 10             	add    esp,0x10
c0017a83:	83 ec 0c             	sub    esp,0xc
c0017a86:	68 52 af 02 c0       	push   0xc002af52
c0017a8b:	e8 9f 22 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017a97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a9f:	83 c2 2a             	add    edx,0x2a
c0017aa2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017aa6:	8b 02                	mov    eax,DWORD PTR [edx]
c0017aa8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017aab:	89 01                	mov    DWORD PTR [ecx],eax
c0017aad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ab0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ab5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017ab9:	e9 55 ff ff ff       	jmp    c0017a13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017abe:	90                   	nop
c0017abf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ac3:	83 c4 2c             	add    esp,0x2c
c0017ac6:	c2 04 00             	ret    0x4
c0017ac9:	90                   	nop

c0017aca <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017aca:	83 ec 1c             	sub    esp,0x1c
c0017acd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ad5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ad9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017ade:	88 c8                	mov    al,cl
c0017ae0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ae4:	88 d0                	mov    al,dl
c0017ae6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aee:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017afb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017aff:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017b03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b07:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b11:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017b14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b18:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b21:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b27:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017b2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b32:	83 c2 2a             	add    edx,0x2a
c0017b35:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b3d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b47:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b4e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b56:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b63:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b73:	3d 00 02 00 00       	cmp    eax,0x200
c0017b78:	75 10                	jne    c0017b8a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017b7a:	83 ec 0c             	sub    esp,0xc
c0017b7d:	68 61 af 02 c0       	push   0xc002af61
c0017b82:	e8 a8 21 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0017b87:	83 c4 10             	add    esp,0x10
c0017b8a:	90                   	nop
c0017b8b:	83 c4 1c             	add    esp,0x1c
c0017b8e:	c3                   	ret    
c0017b8f:	90                   	nop

c0017b90 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017b90:	b8 00 00 00 00       	mov    eax,0x0
c0017b95:	c3                   	ret    

c0017b96 <ACPI::detectPCI()>:
c0017b96:	53                   	push   ebx
c0017b97:	83 ec 28             	sub    esp,0x28
c0017b9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b9f:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017ba4:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017ba9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017baf:	83 e0 04             	and    eax,0x4
c0017bb2:	84 c0                	test   al,al
c0017bb4:	74 2b                	je     c0017be1 <ACPI::detectPCI()+0x4b>
c0017bb6:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c0017bbb:	83 ec 08             	sub    esp,0x8
c0017bbe:	68 7e af 02 c0       	push   0xc002af7e
c0017bc3:	50                   	push   eax
c0017bc4:	e8 eb f8 ff ff       	call   c00174b4 <findDataTable(unsigned char*, char*)>
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bd0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017bd5:	74 0a                	je     c0017be1 <ACPI::detectPCI()+0x4b>
c0017bd7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bdc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017be1:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017be9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bed:	8a 00                	mov    al,BYTE PTR [eax]
c0017bef:	3c 01                	cmp    al,0x1
c0017bf1:	75 0c                	jne    c0017bff <ACPI::detectPCI()+0x69>
c0017bf3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bf8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017bfd:	eb 26                	jmp    c0017c25 <ACPI::detectPCI()+0x8f>
c0017bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c03:	8a 00                	mov    al,BYTE PTR [eax]
c0017c05:	3c 02                	cmp    al,0x2
c0017c07:	75 1c                	jne    c0017c25 <ACPI::detectPCI()+0x8f>
c0017c09:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c0e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c13:	74 10                	je     c0017c25 <ACPI::detectPCI()+0x8f>
c0017c15:	83 ec 0c             	sub    esp,0xc
c0017c18:	68 f8 ae 02 c0       	push   0xc002aef8
c0017c1d:	e8 0d 21 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0017c22:	83 c4 10             	add    esp,0x10
c0017c25:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017c29:	83 f0 01             	xor    eax,0x1
c0017c2c:	84 c0                	test   al,al
c0017c2e:	74 3f                	je     c0017c6f <ACPI::detectPCI()+0xd9>
c0017c30:	e8 1b 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017c35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c39:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017c3e:	75 0c                	jne    c0017c4c <ACPI::detectPCI()+0xb6>
c0017c40:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c45:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c4a:	eb 23                	jmp    c0017c6f <ACPI::detectPCI()+0xd9>
c0017c4c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017c51:	75 1c                	jne    c0017c6f <ACPI::detectPCI()+0xd9>
c0017c53:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c58:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c5d:	74 10                	je     c0017c6f <ACPI::detectPCI()+0xd9>
c0017c5f:	83 ec 0c             	sub    esp,0xc
c0017c62:	68 f8 ae 02 c0       	push   0xc002aef8
c0017c67:	e8 c3 20 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0017c6c:	83 c4 10             	add    esp,0x10
c0017c6f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c74:	74 7e                	je     c0017cf4 <ACPI::detectPCI()+0x15e>
c0017c76:	83 ec 0c             	sub    esp,0xc
c0017c79:	68 83 af 02 c0       	push   0xc002af83
c0017c7e:	e8 73 79 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017c8e:	83 ec 0c             	sub    esp,0xc
c0017c91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c95:	e8 02 79 ff ff       	call   c000f59c <malloc>
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	89 c3                	mov    ebx,eax
c0017c9f:	83 ec 0c             	sub    esp,0xc
c0017ca2:	53                   	push   ebx
c0017ca3:	e8 ac a5 00 00       	call   c0022254 <PCI::PCI()>
c0017ca8:	83 c4 10             	add    esp,0x10
c0017cab:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017caf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb3:	83 ec 08             	sub    esp,0x8
c0017cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cba:	50                   	push   eax
c0017cbb:	e8 3c bd ff ff       	call   c00139fc <Device::addChild(Device*)>
c0017cc0:	83 c4 10             	add    esp,0x10
c0017cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cc9:	83 c0 08             	add    eax,0x8
c0017ccc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cce:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017cd3:	74 07                	je     c0017cdc <ACPI::detectPCI()+0x146>
c0017cd5:	ba 01 00 00 00       	mov    edx,0x1
c0017cda:	eb 05                	jmp    c0017ce1 <ACPI::detectPCI()+0x14b>
c0017cdc:	ba 02 00 00 00       	mov    edx,0x2
c0017ce1:	6a 00                	push   0x0
c0017ce3:	6a 00                	push   0x0
c0017ce5:	52                   	push   edx
c0017ce6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cea:	ff d0                	call   eax
c0017cec:	83 c4 10             	add    esp,0x10
c0017cef:	e9 9e 00 00 00       	jmp    c0017d92 <ACPI::detectPCI()+0x1fc>
c0017cf4:	83 ec 0c             	sub    esp,0xc
c0017cf7:	68 9b af 02 c0       	push   0xc002af9b
c0017cfc:	e8 c3 a8 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0017d01:	83 c4 10             	add    esp,0x10
c0017d04:	83 ec 0c             	sub    esp,0xc
c0017d07:	68 a6 af 02 c0       	push   0xc002afa6
c0017d0c:	e8 e5 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d11:	83 c4 10             	add    esp,0x10
c0017d14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d22:	e8 75 78 ff ff       	call   c000f59c <malloc>
c0017d27:	83 c4 10             	add    esp,0x10
c0017d2a:	89 c3                	mov    ebx,eax
c0017d2c:	83 ec 0c             	sub    esp,0xc
c0017d2f:	53                   	push   ebx
c0017d30:	e8 89 b0 00 00       	call   c0022dbe <IDE::IDE()>
c0017d35:	83 c4 10             	add    esp,0x10
c0017d38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017d3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d40:	83 ec 08             	sub    esp,0x8
c0017d43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d47:	50                   	push   eax
c0017d48:	e8 af bc ff ff       	call   c00139fc <Device::addChild(Device*)>
c0017d4d:	83 c4 10             	add    esp,0x10
c0017d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017d6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d7e:	83 c0 08             	add    eax,0x8
c0017d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d83:	6a 00                	push   0x0
c0017d85:	6a 00                	push   0x0
c0017d87:	6a 00                	push   0x0
c0017d89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d8d:	ff d0                	call   eax
c0017d8f:	83 c4 10             	add    esp,0x10
c0017d92:	90                   	nop
c0017d93:	83 c4 28             	add    esp,0x28
c0017d96:	5b                   	pop    ebx
c0017d97:	c3                   	ret    

c0017d98 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017d98:	83 ec 1c             	sub    esp,0x1c
c0017d9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d9f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017da2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017da6:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017dab:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017db0:	83 ec 08             	sub    esp,0x8
c0017db3:	52                   	push   edx
c0017db4:	50                   	push   eax
c0017db5:	e8 f6 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017dc1:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0017dc6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017dcb:	83 ec 04             	sub    esp,0x4
c0017dce:	6a 01                	push   0x1
c0017dd0:	52                   	push   edx
c0017dd1:	50                   	push   eax
c0017dd2:	e8 0b 6f ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017dd7:	83 c4 10             	add    esp,0x10
c0017dda:	90                   	nop
c0017ddb:	83 c4 1c             	add    esp,0x1c
c0017dde:	c3                   	ret    
c0017ddf:	90                   	nop

c0017de0 <ACPI::sleep()>:
c0017de0:	83 ec 0c             	sub    esp,0xc
c0017de3:	a1 a0 fd 02 c0       	mov    eax,ds:0xc002fda0
c0017de8:	85 c0                	test   eax,eax
c0017dea:	74 07                	je     c0017df3 <ACPI::sleep()+0x13>
c0017dec:	a1 a0 fd 02 c0       	mov    eax,ds:0xc002fda0
c0017df1:	ff d0                	call   eax
c0017df3:	90                   	nop
c0017df4:	83 c4 0c             	add    esp,0xc
c0017df7:	c3                   	ret    

c0017df8 <ACPI::open(int, int, void*)>:
c0017df8:	57                   	push   edi
c0017df9:	56                   	push   esi
c0017dfa:	53                   	push   ebx
c0017dfb:	81 ec 60 01 00 00    	sub    esp,0x160
c0017e01:	83 ec 0c             	sub    esp,0xc
c0017e04:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017e0b:	e8 86 fd ff ff       	call   c0017b96 <ACPI::detectPCI()>
c0017e10:	83 c4 10             	add    esp,0x10
c0017e13:	83 ec 0c             	sub    esp,0xc
c0017e16:	68 20 af 02 c0       	push   0xc002af20
c0017e1b:	e8 d6 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	83 ec 0c             	sub    esp,0xc
c0017e26:	68 bb af 02 c0       	push   0xc002afbb
c0017e2b:	e8 52 46 00 00       	call   c001c482 <Thr::loadKernelSymbolTable(char const*)>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	83 ec 0c             	sub    esp,0xc
c0017e36:	68 d9 af 02 c0       	push   0xc002afd9
c0017e3b:	e8 b6 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e40:	83 c4 10             	add    esp,0x10
c0017e43:	83 ec 04             	sub    esp,0x4
c0017e46:	6a 0c                	push   0xc
c0017e48:	68 f4 af 02 c0       	push   0xc002aff4
c0017e4d:	68 05 b0 02 c0       	push   0xc002b005
c0017e52:	e8 94 2c 00 00       	call   c001aaeb <Reg::readIntWithDefault(char*, char*, int)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017e61:	83 ec 0c             	sub    esp,0xc
c0017e64:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017e6b:	e8 5f 95 ff ff       	call   c00113cf <Virt::setupPageSwapping(int)>
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	83 ec 0c             	sub    esp,0xc
c0017e76:	68 f5 9c 02 c0       	push   0xc0029cf5
c0017e7b:	e8 76 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e80:	83 c4 10             	add    esp,0x10
c0017e83:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c0017e89:	83 ec 08             	sub    esp,0x8
c0017e8c:	6a 01                	push   0x1
c0017e8e:	68 0c b0 02 c0       	push   0xc002b00c
c0017e93:	e8 61 50 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c0017e98:	83 c4 10             	add    esp,0x10
c0017e9b:	83 ec 08             	sub    esp,0x8
c0017e9e:	53                   	push   ebx
c0017e9f:	50                   	push   eax
c0017ea0:	e8 82 52 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c0017ea5:	83 c4 10             	add    esp,0x10
c0017ea8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017eaf:	83 ec 08             	sub    esp,0x8
c0017eb2:	6a 12                	push   0x12
c0017eb4:	50                   	push   eax
c0017eb5:	e8 c6 be ff ff       	call   c0013d80 <getDevicesOfType(DeviceType)>
c0017eba:	83 c4 0c             	add    esp,0xc
c0017ebd:	83 ec 0c             	sub    esp,0xc
c0017ec0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017ec7:	50                   	push   eax
c0017ec8:	e8 87 09 01 00       	call   c0028854 <LinkedList<Device>::isEmpty()>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	83 f0 01             	xor    eax,0x1
c0017ed3:	84 c0                	test   al,al
c0017ed5:	0f 84 43 01 00 00    	je     c001801e <ACPI::open(int, int, void*)+0x226>
c0017edb:	83 ec 0c             	sub    esp,0xc
c0017ede:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017ee5:	50                   	push   eax
c0017ee6:	e8 85 09 01 00       	call   c0028870 <LinkedList<Device>::getFirstElement()>
c0017eeb:	83 c4 10             	add    esp,0x10
c0017eee:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017ef5:	83 ec 0c             	sub    esp,0xc
c0017ef8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017eff:	50                   	push   eax
c0017f00:	e8 73 09 01 00       	call   c0028878 <LinkedList<Device>::removeFirst()>
c0017f05:	83 c4 10             	add    esp,0x10
c0017f08:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017f0f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017f16:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017f1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f21:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017f27:	ba 09 00 00 00       	mov    edx,0x9
c0017f2c:	fc                   	cld    
c0017f2d:	89 c7                	mov    edi,eax
c0017f2f:	89 de                	mov    esi,ebx
c0017f31:	89 d1                	mov    ecx,edx
c0017f33:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f35:	83 ec 08             	sub    esp,0x8
c0017f38:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017f3c:	50                   	push   eax
c0017f3d:	83 ec 24             	sub    esp,0x24
c0017f40:	89 e0                	mov    eax,esp
c0017f42:	89 c3                	mov    ebx,eax
c0017f44:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017f48:	ba 09 00 00 00       	mov    edx,0x9
c0017f4d:	89 df                	mov    edi,ebx
c0017f4f:	89 c6                	mov    esi,eax
c0017f51:	89 d1                	mov    ecx,edx
c0017f53:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f55:	e8 d8 a7 00 00       	call   c0022732 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017f5a:	83 c4 30             	add    esp,0x30
c0017f5d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017f64:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017f6c:	0f 84 4b ff ff ff    	je     c0017ebd <ACPI::open(int, int, void*)+0xc5>
c0017f72:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017f7d:	83 ec 0c             	sub    esp,0xc
c0017f80:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017f87:	e8 10 76 ff ff       	call   c000f59c <malloc>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	89 c3                	mov    ebx,eax
c0017f91:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0017f96:	83 ec 04             	sub    esp,0x4
c0017f99:	50                   	push   eax
c0017f9a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fa1:	53                   	push   ebx
c0017fa2:	e8 7b ab ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c0017fa7:	83 c4 10             	add    esp,0x10
c0017faa:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017fb1:	83 ec 0c             	sub    esp,0xc
c0017fb4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fbb:	e8 34 ae ff ff       	call   c0012df4 <File::exists()>
c0017fc0:	83 c4 10             	add    esp,0x10
c0017fc3:	84 c0                	test   al,al
c0017fc5:	74 27                	je     c0017fee <ACPI::open(int, int, void*)+0x1f6>
c0017fc7:	83 ec 08             	sub    esp,0x8
c0017fca:	6a 01                	push   0x1
c0017fcc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017fd3:	e8 21 4f 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c0017fd8:	83 c4 10             	add    esp,0x10
c0017fdb:	83 ec 08             	sub    esp,0x8
c0017fde:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017fe5:	50                   	push   eax
c0017fe6:	e8 3c 51 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0017ff6:	0f 84 c1 fe ff ff    	je     c0017ebd <ACPI::open(int, int, void*)+0xc5>
c0017ffc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018003:	8b 00                	mov    eax,DWORD PTR [eax]
c0018005:	83 c0 08             	add    eax,0x8
c0018008:	8b 00                	mov    eax,DWORD PTR [eax]
c001800a:	83 ec 0c             	sub    esp,0xc
c001800d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018014:	ff d0                	call   eax
c0018016:	83 c4 10             	add    esp,0x10
c0018019:	e9 9f fe ff ff       	jmp    c0017ebd <ACPI::open(int, int, void*)+0xc5>
c001801e:	83 ec 0c             	sub    esp,0xc
c0018021:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018028:	50                   	push   eax
c0018029:	e8 24 08 01 00       	call   c0028852 <LinkedList<Device>::~LinkedList()>
c001802e:	83 c4 10             	add    esp,0x10
c0018031:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c0018037:	83 ec 08             	sub    esp,0x8
c001803a:	6a 01                	push   0x1
c001803c:	68 27 b0 02 c0       	push   0xc002b027
c0018041:	e8 b3 4e 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c0018046:	83 c4 10             	add    esp,0x10
c0018049:	83 ec 08             	sub    esp,0x8
c001804c:	53                   	push   ebx
c001804d:	50                   	push   eax
c001804e:	e8 d4 50 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c0018053:	83 c4 10             	add    esp,0x10
c0018056:	8b 1d 08 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d708
c001805c:	83 ec 08             	sub    esp,0x8
c001805f:	6a 01                	push   0x1
c0018061:	68 44 b0 02 c0       	push   0xc002b044
c0018066:	e8 8e 4e 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c001806b:	83 c4 10             	add    esp,0x10
c001806e:	83 ec 08             	sub    esp,0x8
c0018071:	53                   	push   ebx
c0018072:	50                   	push   eax
c0018073:	e8 af 50 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c0018078:	83 c4 10             	add    esp,0x10
c001807b:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0018080:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018086:	83 e0 04             	and    eax,0x4
c0018089:	84 c0                	test   al,al
c001808b:	0f 84 0d 01 00 00    	je     c001819e <ACPI::open(int, int, void*)+0x3a6>
c0018091:	83 ec 0c             	sub    esp,0xc
c0018094:	68 61 b0 02 c0       	push   0xc002b061
c0018099:	e8 58 75 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c001809e:	83 c4 10             	add    esp,0x10
c00180a1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00180b6:	e8 e1 74 ff ff       	call   c000f59c <malloc>
c00180bb:	83 c4 10             	add    esp,0x10
c00180be:	89 c3                	mov    ebx,eax
c00180c0:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c00180c5:	83 ec 04             	sub    esp,0x4
c00180c8:	50                   	push   eax
c00180c9:	68 7e b0 02 c0       	push   0xc002b07e
c00180ce:	53                   	push   ebx
c00180cf:	e8 4e aa ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00180de:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00180e6:	74 1a                	je     c0018102 <ACPI::open(int, int, void*)+0x30a>
c00180e8:	83 ec 0c             	sub    esp,0xc
c00180eb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00180f2:	e8 fd ac ff ff       	call   c0012df4 <File::exists()>
c00180f7:	83 c4 10             	add    esp,0x10
c00180fa:	84 c0                	test   al,al
c00180fc:	74 04                	je     c0018102 <ACPI::open(int, int, void*)+0x30a>
c00180fe:	b0 01                	mov    al,0x1
c0018100:	eb 02                	jmp    c0018104 <ACPI::open(int, int, void*)+0x30c>
c0018102:	b0 00                	mov    al,0x0
c0018104:	84 c0                	test   al,al
c0018106:	74 25                	je     c001812d <ACPI::open(int, int, void*)+0x335>
c0018108:	83 ec 08             	sub    esp,0x8
c001810b:	6a 01                	push   0x1
c001810d:	68 7e b0 02 c0       	push   0xc002b07e
c0018112:	e8 e2 4d 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c0018117:	83 c4 10             	add    esp,0x10
c001811a:	83 ec 08             	sub    esp,0x8
c001811d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018124:	50                   	push   eax
c0018125:	e8 fd 4f 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c001812a:	83 c4 10             	add    esp,0x10
c001812d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018135:	74 27                	je     c001815e <ACPI::open(int, int, void*)+0x366>
c0018137:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001813f:	74 1d                	je     c001815e <ACPI::open(int, int, void*)+0x366>
c0018141:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018148:	8b 00                	mov    eax,DWORD PTR [eax]
c001814a:	83 c0 08             	add    eax,0x8
c001814d:	8b 00                	mov    eax,DWORD PTR [eax]
c001814f:	83 ec 0c             	sub    esp,0xc
c0018152:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018159:	ff d0                	call   eax
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	a1 c8 ff 02 c0       	mov    eax,ds:0xc002ffc8
c0018163:	83 ec 08             	sub    esp,0x8
c0018166:	68 9b b0 02 c0       	push   0xc002b09b
c001816b:	50                   	push   eax
c001816c:	e8 43 f3 ff ff       	call   c00174b4 <findDataTable(unsigned char*, char*)>
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001817b:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018183:	74 19                	je     c001819e <ACPI::open(int, int, void*)+0x3a6>
c0018185:	83 ec 08             	sub    esp,0x8
c0018188:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001818f:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018196:	e8 fd fb ff ff       	call   c0017d98 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001819b:	83 c4 10             	add    esp,0x10
c001819e:	b8 00 00 00 00       	mov    eax,0x0
c00181a3:	81 c4 60 01 00 00    	add    esp,0x160
c00181a9:	5b                   	pop    ebx
c00181aa:	5e                   	pop    esi
c00181ab:	5f                   	pop    edi
c00181ac:	c3                   	ret    
c00181ad:	90                   	nop

c00181ae <CPU::close(int, int, void*)>:
c00181ae:	31 c0                	xor    eax,eax
c00181b0:	c3                   	ret    
c00181b1:	90                   	nop

c00181b2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00181b2:	55                   	push   ebp
c00181b3:	57                   	push   edi
c00181b4:	56                   	push   esi
c00181b5:	53                   	push   ebx
c00181b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181be:	89 ce                	mov    esi,ecx
c00181c0:	89 d5                	mov    ebp,edx
c00181c2:	80 f9 04             	cmp    cl,0x4
c00181c5:	75 28                	jne    c00181ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00181c7:	8d 42 f9             	lea    eax,[edx-0x7]
c00181ca:	3c 03                	cmp    al,0x3
c00181cc:	0f 86 63 01 00 00    	jbe    c0018335 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181d2:	80 fa 03             	cmp    dl,0x3
c00181d5:	0f 84 5a 01 00 00    	je     c0018335 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181db:	8d 7a f2             	lea    edi,[edx-0xe]
c00181de:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c00181e3:	89 fb                	mov    ebx,edi
c00181e5:	80 fb 01             	cmp    bl,0x1
c00181e8:	77 4e                	ja     c0018238 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00181ea:	e9 52 01 00 00       	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181ef:	80 f9 05             	cmp    cl,0x5
c00181f2:	75 4d                	jne    c0018241 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00181f4:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c00181f9:	80 fa 03             	cmp    dl,0x3
c00181fc:	0f 86 3f 01 00 00    	jbe    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018202:	8d 7a fa             	lea    edi,[edx-0x6]
c0018205:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c001820a:	89 fb                	mov    ebx,edi
c001820c:	80 fb 01             	cmp    bl,0x1
c001820f:	0f 86 2c 01 00 00    	jbe    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018215:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c001821a:	80 fa 08             	cmp    dl,0x8
c001821d:	0f 84 1e 01 00 00    	je     c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018223:	89 d7                	mov    edi,edx
c0018225:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c001822a:	83 e7 fb             	and    edi,0xfffffffb
c001822d:	89 fb                	mov    ebx,edi
c001822f:	80 fb 09             	cmp    bl,0x9
c0018232:	0f 84 09 01 00 00    	je     c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018238:	31 c0                	xor    eax,eax
c001823a:	89 eb                	mov    ebx,ebp
c001823c:	0f b6 fb             	movzx  edi,bl
c001823f:	eb 30                	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018241:	31 c0                	xor    eax,eax
c0018243:	80 f9 06             	cmp    cl,0x6
c0018246:	75 f2                	jne    c001823a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018248:	80 fa 0a             	cmp    dl,0xa
c001824b:	77 ed                	ja     c001823a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001824d:	bf de 05 00 00       	mov    edi,0x5de
c0018252:	0f a3 d7             	bt     edi,edx
c0018255:	73 e3                	jae    c001823a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018257:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c001825c:	e9 e0 00 00 00       	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018261:	39 c7                	cmp    edi,eax
c0018263:	0f 84 d3 00 00 00    	je     c001833c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018269:	40                   	inc    eax
c001826a:	3d d0 00 00 00       	cmp    eax,0xd0
c001826f:	74 09                	je     c001827a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018271:	89 f3                	mov    ebx,esi
c0018273:	80 fb 0f             	cmp    bl,0xf
c0018276:	75 f1                	jne    c0018269 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018278:	eb e7                	jmp    c0018261 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001827a:	80 f9 10             	cmp    cl,0x10
c001827d:	75 14                	jne    c0018293 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001827f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018282:	83 e0 fb             	and    eax,0xfffffffb
c0018285:	3c 02                	cmp    al,0x2
c0018287:	76 34                	jbe    c00182bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018289:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c001828e:	80 fa 02             	cmp    dl,0x2
c0018291:	eb 24                	jmp    c00182b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018293:	80 f9 11             	cmp    cl,0x11
c0018296:	75 13                	jne    c00182ab <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018298:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c001829d:	80 fa 03             	cmp    dl,0x3
c00182a0:	0f 85 9b 00 00 00    	jne    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a6:	e9 91 00 00 00       	jmp    c001833c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00182ab:	80 f9 12             	cmp    cl,0x12
c00182ae:	75 14                	jne    c00182c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00182b0:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00182b5:	fe ca                	dec    dl
c00182b7:	0f 85 84 00 00 00    	jne    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182bd:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c00182c2:	eb 7d                	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c4:	80 f9 14             	cmp    cl,0x14
c00182c7:	75 12                	jne    c00182db <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00182c9:	4a                   	dec    edx
c00182ca:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00182cf:	80 fa 01             	cmp    dl,0x1
c00182d2:	77 6d                	ja     c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d4:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c00182d9:	eb 66                	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182db:	80 f9 15             	cmp    cl,0x15
c00182de:	75 31                	jne    c0018311 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00182e0:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c00182e5:	80 fa 01             	cmp    dl,0x1
c00182e8:	74 57                	je     c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ea:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00182ef:	80 fa 13             	cmp    dl,0x13
c00182f2:	76 0c                	jbe    c0018300 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00182f4:	80 fa 30             	cmp    dl,0x30
c00182f7:	75 48                	jne    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f9:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c00182fe:	eb 41                	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018300:	b9 04 00 09 00       	mov    ecx,0x90004
c0018305:	0f a3 d1             	bt     ecx,edx
c0018308:	73 37                	jae    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830a:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c001830f:	eb 30                	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018311:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c0018316:	80 f9 16             	cmp    cl,0x16
c0018319:	75 26                	jne    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001831b:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c0018320:	84 d2                	test   dl,dl
c0018322:	74 1d                	je     c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018324:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c0018329:	80 fa 30             	cmp    dl,0x30
c001832c:	75 13                	jne    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001832e:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c0018333:	eb 0c                	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018335:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c001833a:	eb 05                	jmp    c0018341 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833c:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c0018341:	5b                   	pop    ebx
c0018342:	5e                   	pop    esi
c0018343:	5f                   	pop    edi
c0018344:	5d                   	pop    ebp
c0018345:	c3                   	ret    

c0018346 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018346:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001834a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001834e:	80 f9 04             	cmp    cl,0x4
c0018351:	75 6b                	jne    c00183be <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018353:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0018358:	80 fa 01             	cmp    dl,0x1
c001835b:	0f 86 92 02 00 00    	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018361:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c0018366:	80 fa 02             	cmp    dl,0x2
c0018369:	0f 84 84 02 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001836f:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c0018374:	80 fa 03             	cmp    dl,0x3
c0018377:	0f 84 76 02 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001837d:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c0018382:	80 fa 04             	cmp    dl,0x4
c0018385:	0f 84 68 02 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001838b:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c0018390:	80 fa 05             	cmp    dl,0x5
c0018393:	0f 84 5a 02 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018399:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c001839e:	80 fa 07             	cmp    dl,0x7
c00183a1:	0f 84 4c 02 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a7:	83 ea 08             	sub    edx,0x8
c00183aa:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00183af:	80 fa 01             	cmp    dl,0x1
c00183b2:	0f 87 3b 02 00 00    	ja     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b8:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c00183bd:	c3                   	ret    
c00183be:	80 f9 05             	cmp    cl,0x5
c00183c1:	75 45                	jne    c0018408 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00183c3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00183c6:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c00183cb:	80 f9 02             	cmp    cl,0x2
c00183ce:	0f 86 1f 02 00 00    	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183d4:	80 fa 04             	cmp    dl,0x4
c00183d7:	0f 84 f3 01 00 00    	je     c00185d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00183dd:	80 fa 07             	cmp    dl,0x7
c00183e0:	0f 84 0d 02 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e6:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c00183eb:	80 fa 08             	cmp    dl,0x8
c00183ee:	0f 84 ff 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183f4:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00183f9:	80 fa 09             	cmp    dl,0x9
c00183fc:	0f 85 f1 01 00 00    	jne    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018402:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c0018407:	c3                   	ret    
c0018408:	80 f9 06             	cmp    cl,0x6
c001840b:	0f 85 85 01 00 00    	jne    c0018596 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018411:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c0018416:	80 fa 01             	cmp    dl,0x1
c0018419:	0f 84 d4 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001841f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018422:	3c 01                	cmp    al,0x1
c0018424:	0f 86 ac 01 00 00    	jbe    c00185d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001842a:	80 fa 03             	cmp    dl,0x3
c001842d:	0f 84 a3 01 00 00    	je     c00185d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018433:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018436:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c001843b:	80 f9 01             	cmp    cl,0x1
c001843e:	0f 86 af 01 00 00    	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018444:	80 fa 09             	cmp    dl,0x9
c0018447:	0f 84 8f 01 00 00    	je     c00185dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001844d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018450:	80 f9 01             	cmp    cl,0x1
c0018453:	0f 86 9a 01 00 00    	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018459:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c001845e:	80 fa 0d             	cmp    dl,0xd
c0018461:	0f 84 8c 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018467:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c001846c:	80 fa 0e             	cmp    dl,0xe
c001846f:	0f 84 7e 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018475:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c001847a:	80 fa 0f             	cmp    dl,0xf
c001847d:	0f 84 70 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018483:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c0018488:	80 fa 15             	cmp    dl,0x15
c001848b:	0f 84 62 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018491:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018494:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c0018499:	80 f9 01             	cmp    cl,0x1
c001849c:	0f 86 51 01 00 00    	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a2:	80 fa 1a             	cmp    dl,0x1a
c00184a5:	0f 84 37 01 00 00    	je     c00185e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00184ab:	80 fa 1c             	cmp    dl,0x1c
c00184ae:	0f 84 34 01 00 00    	je     c00185e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00184b4:	80 fa 1d             	cmp    dl,0x1d
c00184b7:	0f 84 36 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bd:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c00184c2:	80 fa 25             	cmp    dl,0x25
c00184c5:	0f 84 28 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cb:	8d 4a da             	lea    ecx,[edx-0x26]
c00184ce:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00184d3:	80 f9 01             	cmp    cl,0x1
c00184d6:	0f 86 17 01 00 00    	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184dc:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c00184e1:	80 fa 2a             	cmp    dl,0x2a
c00184e4:	0f 84 09 01 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ea:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c00184ef:	80 fa 2c             	cmp    dl,0x2c
c00184f2:	0f 84 fb 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f8:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c00184fd:	80 fa 2d             	cmp    dl,0x2d
c0018500:	0f 84 ed 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018506:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c001850b:	80 fa 2e             	cmp    dl,0x2e
c001850e:	0f 84 df 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018514:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c0018519:	80 fa 2f             	cmp    dl,0x2f
c001851c:	0f 84 d1 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018522:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018525:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c001852a:	80 f9 01             	cmp    cl,0x1
c001852d:	0f 86 c0 00 00 00    	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018533:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c0018538:	80 fa 37             	cmp    dl,0x37
c001853b:	0f 84 b2 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018541:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0018546:	80 fa 3a             	cmp    dl,0x3a
c0018549:	0f 84 a4 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854f:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c0018554:	80 fa 3c             	cmp    dl,0x3c
c0018557:	0f 84 96 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855d:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c0018562:	80 fa 3d             	cmp    dl,0x3d
c0018565:	0f 84 88 00 00 00    	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856b:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0018570:	80 fa 3e             	cmp    dl,0x3e
c0018573:	74 7e                	je     c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018575:	8d 42 bb             	lea    eax,[edx-0x45]
c0018578:	3c 01                	cmp    al,0x1
c001857a:	76 72                	jbe    c00185ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001857c:	80 fa 3f             	cmp    dl,0x3f
c001857f:	74 6d                	je     c00185ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018581:	80 fa 4a             	cmp    dl,0x4a
c0018584:	74 0a                	je     c0018590 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018586:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c001858b:	80 fa 4d             	cmp    dl,0x4d
c001858e:	75 63                	jne    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018590:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c0018595:	c3                   	ret    
c0018596:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c001859b:	80 f9 0b             	cmp    cl,0xb
c001859e:	75 0a                	jne    c00185aa <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00185a0:	fe ca                	dec    dl
c00185a2:	75 4f                	jne    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a4:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c00185a9:	c3                   	ret    
c00185aa:	80 f9 0f             	cmp    cl,0xf
c00185ad:	75 44                	jne    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185af:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c00185b4:	80 fa 02             	cmp    dl,0x2
c00185b7:	76 3a                	jbe    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b9:	8d 42 fd             	lea    eax,[edx-0x3]
c00185bc:	3c 01                	cmp    al,0x1
c00185be:	76 0a                	jbe    c00185ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00185c0:	b8 21 b2 02 c0       	mov    eax,0xc002b221
c00185c5:	80 fa 06             	cmp    dl,0x6
c00185c8:	75 29                	jne    c00185f3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ca:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c00185cf:	c3                   	ret    
c00185d0:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c00185d5:	c3                   	ret    
c00185d6:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00185db:	c3                   	ret    
c00185dc:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c00185e1:	c3                   	ret    
c00185e2:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c00185e7:	c3                   	ret    
c00185e8:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00185ed:	c3                   	ret    
c00185ee:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c00185f3:	c3                   	ret    

c00185f4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00185f4:	60                   	pusha  
c00185f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018601:	9c                   	pushf  
c0018602:	fa                   	cli    
c0018603:	0f 09                	wbinvd 
c0018605:	0f 30                	wrmsr  
c0018607:	9d                   	popf   
c0018608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001860c:	89 02                	mov    DWORD PTR [edx],eax
c001860e:	61                   	popa   
c001860f:	c3                   	ret    

c0018610 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018610:	60                   	pusha  
c0018611:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018615:	9c                   	pushf  
c0018616:	fa                   	cli    
c0018617:	0f 09                	wbinvd 
c0018619:	31 c0                	xor    eax,eax
c001861b:	31 d2                	xor    edx,edx
c001861d:	0f 32                	rdmsr  
c001861f:	9d                   	popf   
c0018620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018624:	89 02                	mov    DWORD PTR [edx],eax
c0018626:	61                   	popa   
c0018627:	c3                   	ret    

c0018628 <CPU::AMD_K6_writeback(int, int, int)>:
c0018628:	56                   	push   esi
c0018629:	53                   	push   ebx
c001862a:	83 ec 10             	sub    esp,0x10
c001862d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018631:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018636:	75 5d                	jne    c0018695 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018638:	83 f8 08             	cmp    eax,0x8
c001863b:	75 09                	jne    c0018646 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001863d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018642:	7e 13                	jle    c0018657 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018644:	eb 30                	jmp    c0018676 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018646:	83 f8 06             	cmp    eax,0x6
c0018649:	7c 4a                	jl     c0018695 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001864b:	83 f8 07             	cmp    eax,0x7
c001864e:	7e 07                	jle    c0018657 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018650:	83 f8 09             	cmp    eax,0x9
c0018653:	74 21                	je     c0018676 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018655:	eb 3e                	jmp    c0018695 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018657:	89 e6                	mov    esi,esp
c0018659:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c001865f:	56                   	push   esi
c0018660:	c1 eb 15             	shr    ebx,0x15
c0018663:	68 82 00 00 c0       	push   0xc0000082
c0018668:	83 e3 7e             	and    ebx,0x7e
c001866b:	e8 a0 ff ff ff       	call   c0018610 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018670:	56                   	push   esi
c0018671:	6a 00                	push   0x0
c0018673:	53                   	push   ebx
c0018674:	eb 12                	jmp    c0018688 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018676:	89 e3                	mov    ebx,esp
c0018678:	53                   	push   ebx
c0018679:	68 82 00 00 c0       	push   0xc0000082
c001867e:	e8 8d ff ff ff       	call   c0018610 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018683:	53                   	push   ebx
c0018684:	6a 00                	push   0x0
c0018686:	6a 00                	push   0x0
c0018688:	68 82 00 00 c0       	push   0xc0000082
c001868d:	e8 62 ff ff ff       	call   c00185f4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018692:	83 c4 18             	add    esp,0x18
c0018695:	83 c4 10             	add    esp,0x10
c0018698:	5b                   	pop    ebx
c0018699:	5e                   	pop    esi
c001869a:	c3                   	ret    
c001869b:	90                   	nop

c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001869c:	55                   	push   ebp
c001869d:	57                   	push   edi
c001869e:	56                   	push   esi
c001869f:	53                   	push   ebx
c00186a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00186a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00186ac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00186b0:	39 05 20 cc 02 c0    	cmp    DWORD PTR ds:0xc002cc20,eax
c00186b6:	75 23                	jne    c00186db <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00186b8:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c00186bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00186c1:	89 06                	mov    DWORD PTR [esi],eax
c00186c3:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c00186c8:	89 07                	mov    DWORD PTR [edi],eax
c00186ca:	a1 24 02 03 c0       	mov    eax,ds:0xc0030224
c00186cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00186d2:	a1 20 02 03 c0       	mov    eax,ds:0xc0030220
c00186d7:	89 02                	mov    DWORD PTR [edx],eax
c00186d9:	eb 3f                	jmp    c001871a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00186db:	31 c9                	xor    ecx,ecx
c00186dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186e1:	0f a2                	cpuid  
c00186e3:	89 06                	mov    DWORD PTR [esi],eax
c00186e5:	89 1f                	mov    DWORD PTR [edi],ebx
c00186e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186eb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00186ee:	89 10                	mov    DWORD PTR [eax],edx
c00186f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186f4:	a3 20 cc 02 c0       	mov    ds:0xc002cc20,eax
c00186f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00186fb:	a3 2c 02 03 c0       	mov    ds:0xc003022c,eax
c0018700:	8b 07                	mov    eax,DWORD PTR [edi]
c0018702:	a3 28 02 03 c0       	mov    ds:0xc0030228,eax
c0018707:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001870a:	a3 24 02 03 c0       	mov    ds:0xc0030224,eax
c001870f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018713:	8b 00                	mov    eax,DWORD PTR [eax]
c0018715:	a3 20 02 03 c0       	mov    ds:0xc0030220,eax
c001871a:	5b                   	pop    ebx
c001871b:	5e                   	pop    esi
c001871c:	5f                   	pop    edi
c001871d:	5d                   	pop    ebp
c001871e:	c3                   	ret    
c001871f:	90                   	nop

c0018720 <CPU::cpuidCheckEDX(unsigned int)>:
c0018720:	83 ec 10             	sub    esp,0x10
c0018723:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018727:	50                   	push   eax
c0018728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001872c:	50                   	push   eax
c001872d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018731:	50                   	push   eax
c0018732:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018736:	50                   	push   eax
c0018737:	6a 01                	push   0x1
c0018739:	e8 5e ff ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001873e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018742:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018746:	0f 95 c0             	setne  al
c0018749:	83 c4 24             	add    esp,0x24
c001874c:	c3                   	ret    
c001874d:	90                   	nop

c001874e <CPU::cpuidCheckECX(unsigned int)>:
c001874e:	83 ec 10             	sub    esp,0x10
c0018751:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018755:	50                   	push   eax
c0018756:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001875a:	50                   	push   eax
c001875b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001875f:	50                   	push   eax
c0018760:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018764:	50                   	push   eax
c0018765:	6a 01                	push   0x1
c0018767:	e8 30 ff ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001876c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018770:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018774:	0f 95 c0             	setne  al
c0018777:	83 c4 24             	add    esp,0x24
c001877a:	c3                   	ret    
c001877b:	90                   	nop

c001877c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001877c:	83 ec 10             	sub    esp,0x10
c001877f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018783:	50                   	push   eax
c0018784:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018788:	50                   	push   eax
c0018789:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001878d:	50                   	push   eax
c001878e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018792:	50                   	push   eax
c0018793:	6a 07                	push   0x7
c0018795:	e8 02 ff ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001879a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001879e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00187a2:	0f 95 c0             	setne  al
c00187a5:	83 c4 24             	add    esp,0x24
c00187a8:	c3                   	ret    
c00187a9:	90                   	nop

c00187aa <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00187aa:	83 ec 10             	sub    esp,0x10
c00187ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187b1:	50                   	push   eax
c00187b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187b6:	50                   	push   eax
c00187b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187bb:	50                   	push   eax
c00187bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187c0:	50                   	push   eax
c00187c1:	6a 07                	push   0x7
c00187c3:	e8 d4 fe ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00187d0:	0f 95 c0             	setne  al
c00187d3:	83 c4 24             	add    esp,0x24
c00187d6:	c3                   	ret    
c00187d7:	90                   	nop

c00187d8 <CPU::CPU()>:
c00187d8:	83 ec 0c             	sub    esp,0xc
c00187db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187df:	83 ec 08             	sub    esp,0x8
c00187e2:	68 21 b2 02 c0       	push   0xc002b221
c00187e7:	50                   	push   eax
c00187e8:	e8 13 b4 ff ff       	call   c0013c00 <Device::Device(char const*)>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	ba f8 b2 02 c0       	mov    edx,0xc002b2f8
c00187f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187f9:	89 10                	mov    DWORD PTR [eax],edx
c00187fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ff:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001880d:	05 78 01 00 00       	add    eax,0x178
c0018812:	83 ec 0c             	sub    esp,0xc
c0018815:	50                   	push   eax
c0018816:	e8 b1 65 ff ff       	call   c000edcc <GDT::GDT()>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018822:	05 7c 09 00 00       	add    eax,0x97c
c0018827:	83 ec 0c             	sub    esp,0xc
c001882a:	50                   	push   eax
c001882b:	e8 ec 67 ff ff       	call   c000f01c <IDT::IDT()>
c0018830:	83 c4 10             	add    esp,0x10
c0018833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018837:	05 7c 11 00 00       	add    eax,0x117c
c001883c:	83 ec 0c             	sub    esp,0xc
c001883f:	50                   	push   eax
c0018840:	e8 c7 82 ff ff       	call   c0010b0c <TSS::TSS()>
c0018845:	83 c4 10             	add    esp,0x10
c0018848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001884c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018857:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018861:	90                   	nop
c0018862:	83 c4 0c             	add    esp,0xc
c0018865:	c3                   	ret    

c0018866 <CPU::displayFeatures()>:
c0018866:	c3                   	ret    
c0018867:	90                   	nop

c0018868 <CPU::detectFeatures()>:
c0018868:	55                   	push   ebp
c0018869:	57                   	push   edi
c001886a:	56                   	push   esi
c001886b:	53                   	push   ebx
c001886c:	83 ec 50             	sub    esp,0x50
c001886f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018873:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001887d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018884:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001888a:	6a 0d                	push   0xd
c001888c:	6a 00                	push   0x0
c001888e:	55                   	push   ebp
c001888f:	e8 bc 7e fe ff       	call   c0000750 <memset>
c0018894:	83 c4 10             	add    esp,0x10
c0018897:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001889c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00188a3:	0f 84 22 09 00 00    	je     c00191cb <CPU::detectFeatures()+0x963>
c00188a9:	83 ec 0c             	sub    esp,0xc
c00188ac:	89 ef                	mov    edi,ebp
c00188ae:	6a 10                	push   0x10
c00188b0:	e8 6b fe ff ff       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c00188b5:	83 e0 01             	and    eax,0x1
c00188b8:	8d 14 00             	lea    edx,[eax+eax*1]
c00188bb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188c1:	83 e0 fd             	and    eax,0xfffffffd
c00188c4:	09 d0                	or     eax,edx
c00188c6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188cc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00188d3:	e8 48 fe ff ff       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c00188d8:	83 e0 01             	and    eax,0x1
c00188db:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00188e2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188e8:	83 e0 fb             	and    eax,0xfffffffb
c00188eb:	09 d0                	or     eax,edx
c00188ed:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188f3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00188fa:	e8 21 fe ff ff       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c00188ff:	83 e0 01             	and    eax,0x1
c0018902:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018909:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001890f:	83 e0 f7             	and    eax,0xfffffff7
c0018912:	09 d0                	or     eax,edx
c0018914:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001891a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018921:	e8 fa fd ff ff       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c0018926:	83 e0 01             	and    eax,0x1
c0018929:	c1 e0 04             	shl    eax,0x4
c001892c:	88 c2                	mov    dl,al
c001892e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018934:	83 e0 ef             	and    eax,0xffffffef
c0018937:	09 d0                	or     eax,edx
c0018939:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001893f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018946:	e8 d5 fd ff ff       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c001894b:	83 e0 01             	and    eax,0x1
c001894e:	c1 e0 05             	shl    eax,0x5
c0018951:	88 c2                	mov    dl,al
c0018953:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018959:	83 e0 df             	and    eax,0xffffffdf
c001895c:	09 d0                	or     eax,edx
c001895e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018964:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001896b:	e8 b0 fd ff ff       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c0018970:	83 e0 01             	and    eax,0x1
c0018973:	8d 14 00             	lea    edx,[eax+eax*1]
c0018976:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001897c:	83 e0 fd             	and    eax,0xfffffffd
c001897f:	09 d0                	or     eax,edx
c0018981:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018987:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001898e:	e8 8d fd ff ff       	call   c0018720 <CPU::cpuidCheckEDX(unsigned int)>
c0018993:	83 e0 01             	and    eax,0x1
c0018996:	c1 e0 06             	shl    eax,0x6
c0018999:	88 c2                	mov    dl,al
c001899b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189a1:	83 e0 bf             	and    eax,0xffffffbf
c00189a4:	09 d0                	or     eax,edx
c00189a6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00189ac:	58                   	pop    eax
c00189ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189b1:	50                   	push   eax
c00189b2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189b6:	50                   	push   eax
c00189b7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00189bb:	56                   	push   esi
c00189bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189c0:	50                   	push   eax
c00189c1:	6a 00                	push   0x0
c00189c3:	e8 d4 fc ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189c8:	b8 04 00 00 00       	mov    eax,0x4
c00189cd:	89 c1                	mov    ecx,eax
c00189cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189d1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00189d7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00189db:	89 c1                	mov    ecx,eax
c00189dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189df:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00189e5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00189e9:	89 c1                	mov    ecx,eax
c00189eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189ed:	83 c4 18             	add    esp,0x18
c00189f0:	68 cc b0 02 c0       	push   0xc002b0cc
c00189f5:	55                   	push   ebp
c00189f6:	e8 9d 7e fe ff       	call   c0000898 <strcmp>
c00189fb:	83 c4 10             	add    esp,0x10
c00189fe:	85 c0                	test   eax,eax
c0018a00:	75 0f                	jne    c0018a11 <CPU::detectFeatures()+0x1a9>
c0018a02:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018a0c:	e9 22 02 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018a11:	50                   	push   eax
c0018a12:	50                   	push   eax
c0018a13:	68 d9 b0 02 c0       	push   0xc002b0d9
c0018a18:	55                   	push   ebp
c0018a19:	e8 7a 7e fe ff       	call   c0000898 <strcmp>
c0018a1e:	83 c4 10             	add    esp,0x10
c0018a21:	85 c0                	test   eax,eax
c0018a23:	74 dd                	je     c0018a02 <CPU::detectFeatures()+0x19a>
c0018a25:	50                   	push   eax
c0018a26:	50                   	push   eax
c0018a27:	68 e6 b0 02 c0       	push   0xc002b0e6
c0018a2c:	55                   	push   ebp
c0018a2d:	e8 66 7e fe ff       	call   c0000898 <strcmp>
c0018a32:	83 c4 10             	add    esp,0x10
c0018a35:	85 c0                	test   eax,eax
c0018a37:	74 2a                	je     c0018a63 <CPU::detectFeatures()+0x1fb>
c0018a39:	50                   	push   eax
c0018a3a:	50                   	push   eax
c0018a3b:	68 f3 b0 02 c0       	push   0xc002b0f3
c0018a40:	55                   	push   ebp
c0018a41:	e8 52 7e fe ff       	call   c0000898 <strcmp>
c0018a46:	83 c4 10             	add    esp,0x10
c0018a49:	85 c0                	test   eax,eax
c0018a4b:	74 16                	je     c0018a63 <CPU::detectFeatures()+0x1fb>
c0018a4d:	50                   	push   eax
c0018a4e:	50                   	push   eax
c0018a4f:	68 00 b1 02 c0       	push   0xc002b100
c0018a54:	55                   	push   ebp
c0018a55:	e8 3e 7e fe ff       	call   c0000898 <strcmp>
c0018a5a:	83 c4 10             	add    esp,0x10
c0018a5d:	85 c0                	test   eax,eax
c0018a5f:	74 48                	je     c0018aa9 <CPU::detectFeatures()+0x241>
c0018a61:	eb 0f                	jmp    c0018a72 <CPU::detectFeatures()+0x20a>
c0018a63:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018a6d:	e9 c1 01 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018a72:	50                   	push   eax
c0018a73:	50                   	push   eax
c0018a74:	68 0d b1 02 c0       	push   0xc002b10d
c0018a79:	55                   	push   ebp
c0018a7a:	e8 19 7e fe ff       	call   c0000898 <strcmp>
c0018a7f:	83 c4 10             	add    esp,0x10
c0018a82:	85 c0                	test   eax,eax
c0018a84:	74 23                	je     c0018aa9 <CPU::detectFeatures()+0x241>
c0018a86:	57                   	push   edi
c0018a87:	57                   	push   edi
c0018a88:	68 1a b1 02 c0       	push   0xc002b11a
c0018a8d:	55                   	push   ebp
c0018a8e:	e8 05 7e fe ff       	call   c0000898 <strcmp>
c0018a93:	83 c4 10             	add    esp,0x10
c0018a96:	85 c0                	test   eax,eax
c0018a98:	75 1e                	jne    c0018ab8 <CPU::detectFeatures()+0x250>
c0018a9a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018aa4:	e9 8a 01 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018aa9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018ab3:	e9 7b 01 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018ab8:	56                   	push   esi
c0018ab9:	56                   	push   esi
c0018aba:	68 27 b1 02 c0       	push   0xc002b127
c0018abf:	55                   	push   ebp
c0018ac0:	e8 d3 7d fe ff       	call   c0000898 <strcmp>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	85 c0                	test   eax,eax
c0018aca:	75 0f                	jne    c0018adb <CPU::detectFeatures()+0x273>
c0018acc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018ad6:	e9 58 01 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018adb:	51                   	push   ecx
c0018adc:	51                   	push   ecx
c0018add:	68 e6 b0 02 c0       	push   0xc002b0e6
c0018ae2:	55                   	push   ebp
c0018ae3:	e8 b0 7d fe ff       	call   c0000898 <strcmp>
c0018ae8:	83 c4 10             	add    esp,0x10
c0018aeb:	85 c0                	test   eax,eax
c0018aed:	75 0f                	jne    c0018afe <CPU::detectFeatures()+0x296>
c0018aef:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018af9:	e9 35 01 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018afe:	52                   	push   edx
c0018aff:	52                   	push   edx
c0018b00:	68 34 b1 02 c0       	push   0xc002b134
c0018b05:	55                   	push   ebp
c0018b06:	e8 8d 7d fe ff       	call   c0000898 <strcmp>
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	85 c0                	test   eax,eax
c0018b10:	75 0f                	jne    c0018b21 <CPU::detectFeatures()+0x2b9>
c0018b12:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018b1c:	e9 12 01 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018b21:	50                   	push   eax
c0018b22:	50                   	push   eax
c0018b23:	68 41 b1 02 c0       	push   0xc002b141
c0018b28:	55                   	push   ebp
c0018b29:	e8 6a 7d fe ff       	call   c0000898 <strcmp>
c0018b2e:	83 c4 10             	add    esp,0x10
c0018b31:	85 c0                	test   eax,eax
c0018b33:	75 0f                	jne    c0018b44 <CPU::detectFeatures()+0x2dc>
c0018b35:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018b3f:	e9 ef 00 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018b44:	50                   	push   eax
c0018b45:	50                   	push   eax
c0018b46:	68 4e b1 02 c0       	push   0xc002b14e
c0018b4b:	55                   	push   ebp
c0018b4c:	e8 47 7d fe ff       	call   c0000898 <strcmp>
c0018b51:	83 c4 10             	add    esp,0x10
c0018b54:	85 c0                	test   eax,eax
c0018b56:	75 0f                	jne    c0018b67 <CPU::detectFeatures()+0x2ff>
c0018b58:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b62:	e9 cc 00 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018b67:	50                   	push   eax
c0018b68:	50                   	push   eax
c0018b69:	68 5b b1 02 c0       	push   0xc002b15b
c0018b6e:	55                   	push   ebp
c0018b6f:	e8 24 7d fe ff       	call   c0000898 <strcmp>
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	85 c0                	test   eax,eax
c0018b79:	75 0f                	jne    c0018b8a <CPU::detectFeatures()+0x322>
c0018b7b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018b85:	e9 a9 00 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018b8a:	50                   	push   eax
c0018b8b:	50                   	push   eax
c0018b8c:	68 68 b1 02 c0       	push   0xc002b168
c0018b91:	55                   	push   ebp
c0018b92:	e8 01 7d fe ff       	call   c0000898 <strcmp>
c0018b97:	83 c4 10             	add    esp,0x10
c0018b9a:	85 c0                	test   eax,eax
c0018b9c:	75 0f                	jne    c0018bad <CPU::detectFeatures()+0x345>
c0018b9e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018ba8:	e9 86 00 00 00       	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018bad:	50                   	push   eax
c0018bae:	50                   	push   eax
c0018baf:	68 75 b1 02 c0       	push   0xc002b175
c0018bb4:	55                   	push   ebp
c0018bb5:	e8 de 7c fe ff       	call   c0000898 <strcmp>
c0018bba:	83 c4 10             	add    esp,0x10
c0018bbd:	85 c0                	test   eax,eax
c0018bbf:	75 0c                	jne    c0018bcd <CPU::detectFeatures()+0x365>
c0018bc1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018bcb:	eb 66                	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018bcd:	50                   	push   eax
c0018bce:	50                   	push   eax
c0018bcf:	68 82 b1 02 c0       	push   0xc002b182
c0018bd4:	55                   	push   ebp
c0018bd5:	e8 be 7c fe ff       	call   c0000898 <strcmp>
c0018bda:	83 c4 10             	add    esp,0x10
c0018bdd:	85 c0                	test   eax,eax
c0018bdf:	75 0c                	jne    c0018bed <CPU::detectFeatures()+0x385>
c0018be1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018beb:	eb 46                	jmp    c0018c33 <CPU::detectFeatures()+0x3cb>
c0018bed:	57                   	push   edi
c0018bee:	57                   	push   edi
c0018bef:	68 8f b1 02 c0       	push   0xc002b18f
c0018bf4:	55                   	push   ebp
c0018bf5:	e8 9e 7c fe ff       	call   c0000898 <strcmp>
c0018bfa:	83 c4 10             	add    esp,0x10
c0018bfd:	85 c0                	test   eax,eax
c0018bff:	74 e0                	je     c0018be1 <CPU::detectFeatures()+0x379>
c0018c01:	56                   	push   esi
c0018c02:	56                   	push   esi
c0018c03:	68 9c b1 02 c0       	push   0xc002b19c
c0018c08:	55                   	push   ebp
c0018c09:	e8 8a 7c fe ff       	call   c0000898 <strcmp>
c0018c0e:	83 c4 10             	add    esp,0x10
c0018c11:	85 c0                	test   eax,eax
c0018c13:	74 cc                	je     c0018be1 <CPU::detectFeatures()+0x379>
c0018c15:	51                   	push   ecx
c0018c16:	51                   	push   ecx
c0018c17:	68 a9 b1 02 c0       	push   0xc002b1a9
c0018c1c:	55                   	push   ebp
c0018c1d:	e8 76 7c fe ff       	call   c0000898 <strcmp>
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	85 c0                	test   eax,eax
c0018c27:	74 b8                	je     c0018be1 <CPU::detectFeatures()+0x379>
c0018c29:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018c33:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018c38:	0f 86 be 00 00 00    	jbe    c0018cfc <CPU::detectFeatures()+0x494>
c0018c3e:	83 ec 0c             	sub    esp,0xc
c0018c41:	68 80 00 00 00       	push   0x80
c0018c46:	e8 31 fb ff ff       	call   c001877c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c4b:	83 e0 01             	and    eax,0x1
c0018c4e:	c1 e0 06             	shl    eax,0x6
c0018c51:	88 c2                	mov    dl,al
c0018c53:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c59:	83 e0 bf             	and    eax,0xffffffbf
c0018c5c:	09 d0                	or     eax,edx
c0018c5e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c64:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018c6b:	e8 0c fb ff ff       	call   c001877c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c70:	83 e0 01             	and    eax,0x1
c0018c73:	c1 e0 04             	shl    eax,0x4
c0018c76:	88 c2                	mov    dl,al
c0018c78:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c7e:	83 e0 ef             	and    eax,0xffffffef
c0018c81:	09 d0                	or     eax,edx
c0018c83:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c89:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018c90:	e8 e7 fa ff ff       	call   c001877c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c95:	c1 e0 07             	shl    eax,0x7
c0018c98:	88 c2                	mov    dl,al
c0018c9a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ca0:	83 e0 7f             	and    eax,0x7f
c0018ca3:	09 d0                	or     eax,edx
c0018ca5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cab:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018cb2:	e8 f3 fa ff ff       	call   c00187aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018cb7:	83 e0 01             	and    eax,0x1
c0018cba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cc1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018cc7:	83 e0 f7             	and    eax,0xfffffff7
c0018cca:	09 d0                	or     eax,edx
c0018ccc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018cd2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018cd9:	e8 cc fa ff ff       	call   c00187aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018cde:	83 c4 10             	add    esp,0x10
c0018ce1:	83 e0 01             	and    eax,0x1
c0018ce4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ceb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018cf1:	83 e0 fb             	and    eax,0xfffffffb
c0018cf4:	09 d0                	or     eax,edx
c0018cf6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018cfc:	83 ec 0c             	sub    esp,0xc
c0018cff:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d03:	50                   	push   eax
c0018d04:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d08:	50                   	push   eax
c0018d09:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d0d:	56                   	push   esi
c0018d0e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d12:	50                   	push   eax
c0018d13:	6a 01                	push   0x1
c0018d15:	e8 82 f9 ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d1a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018d1e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d24:	88 ca                	mov    dl,cl
c0018d26:	83 e0 f0             	and    eax,0xfffffff0
c0018d29:	83 e2 0f             	and    edx,0xf
c0018d2c:	09 d0                	or     eax,edx
c0018d2e:	88 ca                	mov    dl,cl
c0018d30:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018d36:	c0 ea 04             	shr    dl,0x4
c0018d39:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018d3d:	0f b6 c2             	movzx  eax,dl
c0018d40:	83 c4 20             	add    esp,0x20
c0018d43:	c1 e0 06             	shl    eax,0x6
c0018d46:	89 c7                	mov    edi,eax
c0018d48:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d4e:	66 25 3f c0          	and    ax,0xc03f
c0018d52:	09 f8                	or     eax,edi
c0018d54:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018d5b:	89 c8                	mov    eax,ecx
c0018d5d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018d64:	c1 e8 08             	shr    eax,0x8
c0018d67:	83 e5 3f             	and    ebp,0x3f
c0018d6a:	83 e0 0f             	and    eax,0xf
c0018d6d:	89 c7                	mov    edi,eax
c0018d6f:	c1 e7 06             	shl    edi,0x6
c0018d72:	09 ef                	or     edi,ebp
c0018d74:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018d7b:	89 fa                	mov    edx,edi
c0018d7d:	83 e5 c0             	and    ebp,0xffffffc0
c0018d80:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018d86:	88 c2                	mov    dl,al
c0018d88:	c0 ea 02             	shr    dl,0x2
c0018d8b:	89 d7                	mov    edi,edx
c0018d8d:	09 ef                	or     edi,ebp
c0018d8f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018d95:	89 fa                	mov    edx,edi
c0018d97:	83 e5 cf             	and    ebp,0xffffffcf
c0018d9a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018da0:	89 cf                	mov    edi,ecx
c0018da2:	c1 ef 0c             	shr    edi,0xc
c0018da5:	83 e7 03             	and    edi,0x3
c0018da8:	c1 e7 04             	shl    edi,0x4
c0018dab:	09 ef                	or     edi,ebp
c0018dad:	3c 06                	cmp    al,0x6
c0018daf:	89 fa                	mov    edx,edi
c0018db1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018db7:	74 04                	je     c0018dbd <CPU::detectFeatures()+0x555>
c0018db9:	3c 0f                	cmp    al,0xf
c0018dbb:	75 5c                	jne    c0018e19 <CPU::detectFeatures()+0x5b1>
c0018dbd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018dc1:	89 cf                	mov    edi,ecx
c0018dc3:	c1 ef 10             	shr    edi,0x10
c0018dc6:	c1 e7 04             	shl    edi,0x4
c0018dc9:	09 fa                	or     edx,edi
c0018dcb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018dd1:	0f b6 d2             	movzx  edx,dl
c0018dd4:	66 81 e7 3f c0       	and    di,0xc03f
c0018dd9:	c1 e2 06             	shl    edx,0x6
c0018ddc:	09 fa                	or     edx,edi
c0018dde:	3c 0f                	cmp    al,0xf
c0018de0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018de7:	75 30                	jne    c0018e19 <CPU::detectFeatures()+0x5b1>
c0018de9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018def:	c1 e9 14             	shr    ecx,0x14
c0018df2:	83 e0 3f             	and    eax,0x3f
c0018df5:	83 c1 0f             	add    ecx,0xf
c0018df8:	88 ca                	mov    dl,cl
c0018dfa:	c0 e9 02             	shr    cl,0x2
c0018dfd:	c1 e2 06             	shl    edx,0x6
c0018e00:	09 d0                	or     eax,edx
c0018e02:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018e08:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018e0e:	83 e0 c0             	and    eax,0xffffffc0
c0018e11:	09 c1                	or     ecx,eax
c0018e13:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018e19:	83 ec 0c             	sub    esp,0xc
c0018e1c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e23:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e27:	50                   	push   eax
c0018e28:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e2c:	55                   	push   ebp
c0018e2d:	56                   	push   esi
c0018e2e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018e32:	57                   	push   edi
c0018e33:	68 00 00 00 80       	push   0x80000000
c0018e38:	e8 5f f8 ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e3d:	83 c4 20             	add    esp,0x20
c0018e40:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018e48:	76 22                	jbe    c0018e6c <CPU::detectFeatures()+0x604>
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e51:	50                   	push   eax
c0018e52:	55                   	push   ebp
c0018e53:	56                   	push   esi
c0018e54:	57                   	push   edi
c0018e55:	68 01 00 00 80       	push   0x80000001
c0018e5a:	e8 3d f8 ff ff       	call   c001869c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e5f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018e69:	83 c4 20             	add    esp,0x20
c0018e6c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018e72:	83 f8 01             	cmp    eax,0x1
c0018e75:	75 6f                	jne    c0018ee6 <CPU::detectFeatures()+0x67e>
c0018e77:	51                   	push   ecx
c0018e78:	51                   	push   ecx
c0018e79:	68 b5 b1 02 c0       	push   0xc002b1b5
c0018e7e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e82:	56                   	push   esi
c0018e83:	e8 84 79 fe ff       	call   c000080c <strcpy>
c0018e88:	5f                   	pop    edi
c0018e89:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e8f:	5d                   	pop    ebp
c0018e90:	66 c1 e8 06          	shr    ax,0x6
c0018e94:	0f b6 c0             	movzx  eax,al
c0018e97:	50                   	push   eax
c0018e98:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e9e:	c1 e8 0e             	shr    eax,0xe
c0018ea1:	0f b6 c0             	movzx  eax,al
c0018ea4:	50                   	push   eax
c0018ea5:	e8 9c f4 ff ff       	call   c0018346 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018eaa:	5a                   	pop    edx
c0018eab:	59                   	pop    ecx
c0018eac:	50                   	push   eax
c0018ead:	56                   	push   esi
c0018eae:	e8 99 7a fe ff       	call   c000094c <strcat>
c0018eb3:	5f                   	pop    edi
c0018eb4:	5d                   	pop    ebp
c0018eb5:	56                   	push   esi
c0018eb6:	53                   	push   ebx
c0018eb7:	e8 36 ad ff ff       	call   c0013bf2 <Device::setName(char const*)>
c0018ebc:	58                   	pop    eax
c0018ebd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ec3:	5a                   	pop    edx
c0018ec4:	68 bc b1 02 c0       	push   0xc002b1bc
c0018ec9:	50                   	push   eax
c0018eca:	e8 c9 79 fe ff       	call   c0000898 <strcmp>
c0018ecf:	83 c4 10             	add    esp,0x10
c0018ed2:	85 c0                	test   eax,eax
c0018ed4:	0f 85 71 03 00 00    	jne    c001924b <CPU::detectFeatures()+0x9e3>
c0018eda:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018ee1:	e9 65 03 00 00       	jmp    c001924b <CPU::detectFeatures()+0x9e3>
c0018ee6:	83 f8 02             	cmp    eax,0x2
c0018ee9:	0f 85 b5 00 00 00    	jne    c0018fa4 <CPU::detectFeatures()+0x73c>
c0018eef:	57                   	push   edi
c0018ef0:	57                   	push   edi
c0018ef1:	68 ce b1 02 c0       	push   0xc002b1ce
c0018ef6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018efa:	56                   	push   esi
c0018efb:	e8 0c 79 fe ff       	call   c000080c <strcpy>
c0018f00:	5d                   	pop    ebp
c0018f01:	58                   	pop    eax
c0018f02:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f08:	66 c1 e8 06          	shr    ax,0x6
c0018f0c:	0f b6 c0             	movzx  eax,al
c0018f0f:	50                   	push   eax
c0018f10:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f16:	c1 e8 0e             	shr    eax,0xe
c0018f19:	0f b6 c0             	movzx  eax,al
c0018f1c:	50                   	push   eax
c0018f1d:	e8 90 f2 ff ff       	call   c00181b2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018f22:	5a                   	pop    edx
c0018f23:	59                   	pop    ecx
c0018f24:	50                   	push   eax
c0018f25:	56                   	push   esi
c0018f26:	e8 21 7a fe ff       	call   c000094c <strcat>
c0018f2b:	5f                   	pop    edi
c0018f2c:	5d                   	pop    ebp
c0018f2d:	56                   	push   esi
c0018f2e:	53                   	push   ebx
c0018f2f:	e8 be ac ff ff       	call   c0013bf2 <Device::setName(char const*)>
c0018f34:	58                   	pop    eax
c0018f35:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f3b:	5a                   	pop    edx
c0018f3c:	68 d3 b1 02 c0       	push   0xc002b1d3
c0018f41:	50                   	push   eax
c0018f42:	e8 51 79 fe ff       	call   c0000898 <strcmp>
c0018f47:	83 c4 10             	add    esp,0x10
c0018f4a:	85 c0                	test   eax,eax
c0018f4c:	75 20                	jne    c0018f6e <CPU::detectFeatures()+0x706>
c0018f4e:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0018f54:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018f5a:	a8 01                	test   al,0x1
c0018f5c:	74 10                	je     c0018f6e <CPU::detectFeatures()+0x706>
c0018f5e:	83 e0 fe             	and    eax,0xfffffffe
c0018f61:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018f67:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018f6e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f74:	c1 e8 0e             	shr    eax,0xe
c0018f77:	3c 05                	cmp    al,0x5
c0018f79:	0f 85 cc 02 00 00    	jne    c001924b <CPU::detectFeatures()+0x9e3>
c0018f7f:	56                   	push   esi
c0018f80:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f86:	83 e0 0f             	and    eax,0xf
c0018f89:	50                   	push   eax
c0018f8a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f90:	66 c1 e8 06          	shr    ax,0x6
c0018f94:	0f b6 c0             	movzx  eax,al
c0018f97:	50                   	push   eax
c0018f98:	6a 05                	push   0x5
c0018f9a:	e8 89 f6 ff ff       	call   c0018628 <CPU::AMD_K6_writeback(int, int, int)>
c0018f9f:	e9 1f 02 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x95b>
c0018fa4:	8d 50 fd             	lea    edx,[eax-0x3]
c0018fa7:	83 fa 01             	cmp    edx,0x1
c0018faa:	76 09                	jbe    c0018fb5 <CPU::detectFeatures()+0x74d>
c0018fac:	83 f8 06             	cmp    eax,0x6
c0018faf:	0f 85 91 01 00 00    	jne    c0019146 <CPU::detectFeatures()+0x8de>
c0018fb5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fbb:	c1 ea 0e             	shr    edx,0xe
c0018fbe:	80 fa 05             	cmp    dl,0x5
c0018fc1:	75 7b                	jne    c001903e <CPU::detectFeatures()+0x7d6>
c0018fc3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fc9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018fce:	66 81 fa 00 01       	cmp    dx,0x100
c0018fd3:	75 0c                	jne    c0018fe1 <CPU::detectFeatures()+0x779>
c0018fd5:	51                   	push   ecx
c0018fd6:	51                   	push   ecx
c0018fd7:	68 da b1 02 c0       	push   0xc002b1da
c0018fdc:	e9 dc 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0018fe1:	66 81 fa 00 02       	cmp    dx,0x200
c0018fe6:	75 0c                	jne    c0018ff4 <CPU::detectFeatures()+0x78c>
c0018fe8:	52                   	push   edx
c0018fe9:	52                   	push   edx
c0018fea:	68 ed b1 02 c0       	push   0xc002b1ed
c0018fef:	e9 c9 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0018ff4:	66 81 fa 40 02       	cmp    dx,0x240
c0018ff9:	75 0c                	jne    c0019007 <CPU::detectFeatures()+0x79f>
c0018ffb:	50                   	push   eax
c0018ffc:	50                   	push   eax
c0018ffd:	68 ff b1 02 c0       	push   0xc002b1ff
c0019002:	e9 b6 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019007:	83 f8 06             	cmp    eax,0x6
c001900a:	75 0c                	jne    c0019018 <CPU::detectFeatures()+0x7b0>
c001900c:	50                   	push   eax
c001900d:	50                   	push   eax
c001900e:	68 11 b2 02 c0       	push   0xc002b211
c0019013:	e9 a5 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019018:	83 f8 04             	cmp    eax,0x4
c001901b:	75 0c                	jne    c0019029 <CPU::detectFeatures()+0x7c1>
c001901d:	50                   	push   eax
c001901e:	50                   	push   eax
c001901f:	68 1d b2 02 c0       	push   0xc002b21d
c0019024:	e9 94 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019029:	83 f8 03             	cmp    eax,0x3
c001902c:	0f 85 19 02 00 00    	jne    c001924b <CPU::detectFeatures()+0x9e3>
c0019032:	50                   	push   eax
c0019033:	50                   	push   eax
c0019034:	68 25 b2 02 c0       	push   0xc002b225
c0019039:	e9 7f 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c001903e:	80 fa 06             	cmp    dl,0x6
c0019041:	0f 85 db 00 00 00    	jne    c0019122 <CPU::detectFeatures()+0x8ba>
c0019047:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001904d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019052:	66 81 fa 80 01       	cmp    dx,0x180
c0019057:	75 0c                	jne    c0019065 <CPU::detectFeatures()+0x7fd>
c0019059:	50                   	push   eax
c001905a:	50                   	push   eax
c001905b:	68 30 b2 02 c0       	push   0xc002b230
c0019060:	e9 58 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019065:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001906b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019070:	75 0c                	jne    c001907e <CPU::detectFeatures()+0x816>
c0019072:	50                   	push   eax
c0019073:	50                   	push   eax
c0019074:	68 40 b2 02 c0       	push   0xc002b240
c0019079:	e9 3f 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c001907e:	66 81 fa 40 02       	cmp    dx,0x240
c0019083:	75 0c                	jne    c0019091 <CPU::detectFeatures()+0x829>
c0019085:	55                   	push   ebp
c0019086:	55                   	push   ebp
c0019087:	68 47 b2 02 c0       	push   0xc002b247
c001908c:	e9 2c 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019091:	66 81 fa 80 02       	cmp    dx,0x280
c0019096:	75 0c                	jne    c00190a4 <CPU::detectFeatures()+0x83c>
c0019098:	57                   	push   edi
c0019099:	57                   	push   edi
c001909a:	68 50 b2 02 c0       	push   0xc002b250
c001909f:	e9 19 01 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c00190a4:	66 81 fa 40 03       	cmp    dx,0x340
c00190a9:	74 ed                	je     c0019098 <CPU::detectFeatures()+0x830>
c00190ab:	66 81 fa c0 03       	cmp    dx,0x3c0
c00190b0:	75 0c                	jne    c00190be <CPU::detectFeatures()+0x856>
c00190b2:	56                   	push   esi
c00190b3:	56                   	push   esi
c00190b4:	68 57 b2 02 c0       	push   0xc002b257
c00190b9:	e9 ff 00 00 00       	jmp    c00191bd <CPU::detectFeatures()+0x955>
c00190be:	83 f8 06             	cmp    eax,0x6
c00190c1:	0f 84 45 ff ff ff    	je     c001900c <CPU::detectFeatures()+0x7a4>
c00190c7:	83 f8 04             	cmp    eax,0x4
c00190ca:	0f 84 4d ff ff ff    	je     c001901d <CPU::detectFeatures()+0x7b5>
c00190d0:	83 f8 03             	cmp    eax,0x3
c00190d3:	0f 85 72 01 00 00    	jne    c001924b <CPU::detectFeatures()+0x9e3>
c00190d9:	51                   	push   ecx
c00190da:	51                   	push   ecx
c00190db:	68 60 b2 02 c0       	push   0xc002b260
c00190e0:	53                   	push   ebx
c00190e1:	e8 0c ab ff ff       	call   c0013bf2 <Device::setName(char const*)>
c00190e6:	b1 c1                	mov    cl,0xc1
c00190e8:	88 c8                	mov    al,cl
c00190ea:	e6 22                	out    0x22,al
c00190ec:	e4 23                	in     al,0x23
c00190ee:	88 c2                	mov    dl,al
c00190f0:	88 c8                	mov    al,cl
c00190f2:	e6 22                	out    0x22,al
c00190f4:	88 d0                	mov    al,dl
c00190f6:	83 c8 10             	or     eax,0x10
c00190f9:	e6 23                	out    0x23,al
c00190fb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019102:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019105:	89 d0                	mov    eax,edx
c0019107:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001910d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019111:	40                   	inc    eax
c0019112:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019118:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001911d:	e9 a1 00 00 00       	jmp    c00191c3 <CPU::detectFeatures()+0x95b>
c0019122:	83 f8 06             	cmp    eax,0x6
c0019125:	0f 84 e1 fe ff ff    	je     c001900c <CPU::detectFeatures()+0x7a4>
c001912b:	83 f8 04             	cmp    eax,0x4
c001912e:	0f 84 e9 fe ff ff    	je     c001901d <CPU::detectFeatures()+0x7b5>
c0019134:	83 f8 03             	cmp    eax,0x3
c0019137:	0f 85 0e 01 00 00    	jne    c001924b <CPU::detectFeatures()+0x9e3>
c001913d:	52                   	push   edx
c001913e:	52                   	push   edx
c001913f:	68 6b b2 02 c0       	push   0xc002b26b
c0019144:	eb 77                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019146:	83 f8 07             	cmp    eax,0x7
c0019149:	75 09                	jne    c0019154 <CPU::detectFeatures()+0x8ec>
c001914b:	50                   	push   eax
c001914c:	50                   	push   eax
c001914d:	68 75 b2 02 c0       	push   0xc002b275
c0019152:	eb 69                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019154:	83 f8 0a             	cmp    eax,0xa
c0019157:	75 09                	jne    c0019162 <CPU::detectFeatures()+0x8fa>
c0019159:	50                   	push   eax
c001915a:	50                   	push   eax
c001915b:	68 80 b2 02 c0       	push   0xc002b280
c0019160:	eb 5b                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019162:	83 f8 0b             	cmp    eax,0xb
c0019165:	75 09                	jne    c0019170 <CPU::detectFeatures()+0x908>
c0019167:	50                   	push   eax
c0019168:	50                   	push   eax
c0019169:	68 88 b2 02 c0       	push   0xc002b288
c001916e:	eb 4d                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c0019170:	83 f8 08             	cmp    eax,0x8
c0019173:	75 09                	jne    c001917e <CPU::detectFeatures()+0x916>
c0019175:	50                   	push   eax
c0019176:	50                   	push   eax
c0019177:	68 91 b2 02 c0       	push   0xc002b291
c001917c:	eb 3f                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c001917e:	83 f8 09             	cmp    eax,0x9
c0019181:	75 09                	jne    c001918c <CPU::detectFeatures()+0x924>
c0019183:	50                   	push   eax
c0019184:	50                   	push   eax
c0019185:	68 99 b2 02 c0       	push   0xc002b299
c001918a:	eb 31                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c001918c:	83 f8 05             	cmp    eax,0x5
c001918f:	75 09                	jne    c001919a <CPU::detectFeatures()+0x932>
c0019191:	50                   	push   eax
c0019192:	50                   	push   eax
c0019193:	68 a1 b2 02 c0       	push   0xc002b2a1
c0019198:	eb 23                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c001919a:	83 f8 0c             	cmp    eax,0xc
c001919d:	75 09                	jne    c00191a8 <CPU::detectFeatures()+0x940>
c001919f:	55                   	push   ebp
c00191a0:	55                   	push   ebp
c00191a1:	68 af b2 02 c0       	push   0xc002b2af
c00191a6:	eb 15                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c00191a8:	83 f8 0d             	cmp    eax,0xd
c00191ab:	75 09                	jne    c00191b6 <CPU::detectFeatures()+0x94e>
c00191ad:	57                   	push   edi
c00191ae:	57                   	push   edi
c00191af:	68 ba b2 02 c0       	push   0xc002b2ba
c00191b4:	eb 07                	jmp    c00191bd <CPU::detectFeatures()+0x955>
c00191b6:	56                   	push   esi
c00191b7:	56                   	push   esi
c00191b8:	68 ce b2 02 c0       	push   0xc002b2ce
c00191bd:	53                   	push   ebx
c00191be:	e8 2f aa ff ff       	call   c0013bf2 <Device::setName(char const*)>
c00191c3:	83 c4 10             	add    esp,0x10
c00191c6:	e9 80 00 00 00       	jmp    c001924b <CPU::detectFeatures()+0x9e3>
c00191cb:	51                   	push   ecx
c00191cc:	51                   	push   ecx
c00191cd:	68 1a b1 02 c0       	push   0xc002b11a
c00191d2:	55                   	push   ebp
c00191d3:	e8 34 76 fe ff       	call   c000080c <strcpy>
c00191d8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191e2:	e8 c7 70 fe ff       	call   c00002ae <is486>
c00191e7:	83 c4 10             	add    esp,0x10
c00191ea:	85 c0                	test   eax,eax
c00191ec:	74 2b                	je     c0019219 <CPU::detectFeatures()+0x9b1>
c00191ee:	52                   	push   edx
c00191ef:	52                   	push   edx
c00191f0:	68 da b2 02 c0       	push   0xc002b2da
c00191f5:	53                   	push   ebx
c00191f6:	e8 f7 a9 ff ff       	call   c0013bf2 <Device::setName(char const*)>
c00191fb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019202:	0f 20 c0             	mov    eax,cr0
c0019205:	83 e0 14             	and    eax,0x14
c0019208:	83 c4 10             	add    esp,0x10
c001920b:	83 f8 04             	cmp    eax,0x4
c001920e:	75 1f                	jne    c001922f <CPU::detectFeatures()+0x9c7>
c0019210:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019217:	eb 32                	jmp    c001924b <CPU::detectFeatures()+0x9e3>
c0019219:	50                   	push   eax
c001921a:	50                   	push   eax
c001921b:	68 e5 b2 02 c0       	push   0xc002b2e5
c0019220:	53                   	push   ebx
c0019221:	e8 cc a9 ff ff       	call   c0013bf2 <Device::setName(char const*)>
c0019226:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001922d:	eb d3                	jmp    c0019202 <CPU::detectFeatures()+0x99a>
c001922f:	e8 55 70 fe ff       	call   c0000289 <hasLegacyFPU>
c0019234:	83 e0 01             	and    eax,0x1
c0019237:	8d 14 00             	lea    edx,[eax+eax*1]
c001923a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019240:	83 e0 fd             	and    eax,0xfffffffd
c0019243:	09 d0                	or     eax,edx
c0019245:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001924b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019252:	83 c4 4c             	add    esp,0x4c
c0019255:	5b                   	pop    ebx
c0019256:	5e                   	pop    esi
c0019257:	5f                   	pop    edi
c0019258:	5d                   	pop    ebp
c0019259:	c3                   	ret    

c001925a <CPU::setupSMEP()>:
c001925a:	0f 20 e0             	mov    eax,cr4
c001925d:	0d 00 00 10 00       	or     eax,0x100000
c0019262:	0f 22 e0             	mov    cr4,eax
c0019265:	c3                   	ret    

c0019266 <CPU::setupUMIP()>:
c0019266:	0f 20 e0             	mov    eax,cr4
c0019269:	80 cc 08             	or     ah,0x8
c001926c:	0f 22 e0             	mov    cr4,eax
c001926f:	c3                   	ret    

c0019270 <CPU::setupTSC()>:
c0019270:	0f 20 e0             	mov    eax,cr4
c0019273:	83 c8 04             	or     eax,0x4
c0019276:	0f 22 e0             	mov    cr4,eax
c0019279:	c3                   	ret    

c001927a <CPU::setupLargePages()>:
c001927a:	0f 20 e0             	mov    eax,cr4
c001927d:	83 c8 10             	or     eax,0x10
c0019280:	0f 22 e0             	mov    cr4,eax
c0019283:	c3                   	ret    

c0019284 <CPU::setupPAT()>:
c0019284:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0019289:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019290:	74 2c                	je     c00192be <CPU::setupPAT()+0x3a>
c0019292:	53                   	push   ebx
c0019293:	83 ec 10             	sub    esp,0x10
c0019296:	68 77 02 00 00       	push   0x277
c001929b:	50                   	push   eax
c001929c:	e8 9f 58 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00192a1:	83 e2 f8             	and    edx,0xfffffff8
c00192a4:	83 ca 01             	or     edx,0x1
c00192a7:	52                   	push   edx
c00192a8:	50                   	push   eax
c00192a9:	68 77 02 00 00       	push   0x277
c00192ae:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c00192b4:	e8 b3 58 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00192b9:	83 c4 28             	add    esp,0x28
c00192bc:	5b                   	pop    ebx
c00192bd:	c3                   	ret    
c00192be:	c3                   	ret    
c00192bf:	90                   	nop

c00192c0 <CPU::setupMTRR()>:
c00192c0:	c3                   	ret    
c00192c1:	90                   	nop

c00192c2 <CPU::setupGlobalPages()>:
c00192c2:	0f 20 e0             	mov    eax,cr4
c00192c5:	0c 80                	or     al,0x80
c00192c7:	0f 22 e0             	mov    cr4,eax
c00192ca:	c3                   	ret    
c00192cb:	90                   	nop

c00192cc <CPU::allowUsermodeDataAccess()>:
c00192cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192d0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192d7:	74 03                	je     c00192dc <CPU::allowUsermodeDataAccess()+0x10>
c00192d9:	0f 01 cb             	stac   
c00192dc:	c3                   	ret    
c00192dd:	90                   	nop

c00192de <CPU::prohibitUsermodeDataAccess()>:
c00192de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192e9:	74 03                	je     c00192ee <CPU::prohibitUsermodeDataAccess()+0x10>
c00192eb:	0f 01 ca             	clac   
c00192ee:	c3                   	ret    
c00192ef:	90                   	nop

c00192f0 <CPU::setupSMAP()>:
c00192f0:	0f 20 e0             	mov    eax,cr4
c00192f3:	0d 00 00 20 00       	or     eax,0x200000
c00192f8:	0f 22 e0             	mov    cr4,eax
c00192fb:	eb e1                	jmp    c00192de <CPU::prohibitUsermodeDataAccess()>
c00192fd:	90                   	nop

c00192fe <CPU::setupFeatures()>:
c00192fe:	83 ec 0c             	sub    esp,0xc
c0019301:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019305:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001930c:	74 07                	je     c0019315 <CPU::setupFeatures()+0x17>
c001930e:	52                   	push   edx
c001930f:	e8 46 ff ff ff       	call   c001925a <CPU::setupSMEP()>
c0019314:	58                   	pop    eax
c0019315:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001931c:	74 07                	je     c0019325 <CPU::setupFeatures()+0x27>
c001931e:	52                   	push   edx
c001931f:	e8 cc ff ff ff       	call   c00192f0 <CPU::setupSMAP()>
c0019324:	58                   	pop    eax
c0019325:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001932c:	74 07                	je     c0019335 <CPU::setupFeatures()+0x37>
c001932e:	52                   	push   edx
c001932f:	e8 32 ff ff ff       	call   c0019266 <CPU::setupUMIP()>
c0019334:	58                   	pop    eax
c0019335:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001933c:	74 07                	je     c0019345 <CPU::setupFeatures()+0x47>
c001933e:	52                   	push   edx
c001933f:	e8 2c ff ff ff       	call   c0019270 <CPU::setupTSC()>
c0019344:	58                   	pop    eax
c0019345:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001934c:	74 07                	je     c0019355 <CPU::setupFeatures()+0x57>
c001934e:	52                   	push   edx
c001934f:	e8 26 ff ff ff       	call   c001927a <CPU::setupLargePages()>
c0019354:	59                   	pop    ecx
c0019355:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001935c:	74 07                	je     c0019365 <CPU::setupFeatures()+0x67>
c001935e:	52                   	push   edx
c001935f:	e8 5e ff ff ff       	call   c00192c2 <CPU::setupGlobalPages()>
c0019364:	58                   	pop    eax
c0019365:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001936c:	74 0c                	je     c001937a <CPU::setupFeatures()+0x7c>
c001936e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019372:	83 c4 0c             	add    esp,0xc
c0019375:	e9 0a ff ff ff       	jmp    c0019284 <CPU::setupPAT()>
c001937a:	83 c4 0c             	add    esp,0xc
c001937d:	c3                   	ret    

c001937e <CPU::open(int, int, void*)>:
c001937e:	57                   	push   edi
c001937f:	56                   	push   esi
c0019380:	53                   	push   ebx
c0019381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019385:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019389:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001938f:	83 ec 0c             	sub    esp,0xc
c0019392:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019398:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001939e:	50                   	push   eax
c001939f:	e8 8a 5a ff ff       	call   c000ee2e <GDT::setup()>
c00193a4:	83 c4 0c             	add    esp,0xc
c00193a7:	6a 00                	push   0x0
c00193a9:	68 ef be ad de       	push   0xdeadbeef
c00193ae:	57                   	push   edi
c00193af:	e8 98 77 ff ff       	call   c0010b4c <TSS::setup(unsigned long, unsigned long)>
c00193b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193b7:	e8 70 77 ff ff       	call   c0010b2c <TSS::flush()>
c00193bc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00193c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00193c5:	e8 c8 5c ff ff       	call   c000f092 <IDT::setup()>
c00193ca:	b8 00 04 00 00       	mov    eax,0x400
c00193cf:	0f 23 f8             	mov    db7,eax
c00193d2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00193dc:	e8 5f 65 ff ff       	call   c000f940 <Phys::allocatePage()>
c00193e1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00193e7:	89 30                	mov    DWORD PTR [eax],esi
c00193e9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00193ef:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00193f2:	58                   	pop    eax
c00193f3:	5a                   	pop    edx
c00193f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00193fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00193fe:	e8 59 88 ff ff       	call   c0011c5c <VAS::setCPUSpecific(unsigned long)>
c0019403:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019406:	e8 5d f4 ff ff       	call   c0018868 <CPU::detectFeatures()>
c001940b:	e8 35 bc ff ff       	call   c0015045 <setupInterruptController()>
c0019410:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019416:	a1 20 d7 02 c0       	mov    eax,ds:0xc002d720
c001941b:	83 e0 10             	and    eax,0x10
c001941e:	83 f8 01             	cmp    eax,0x1
c0019421:	19 c0                	sbb    eax,eax
c0019423:	83 e0 46             	and    eax,0x46
c0019426:	83 c0 1e             	add    eax,0x1e
c0019429:	89 04 24             	mov    DWORD PTR [esp],eax
c001942c:	e8 02 d2 ff ff       	call   c0016633 <setupTimer(int)>
c0019431:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019437:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001943a:	e8 bf fe ff ff       	call   c00192fe <CPU::setupFeatures()>
c001943f:	83 c4 10             	add    esp,0x10
c0019442:	31 c0                	xor    eax,eax
c0019444:	5b                   	pop    ebx
c0019445:	5e                   	pop    esi
c0019446:	5f                   	pop    edi
c0019447:	c3                   	ret    

c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019448:	57                   	push   edi
c0019449:	56                   	push   esi
c001944a:	53                   	push   ebx
c001944b:	51                   	push   ecx
c001944c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019450:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019453:	0f 02 c0             	lar    eax,ax
c0019456:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019459:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001945d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019460:	88 ca                	mov    dl,cl
c0019462:	c0 ea 06             	shr    dl,0x6
c0019465:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019469:	89 ca                	mov    edx,ecx
c001946b:	66 c1 ea 03          	shr    dx,0x3
c001946f:	83 e2 07             	and    edx,0x7
c0019472:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019477:	88 17                	mov    BYTE PTR [edi],dl
c0019479:	0f 84 a6 01 00 00    	je     c0019625 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001947f:	83 e1 07             	and    ecx,0x7
c0019482:	80 f9 04             	cmp    cl,0x4
c0019485:	0f 84 98 00 00 00    	je     c0019523 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001948b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019490:	0f 95 c0             	setne  al
c0019493:	80 f9 05             	cmp    cl,0x5
c0019496:	0f 95 c2             	setne  dl
c0019499:	08 c2                	or     dl,al
c001949b:	74 79                	je     c0019516 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001949d:	84 c9                	test   cl,cl
c001949f:	75 05                	jne    c00194a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00194a1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194a4:	eb 3c                	jmp    c00194e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194a6:	80 f9 01             	cmp    cl,0x1
c00194a9:	75 05                	jne    c00194b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00194ab:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194ae:	eb 32                	jmp    c00194e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194b0:	80 f9 02             	cmp    cl,0x2
c00194b3:	75 05                	jne    c00194ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00194b5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194b8:	eb 28                	jmp    c00194e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194ba:	31 c0                	xor    eax,eax
c00194bc:	80 f9 03             	cmp    cl,0x3
c00194bf:	75 05                	jne    c00194c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00194c1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194c4:	eb 1c                	jmp    c00194e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194c6:	80 f9 05             	cmp    cl,0x5
c00194c9:	75 05                	jne    c00194d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00194cb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00194ce:	eb 12                	jmp    c00194e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194d0:	80 f9 06             	cmp    cl,0x6
c00194d3:	75 05                	jne    c00194da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00194d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00194d8:	eb 08                	jmp    c00194e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194da:	80 f9 07             	cmp    cl,0x7
c00194dd:	75 03                	jne    c00194e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194df:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00194e2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00194e7:	75 10                	jne    c00194f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00194e9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00194ed:	b9 03 00 00 00       	mov    ecx,0x3
c00194f2:	01 d0                	add    eax,edx
c00194f4:	e9 37 01 00 00       	jmp    c0019630 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194f9:	b9 02 00 00 00       	mov    ecx,0x2
c00194fe:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019503:	0f 85 27 01 00 00    	jne    c0019630 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019509:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001950c:	b9 06 00 00 00       	mov    ecx,0x6
c0019511:	e9 1a 01 00 00       	jmp    c0019630 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019516:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019519:	b9 06 00 00 00       	mov    ecx,0x6
c001951e:	e9 0f 01 00 00       	jmp    c0019632 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019523:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019526:	88 ca                	mov    dl,cl
c0019528:	c0 ea 06             	shr    dl,0x6
c001952b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001952f:	89 ca                	mov    edx,ecx
c0019531:	66 c1 ea 03          	shr    dx,0x3
c0019535:	83 e2 07             	and    edx,0x7
c0019538:	80 e1 07             	and    cl,0x7
c001953b:	75 05                	jne    c0019542 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001953d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019540:	eb 4c                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019542:	80 f9 01             	cmp    cl,0x1
c0019545:	75 05                	jne    c001954c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019547:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001954a:	eb 42                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001954c:	80 f9 02             	cmp    cl,0x2
c001954f:	75 05                	jne    c0019556 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019551:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019554:	eb 38                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019556:	80 f9 03             	cmp    cl,0x3
c0019559:	75 05                	jne    c0019560 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001955b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001955e:	eb 2e                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019560:	80 f9 04             	cmp    cl,0x4
c0019563:	75 12                	jne    c0019577 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019565:	f6 c4 60             	test   ah,0x60
c0019568:	75 08                	jne    c0019572 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001956a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001956d:	8d 78 14             	lea    edi,[eax+0x14]
c0019570:	eb 1c                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019572:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019575:	eb 17                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019577:	80 f9 05             	cmp    cl,0x5
c001957a:	75 05                	jne    c0019581 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001957c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001957f:	eb 0d                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019581:	80 f9 06             	cmp    cl,0x6
c0019584:	75 05                	jne    c001958b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019586:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019589:	eb 03                	jmp    c001958e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001958b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001958e:	84 d2                	test   dl,dl
c0019590:	75 05                	jne    c0019597 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019592:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019595:	eb 3c                	jmp    c00195d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019597:	80 fa 01             	cmp    dl,0x1
c001959a:	75 05                	jne    c00195a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001959c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001959f:	eb 32                	jmp    c00195d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195a1:	80 fa 02             	cmp    dl,0x2
c00195a4:	75 05                	jne    c00195ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00195a6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195a9:	eb 28                	jmp    c00195d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195ab:	80 fa 03             	cmp    dl,0x3
c00195ae:	75 05                	jne    c00195b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00195b0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195b3:	eb 1e                	jmp    c00195d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195b5:	31 c0                	xor    eax,eax
c00195b7:	80 fa 04             	cmp    dl,0x4
c00195ba:	74 17                	je     c00195d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195bc:	80 fa 05             	cmp    dl,0x5
c00195bf:	75 05                	jne    c00195c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00195c1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195c4:	eb 0d                	jmp    c00195d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195c6:	80 fa 06             	cmp    dl,0x6
c00195c9:	75 05                	jne    c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00195cb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195ce:	eb 03                	jmp    c00195d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195d3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195d8:	0f 94 c2             	sete   dl
c00195db:	80 f9 05             	cmp    cl,0x5
c00195de:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00195e2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00195e7:	d3 e0                	shl    eax,cl
c00195e9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00195ed:	74 0a                	je     c00195f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00195ef:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00195f2:	b9 07 00 00 00       	mov    ecx,0x7
c00195f7:	eb 37                	jmp    c0019630 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195f9:	01 f8                	add    eax,edi
c00195fb:	b9 03 00 00 00       	mov    ecx,0x3
c0019600:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019605:	74 2b                	je     c0019632 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019607:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001960c:	75 0d                	jne    c001961b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001960e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019612:	01 c8                	add    eax,ecx
c0019614:	b9 04 00 00 00       	mov    ecx,0x4
c0019619:	eb 17                	jmp    c0019632 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001961b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001961e:	b9 07 00 00 00       	mov    ecx,0x7
c0019623:	eb 0d                	jmp    c0019632 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019625:	b9 02 00 00 00       	mov    ecx,0x2
c001962a:	b2 01                	mov    dl,0x1
c001962c:	31 c0                	xor    eax,eax
c001962e:	eb 02                	jmp    c0019632 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019630:	31 d2                	xor    edx,edx
c0019632:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019636:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019638:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001963c:	88 11                	mov    BYTE PTR [ecx],dl
c001963e:	5a                   	pop    edx
c001963f:	5b                   	pop    ebx
c0019640:	5e                   	pop    esi
c0019641:	5f                   	pop    edi
c0019642:	c3                   	ret    

c0019643 <Krnl::smpEntry()>:
c0019643:	eb fe                	jmp    c0019643 <Krnl::smpEntry()>

c0019645 <Krnl::startCPU(int)>:
c0019645:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001964a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019651:	0f 84 36 01 00 00    	je     c001978d <Krnl::startCPU(int)+0x148>
c0019657:	53                   	push   ebx
c0019658:	83 ec 10             	sub    esp,0x10
c001965b:	fa                   	cli    
c001965c:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c0019662:	6a 1b                	push   0x1b
c0019664:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c001966a:	e8 d1 54 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001966f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019674:	89 c3                	mov    ebx,eax
c0019676:	58                   	pop    eax
c0019677:	5a                   	pop    edx
c0019678:	53                   	push   ebx
c0019679:	68 1c b3 02 c0       	push   0xc002b31c
c001967e:	e8 41 8f ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0019683:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001968d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019691:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001969b:	c1 e0 18             	shl    eax,0x18
c001969e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00196ad:	09 c2                	or     edx,eax
c00196af:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00196b5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00196bb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00196c1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00196c7:	80 cd c5             	or     ch,0xc5
c00196ca:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00196d0:	f3 90                	pause  
c00196d2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00196d4:	0f ba e1 0c          	bt     ecx,0xc
c00196d8:	72 f6                	jb     c00196d0 <Krnl::startCPU(int)+0x8b>
c00196da:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00196e0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00196e6:	09 c1                	or     ecx,eax
c00196e8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00196ee:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00196f4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00196fa:	80 cd 85             	or     ch,0x85
c00196fd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019703:	f3 90                	pause  
c0019705:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019707:	0f ba e1 0c          	bt     ecx,0xc
c001970b:	72 f6                	jb     c0019703 <Krnl::startCPU(int)+0xbe>
c001970d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019717:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001971d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019723:	09 c1                	or     ecx,eax
c0019725:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001972b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019731:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019737:	81 c9 02 06 00 00    	or     ecx,0x602
c001973d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019743:	f3 90                	pause  
c0019745:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019747:	0f ba e1 0c          	bt     ecx,0xc
c001974b:	72 f6                	jb     c0019743 <Krnl::startCPU(int)+0xfe>
c001974d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019757:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001975d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019763:	09 c8                	or     eax,ecx
c0019765:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001976b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019771:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019776:	0d 02 06 00 00       	or     eax,0x602
c001977b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019781:	f3 90                	pause  
c0019783:	8b 02                	mov    eax,DWORD PTR [edx]
c0019785:	0f ba e0 0c          	bt     eax,0xc
c0019789:	72 f6                	jb     c0019781 <Krnl::startCPU(int)+0x13c>
c001978b:	eb fe                	jmp    c001978b <Krnl::startCPU(int)+0x146>
c001978d:	c3                   	ret    

c001978e <Krnl::startCPUs()>:
c001978e:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0019793:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019799:	88 c2                	mov    dl,al
c001979b:	83 e2 0a             	and    edx,0xa
c001979e:	80 fa 0a             	cmp    dl,0xa
c00197a1:	75 09                	jne    c00197ac <Krnl::startCPUs()+0x1e>
c00197a3:	a8 01                	test   al,0x1
c00197a5:	74 05                	je     c00197ac <Krnl::startCPUs()+0x1e>
c00197a7:	e9 ef 69 fe ff       	jmp    c000019b <prepareTramp>
c00197ac:	c3                   	ret    
c00197ad:	90                   	nop

c00197ae <EnvVarContainer::getEnv(char const*)>:
c00197ae:	57                   	push   edi
c00197af:	56                   	push   esi
c00197b0:	53                   	push   ebx
c00197b1:	31 db                	xor    ebx,ebx
c00197b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197b7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00197b9:	7e 2b                	jle    c00197e6 <EnvVarContainer::getEnv(char const*)+0x38>
c00197bb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00197c2:	50                   	push   eax
c00197c3:	50                   	push   eax
c00197c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00197c7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00197ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00197ce:	e8 c5 70 fe ff       	call   c0000898 <strcmp>
c00197d3:	83 c4 10             	add    esp,0x10
c00197d6:	85 c0                	test   eax,eax
c00197d8:	75 09                	jne    c00197e3 <EnvVarContainer::getEnv(char const*)+0x35>
c00197da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00197dd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00197e1:	eb 05                	jmp    c00197e8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00197e3:	43                   	inc    ebx
c00197e4:	eb d1                	jmp    c00197b7 <EnvVarContainer::getEnv(char const*)+0x9>
c00197e6:	31 c0                	xor    eax,eax
c00197e8:	5b                   	pop    ebx
c00197e9:	5e                   	pop    esi
c00197ea:	5f                   	pop    edi
c00197eb:	c3                   	ret    

c00197ec <EnvVarContainer::setEnv(char const*, char const*)>:
c00197ec:	55                   	push   ebp
c00197ed:	57                   	push   edi
c00197ee:	56                   	push   esi
c00197ef:	53                   	push   ebx
c00197f0:	83 ec 28             	sub    esp,0x28
c00197f3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00197f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00197fb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00197ff:	56                   	push   esi
c0019800:	e8 67 6f fe ff       	call   c000076c <strlen>
c0019805:	40                   	inc    eax
c0019806:	89 04 24             	mov    DWORD PTR [esp],eax
c0019809:	e8 8e 5d ff ff       	call   c000f59c <malloc>
c001980e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019811:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019815:	e8 52 6f fe ff       	call   c000076c <strlen>
c001981a:	40                   	inc    eax
c001981b:	89 04 24             	mov    DWORD PTR [esp],eax
c001981e:	e8 79 5d ff ff       	call   c000f59c <malloc>
c0019823:	89 34 24             	mov    DWORD PTR [esp],esi
c0019826:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001982a:	e8 3d 6f fe ff       	call   c000076c <strlen>
c001982f:	83 c4 0c             	add    esp,0xc
c0019832:	40                   	inc    eax
c0019833:	50                   	push   eax
c0019834:	6a 00                	push   0x0
c0019836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001983a:	e8 11 6f fe ff       	call   c0000750 <memset>
c001983f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019842:	e8 25 6f fe ff       	call   c000076c <strlen>
c0019847:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001984b:	8d 48 01             	lea    ecx,[eax+0x1]
c001984e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019850:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019853:	89 de                	mov    esi,ebx
c0019855:	e8 12 6f fe ff       	call   c000076c <strlen>
c001985a:	83 c4 0c             	add    esp,0xc
c001985d:	40                   	inc    eax
c001985e:	50                   	push   eax
c001985f:	6a 00                	push   0x0
c0019861:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019865:	e8 e6 6e fe ff       	call   c0000750 <memset>
c001986a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001986d:	e8 fa 6e fe ff       	call   c000076c <strlen>
c0019872:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019876:	8d 48 01             	lea    ecx,[eax+0x1]
c0019879:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001987b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001987e:	40                   	inc    eax
c001987f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019882:	c1 e0 03             	shl    eax,0x3
c0019885:	5a                   	pop    edx
c0019886:	59                   	pop    ecx
c0019887:	50                   	push   eax
c0019888:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001988b:	e8 f8 5c ff ff       	call   c000f588 <realloc>
c0019890:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019894:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019897:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001989a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001989e:	b9 08 00 00 00       	mov    ecx,0x8
c00198a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198a5:	83 c4 2c             	add    esp,0x2c
c00198a8:	5b                   	pop    ebx
c00198a9:	5e                   	pop    esi
c00198aa:	5f                   	pop    edi
c00198ab:	5d                   	pop    ebp
c00198ac:	c3                   	ret    
c00198ad:	90                   	nop

c00198ae <EnvVarContainer::deleteEnv(char const*)>:
c00198ae:	c3                   	ret    
c00198af:	90                   	nop

c00198b0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00198b0:	55                   	push   ebp
c00198b1:	57                   	push   edi
c00198b2:	56                   	push   esi
c00198b3:	53                   	push   ebx
c00198b4:	81 ec 38 01 00 00    	sub    esp,0x138
c00198ba:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00198c1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00198c8:	68 14 01 00 00       	push   0x114
c00198cd:	e8 ca 5c ff ff       	call   c000f59c <malloc>
c00198d2:	83 c4 0c             	add    esp,0xc
c00198d5:	89 c3                	mov    ebx,eax
c00198d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00198da:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00198e1:	50                   	push   eax
c00198e2:	e8 3b 92 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c00198e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198ea:	e8 05 95 ff ff       	call   c0012df4 <File::exists()>
c00198ef:	83 c4 10             	add    esp,0x10
c00198f2:	84 c0                	test   al,al
c00198f4:	75 31                	jne    c0019927 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00198f6:	50                   	push   eax
c00198f7:	50                   	push   eax
c00198f8:	6a 12                	push   0x12
c00198fa:	53                   	push   ebx
c00198fb:	e8 86 92 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c0019900:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019902:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019905:	89 34 24             	mov    DWORD PTR [esp],esi
c0019908:	e8 5f 6e fe ff       	call   c000076c <strlen>
c001990d:	5a                   	pop    edx
c001990e:	31 d2                	xor    edx,edx
c0019910:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019914:	51                   	push   ecx
c0019915:	56                   	push   esi
c0019916:	52                   	push   edx
c0019917:	50                   	push   eax
c0019918:	53                   	push   ebx
c0019919:	ff d7                	call   edi
c001991b:	83 c4 14             	add    esp,0x14
c001991e:	53                   	push   ebx
c001991f:	e8 c0 92 ff ff       	call   c0012be4 <File::close()>
c0019924:	83 c4 10             	add    esp,0x10
c0019927:	56                   	push   esi
c0019928:	31 f6                	xor    esi,esi
c001992a:	68 00 01 00 00       	push   0x100
c001992f:	6a 00                	push   0x0
c0019931:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019935:	50                   	push   eax
c0019936:	e8 15 6e fe ff       	call   c0000750 <memset>
c001993b:	5f                   	pop    edi
c001993c:	58                   	pop    eax
c001993d:	6a 01                	push   0x1
c001993f:	53                   	push   ebx
c0019940:	e8 41 92 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c0019945:	83 c4 10             	add    esp,0x10
c0019948:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019950:	83 ec 0c             	sub    esp,0xc
c0019953:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019955:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019959:	51                   	push   ecx
c001995a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001995e:	52                   	push   edx
c001995f:	6a 00                	push   0x0
c0019961:	6a 01                	push   0x1
c0019963:	53                   	push   ebx
c0019964:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019967:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001996b:	83 c4 20             	add    esp,0x20
c001996e:	3c 0d                	cmp    al,0xd
c0019970:	0f 84 09 01 00 00    	je     c0019a7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019976:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001997b:	0f 84 ef 00 00 00    	je     c0019a70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019981:	3c 0a                	cmp    al,0xa
c0019983:	74 13                	je     c0019998 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019985:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001998a:	74 0c                	je     c0019998 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001998c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019992:	0f 8e d8 00 00 00    	jle    c0019a70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019998:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001999c:	83 ec 0c             	sub    esp,0xc
c001999f:	8d 78 01             	lea    edi,[eax+0x1]
c00199a2:	57                   	push   edi
c00199a3:	e8 f4 5b ff ff       	call   c000f59c <malloc>
c00199a8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00199ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00199b0:	8d 56 04             	lea    edx,[esi+0x4]
c00199b3:	89 14 24             	mov    DWORD PTR [esp],edx
c00199b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00199ba:	e8 dd 5b ff ff       	call   c000f59c <malloc>
c00199bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00199c3:	83 c4 0c             	add    esp,0xc
c00199c6:	57                   	push   edi
c00199c7:	6a 00                	push   0x0
c00199c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00199cd:	e8 7e 6d fe ff       	call   c0000750 <memset>
c00199d2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00199d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00199da:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00199de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199e0:	83 c4 0c             	add    esp,0xc
c00199e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199e7:	52                   	push   edx
c00199e8:	6a 00                	push   0x0
c00199ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00199ee:	e8 5d 6d fe ff       	call   c0000750 <memset>
c00199f3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00199f7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00199fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00199fe:	e8 69 6d fe ff       	call   c000076c <strlen>
c0019a03:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019a07:	89 c1                	mov    ecx,eax
c0019a09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a0e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019a11:	40                   	inc    eax
c0019a12:	83 c4 10             	add    esp,0x10
c0019a15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019a18:	85 d2                	test   edx,edx
c0019a1a:	75 0c                	jne    c0019a28 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019a1c:	83 ec 0c             	sub    esp,0xc
c0019a1f:	6a 08                	push   0x8
c0019a21:	e8 76 5b ff ff       	call   c000f59c <malloc>
c0019a26:	eb 0c                	jmp    c0019a34 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019a28:	c1 e0 03             	shl    eax,0x3
c0019a2b:	51                   	push   ecx
c0019a2c:	51                   	push   ecx
c0019a2d:	50                   	push   eax
c0019a2e:	52                   	push   edx
c0019a2f:	e8 54 5b ff ff       	call   c000f588 <realloc>
c0019a34:	83 c4 10             	add    esp,0x10
c0019a37:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019a3a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a3d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019a40:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019a44:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019a48:	b9 08 00 00 00       	mov    ecx,0x8
c0019a4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a4f:	31 f6                	xor    esi,esi
c0019a51:	50                   	push   eax
c0019a52:	68 00 01 00 00       	push   0x100
c0019a57:	6a 00                	push   0x0
c0019a59:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a5d:	50                   	push   eax
c0019a5e:	e8 ed 6c fe ff       	call   c0000750 <memset>
c0019a63:	83 c4 10             	add    esp,0x10
c0019a66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a6e:	eb 0f                	jmp    c0019a7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a70:	3c 3d                	cmp    al,0x3d
c0019a72:	74 07                	je     c0019a7b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019a74:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019a78:	46                   	inc    esi
c0019a79:	eb 04                	jmp    c0019a7f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a7b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019a7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a84:	0f 85 c6 fe ff ff    	jne    c0019950 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019a8a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019a90:	5b                   	pop    ebx
c0019a91:	5e                   	pop    esi
c0019a92:	5f                   	pop    edi
c0019a93:	5d                   	pop    ebp
c0019a94:	c3                   	ret    
c0019a95:	90                   	nop

c0019a96 <EnvVarContainer::__loadSystem()>:
c0019a96:	83 ec 10             	sub    esp,0x10
c0019a99:	68 40 cc 02 c0       	push   0xc002cc40
c0019a9e:	68 2d b3 02 c0       	push   0xc002b32d
c0019aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019aa7:	e8 04 fe ff ff       	call   c00198b0 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019aac:	83 c4 1c             	add    esp,0x1c
c0019aaf:	c3                   	ret    

c0019ab0 <EnvVarContainer::__loadUser()>:
c0019ab0:	c3                   	ret    
c0019ab1:	90                   	nop

c0019ab2 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ab6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ac0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ac4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019acb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ad2:	90                   	nop
c0019ad3:	c3                   	ret    

c0019ad4 <EnvVarContainer::~EnvVarContainer()>:
c0019ad4:	83 ec 0c             	sub    esp,0xc
c0019ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019adb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019ade:	85 c0                	test   eax,eax
c0019ae0:	74 1d                	je     c0019aff <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ae8:	85 c0                	test   eax,eax
c0019aea:	74 13                	je     c0019aff <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019af3:	83 ec 0c             	sub    esp,0xc
c0019af6:	50                   	push   eax
c0019af7:	e8 b0 5a ff ff       	call   c000f5ac <free>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	90                   	nop
c0019b00:	83 c4 0c             	add    esp,0xc
c0019b03:	c3                   	ret    

c0019b04 <Krnl::getEnv(Process*, char const*)>:
c0019b04:	53                   	push   ebx
c0019b05:	83 ec 08             	sub    esp,0x8
c0019b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b10:	39 05 50 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c50,eax
c0019b16:	74 04                	je     c0019b1c <Krnl::getEnv(Process*, char const*)+0x18>
c0019b18:	85 c0                	test   eax,eax
c0019b1a:	75 0b                	jne    c0019b27 <Krnl::getEnv(Process*, char const*)+0x23>
c0019b1c:	a1 34 02 03 c0       	mov    eax,ds:0xc0030234
c0019b21:	85 c0                	test   eax,eax
c0019b23:	75 19                	jne    c0019b3e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019b25:	eb 27                	jmp    c0019b4e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019b27:	52                   	push   edx
c0019b28:	52                   	push   edx
c0019b29:	53                   	push   ebx
c0019b2a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019b30:	e8 79 fc ff ff       	call   c00197ae <EnvVarContainer::getEnv(char const*)>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	85 c0                	test   eax,eax
c0019b3a:	75 28                	jne    c0019b64 <Krnl::getEnv(Process*, char const*)+0x60>
c0019b3c:	eb de                	jmp    c0019b1c <Krnl::getEnv(Process*, char const*)+0x18>
c0019b3e:	52                   	push   edx
c0019b3f:	52                   	push   edx
c0019b40:	53                   	push   ebx
c0019b41:	50                   	push   eax
c0019b42:	e8 67 fc ff ff       	call   c00197ae <EnvVarContainer::getEnv(char const*)>
c0019b47:	83 c4 10             	add    esp,0x10
c0019b4a:	85 c0                	test   eax,eax
c0019b4c:	75 16                	jne    c0019b64 <Krnl::getEnv(Process*, char const*)+0x60>
c0019b4e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019b52:	a1 38 02 03 c0       	mov    eax,ds:0xc0030238
c0019b57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019b5b:	83 c4 08             	add    esp,0x8
c0019b5e:	5b                   	pop    ebx
c0019b5f:	e9 4a fc ff ff       	jmp    c00197ae <EnvVarContainer::getEnv(char const*)>
c0019b64:	83 c4 08             	add    esp,0x8
c0019b67:	5b                   	pop    ebx
c0019b68:	c3                   	ret    

c0019b69 <Krnl::setEnvSystem(char const*, char const*)>:
c0019b69:	83 ec 10             	sub    esp,0x10
c0019b6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b74:	ff 35 38 02 03 c0    	push   DWORD PTR ds:0xc0030238
c0019b7a:	e8 6d fc ff ff       	call   c00197ec <EnvVarContainer::setEnv(char const*, char const*)>
c0019b7f:	83 c4 1c             	add    esp,0x1c
c0019b82:	c3                   	ret    

c0019b83 <Krnl::setEnvUser(char const*, char const*)>:
c0019b83:	a1 34 02 03 c0       	mov    eax,ds:0xc0030234
c0019b88:	85 c0                	test   eax,eax
c0019b8a:	74 15                	je     c0019ba1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019b8c:	83 ec 10             	sub    esp,0x10
c0019b8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b97:	50                   	push   eax
c0019b98:	e8 4f fc ff ff       	call   c00197ec <EnvVarContainer::setEnv(char const*, char const*)>
c0019b9d:	83 c4 1c             	add    esp,0x1c
c0019ba0:	c3                   	ret    
c0019ba1:	c3                   	ret    

c0019ba2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019bac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bb0:	e9 37 fc ff ff       	jmp    c00197ec <EnvVarContainer::setEnv(char const*, char const*)>

c0019bb5 <Krnl::deleteEnvSystem(char const*)>:
c0019bb5:	c3                   	ret    

c0019bb6 <Krnl::deleteEnvUser(char const*)>:
c0019bb6:	c3                   	ret    

c0019bb7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019bb7:	c3                   	ret    

c0019bb8 <Krnl::newProcessEnv(Process*)>:
c0019bb8:	83 ec 28             	sub    esp,0x28
c0019bbb:	6a 0c                	push   0xc
c0019bbd:	e8 da 59 ff ff       	call   c000f59c <malloc>
c0019bc2:	5a                   	pop    edx
c0019bc3:	59                   	pop    ecx
c0019bc4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bc8:	50                   	push   eax
c0019bc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bcd:	e8 e0 fe ff ff       	call   c0019ab2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bd6:	83 c4 2c             	add    esp,0x2c
c0019bd9:	c3                   	ret    

c0019bda <Krnl::copyProcessEnv(Process*, Process*)>:
c0019bda:	57                   	push   edi
c0019bdb:	56                   	push   esi
c0019bdc:	53                   	push   ebx
c0019bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be1:	83 ec 0c             	sub    esp,0xc
c0019be4:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019bea:	6a 0c                	push   0xc
c0019bec:	e8 ab 59 ff ff       	call   c000f59c <malloc>
c0019bf1:	89 c3                	mov    ebx,eax
c0019bf3:	58                   	pop    eax
c0019bf4:	5a                   	pop    edx
c0019bf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bf9:	53                   	push   ebx
c0019bfa:	e8 b3 fe ff ff       	call   c0019ab2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019bff:	8b 07                	mov    eax,DWORD PTR [edi]
c0019c01:	89 03                	mov    DWORD PTR [ebx],eax
c0019c03:	c1 e0 03             	shl    eax,0x3
c0019c06:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c09:	e8 8e 59 ff ff       	call   c000f59c <malloc>
c0019c0e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019c11:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019c13:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019c16:	c1 e1 03             	shl    ecx,0x3
c0019c19:	89 c7                	mov    edi,eax
c0019c1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c1d:	83 c4 10             	add    esp,0x10
c0019c20:	89 d8                	mov    eax,ebx
c0019c22:	5b                   	pop    ebx
c0019c23:	5e                   	pop    esi
c0019c24:	5f                   	pop    edi
c0019c25:	c3                   	ret    

c0019c26 <Krnl::loadSystemEnv()>:
c0019c26:	53                   	push   ebx
c0019c27:	83 ec 14             	sub    esp,0x14
c0019c2a:	6a 0c                	push   0xc
c0019c2c:	e8 6b 59 ff ff       	call   c000f59c <malloc>
c0019c31:	89 c3                	mov    ebx,eax
c0019c33:	58                   	pop    eax
c0019c34:	5a                   	pop    edx
c0019c35:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c0019c3b:	53                   	push   ebx
c0019c3c:	e8 71 fe ff ff       	call   c0019ab2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c44:	89 1d 38 02 03 c0    	mov    DWORD PTR ds:0xc0030238,ebx
c0019c4a:	e8 47 fe ff ff       	call   c0019a96 <EnvVarContainer::__loadSystem()>
c0019c4f:	83 c4 18             	add    esp,0x18
c0019c52:	5b                   	pop    ebx
c0019c53:	c3                   	ret    

c0019c54 <Krnl::loadUserEnv()>:
c0019c54:	53                   	push   ebx
c0019c55:	83 ec 14             	sub    esp,0x14
c0019c58:	6a 0c                	push   0xc
c0019c5a:	e8 3d 59 ff ff       	call   c000f59c <malloc>
c0019c5f:	89 c3                	mov    ebx,eax
c0019c61:	58                   	pop    eax
c0019c62:	5a                   	pop    edx
c0019c63:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c0019c69:	53                   	push   ebx
c0019c6a:	e8 43 fe ff ff       	call   c0019ab2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c6f:	89 1d 34 02 03 c0    	mov    DWORD PTR ds:0xc0030234,ebx
c0019c75:	83 c4 18             	add    esp,0x18
c0019c78:	5b                   	pop    ebx
c0019c79:	c3                   	ret    

c0019c7a <Krnl::flushEnv()>:
c0019c7a:	c3                   	ret    

c0019c7b <Krnl::getProcessTotalEnvCount(Process*)>:
c0019c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c7f:	8b 15 34 02 03 c0    	mov    edx,DWORD PTR ds:0xc0030234
c0019c85:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019c8b:	a1 38 02 03 c0       	mov    eax,ds:0xc0030238
c0019c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c92:	03 01                	add    eax,DWORD PTR [ecx]
c0019c94:	85 d2                	test   edx,edx
c0019c96:	74 02                	je     c0019c9a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019c98:	03 02                	add    eax,DWORD PTR [edx]
c0019c9a:	c3                   	ret    

c0019c9b <Krnl::getProcessEnvPair(Process*, int)>:
c0019c9b:	57                   	push   edi
c0019c9c:	56                   	push   esi
c0019c9d:	8b 35 34 02 03 c0    	mov    esi,DWORD PTR ds:0xc0030234
c0019ca3:	53                   	push   ebx
c0019ca4:	85 f6                	test   esi,esi
c0019ca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019caa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cae:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019cb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cb8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019cba:	75 16                	jne    c0019cd2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019cbc:	39 c2                	cmp    edx,eax
c0019cbe:	7c 16                	jl     c0019cd6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019cc0:	8b 0d 38 02 03 c0    	mov    ecx,DWORD PTR ds:0xc0030238
c0019cc6:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019cc8:	01 c6                	add    esi,eax
c0019cca:	39 d6                	cmp    esi,edx
c0019ccc:	7e 3c                	jle    c0019d0a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019cce:	29 c2                	sub    edx,eax
c0019cd0:	eb 04                	jmp    c0019cd6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019cd2:	39 c2                	cmp    edx,eax
c0019cd4:	7d 05                	jge    c0019cdb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019cd6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019cd9:	eb 20                	jmp    c0019cfb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019cdb:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019cdd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019ce0:	39 d1                	cmp    ecx,edx
c0019ce2:	7e 04                	jle    c0019ce8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019ce4:	29 c2                	sub    edx,eax
c0019ce6:	eb 10                	jmp    c0019cf8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019ce8:	8b 35 38 02 03 c0    	mov    esi,DWORD PTR ds:0xc0030238
c0019cee:	03 0e                	add    ecx,DWORD PTR [esi]
c0019cf0:	39 d1                	cmp    ecx,edx
c0019cf2:	7e 16                	jle    c0019d0a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019cf4:	29 c2                	sub    edx,eax
c0019cf6:	29 fa                	sub    edx,edi
c0019cf8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019cfb:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019cfe:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d00:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019d03:	89 03                	mov    DWORD PTR [ebx],eax
c0019d05:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019d08:	eb 1d                	jmp    c0019d27 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019d0a:	83 ec 0c             	sub    esp,0xc
c0019d0d:	68 4f b3 02 c0       	push   0xc002b34f
c0019d12:	e8 18 00 00 00       	call   c0019d2f <Krnl::panic(char const*)>
c0019d17:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019d1d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d24:	83 c4 10             	add    esp,0x10
c0019d27:	89 d8                	mov    eax,ebx
c0019d29:	5b                   	pop    ebx
c0019d2a:	5e                   	pop    esi
c0019d2b:	5f                   	pop    edi
c0019d2c:	c2 04 00             	ret    0x4

c0019d2f <Krnl::panic(char const*)>:
c0019d2f:	55                   	push   ebp
c0019d30:	89 e5                	mov    ebp,esp
c0019d32:	53                   	push   ebx
c0019d33:	83 ec 10             	sub    esp,0x10
c0019d36:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019d39:	fa                   	cli    
c0019d3a:	c6 05 44 02 03 c0 01 	mov    BYTE PTR ds:0xc0030244,0x1
c0019d41:	53                   	push   ebx
c0019d42:	e8 af 58 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0019d47:	58                   	pop    eax
c0019d48:	c6 05 40 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c640,0x0
c0019d4f:	5a                   	pop    edx
c0019d50:	53                   	push   ebx
c0019d51:	68 69 b3 02 c0       	push   0xc002b369
c0019d56:	e8 69 88 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0019d5b:	59                   	pop    ecx
c0019d5c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019d61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d67:	e8 8f 65 ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c0019d6c:	83 c4 0c             	add    esp,0xc
c0019d6f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019d74:	6a 01                	push   0x1
c0019d76:	6a 0f                	push   0xf
c0019d78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d7e:	e8 d7 63 ff ff       	call   c001015a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019d83:	58                   	pop    eax
c0019d84:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019d89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d8f:	e8 e8 68 ff ff       	call   c001067c <VgaText::clearScreen()>
c0019d94:	58                   	pop    eax
c0019d95:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019d9a:	5a                   	pop    edx
c0019d9b:	68 82 b3 02 c0       	push   0xc002b382
c0019da0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019da6:	e8 5d 6a ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019dab:	59                   	pop    ecx
c0019dac:	58                   	pop    eax
c0019dad:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019db2:	68 28 b4 02 c0       	push   0xc002b428
c0019db7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dbd:	e8 46 6a ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019dc2:	58                   	pop    eax
c0019dc3:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019dc8:	5a                   	pop    edx
c0019dc9:	68 9e b3 02 c0       	push   0xc002b39e
c0019dce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dd4:	e8 2f 6a ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019dd9:	59                   	pop    ecx
c0019dda:	58                   	pop    eax
c0019ddb:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019de0:	53                   	push   ebx
c0019de1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de7:	e8 1c 6a ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019dec:	58                   	pop    eax
c0019ded:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019df2:	5a                   	pop    edx
c0019df3:	68 be b3 02 c0       	push   0xc002b3be
c0019df8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dfe:	e8 05 6a ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e03:	a1 40 02 03 c0       	mov    eax,ds:0xc0030240
c0019e08:	83 c4 10             	add    esp,0x10
c0019e0b:	85 c0                	test   eax,eax
c0019e0d:	74 02                	je     c0019e11 <Krnl::panic(char const*)+0xe2>
c0019e0f:	ff d0                	call   eax
c0019e11:	83 ec 0c             	sub    esp,0xc
c0019e14:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e17:	e8 8c 30 00 00       	call   c001cea8 <Thr::getDriverNameFromAddress(unsigned long)>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	89 c3                	mov    ebx,eax
c0019e21:	85 c0                	test   eax,eax
c0019e23:	0f 84 4e 02 00 00    	je     c001a077 <Krnl::panic(char const*)+0x348>
c0019e29:	83 ec 08             	sub    esp,0x8
c0019e2c:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e31:	68 64 b4 02 c0       	push   0xc002b464
c0019e36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e3c:	e8 c7 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e41:	58                   	pop    eax
c0019e42:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e47:	5a                   	pop    edx
c0019e48:	68 9e b3 02 c0       	push   0xc002b39e
c0019e4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e53:	e8 b0 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e58:	59                   	pop    ecx
c0019e59:	58                   	pop    eax
c0019e5a:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e5f:	53                   	push   ebx
c0019e60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e66:	e8 9d 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e6b:	83 c4 10             	add    esp,0x10
c0019e6e:	83 ec 08             	sub    esp,0x8
c0019e71:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e76:	68 bd b3 02 c0       	push   0xc002b3bd
c0019e7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e81:	e8 82 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e86:	58                   	pop    eax
c0019e87:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019e8c:	5a                   	pop    edx
c0019e8d:	68 bc b4 02 c0       	push   0xc002b4bc
c0019e92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e98:	e8 6b 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e9d:	59                   	pop    ecx
c0019e9e:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019ea3:	5b                   	pop    ebx
c0019ea4:	68 fc b4 02 c0       	push   0xc002b4fc
c0019ea9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eaf:	e8 54 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019eb4:	58                   	pop    eax
c0019eb5:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019eba:	5a                   	pop    edx
c0019ebb:	68 a9 b3 02 c0       	push   0xc002b3a9
c0019ec0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec6:	e8 3d 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019ecb:	59                   	pop    ecx
c0019ecc:	5b                   	pop    ebx
c0019ecd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ed0:	68 c1 b3 02 c0       	push   0xc002b3c1
c0019ed5:	e8 ea 86 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0019eda:	58                   	pop    eax
c0019edb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ede:	5a                   	pop    edx
c0019edf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019ee2:	68 ca b3 02 c0       	push   0xc002b3ca
c0019ee7:	e8 d8 86 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0019eec:	59                   	pop    ecx
c0019eed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ef0:	5b                   	pop    ebx
c0019ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ef3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019ef6:	68 d3 b3 02 c0       	push   0xc002b3d3
c0019efb:	e8 c4 86 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0019f00:	58                   	pop    eax
c0019f01:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f06:	5a                   	pop    edx
c0019f07:	68 40 b5 02 c0       	push   0xc002b540
c0019f0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f12:	e8 f1 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f17:	59                   	pop    ecx
c0019f18:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f1d:	5b                   	pop    ebx
c0019f1e:	68 dc b3 02 c0       	push   0xc002b3dc
c0019f23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f29:	e8 da 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f2e:	0f 20 c0             	mov    eax,cr0
c0019f31:	5a                   	pop    edx
c0019f32:	59                   	pop    ecx
c0019f33:	50                   	push   eax
c0019f34:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3f:	e8 7e 68 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019f44:	5b                   	pop    ebx
c0019f45:	58                   	pop    eax
c0019f46:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f4b:	68 e6 b3 02 c0       	push   0xc002b3e6
c0019f50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f56:	e8 ad 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f5b:	0f 20 d0             	mov    eax,cr2
c0019f5e:	5a                   	pop    edx
c0019f5f:	59                   	pop    ecx
c0019f60:	50                   	push   eax
c0019f61:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6c:	e8 51 68 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019f71:	5b                   	pop    ebx
c0019f72:	58                   	pop    eax
c0019f73:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f78:	68 f0 b3 02 c0       	push   0xc002b3f0
c0019f7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f83:	e8 80 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f88:	0f 20 d8             	mov    eax,cr3
c0019f8b:	5a                   	pop    edx
c0019f8c:	59                   	pop    ecx
c0019f8d:	50                   	push   eax
c0019f8e:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019f93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f99:	e8 24 68 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019f9e:	5b                   	pop    ebx
c0019f9f:	58                   	pop    eax
c0019fa0:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fa5:	68 03 b4 02 c0       	push   0xc002b403
c0019faa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb0:	e8 53 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019fb5:	0f 20 e0             	mov    eax,cr4
c0019fb8:	5a                   	pop    edx
c0019fb9:	59                   	pop    ecx
c0019fba:	50                   	push   eax
c0019fbb:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc6:	e8 f7 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019fcb:	5b                   	pop    ebx
c0019fcc:	58                   	pop    eax
c0019fcd:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fd2:	68 0d b4 02 c0       	push   0xc002b40d
c0019fd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fdd:	e8 26 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019fe2:	5a                   	pop    edx
c0019fe3:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fe8:	59                   	pop    ecx
c0019fe9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019fef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ff2:	50                   	push   eax
c0019ff3:	e8 ca 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019ff8:	5b                   	pop    ebx
c0019ff9:	58                   	pop    eax
c0019ffa:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0019fff:	68 24 b4 02 c0       	push   0xc002b424
c001a004:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a00a:	e8 f9 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a00f:	5a                   	pop    edx
c001a010:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a015:	59                   	pop    ecx
c001a016:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a01c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a01f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a022:	50                   	push   eax
c001a023:	e8 9a 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001a028:	5b                   	pop    ebx
c001a029:	58                   	pop    eax
c001a02a:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a02f:	68 24 b4 02 c0       	push   0xc002b424
c001a034:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a03a:	e8 c9 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a03f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a044:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a047:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a04d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a04f:	59                   	pop    ecx
c001a050:	5b                   	pop    ebx
c001a051:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a054:	50                   	push   eax
c001a055:	e8 68 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	b2 fe                	mov    dl,0xfe
c001a05f:	e4 60                	in     al,0x60
c001a061:	3c 1c                	cmp    al,0x1c
c001a063:	74 04                	je     c001a069 <Krnl::panic(char const*)+0x33a>
c001a065:	3c 5a                	cmp    al,0x5a
c001a067:	75 f6                	jne    c001a05f <Krnl::panic(char const*)+0x330>
c001a069:	e4 64                	in     al,0x64
c001a06b:	a8 02                	test   al,0x2
c001a06d:	75 fa                	jne    c001a069 <Krnl::panic(char const*)+0x33a>
c001a06f:	88 d0                	mov    al,dl
c001a071:	e6 64                	out    0x64,al
c001a073:	fa                   	cli    
c001a074:	f4                   	hlt    
c001a075:	eb e8                	jmp    c001a05f <Krnl::panic(char const*)+0x330>
c001a077:	50                   	push   eax
c001a078:	50                   	push   eax
c001a079:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a07e:	68 90 b4 02 c0       	push   0xc002b490
c001a083:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a089:	e8 7a 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a08e:	58                   	pop    eax
c001a08f:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a094:	5a                   	pop    edx
c001a095:	68 9e b3 02 c0       	push   0xc002b39e
c001a09a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a0:	e8 63 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a0a5:	59                   	pop    ecx
c001a0a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0ab:	5b                   	pop    ebx
c001a0ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a0af:	83 c0 0c             	add    eax,0xc
c001a0b2:	50                   	push   eax
c001a0b3:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001a0b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0be:	e8 45 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	e9 a3 fd ff ff       	jmp    c0019e6e <Krnl::panic(char const*)+0x13f>

c001a0cb <Net::switchEndian16(unsigned short)>:
c001a0cb:	83 ec 04             	sub    esp,0x4
c001a0ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0d2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a0d6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a0da:	c1 f8 08             	sar    eax,0x8
c001a0dd:	89 c2                	mov    edx,eax
c001a0df:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a0e3:	c1 e0 08             	shl    eax,0x8
c001a0e6:	09 d0                	or     eax,edx
c001a0e8:	83 c4 04             	add    esp,0x4
c001a0eb:	c3                   	ret    

c001a0ec <Net::switchEndian32(unsigned int)>:
c001a0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f0:	c1 e8 18             	shr    eax,0x18
c001a0f3:	89 c2                	mov    edx,eax
c001a0f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f9:	c1 e0 08             	shl    eax,0x8
c001a0fc:	25 00 00 ff 00       	and    eax,0xff0000
c001a101:	09 c2                	or     edx,eax
c001a103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a107:	c1 e8 08             	shr    eax,0x8
c001a10a:	25 00 ff 00 00       	and    eax,0xff00
c001a10f:	09 c2                	or     edx,eax
c001a111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a115:	c1 e0 18             	shl    eax,0x18
c001a118:	09 d0                	or     eax,edx
c001a11a:	c3                   	ret    

c001a11b <Net::crc32Calc(unsigned char*, int)>:
c001a11b:	83 ec 10             	sub    esp,0x10
c001a11e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a123:	75 07                	jne    c001a12c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a125:	b8 00 00 00 00       	mov    eax,0x0
c001a12a:	eb 7c                	jmp    c001a1a8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a12c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a131:	7f 07                	jg     c001a13a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a133:	b8 00 00 00 00       	mov    eax,0x0
c001a138:	eb 6e                	jmp    c001a1a8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a13a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a142:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a14a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a14e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a152:	7d 4e                	jge    c001a1a2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a154:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a158:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a15c:	01 d0                	add    eax,edx
c001a15e:	8a 00                	mov    al,BYTE PTR [eax]
c001a160:	0f b6 c0             	movzx  eax,al
c001a163:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a167:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a16f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a174:	7f 26                	jg     c001a19c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a17a:	83 e0 01             	and    eax,0x1
c001a17d:	74 0d                	je     c001a18c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a17f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a183:	d1 e8                	shr    eax,1
c001a185:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a18a:	eb 06                	jmp    c001a192 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a190:	d1 e8                	shr    eax,1
c001a192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a196:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a19a:	eb d3                	jmp    c001a16f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a19c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a1a0:	eb a8                	jmp    c001a14a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a1a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1a6:	f7 d0                	not    eax
c001a1a8:	83 c4 10             	add    esp,0x10
c001a1ab:	c3                   	ret    

c001a1ac <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a1ac:	57                   	push   edi
c001a1ad:	56                   	push   esi
c001a1ae:	53                   	push   ebx
c001a1af:	83 ec 60             	sub    esp,0x60
c001a1b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1b9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a1bd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a1c5:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a1ca:	7f 1a                	jg     c001a1e6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a1cc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1d3:	8d 50 01             	lea    edx,[eax+0x1]
c001a1d6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1dd:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a1e0:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a1e4:	eb df                	jmp    c001a1c5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a1e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1ed:	8d 50 01             	lea    edx,[eax+0x1]
c001a1f0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1f7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a1fa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a201:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a205:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a209:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a20d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a215:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a219:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a21d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a221:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a225:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a229:	89 c6                	mov    esi,eax
c001a22b:	89 d7                	mov    edi,edx
c001a22d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a22f:	89 c8                	mov    eax,ecx
c001a231:	89 fa                	mov    edx,edi
c001a233:	89 f3                	mov    ebx,esi
c001a235:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a239:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a23d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a240:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a248:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a24f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a253:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a257:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a25b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a263:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a267:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a26b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a26f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a273:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a277:	89 c6                	mov    esi,eax
c001a279:	89 d7                	mov    edi,edx
c001a27b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a27d:	89 c8                	mov    eax,ecx
c001a27f:	89 fa                	mov    edx,edi
c001a281:	89 f3                	mov    ebx,esi
c001a283:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a287:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a28b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a28f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a297:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a29e:	0f b7 c0             	movzx  eax,ax
c001a2a1:	c1 f8 08             	sar    eax,0x8
c001a2a4:	89 c1                	mov    ecx,eax
c001a2a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2ad:	8d 50 01             	lea    edx,[eax+0x1]
c001a2b0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2b7:	88 ca                	mov    dl,cl
c001a2b9:	88 10                	mov    BYTE PTR [eax],dl
c001a2bb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a2c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2c9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a2cc:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a2d3:	88 10                	mov    BYTE PTR [eax],dl
c001a2d5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a2d9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a2dd:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a2e4:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a2e8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a2ec:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a2f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a2f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a2fc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a300:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a304:	89 c6                	mov    esi,eax
c001a306:	89 d7                	mov    edi,edx
c001a308:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a30a:	89 c8                	mov    eax,ecx
c001a30c:	89 fa                	mov    edx,edi
c001a30e:	89 f3                	mov    ebx,esi
c001a310:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a314:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a318:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a31c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a320:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a327:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a32e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a332:	50                   	push   eax
c001a333:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a337:	e8 df fd ff ff       	call   c001a11b <Net::crc32Calc(unsigned char*, int)>
c001a33c:	83 c4 08             	add    esp,0x8
c001a33f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a343:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a347:	c1 e8 18             	shr    eax,0x18
c001a34a:	89 c1                	mov    ecx,eax
c001a34c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a353:	8d 50 01             	lea    edx,[eax+0x1]
c001a356:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a35d:	88 ca                	mov    dl,cl
c001a35f:	88 10                	mov    BYTE PTR [eax],dl
c001a361:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a365:	c1 e8 10             	shr    eax,0x10
c001a368:	89 c1                	mov    ecx,eax
c001a36a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a371:	8d 50 01             	lea    edx,[eax+0x1]
c001a374:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a37b:	88 ca                	mov    dl,cl
c001a37d:	88 10                	mov    BYTE PTR [eax],dl
c001a37f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a383:	c1 e8 08             	shr    eax,0x8
c001a386:	89 c1                	mov    ecx,eax
c001a388:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a38f:	8d 50 01             	lea    edx,[eax+0x1]
c001a392:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a399:	88 ca                	mov    dl,cl
c001a39b:	88 10                	mov    BYTE PTR [eax],dl
c001a39d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3a4:	8d 50 01             	lea    edx,[eax+0x1]
c001a3a7:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3ae:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a3b2:	88 10                	mov    BYTE PTR [eax],dl
c001a3b4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3b8:	83 c4 60             	add    esp,0x60
c001a3bb:	5b                   	pop    ebx
c001a3bc:	5e                   	pop    esi
c001a3bd:	5f                   	pop    edi
c001a3be:	c3                   	ret    

c001a3bf <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a3bf:	57                   	push   edi
c001a3c0:	56                   	push   esi
c001a3c1:	53                   	push   ebx
c001a3c2:	83 ec 70             	sub    esp,0x70
c001a3c5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a3d0:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a3d8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a3df:	83 c0 0e             	add    eax,0xe
c001a3e2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a3e6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a3f1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a3f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a405:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a409:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a40d:	89 c6                	mov    esi,eax
c001a40f:	89 d7                	mov    edi,edx
c001a411:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a413:	89 c8                	mov    eax,ecx
c001a415:	89 fa                	mov    edx,edi
c001a417:	89 f3                	mov    ebx,esi
c001a419:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a41d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a421:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a425:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a42d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a434:	83 c0 08             	add    eax,0x8
c001a437:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a43b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a442:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a446:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a44e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a452:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a456:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a45a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a45e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a462:	89 c6                	mov    esi,eax
c001a464:	89 d7                	mov    edi,edx
c001a466:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a468:	89 c8                	mov    eax,ecx
c001a46a:	89 fa                	mov    edx,edi
c001a46c:	89 f3                	mov    ebx,esi
c001a46e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a472:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a476:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a47a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a482:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a489:	8d 50 01             	lea    edx,[eax+0x1]
c001a48c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a493:	8a 00                	mov    al,BYTE PTR [eax]
c001a495:	0f b6 c0             	movzx  eax,al
c001a498:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a49d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4a4:	8d 50 01             	lea    edx,[eax+0x1]
c001a4a7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4ae:	8a 00                	mov    al,BYTE PTR [eax]
c001a4b0:	0f b6 c0             	movzx  eax,al
c001a4b3:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a4b8:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a4bd:	c1 e0 08             	shl    eax,0x8
c001a4c0:	89 c2                	mov    edx,eax
c001a4c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4c6:	09 d0                	or     eax,edx
c001a4c8:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a4cf:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a4d3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a4db:	75 46                	jne    c001a523 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a4dd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4e7:	66 3d dc 05          	cmp    ax,0x5dc
c001a4eb:	77 16                	ja     c001a503 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a4ed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4f7:	0f b7 c0             	movzx  eax,ax
c001a4fa:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a501:	eb 20                	jmp    c001a523 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a503:	83 ec 0c             	sub    esp,0xc
c001a506:	68 68 b5 02 c0       	push   0xc002b568
c001a50b:	e8 b4 80 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001a510:	83 c4 10             	add    esp,0x10
c001a513:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a51a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a51e:	e9 17 01 00 00       	jmp    c001a63a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a523:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a52a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a531:	8b 12                	mov    edx,DWORD PTR [edx]
c001a533:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a537:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a53e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a542:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a546:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a54a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a54e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a556:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a55a:	89 c6                	mov    esi,eax
c001a55c:	89 d7                	mov    edi,edx
c001a55e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a560:	89 c8                	mov    eax,ecx
c001a562:	89 fa                	mov    edx,edi
c001a564:	89 f3                	mov    ebx,esi
c001a566:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a56a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a56e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a578:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a57f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a586:	8d 50 01             	lea    edx,[eax+0x1]
c001a589:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a590:	8a 00                	mov    al,BYTE PTR [eax]
c001a592:	0f b6 c0             	movzx  eax,al
c001a595:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a599:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5a0:	8d 50 01             	lea    edx,[eax+0x1]
c001a5a3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a5ac:	0f b6 c0             	movzx  eax,al
c001a5af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a5b3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a5bd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a5c6:	0f b6 c0             	movzx  eax,al
c001a5c9:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a5cd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5d4:	8d 50 01             	lea    edx,[eax+0x1]
c001a5d7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5de:	8a 00                	mov    al,BYTE PTR [eax]
c001a5e0:	0f b6 c0             	movzx  eax,al
c001a5e3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a5e7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a5eb:	c1 e0 18             	shl    eax,0x18
c001a5ee:	89 c2                	mov    edx,eax
c001a5f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a5f4:	c1 e0 10             	shl    eax,0x10
c001a5f7:	09 c2                	or     edx,eax
c001a5f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a5fd:	c1 e0 08             	shl    eax,0x8
c001a600:	09 d0                	or     eax,edx
c001a602:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a606:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a60a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a611:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a615:	83 e8 04             	sub    eax,0x4
c001a618:	83 ec 08             	sub    esp,0x8
c001a61b:	50                   	push   eax
c001a61c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a620:	e8 f6 fa ff ff       	call   c001a11b <Net::crc32Calc(unsigned char*, int)>
c001a625:	83 c4 10             	add    esp,0x10
c001a628:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a62c:	0f 94 c2             	sete   dl
c001a62f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a636:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a639:	90                   	nop
c001a63a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a641:	83 c4 70             	add    esp,0x70
c001a644:	5b                   	pop    ebx
c001a645:	5e                   	pop    esi
c001a646:	5f                   	pop    edi
c001a647:	c2 04 00             	ret    0x4

c001a64a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a64a:	55                   	push   ebp
c001a64b:	57                   	push   edi
c001a64c:	56                   	push   esi
c001a64d:	53                   	push   ebx
c001a64e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a654:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a65b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a65d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a660:	80 fb 40             	cmp    bl,0x40
c001a663:	75 1b                	jne    c001a680 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a665:	8a 16                	mov    dl,BYTE PTR [esi]
c001a667:	84 d2                	test   dl,dl
c001a669:	0f 84 f1 00 00 00    	je     c001a760 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a66f:	8d 46 01             	lea    eax,[esi+0x1]
c001a672:	80 fa 3a             	cmp    dl,0x3a
c001a675:	74 04                	je     c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a677:	89 c6                	mov    esi,eax
c001a679:	eb ea                	jmp    c001a665 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a67b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a67e:	89 c6                	mov    esi,eax
c001a680:	50                   	push   eax
c001a681:	6a 40                	push   0x40
c001a683:	6a 00                	push   0x0
c001a685:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a689:	50                   	push   eax
c001a68a:	e8 c1 60 fe ff       	call   c0000750 <memset>
c001a68f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a696:	31 c0                	xor    eax,eax
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a69d:	84 c9                	test   cl,cl
c001a69f:	0f 84 bb 00 00 00    	je     c001a760 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6a5:	3d c7 00 00 00       	cmp    eax,0xc7
c001a6aa:	0f 8f b0 00 00 00    	jg     c001a760 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6b0:	80 f9 0a             	cmp    cl,0xa
c001a6b3:	0f 85 98 00 00 00    	jne    c001a751 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a6b9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a6be:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a6c2:	a8 df                	test   al,0xdf
c001a6c4:	0f 94 c1             	sete   cl
c001a6c7:	3c 23                	cmp    al,0x23
c001a6c9:	0f 94 c2             	sete   dl
c001a6cc:	08 d1                	or     cl,dl
c001a6ce:	75 4a                	jne    c001a71a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6d0:	8d 50 f7             	lea    edx,[eax-0x9]
c001a6d3:	80 fa 01             	cmp    dl,0x1
c001a6d6:	76 42                	jbe    c001a71a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6d8:	3c 5b                	cmp    al,0x5b
c001a6da:	75 42                	jne    c001a71e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a6dc:	80 fb 40             	cmp    bl,0x40
c001a6df:	75 39                	jne    c001a71a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6e1:	83 ec 0c             	sub    esp,0xc
c001a6e4:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a6e8:	52                   	push   edx
c001a6e9:	e8 7e 60 fe ff       	call   c000076c <strlen>
c001a6ee:	83 c4 10             	add    esp,0x10
c001a6f1:	83 f8 3f             	cmp    eax,0x3f
c001a6f4:	77 6a                	ja     c001a760 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6f6:	50                   	push   eax
c001a6f7:	50                   	push   eax
c001a6f8:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a6fc:	52                   	push   edx
c001a6fd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a701:	52                   	push   edx
c001a702:	e8 05 61 fe ff       	call   c000080c <strcpy>
c001a707:	58                   	pop    eax
c001a708:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a70c:	52                   	push   edx
c001a70d:	e8 5a 60 fe ff       	call   c000076c <strlen>
c001a712:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a717:	83 c4 10             	add    esp,0x10
c001a71a:	31 d2                	xor    edx,edx
c001a71c:	eb 3a                	jmp    c001a758 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a71e:	80 fb 40             	cmp    bl,0x40
c001a721:	74 06                	je     c001a729 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a723:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a727:	eb 20                	jmp    c001a749 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a729:	50                   	push   eax
c001a72a:	50                   	push   eax
c001a72b:	55                   	push   ebp
c001a72c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a730:	50                   	push   eax
c001a731:	e8 62 61 fe ff       	call   c0000898 <strcmp>
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	85 c0                	test   eax,eax
c001a73b:	75 dd                	jne    c001a71a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a73d:	eb e4                	jmp    c001a723 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a73f:	8d 50 01             	lea    edx,[eax+0x1]
c001a742:	80 f9 3d             	cmp    cl,0x3d
c001a745:	74 1d                	je     c001a764 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a747:	89 d0                	mov    eax,edx
c001a749:	8a 08                	mov    cl,BYTE PTR [eax]
c001a74b:	84 c9                	test   cl,cl
c001a74d:	75 f0                	jne    c001a73f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a74f:	eb 0f                	jmp    c001a760 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a751:	8d 50 01             	lea    edx,[eax+0x1]
c001a754:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a758:	47                   	inc    edi
c001a759:	89 d0                	mov    eax,edx
c001a75b:	e9 3b ff ff ff       	jmp    c001a69b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a760:	31 c0                	xor    eax,eax
c001a762:	eb 33                	jmp    c001a797 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a764:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a768:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a76b:	50                   	push   eax
c001a76c:	50                   	push   eax
c001a76d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a771:	50                   	push   eax
c001a772:	56                   	push   esi
c001a773:	e8 20 61 fe ff       	call   c0000898 <strcmp>
c001a778:	83 c4 10             	add    esp,0x10
c001a77b:	85 c0                	test   eax,eax
c001a77d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a781:	75 97                	jne    c001a71a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a783:	51                   	push   ecx
c001a784:	51                   	push   ecx
c001a785:	52                   	push   edx
c001a786:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a78d:	e8 7a 60 fe ff       	call   c000080c <strcpy>
c001a792:	83 c4 10             	add    esp,0x10
c001a795:	b0 01                	mov    al,0x1
c001a797:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a79d:	5b                   	pop    ebx
c001a79e:	5e                   	pop    esi
c001a79f:	5f                   	pop    edi
c001a7a0:	5d                   	pop    ebp
c001a7a1:	c3                   	ret    

c001a7a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a7a2:	57                   	push   edi
c001a7a3:	56                   	push   esi
c001a7a4:	53                   	push   ebx
c001a7a5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7ab:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a7b2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a7b9:	53                   	push   ebx
c001a7ba:	e8 ad 5f fe ff       	call   c000076c <strlen>
c001a7bf:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7c2:	89 c7                	mov    edi,eax
c001a7c4:	e8 a3 5f fe ff       	call   c000076c <strlen>
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a7d0:	3d ff 00 00 00       	cmp    eax,0xff
c001a7d5:	0f 87 d3 00 00 00    	ja     c001a8ae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a7db:	57                   	push   edi
c001a7dc:	57                   	push   edi
c001a7dd:	56                   	push   esi
c001a7de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a7e2:	56                   	push   esi
c001a7e3:	e8 24 60 fe ff       	call   c000080c <strcpy>
c001a7e8:	58                   	pop    eax
c001a7e9:	5a                   	pop    edx
c001a7ea:	68 0a b9 02 c0       	push   0xc002b90a
c001a7ef:	56                   	push   esi
c001a7f0:	e8 57 61 fe ff       	call   c000094c <strcat>
c001a7f5:	59                   	pop    ecx
c001a7f6:	5f                   	pop    edi
c001a7f7:	53                   	push   ebx
c001a7f8:	56                   	push   esi
c001a7f9:	e8 4e 61 fe ff       	call   c000094c <strcat>
c001a7fe:	58                   	pop    eax
c001a7ff:	5a                   	pop    edx
c001a800:	68 b4 b5 02 c0       	push   0xc002b5b4
c001a805:	56                   	push   esi
c001a806:	e8 41 61 fe ff       	call   c000094c <strcat>
c001a80b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a812:	e8 85 4d ff ff       	call   c000f59c <malloc>
c001a817:	83 c4 0c             	add    esp,0xc
c001a81a:	89 c3                	mov    ebx,eax
c001a81c:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001a822:	56                   	push   esi
c001a823:	50                   	push   eax
c001a824:	e8 f9 82 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001a829:	83 c4 10             	add    esp,0x10
c001a82c:	85 db                	test   ebx,ebx
c001a82e:	74 7e                	je     c001a8ae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a830:	51                   	push   ecx
c001a831:	51                   	push   ecx
c001a832:	6a 01                	push   0x1
c001a834:	53                   	push   ebx
c001a835:	e8 4c 83 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	85 c0                	test   eax,eax
c001a83f:	74 08                	je     c001a849 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a841:	83 ec 0c             	sub    esp,0xc
c001a844:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a846:	53                   	push   ebx
c001a847:	eb 5f                	jmp    c001a8a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a849:	52                   	push   edx
c001a84a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a84e:	50                   	push   eax
c001a84f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a853:	50                   	push   eax
c001a854:	53                   	push   ebx
c001a855:	e8 d8 85 ff ff       	call   c0012e32 <File::stat(unsigned long long*, bool*)>
c001a85a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a85e:	83 c4 10             	add    esp,0x10
c001a861:	89 c1                	mov    ecx,eax
c001a863:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a867:	74 31                	je     c001a89a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a869:	83 ec 0c             	sub    esp,0xc
c001a86c:	50                   	push   eax
c001a86d:	e8 2a 4d ff ff       	call   c000f59c <malloc>
c001a872:	89 c6                	mov    esi,eax
c001a874:	58                   	pop    eax
c001a875:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a877:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a87b:	52                   	push   edx
c001a87c:	56                   	push   esi
c001a87d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a881:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a885:	53                   	push   ebx
c001a886:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a889:	83 c4 20             	add    esp,0x20
c001a88c:	85 c0                	test   eax,eax
c001a88e:	75 0a                	jne    c001a89a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a894:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a898:	74 18                	je     c001a8b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a89a:	83 ec 0c             	sub    esp,0xc
c001a89d:	53                   	push   ebx
c001a89e:	e8 41 83 ff ff       	call   c0012be4 <File::close()>
c001a8a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8ab:	83 c4 10             	add    esp,0x10
c001a8ae:	31 c0                	xor    eax,eax
c001a8b0:	eb 3b                	jmp    c001a8ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a8b2:	83 ec 0c             	sub    esp,0xc
c001a8b5:	53                   	push   ebx
c001a8b6:	e8 29 83 ff ff       	call   c0012be4 <File::close()>
c001a8bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8c3:	83 c4 0c             	add    esp,0xc
c001a8c6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a8cd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a8d4:	56                   	push   esi
c001a8d5:	e8 70 fd ff ff       	call   c001a64a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a8da:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8dd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a8e1:	e8 c6 4c ff ff       	call   c000f5ac <free>
c001a8e6:	83 c4 10             	add    esp,0x10
c001a8e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a8ed:	81 c4 20 01 00 00    	add    esp,0x120
c001a8f3:	5b                   	pop    ebx
c001a8f4:	5e                   	pop    esi
c001a8f5:	5f                   	pop    edi
c001a8f6:	c3                   	ret    

c001a8f7 <Reg::getLine(char*, char*, char*)>:
c001a8f7:	57                   	push   edi
c001a8f8:	56                   	push   esi
c001a8f9:	53                   	push   ebx
c001a8fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8fe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a902:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a906:	57                   	push   edi
c001a907:	56                   	push   esi
c001a908:	53                   	push   ebx
c001a909:	68 b9 b5 02 c0       	push   0xc002b5b9
c001a90e:	e8 8f fe ff ff       	call   c001a7a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a913:	83 c4 10             	add    esp,0x10
c001a916:	84 c0                	test   al,al
c001a918:	75 10                	jne    c001a92a <Reg::getLine(char*, char*, char*)+0x33>
c001a91a:	57                   	push   edi
c001a91b:	56                   	push   esi
c001a91c:	53                   	push   ebx
c001a91d:	68 de b5 02 c0       	push   0xc002b5de
c001a922:	e8 7b fe ff ff       	call   c001a7a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a927:	83 c4 10             	add    esp,0x10
c001a92a:	5b                   	pop    ebx
c001a92b:	5e                   	pop    esi
c001a92c:	5f                   	pop    edi
c001a92d:	c3                   	ret    

c001a92e <Reg::readInt(char*, char*, int*)>:
c001a92e:	55                   	push   ebp
c001a92f:	57                   	push   edi
c001a930:	56                   	push   esi
c001a931:	53                   	push   ebx
c001a932:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a938:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a93c:	57                   	push   edi
c001a93d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a944:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a94b:	e8 a7 ff ff ff       	call   c001a8f7 <Reg::getLine(char*, char*, char*)>
c001a950:	83 c4 10             	add    esp,0x10
c001a953:	84 c0                	test   al,al
c001a955:	0f 84 b3 00 00 00    	je     c001aa0e <Reg::readInt(char*, char*, int*)+0xe0>
c001a95b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a95f:	80 fa 2b             	cmp    dl,0x2b
c001a962:	74 0c                	je     c001a970 <Reg::readInt(char*, char*, int*)+0x42>
c001a964:	80 fa 2d             	cmp    dl,0x2d
c001a967:	75 0e                	jne    c001a977 <Reg::readInt(char*, char*, int*)+0x49>
c001a969:	ba 01 00 00 00       	mov    edx,0x1
c001a96e:	eb 0b                	jmp    c001a97b <Reg::readInt(char*, char*, int*)+0x4d>
c001a970:	ba 01 00 00 00       	mov    edx,0x1
c001a975:	eb 02                	jmp    c001a979 <Reg::readInt(char*, char*, int*)+0x4b>
c001a977:	31 d2                	xor    edx,edx
c001a979:	31 c0                	xor    eax,eax
c001a97b:	be 0a 00 00 00       	mov    esi,0xa
c001a980:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a985:	75 20                	jne    c001a9a7 <Reg::readInt(char*, char*, int*)+0x79>
c001a987:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a98b:	80 f9 78             	cmp    cl,0x78
c001a98e:	75 0a                	jne    c001a99a <Reg::readInt(char*, char*, int*)+0x6c>
c001a990:	83 c2 02             	add    edx,0x2
c001a993:	be 10 00 00 00       	mov    esi,0x10
c001a998:	eb 0d                	jmp    c001a9a7 <Reg::readInt(char*, char*, int*)+0x79>
c001a99a:	80 f9 62             	cmp    cl,0x62
c001a99d:	75 08                	jne    c001a9a7 <Reg::readInt(char*, char*, int*)+0x79>
c001a99f:	83 c2 02             	add    edx,0x2
c001a9a2:	be 02 00 00 00       	mov    esi,0x2
c001a9a7:	01 d7                	add    edi,edx
c001a9a9:	31 d2                	xor    edx,edx
c001a9ab:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a9ad:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a9b1:	80 fb 0d             	cmp    bl,0xd
c001a9b4:	0f 94 c3             	sete   bl
c001a9b7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a9bc:	0f 94 c1             	sete   cl
c001a9bf:	08 cb                	or     bl,cl
c001a9c1:	75 3a                	jne    c001a9fd <Reg::readInt(char*, char*, int*)+0xcf>
c001a9c3:	0f af d6             	imul   edx,esi
c001a9c6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a9cb:	83 fe 10             	cmp    esi,0x10
c001a9ce:	75 26                	jne    c001a9f6 <Reg::readInt(char*, char*, int*)+0xc8>
c001a9d0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a9d4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a9d7:	89 e9                	mov    ecx,ebp
c001a9d9:	80 f9 05             	cmp    cl,0x5
c001a9dc:	77 06                	ja     c001a9e4 <Reg::readInt(char*, char*, int*)+0xb6>
c001a9de:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a9e2:	eb 16                	jmp    c001a9fa <Reg::readInt(char*, char*, int*)+0xcc>
c001a9e4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a9e8:	83 e9 61             	sub    ecx,0x61
c001a9eb:	80 f9 05             	cmp    cl,0x5
c001a9ee:	77 06                	ja     c001a9f6 <Reg::readInt(char*, char*, int*)+0xc8>
c001a9f0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a9f4:	eb 04                	jmp    c001a9fa <Reg::readInt(char*, char*, int*)+0xcc>
c001a9f6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a9fa:	47                   	inc    edi
c001a9fb:	eb ae                	jmp    c001a9ab <Reg::readInt(char*, char*, int*)+0x7d>
c001a9fd:	84 c0                	test   al,al
c001a9ff:	74 02                	je     c001aa03 <Reg::readInt(char*, char*, int*)+0xd5>
c001aa01:	f7 da                	neg    edx
c001aa03:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aa0a:	89 10                	mov    DWORD PTR [eax],edx
c001aa0c:	88 d8                	mov    al,bl
c001aa0e:	81 c4 ec 00 00 00    	add    esp,0xec
c001aa14:	5b                   	pop    ebx
c001aa15:	5e                   	pop    esi
c001aa16:	5f                   	pop    edi
c001aa17:	5d                   	pop    ebp
c001aa18:	c3                   	ret    

c001aa19 <Reg::readString(char*, char*, char*, int)>:
c001aa19:	57                   	push   edi
c001aa1a:	56                   	push   esi
c001aa1b:	53                   	push   ebx
c001aa1c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aa22:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aa29:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001aa2d:	57                   	push   edi
c001aa2e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa35:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa3c:	e8 b6 fe ff ff       	call   c001a8f7 <Reg::getLine(char*, char*, char*)>
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	89 c6                	mov    esi,eax
c001aa46:	84 c0                	test   al,al
c001aa48:	74 44                	je     c001aa8e <Reg::readString(char*, char*, char*, int)+0x75>
c001aa4a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001aa51:	31 c0                	xor    eax,eax
c001aa53:	4a                   	dec    edx
c001aa54:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001aa57:	84 c9                	test   cl,cl
c001aa59:	74 0f                	je     c001aa6a <Reg::readString(char*, char*, char*, int)+0x51>
c001aa5b:	39 c2                	cmp    edx,eax
c001aa5d:	7e 0b                	jle    c001aa6a <Reg::readString(char*, char*, char*, int)+0x51>
c001aa5f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001aa62:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aa67:	40                   	inc    eax
c001aa68:	eb ea                	jmp    c001aa54 <Reg::readString(char*, char*, char*, int)+0x3b>
c001aa6a:	83 ec 0c             	sub    esp,0xc
c001aa6d:	53                   	push   ebx
c001aa6e:	e8 f9 5c fe ff       	call   c000076c <strlen>
c001aa73:	83 c4 10             	add    esp,0x10
c001aa76:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aa7b:	75 11                	jne    c001aa8e <Reg::readString(char*, char*, char*, int)+0x75>
c001aa7d:	83 ec 0c             	sub    esp,0xc
c001aa80:	53                   	push   ebx
c001aa81:	e8 e6 5c fe ff       	call   c000076c <strlen>
c001aa86:	83 c4 10             	add    esp,0x10
c001aa89:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001aa8e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aa94:	89 f0                	mov    eax,esi
c001aa96:	5b                   	pop    ebx
c001aa97:	5e                   	pop    esi
c001aa98:	5f                   	pop    edi
c001aa99:	c3                   	ret    

c001aa9a <Reg::readBool(char*, char*, bool*)>:
c001aa9a:	83 ec 20             	sub    esp,0x20
c001aa9d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaa1:	50                   	push   eax
c001aaa2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaa6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaaa:	e8 7f fe ff ff       	call   c001a92e <Reg::readInt(char*, char*, int*)>
c001aaaf:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aab4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aab8:	0f 95 02             	setne  BYTE PTR [edx]
c001aabb:	83 c4 2c             	add    esp,0x2c
c001aabe:	c3                   	ret    

c001aabf <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aabf:	53                   	push   ebx
c001aac0:	83 ec 1c             	sub    esp,0x1c
c001aac3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aac7:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aacb:	50                   	push   eax
c001aacc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aad0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aad4:	e8 c1 ff ff ff       	call   c001aa9a <Reg::readBool(char*, char*, bool*)>
c001aad9:	83 c4 10             	add    esp,0x10
c001aadc:	84 c0                	test   al,al
c001aade:	74 04                	je     c001aae4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aae0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aae4:	88 d8                	mov    al,bl
c001aae6:	83 c4 18             	add    esp,0x18
c001aae9:	5b                   	pop    ebx
c001aaea:	c3                   	ret    

c001aaeb <Reg::readIntWithDefault(char*, char*, int)>:
c001aaeb:	53                   	push   ebx
c001aaec:	83 ec 1c             	sub    esp,0x1c
c001aaef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aaf3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaf7:	50                   	push   eax
c001aaf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aafc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab00:	e8 29 fe ff ff       	call   c001a92e <Reg::readInt(char*, char*, int*)>
c001ab05:	83 c4 10             	add    esp,0x10
c001ab08:	84 c0                	test   al,al
c001ab0a:	74 04                	je     c001ab10 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ab0c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ab10:	89 d8                	mov    eax,ebx
c001ab12:	83 c4 18             	add    esp,0x18
c001ab15:	5b                   	pop    ebx
c001ab16:	c3                   	ret    

c001ab17 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ab17:	57                   	push   edi
c001ab18:	56                   	push   esi
c001ab19:	56                   	push   esi
c001ab1a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ab1e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ab22:	56                   	push   esi
c001ab23:	57                   	push   edi
c001ab24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab2c:	e8 e8 fe ff ff       	call   c001aa19 <Reg::readString(char*, char*, char*, int)>
c001ab31:	83 c4 10             	add    esp,0x10
c001ab34:	84 c0                	test   al,al
c001ab36:	75 1a                	jne    c001ab52 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ab38:	51                   	push   ecx
c001ab39:	56                   	push   esi
c001ab3a:	6a 00                	push   0x0
c001ab3c:	57                   	push   edi
c001ab3d:	e8 0e 5c fe ff       	call   c0000750 <memset>
c001ab42:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ab45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ab49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab4b:	83 c4 10             	add    esp,0x10
c001ab4e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ab52:	89 f8                	mov    eax,edi
c001ab54:	5a                   	pop    edx
c001ab55:	5e                   	pop    esi
c001ab56:	5f                   	pop    edi
c001ab57:	c3                   	ret    

c001ab58 <Sys::eject(regs*)>:
c001ab58:	83 ec 0c             	sub    esp,0xc
c001ab5b:	83 ca ff             	or     edx,0xffffffff
c001ab5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab62:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ab65:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ab6a:	83 e9 41             	sub    ecx,0x41
c001ab6d:	83 f9 19             	cmp    ecx,0x19
c001ab70:	77 18                	ja     c001ab8a <Sys::eject(regs*)+0x32>
c001ab72:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c001ab79:	85 c9                	test   ecx,ecx
c001ab7b:	74 0d                	je     c001ab8a <Sys::eject(regs*)+0x32>
c001ab7d:	83 ec 0c             	sub    esp,0xc
c001ab80:	51                   	push   ecx
c001ab81:	e8 28 b3 ff ff       	call   c0015eae <LogicalDisk::eject()>
c001ab86:	83 c4 10             	add    esp,0x10
c001ab89:	99                   	cdq    
c001ab8a:	83 c4 0c             	add    esp,0xc
c001ab8d:	c3                   	ret    

c001ab8e <Sys::exit(regs*)>:
c001ab8e:	83 ec 18             	sub    esp,0x18
c001ab91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab95:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab98:	e8 be 35 00 00       	call   c001e15b <terminateTask(int)>
c001ab9d:	83 c8 ff             	or     eax,0xffffffff
c001aba0:	83 c4 1c             	add    esp,0x1c
c001aba3:	89 c2                	mov    edx,eax
c001aba5:	c3                   	ret    

c001aba6 <Sys::getCwd(regs*)>:
c001aba6:	83 ec 10             	sub    esp,0x10
c001aba9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abad:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001abb0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001abb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abb8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abbb:	e8 64 7d ff ff       	call   c0012924 <Fs::getcwd(Process*, char*, int)>
c001abc0:	83 c4 1c             	add    esp,0x1c
c001abc3:	99                   	cdq    
c001abc4:	c3                   	ret    

c001abc5 <Sys::getPID(regs*)>:
c001abc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abcd:	8b 00                	mov    eax,DWORD PTR [eax]
c001abcf:	99                   	cdq    
c001abd0:	c3                   	ret    

c001abd1 <Sys::getRAMData(regs*)>:
c001abd1:	8b 0d 54 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d754
c001abd7:	6b 05 50 d7 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d750,0x64
c001abde:	99                   	cdq    
c001abdf:	f7 f9                	idiv   ecx
c001abe1:	c1 e0 18             	shl    eax,0x18
c001abe4:	09 c8                	or     eax,ecx
c001abe6:	99                   	cdq    
c001abe7:	c3                   	ret    

c001abe8 <Sys::getVGAPtr(regs*)>:
c001abe8:	55                   	push   ebp
c001abe9:	57                   	push   edi
c001abea:	56                   	push   esi
c001abeb:	53                   	push   ebx
c001abec:	83 ec 18             	sub    esp,0x18
c001abef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001abf3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001abf6:	e8 ac 30 00 00       	call   c001dca7 <Thr::processFromPID(int)>
c001abfb:	83 c4 10             	add    esp,0x10
c001abfe:	89 c1                	mov    ecx,eax
c001ac00:	b8 01 00 00 00       	mov    eax,0x1
c001ac05:	85 c9                	test   ecx,ecx
c001ac07:	74 59                	je     c001ac62 <Sys::getVGAPtr(regs*)+0x7a>
c001ac09:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ac0f:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ac13:	74 0c                	je     c001ac21 <Sys::getVGAPtr(regs*)+0x39>
c001ac15:	83 ec 0c             	sub    esp,0xc
c001ac18:	53                   	push   ebx
c001ac19:	e8 dd 56 ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ac24:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ac27:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ac2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac2e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ac31:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac34:	81 c3 82 00 00 00    	add    ebx,0x82
c001ac3a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ac40:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac43:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ac46:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ac4c:	50                   	push   eax
c001ac4d:	50                   	push   eax
c001ac4e:	53                   	push   ebx
c001ac4f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac52:	05 a8 0f 00 00       	add    eax,0xfa8
c001ac57:	50                   	push   eax
c001ac58:	e8 af 5b fe ff       	call   c000080c <strcpy>
c001ac5d:	83 c4 10             	add    esp,0x10
c001ac60:	31 c0                	xor    eax,eax
c001ac62:	83 c4 0c             	add    esp,0xc
c001ac65:	31 d2                	xor    edx,edx
c001ac67:	5b                   	pop    ebx
c001ac68:	5e                   	pop    esi
c001ac69:	5f                   	pop    edi
c001ac6a:	5d                   	pop    ebp
c001ac6b:	c3                   	ret    

c001ac6c <Sys::loadDLL(regs*)>:
c001ac6c:	56                   	push   esi
c001ac6d:	53                   	push   ebx
c001ac6e:	31 d2                	xor    edx,edx
c001ac70:	51                   	push   ecx
c001ac71:	b8 01 00 00 00       	mov    eax,0x1
c001ac76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac7a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ac7e:	0f 84 8c 00 00 00    	je     c001ad10 <Sys::loadDLL(regs*)+0xa4>
c001ac84:	83 ec 0c             	sub    esp,0xc
c001ac87:	68 14 01 00 00       	push   0x114
c001ac8c:	e8 0b 49 ff ff       	call   c000f59c <malloc>
c001ac91:	83 c4 0c             	add    esp,0xc
c001ac94:	89 c3                	mov    ebx,eax
c001ac96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac9b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac9e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aca1:	53                   	push   ebx
c001aca2:	e8 7b 7e ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001aca7:	83 c4 10             	add    esp,0x10
c001acaa:	31 d2                	xor    edx,edx
c001acac:	b8 02 00 00 00       	mov    eax,0x2
c001acb1:	85 db                	test   ebx,ebx
c001acb3:	74 5b                	je     c001ad10 <Sys::loadDLL(regs*)+0xa4>
c001acb5:	83 ec 0c             	sub    esp,0xc
c001acb8:	53                   	push   ebx
c001acb9:	e8 36 81 ff ff       	call   c0012df4 <File::exists()>
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	84 c0                	test   al,al
c001acc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acc5:	75 11                	jne    c001acd8 <Sys::loadDLL(regs*)+0x6c>
c001acc7:	83 ec 0c             	sub    esp,0xc
c001acca:	53                   	push   ebx
c001accb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acce:	83 c4 10             	add    esp,0x10
c001acd1:	b8 03 00 00 00       	mov    eax,0x3
c001acd6:	eb 36                	jmp    c001ad0e <Sys::loadDLL(regs*)+0xa2>
c001acd8:	83 ec 0c             	sub    esp,0xc
c001acdb:	53                   	push   ebx
c001acdc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acdf:	58                   	pop    eax
c001ace0:	5a                   	pop    edx
c001ace1:	6a 00                	push   0x0
c001ace3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ace6:	e8 0e 22 00 00       	call   c001cef9 <Thr::loadDLL(char const*, bool)>
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	89 c1                	mov    ecx,eax
c001acf0:	31 d2                	xor    edx,edx
c001acf2:	b8 04 00 00 00       	mov    eax,0x4
c001acf7:	85 c9                	test   ecx,ecx
c001acf9:	74 15                	je     c001ad10 <Sys::loadDLL(regs*)+0xa4>
c001acfb:	53                   	push   ebx
c001acfc:	53                   	push   ebx
c001acfd:	ff 35 08 d7 02 c0    	push   DWORD PTR ds:0xc002d708
c001ad03:	51                   	push   ecx
c001ad04:	e8 1e 24 00 00       	call   c001d127 <Thr::executeDLL(unsigned long, void*)>
c001ad09:	83 c4 10             	add    esp,0x10
c001ad0c:	31 c0                	xor    eax,eax
c001ad0e:	31 d2                	xor    edx,edx
c001ad10:	59                   	pop    ecx
c001ad11:	5b                   	pop    ebx
c001ad12:	5e                   	pop    esi
c001ad13:	c3                   	ret    

c001ad14 <Sys::read(regs*)>:
c001ad14:	57                   	push   edi
c001ad15:	56                   	push   esi
c001ad16:	53                   	push   ebx
c001ad17:	83 ec 10             	sub    esp,0x10
c001ad1a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad21:	83 f8 02             	cmp    eax,0x2
c001ad24:	77 10                	ja     c001ad36 <Sys::read(regs*)+0x22>
c001ad26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad2b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad2e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ad34:	eb 0e                	jmp    c001ad44 <Sys::read(regs*)+0x30>
c001ad36:	83 ec 0c             	sub    esp,0xc
c001ad39:	50                   	push   eax
c001ad3a:	e8 30 63 ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	89 c1                	mov    ecx,eax
c001ad44:	83 c8 ff             	or     eax,0xffffffff
c001ad47:	85 c9                	test   ecx,ecx
c001ad49:	89 c2                	mov    edx,eax
c001ad4b:	74 28                	je     c001ad75 <Sys::read(regs*)+0x61>
c001ad4d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad55:	31 ff                	xor    edi,edi
c001ad57:	83 ec 0c             	sub    esp,0xc
c001ad5a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad5c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ad60:	52                   	push   edx
c001ad61:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad64:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ad67:	57                   	push   edi
c001ad68:	56                   	push   esi
c001ad69:	51                   	push   ecx
c001ad6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad71:	83 c4 20             	add    esp,0x20
c001ad74:	99                   	cdq    
c001ad75:	83 c4 10             	add    esp,0x10
c001ad78:	5b                   	pop    ebx
c001ad79:	5e                   	pop    esi
c001ad7a:	5f                   	pop    edi
c001ad7b:	c3                   	ret    

c001ad7c <Sys::sbrk(regs*)>:
c001ad7c:	56                   	push   esi
c001ad7d:	53                   	push   ebx
c001ad7e:	50                   	push   eax
c001ad7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad8b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ad8e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ad94:	85 db                	test   ebx,ebx
c001ad96:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ad99:	74 02                	je     c001ad9d <Sys::sbrk(regs*)+0x21>
c001ad9b:	79 06                	jns    c001ada3 <Sys::sbrk(regs*)+0x27>
c001ad9d:	89 f0                	mov    eax,esi
c001ad9f:	31 d2                	xor    edx,edx
c001ada1:	eb 2a                	jmp    c001adcd <Sys::sbrk(regs*)+0x51>
c001ada3:	83 c8 ff             	or     eax,0xffffffff
c001ada6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001adac:	89 c2                	mov    edx,eax
c001adae:	77 1d                	ja     c001adcd <Sys::sbrk(regs*)+0x51>
c001adb0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001adb6:	50                   	push   eax
c001adb7:	c1 ea 0c             	shr    edx,0xc
c001adba:	68 07 0c 00 00       	push   0xc07
c001adbf:	52                   	push   edx
c001adc0:	51                   	push   ecx
c001adc1:	e8 be 6c ff ff       	call   c0011a84 <VAS::allocatePages(int, int)>
c001adc6:	89 f0                	mov    eax,esi
c001adc8:	31 d2                	xor    edx,edx
c001adca:	83 c4 10             	add    esp,0x10
c001adcd:	59                   	pop    ecx
c001adce:	5b                   	pop    ebx
c001adcf:	5e                   	pop    esi
c001add0:	c3                   	ret    

c001add1 <Sys::setCwd(regs*)>:
c001add1:	83 ec 14             	sub    esp,0x14
c001add4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001add8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001addb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ade0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ade3:	e8 ab 80 ff ff       	call   c0012e93 <Fs::setcwd(Process*, char*)>
c001ade8:	83 c4 1c             	add    esp,0x1c
c001adeb:	99                   	cdq    
c001adec:	c3                   	ret    

c001aded <Sys::setTime(regs*)>:
c001aded:	55                   	push   ebp
c001adee:	31 c9                	xor    ecx,ecx
c001adf0:	57                   	push   edi
c001adf1:	bd 0c 00 00 00       	mov    ebp,0xc
c001adf6:	56                   	push   esi
c001adf7:	53                   	push   ebx
c001adf8:	31 db                	xor    ebx,ebx
c001adfa:	83 ec 10             	sub    esp,0x10
c001adfd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae01:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ae04:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ae07:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ae0a:	89 c2                	mov    edx,eax
c001ae0c:	66 81 ef 6c 07       	sub    di,0x76c
c001ae11:	83 e2 1f             	and    edx,0x1f
c001ae14:	c1 e7 10             	shl    edi,0x10
c001ae17:	42                   	inc    edx
c001ae18:	c1 e8 05             	shr    eax,0x5
c001ae1b:	88 d1                	mov    cl,dl
c001ae1d:	31 d2                	xor    edx,edx
c001ae1f:	f7 f5                	div    ebp
c001ae21:	89 dd                	mov    ebp,ebx
c001ae23:	88 d5                	mov    ch,dl
c001ae25:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ae2b:	0f b7 c1             	movzx  eax,cx
c001ae2e:	31 d2                	xor    edx,edx
c001ae30:	09 f8                	or     eax,edi
c001ae32:	bf 3c 00 00 00       	mov    edi,0x3c
c001ae37:	89 c1                	mov    ecx,eax
c001ae39:	89 f0                	mov    eax,esi
c001ae3b:	f7 f7                	div    edi
c001ae3d:	c1 e2 10             	shl    edx,0x10
c001ae40:	09 d5                	or     ebp,edx
c001ae42:	31 d2                	xor    edx,edx
c001ae44:	89 eb                	mov    ebx,ebp
c001ae46:	f7 f7                	div    edi
c001ae48:	bf 10 0e 00 00       	mov    edi,0xe10
c001ae4d:	88 d7                	mov    bh,dl
c001ae4f:	89 f0                	mov    eax,esi
c001ae51:	31 d2                	xor    edx,edx
c001ae53:	f7 f7                	div    edi
c001ae55:	bf 18 00 00 00       	mov    edi,0x18
c001ae5a:	31 d2                	xor    edx,edx
c001ae5c:	f7 f7                	div    edi
c001ae5e:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001ae63:	88 d3                	mov    bl,dl
c001ae65:	53                   	push   ebx
c001ae66:	51                   	push   ecx
c001ae67:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ae6d:	e8 6a 88 ff ff       	call   c00136dc <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ae72:	83 c4 1c             	add    esp,0x1c
c001ae75:	83 f0 01             	xor    eax,0x1
c001ae78:	5b                   	pop    ebx
c001ae79:	0f b6 c0             	movzx  eax,al
c001ae7c:	5e                   	pop    esi
c001ae7d:	31 d2                	xor    edx,edx
c001ae7f:	5f                   	pop    edi
c001ae80:	5d                   	pop    ebp
c001ae81:	c3                   	ret    

c001ae82 <Sys::timezone(regs*)>:
c001ae82:	53                   	push   ebx
c001ae83:	83 ec 08             	sub    esp,0x8
c001ae86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae8a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ae8e:	75 17                	jne    c001aea7 <Sys::timezone(regs*)+0x25>
c001ae90:	83 ec 0c             	sub    esp,0xc
c001ae93:	68 f9 b5 02 c0       	push   0xc002b5f9
c001ae98:	e8 27 77 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001ae9d:	83 c8 ff             	or     eax,0xffffffff
c001aea0:	83 c4 10             	add    esp,0x10
c001aea3:	89 c2                	mov    edx,eax
c001aea5:	eb 20                	jmp    c001aec7 <Sys::timezone(regs*)+0x45>
c001aea7:	83 ec 0c             	sub    esp,0xc
c001aeaa:	68 0e b6 02 c0       	push   0xc002b60e
c001aeaf:	e8 10 77 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001aeb4:	58                   	pop    eax
c001aeb5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aeb8:	e8 81 85 ff ff       	call   c001343e <User::loadClockSettings(int)>
c001aebd:	83 c4 10             	add    esp,0x10
c001aec0:	b8 01 00 00 00       	mov    eax,0x1
c001aec5:	31 d2                	xor    edx,edx
c001aec7:	83 c4 08             	add    esp,0x8
c001aeca:	5b                   	pop    ebx
c001aecb:	c3                   	ret    

c001aecc <Sys::write(regs*)>:
c001aecc:	57                   	push   edi
c001aecd:	56                   	push   esi
c001aece:	53                   	push   ebx
c001aecf:	83 ec 10             	sub    esp,0x10
c001aed2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aed6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aed9:	83 f8 02             	cmp    eax,0x2
c001aedc:	77 10                	ja     c001aeee <Sys::write(regs*)+0x22>
c001aede:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aee6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aeec:	eb 0e                	jmp    c001aefc <Sys::write(regs*)+0x30>
c001aeee:	83 ec 0c             	sub    esp,0xc
c001aef1:	50                   	push   eax
c001aef2:	e8 78 61 ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	89 c1                	mov    ecx,eax
c001aefc:	83 c8 ff             	or     eax,0xffffffff
c001aeff:	85 c9                	test   ecx,ecx
c001af01:	89 c2                	mov    edx,eax
c001af03:	74 28                	je     c001af2d <Sys::write(regs*)+0x61>
c001af05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af0d:	31 ff                	xor    edi,edi
c001af0f:	83 ec 0c             	sub    esp,0xc
c001af12:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af14:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af18:	52                   	push   edx
c001af19:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af1c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af1f:	57                   	push   edi
c001af20:	56                   	push   esi
c001af21:	51                   	push   ecx
c001af22:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001af25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af29:	83 c4 20             	add    esp,0x20
c001af2c:	99                   	cdq    
c001af2d:	83 c4 10             	add    esp,0x10
c001af30:	5b                   	pop    ebx
c001af31:	5e                   	pop    esi
c001af32:	5f                   	pop    edi
c001af33:	c3                   	ret    

c001af34 <Sys::wsbe(regs*)>:
c001af34:	57                   	push   edi
c001af35:	b9 0b 00 00 00       	mov    ecx,0xb
c001af3a:	56                   	push   esi
c001af3b:	be 4d b6 02 c0       	mov    esi,0xc002b64d
c001af40:	53                   	push   ebx
c001af41:	83 ec 30             	sub    esp,0x30
c001af44:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001af48:	fc                   	cld    
c001af49:	83 ec 0c             	sub    esp,0xc
c001af4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001af4e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001af52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af5a:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001af60:	8b 06                	mov    eax,DWORD PTR [esi]
c001af62:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001af65:	57                   	push   edi
c001af66:	e8 01 58 fe ff       	call   c000076c <strlen>
c001af6b:	5a                   	pop    edx
c001af6c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001af70:	52                   	push   edx
c001af71:	31 d2                	xor    edx,edx
c001af73:	57                   	push   edi
c001af74:	52                   	push   edx
c001af75:	50                   	push   eax
c001af76:	56                   	push   esi
c001af77:	ff d3                	call   ebx
c001af79:	83 c4 14             	add    esp,0x14
c001af7c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af80:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001af83:	e8 d3 31 00 00       	call   c001e15b <terminateTask(int)>
c001af88:	83 c4 40             	add    esp,0x40
c001af8b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001af90:	5b                   	pop    ebx
c001af91:	31 d2                	xor    edx,edx
c001af93:	5e                   	pop    esi
c001af94:	5f                   	pop    edi
c001af95:	c3                   	ret    

c001af96 <Sys::yield(regs*)>:
c001af96:	57                   	push   edi
c001af97:	56                   	push   esi
c001af98:	53                   	push   ebx
c001af99:	fa                   	cli    
c001af9a:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001afa0:	e8 16 29 00 00       	call   c001d8bb <schedule()>
c001afa5:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001afaa:	48                   	dec    eax
c001afab:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001afb0:	75 01                	jne    c001afb3 <Sys::yield(regs*)+0x1d>
c001afb2:	fb                   	sti    
c001afb3:	8b 35 70 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd70
c001afb9:	8b 3d 74 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd74
c001afbf:	89 f0                	mov    eax,esi
c001afc1:	89 fb                	mov    ebx,edi
c001afc3:	89 f1                	mov    ecx,esi
c001afc5:	c1 e0 07             	shl    eax,0x7
c001afc8:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001afcc:	25 80 30 0f 00       	and    eax,0xf3080
c001afd1:	c1 eb 17             	shr    ebx,0x17
c001afd4:	31 c8                	xor    eax,ecx
c001afd6:	89 da                	mov    edx,ebx
c001afd8:	5b                   	pop    ebx
c001afd9:	5e                   	pop    esi
c001afda:	5f                   	pop    edi
c001afdb:	c3                   	ret    

c001afdc <sysCallSeekDir(regs*)>:
c001afdc:	31 c0                	xor    eax,eax
c001afde:	31 d2                	xor    edx,edx
c001afe0:	c3                   	ret    

c001afe1 <sysCallTellDir(regs*)>:
c001afe1:	31 c0                	xor    eax,eax
c001afe3:	31 d2                	xor    edx,edx
c001afe5:	c3                   	ret    

c001afe6 <sysCallVerify(regs*)>:
c001afe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afea:	31 d2                	xor    edx,edx
c001afec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001afef:	c3                   	ret    

c001aff0 <sysCallGetArgc(regs*)>:
c001aff0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aff5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aff8:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001affe:	99                   	cdq    
c001afff:	c3                   	ret    

c001b000 <sysFormatDisk(regs*)>:
c001b000:	56                   	push   esi
c001b001:	53                   	push   ebx
c001b002:	53                   	push   ebx
c001b003:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b007:	8b 1d 74 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d874
c001b00d:	eb 25                	jmp    c001b034 <sysFormatDisk(regs*)+0x34>
c001b00f:	83 ec 0c             	sub    esp,0xc
c001b012:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b015:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b017:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b01a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b01d:	50                   	push   eax
c001b01e:	ff 34 85 00 dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2300]
c001b025:	53                   	push   ebx
c001b026:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b029:	83 c4 20             	add    esp,0x20
c001b02c:	83 f8 08             	cmp    eax,0x8
c001b02f:	75 12                	jne    c001b043 <sysFormatDisk(regs*)+0x43>
c001b031:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b034:	85 db                	test   ebx,ebx
c001b036:	75 d7                	jne    c001b00f <sysFormatDisk(regs*)+0xf>
c001b038:	59                   	pop    ecx
c001b039:	b8 03 00 00 00       	mov    eax,0x3
c001b03e:	31 d2                	xor    edx,edx
c001b040:	5b                   	pop    ebx
c001b041:	5e                   	pop    esi
c001b042:	c3                   	ret    
c001b043:	85 c0                	test   eax,eax
c001b045:	74 1b                	je     c001b062 <sysFormatDisk(regs*)+0x62>
c001b047:	83 f8 09             	cmp    eax,0x9
c001b04a:	74 0b                	je     c001b057 <sysFormatDisk(regs*)+0x57>
c001b04c:	59                   	pop    ecx
c001b04d:	b8 02 00 00 00       	mov    eax,0x2
c001b052:	31 d2                	xor    edx,edx
c001b054:	5b                   	pop    ebx
c001b055:	5e                   	pop    esi
c001b056:	c3                   	ret    
c001b057:	59                   	pop    ecx
c001b058:	b8 01 00 00 00       	mov    eax,0x1
c001b05d:	31 d2                	xor    edx,edx
c001b05f:	5b                   	pop    ebx
c001b060:	5e                   	pop    esi
c001b061:	c3                   	ret    
c001b062:	59                   	pop    ecx
c001b063:	31 c0                	xor    eax,eax
c001b065:	31 d2                	xor    edx,edx
c001b067:	5b                   	pop    ebx
c001b068:	5e                   	pop    esi
c001b069:	c3                   	ret    

c001b06a <sysSetDiskVolumeLabel(regs*)>:
c001b06a:	56                   	push   esi
c001b06b:	53                   	push   ebx
c001b06c:	53                   	push   ebx
c001b06d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b071:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b074:	83 f8 19             	cmp    eax,0x19
c001b077:	77 29                	ja     c001b0a2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b079:	8b 0c 85 00 dd 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2300]
c001b080:	85 c9                	test   ecx,ecx
c001b082:	74 1e                	je     c001b0a2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b084:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b087:	85 d2                	test   edx,edx
c001b089:	74 17                	je     c001b0a2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b08b:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b091:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b093:	52                   	push   edx
c001b094:	50                   	push   eax
c001b095:	51                   	push   ecx
c001b096:	53                   	push   ebx
c001b097:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b09a:	83 c4 10             	add    esp,0x10
c001b09d:	99                   	cdq    
c001b09e:	59                   	pop    ecx
c001b09f:	5b                   	pop    ebx
c001b0a0:	5e                   	pop    esi
c001b0a1:	c3                   	ret    
c001b0a2:	59                   	pop    ecx
c001b0a3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0ad:	5b                   	pop    ebx
c001b0ae:	5e                   	pop    esi
c001b0af:	c3                   	ret    

c001b0b0 <sysGetDiskVolumeLabel(regs*)>:
c001b0b0:	57                   	push   edi
c001b0b1:	56                   	push   esi
c001b0b2:	53                   	push   ebx
c001b0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b0ba:	83 fa 19             	cmp    edx,0x19
c001b0bd:	77 34                	ja     c001b0f3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0bf:	8b 0c 95 00 dd 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2300]
c001b0c6:	85 c9                	test   ecx,ecx
c001b0c8:	74 29                	je     c001b0f3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0ca:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b0cd:	85 db                	test   ebx,ebx
c001b0cf:	74 22                	je     c001b0f3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0d1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b0d4:	85 c0                	test   eax,eax
c001b0d6:	74 1b                	je     c001b0f3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0d8:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b0de:	83 ec 0c             	sub    esp,0xc
c001b0e1:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b0e3:	50                   	push   eax
c001b0e4:	53                   	push   ebx
c001b0e5:	52                   	push   edx
c001b0e6:	51                   	push   ecx
c001b0e7:	56                   	push   esi
c001b0e8:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b0eb:	83 c4 20             	add    esp,0x20
c001b0ee:	99                   	cdq    
c001b0ef:	5b                   	pop    ebx
c001b0f0:	5e                   	pop    esi
c001b0f1:	5f                   	pop    edi
c001b0f2:	c3                   	ret    
c001b0f3:	5b                   	pop    ebx
c001b0f4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0fe:	5e                   	pop    esi
c001b0ff:	5f                   	pop    edi
c001b100:	c3                   	ret    

c001b101 <sysShutdown(regs*)>:
c001b101:	83 ec 0c             	sub    esp,0xc
c001b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b108:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b10b:	85 c0                	test   eax,eax
c001b10d:	74 18                	je     c001b127 <sysShutdown(regs*)+0x26>
c001b10f:	83 f8 01             	cmp    eax,0x1
c001b112:	74 38                	je     c001b14c <sysShutdown(regs*)+0x4b>
c001b114:	83 f8 02             	cmp    eax,0x2
c001b117:	74 24                	je     c001b13d <sysShutdown(regs*)+0x3c>
c001b119:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b11e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b123:	83 c4 0c             	add    esp,0xc
c001b126:	c3                   	ret    
c001b127:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001b12c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b12e:	6a 00                	push   0x0
c001b130:	6a 00                	push   0x0
c001b132:	6a 00                	push   0x0
c001b134:	50                   	push   eax
c001b135:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b138:	83 c4 10             	add    esp,0x10
c001b13b:	eb dc                	jmp    c001b119 <sysShutdown(regs*)+0x18>
c001b13d:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001b142:	8b 10                	mov    edx,DWORD PTR [eax]
c001b144:	6a 00                	push   0x0
c001b146:	6a 00                	push   0x0
c001b148:	6a 01                	push   0x1
c001b14a:	eb e8                	jmp    c001b134 <sysShutdown(regs*)+0x33>
c001b14c:	a1 a0 fd 02 c0       	mov    eax,ds:0xc002fda0
c001b151:	85 c0                	test   eax,eax
c001b153:	74 02                	je     c001b157 <sysShutdown(regs*)+0x56>
c001b155:	ff d0                	call   eax
c001b157:	31 c0                	xor    eax,eax
c001b159:	31 d2                	xor    edx,edx
c001b15b:	83 c4 0c             	add    esp,0xc
c001b15e:	c3                   	ret    

c001b15f <sysCallRealpath(regs*)>:
c001b15f:	83 ec 0c             	sub    esp,0xc
c001b162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b166:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b169:	85 d2                	test   edx,edx
c001b16b:	74 07                	je     c001b174 <sysCallRealpath(regs*)+0x15>
c001b16d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b170:	85 c0                	test   eax,eax
c001b172:	75 0b                	jne    c001b17f <sysCallRealpath(regs*)+0x20>
c001b174:	b8 01 00 00 00       	mov    eax,0x1
c001b179:	31 d2                	xor    edx,edx
c001b17b:	83 c4 0c             	add    esp,0xc
c001b17e:	c3                   	ret    
c001b17f:	51                   	push   ecx
c001b180:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b186:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b189:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b18f:	51                   	push   ecx
c001b190:	52                   	push   edx
c001b191:	50                   	push   eax
c001b192:	e8 e1 77 ff ff       	call   c0012978 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b197:	83 c4 10             	add    esp,0x10
c001b19a:	31 c0                	xor    eax,eax
c001b19c:	31 d2                	xor    edx,edx
c001b19e:	83 c4 0c             	add    esp,0xc
c001b1a1:	c3                   	ret    

c001b1a2 <sysCallReadDir(regs*)>:
c001b1a2:	53                   	push   ebx
c001b1a3:	83 ec 18             	sub    esp,0x18
c001b1a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b1ad:	83 f8 02             	cmp    eax,0x2
c001b1b0:	76 60                	jbe    c001b212 <sysCallReadDir(regs*)+0x70>
c001b1b2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b1b9:	77 48                	ja     c001b203 <sysCallReadDir(regs*)+0x61>
c001b1bb:	83 ec 0c             	sub    esp,0xc
c001b1be:	50                   	push   eax
c001b1bf:	e8 ab 5e ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b1c4:	83 c4 10             	add    esp,0x10
c001b1c7:	85 c0                	test   eax,eax
c001b1c9:	74 38                	je     c001b203 <sysCallReadDir(regs*)+0x61>
c001b1cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1d3:	83 ec 0c             	sub    esp,0xc
c001b1d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1d8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b1dc:	51                   	push   ecx
c001b1dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1e0:	6a 00                	push   0x0
c001b1e2:	68 10 01 00 00       	push   0x110
c001b1e7:	50                   	push   eax
c001b1e8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b1eb:	83 c4 20             	add    esp,0x20
c001b1ee:	85 c0                	test   eax,eax
c001b1f0:	74 29                	je     c001b21b <sysCallReadDir(regs*)+0x79>
c001b1f2:	83 f8 07             	cmp    eax,0x7
c001b1f5:	74 1b                	je     c001b212 <sysCallReadDir(regs*)+0x70>
c001b1f7:	b8 02 00 00 00       	mov    eax,0x2
c001b1fc:	31 d2                	xor    edx,edx
c001b1fe:	83 c4 18             	add    esp,0x18
c001b201:	5b                   	pop    ebx
c001b202:	c3                   	ret    
c001b203:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b208:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b20d:	83 c4 18             	add    esp,0x18
c001b210:	5b                   	pop    ebx
c001b211:	c3                   	ret    
c001b212:	b8 01 00 00 00       	mov    eax,0x1
c001b217:	31 d2                	xor    edx,edx
c001b219:	eb e3                	jmp    c001b1fe <sysCallReadDir(regs*)+0x5c>
c001b21b:	31 c0                	xor    eax,eax
c001b21d:	31 d2                	xor    edx,edx
c001b21f:	eb dd                	jmp    c001b1fe <sysCallReadDir(regs*)+0x5c>

c001b221 <sysCallIsATTY(regs*)>:
c001b221:	83 ec 0c             	sub    esp,0xc
c001b224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b228:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b22b:	83 f8 02             	cmp    eax,0x2
c001b22e:	76 07                	jbe    c001b237 <sysCallIsATTY(regs*)+0x16>
c001b230:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b235:	75 26                	jne    c001b25d <sysCallIsATTY(regs*)+0x3c>
c001b237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b23c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b23f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b245:	85 c0                	test   eax,eax
c001b247:	74 24                	je     c001b26d <sysCallIsATTY(regs*)+0x4c>
c001b249:	83 ec 0c             	sub    esp,0xc
c001b24c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b24e:	50                   	push   eax
c001b24f:	ff 12                	call   DWORD PTR [edx]
c001b251:	31 d2                	xor    edx,edx
c001b253:	0f b6 c0             	movzx  eax,al
c001b256:	83 c4 10             	add    esp,0x10
c001b259:	83 c4 0c             	add    esp,0xc
c001b25c:	c3                   	ret    
c001b25d:	83 ec 0c             	sub    esp,0xc
c001b260:	50                   	push   eax
c001b261:	e8 09 5e ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b266:	83 c4 10             	add    esp,0x10
c001b269:	85 c0                	test   eax,eax
c001b26b:	75 dc                	jne    c001b249 <sysCallIsATTY(regs*)+0x28>
c001b26d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b272:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b277:	83 c4 0c             	add    esp,0xc
c001b27a:	c3                   	ret    

c001b27b <sysCallSeek(regs*)>:
c001b27b:	53                   	push   ebx
c001b27c:	83 ec 08             	sub    esp,0x8
c001b27f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b283:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b286:	8d 50 fd             	lea    edx,[eax-0x3]
c001b289:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b28f:	77 32                	ja     c001b2c3 <sysCallSeek(regs*)+0x48>
c001b291:	83 ec 0c             	sub    esp,0xc
c001b294:	50                   	push   eax
c001b295:	e8 d5 5d ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b29a:	83 c4 0c             	add    esp,0xc
c001b29d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b2a0:	31 db                	xor    ebx,ebx
c001b2a2:	53                   	push   ebx
c001b2a3:	51                   	push   ecx
c001b2a4:	50                   	push   eax
c001b2a5:	e8 9a 79 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001b2aa:	83 c4 10             	add    esp,0x10
c001b2ad:	85 c0                	test   eax,eax
c001b2af:	0f 95 c0             	setne  al
c001b2b2:	31 d2                	xor    edx,edx
c001b2b4:	0f b6 c0             	movzx  eax,al
c001b2b7:	f7 d8                	neg    eax
c001b2b9:	83 d2 00             	adc    edx,0x0
c001b2bc:	83 c4 08             	add    esp,0x8
c001b2bf:	f7 da                	neg    edx
c001b2c1:	5b                   	pop    ebx
c001b2c2:	c3                   	ret    
c001b2c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2cd:	83 c4 08             	add    esp,0x8
c001b2d0:	5b                   	pop    ebx
c001b2d1:	c3                   	ret    

c001b2d2 <sysCallTell(regs*)>:
c001b2d2:	53                   	push   ebx
c001b2d3:	83 ec 08             	sub    esp,0x8
c001b2d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2dd:	83 f8 02             	cmp    eax,0x2
c001b2e0:	76 4d                	jbe    c001b32f <sysCallTell(regs*)+0x5d>
c001b2e2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b2e7:	76 19                	jbe    c001b302 <sysCallTell(regs*)+0x30>
c001b2e9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2ec:	31 d2                	xor    edx,edx
c001b2ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2fb:	31 c0                	xor    eax,eax
c001b2fd:	83 c4 08             	add    esp,0x8
c001b300:	5b                   	pop    ebx
c001b301:	c3                   	ret    
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	50                   	push   eax
c001b306:	e8 64 5d ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b30b:	5a                   	pop    edx
c001b30c:	59                   	pop    ecx
c001b30d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b310:	50                   	push   eax
c001b311:	e8 84 79 ff ff       	call   c0012c9a <File::tell(unsigned long long*)>
c001b316:	83 c4 10             	add    esp,0x10
c001b319:	85 c0                	test   eax,eax
c001b31b:	0f 95 c0             	setne  al
c001b31e:	31 d2                	xor    edx,edx
c001b320:	0f b6 c0             	movzx  eax,al
c001b323:	f7 d8                	neg    eax
c001b325:	83 d2 00             	adc    edx,0x0
c001b328:	83 c4 08             	add    esp,0x8
c001b32b:	f7 da                	neg    edx
c001b32d:	5b                   	pop    ebx
c001b32e:	c3                   	ret    
c001b32f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b334:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b339:	83 c4 08             	add    esp,0x8
c001b33c:	5b                   	pop    ebx
c001b33d:	c3                   	ret    

c001b33e <sysCallSize(regs*)>:
c001b33e:	53                   	push   ebx
c001b33f:	83 ec 18             	sub    esp,0x18
c001b342:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b346:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b349:	83 f8 02             	cmp    eax,0x2
c001b34c:	76 53                	jbe    c001b3a1 <sysCallSize(regs*)+0x63>
c001b34e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b353:	76 19                	jbe    c001b36e <sysCallSize(regs*)+0x30>
c001b355:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b358:	31 d2                	xor    edx,edx
c001b35a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b360:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b367:	31 c0                	xor    eax,eax
c001b369:	83 c4 18             	add    esp,0x18
c001b36c:	5b                   	pop    ebx
c001b36d:	c3                   	ret    
c001b36e:	83 ec 0c             	sub    esp,0xc
c001b371:	50                   	push   eax
c001b372:	e8 f8 5c ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b377:	83 c4 0c             	add    esp,0xc
c001b37a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b37e:	52                   	push   edx
c001b37f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b382:	50                   	push   eax
c001b383:	e8 aa 7a ff ff       	call   c0012e32 <File::stat(unsigned long long*, bool*)>
c001b388:	83 c4 10             	add    esp,0x10
c001b38b:	85 c0                	test   eax,eax
c001b38d:	0f 95 c0             	setne  al
c001b390:	31 d2                	xor    edx,edx
c001b392:	0f b6 c0             	movzx  eax,al
c001b395:	f7 d8                	neg    eax
c001b397:	83 d2 00             	adc    edx,0x0
c001b39a:	83 c4 18             	add    esp,0x18
c001b39d:	f7 da                	neg    edx
c001b39f:	5b                   	pop    ebx
c001b3a0:	c3                   	ret    
c001b3a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3ab:	83 c4 18             	add    esp,0x18
c001b3ae:	5b                   	pop    ebx
c001b3af:	c3                   	ret    

c001b3b0 <sysCallSizeFromFilename(regs*)>:
c001b3b0:	57                   	push   edi
c001b3b1:	56                   	push   esi
c001b3b2:	53                   	push   ebx
c001b3b3:	83 ec 20             	sub    esp,0x20
c001b3b6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b3ba:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b3bd:	83 fb 02             	cmp    ebx,0x2
c001b3c0:	0f 86 88 00 00 00    	jbe    c001b44e <sysCallSizeFromFilename(regs*)+0x9e>
c001b3c6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b3cc:	76 1b                	jbe    c001b3e9 <sysCallSizeFromFilename(regs*)+0x39>
c001b3ce:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b3d1:	31 d2                	xor    edx,edx
c001b3d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3e0:	83 c4 20             	add    esp,0x20
c001b3e3:	31 c0                	xor    eax,eax
c001b3e5:	5b                   	pop    ebx
c001b3e6:	5e                   	pop    esi
c001b3e7:	5f                   	pop    edi
c001b3e8:	c3                   	ret    
c001b3e9:	83 ec 0c             	sub    esp,0xc
c001b3ec:	68 14 01 00 00       	push   0x114
c001b3f1:	e8 a6 41 ff ff       	call   c000f59c <malloc>
c001b3f6:	83 c4 0c             	add    esp,0xc
c001b3f9:	89 c7                	mov    edi,eax
c001b3fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b400:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b403:	53                   	push   ebx
c001b404:	57                   	push   edi
c001b405:	e8 18 77 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b411:	50                   	push   eax
c001b412:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b415:	57                   	push   edi
c001b416:	e8 17 7a ff ff       	call   c0012e32 <File::stat(unsigned long long*, bool*)>
c001b41b:	83 c4 10             	add    esp,0x10
c001b41e:	85 ff                	test   edi,edi
c001b420:	74 14                	je     c001b436 <sysCallSizeFromFilename(regs*)+0x86>
c001b422:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b426:	8b 17                	mov    edx,DWORD PTR [edi]
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	57                   	push   edi
c001b42c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b436:	85 c0                	test   eax,eax
c001b438:	0f 95 c0             	setne  al
c001b43b:	31 d2                	xor    edx,edx
c001b43d:	0f b6 c0             	movzx  eax,al
c001b440:	f7 d8                	neg    eax
c001b442:	83 d2 00             	adc    edx,0x0
c001b445:	83 c4 20             	add    esp,0x20
c001b448:	f7 da                	neg    edx
c001b44a:	5b                   	pop    ebx
c001b44b:	5e                   	pop    esi
c001b44c:	5f                   	pop    edi
c001b44d:	c3                   	ret    
c001b44e:	83 c4 20             	add    esp,0x20
c001b451:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b456:	5b                   	pop    ebx
c001b457:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b45c:	5e                   	pop    esi
c001b45d:	5f                   	pop    edi
c001b45e:	c3                   	ret    

c001b45f <sysCallClose(regs*)>:
c001b45f:	53                   	push   ebx
c001b460:	83 ec 08             	sub    esp,0x8
c001b463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b467:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b46a:	83 f8 02             	cmp    eax,0x2
c001b46d:	76 41                	jbe    c001b4b0 <sysCallClose(regs*)+0x51>
c001b46f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b475:	83 fa 01             	cmp    edx,0x1
c001b478:	76 2d                	jbe    c001b4a7 <sysCallClose(regs*)+0x48>
c001b47a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b47f:	77 2f                	ja     c001b4b0 <sysCallClose(regs*)+0x51>
c001b481:	83 ec 0c             	sub    esp,0xc
c001b484:	50                   	push   eax
c001b485:	e8 e5 5b ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b48a:	89 c3                	mov    ebx,eax
c001b48c:	89 04 24             	mov    DWORD PTR [esp],eax
c001b48f:	e8 50 77 ff ff       	call   c0012be4 <File::close()>
c001b494:	83 c4 10             	add    esp,0x10
c001b497:	85 db                	test   ebx,ebx
c001b499:	74 0c                	je     c001b4a7 <sysCallClose(regs*)+0x48>
c001b49b:	83 ec 0c             	sub    esp,0xc
c001b49e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4a0:	53                   	push   ebx
c001b4a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4a4:	83 c4 10             	add    esp,0x10
c001b4a7:	31 c0                	xor    eax,eax
c001b4a9:	31 d2                	xor    edx,edx
c001b4ab:	83 c4 08             	add    esp,0x8
c001b4ae:	5b                   	pop    ebx
c001b4af:	c3                   	ret    
c001b4b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4ba:	83 c4 08             	add    esp,0x8
c001b4bd:	5b                   	pop    ebx
c001b4be:	c3                   	ret    

c001b4bf <sysCallOpenDir(regs*)>:
c001b4bf:	56                   	push   esi
c001b4c0:	53                   	push   ebx
c001b4c1:	53                   	push   ebx
c001b4c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4c6:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b4c9:	85 f6                	test   esi,esi
c001b4cb:	74 59                	je     c001b526 <sysCallOpenDir(regs*)+0x67>
c001b4cd:	83 ec 0c             	sub    esp,0xc
c001b4d0:	68 14 01 00 00       	push   0x114
c001b4d5:	e8 c2 40 ff ff       	call   c000f59c <malloc>
c001b4da:	83 c4 0c             	add    esp,0xc
c001b4dd:	89 c6                	mov    esi,eax
c001b4df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4ea:	56                   	push   esi
c001b4eb:	e8 de 7a ff ff       	call   c0012fce <Directory::Directory(char const*, Process*)>
c001b4f0:	83 c4 10             	add    esp,0x10
c001b4f3:	85 f6                	test   esi,esi
c001b4f5:	74 2f                	je     c001b526 <sysCallOpenDir(regs*)+0x67>
c001b4f7:	83 ec 0c             	sub    esp,0xc
c001b4fa:	56                   	push   esi
c001b4fb:	e8 32 7b ff ff       	call   c0013032 <Directory::open()>
c001b500:	83 c4 10             	add    esp,0x10
c001b503:	85 c0                	test   eax,eax
c001b505:	75 1f                	jne    c001b526 <sysCallOpenDir(regs*)+0x67>
c001b507:	83 ec 0c             	sub    esp,0xc
c001b50a:	56                   	push   esi
c001b50b:	e8 6a 58 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001b510:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	89 02                	mov    DWORD PTR [edx],eax
c001b518:	c1 f8 1f             	sar    eax,0x1f
c001b51b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b51e:	31 c0                	xor    eax,eax
c001b520:	59                   	pop    ecx
c001b521:	31 d2                	xor    edx,edx
c001b523:	5b                   	pop    ebx
c001b524:	5e                   	pop    esi
c001b525:	c3                   	ret    
c001b526:	59                   	pop    ecx
c001b527:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b52c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b531:	5b                   	pop    ebx
c001b532:	5e                   	pop    esi
c001b533:	c3                   	ret    

c001b534 <sysCallCloseDir(regs*)>:
c001b534:	53                   	push   ebx
c001b535:	83 ec 08             	sub    esp,0x8
c001b538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b53c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b53f:	8d 50 fd             	lea    edx,[eax-0x3]
c001b542:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b548:	77 2f                	ja     c001b579 <sysCallCloseDir(regs*)+0x45>
c001b54a:	83 ec 0c             	sub    esp,0xc
c001b54d:	50                   	push   eax
c001b54e:	e8 1c 5b ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b553:	89 c3                	mov    ebx,eax
c001b555:	89 04 24             	mov    DWORD PTR [esp],eax
c001b558:	e8 31 7b ff ff       	call   c001308e <Directory::close()>
c001b55d:	83 c4 10             	add    esp,0x10
c001b560:	85 db                	test   ebx,ebx
c001b562:	74 0c                	je     c001b570 <sysCallCloseDir(regs*)+0x3c>
c001b564:	83 ec 0c             	sub    esp,0xc
c001b567:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b569:	53                   	push   ebx
c001b56a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b56d:	83 c4 10             	add    esp,0x10
c001b570:	31 c0                	xor    eax,eax
c001b572:	31 d2                	xor    edx,edx
c001b574:	83 c4 08             	add    esp,0x8
c001b577:	5b                   	pop    ebx
c001b578:	c3                   	ret    
c001b579:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b57e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b583:	83 c4 08             	add    esp,0x8
c001b586:	5b                   	pop    ebx
c001b587:	c3                   	ret    

c001b588 <sysCallMakeDir(regs*)>:
c001b588:	56                   	push   esi
c001b589:	53                   	push   ebx
c001b58a:	83 ec 10             	sub    esp,0x10
c001b58d:	68 14 01 00 00       	push   0x114
c001b592:	e8 05 40 ff ff       	call   c000f59c <malloc>
c001b597:	83 c4 0c             	add    esp,0xc
c001b59a:	89 c3                	mov    ebx,eax
c001b59c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5a1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5a8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5ab:	53                   	push   ebx
c001b5ac:	e8 1d 7a ff ff       	call   c0012fce <Directory::Directory(char const*, Process*)>
c001b5b1:	83 c4 10             	add    esp,0x10
c001b5b4:	85 db                	test   ebx,ebx
c001b5b6:	74 32                	je     c001b5ea <sysCallMakeDir(regs*)+0x62>
c001b5b8:	83 ec 0c             	sub    esp,0xc
c001b5bb:	53                   	push   ebx
c001b5bc:	e8 51 7c ff ff       	call   c0013212 <Directory::create()>
c001b5c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5c4:	89 c6                	mov    esi,eax
c001b5c6:	e8 c3 7a ff ff       	call   c001308e <Directory::close()>
c001b5cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5d3:	83 c4 10             	add    esp,0x10
c001b5d6:	31 c0                	xor    eax,eax
c001b5d8:	59                   	pop    ecx
c001b5d9:	85 f6                	test   esi,esi
c001b5db:	5b                   	pop    ebx
c001b5dc:	0f 95 c0             	setne  al
c001b5df:	5e                   	pop    esi
c001b5e0:	31 d2                	xor    edx,edx
c001b5e2:	f7 d8                	neg    eax
c001b5e4:	83 d2 00             	adc    edx,0x0
c001b5e7:	f7 da                	neg    edx
c001b5e9:	c3                   	ret    
c001b5ea:	59                   	pop    ecx
c001b5eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5f5:	5b                   	pop    ebx
c001b5f6:	5e                   	pop    esi
c001b5f7:	c3                   	ret    

c001b5f8 <sysCallWait(regs*)>:
c001b5f8:	83 ec 10             	sub    esp,0x10
c001b5fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5ff:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b602:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b605:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b608:	e8 b1 24 00 00       	call   c001dabe <waitTask(int, int*, int)>
c001b60d:	83 c4 1c             	add    esp,0x1c
c001b610:	99                   	cdq    
c001b611:	c3                   	ret    

c001b612 <sysCallNotImpl(regs*)>:
c001b612:	83 ec 18             	sub    esp,0x18
c001b615:	68 79 b6 02 c0       	push   0xc002b679
c001b61a:	e8 10 e7 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001b61f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b624:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b629:	83 c4 1c             	add    esp,0x1c
c001b62c:	c3                   	ret    

c001b62d <sysPanic(regs*)>:
c001b62d:	83 ec 18             	sub    esp,0x18
c001b630:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b634:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b637:	e8 f3 e6 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001b63c:	b8 01 00 00 00       	mov    eax,0x1
c001b641:	31 d2                	xor    edx,edx
c001b643:	83 c4 1c             	add    esp,0x1c
c001b646:	c3                   	ret    

c001b647 <sysCallRmdir(regs*)>:
c001b647:	56                   	push   esi
c001b648:	53                   	push   ebx
c001b649:	83 ec 20             	sub    esp,0x20
c001b64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b650:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b653:	68 14 01 00 00       	push   0x114
c001b658:	e8 3f 3f ff ff       	call   c000f59c <malloc>
c001b65d:	83 c4 0c             	add    esp,0xc
c001b660:	89 c3                	mov    ebx,eax
c001b662:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b667:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b66a:	56                   	push   esi
c001b66b:	53                   	push   ebx
c001b66c:	e8 b1 74 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001b671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b674:	e8 85 76 ff ff       	call   c0012cfe <File::unlink()>
c001b679:	83 c4 10             	add    esp,0x10
c001b67c:	85 db                	test   ebx,ebx
c001b67e:	74 14                	je     c001b694 <sysCallRmdir(regs*)+0x4d>
c001b680:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b684:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b686:	83 ec 0c             	sub    esp,0xc
c001b689:	53                   	push   ebx
c001b68a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b694:	85 c0                	test   eax,eax
c001b696:	0f 95 c0             	setne  al
c001b699:	31 d2                	xor    edx,edx
c001b69b:	0f b6 c0             	movzx  eax,al
c001b69e:	f7 d8                	neg    eax
c001b6a0:	83 d2 00             	adc    edx,0x0
c001b6a3:	83 c4 14             	add    esp,0x14
c001b6a6:	f7 da                	neg    edx
c001b6a8:	5b                   	pop    ebx
c001b6a9:	5e                   	pop    esi
c001b6aa:	c3                   	ret    

c001b6ab <sysCallUnlink(regs*)>:
c001b6ab:	56                   	push   esi
c001b6ac:	53                   	push   ebx
c001b6ad:	83 ec 20             	sub    esp,0x20
c001b6b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6b4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b6b7:	68 14 01 00 00       	push   0x114
c001b6bc:	e8 db 3e ff ff       	call   c000f59c <malloc>
c001b6c1:	83 c4 0c             	add    esp,0xc
c001b6c4:	89 c3                	mov    ebx,eax
c001b6c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6cb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6ce:	56                   	push   esi
c001b6cf:	53                   	push   ebx
c001b6d0:	e8 4d 74 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001b6d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6d8:	e8 21 76 ff ff       	call   c0012cfe <File::unlink()>
c001b6dd:	83 c4 10             	add    esp,0x10
c001b6e0:	85 db                	test   ebx,ebx
c001b6e2:	74 14                	je     c001b6f8 <sysCallUnlink(regs*)+0x4d>
c001b6e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6ea:	83 ec 0c             	sub    esp,0xc
c001b6ed:	53                   	push   ebx
c001b6ee:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6f8:	85 c0                	test   eax,eax
c001b6fa:	0f 95 c0             	setne  al
c001b6fd:	31 d2                	xor    edx,edx
c001b6ff:	0f b6 c0             	movzx  eax,al
c001b702:	f7 d8                	neg    eax
c001b704:	83 d2 00             	adc    edx,0x0
c001b707:	83 c4 14             	add    esp,0x14
c001b70a:	f7 da                	neg    edx
c001b70c:	5b                   	pop    ebx
c001b70d:	5e                   	pop    esi
c001b70e:	c3                   	ret    

c001b70f <sysCallGetArgv(regs*)>:
c001b70f:	83 ec 0c             	sub    esp,0xc
c001b712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b716:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b719:	85 c0                	test   eax,eax
c001b71b:	78 2b                	js     c001b748 <sysCallGetArgv(regs*)+0x39>
c001b71d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b723:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b726:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b72c:	7d 1a                	jge    c001b748 <sysCallGetArgv(regs*)+0x39>
c001b72e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b735:	85 c0                	test   eax,eax
c001b737:	74 17                	je     c001b750 <sysCallGetArgv(regs*)+0x41>
c001b739:	83 ec 08             	sub    esp,0x8
c001b73c:	50                   	push   eax
c001b73d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b740:	e8 c7 50 fe ff       	call   c000080c <strcpy>
c001b745:	83 c4 10             	add    esp,0x10
c001b748:	31 c0                	xor    eax,eax
c001b74a:	31 d2                	xor    edx,edx
c001b74c:	83 c4 0c             	add    esp,0xc
c001b74f:	c3                   	ret    
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	31 d2                	xor    edx,edx
c001b757:	83 c4 0c             	add    esp,0xc
c001b75a:	c3                   	ret    

c001b75b <sysCallTTYName(regs*)>:
c001b75b:	56                   	push   esi
c001b75c:	53                   	push   ebx
c001b75d:	53                   	push   ebx
c001b75e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b762:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b765:	85 c0                	test   eax,eax
c001b767:	74 5f                	je     c001b7c8 <sysCallTTYName(regs*)+0x6d>
c001b769:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b76c:	83 f8 02             	cmp    eax,0x2
c001b76f:	77 3e                	ja     c001b7af <sysCallTTYName(regs*)+0x54>
c001b771:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b776:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b779:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b77f:	85 db                	test   ebx,ebx
c001b781:	74 45                	je     c001b7c8 <sysCallTTYName(regs*)+0x6d>
c001b783:	83 ec 0c             	sub    esp,0xc
c001b786:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b788:	53                   	push   ebx
c001b789:	ff 10                	call   DWORD PTR [eax]
c001b78b:	83 c4 10             	add    esp,0x10
c001b78e:	84 c0                	test   al,al
c001b790:	74 41                	je     c001b7d3 <sysCallTTYName(regs*)+0x78>
c001b792:	83 ec 08             	sub    esp,0x8
c001b795:	81 c3 82 00 00 00    	add    ebx,0x82
c001b79b:	53                   	push   ebx
c001b79c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b79f:	e8 68 50 fe ff       	call   c000080c <strcpy>
c001b7a4:	83 c4 10             	add    esp,0x10
c001b7a7:	31 c0                	xor    eax,eax
c001b7a9:	59                   	pop    ecx
c001b7aa:	31 d2                	xor    edx,edx
c001b7ac:	5b                   	pop    ebx
c001b7ad:	5e                   	pop    esi
c001b7ae:	c3                   	ret    
c001b7af:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7b4:	74 bb                	je     c001b771 <sysCallTTYName(regs*)+0x16>
c001b7b6:	83 ec 0c             	sub    esp,0xc
c001b7b9:	50                   	push   eax
c001b7ba:	e8 b0 58 ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b7bf:	83 c4 10             	add    esp,0x10
c001b7c2:	89 c3                	mov    ebx,eax
c001b7c4:	85 db                	test   ebx,ebx
c001b7c6:	75 bb                	jne    c001b783 <sysCallTTYName(regs*)+0x28>
c001b7c8:	59                   	pop    ecx
c001b7c9:	b8 01 00 00 00       	mov    eax,0x1
c001b7ce:	31 d2                	xor    edx,edx
c001b7d0:	5b                   	pop    ebx
c001b7d1:	5e                   	pop    esi
c001b7d2:	c3                   	ret    
c001b7d3:	59                   	pop    ecx
c001b7d4:	b8 02 00 00 00       	mov    eax,0x2
c001b7d9:	31 d2                	xor    edx,edx
c001b7db:	5b                   	pop    ebx
c001b7dc:	5e                   	pop    esi
c001b7dd:	c3                   	ret    

c001b7de <sysCallUSleep(regs*)>:
c001b7de:	83 ec 14             	sub    esp,0x14
c001b7e1:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b7e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7ea:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b7f1:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b7f4:	01 ca                	add    edx,ecx
c001b7f6:	52                   	push   edx
c001b7f7:	50                   	push   eax
c001b7f8:	e8 98 23 00 00       	call   c001db95 <nanoSleep(unsigned long long)>
c001b7fd:	31 c0                	xor    eax,eax
c001b7ff:	31 d2                	xor    edx,edx
c001b801:	83 c4 1c             	add    esp,0x1c
c001b804:	c3                   	ret    

c001b805 <sysCallSpawn(regs*)>:
c001b805:	56                   	push   esi
c001b806:	53                   	push   ebx
c001b807:	50                   	push   eax
c001b808:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b80c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b80f:	85 c0                	test   eax,eax
c001b811:	75 08                	jne    c001b81b <sysCallSpawn(regs*)+0x16>
c001b813:	59                   	pop    ecx
c001b814:	31 c0                	xor    eax,eax
c001b816:	31 d2                	xor    edx,edx
c001b818:	5b                   	pop    ebx
c001b819:	5e                   	pop    esi
c001b81a:	c3                   	ret    
c001b81b:	83 ec 0c             	sub    esp,0xc
c001b81e:	68 3f 07 00 00       	push   0x73f
c001b823:	e8 74 3d ff ff       	call   c000f59c <malloc>
c001b828:	83 c4 10             	add    esp,0x10
c001b82b:	89 c6                	mov    esi,eax
c001b82d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b830:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b833:	85 c0                	test   eax,eax
c001b835:	75 32                	jne    c001b869 <sysCallSpawn(regs*)+0x64>
c001b837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b83c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b83f:	52                   	push   edx
c001b840:	50                   	push   eax
c001b841:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b844:	56                   	push   esi
c001b845:	e8 70 1a 00 00       	call   c001d2ba <Process::Process(char const*, Process*, char**)>
c001b84a:	83 c4 10             	add    esp,0x10
c001b84d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b854:	75 bd                	jne    c001b813 <sysCallSpawn(regs*)+0xe>
c001b856:	83 ec 0c             	sub    esp,0xc
c001b859:	56                   	push   esi
c001b85a:	e8 3d 1f 00 00       	call   c001d79c <Process::createUserThread()>
c001b85f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	99                   	cdq    
c001b865:	59                   	pop    ecx
c001b866:	5b                   	pop    ebx
c001b867:	5e                   	pop    esi
c001b868:	c3                   	ret    
c001b869:	31 c0                	xor    eax,eax
c001b86b:	eb d2                	jmp    c001b83f <sysCallSpawn(regs*)+0x3a>

c001b86d <sysCallGetEnv(regs*)>:
c001b86d:	57                   	push   edi
c001b86e:	56                   	push   esi
c001b86f:	53                   	push   ebx
c001b870:	83 ec 1c             	sub    esp,0x1c
c001b873:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b87c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b87f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b882:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b885:	e8 f1 e3 ff ff       	call   c0019c7b <Krnl::getProcessTotalEnvCount(Process*)>
c001b88a:	83 c4 10             	add    esp,0x10
c001b88d:	39 c7                	cmp    edi,eax
c001b88f:	7c 14                	jl     c001b8a5 <sysCallGetEnv(regs*)+0x38>
c001b891:	85 f6                	test   esi,esi
c001b893:	75 0b                	jne    c001b8a0 <sysCallGetEnv(regs*)+0x33>
c001b895:	83 c4 10             	add    esp,0x10
c001b898:	31 c0                	xor    eax,eax
c001b89a:	5b                   	pop    ebx
c001b89b:	31 d2                	xor    edx,edx
c001b89d:	5e                   	pop    esi
c001b89e:	5f                   	pop    edi
c001b89f:	c3                   	ret    
c001b8a0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8a3:	eb f0                	jmp    c001b895 <sysCallGetEnv(regs*)+0x28>
c001b8a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8a9:	52                   	push   edx
c001b8aa:	57                   	push   edi
c001b8ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8b1:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b8b4:	50                   	push   eax
c001b8b5:	e8 e1 e3 ff ff       	call   c0019c9b <Krnl::getProcessEnvPair(Process*, int)>
c001b8ba:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b8c5:	83 c4 0c             	add    esp,0xc
c001b8c8:	85 c9                	test   ecx,ecx
c001b8ca:	75 23                	jne    c001b8ef <sysCallGetEnv(regs*)+0x82>
c001b8cc:	83 ec 0c             	sub    esp,0xc
c001b8cf:	50                   	push   eax
c001b8d0:	e8 97 4e fe ff       	call   c000076c <strlen>
c001b8d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b8d8:	89 c3                	mov    ebx,eax
c001b8da:	e8 8d 4e fe ff       	call   c000076c <strlen>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b8e6:	83 c4 10             	add    esp,0x10
c001b8e9:	31 d2                	xor    edx,edx
c001b8eb:	5b                   	pop    ebx
c001b8ec:	5e                   	pop    esi
c001b8ed:	5f                   	pop    edi
c001b8ee:	c3                   	ret    
c001b8ef:	83 ec 08             	sub    esp,0x8
c001b8f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8f5:	50                   	push   eax
c001b8f6:	56                   	push   esi
c001b8f7:	e8 10 4f fe ff       	call   c000080c <strcpy>
c001b8fc:	58                   	pop    eax
c001b8fd:	5a                   	pop    edx
c001b8fe:	68 93 b6 02 c0       	push   0xc002b693
c001b903:	56                   	push   esi
c001b904:	e8 43 50 fe ff       	call   c000094c <strcat>
c001b909:	59                   	pop    ecx
c001b90a:	5b                   	pop    ebx
c001b90b:	57                   	push   edi
c001b90c:	56                   	push   esi
c001b90d:	e8 3a 50 fe ff       	call   c000094c <strcat>
c001b912:	83 c4 10             	add    esp,0x10
c001b915:	e9 7b ff ff ff       	jmp    c001b895 <sysCallGetEnv(regs*)+0x28>

c001b91a <sysAppSettings(regs*)>:
c001b91a:	57                   	push   edi
c001b91b:	56                   	push   esi
c001b91c:	56                   	push   esi
c001b91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b921:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b924:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b92a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b92f:	66 3d c0 09          	cmp    ax,0x9c0
c001b933:	75 2e                	jne    c001b963 <sysAppSettings(regs*)+0x49>
c001b935:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b93b:	83 e0 1f             	and    eax,0x1f
c001b93e:	3c 01                	cmp    al,0x1
c001b940:	74 2c                	je     c001b96e <sysAppSettings(regs*)+0x54>
c001b942:	3c 07                	cmp    al,0x7
c001b944:	0f 84 b3 00 00 00    	je     c001b9fd <sysAppSettings(regs*)+0xe3>
c001b94a:	84 c0                	test   al,al
c001b94c:	0f 84 d2 00 00 00    	je     c001ba24 <sysAppSettings(regs*)+0x10a>
c001b952:	3c 08                	cmp    al,0x8
c001b954:	74 63                	je     c001b9b9 <sysAppSettings(regs*)+0x9f>
c001b956:	59                   	pop    ecx
c001b957:	0f b6 c0             	movzx  eax,al
c001b95a:	5e                   	pop    esi
c001b95b:	05 e8 03 00 00       	add    eax,0x3e8
c001b960:	5f                   	pop    edi
c001b961:	99                   	cdq    
c001b962:	c3                   	ret    
c001b963:	b8 01 00 00 00       	mov    eax,0x1
c001b968:	59                   	pop    ecx
c001b969:	31 d2                	xor    edx,edx
c001b96b:	5e                   	pop    esi
c001b96c:	5f                   	pop    edi
c001b96d:	c3                   	ret    
c001b96e:	50                   	push   eax
c001b96f:	68 00 01 00 00       	push   0x100
c001b974:	6a 00                	push   0x0
c001b976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97e:	83 c0 0c             	add    eax,0xc
c001b981:	50                   	push   eax
c001b982:	e8 c9 4d fe ff       	call   c0000750 <memset>
c001b987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98c:	b9 ff 00 00 00       	mov    ecx,0xff
c001b991:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b994:	83 c7 0c             	add    edi,0xc
c001b997:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b999:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99e:	5a                   	pop    edx
c001b99f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a2:	59                   	pop    ecx
c001b9a3:	8d 50 0c             	lea    edx,[eax+0xc]
c001b9a6:	52                   	push   edx
c001b9a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9ad:	e8 e8 47 ff ff       	call   c001019a <VgaText::setTitle(char*)>
c001b9b2:	83 c4 10             	add    esp,0x10
c001b9b5:	31 c0                	xor    eax,eax
c001b9b7:	eb af                	jmp    c001b968 <sysAppSettings(regs*)+0x4e>
c001b9b9:	83 ec 08             	sub    esp,0x8
c001b9bc:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b9c2:	83 e0 0f             	and    eax,0xf
c001b9c5:	50                   	push   eax
c001b9c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9d4:	e8 b1 47 ff ff       	call   c001018a <VgaText::setTitleColour(VgaColour)>
c001b9d9:	5f                   	pop    edi
c001b9da:	58                   	pop    eax
c001b9db:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b9e1:	c1 e8 04             	shr    eax,0x4
c001b9e4:	83 e0 0f             	and    eax,0xf
c001b9e7:	50                   	push   eax
c001b9e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9f6:	e8 7f 47 ff ff       	call   c001017a <VgaText::setTitleTextColour(VgaColour)>
c001b9fb:	eb b5                	jmp    c001b9b2 <sysAppSettings(regs*)+0x98>
c001b9fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba02:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba05:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ba0b:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001ba11:	c0 e8 06             	shr    al,0x6
c001ba14:	83 e0 01             	and    eax,0x1
c001ba17:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001ba1d:	31 c0                	xor    eax,eax
c001ba1f:	e9 44 ff ff ff       	jmp    c001b968 <sysAppSettings(regs*)+0x4e>
c001ba24:	b8 02 00 00 00       	mov    eax,0x2
c001ba29:	e9 3a ff ff ff       	jmp    c001b968 <sysAppSettings(regs*)+0x4e>

c001ba2e <sysSetFatAttrib(regs*)>:
c001ba2e:	57                   	push   edi
c001ba2f:	56                   	push   esi
c001ba30:	53                   	push   ebx
c001ba31:	83 ec 1c             	sub    esp,0x1c
c001ba34:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ba38:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001ba3b:	68 14 01 00 00       	push   0x114
c001ba40:	e8 57 3b ff ff       	call   c000f59c <malloc>
c001ba45:	83 c4 0c             	add    esp,0xc
c001ba48:	89 c3                	mov    ebx,eax
c001ba4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba4f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba52:	57                   	push   edi
c001ba53:	53                   	push   ebx
c001ba54:	e8 c9 70 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001ba59:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba5c:	83 c4 0c             	add    esp,0xc
c001ba5f:	0f b6 d4             	movzx  edx,ah
c001ba62:	0f b6 c0             	movzx  eax,al
c001ba65:	52                   	push   edx
c001ba66:	50                   	push   eax
c001ba67:	53                   	push   ebx
c001ba68:	e8 2b 73 ff ff       	call   c0012d98 <File::chfatattr(unsigned char, unsigned char)>
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	85 db                	test   ebx,ebx
c001ba72:	74 14                	je     c001ba88 <sysSetFatAttrib(regs*)+0x5a>
c001ba74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba78:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	53                   	push   ebx
c001ba7e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba88:	85 c0                	test   eax,eax
c001ba8a:	0f 95 c0             	setne  al
c001ba8d:	31 d2                	xor    edx,edx
c001ba8f:	0f b6 c0             	movzx  eax,al
c001ba92:	f7 d8                	neg    eax
c001ba94:	83 d2 00             	adc    edx,0x0
c001ba97:	83 c4 10             	add    esp,0x10
c001ba9a:	f7 da                	neg    edx
c001ba9c:	5b                   	pop    ebx
c001ba9d:	5e                   	pop    esi
c001ba9e:	5f                   	pop    edi
c001ba9f:	c3                   	ret    

c001baa0 <sysPipe(regs*)>:
c001baa0:	57                   	push   edi
c001baa1:	56                   	push   esi
c001baa2:	53                   	push   ebx
c001baa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa7:	83 ec 0c             	sub    esp,0xc
c001baaa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001baad:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bab0:	6a 20                	push   0x20
c001bab2:	e8 e5 3a ff ff       	call   c000f59c <malloc>
c001bab7:	89 c3                	mov    ebx,eax
c001bab9:	58                   	pop    eax
c001baba:	5a                   	pop    edx
c001babb:	68 00 50 00 00       	push   0x5000
c001bac0:	53                   	push   ebx
c001bac1:	e8 4c 44 ff ff       	call   c000ff12 <Pipe::Pipe(int)>
c001bac6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bac9:	e8 ac 52 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001bace:	89 07                	mov    DWORD PTR [edi],eax
c001bad0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bad3:	e8 a2 52 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001bad8:	83 c4 10             	add    esp,0x10
c001badb:	89 06                	mov    DWORD PTR [esi],eax
c001badd:	31 d2                	xor    edx,edx
c001badf:	5b                   	pop    ebx
c001bae0:	31 c0                	xor    eax,eax
c001bae2:	5e                   	pop    esi
c001bae3:	5f                   	pop    edi
c001bae4:	c3                   	ret    

c001bae5 <sysGetUnixTime(regs*)>:
c001bae5:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001baea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001baf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001baf4:	e9 1b 7a ff ff       	jmp    c0013514 <Clock::timeInSecondsLocal()>

c001baf9 <string_ends_with(char const*, char const*)>:
c001baf9:	57                   	push   edi
c001bafa:	56                   	push   esi
c001bafb:	53                   	push   ebx
c001bafc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bb04:	83 ec 0c             	sub    esp,0xc
c001bb07:	53                   	push   ebx
c001bb08:	e8 5f 4c fe ff       	call   c000076c <strlen>
c001bb0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb10:	89 c6                	mov    esi,eax
c001bb12:	e8 55 4c fe ff       	call   c000076c <strlen>
c001bb17:	83 c4 10             	add    esp,0x10
c001bb1a:	39 c6                	cmp    esi,eax
c001bb1c:	7d 06                	jge    c001bb24 <string_ends_with(char const*, char const*)+0x2b>
c001bb1e:	5b                   	pop    ebx
c001bb1f:	31 c0                	xor    eax,eax
c001bb21:	5e                   	pop    esi
c001bb22:	5f                   	pop    edi
c001bb23:	c3                   	ret    
c001bb24:	83 ec 08             	sub    esp,0x8
c001bb27:	29 c6                	sub    esi,eax
c001bb29:	57                   	push   edi
c001bb2a:	01 f3                	add    ebx,esi
c001bb2c:	53                   	push   ebx
c001bb2d:	e8 66 4d fe ff       	call   c0000898 <strcmp>
c001bb32:	83 c4 10             	add    esp,0x10
c001bb35:	85 c0                	test   eax,eax
c001bb37:	5b                   	pop    ebx
c001bb38:	0f 94 c0             	sete   al
c001bb3b:	5e                   	pop    esi
c001bb3c:	0f b6 c0             	movzx  eax,al
c001bb3f:	5f                   	pop    edi
c001bb40:	c3                   	ret    

c001bb41 <sysCallOpen(regs*)>:
c001bb41:	56                   	push   esi
c001bb42:	53                   	push   ebx
c001bb43:	81 ec 04 01 00 00    	sub    esp,0x104
c001bb49:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bb50:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bb53:	85 c9                	test   ecx,ecx
c001bb55:	0f 84 ad 01 00 00    	je     c001bd08 <sysCallOpen(regs*)+0x1c7>
c001bb5b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bb5e:	85 c0                	test   eax,eax
c001bb60:	0f 84 a2 01 00 00    	je     c001bd08 <sysCallOpen(regs*)+0x1c7>
c001bb66:	52                   	push   edx
c001bb67:	68 95 b6 02 c0       	push   0xc002b695
c001bb6c:	50                   	push   eax
c001bb6d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bb71:	56                   	push   esi
c001bb72:	e8 01 6e ff ff       	call   c0012978 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb77:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb7a:	e8 ed 4b fe ff       	call   c000076c <strlen>
c001bb7f:	83 c4 10             	add    esp,0x10
c001bb82:	48                   	dec    eax
c001bb83:	74 1d                	je     c001bba2 <sysCallOpen(regs*)+0x61>
c001bb85:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb88:	eb 0f                	jmp    c001bb99 <sysCallOpen(regs*)+0x58>
c001bb8a:	80 fa 3a             	cmp    dl,0x3a
c001bb8d:	74 0f                	je     c001bb9e <sysCallOpen(regs*)+0x5d>
c001bb8f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bb93:	48                   	dec    eax
c001bb94:	74 0c                	je     c001bba2 <sysCallOpen(regs*)+0x61>
c001bb96:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bb99:	80 fa 2e             	cmp    dl,0x2e
c001bb9c:	75 ec                	jne    c001bb8a <sysCallOpen(regs*)+0x49>
c001bb9e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bba2:	83 ec 08             	sub    esp,0x8
c001bba5:	68 99 b6 02 c0       	push   0xc002b699
c001bbaa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbad:	e8 47 ff ff ff       	call   c001baf9 <string_ends_with(char const*, char const*)>
c001bbb2:	83 c4 10             	add    esp,0x10
c001bbb5:	85 c0                	test   eax,eax
c001bbb7:	74 1d                	je     c001bbd6 <sysCallOpen(regs*)+0x95>
c001bbb9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbbc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bbc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbc9:	81 c4 04 01 00 00    	add    esp,0x104
c001bbcf:	31 c0                	xor    eax,eax
c001bbd1:	31 d2                	xor    edx,edx
c001bbd3:	5b                   	pop    ebx
c001bbd4:	5e                   	pop    esi
c001bbd5:	c3                   	ret    
c001bbd6:	83 ec 08             	sub    esp,0x8
c001bbd9:	68 9e b6 02 c0       	push   0xc002b69e
c001bbde:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbe1:	e8 13 ff ff ff       	call   c001baf9 <string_ends_with(char const*, char const*)>
c001bbe6:	83 c4 10             	add    esp,0x10
c001bbe9:	85 c0                	test   eax,eax
c001bbeb:	75 cc                	jne    c001bbb9 <sysCallOpen(regs*)+0x78>
c001bbed:	83 ec 08             	sub    esp,0x8
c001bbf0:	68 9a b6 02 c0       	push   0xc002b69a
c001bbf5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbf8:	e8 9b 4c fe ff       	call   c0000898 <strcmp>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	85 c0                	test   eax,eax
c001bc02:	74 b5                	je     c001bbb9 <sysCallOpen(regs*)+0x78>
c001bc04:	83 ec 08             	sub    esp,0x8
c001bc07:	68 99 b6 02 c0       	push   0xc002b699
c001bc0c:	56                   	push   esi
c001bc0d:	e8 e7 fe ff ff       	call   c001baf9 <string_ends_with(char const*, char const*)>
c001bc12:	83 c4 10             	add    esp,0x10
c001bc15:	85 c0                	test   eax,eax
c001bc17:	75 a0                	jne    c001bbb9 <sysCallOpen(regs*)+0x78>
c001bc19:	83 ec 08             	sub    esp,0x8
c001bc1c:	68 a3 b6 02 c0       	push   0xc002b6a3
c001bc21:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc24:	e8 d0 fe ff ff       	call   c001baf9 <string_ends_with(char const*, char const*)>
c001bc29:	83 c4 10             	add    esp,0x10
c001bc2c:	85 c0                	test   eax,eax
c001bc2e:	0f 85 e7 00 00 00    	jne    c001bd1b <sysCallOpen(regs*)+0x1da>
c001bc34:	83 ec 08             	sub    esp,0x8
c001bc37:	68 a8 b6 02 c0       	push   0xc002b6a8
c001bc3c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc3f:	e8 b5 fe ff ff       	call   c001baf9 <string_ends_with(char const*, char const*)>
c001bc44:	83 c4 10             	add    esp,0x10
c001bc47:	85 c0                	test   eax,eax
c001bc49:	0f 85 cc 00 00 00    	jne    c001bd1b <sysCallOpen(regs*)+0x1da>
c001bc4f:	83 ec 08             	sub    esp,0x8
c001bc52:	68 a4 b6 02 c0       	push   0xc002b6a4
c001bc57:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc5a:	e8 39 4c fe ff       	call   c0000898 <strcmp>
c001bc5f:	83 c4 10             	add    esp,0x10
c001bc62:	85 c0                	test   eax,eax
c001bc64:	0f 84 b1 00 00 00    	je     c001bd1b <sysCallOpen(regs*)+0x1da>
c001bc6a:	83 ec 08             	sub    esp,0x8
c001bc6d:	68 a3 b6 02 c0       	push   0xc002b6a3
c001bc72:	56                   	push   esi
c001bc73:	e8 81 fe ff ff       	call   c001baf9 <string_ends_with(char const*, char const*)>
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	85 c0                	test   eax,eax
c001bc7d:	0f 85 98 00 00 00    	jne    c001bd1b <sysCallOpen(regs*)+0x1da>
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	68 14 01 00 00       	push   0x114
c001bc8b:	e8 0c 39 ff ff       	call   c000f59c <malloc>
c001bc90:	83 c4 0c             	add    esp,0xc
c001bc93:	89 c6                	mov    esi,eax
c001bc95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc9d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bca0:	56                   	push   esi
c001bca1:	e8 7c 6e ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	85 f6                	test   esi,esi
c001bcab:	74 5b                	je     c001bd08 <sysCallOpen(regs*)+0x1c7>
c001bcad:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bcb0:	0f b6 c2             	movzx  eax,dl
c001bcb3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bcb6:	89 d0                	mov    eax,edx
c001bcb8:	83 e0 01             	and    eax,0x1
c001bcbb:	f6 c2 02             	test   dl,0x2
c001bcbe:	74 03                	je     c001bcc3 <sysCallOpen(regs*)+0x182>
c001bcc0:	83 c8 02             	or     eax,0x2
c001bcc3:	f6 c2 04             	test   dl,0x4
c001bcc6:	74 03                	je     c001bccb <sysCallOpen(regs*)+0x18a>
c001bcc8:	83 c8 04             	or     eax,0x4
c001bccb:	f6 c2 08             	test   dl,0x8
c001bcce:	74 03                	je     c001bcd3 <sysCallOpen(regs*)+0x192>
c001bcd0:	83 c8 0a             	or     eax,0xa
c001bcd3:	83 e2 10             	and    edx,0x10
c001bcd6:	74 03                	je     c001bcdb <sysCallOpen(regs*)+0x19a>
c001bcd8:	83 c8 12             	or     eax,0x12
c001bcdb:	83 ec 08             	sub    esp,0x8
c001bcde:	50                   	push   eax
c001bcdf:	56                   	push   esi
c001bce0:	e8 a1 6e ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	85 c0                	test   eax,eax
c001bcea:	75 1c                	jne    c001bd08 <sysCallOpen(regs*)+0x1c7>
c001bcec:	83 ec 0c             	sub    esp,0xc
c001bcef:	56                   	push   esi
c001bcf0:	e8 85 50 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001bcf5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcf8:	83 c4 10             	add    esp,0x10
c001bcfb:	89 02                	mov    DWORD PTR [edx],eax
c001bcfd:	c1 f8 1f             	sar    eax,0x1f
c001bd00:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd03:	e9 c1 fe ff ff       	jmp    c001bbc9 <sysCallOpen(regs*)+0x88>
c001bd08:	81 c4 04 01 00 00    	add    esp,0x104
c001bd0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd13:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd18:	5b                   	pop    ebx
c001bd19:	5e                   	pop    esi
c001bd1a:	c3                   	ret    
c001bd1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd1e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bd24:	e9 99 fe ff ff       	jmp    c001bbc2 <sysCallOpen(regs*)+0x81>

c001bd29 <Sys::loadSyscalls()>:
c001bd29:	c7 05 60 02 03 c0 96 af 01 c0 	mov    DWORD PTR ds:0xc0030260,0xc001af96
c001bd33:	c7 05 64 02 03 c0 8e ab 01 c0 	mov    DWORD PTR ds:0xc0030264,0xc001ab8e
c001bd3d:	c7 05 68 02 03 c0 7c ad 01 c0 	mov    DWORD PTR ds:0xc0030268,0xc001ad7c
c001bd47:	c7 05 6c 02 03 c0 cc ae 01 c0 	mov    DWORD PTR ds:0xc003026c,0xc001aecc
c001bd51:	c7 05 70 02 03 c0 14 ad 01 c0 	mov    DWORD PTR ds:0xc0030270,0xc001ad14
c001bd5b:	c7 05 74 02 03 c0 c5 ab 01 c0 	mov    DWORD PTR ds:0xc0030274,0xc001abc5
c001bd65:	c7 05 78 02 03 c0 a6 ab 01 c0 	mov    DWORD PTR ds:0xc0030278,0xc001aba6
c001bd6f:	c7 05 7c 02 03 c0 d1 ad 01 c0 	mov    DWORD PTR ds:0xc003027c,0xc001add1
c001bd79:	c7 05 84 02 03 c0 5f b4 01 c0 	mov    DWORD PTR ds:0xc0030284,0xc001b45f
c001bd83:	c7 05 80 02 03 c0 41 bb 01 c0 	mov    DWORD PTR ds:0xc0030280,0xc001bb41
c001bd8d:	c7 05 88 02 03 c0 bf b4 01 c0 	mov    DWORD PTR ds:0xc0030288,0xc001b4bf
c001bd97:	c7 05 8c 02 03 c0 a2 b1 01 c0 	mov    DWORD PTR ds:0xc003028c,0xc001b1a2
c001bda1:	c7 05 90 02 03 c0 dc af 01 c0 	mov    DWORD PTR ds:0xc0030290,0xc001afdc
c001bdab:	c7 05 94 02 03 c0 e1 af 01 c0 	mov    DWORD PTR ds:0xc0030294,0xc001afe1
c001bdb5:	c7 05 98 02 03 c0 88 b5 01 c0 	mov    DWORD PTR ds:0xc0030298,0xc001b588
c001bdbf:	c7 05 9c 02 03 c0 34 b5 01 c0 	mov    DWORD PTR ds:0xc003029c,0xc001b534
c001bdc9:	c7 05 a0 02 03 c0 7b b2 01 c0 	mov    DWORD PTR ds:0xc00302a0,0xc001b27b
c001bdd3:	c7 05 a4 02 03 c0 d2 b2 01 c0 	mov    DWORD PTR ds:0xc00302a4,0xc001b2d2
c001bddd:	c7 05 a8 02 03 c0 3e b3 01 c0 	mov    DWORD PTR ds:0xc00302a8,0xc001b33e
c001bde7:	c7 05 ac 02 03 c0 e6 af 01 c0 	mov    DWORD PTR ds:0xc00302ac,0xc001afe6
c001bdf1:	c7 05 b0 02 03 c0 f8 b5 01 c0 	mov    DWORD PTR ds:0xc00302b0,0xc001b5f8
c001bdfb:	c7 05 b4 02 03 c0 12 b6 01 c0 	mov    DWORD PTR ds:0xc00302b4,0xc001b612
c001be05:	c7 05 b8 02 03 c0 12 b6 01 c0 	mov    DWORD PTR ds:0xc00302b8,0xc001b612
c001be0f:	c7 05 bc 02 03 c0 47 b6 01 c0 	mov    DWORD PTR ds:0xc00302bc,0xc001b647
c001be19:	c7 05 c0 02 03 c0 ab b6 01 c0 	mov    DWORD PTR ds:0xc00302c0,0xc001b6ab
c001be23:	c7 05 c4 02 03 c0 f0 af 01 c0 	mov    DWORD PTR ds:0xc00302c4,0xc001aff0
c001be2d:	c7 05 c8 02 03 c0 0f b7 01 c0 	mov    DWORD PTR ds:0xc00302c8,0xc001b70f
c001be37:	c7 05 cc 02 03 c0 5f b1 01 c0 	mov    DWORD PTR ds:0xc00302cc,0xc001b15f
c001be41:	c7 05 d0 02 03 c0 5b b7 01 c0 	mov    DWORD PTR ds:0xc00302d0,0xc001b75b
c001be4b:	c7 05 d4 02 03 c0 21 b2 01 c0 	mov    DWORD PTR ds:0xc00302d4,0xc001b221
c001be55:	c7 05 d8 02 03 c0 de b7 01 c0 	mov    DWORD PTR ds:0xc00302d8,0xc001b7de
c001be5f:	c7 05 dc 02 03 c0 b0 b3 01 c0 	mov    DWORD PTR ds:0xc00302dc,0xc001b3b0
c001be69:	c7 05 e0 02 03 c0 05 b8 01 c0 	mov    DWORD PTR ds:0xc00302e0,0xc001b805
c001be73:	c7 05 e4 02 03 c0 6d b8 01 c0 	mov    DWORD PTR ds:0xc00302e4,0xc001b86d
c001be7d:	c7 05 e8 02 03 c0 1a b9 01 c0 	mov    DWORD PTR ds:0xc00302e8,0xc001b91a
c001be87:	c7 05 ec 02 03 c0 00 b0 01 c0 	mov    DWORD PTR ds:0xc00302ec,0xc001b000
c001be91:	c7 05 f0 02 03 c0 6a b0 01 c0 	mov    DWORD PTR ds:0xc00302f0,0xc001b06a
c001be9b:	c7 05 f4 02 03 c0 b0 b0 01 c0 	mov    DWORD PTR ds:0xc00302f4,0xc001b0b0
c001bea5:	c7 05 f8 02 03 c0 2e ba 01 c0 	mov    DWORD PTR ds:0xc00302f8,0xc001ba2e
c001beaf:	c7 05 fc 02 03 c0 2d b6 01 c0 	mov    DWORD PTR ds:0xc00302fc,0xc001b62d
c001beb9:	c7 05 00 03 03 c0 01 b1 01 c0 	mov    DWORD PTR ds:0xc0030300,0xc001b101
c001bec3:	c7 05 04 03 03 c0 a0 ba 01 c0 	mov    DWORD PTR ds:0xc0030304,0xc001baa0
c001becd:	c7 05 08 03 03 c0 e5 ba 01 c0 	mov    DWORD PTR ds:0xc0030308,0xc001bae5
c001bed7:	c7 05 0c 03 03 c0 6c ac 01 c0 	mov    DWORD PTR ds:0xc003030c,0xc001ac6c
c001bee1:	c7 05 10 03 03 c0 ed ad 01 c0 	mov    DWORD PTR ds:0xc0030310,0xc001aded
c001beeb:	c7 05 14 03 03 c0 82 ae 01 c0 	mov    DWORD PTR ds:0xc0030314,0xc001ae82
c001bef5:	c7 05 18 03 03 c0 58 ab 01 c0 	mov    DWORD PTR ds:0xc0030318,0xc001ab58
c001beff:	c7 05 1c 03 03 c0 34 af 01 c0 	mov    DWORD PTR ds:0xc003031c,0xc001af34
c001bf09:	c7 05 20 03 03 c0 d1 ab 01 c0 	mov    DWORD PTR ds:0xc0030320,0xc001abd1
c001bf13:	c7 05 24 03 03 c0 e8 ab 01 c0 	mov    DWORD PTR ds:0xc0030324,0xc001abe8
c001bf1d:	c3                   	ret    

c001bf1e <Sys::systemCall(regs*, void*)>:
c001bf1e:	53                   	push   ebx
c001bf1f:	83 ec 08             	sub    esp,0x8
c001bf22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf26:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bf29:	83 f8 7f             	cmp    eax,0x7f
c001bf2c:	77 16                	ja     c001bf44 <Sys::systemCall(regs*, void*)+0x26>
c001bf2e:	8b 14 85 60 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfda0]
c001bf35:	85 d2                	test   edx,edx
c001bf37:	74 0b                	je     c001bf44 <Sys::systemCall(regs*, void*)+0x26>
c001bf39:	83 ec 0c             	sub    esp,0xc
c001bf3c:	53                   	push   ebx
c001bf3d:	ff d2                	call   edx
c001bf3f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bf42:	eb 0d                	jmp    c001bf51 <Sys::systemCall(regs*, void*)+0x33>
c001bf44:	52                   	push   edx
c001bf45:	52                   	push   edx
c001bf46:	50                   	push   eax
c001bf47:	68 ad b6 02 c0       	push   0xc002b6ad
c001bf4c:	e8 73 66 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bf59:	31 d2                	xor    edx,edx
c001bf5b:	83 c4 08             	add    esp,0x8
c001bf5e:	5b                   	pop    ebx
c001bf5f:	c3                   	ret    

c001bf60 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bf60:	55                   	push   ebp
c001bf61:	57                   	push   edi
c001bf62:	56                   	push   esi
c001bf63:	53                   	push   ebx
c001bf64:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bf6a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bf71:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001bf78:	85 c0                	test   eax,eax
c001bf7a:	0f 95 c1             	setne  cl
c001bf7d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001bf85:	0f 94 c2             	sete   dl
c001bf88:	84 d1                	test   cl,dl
c001bf8a:	74 23                	je     c001bfaf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bf8c:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bf92:	74 1b                	je     c001bfaf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bf94:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bf9a:	89 da                	mov    edx,ebx
c001bf9c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bfa2:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bfa8:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bfaf:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bfb6:	05 ff 0f 00 00       	add    eax,0xfff
c001bfbb:	83 ec 0c             	sub    esp,0xc
c001bfbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bfc2:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bfc8:	c1 e8 0c             	shr    eax,0xc
c001bfcb:	89 fe                	mov    esi,edi
c001bfcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bfd1:	c1 ee 0c             	shr    esi,0xc
c001bfd4:	6a 01                	push   0x1
c001bfd6:	e8 ea 51 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c001bfdb:	89 c5                	mov    ebp,eax
c001bfdd:	58                   	pop    eax
c001bfde:	5a                   	pop    edx
c001bfdf:	56                   	push   esi
c001bfe0:	68 c1 b6 02 c0       	push   0xc002b6c1
c001bfe5:	e8 da 65 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001bfea:	59                   	pop    ecx
c001bfeb:	58                   	pop    eax
c001bfec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bff0:	68 d3 b6 02 c0       	push   0xc002b6d3
c001bff5:	e8 ca 65 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c003:	0f 86 31 01 00 00    	jbe    c001c13a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c009:	c1 e6 0c             	shl    esi,0xc
c001c00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c00f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c012:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c016:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c01d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c020:	01 df                	add    edi,ebx
c001c022:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c025:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c029:	0f 84 08 01 00 00    	je     c001c137 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c02f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c035:	76 05                	jbe    c001c03c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c037:	bf 00 10 00 00       	mov    edi,0x1000
c001c03c:	83 ec 0c             	sub    esp,0xc
c001c03f:	31 d2                	xor    edx,edx
c001c041:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c048:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c04a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c04e:	50                   	push   eax
c001c04f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c053:	56                   	push   esi
c001c054:	52                   	push   edx
c001c055:	57                   	push   edi
c001c056:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c05d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c060:	83 c4 20             	add    esp,0x20
c001c063:	85 c0                	test   eax,eax
c001c065:	74 0a                	je     c001c071 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c067:	53                   	push   ebx
c001c068:	53                   	push   ebx
c001c069:	50                   	push   eax
c001c06a:	68 e5 b6 02 c0       	push   0xc002b6e5
c001c06f:	eb 0f                	jmp    c001c080 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c071:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c075:	74 20                	je     c001c097 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c077:	51                   	push   ecx
c001c078:	51                   	push   ecx
c001c079:	6a 00                	push   0x0
c001c07b:	68 10 b7 02 c0       	push   0xc002b710
c001c080:	e8 3f 65 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001c085:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c088:	e8 7e 55 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c001c08d:	83 c4 10             	add    esp,0x10
c001c090:	31 c0                	xor    eax,eax
c001c092:	e9 68 01 00 00       	jmp    c001c1ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c097:	fa                   	cli    
c001c098:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001c09e:	e8 9d 38 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c0a3:	6a 07                	push   0x7
c001c0a5:	89 c7                	mov    edi,eax
c001c0a7:	55                   	push   ebp
c001c0a8:	50                   	push   eax
c001c0a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0b1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0b7:	e8 c6 58 ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0bc:	83 c4 0c             	add    esp,0xc
c001c0bf:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c0c6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0cc:	6a 00                	push   0x0
c001c0ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0dc:	e8 fb 56 ff ff       	call   c00117dc <VAS::mapOtherVASIn(bool, VAS*)>
c001c0e1:	58                   	pop    eax
c001c0e2:	5a                   	pop    edx
c001c0e3:	68 07 0c 00 00       	push   0xc07
c001c0e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c0ec:	57                   	push   edi
c001c0ed:	89 ef                	mov    edi,ebp
c001c0ef:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c0f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0fc:	6a 00                	push   0x0
c001c0fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c103:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c106:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c10c:	e8 2d 5c ff ff       	call   c0011d3e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c111:	b9 00 10 00 00       	mov    ecx,0x1000
c001c116:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c118:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001c11d:	83 c4 20             	add    esp,0x20
c001c120:	48                   	dec    eax
c001c121:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001c126:	85 c0                	test   eax,eax
c001c128:	75 01                	jne    c001c12b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c12a:	fb                   	sti    
c001c12b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c132:	e9 df fe ff ff       	jmp    c001c016 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c137:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c13a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c142:	0f 86 a9 00 00 00    	jbe    c001c1f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c148:	fa                   	cli    
c001c149:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001c14f:	51                   	push   ecx
c001c150:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c157:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c15d:	6a 00                	push   0x0
c001c15f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c164:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c167:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c16d:	e8 6a 56 ff ff       	call   c00117dc <VAS::mapOtherVASIn(bool, VAS*)>
c001c172:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c176:	c1 e6 0c             	shl    esi,0xc
c001c179:	01 de                	add    esi,ebx
c001c17b:	83 c4 10             	add    esp,0x10
c001c17e:	39 de                	cmp    esi,ebx
c001c180:	74 61                	je     c001c1e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c182:	e8 b9 37 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c187:	6a 07                	push   0x7
c001c189:	89 c7                	mov    edi,eax
c001c18b:	55                   	push   ebp
c001c18c:	50                   	push   eax
c001c18d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c192:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c195:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c19b:	e8 e2 57 ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1a0:	58                   	pop    eax
c001c1a1:	5a                   	pop    edx
c001c1a2:	68 07 0c 00 00       	push   0xc07
c001c1a7:	53                   	push   ebx
c001c1a8:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c1ae:	57                   	push   edi
c001c1af:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1bc:	6a 00                	push   0x0
c001c1be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1c6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1cc:	e8 6d 5b ff ff       	call   c0011d3e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c1d1:	83 c4 1c             	add    esp,0x1c
c001c1d4:	68 00 10 00 00       	push   0x1000
c001c1d9:	6a 00                	push   0x0
c001c1db:	55                   	push   ebp
c001c1dc:	e8 6f 45 fe ff       	call   c0000750 <memset>
c001c1e1:	eb 98                	jmp    c001c17b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c1e3:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001c1e8:	48                   	dec    eax
c001c1e9:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001c1ee:	75 01                	jne    c001c1f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c1f0:	fb                   	sti    
c001c1f1:	83 ec 0c             	sub    esp,0xc
c001c1f4:	55                   	push   ebp
c001c1f5:	e8 11 54 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c001c1fa:	83 c4 10             	add    esp,0x10
c001c1fd:	b0 01                	mov    al,0x1
c001c1ff:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c205:	5b                   	pop    ebx
c001c206:	5e                   	pop    esi
c001c207:	5f                   	pop    edi
c001c208:	5d                   	pop    ebp
c001c209:	c3                   	ret    

c001c20a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c20a:	55                   	push   ebp
c001c20b:	57                   	push   edi
c001c20c:	56                   	push   esi
c001c20d:	53                   	push   ebx
c001c20e:	83 ec 48             	sub    esp,0x48
c001c211:	68 14 01 00 00       	push   0x114
c001c216:	e8 81 33 ff ff       	call   c000f59c <malloc>
c001c21b:	83 c4 0c             	add    esp,0xc
c001c21e:	89 c6                	mov    esi,eax
c001c220:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c224:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c228:	50                   	push   eax
c001c229:	e8 f4 68 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001c22e:	58                   	pop    eax
c001c22f:	5a                   	pop    edx
c001c230:	6a 01                	push   0x1
c001c232:	56                   	push   esi
c001c233:	e8 4e 69 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	85 c0                	test   eax,eax
c001c23d:	0f 85 47 01 00 00    	jne    c001c38a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c243:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c24b:	83 ec 0c             	sub    esp,0xc
c001c24e:	6a 34                	push   0x34
c001c250:	e8 47 33 ff ff       	call   c000f59c <malloc>
c001c255:	89 c3                	mov    ebx,eax
c001c257:	58                   	pop    eax
c001c258:	8b 06                	mov    eax,DWORD PTR [esi]
c001c25a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c25e:	57                   	push   edi
c001c25f:	53                   	push   ebx
c001c260:	6a 00                	push   0x0
c001c262:	6a 34                	push   0x34
c001c264:	56                   	push   esi
c001c265:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c268:	83 c4 20             	add    esp,0x20
c001c26b:	85 c0                	test   eax,eax
c001c26d:	0f 85 17 01 00 00    	jne    c001c38a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c273:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c279:	0f 85 0b 01 00 00    	jne    c001c38a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c27f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c282:	85 c0                	test   eax,eax
c001c284:	0f 84 00 01 00 00    	je     c001c38a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c28a:	31 d2                	xor    edx,edx
c001c28c:	55                   	push   ebp
c001c28d:	52                   	push   edx
c001c28e:	50                   	push   eax
c001c28f:	56                   	push   esi
c001c290:	e8 af 69 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c295:	83 c4 10             	add    esp,0x10
c001c298:	85 c0                	test   eax,eax
c001c29a:	0f 85 ea 00 00 00    	jne    c001c38a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c2a6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c2aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c2ae:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c2b2:	0f af c2             	imul   eax,edx
c001c2b5:	50                   	push   eax
c001c2b6:	e8 e1 32 ff ff       	call   c000f59c <malloc>
c001c2bb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c2bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2c8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c2cc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c2d0:	0f af c2             	imul   eax,edx
c001c2d3:	99                   	cdq    
c001c2d4:	52                   	push   edx
c001c2d5:	50                   	push   eax
c001c2d6:	56                   	push   esi
c001c2d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2da:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c2dd:	83 c4 20             	add    esp,0x20
c001c2e0:	85 c0                	test   eax,eax
c001c2e2:	0f 84 a2 00 00 00    	je     c001c38a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2e8:	31 d2                	xor    edx,edx
c001c2ea:	51                   	push   ecx
c001c2eb:	52                   	push   edx
c001c2ec:	50                   	push   eax
c001c2ed:	56                   	push   esi
c001c2ee:	e8 51 69 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c2f3:	83 c4 10             	add    esp,0x10
c001c2f6:	85 c0                	test   eax,eax
c001c2f8:	0f 85 8c 00 00 00    	jne    c001c38a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2fe:	83 ec 0c             	sub    esp,0xc
c001c301:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c305:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c309:	31 ed                	xor    ebp,ebp
c001c30b:	0f af c2             	imul   eax,edx
c001c30e:	50                   	push   eax
c001c30f:	e8 88 32 ff ff       	call   c000f59c <malloc>
c001c314:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c316:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c31a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c31d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c321:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c325:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c329:	0f af c2             	imul   eax,edx
c001c32c:	99                   	cdq    
c001c32d:	52                   	push   edx
c001c32e:	50                   	push   eax
c001c32f:	56                   	push   esi
c001c330:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c333:	83 c4 20             	add    esp,0x20
c001c336:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c33e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c342:	0f 86 80 00 00 00    	jbe    c001c3c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c348:	0f b7 fd             	movzx  edi,bp
c001c34b:	c1 e7 05             	shl    edi,0x5
c001c34e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c352:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c355:	75 6b                	jne    c001c3c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c357:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c35a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c35e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c361:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c365:	52                   	push   edx
c001c366:	31 d2                	xor    edx,edx
c001c368:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c36b:	52                   	push   edx
c001c36c:	50                   	push   eax
c001c36d:	56                   	push   esi
c001c36e:	e8 d1 68 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	85 c0                	test   eax,eax
c001c378:	74 17                	je     c001c391 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c37a:	83 ec 0c             	sub    esp,0xc
c001c37d:	68 3c b7 02 c0       	push   0xc002b73c
c001c382:	e8 3d 62 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	31 c0                	xor    eax,eax
c001c38c:	e9 87 00 00 00       	jmp    c001c418 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c391:	83 ec 0c             	sub    esp,0xc
c001c394:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c397:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c39a:	50                   	push   eax
c001c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3a3:	56                   	push   esi
c001c3a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c3a8:	e8 b3 fb ff ff       	call   c001bf60 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c3ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3b1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c3b5:	83 c4 20             	add    esp,0x20
c001c3b8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c3bc:	73 04                	jae    c001c3c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c3be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3c2:	45                   	inc    ebp
c001c3c3:	e9 76 ff ff ff       	jmp    c001c33e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c3c8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c3d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3d4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c3da:	83 ec 0c             	sub    esp,0xc
c001c3dd:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c3e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c3e8:	05 00 10 00 00       	add    eax,0x1000
c001c3ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c3f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3f4:	e8 b3 31 ff ff       	call   c000f5ac <free>
c001c3f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3fc:	e8 ab 31 ff ff       	call   c000f5ac <free>
c001c401:	58                   	pop    eax
c001c402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c406:	e8 a1 31 ff ff       	call   c000f5ac <free>
c001c40b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c40e:	e8 d1 67 ff ff       	call   c0012be4 <File::close()>
c001c413:	83 c4 10             	add    esp,0x10
c001c416:	b0 01                	mov    al,0x1
c001c418:	83 c4 3c             	add    esp,0x3c
c001c41b:	5b                   	pop    ebx
c001c41c:	5e                   	pop    esi
c001c41d:	5f                   	pop    edi
c001c41e:	5d                   	pop    ebp
c001c41f:	c3                   	ret    

c001c420 <Thr::runtimeReferenceHelper()>:
c001c420:	83 ec 18             	sub    esp,0x18
c001c423:	68 44 b7 02 c0       	push   0xc002b744
c001c428:	e8 97 61 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001c42d:	fa                   	cli    
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	eb fe                	jmp    c001c431 <Thr::runtimeReferenceHelper()+0x11>

c001c433 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c433:	57                   	push   edi
c001c434:	56                   	push   esi
c001c435:	53                   	push   ebx
c001c436:	31 db                	xor    ebx,ebx
c001c438:	39 1d 00 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c00,ebx
c001c43e:	7e 3c                	jle    c001c47c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c440:	8b 34 9d 80 0b 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf480]
c001c447:	31 ff                	xor    edi,edi
c001c449:	39 3c 9d 80 0a 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf580],edi
c001c450:	7e 27                	jle    c001c479 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c452:	50                   	push   eax
c001c453:	50                   	push   eax
c001c454:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c458:	8b 06                	mov    eax,DWORD PTR [esi]
c001c45a:	03 04 9d 00 0b 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf500]
c001c461:	50                   	push   eax
c001c462:	e8 31 44 fe ff       	call   c0000898 <strcmp>
c001c467:	83 c4 10             	add    esp,0x10
c001c46a:	85 c0                	test   eax,eax
c001c46c:	75 05                	jne    c001c473 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c46e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c471:	eb 0b                	jmp    c001c47e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c473:	83 c6 10             	add    esi,0x10
c001c476:	47                   	inc    edi
c001c477:	eb d0                	jmp    c001c449 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c479:	43                   	inc    ebx
c001c47a:	eb bc                	jmp    c001c438 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c47c:	31 c0                	xor    eax,eax
c001c47e:	5b                   	pop    ebx
c001c47f:	5e                   	pop    esi
c001c480:	5f                   	pop    edi
c001c481:	c3                   	ret    

c001c482 <Thr::loadKernelSymbolTable(char const*)>:
c001c482:	55                   	push   ebp
c001c483:	57                   	push   edi
c001c484:	56                   	push   esi
c001c485:	53                   	push   ebx
c001c486:	83 ec 68             	sub    esp,0x68
c001c489:	8b 35 50 0c 03 c0    	mov    esi,DWORD PTR ds:0xc0030c50
c001c48f:	68 14 01 00 00       	push   0x114
c001c494:	e8 03 31 ff ff       	call   c000f59c <malloc>
c001c499:	83 c4 0c             	add    esp,0xc
c001c49c:	89 c3                	mov    ebx,eax
c001c49e:	56                   	push   esi
c001c49f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c4a3:	50                   	push   eax
c001c4a4:	e8 79 66 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001c4a9:	5e                   	pop    esi
c001c4aa:	5f                   	pop    edi
c001c4ab:	6a 01                	push   0x1
c001c4ad:	53                   	push   ebx
c001c4ae:	e8 d3 66 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	85 c0                	test   eax,eax
c001c4b8:	74 0a                	je     c001c4c4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c4ba:	83 ec 0c             	sub    esp,0xc
c001c4bd:	68 66 b7 02 c0       	push   0xc002b766
c001c4c2:	eb 34                	jmp    c001c4f8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c4c4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c4cc:	83 ec 0c             	sub    esp,0xc
c001c4cf:	6a 34                	push   0x34
c001c4d1:	e8 c6 30 ff ff       	call   c000f59c <malloc>
c001c4d6:	59                   	pop    ecx
c001c4d7:	89 c7                	mov    edi,eax
c001c4d9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c4dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4df:	56                   	push   esi
c001c4e0:	57                   	push   edi
c001c4e1:	6a 00                	push   0x0
c001c4e3:	6a 34                	push   0x34
c001c4e5:	53                   	push   ebx
c001c4e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4e9:	83 c4 20             	add    esp,0x20
c001c4ec:	85 c0                	test   eax,eax
c001c4ee:	74 17                	je     c001c507 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c4f0:	83 ec 0c             	sub    esp,0xc
c001c4f3:	68 7d b7 02 c0       	push   0xc002b77d
c001c4f8:	e8 32 d8 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001c4fd:	83 c4 10             	add    esp,0x10
c001c500:	31 c0                	xor    eax,eax
c001c502:	e9 31 02 00 00       	jmp    c001c738 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c507:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c50d:	75 e1                	jne    c001c4f0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c50f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c512:	85 c0                	test   eax,eax
c001c514:	74 da                	je     c001c4f0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c516:	52                   	push   edx
c001c517:	31 d2                	xor    edx,edx
c001c519:	52                   	push   edx
c001c51a:	50                   	push   eax
c001c51b:	53                   	push   ebx
c001c51c:	e8 23 67 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c521:	83 c4 10             	add    esp,0x10
c001c524:	85 c0                	test   eax,eax
c001c526:	75 c8                	jne    c001c4f0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c528:	83 ec 0c             	sub    esp,0xc
c001c52b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c52f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c533:	31 ed                	xor    ebp,ebp
c001c535:	0f af c2             	imul   eax,edx
c001c538:	50                   	push   eax
c001c539:	e8 5e 30 ff ff       	call   c000f59c <malloc>
c001c53e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c540:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c544:	89 34 24             	mov    DWORD PTR [esp],esi
c001c547:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c54b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c54f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c553:	0f af c2             	imul   eax,edx
c001c556:	99                   	cdq    
c001c557:	52                   	push   edx
c001c558:	50                   	push   eax
c001c559:	53                   	push   ebx
c001c55a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c55d:	83 c4 20             	add    esp,0x20
c001c560:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c568:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c570:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c578:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c580:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c584:	0f 86 aa 00 00 00    	jbe    c001c634 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c58a:	0f b7 f5             	movzx  esi,bp
c001c58d:	6b f6 28             	imul   esi,esi,0x28
c001c590:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c594:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c597:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c59b:	50                   	push   eax
c001c59c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c5a0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c5a4:	8b 16                	mov    edx,DWORD PTR [esi]
c001c5a6:	6b c0 28             	imul   eax,eax,0x28
c001c5a9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c5ad:	89 d0                	mov    eax,edx
c001c5af:	31 d2                	xor    edx,edx
c001c5b1:	52                   	push   edx
c001c5b2:	50                   	push   eax
c001c5b3:	53                   	push   ebx
c001c5b4:	e8 8b 66 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c5b9:	83 c4 0c             	add    esp,0xc
c001c5bc:	6a 20                	push   0x20
c001c5be:	6a 00                	push   0x0
c001c5c0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c5c4:	52                   	push   edx
c001c5c5:	e8 86 41 fe ff       	call   c0000750 <memset>
c001c5ca:	58                   	pop    eax
c001c5cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5cd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c5d1:	51                   	push   ecx
c001c5d2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c5d6:	52                   	push   edx
c001c5d7:	6a 00                	push   0x0
c001c5d9:	6a 1f                	push   0x1f
c001c5db:	53                   	push   ebx
c001c5dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5df:	83 c4 18             	add    esp,0x18
c001c5e2:	68 94 b7 02 c0       	push   0xc002b794
c001c5e7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c5eb:	52                   	push   edx
c001c5ec:	e8 a7 42 fe ff       	call   c0000898 <strcmp>
c001c5f1:	83 c4 10             	add    esp,0x10
c001c5f4:	85 c0                	test   eax,eax
c001c5f6:	75 0f                	jne    c001c607 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c5f8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c5fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c603:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c607:	50                   	push   eax
c001c608:	50                   	push   eax
c001c609:	68 9c b7 02 c0       	push   0xc002b79c
c001c60e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c612:	50                   	push   eax
c001c613:	e8 80 42 fe ff       	call   c0000898 <strcmp>
c001c618:	83 c4 10             	add    esp,0x10
c001c61b:	85 c0                	test   eax,eax
c001c61d:	75 0f                	jne    c001c62e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c61f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c622:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c62a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c62e:	45                   	inc    ebp
c001c62f:	e9 4c ff ff ff       	jmp    c001c580 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c634:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c639:	75 10                	jne    c001c64b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c63b:	83 ec 0c             	sub    esp,0xc
c001c63e:	68 a4 b7 02 c0       	push   0xc002b7a4
c001c643:	e8 e7 d6 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001c648:	83 c4 10             	add    esp,0x10
c001c64b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c650:	75 10                	jne    c001c662 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c652:	83 ec 0c             	sub    esp,0xc
c001c655:	68 a4 b7 02 c0       	push   0xc002b7a4
c001c65a:	e8 d0 d6 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001c65f:	83 c4 10             	add    esp,0x10
c001c662:	31 d2                	xor    edx,edx
c001c664:	50                   	push   eax
c001c665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c669:	52                   	push   edx
c001c66a:	50                   	push   eax
c001c66b:	53                   	push   ebx
c001c66c:	e8 d3 65 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c671:	5a                   	pop    edx
c001c672:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c676:	e8 21 2f ff ff       	call   c000f59c <malloc>
c001c67b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c67f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c683:	31 c9                	xor    ecx,ecx
c001c685:	5e                   	pop    esi
c001c686:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c688:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c68c:	55                   	push   ebp
c001c68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c691:	51                   	push   ecx
c001c692:	52                   	push   edx
c001c693:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c697:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c69b:	53                   	push   ebx
c001c69c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c69f:	83 c4 14             	add    esp,0x14
c001c6a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6a6:	e8 f1 2e ff ff       	call   c000f59c <malloc>
c001c6ab:	89 c6                	mov    esi,eax
c001c6ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6b2:	56                   	push   esi
c001c6b3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c6b7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c6bb:	51                   	push   ecx
c001c6bc:	52                   	push   edx
c001c6bd:	53                   	push   ebx
c001c6be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6c5:	8b 15 00 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c00
c001c6cb:	83 c4 1c             	add    esp,0x1c
c001c6ce:	c1 e8 04             	shr    eax,0x4
c001c6d1:	89 04 95 80 0a 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf580],eax
c001c6d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c6dc:	31 d2                	xor    edx,edx
c001c6de:	52                   	push   edx
c001c6df:	50                   	push   eax
c001c6e0:	53                   	push   ebx
c001c6e1:	e8 5e 65 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c6e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c6e8:	31 d2                	xor    edx,edx
c001c6ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6ed:	56                   	push   esi
c001c6ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6f2:	52                   	push   edx
c001c6f3:	50                   	push   eax
c001c6f4:	53                   	push   ebx
c001c6f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6f8:	83 c4 14             	add    esp,0x14
c001c6fb:	53                   	push   ebx
c001c6fc:	e8 e3 64 ff ff       	call   c0012be4 <File::close()>
c001c701:	5d                   	pop    ebp
c001c702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c706:	e8 a1 2e ff ff       	call   c000f5ac <free>
c001c70b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c70e:	e8 99 2e ff ff       	call   c000f5ac <free>
c001c713:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001c718:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c71c:	8d 50 01             	lea    edx,[eax+0x1]
c001c71f:	89 0c 85 80 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf480],ecx
c001c726:	89 34 85 00 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf500],esi
c001c72d:	89 15 00 0c 03 c0    	mov    DWORD PTR ds:0xc0030c00,edx
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	b0 01                	mov    al,0x1
c001c738:	83 c4 5c             	add    esp,0x5c
c001c73b:	5b                   	pop    ebx
c001c73c:	5e                   	pop    esi
c001c73d:	5f                   	pop    edi
c001c73e:	5d                   	pop    ebp
c001c73f:	c3                   	ret    

c001c740 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c740:	55                   	push   ebp
c001c741:	57                   	push   edi
c001c742:	56                   	push   esi
c001c743:	53                   	push   ebx
c001c744:	81 ec 68 03 00 00    	sub    esp,0x368
c001c74a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c751:	8b 1d 50 0c 03 c0    	mov    ebx,DWORD PTR ds:0xc0030c50
c001c757:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c75b:	68 14 01 00 00       	push   0x114
c001c760:	e8 37 2e ff ff       	call   c000f59c <malloc>
c001c765:	83 c4 0c             	add    esp,0xc
c001c768:	89 c5                	mov    ebp,eax
c001c76a:	53                   	push   ebx
c001c76b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c772:	50                   	push   eax
c001c773:	e8 aa 63 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001c778:	5e                   	pop    esi
c001c779:	5f                   	pop    edi
c001c77a:	6a 01                	push   0x1
c001c77c:	55                   	push   ebp
c001c77d:	e8 04 64 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c001c782:	83 c4 10             	add    esp,0x10
c001c785:	85 c0                	test   eax,eax
c001c787:	0f 85 a7 06 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c78d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c795:	83 ec 0c             	sub    esp,0xc
c001c798:	6a 34                	push   0x34
c001c79a:	e8 fd 2d ff ff       	call   c000f59c <malloc>
c001c79f:	5b                   	pop    ebx
c001c7a0:	89 c7                	mov    edi,eax
c001c7a2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c7a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7a9:	53                   	push   ebx
c001c7aa:	57                   	push   edi
c001c7ab:	6a 00                	push   0x0
c001c7ad:	6a 34                	push   0x34
c001c7af:	55                   	push   ebp
c001c7b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7b3:	83 c4 20             	add    esp,0x20
c001c7b6:	85 c0                	test   eax,eax
c001c7b8:	0f 85 76 06 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7be:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c7c4:	0f 85 6a 06 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7ca:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c7cd:	85 c0                	test   eax,eax
c001c7cf:	0f 84 5f 06 00 00    	je     c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7d5:	31 d2                	xor    edx,edx
c001c7d7:	51                   	push   ecx
c001c7d8:	52                   	push   edx
c001c7d9:	50                   	push   eax
c001c7da:	55                   	push   ebp
c001c7db:	e8 64 64 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c7e0:	83 c4 10             	add    esp,0x10
c001c7e3:	85 c0                	test   eax,eax
c001c7e5:	0f 85 49 06 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7eb:	83 ec 0c             	sub    esp,0xc
c001c7ee:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c7f1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c7f9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7fd:	0f af c2             	imul   eax,edx
c001c800:	50                   	push   eax
c001c801:	e8 96 2d ff ff       	call   c000f59c <malloc>
c001c806:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c809:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c80d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c810:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c814:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c818:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c81c:	0f af c2             	imul   eax,edx
c001c81f:	99                   	cdq    
c001c820:	52                   	push   edx
c001c821:	50                   	push   eax
c001c822:	55                   	push   ebp
c001c823:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c826:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c829:	83 c4 20             	add    esp,0x20
c001c82c:	85 c0                	test   eax,eax
c001c82e:	0f 84 00 06 00 00    	je     c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c834:	52                   	push   edx
c001c835:	31 d2                	xor    edx,edx
c001c837:	52                   	push   edx
c001c838:	50                   	push   eax
c001c839:	55                   	push   ebp
c001c83a:	e8 05 64 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	85 c0                	test   eax,eax
c001c844:	0f 85 ea 05 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c84a:	83 ec 0c             	sub    esp,0xc
c001c84d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c851:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c855:	31 f6                	xor    esi,esi
c001c857:	0f af c2             	imul   eax,edx
c001c85a:	50                   	push   eax
c001c85b:	e8 3c 2d ff ff       	call   c000f59c <malloc>
c001c860:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c863:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c86a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c86e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c872:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c876:	0f af c2             	imul   eax,edx
c001c879:	99                   	cdq    
c001c87a:	52                   	push   edx
c001c87b:	50                   	push   eax
c001c87c:	55                   	push   ebp
c001c87d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c880:	83 c4 20             	add    esp,0x20
c001c883:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c887:	0f 86 8a 00 00 00    	jbe    c001c917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c88d:	0f b7 de             	movzx  ebx,si
c001c890:	c1 e3 05             	shl    ebx,0x5
c001c893:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c897:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c89a:	75 75                	jne    c001c911 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c89c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c89f:	31 d2                	xor    edx,edx
c001c8a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c8a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ac:	50                   	push   eax
c001c8ad:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c8b0:	52                   	push   edx
c001c8b1:	50                   	push   eax
c001c8b2:	55                   	push   ebp
c001c8b3:	e8 8c 63 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c8b8:	83 c4 10             	add    esp,0x10
c001c8bb:	85 c0                	test   eax,eax
c001c8bd:	0f 85 71 05 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8c3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c8ca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8cd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c8d1:	31 d2                	xor    edx,edx
c001c8d3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c8d7:	83 ec 0c             	sub    esp,0xc
c001c8da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8de:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c8e5:	50                   	push   eax
c001c8e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8ee:	52                   	push   edx
c001c8ef:	50                   	push   eax
c001c8f0:	55                   	push   ebp
c001c8f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8f4:	83 c4 1c             	add    esp,0x1c
c001c8f7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c8fa:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c8fd:	50                   	push   eax
c001c8fe:	6a 00                	push   0x0
c001c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c904:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c908:	50                   	push   eax
c001c909:	e8 42 3e fe ff       	call   c0000750 <memset>
c001c90e:	83 c4 10             	add    esp,0x10
c001c911:	46                   	inc    esi
c001c912:	e9 6c ff ff ff       	jmp    c001c883 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c917:	53                   	push   ebx
c001c918:	31 db                	xor    ebx,ebx
c001c91a:	68 00 01 00 00       	push   0x100
c001c91f:	6a 00                	push   0x0
c001c921:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c925:	50                   	push   eax
c001c926:	e8 25 3e fe ff       	call   c0000750 <memset>
c001c92b:	83 c4 0c             	add    esp,0xc
c001c92e:	68 00 01 00 00       	push   0x100
c001c933:	6a 00                	push   0x0
c001c935:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c93c:	50                   	push   eax
c001c93d:	e8 0e 3e fe ff       	call   c0000750 <memset>
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c94d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c955:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c95d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c965:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c96d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c971:	0f 86 30 01 00 00    	jbe    c001caa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c977:	0f b7 f3             	movzx  esi,bx
c001c97a:	6b f6 28             	imul   esi,esi,0x28
c001c97d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c981:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c984:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c988:	52                   	push   edx
c001c989:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c98d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c991:	8b 06                	mov    eax,DWORD PTR [esi]
c001c993:	6b d2 28             	imul   edx,edx,0x28
c001c996:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c99a:	31 d2                	xor    edx,edx
c001c99c:	52                   	push   edx
c001c99d:	50                   	push   eax
c001c99e:	55                   	push   ebp
c001c99f:	e8 a0 62 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001c9a4:	83 c4 0c             	add    esp,0xc
c001c9a7:	6a 20                	push   0x20
c001c9a9:	6a 00                	push   0x0
c001c9ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c9b2:	51                   	push   ecx
c001c9b3:	e8 98 3d fe ff       	call   c0000750 <memset>
c001c9b8:	59                   	pop    ecx
c001c9b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9bc:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c9c0:	52                   	push   edx
c001c9c1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c9c8:	51                   	push   ecx
c001c9c9:	6a 00                	push   0x0
c001c9cb:	6a 1f                	push   0x1f
c001c9cd:	55                   	push   ebp
c001c9ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9d1:	83 c4 1c             	add    esp,0x1c
c001c9d4:	6a 09                	push   0x9
c001c9d6:	68 be b7 02 c0       	push   0xc002b7be
c001c9db:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c9e2:	51                   	push   ecx
c001c9e3:	e8 64 3c fe ff       	call   c000064c <memcmp>
c001c9e8:	83 c4 10             	add    esp,0x10
c001c9eb:	85 c0                	test   eax,eax
c001c9ed:	75 21                	jne    c001ca10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c9ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9f7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c9fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9ff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca02:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca09:	89 d0                	mov    eax,edx
c001ca0b:	40                   	inc    eax
c001ca0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca10:	50                   	push   eax
c001ca11:	6a 09                	push   0x9
c001ca13:	68 c8 b7 02 c0       	push   0xc002b7c8
c001ca18:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca1f:	50                   	push   eax
c001ca20:	e8 27 3c fe ff       	call   c000064c <memcmp>
c001ca25:	83 c4 10             	add    esp,0x10
c001ca28:	85 c0                	test   eax,eax
c001ca2a:	75 21                	jne    c001ca4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ca2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca34:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ca38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca3c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca3f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca46:	89 d0                	mov    eax,edx
c001ca48:	40                   	inc    eax
c001ca49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca4d:	50                   	push   eax
c001ca4e:	50                   	push   eax
c001ca4f:	68 94 b7 02 c0       	push   0xc002b794
c001ca54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca5b:	50                   	push   eax
c001ca5c:	e8 37 3e fe ff       	call   c0000898 <strcmp>
c001ca61:	83 c4 10             	add    esp,0x10
c001ca64:	85 c0                	test   eax,eax
c001ca66:	75 0f                	jne    c001ca77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ca68:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca77:	50                   	push   eax
c001ca78:	50                   	push   eax
c001ca79:	68 9c b7 02 c0       	push   0xc002b79c
c001ca7e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca85:	50                   	push   eax
c001ca86:	e8 0d 3e fe ff       	call   c0000898 <strcmp>
c001ca8b:	83 c4 10             	add    esp,0x10
c001ca8e:	85 c0                	test   eax,eax
c001ca90:	75 0f                	jne    c001caa1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001ca92:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca9d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001caa1:	43                   	inc    ebx
c001caa2:	e9 c6 fe ff ff       	jmp    c001c96d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001caa7:	31 d2                	xor    edx,edx
c001caa9:	50                   	push   eax
c001caaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caae:	52                   	push   edx
c001caaf:	50                   	push   eax
c001cab0:	55                   	push   ebp
c001cab1:	e8 8e 61 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001cab6:	58                   	pop    eax
c001cab7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cabb:	e8 dc 2a ff ff       	call   c000f59c <malloc>
c001cac0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cac3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cac7:	31 d2                	xor    edx,edx
c001cac9:	58                   	pop    eax
c001caca:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cace:	53                   	push   ebx
c001cacf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cad3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cad7:	52                   	push   edx
c001cad8:	50                   	push   eax
c001cad9:	55                   	push   ebp
c001cada:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cadd:	83 c4 14             	add    esp,0x14
c001cae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cae4:	e8 b3 2a ff ff       	call   c000f59c <malloc>
c001cae9:	31 d2                	xor    edx,edx
c001caeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001caef:	83 c4 0c             	add    esp,0xc
c001caf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001caf6:	52                   	push   edx
c001caf7:	50                   	push   eax
c001caf8:	55                   	push   ebp
c001caf9:	e8 46 61 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001cafe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb01:	31 d2                	xor    edx,edx
c001cb03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cb0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb0e:	52                   	push   edx
c001cb0f:	50                   	push   eax
c001cb10:	55                   	push   ebp
c001cb11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb14:	83 c4 20             	add    esp,0x20
c001cb17:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cb23:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cb27:	0f 84 0b 03 00 00    	je     c001ce38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cb2d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cb34:	31 d2                	xor    edx,edx
c001cb36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb3a:	c1 e8 03             	shr    eax,0x3
c001cb3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cb41:	51                   	push   ecx
c001cb42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb46:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cb4a:	52                   	push   edx
c001cb4b:	50                   	push   eax
c001cb4c:	55                   	push   ebp
c001cb4d:	e8 f2 60 ff ff       	call   c0012c44 <File::seek(unsigned long long)>
c001cb52:	5b                   	pop    ebx
c001cb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb57:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cb5e:	e8 39 2a ff ff       	call   c000f59c <malloc>
c001cb63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb6a:	31 d2                	xor    edx,edx
c001cb6c:	5e                   	pop    esi
c001cb6d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cb71:	50                   	push   eax
c001cb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb7a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cb81:	52                   	push   edx
c001cb82:	50                   	push   eax
c001cb83:	55                   	push   ebp
c001cb84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb87:	83 c4 20             	add    esp,0x20
c001cb8a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cb92:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cb96:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cb9a:	0f 8d 7c 02 00 00    	jge    c001ce1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cba0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cba4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cba8:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cbad:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cbb0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cbb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbb8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cbbc:	89 d8                	mov    eax,ebx
c001cbbe:	c1 e8 08             	shr    eax,0x8
c001cbc1:	89 c6                	mov    esi,eax
c001cbc3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cbc7:	c1 e6 04             	shl    esi,0x4
c001cbca:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cbce:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cbd1:	85 d2                	test   edx,edx
c001cbd3:	0f 85 bf 00 00 00    	jne    c001cc98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cbd9:	83 ec 0c             	sub    esp,0xc
c001cbdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbe0:	03 06                	add    eax,DWORD PTR [esi]
c001cbe2:	50                   	push   eax
c001cbe3:	e8 4b f8 ff ff       	call   c001c433 <Thr::getAddressOfKernelSymbol(char const*)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	89 c2                	mov    edx,eax
c001cbed:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cbf2:	85 c0                	test   eax,eax
c001cbf4:	0f 85 9e 00 00 00    	jne    c001cc98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cbfa:	83 ec 0c             	sub    esp,0xc
c001cbfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc01:	03 06                	add    eax,DWORD PTR [esi]
c001cc03:	50                   	push   eax
c001cc04:	e8 36 19 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	89 c2                	mov    edx,eax
c001cc0e:	85 c0                	test   eax,eax
c001cc10:	0f 85 82 00 00 00    	jne    c001cc98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc16:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cc1a:	50                   	push   eax
c001cc1b:	50                   	push   eax
c001cc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc20:	03 06                	add    eax,DWORD PTR [esi]
c001cc22:	50                   	push   eax
c001cc23:	68 d2 b7 02 c0       	push   0xc002b7d2
c001cc28:	e8 97 59 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001cc2d:	58                   	pop    eax
c001cc2e:	5a                   	pop    edx
c001cc2f:	68 ec b7 02 c0       	push   0xc002b7ec
c001cc34:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc3b:	50                   	push   eax
c001cc3c:	e8 cb 3b fe ff       	call   c000080c <strcpy>
c001cc41:	59                   	pop    ecx
c001cc42:	58                   	pop    eax
c001cc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc47:	03 06                	add    eax,DWORD PTR [esi]
c001cc49:	50                   	push   eax
c001cc4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc51:	50                   	push   eax
c001cc52:	e8 f5 3c fe ff       	call   c000094c <strcat>
c001cc57:	58                   	pop    eax
c001cc58:	5a                   	pop    edx
c001cc59:	68 82 b8 02 c0       	push   0xc002b882
c001cc5e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc65:	50                   	push   eax
c001cc66:	e8 e1 3c fe ff       	call   c000094c <strcat>
c001cc6b:	83 c4 10             	add    esp,0x10
c001cc6e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc73:	0f 84 5d 01 00 00    	je     c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc79:	83 ec 0c             	sub    esp,0xc
c001cc7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc83:	50                   	push   eax
c001cc84:	e8 a6 d0 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001cc89:	83 c4 10             	add    esp,0x10
c001cc8c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cc90:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc94:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cc98:	80 fb 01             	cmp    bl,0x1
c001cc9b:	0f 85 88 00 00 00    	jne    c001cd29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cca1:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cca8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccac:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ccb0:	01 ce                	add    esi,ecx
c001ccb2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ccb8:	0f 94 c0             	sete   al
c001ccbb:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ccc1:	0f 94 c3             	sete   bl
c001ccc4:	09 c3                	or     ebx,eax
c001ccc6:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccc8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cccd:	74 41                	je     c001cd10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cccf:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ccd2:	84 db                	test   bl,bl
c001ccd4:	75 15                	jne    c001cceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001ccd6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccda:	66 83 f8 0c          	cmp    ax,0xc
c001ccde:	76 05                	jbe    c001cce5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cce0:	b8 0c 00 00 00       	mov    eax,0xc
c001cce5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cce9:	76 37                	jbe    c001cd22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cceb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ccef:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccf4:	0f 84 dc 00 00 00    	je     c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ccfa:	83 ec 0c             	sub    esp,0xc
c001ccfd:	68 03 b8 02 c0       	push   0xc002b803
c001cd02:	e8 28 d0 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cd0e:	eb 12                	jmp    c001cd22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd10:	01 c1                	add    ecx,eax
c001cd12:	84 db                	test   bl,bl
c001cd14:	75 0c                	jne    c001cd22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd1a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cd1e:	77 02                	ja     c001cd22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd20:	01 d1                	add    ecx,edx
c001cd22:	89 0e                	mov    DWORD PTR [esi],ecx
c001cd24:	e9 ea 00 00 00       	jmp    c001ce13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd29:	80 fb 02             	cmp    bl,0x2
c001cd2c:	75 7c                	jne    c001cdaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cd2e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cd35:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cd39:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cd3d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cd43:	74 20                	je     c001cd65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd45:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cd4b:	74 18                	je     c001cd65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd4d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd51:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd56:	66 83 f8 0e          	cmp    ax,0xe
c001cd5a:	77 03                	ja     c001cd5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cd5c:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cd5f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cd63:	76 1f                	jbe    c001cd84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cd65:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cd69:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd6e:	74 66                	je     c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	68 1f b8 02 c0       	push   0xc002b81f
c001cd78:	e8 b2 cf ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd84:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd86:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cd8b:	74 13                	je     c001cda0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cd8d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cd91:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cd98:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cd9c:	01 c8                	add    eax,ecx
c001cd9e:	eb 04                	jmp    c001cda4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cda0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cda4:	01 c2                	add    edx,eax
c001cda6:	89 16                	mov    DWORD PTR [esi],edx
c001cda8:	eb 69                	jmp    c001ce13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cdaa:	0f b6 db             	movzx  ebx,bl
c001cdad:	50                   	push   eax
c001cdae:	50                   	push   eax
c001cdaf:	53                   	push   ebx
c001cdb0:	68 3b b8 02 c0       	push   0xc002b83b
c001cdb5:	e8 0a 58 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdc2:	74 12                	je     c001cdd6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdc4:	83 ec 0c             	sub    esp,0xc
c001cdc7:	68 46 b8 02 c0       	push   0xc002b846
c001cdcc:	e8 5e cf ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	eb 3d                	jmp    c001ce13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	55                   	push   ebp
c001cdda:	e8 05 5e ff ff       	call   c0012be4 <File::close()>
c001cddf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cde2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cde5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cde8:	59                   	pop    ecx
c001cde9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cded:	e8 ba 27 ff ff       	call   c000f5ac <free>
c001cdf2:	5b                   	pop    ebx
c001cdf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdf7:	e8 b0 27 ff ff       	call   c000f5ac <free>
c001cdfc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdff:	e8 a8 27 ff ff       	call   c000f5ac <free>
c001ce04:	5e                   	pop    esi
c001ce05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce09:	e8 9e 27 ff ff       	call   c000f5ac <free>
c001ce0e:	83 c4 10             	add    esp,0x10
c001ce11:	eb 21                	jmp    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce13:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001ce17:	e9 76 fd ff ff       	jmp    c001cb92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ce1c:	83 ec 0c             	sub    esp,0xc
c001ce1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce23:	e8 84 27 ff ff       	call   c000f5ac <free>
c001ce28:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ce2c:	83 c4 10             	add    esp,0x10
c001ce2f:	e9 eb fc ff ff       	jmp    c001cb1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ce34:	31 c0                	xor    eax,eax
c001ce36:	eb 33                	jmp    c001ce6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	55                   	push   ebp
c001ce3c:	e8 a3 5d ff ff       	call   c0012be4 <File::close()>
c001ce41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce44:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce4a:	58                   	pop    eax
c001ce4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce4f:	e8 58 27 ff ff       	call   c000f5ac <free>
c001ce54:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce57:	e8 50 27 ff ff       	call   c000f5ac <free>
c001ce5c:	5a                   	pop    edx
c001ce5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce61:	e8 46 27 ff ff       	call   c000f5ac <free>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	b0 01                	mov    al,0x1
c001ce6b:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ce71:	5b                   	pop    ebx
c001ce72:	5e                   	pop    esi
c001ce73:	5f                   	pop    edi
c001ce74:	5d                   	pop    ebp
c001ce75:	c3                   	ret    

c001ce76 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ce76:	56                   	push   esi
c001ce77:	31 d2                	xor    edx,edx
c001ce79:	53                   	push   ebx
c001ce7a:	8b 1d 60 04 03 c0    	mov    ebx,DWORD PTR ds:0xc0030460
c001ce80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce84:	39 d3                	cmp    ebx,edx
c001ce86:	7e 1b                	jle    c001cea3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ce88:	8b 04 95 80 06 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf980]
c001ce8f:	39 c8                	cmp    eax,ecx
c001ce91:	77 0d                	ja     c001cea0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001ce93:	8b 34 95 80 04 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfb80]
c001ce9a:	01 c6                	add    esi,eax
c001ce9c:	39 ce                	cmp    esi,ecx
c001ce9e:	77 05                	ja     c001cea5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cea0:	42                   	inc    edx
c001cea1:	eb e1                	jmp    c001ce84 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cea3:	31 c0                	xor    eax,eax
c001cea5:	5b                   	pop    ebx
c001cea6:	5e                   	pop    esi
c001cea7:	c3                   	ret    

c001cea8 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cea8:	53                   	push   ebx
c001cea9:	31 c0                	xor    eax,eax
c001ceab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ceaf:	8b 1d 60 04 03 c0    	mov    ebx,DWORD PTR ds:0xc0030460
c001ceb5:	39 c3                	cmp    ebx,eax
c001ceb7:	7e 22                	jle    c001cedb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ceb9:	8b 14 85 80 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf980]
c001cec0:	39 ca                	cmp    edx,ecx
c001cec2:	77 14                	ja     c001ced8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cec4:	03 14 85 80 04 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfb80]
c001cecb:	39 ca                	cmp    edx,ecx
c001cecd:	76 09                	jbe    c001ced8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cecf:	8b 04 85 80 08 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf780]
c001ced6:	eb 05                	jmp    c001cedd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ced8:	40                   	inc    eax
c001ced9:	eb da                	jmp    c001ceb5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cedb:	31 c0                	xor    eax,eax
c001cedd:	5b                   	pop    ebx
c001cede:	c3                   	ret    

c001cedf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cedf:	53                   	push   ebx
c001cee0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cee4:	53                   	push   ebx
c001cee5:	e8 8c ff ff ff       	call   c001ce76 <Thr::getDriverBaseFromAddress(unsigned long)>
c001ceea:	5a                   	pop    edx
c001ceeb:	31 d2                	xor    edx,edx
c001ceed:	85 c0                	test   eax,eax
c001ceef:	74 04                	je     c001cef5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cef1:	89 da                	mov    edx,ebx
c001cef3:	29 c2                	sub    edx,eax
c001cef5:	89 d0                	mov    eax,edx
c001cef7:	5b                   	pop    ebx
c001cef8:	c3                   	ret    

c001cef9 <Thr::loadDLL(char const*, bool)>:
c001cef9:	55                   	push   ebp
c001cefa:	57                   	push   edi
c001cefb:	56                   	push   esi
c001cefc:	53                   	push   ebx
c001cefd:	81 ec 34 01 00 00    	sub    esp,0x134
c001cf03:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cf0a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cf11:	56                   	push   esi
c001cf12:	68 5e b8 02 c0       	push   0xc002b85e
c001cf17:	e8 a8 56 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001cf1c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cf23:	e8 74 26 ff ff       	call   c000f59c <malloc>
c001cf28:	83 c4 0c             	add    esp,0xc
c001cf2b:	89 c3                	mov    ebx,eax
c001cf2d:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001cf33:	56                   	push   esi
c001cf34:	50                   	push   eax
c001cf35:	e8 e8 5b ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001cf3a:	83 c4 10             	add    esp,0x10
c001cf3d:	85 db                	test   ebx,ebx
c001cf3f:	75 3c                	jne    c001cf7d <Thr::loadDLL(char const*, bool)+0x84>
c001cf41:	89 f8                	mov    eax,edi
c001cf43:	84 c0                	test   al,al
c001cf45:	0f 84 cf 01 00 00    	je     c001d11a <Thr::loadDLL(char const*, bool)+0x221>
c001cf4b:	55                   	push   ebp
c001cf4c:	55                   	push   ebp
c001cf4d:	68 6f b8 02 c0       	push   0xc002b86f
c001cf52:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001cf56:	55                   	push   ebp
c001cf57:	e8 b0 38 fe ff       	call   c000080c <strcpy>
c001cf5c:	58                   	pop    eax
c001cf5d:	5a                   	pop    edx
c001cf5e:	56                   	push   esi
c001cf5f:	55                   	push   ebp
c001cf60:	e8 e7 39 fe ff       	call   c000094c <strcat>
c001cf65:	59                   	pop    ecx
c001cf66:	58                   	pop    eax
c001cf67:	68 82 b8 02 c0       	push   0xc002b882
c001cf6c:	55                   	push   ebp
c001cf6d:	e8 da 39 fe ff       	call   c000094c <strcat>
c001cf72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf75:	e8 b5 cd ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001cf7a:	83 c4 10             	add    esp,0x10
c001cf7d:	51                   	push   ecx
c001cf7e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cf82:	50                   	push   eax
c001cf83:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cf87:	50                   	push   eax
c001cf88:	53                   	push   ebx
c001cf89:	e8 a4 5e ff ff       	call   c0012e32 <File::stat(unsigned long long*, bool*)>
c001cf8e:	83 c4 10             	add    esp,0x10
c001cf91:	85 db                	test   ebx,ebx
c001cf93:	74 0c                	je     c001cfa1 <Thr::loadDLL(char const*, bool)+0xa8>
c001cf95:	83 ec 0c             	sub    esp,0xc
c001cf98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf9a:	53                   	push   ebx
c001cf9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf9e:	83 c4 10             	add    esp,0x10
c001cfa1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cfa6:	75 0a                	jne    c001cfb2 <Thr::loadDLL(char const*, bool)+0xb9>
c001cfa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfac:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cfb0:	75 3c                	jne    c001cfee <Thr::loadDLL(char const*, bool)+0xf5>
c001cfb2:	89 f8                	mov    eax,edi
c001cfb4:	84 c0                	test   al,al
c001cfb6:	0f 84 46 01 00 00    	je     c001d102 <Thr::loadDLL(char const*, bool)+0x209>
c001cfbc:	51                   	push   ecx
c001cfbd:	51                   	push   ecx
c001cfbe:	68 6f b8 02 c0       	push   0xc002b86f
c001cfc3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cfc7:	53                   	push   ebx
c001cfc8:	e8 3f 38 fe ff       	call   c000080c <strcpy>
c001cfcd:	5d                   	pop    ebp
c001cfce:	58                   	pop    eax
c001cfcf:	56                   	push   esi
c001cfd0:	53                   	push   ebx
c001cfd1:	e8 76 39 fe ff       	call   c000094c <strcat>
c001cfd6:	58                   	pop    eax
c001cfd7:	5a                   	pop    edx
c001cfd8:	68 82 b8 02 c0       	push   0xc002b882
c001cfdd:	53                   	push   ebx
c001cfde:	e8 69 39 fe ff       	call   c000094c <strcat>
c001cfe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfe6:	e8 44 cd ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001cfeb:	83 c4 10             	add    esp,0x10
c001cfee:	52                   	push   edx
c001cfef:	68 03 08 00 00       	push   0x803
c001cff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cffc:	05 ff 0f 00 00       	add    eax,0xfff
c001d001:	83 d2 00             	adc    edx,0x0
c001d004:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d008:	50                   	push   eax
c001d009:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c001d00f:	e8 70 4a ff ff       	call   c0011a84 <VAS::allocatePages(int, int)>
c001d014:	59                   	pop    ecx
c001d015:	89 c3                	mov    ebx,eax
c001d017:	5d                   	pop    ebp
c001d018:	50                   	push   eax
c001d019:	68 33 9f 02 c0       	push   0xc0029f33
c001d01e:	e8 a1 55 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001d023:	89 34 24             	mov    DWORD PTR [esp],esi
c001d026:	e8 41 37 fe ff       	call   c000076c <strlen>
c001d02b:	8b 2d 60 04 03 c0    	mov    ebp,DWORD PTR ds:0xc0030460
c001d031:	40                   	inc    eax
c001d032:	89 04 24             	mov    DWORD PTR [esp],eax
c001d035:	e8 62 25 ff ff       	call   c000f59c <malloc>
c001d03a:	89 04 ad 80 08 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf780],eax
c001d041:	58                   	pop    eax
c001d042:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001d047:	5a                   	pop    edx
c001d048:	56                   	push   esi
c001d049:	ff 34 85 80 08 03 c0 	push   DWORD PTR [eax*4-0x3ffcf780]
c001d050:	e8 b7 37 fe ff       	call   c000080c <strcpy>
c001d055:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001d05a:	8d 50 01             	lea    edx,[eax+0x1]
c001d05d:	89 1c 85 80 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf980],ebx
c001d064:	89 15 60 04 03 c0    	mov    DWORD PTR ds:0xc0030460,edx
c001d06a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d06e:	83 c4 0c             	add    esp,0xc
c001d071:	89 14 85 80 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb80],edx
c001d078:	6a 01                	push   0x1
c001d07a:	53                   	push   ebx
c001d07b:	56                   	push   esi
c001d07c:	e8 bf f6 ff ff       	call   c001c740 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d081:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d085:	83 c4 10             	add    esp,0x10
c001d088:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d08d:	0f 85 83 00 00 00    	jne    c001d116 <Thr::loadDLL(char const*, bool)+0x21d>
c001d093:	89 f8                	mov    eax,edi
c001d095:	84 c0                	test   al,al
c001d097:	74 6d                	je     c001d106 <Thr::loadDLL(char const*, bool)+0x20d>
c001d099:	83 ec 0c             	sub    esp,0xc
c001d09c:	68 84 b8 02 c0       	push   0xc002b884
c001d0a1:	e8 89 cc ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001d0a6:	83 c4 10             	add    esp,0x10
c001d0a9:	eb 5b                	jmp    c001d106 <Thr::loadDLL(char const*, bool)+0x20d>
c001d0ab:	89 ee                	mov    esi,ebp
c001d0ad:	50                   	push   eax
c001d0ae:	c1 e6 0c             	shl    esi,0xc
c001d0b1:	50                   	push   eax
c001d0b2:	01 de                	add    esi,ebx
c001d0b4:	56                   	push   esi
c001d0b5:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c001d0bb:	e8 2c 45 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d0c6:	75 0c                	jne    c001d0d4 <Thr::loadDLL(char const*, bool)+0x1db>
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	56                   	push   esi
c001d0cc:	e8 14 28 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c001d0d1:	83 c4 10             	add    esp,0x10
c001d0d4:	45                   	inc    ebp
c001d0d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0dd:	05 ff 0f 00 00       	add    eax,0xfff
c001d0e2:	bf 00 00 00 00       	mov    edi,0x0
c001d0e7:	83 d2 00             	adc    edx,0x0
c001d0ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d0ee:	c1 ea 0c             	shr    edx,0xc
c001d0f1:	39 c5                	cmp    ebp,eax
c001d0f3:	89 d1                	mov    ecx,edx
c001d0f5:	89 f8                	mov    eax,edi
c001d0f7:	19 c8                	sbb    eax,ecx
c001d0f9:	72 b0                	jb     c001d0ab <Thr::loadDLL(char const*, bool)+0x1b2>
c001d0fb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d100:	75 18                	jne    c001d11a <Thr::loadDLL(char const*, bool)+0x221>
c001d102:	31 db                	xor    ebx,ebx
c001d104:	eb 14                	jmp    c001d11a <Thr::loadDLL(char const*, bool)+0x221>
c001d106:	83 ec 0c             	sub    esp,0xc
c001d109:	68 a3 b8 02 c0       	push   0xc002b8a3
c001d10e:	e8 1c cc ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	31 ed                	xor    ebp,ebp
c001d118:	eb bb                	jmp    c001d0d5 <Thr::loadDLL(char const*, bool)+0x1dc>
c001d11a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d120:	89 d8                	mov    eax,ebx
c001d122:	5b                   	pop    ebx
c001d123:	5e                   	pop    esi
c001d124:	5f                   	pop    edi
c001d125:	5d                   	pop    ebp
c001d126:	c3                   	ret    

c001d127 <Thr::executeDLL(unsigned long, void*)>:
c001d127:	56                   	push   esi
c001d128:	53                   	push   ebx
c001d129:	52                   	push   edx
c001d12a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d12e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d132:	85 db                	test   ebx,ebx
c001d134:	75 10                	jne    c001d146 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d136:	83 ec 0c             	sub    esp,0xc
c001d139:	68 bf b8 02 c0       	push   0xc002b8bf
c001d13e:	e8 ec cb ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001d143:	83 c4 10             	add    esp,0x10
c001d146:	50                   	push   eax
c001d147:	50                   	push   eax
c001d148:	53                   	push   ebx
c001d149:	68 e9 b8 02 c0       	push   0xc002b8e9
c001d14e:	e8 71 54 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001d153:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d157:	89 d8                	mov    eax,ebx
c001d159:	83 c4 14             	add    esp,0x14
c001d15c:	5b                   	pop    ebx
c001d15d:	5e                   	pop    esi
c001d15e:	ff e0                	jmp    eax

c001d160 <userModeEntryPoint(void*)>:
c001d160:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d165:	48                   	dec    eax
c001d166:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d16b:	75 01                	jne    c001d16e <userModeEntryPoint(void*)+0xe>
c001d16d:	fb                   	sti    
c001d16e:	fb                   	sti    
c001d16f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d174:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d177:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d17d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d181:	e9 a4 31 fe ff       	jmp    c000032a <goToUsermode>

c001d186 <changeTSS>:
c001d186:	83 ec 14             	sub    esp,0x14
c001d189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d18e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d191:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d196:	c1 e2 15             	shl    edx,0x15
c001d199:	29 d0                	sub    eax,edx
c001d19b:	50                   	push   eax
c001d19c:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001d1a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1a7:	05 7c 11 00 00       	add    eax,0x117c
c001d1ac:	50                   	push   eax
c001d1ad:	e8 68 39 ff ff       	call   c0010b1a <TSS::setESP(unsigned long)>
c001d1b2:	83 c4 1c             	add    esp,0x1c
c001d1b5:	c3                   	ret    

c001d1b6 <switchToThread(ThreadControlBlock*)>:
c001d1b6:	57                   	push   edi
c001d1b7:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001d1bc:	56                   	push   esi
c001d1bd:	85 c0                	test   eax,eax
c001d1bf:	53                   	push   ebx
c001d1c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1c4:	0f 85 88 00 00 00    	jne    c001d252 <switchToThread(ThreadControlBlock*)+0x9c>
c001d1ca:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d1cd:	3c ff                	cmp    al,0xff
c001d1cf:	74 7d                	je     c001d24e <switchToThread(ThreadControlBlock*)+0x98>
c001d1d1:	0f b6 d0             	movzx  edx,al
c001d1d4:	b8 84 03 00 00       	mov    eax,0x384
c001d1d9:	29 d0                	sub    eax,edx
c001d1db:	c1 e0 10             	shl    eax,0x10
c001d1de:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d1e1:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d1e4:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001d1e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1ef:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d1f6:	74 4a                	je     c001d242 <switchToThread(ThreadControlBlock*)+0x8c>
c001d1f8:	0f 31                	rdtsc  
c001d1fa:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001d1ff:	89 c6                	mov    esi,eax
c001d201:	89 d7                	mov    edi,edx
c001d203:	2b 35 58 0c 03 c0    	sub    esi,DWORD PTR ds:0xc0030c58
c001d209:	89 15 6c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c6c,edx
c001d20f:	1b 3d 5c 0c 03 c0    	sbb    edi,DWORD PTR ds:0xc0030c5c
c001d215:	89 35 60 0c 03 c0    	mov    DWORD PTR ds:0xc0030c60,esi
c001d21b:	a3 58 0c 03 c0       	mov    ds:0xc0030c58,eax
c001d220:	89 3d 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,edi
c001d226:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d22c:	89 15 5c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c5c,edx
c001d232:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d235:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d238:	01 c6                	add    esi,eax
c001d23a:	11 d7                	adc    edi,edx
c001d23c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d23f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d242:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d246:	5b                   	pop    ebx
c001d247:	5e                   	pop    esi
c001d248:	5f                   	pop    edi
c001d249:	e9 14 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d24e:	31 c0                	xor    eax,eax
c001d250:	eb 8f                	jmp    c001d1e1 <switchToThread(ThreadControlBlock*)+0x2b>
c001d252:	5b                   	pop    ebx
c001d253:	c7 05 20 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x1
c001d25d:	5e                   	pop    esi
c001d25e:	5f                   	pop    edi
c001d25f:	c3                   	ret    

c001d260 <Process::addArgs(char**)>:
c001d260:	57                   	push   edi
c001d261:	56                   	push   esi
c001d262:	53                   	push   ebx
c001d263:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d267:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d26b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d275:	85 ff                	test   edi,edi
c001d277:	74 3d                	je     c001d2b6 <Process::addArgs(char**)+0x56>
c001d279:	8b 07                	mov    eax,DWORD PTR [edi]
c001d27b:	85 c0                	test   eax,eax
c001d27d:	74 37                	je     c001d2b6 <Process::addArgs(char**)+0x56>
c001d27f:	31 db                	xor    ebx,ebx
c001d281:	83 ec 0c             	sub    esp,0xc
c001d284:	50                   	push   eax
c001d285:	e8 e2 34 fe ff       	call   c000076c <strlen>
c001d28a:	40                   	inc    eax
c001d28b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d28e:	e8 09 23 ff ff       	call   c000f59c <malloc>
c001d293:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d29a:	5a                   	pop    edx
c001d29b:	59                   	pop    ecx
c001d29c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d29f:	43                   	inc    ebx
c001d2a0:	50                   	push   eax
c001d2a1:	e8 66 35 fe ff       	call   c000080c <strcpy>
c001d2a6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d2ac:	83 c4 10             	add    esp,0x10
c001d2af:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d2b2:	85 c0                	test   eax,eax
c001d2b4:	75 cb                	jne    c001d281 <Process::addArgs(char**)+0x21>
c001d2b6:	5b                   	pop    ebx
c001d2b7:	5e                   	pop    esi
c001d2b8:	5f                   	pop    edi
c001d2b9:	c3                   	ret    

c001d2ba <Process::Process(char const*, Process*, char**)>:
c001d2ba:	56                   	push   esi
c001d2bb:	53                   	push   ebx
c001d2bc:	83 ec 14             	sub    esp,0x14
c001d2bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c3:	05 0c 02 00 00       	add    eax,0x20c
c001d2c8:	bb 07 00 00 00       	mov    ebx,0x7
c001d2cd:	89 c6                	mov    esi,eax
c001d2cf:	85 db                	test   ebx,ebx
c001d2d1:	78 12                	js     c001d2e5 <Process::Process(char const*, Process*, char**)+0x2b>
c001d2d3:	83 ec 0c             	sub    esp,0xc
c001d2d6:	56                   	push   esi
c001d2d7:	e8 9a b6 00 00       	call   c0028976 <ThreadControlBlock::ThreadControlBlock()>
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	83 c6 63             	add    esi,0x63
c001d2e2:	4b                   	dec    ebx
c001d2e3:	eb ea                	jmp    c001d2cf <Process::Process(char const*, Process*, char**)+0x15>
c001d2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d2f0:	83 ec 0c             	sub    esp,0xc
c001d2f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2f7:	e8 bc c8 ff ff       	call   c0019bb8 <Krnl::newProcessEnv(Process*)>
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	89 c2                	mov    edx,eax
c001d301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d305:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d30b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d318:	a1 90 cc 02 c0       	mov    eax,ds:0xc002cc90
c001d31d:	8d 50 01             	lea    edx,[eax+0x1]
c001d320:	89 15 90 cc 02 c0    	mov    DWORD PTR ds:0xc002cc90,edx
c001d326:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d32a:	89 02                	mov    DWORD PTR [edx],eax
c001d32c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d334:	83 ec 0c             	sub    esp,0xc
c001d337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d33b:	e8 5c 22 ff ff       	call   c000f59c <malloc>
c001d340:	83 c4 10             	add    esp,0x10
c001d343:	89 c3                	mov    ebx,eax
c001d345:	83 ec 08             	sub    esp,0x8
c001d348:	6a 00                	push   0x0
c001d34a:	53                   	push   ebx
c001d34b:	e8 dc 4a ff ff       	call   c0011e2c <VAS::VAS(bool)>
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d357:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d361:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d373:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d37d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d383:	85 c0                	test   eax,eax
c001d385:	74 42                	je     c001d3c9 <Process::Process(char const*, Process*, char**)+0x10f>
c001d387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d38b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d391:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3ab:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b5:	05 0c 01 00 00       	add    eax,0x10c
c001d3ba:	83 ec 08             	sub    esp,0x8
c001d3bd:	52                   	push   edx
c001d3be:	50                   	push   eax
c001d3bf:	e8 48 34 fe ff       	call   c000080c <strcpy>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	eb 63                	jmp    c001d42c <Process::Process(char const*, Process*, char**)+0x172>
c001d3c9:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d3d1:	83 ec 0c             	sub    esp,0xc
c001d3d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d3d8:	e8 bf 21 ff ff       	call   c000f59c <malloc>
c001d3dd:	83 c4 10             	add    esp,0x10
c001d3e0:	89 c3                	mov    ebx,eax
c001d3e2:	83 ec 08             	sub    esp,0x8
c001d3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3e9:	53                   	push   ebx
c001d3ea:	e8 3f 34 ff ff       	call   c001082e <VgaText::VgaText(char const*)>
c001d3ef:	83 c4 10             	add    esp,0x10
c001d3f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d3fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d400:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d406:	83 ec 0c             	sub    esp,0xc
c001d409:	50                   	push   eax
c001d40a:	e8 de 2b ff ff       	call   c000ffed <addToTerminalCycle(VgaText*)>
c001d40f:	83 c4 10             	add    esp,0x10
c001d412:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d416:	05 0c 01 00 00       	add    eax,0x10c
c001d41b:	83 ec 08             	sub    esp,0x8
c001d41e:	68 08 b9 02 c0       	push   0xc002b908
c001d423:	50                   	push   eax
c001d424:	e8 e3 33 fe ff       	call   c000080c <strcpy>
c001d429:	83 c4 10             	add    esp,0x10
c001d42c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d430:	83 c0 0c             	add    eax,0xc
c001d433:	83 ec 08             	sub    esp,0x8
c001d436:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d43a:	50                   	push   eax
c001d43b:	e8 cc 33 fe ff       	call   c000080c <strcpy>
c001d440:	83 c4 10             	add    esp,0x10
c001d443:	83 ec 08             	sub    esp,0x8
c001d446:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d44a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d44e:	e8 0d fe ff ff       	call   c001d260 <Process::addArgs(char**)>
c001d453:	83 c4 10             	add    esp,0x10
c001d456:	83 ec 08             	sub    esp,0x8
c001d459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d45d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d461:	e8 a4 ed ff ff       	call   c001c20a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d466:	83 c4 10             	add    esp,0x10
c001d469:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d46d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d471:	83 f0 01             	xor    eax,0x1
c001d474:	88 c2                	mov    dl,al
c001d476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d480:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d485:	83 ec 08             	sub    esp,0x8
c001d488:	50                   	push   eax
c001d489:	68 60 b9 02 c0       	push   0xc002b960
c001d48e:	e8 31 51 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	90                   	nop
c001d497:	83 c4 14             	add    esp,0x14
c001d49a:	5b                   	pop    ebx
c001d49b:	5e                   	pop    esi
c001d49c:	c3                   	ret    
c001d49d:	90                   	nop

c001d49e <Process::Process(bool, char const*, Process*, char**)>:
c001d49e:	56                   	push   esi
c001d49f:	53                   	push   ebx
c001d4a0:	83 ec 24             	sub    esp,0x24
c001d4a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d4a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d4ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4af:	05 0c 02 00 00       	add    eax,0x20c
c001d4b4:	bb 07 00 00 00       	mov    ebx,0x7
c001d4b9:	89 c6                	mov    esi,eax
c001d4bb:	85 db                	test   ebx,ebx
c001d4bd:	78 12                	js     c001d4d1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d4bf:	83 ec 0c             	sub    esp,0xc
c001d4c2:	56                   	push   esi
c001d4c3:	e8 ae b4 00 00       	call   c0028976 <ThreadControlBlock::ThreadControlBlock()>
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	83 c6 63             	add    esi,0x63
c001d4ce:	4b                   	dec    ebx
c001d4cf:	eb ea                	jmp    c001d4bb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d4d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4d5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d4dc:	83 ec 0c             	sub    esp,0xc
c001d4df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4e3:	e8 d0 c6 ff ff       	call   c0019bb8 <Krnl::newProcessEnv(Process*)>
c001d4e8:	83 c4 10             	add    esp,0x10
c001d4eb:	89 c2                	mov    edx,eax
c001d4ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4f1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d4f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4fb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d504:	a1 90 cc 02 c0       	mov    eax,ds:0xc002cc90
c001d509:	8d 50 01             	lea    edx,[eax+0x1]
c001d50c:	89 15 90 cc 02 c0    	mov    DWORD PTR ds:0xc002cc90,edx
c001d512:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d516:	89 02                	mov    DWORD PTR [edx],eax
c001d518:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d520:	83 ec 0c             	sub    esp,0xc
c001d523:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d527:	e8 70 20 ff ff       	call   c000f59c <malloc>
c001d52c:	83 c4 10             	add    esp,0x10
c001d52f:	89 c3                	mov    ebx,eax
c001d531:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d536:	83 ec 08             	sub    esp,0x8
c001d539:	50                   	push   eax
c001d53a:	53                   	push   ebx
c001d53b:	e8 ec 48 ff ff       	call   c0011e2c <VAS::VAS(bool)>
c001d540:	83 c4 10             	add    esp,0x10
c001d543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d547:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d54d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d551:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d55b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d55f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d563:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d569:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d56d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d573:	85 c0                	test   eax,eax
c001d575:	74 42                	je     c001d5b9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d577:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d57b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d581:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d587:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d58b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d595:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d59b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d5a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5a5:	05 0c 01 00 00       	add    eax,0x10c
c001d5aa:	83 ec 08             	sub    esp,0x8
c001d5ad:	52                   	push   edx
c001d5ae:	50                   	push   eax
c001d5af:	e8 58 32 fe ff       	call   c000080c <strcpy>
c001d5b4:	83 c4 10             	add    esp,0x10
c001d5b7:	eb 63                	jmp    c001d61c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d5b9:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d5c1:	83 ec 0c             	sub    esp,0xc
c001d5c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d5c8:	e8 cf 1f ff ff       	call   c000f59c <malloc>
c001d5cd:	83 c4 10             	add    esp,0x10
c001d5d0:	89 c3                	mov    ebx,eax
c001d5d2:	83 ec 08             	sub    esp,0x8
c001d5d5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5d9:	53                   	push   ebx
c001d5da:	e8 4f 32 ff ff       	call   c001082e <VgaText::VgaText(char const*)>
c001d5df:	83 c4 10             	add    esp,0x10
c001d5e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5e6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d5ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5f6:	83 ec 0c             	sub    esp,0xc
c001d5f9:	50                   	push   eax
c001d5fa:	e8 ee 29 ff ff       	call   c000ffed <addToTerminalCycle(VgaText*)>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d606:	05 0c 01 00 00       	add    eax,0x10c
c001d60b:	83 ec 08             	sub    esp,0x8
c001d60e:	68 08 b9 02 c0       	push   0xc002b908
c001d613:	50                   	push   eax
c001d614:	e8 f3 31 fe ff       	call   c000080c <strcpy>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d620:	83 c0 0c             	add    eax,0xc
c001d623:	83 ec 08             	sub    esp,0x8
c001d626:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d62a:	50                   	push   eax
c001d62b:	e8 dc 31 fe ff       	call   c000080c <strcpy>
c001d630:	83 c4 10             	add    esp,0x10
c001d633:	83 ec 08             	sub    esp,0x8
c001d636:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d63a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d63e:	e8 1d fc ff ff       	call   c001d260 <Process::addArgs(char**)>
c001d643:	83 c4 10             	add    esp,0x10
c001d646:	90                   	nop
c001d647:	83 c4 24             	add    esp,0x24
c001d64a:	5b                   	pop    ebx
c001d64b:	5e                   	pop    esi
c001d64c:	c3                   	ret    

c001d64d <taskStartupFunction>:
c001d64d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d652:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d655:	c3                   	ret    

c001d656 <Semaphore::Semaphore(int)>:
c001d656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d65a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d65e:	89 10                	mov    DWORD PTR [eax],edx
c001d660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d664:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d66b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d66f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d67a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d681:	90                   	nop
c001d682:	c3                   	ret    
c001d683:	90                   	nop

c001d684 <Mutex::Mutex()>:
c001d684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d688:	6a 01                	push   0x1
c001d68a:	50                   	push   eax
c001d68b:	e8 c6 ff ff ff       	call   c001d656 <Semaphore::Semaphore(int)>
c001d690:	83 c4 08             	add    esp,0x8
c001d693:	90                   	nop
c001d694:	c3                   	ret    
c001d695:	90                   	nop

c001d696 <Process::createThread(void (*)(void*), void*, int)>:
c001d696:	55                   	push   ebp
c001d697:	31 c9                	xor    ecx,ecx
c001d699:	57                   	push   edi
c001d69a:	56                   	push   esi
c001d69b:	53                   	push   ebx
c001d69c:	83 ec 1c             	sub    esp,0x1c
c001d69f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d6a3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d6aa:	89 f2                	mov    edx,esi
c001d6ac:	0f b7 c2             	movzx  eax,dx
c001d6af:	83 e2 01             	and    edx,0x1
c001d6b2:	74 16                	je     c001d6ca <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d6b4:	d1 f8                	sar    eax,1
c001d6b6:	41                   	inc    ecx
c001d6b7:	89 c2                	mov    edx,eax
c001d6b9:	83 f9 10             	cmp    ecx,0x10
c001d6bc:	75 ee                	jne    c001d6ac <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d6be:	83 c4 1c             	add    esp,0x1c
c001d6c1:	31 db                	xor    ebx,ebx
c001d6c3:	89 d8                	mov    eax,ebx
c001d6c5:	5b                   	pop    ebx
c001d6c6:	5e                   	pop    esi
c001d6c7:	5f                   	pop    edi
c001d6c8:	5d                   	pop    ebp
c001d6c9:	c3                   	ret    
c001d6ca:	b8 01 00 00 00       	mov    eax,0x1
c001d6cf:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d6d2:	d3 e0                	shl    eax,cl
c001d6d4:	09 c6                	or     esi,eax
c001d6d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d6d9:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d6e0:	89 c6                	mov    esi,eax
c001d6e2:	c1 e6 05             	shl    esi,0x5
c001d6e5:	01 f0                	add    eax,esi
c001d6e7:	01 d8                	add    eax,ebx
c001d6e9:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d6f0:	75 0a                	jne    c001d6fc <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d6f2:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d6fc:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d702:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d706:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d709:	01 ca                	add    edx,ecx
c001d70b:	83 ec 08             	sub    esp,0x8
c001d70e:	89 d0                	mov    eax,edx
c001d710:	c1 e0 05             	shl    eax,0x5
c001d713:	01 d0                	add    eax,edx
c001d715:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d719:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d71d:	01 d8                	add    eax,ebx
c001d71f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d725:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d72b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d731:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d737:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d73d:	89 cd                	mov    ebp,ecx
c001d73f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d743:	f7 dd                	neg    ebp
c001d745:	c1 e5 15             	shl    ebp,0x15
c001d748:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d74e:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d754:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d75e:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d764:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d76e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d778:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d77c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d783:	53                   	push   ebx
c001d784:	68 44 0c 03 c0       	push   0xc0030c44
c001d789:	e8 a2 af 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d78e:	89 d8                	mov    eax,ebx
c001d790:	83 c4 10             	add    esp,0x10
c001d793:	83 c4 1c             	add    esp,0x1c
c001d796:	5b                   	pop    ebx
c001d797:	5e                   	pop    esi
c001d798:	5f                   	pop    edi
c001d799:	5d                   	pop    ebp
c001d79a:	c3                   	ret    
c001d79b:	90                   	nop

c001d79c <Process::createUserThread()>:
c001d79c:	83 ec 0c             	sub    esp,0xc
c001d79f:	68 80 00 00 00       	push   0x80
c001d7a4:	6a 00                	push   0x0
c001d7a6:	68 60 d1 01 c0       	push   0xc001d160
c001d7ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7af:	e8 e2 fe ff ff       	call   c001d696 <Process::createThread(void (*)(void*), void*, int)>
c001d7b4:	83 c4 1c             	add    esp,0x1c
c001d7b7:	c3                   	ret    

c001d7b8 <setupMultitasking(void (*)())>:
c001d7b8:	56                   	push   esi
c001d7b9:	53                   	push   ebx
c001d7ba:	51                   	push   ecx
c001d7bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7bf:	eb 10                	jmp    c001d7d1 <setupMultitasking(void (*)())+0x19>
c001d7c1:	83 ec 0c             	sub    esp,0xc
c001d7c4:	68 44 0c 03 c0       	push   0xc0030c44
c001d7c9:	e8 b4 ae 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d7ce:	83 c4 10             	add    esp,0x10
c001d7d1:	83 ec 0c             	sub    esp,0xc
c001d7d4:	68 44 0c 03 c0       	push   0xc0030c44
c001d7d9:	e8 80 ae 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d7de:	83 c4 10             	add    esp,0x10
c001d7e1:	84 c0                	test   al,al
c001d7e3:	74 dc                	je     c001d7c1 <setupMultitasking(void (*)())+0x9>
c001d7e5:	83 ec 0c             	sub    esp,0xc
c001d7e8:	68 3f 07 00 00       	push   0x73f
c001d7ed:	e8 aa 1d ff ff       	call   c000f59c <malloc>
c001d7f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7f9:	89 c3                	mov    ebx,eax
c001d7fb:	6a 00                	push   0x0
c001d7fd:	68 0c b9 02 c0       	push   0xc002b90c
c001d802:	6a 01                	push   0x1
c001d804:	50                   	push   eax
c001d805:	e8 94 fc ff ff       	call   c001d49e <Process::Process(bool, char const*, Process*, char**)>
c001d80a:	83 c4 14             	add    esp,0x14
c001d80d:	89 1d 50 0c 03 c0    	mov    DWORD PTR ds:0xc0030c50,ebx
c001d813:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d819:	e8 dd 2a ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c001d81e:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d826:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d830:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d836:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d839:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d843:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d849:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d84f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d859:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d863:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d86d:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d873:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d87d:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d883:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d88d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d893:	58                   	pop    eax
c001d894:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d89a:	5a                   	pop    edx
c001d89b:	68 08 b9 02 c0       	push   0xc002b908
c001d8a0:	50                   	push   eax
c001d8a1:	e8 66 2f fe ff       	call   c000080c <strcpy>
c001d8a6:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d8ad:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d8b1:	83 c4 14             	add    esp,0x14
c001d8b4:	5b                   	pop    ebx
c001d8b5:	5e                   	pop    esi
c001d8b6:	e9 99 2a fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d8bb <schedule()>:
c001d8bb:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001d8c0:	85 c0                	test   eax,eax
c001d8c2:	74 0b                	je     c001d8cf <schedule()+0x14>
c001d8c4:	c7 05 20 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x1
c001d8ce:	c3                   	ret    
c001d8cf:	53                   	push   ebx
c001d8d0:	83 ec 14             	sub    esp,0x14
c001d8d3:	68 44 0c 03 c0       	push   0xc0030c44
c001d8d8:	e8 81 ad 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8dd:	83 c4 10             	add    esp,0x10
c001d8e0:	84 c0                	test   al,al
c001d8e2:	75 38                	jne    c001d91c <schedule()+0x61>
c001d8e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8e9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8ec:	4a                   	dec    edx
c001d8ed:	74 32                	je     c001d921 <schedule()+0x66>
c001d8ef:	83 ec 0c             	sub    esp,0xc
c001d8f2:	68 44 0c 03 c0       	push   0xc0030c44
c001d8f7:	e8 7e ad 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d8fc:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001d903:	89 c3                	mov    ebx,eax
c001d905:	e8 78 ad 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d90a:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d911:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d914:	e8 9d f8 ff ff       	call   c001d1b6 <switchToThread(ThreadControlBlock*)>
c001d919:	83 c4 10             	add    esp,0x10
c001d91c:	83 c4 08             	add    esp,0x8
c001d91f:	5b                   	pop    ebx
c001d920:	c3                   	ret    
c001d921:	83 ec 08             	sub    esp,0x8
c001d924:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d92b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d931:	68 44 0c 03 c0       	push   0xc0030c44
c001d936:	e8 f5 ad 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d93b:	83 c4 10             	add    esp,0x10
c001d93e:	eb af                	jmp    c001d8ef <schedule()+0x34>

c001d940 <Semaphore::tryAcquire()>:
c001d940:	53                   	push   ebx
c001d941:	83 ec 08             	sub    esp,0x8
c001d944:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d948:	fa                   	cli    
c001d949:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d94e:	8d 50 01             	lea    edx,[eax+0x1]
c001d951:	89 15 28 0c 03 c0    	mov    DWORD PTR ds:0xc0030c28,edx
c001d957:	8b 15 24 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c24
c001d95d:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d960:	89 1d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ebx
c001d966:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d969:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d96b:	7c 2a                	jl     c001d997 <Semaphore::tryAcquire()+0x57>
c001d96d:	89 15 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,edx
c001d973:	85 d2                	test   edx,edx
c001d975:	75 0a                	jne    c001d981 <Semaphore::tryAcquire()+0x41>
c001d977:	8b 15 20 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c20
c001d97d:	85 d2                	test   edx,edx
c001d97f:	75 5b                	jne    c001d9dc <Semaphore::tryAcquire()+0x9c>
c001d981:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d986:	85 c0                	test   eax,eax
c001d988:	74 07                	je     c001d991 <Semaphore::tryAcquire()+0x51>
c001d98a:	31 c0                	xor    eax,eax
c001d98c:	83 c4 08             	add    esp,0x8
c001d98f:	5b                   	pop    ebx
c001d990:	c3                   	ret    
c001d991:	fb                   	sti    
c001d992:	83 c4 08             	add    esp,0x8
c001d995:	5b                   	pop    ebx
c001d996:	c3                   	ret    
c001d997:	43                   	inc    ebx
c001d998:	89 15 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,edx
c001d99e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d9a1:	85 d2                	test   edx,edx
c001d9a3:	75 1f                	jne    c001d9c4 <Semaphore::tryAcquire()+0x84>
c001d9a5:	8b 0d 20 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c20
c001d9ab:	85 c9                	test   ecx,ecx
c001d9ad:	74 15                	je     c001d9c4 <Semaphore::tryAcquire()+0x84>
c001d9af:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001d9b9:	e8 fd fe ff ff       	call   c001d8bb <schedule()>
c001d9be:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d9c3:	48                   	dec    eax
c001d9c4:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d9c9:	85 c0                	test   eax,eax
c001d9cb:	75 08                	jne    c001d9d5 <Semaphore::tryAcquire()+0x95>
c001d9cd:	fb                   	sti    
c001d9ce:	b0 01                	mov    al,0x1
c001d9d0:	83 c4 08             	add    esp,0x8
c001d9d3:	5b                   	pop    ebx
c001d9d4:	c3                   	ret    
c001d9d5:	b0 01                	mov    al,0x1
c001d9d7:	83 c4 08             	add    esp,0x8
c001d9da:	5b                   	pop    ebx
c001d9db:	c3                   	ret    
c001d9dc:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001d9e6:	e8 d0 fe ff ff       	call   c001d8bb <schedule()>
c001d9eb:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001d9f0:	48                   	dec    eax
c001d9f1:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001d9f6:	85 c0                	test   eax,eax
c001d9f8:	75 90                	jne    c001d98a <Semaphore::tryAcquire()+0x4a>
c001d9fa:	eb 95                	jmp    c001d991 <Semaphore::tryAcquire()+0x51>

c001d9fc <Semaphore::assertLocked(char const*)>:
c001d9fc:	83 ec 0c             	sub    esp,0xc
c001d9ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da03:	fa                   	cli    
c001da04:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001da0a:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001da0f:	8d 48 01             	lea    ecx,[eax+0x1]
c001da12:	89 0d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ecx
c001da18:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001da1a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001da1d:	7c 24                	jl     c001da43 <Semaphore::assertLocked(char const*)+0x47>
c001da1f:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001da24:	85 c0                	test   eax,eax
c001da26:	75 09                	jne    c001da31 <Semaphore::assertLocked(char const*)+0x35>
c001da28:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001da2d:	85 c0                	test   eax,eax
c001da2f:	75 29                	jne    c001da5a <Semaphore::assertLocked(char const*)+0x5e>
c001da31:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001da36:	48                   	dec    eax
c001da37:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001da3c:	75 01                	jne    c001da3f <Semaphore::assertLocked(char const*)+0x43>
c001da3e:	fb                   	sti    
c001da3f:	83 c4 0c             	add    esp,0xc
c001da42:	c3                   	ret    
c001da43:	83 ec 0c             	sub    esp,0xc
c001da46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001da4a:	e8 e0 c2 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001da4f:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001da54:	83 c4 10             	add    esp,0x10
c001da57:	48                   	dec    eax
c001da58:	eb c5                	jmp    c001da1f <Semaphore::assertLocked(char const*)+0x23>
c001da5a:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001da64:	e8 52 fe ff ff       	call   c001d8bb <schedule()>
c001da69:	eb c6                	jmp    c001da31 <Semaphore::assertLocked(char const*)+0x35>

c001da6b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001da6b:	83 ec 0c             	sub    esp,0xc
c001da6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da77:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da7a:	e8 3c fe ff ff       	call   c001d8bb <schedule()>
c001da7f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001da84:	48                   	dec    eax
c001da85:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001da8a:	75 01                	jne    c001da8d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001da8c:	fb                   	sti    
c001da8d:	83 c4 0c             	add    esp,0xc
c001da90:	c3                   	ret    

c001da91 <blockTask(TaskState)>:
c001da91:	83 ec 0c             	sub    esp,0xc
c001da94:	fa                   	cli    
c001da95:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001da9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daa4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001daa7:	e8 0f fe ff ff       	call   c001d8bb <schedule()>
c001daac:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dab1:	48                   	dec    eax
c001dab2:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dab7:	75 01                	jne    c001daba <blockTask(TaskState)+0x29>
c001dab9:	fb                   	sti    
c001daba:	83 c4 0c             	add    esp,0xc
c001dabd:	c3                   	ret    

c001dabe <waitTask(int, int*, int)>:
c001dabe:	83 ec 18             	sub    esp,0x18
c001dac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dac6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001daca:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dacd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dad1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dad6:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dad9:	6a 07                	push   0x7
c001dadb:	e8 b1 ff ff ff       	call   c001da91 <blockTask(TaskState)>
c001dae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dae5:	83 c4 10             	add    esp,0x10
c001dae8:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001daeb:	85 d2                	test   edx,edx
c001daed:	74 0a                	je     c001daf9 <waitTask(int, int*, int)+0x3b>
c001daef:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001daf2:	89 02                	mov    DWORD PTR [edx],eax
c001daf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daf9:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dafc:	83 c4 0c             	add    esp,0xc
c001daff:	c3                   	ret    

c001db00 <nanoSleepUntil(unsigned long long)>:
c001db00:	83 ec 0c             	sub    esp,0xc
c001db03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db0b:	3b 05 70 dd 02 c0    	cmp    eax,DWORD PTR ds:0xc002dd70
c001db11:	89 d1                	mov    ecx,edx
c001db13:	1b 0d 74 dd 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dd74
c001db19:	73 04                	jae    c001db1f <nanoSleepUntil(unsigned long long)+0x1f>
c001db1b:	83 c4 0c             	add    esp,0xc
c001db1e:	c3                   	ret    
c001db1f:	fa                   	cli    
c001db20:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001db26:	83 ec 08             	sub    esp,0x8
c001db29:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c001db2f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db35:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001db38:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001db3b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db41:	68 38 0c 03 c0       	push   0xc0030c38
c001db46:	e8 e5 ab 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db4b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001db52:	e8 3a ff ff ff       	call   c001da91 <blockTask(TaskState)>
c001db57:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	48                   	dec    eax
c001db60:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001db65:	85 c0                	test   eax,eax
c001db67:	75 09                	jne    c001db72 <nanoSleepUntil(unsigned long long)+0x72>
c001db69:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001db6e:	85 c0                	test   eax,eax
c001db70:	75 12                	jne    c001db84 <nanoSleepUntil(unsigned long long)+0x84>
c001db72:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001db77:	48                   	dec    eax
c001db78:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001db7d:	75 9c                	jne    c001db1b <nanoSleepUntil(unsigned long long)+0x1b>
c001db7f:	fb                   	sti    
c001db80:	83 c4 0c             	add    esp,0xc
c001db83:	c3                   	ret    
c001db84:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001db8e:	e8 28 fd ff ff       	call   c001d8bb <schedule()>
c001db93:	eb dd                	jmp    c001db72 <nanoSleepUntil(unsigned long long)+0x72>

c001db95 <nanoSleep(unsigned long long)>:
c001db95:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c001db9a:	8b 15 74 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd74
c001dba0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dba4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dba8:	e9 53 ff ff ff       	jmp    c001db00 <nanoSleepUntil(unsigned long long)>

c001dbad <sleep(unsigned long long)>:
c001dbad:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dbb5:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dbba:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dbbe:	01 ca                	add    edx,ecx
c001dbc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dbc4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dbc8:	eb cb                	jmp    c001db95 <nanoSleep(unsigned long long)>

c001dbca <Semaphore::acquire()>:
c001dbca:	83 ec 0c             	sub    esp,0xc
c001dbcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbd1:	fa                   	cli    
c001dbd2:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001dbd7:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dbdd:	8d 48 01             	lea    ecx,[eax+0x1]
c001dbe0:	89 0d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ecx
c001dbe6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dbe9:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dbeb:	7d 28                	jge    c001dc15 <Semaphore::acquire()+0x4b>
c001dbed:	41                   	inc    ecx
c001dbee:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dbf1:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001dbf6:	85 c0                	test   eax,eax
c001dbf8:	75 09                	jne    c001dc03 <Semaphore::acquire()+0x39>
c001dbfa:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001dbff:	85 c0                	test   eax,eax
c001dc01:	75 4e                	jne    c001dc51 <Semaphore::acquire()+0x87>
c001dc03:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dc08:	48                   	dec    eax
c001dc09:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dc0e:	75 01                	jne    c001dc11 <Semaphore::acquire()+0x47>
c001dc10:	fb                   	sti    
c001dc11:	83 c4 0c             	add    esp,0xc
c001dc14:	c3                   	ret    
c001dc15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc1a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dc21:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dc24:	85 c9                	test   ecx,ecx
c001dc26:	74 3a                	je     c001dc62 <Semaphore::acquire()+0x98>
c001dc28:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dc2b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc31:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dc34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc39:	83 ec 0c             	sub    esp,0xc
c001dc3c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dc3f:	6a 05                	push   0x5
c001dc41:	e8 4b fe ff ff       	call   c001da91 <blockTask(TaskState)>
c001dc46:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001dc4b:	83 c4 10             	add    esp,0x10
c001dc4e:	48                   	dec    eax
c001dc4f:	eb a0                	jmp    c001dbf1 <Semaphore::acquire()+0x27>
c001dc51:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001dc5b:	e8 5b fc ff ff       	call   c001d8bb <schedule()>
c001dc60:	eb a1                	jmp    c001dc03 <Semaphore::acquire()+0x39>
c001dc62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dc6a:	eb c8                	jmp    c001dc34 <Semaphore::acquire()+0x6a>

c001dc6c <taskReturned>:
c001dc6c:	83 ec 18             	sub    esp,0x18
c001dc6f:	68 88 b9 02 c0       	push   0xc002b988
c001dc74:	e8 b6 c0 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001dc79:	83 c4 10             	add    esp,0x10
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	6a 02                	push   0x2
c001dc81:	e8 0b fe ff ff       	call   c001da91 <blockTask(TaskState)>
c001dc86:	fa                   	cli    
c001dc87:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dc8d:	e8 29 fc ff ff       	call   c001d8bb <schedule()>
c001dc92:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dc97:	83 c4 10             	add    esp,0x10
c001dc9a:	48                   	dec    eax
c001dc9b:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dca0:	85 c0                	test   eax,eax
c001dca2:	75 d8                	jne    c001dc7c <taskReturned+0x10>
c001dca4:	fb                   	sti    
c001dca5:	eb d5                	jmp    c001dc7c <taskReturned+0x10>

c001dca7 <Thr::processFromPID(int)>:
c001dca7:	57                   	push   edi
c001dca8:	56                   	push   esi
c001dca9:	53                   	push   ebx
c001dcaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dcae:	fa                   	cli    
c001dcaf:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dcb5:	83 ec 0c             	sub    esp,0xc
c001dcb8:	68 44 0c 03 c0       	push   0xc0030c44
c001dcbd:	e8 b8 a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcc2:	83 c4 10             	add    esp,0x10
c001dcc5:	89 c7                	mov    edi,eax
c001dcc7:	eb 14                	jmp    c001dcdd <Thr::processFromPID(int)+0x36>
c001dcc9:	83 ec 0c             	sub    esp,0xc
c001dccc:	68 44 0c 03 c0       	push   0xc0030c44
c001dcd1:	e8 a4 a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcd6:	83 c4 10             	add    esp,0x10
c001dcd9:	39 f8                	cmp    eax,edi
c001dcdb:	74 49                	je     c001dd26 <Thr::processFromPID(int)+0x7f>
c001dcdd:	83 ec 0c             	sub    esp,0xc
c001dce0:	68 44 0c 03 c0       	push   0xc0030c44
c001dce5:	e8 90 a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcea:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001dcf1:	89 c3                	mov    ebx,eax
c001dcf3:	e8 8a a9 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dcf8:	58                   	pop    eax
c001dcf9:	5a                   	pop    edx
c001dcfa:	53                   	push   ebx
c001dcfb:	68 44 0c 03 c0       	push   0xc0030c44
c001dd00:	e8 2b aa 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd05:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd08:	83 c4 10             	add    esp,0x10
c001dd0b:	39 30                	cmp    DWORD PTR [eax],esi
c001dd0d:	75 ba                	jne    c001dcc9 <Thr::processFromPID(int)+0x22>
c001dd0f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dd14:	48                   	dec    eax
c001dd15:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dd1a:	74 07                	je     c001dd23 <Thr::processFromPID(int)+0x7c>
c001dd1c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd1f:	5b                   	pop    ebx
c001dd20:	5e                   	pop    esi
c001dd21:	5f                   	pop    edi
c001dd22:	c3                   	ret    
c001dd23:	fb                   	sti    
c001dd24:	eb f6                	jmp    c001dd1c <Thr::processFromPID(int)+0x75>
c001dd26:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dd2b:	48                   	dec    eax
c001dd2c:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dd31:	75 05                	jne    c001dd38 <Thr::processFromPID(int)+0x91>
c001dd33:	fb                   	sti    
c001dd34:	5b                   	pop    ebx
c001dd35:	5e                   	pop    esi
c001dd36:	5f                   	pop    edi
c001dd37:	c3                   	ret    
c001dd38:	5b                   	pop    ebx
c001dd39:	31 c0                	xor    eax,eax
c001dd3b:	5e                   	pop    esi
c001dd3c:	5f                   	pop    edi
c001dd3d:	c3                   	ret    

c001dd3e <unblockTask(ThreadControlBlock*)>:
c001dd3e:	53                   	push   ebx
c001dd3f:	83 ec 08             	sub    esp,0x8
c001dd42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd46:	fa                   	cli    
c001dd47:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001dd4d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd50:	85 c0                	test   eax,eax
c001dd52:	74 5a                	je     c001ddae <unblockTask(ThreadControlBlock*)+0x70>
c001dd54:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd57:	48                   	dec    eax
c001dd58:	74 31                	je     c001dd8b <unblockTask(ThreadControlBlock*)+0x4d>
c001dd5a:	83 ec 0c             	sub    esp,0xc
c001dd5d:	68 44 0c 03 c0       	push   0xc0030c44
c001dd62:	e8 13 a9 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd67:	83 c4 10             	add    esp,0x10
c001dd6a:	85 c0                	test   eax,eax
c001dd6c:	75 17                	jne    c001dd85 <unblockTask(ThreadControlBlock*)+0x47>
c001dd6e:	eb 50                	jmp    c001ddc0 <unblockTask(ThreadControlBlock*)+0x82>
c001dd70:	83 ec 08             	sub    esp,0x8
c001dd73:	50                   	push   eax
c001dd74:	68 44 0c 03 c0       	push   0xc0030c44
c001dd79:	e8 84 ac 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dd7e:	83 c4 10             	add    esp,0x10
c001dd81:	85 c0                	test   eax,eax
c001dd83:	74 3b                	je     c001ddc0 <unblockTask(ThreadControlBlock*)+0x82>
c001dd85:	39 c3                	cmp    ebx,eax
c001dd87:	75 e7                	jne    c001dd70 <unblockTask(ThreadControlBlock*)+0x32>
c001dd89:	eb 10                	jmp    c001dd9b <unblockTask(ThreadControlBlock*)+0x5d>
c001dd8b:	83 ec 0c             	sub    esp,0xc
c001dd8e:	68 2a b9 02 c0       	push   0xc002b92a
c001dd93:	e8 2c 48 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001dd98:	83 c4 10             	add    esp,0x10
c001dd9b:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001dda0:	48                   	dec    eax
c001dda1:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001dda6:	75 01                	jne    c001dda9 <unblockTask(ThreadControlBlock*)+0x6b>
c001dda8:	fb                   	sti    
c001dda9:	83 c4 08             	add    esp,0x8
c001ddac:	5b                   	pop    ebx
c001ddad:	c3                   	ret    
c001ddae:	83 ec 0c             	sub    esp,0xc
c001ddb1:	68 13 b9 02 c0       	push   0xc002b913
c001ddb6:	e8 09 48 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001ddbb:	83 c4 10             	add    esp,0x10
c001ddbe:	eb db                	jmp    c001dd9b <unblockTask(ThreadControlBlock*)+0x5d>
c001ddc0:	83 ec 08             	sub    esp,0x8
c001ddc3:	53                   	push   ebx
c001ddc4:	68 44 0c 03 c0       	push   0xc0030c44
c001ddc9:	e8 62 a9 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddce:	83 c4 10             	add    esp,0x10
c001ddd1:	eb c8                	jmp    c001dd9b <unblockTask(ThreadControlBlock*)+0x5d>

c001ddd3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ddd3:	55                   	push   ebp
c001ddd4:	57                   	push   edi
c001ddd5:	56                   	push   esi
c001ddd6:	53                   	push   ebx
c001ddd7:	83 ec 1c             	sub    esp,0x1c
c001ddda:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddde:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dde1:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dde7:	85 ff                	test   edi,edi
c001dde9:	7e 20                	jle    c001de0b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ddeb:	31 f6                	xor    esi,esi
c001dded:	83 ec 0c             	sub    esp,0xc
c001ddf0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ddf7:	46                   	inc    esi
c001ddf8:	e8 af 17 ff ff       	call   c000f5ac <free>
c001ddfd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de00:	83 c4 10             	add    esp,0x10
c001de03:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001de09:	7f e2                	jg     c001dded <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001de0b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001de15:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001de1a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001de1d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001de20:	d3 c0                	rol    eax,cl
c001de22:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001de29:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de2c:	89 f7                	mov    edi,esi
c001de2e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001de36:	0f 85 64 01 00 00    	jne    c001dfa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001de3c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001de42:	85 ed                	test   ebp,ebp
c001de44:	74 1b                	je     c001de61 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001de46:	83 ec 0c             	sub    esp,0xc
c001de49:	55                   	push   ebp
c001de4a:	e8 85 bc ff ff       	call   c0019ad4 <EnvVarContainer::~EnvVarContainer()>
c001de4f:	59                   	pop    ecx
c001de50:	5e                   	pop    esi
c001de51:	6a 0c                	push   0xc
c001de53:	55                   	push   ebp
c001de54:	e8 93 46 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001de59:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de5c:	83 c4 10             	add    esp,0x10
c001de5f:	89 f7                	mov    edi,esi
c001de61:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de67:	85 c0                	test   eax,eax
c001de69:	0f 84 aa 00 00 00    	je     c001df19 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de6f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001de72:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de76:	31 c9                	xor    ecx,ecx
c001de78:	eb 10                	jmp    c001de8a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001de7a:	41                   	inc    ecx
c001de7b:	83 f9 10             	cmp    ecx,0x10
c001de7e:	0f 84 95 00 00 00    	je     c001df19 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de84:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de8a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001de91:	d3 fa                	sar    edx,cl
c001de93:	83 e2 01             	and    edx,0x1
c001de96:	74 e2                	je     c001de7a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de98:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001de9b:	01 ca                	add    edx,ecx
c001de9d:	89 d5                	mov    ebp,edx
c001de9f:	c1 e5 05             	shl    ebp,0x5
c001dea2:	01 ea                	add    edx,ebp
c001dea4:	01 d0                	add    eax,edx
c001dea6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001deac:	83 fd 07             	cmp    ebp,0x7
c001deaf:	75 c9                	jne    c001de7a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001deb1:	05 40 02 00 00       	add    eax,0x240
c001deb6:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001deb9:	83 fd ff             	cmp    ebp,0xffffffff
c001debc:	0f 8c e6 00 00 00    	jl     c001dfa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dec2:	0f 84 97 01 00 00    	je     c001e05f <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dec8:	85 ed                	test   ebp,ebp
c001deca:	0f 84 7e 01 00 00    	je     c001e04e <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001ded0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ded2:	75 a6                	jne    c001de7a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ded4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001deda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dede:	01 d0                	add    eax,edx
c001dee0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dee4:	83 ec 0c             	sub    esp,0xc
c001dee7:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001deed:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001def0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001def6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001defd:	50                   	push   eax
c001defe:	e8 3b fe ff ff       	call   c001dd3e <unblockTask(ThreadControlBlock*)>
c001df03:	83 c4 10             	add    esp,0x10
c001df06:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df09:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df0d:	89 f7                	mov    edi,esi
c001df0f:	41                   	inc    ecx
c001df10:	83 f9 10             	cmp    ecx,0x10
c001df13:	0f 85 6b ff ff ff    	jne    c001de84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001df19:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001df1f:	85 c0                	test   eax,eax
c001df21:	74 5d                	je     c001df80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df23:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001df29:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001df2f:	74 4f                	je     c001df80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df31:	83 ec 0c             	sub    esp,0xc
c001df34:	68 44 0c 03 c0       	push   0xc0030c44
c001df39:	e8 3c a7 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df3e:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001df45:	89 c7                	mov    edi,eax
c001df47:	e8 12 a7 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df4c:	83 c4 10             	add    esp,0x10
c001df4f:	84 c0                	test   al,al
c001df51:	0f 84 c2 00 00 00    	je     c001e019 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001df57:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df5a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df60:	85 d2                	test   edx,edx
c001df62:	74 0f                	je     c001df73 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001df64:	83 ec 0c             	sub    esp,0xc
c001df67:	8b 02                	mov    eax,DWORD PTR [edx]
c001df69:	52                   	push   edx
c001df6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df6d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001df7d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001df80:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001df86:	85 db                	test   ebx,ebx
c001df88:	74 16                	je     c001dfa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	53                   	push   ebx
c001df8e:	e8 73 38 ff ff       	call   c0011806 <VAS::~VAS()>
c001df93:	58                   	pop    eax
c001df94:	5a                   	pop    edx
c001df95:	6a 14                	push   0x14
c001df97:	53                   	push   ebx
c001df98:	e8 4f 45 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001df9d:	83 c4 10             	add    esp,0x10
c001dfa0:	83 c4 1c             	add    esp,0x1c
c001dfa3:	5b                   	pop    ebx
c001dfa4:	5e                   	pop    esi
c001dfa5:	5f                   	pop    edi
c001dfa6:	5d                   	pop    ebp
c001dfa7:	c3                   	ret    
c001dfa8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfac:	83 ec 0c             	sub    esp,0xc
c001dfaf:	68 bc b9 02 c0       	push   0xc002b9bc
c001dfb4:	e8 76 bd ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001dfb9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	89 f7                	mov    edi,esi
c001dfc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dfc5:	e9 b0 fe ff ff       	jmp    c001de7a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfd0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001dfd6:	75 1c                	jne    c001dff4 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001dfd8:	83 ec 0c             	sub    esp,0xc
c001dfdb:	68 24 ba 02 c0       	push   0xc002ba24
c001dfe0:	e8 df 45 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001dfe5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001dfec:	e8 a0 fa ff ff       	call   c001da91 <blockTask(TaskState)>
c001dff1:	83 c4 10             	add    esp,0x10
c001dff4:	83 ec 08             	sub    esp,0x8
c001dff7:	56                   	push   esi
c001dff8:	68 44 0c 03 c0       	push   0xc0030c44
c001dffd:	e8 2e a7 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e002:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001e009:	e8 6c a6 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e00e:	83 c4 10             	add    esp,0x10
c001e011:	39 f8                	cmp    eax,edi
c001e013:	0f 84 3e ff ff ff    	je     c001df57 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e019:	83 ec 0c             	sub    esp,0xc
c001e01c:	68 44 0c 03 c0       	push   0xc0030c44
c001e021:	e8 54 a6 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e026:	c7 04 24 44 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c44
c001e02d:	89 c6                	mov    esi,eax
c001e02f:	e8 4e a6 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e034:	83 c4 10             	add    esp,0x10
c001e037:	39 f3                	cmp    ebx,esi
c001e039:	74 b9                	je     c001dff4 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e03b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e03e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e041:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e047:	75 ab                	jne    c001dff4 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e049:	e9 7c ff ff ff       	jmp    c001dfca <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e04e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	68 f0 b9 02 c0       	push   0xc002b9f0
c001e05a:	e9 55 ff ff ff       	jmp    c001dfb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e05f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e061:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e065:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e068:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e06b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e071:	01 d7                	add    edi,edx
c001e073:	89 f8                	mov    eax,edi
c001e075:	e9 66 fe ff ff       	jmp    c001dee0 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e07a <cleanerTaskFunction(void*)>:
c001e07a:	53                   	push   ebx
c001e07b:	83 ec 08             	sub    esp,0x8
c001e07e:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e083:	48                   	dec    eax
c001e084:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e089:	75 01                	jne    c001e08c <cleanerTaskFunction(void*)+0x12>
c001e08b:	fb                   	sti    
c001e08c:	fa                   	cli    
c001e08d:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e092:	80 3d 0c 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c0c,0x0
c001e099:	8d 50 01             	lea    edx,[eax+0x1]
c001e09c:	89 15 28 0c 03 c0    	mov    DWORD PTR ds:0xc0030c28,edx
c001e0a2:	0f 84 a1 00 00 00    	je     c001e149 <cleanerTaskFunction(void*)+0xcf>
c001e0a8:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e0ad:	85 c0                	test   eax,eax
c001e0af:	75 01                	jne    c001e0b2 <cleanerTaskFunction(void*)+0x38>
c001e0b1:	fb                   	sti    
c001e0b2:	c6 05 0c 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c0c,0x0
c001e0b9:	fa                   	cli    
c001e0ba:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e0c0:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c001e0c6:	fa                   	cli    
c001e0c7:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e0cd:	eb 26                	jmp    c001e0f5 <cleanerTaskFunction(void*)+0x7b>
c001e0cf:	83 ec 0c             	sub    esp,0xc
c001e0d2:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e0d7:	e8 9e a5 00 00       	call   c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0dc:	c7 04 24 2c 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c2c
c001e0e3:	89 c3                	mov    ebx,eax
c001e0e5:	e8 98 a5 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0ed:	e8 e1 fc ff ff       	call   c001ddd3 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e0f2:	83 c4 10             	add    esp,0x10
c001e0f5:	83 ec 0c             	sub    esp,0xc
c001e0f8:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e0fd:	e8 5c a5 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	84 c0                	test   al,al
c001e107:	74 c6                	je     c001e0cf <cleanerTaskFunction(void*)+0x55>
c001e109:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e10e:	48                   	dec    eax
c001e10f:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e114:	75 01                	jne    c001e117 <cleanerTaskFunction(void*)+0x9d>
c001e116:	fb                   	sti    
c001e117:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e11c:	48                   	dec    eax
c001e11d:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001e122:	0f 85 56 ff ff ff    	jne    c001e07e <cleanerTaskFunction(void*)+0x4>
c001e128:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001e12d:	85 c0                	test   eax,eax
c001e12f:	0f 84 49 ff ff ff    	je     c001e07e <cleanerTaskFunction(void*)+0x4>
c001e135:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001e13f:	e8 77 f7 ff ff       	call   c001d8bb <schedule()>
c001e144:	e9 35 ff ff ff       	jmp    c001e07e <cleanerTaskFunction(void*)+0x4>
c001e149:	83 ec 0c             	sub    esp,0xc
c001e14c:	6a 02                	push   0x2
c001e14e:	e8 18 f9 ff ff       	call   c001da6b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e153:	83 c4 10             	add    esp,0x10
c001e156:	e9 57 ff ff ff       	jmp    c001e0b2 <cleanerTaskFunction(void*)+0x38>

c001e15b <terminateTask(int)>:
c001e15b:	83 ec 14             	sub    esp,0x14
c001e15e:	fa                   	cli    
c001e15f:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e165:	ff 05 24 0c 03 c0    	inc    DWORD PTR ds:0xc0030c24
c001e16b:	fa                   	cli    
c001e16c:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e172:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e176:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e17b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e17e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e183:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e186:	50                   	push   eax
c001e187:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e18c:	e8 9f a5 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e191:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e196:	83 c4 10             	add    esp,0x10
c001e199:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e1a0:	a1 08 0c 03 c0       	mov    eax,ds:0xc0030c08
c001e1a5:	85 c0                	test   eax,eax
c001e1a7:	74 53                	je     c001e1fc <terminateTask(int)+0xa1>
c001e1a9:	83 ec 0c             	sub    esp,0xc
c001e1ac:	c6 05 0c 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c0c,0x1
c001e1b3:	50                   	push   eax
c001e1b4:	e8 85 fb ff ff       	call   c001dd3e <unblockTask(ThreadControlBlock*)>
c001e1b9:	83 c4 10             	add    esp,0x10
c001e1bc:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e1c1:	48                   	dec    eax
c001e1c2:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e1c7:	75 01                	jne    c001e1ca <terminateTask(int)+0x6f>
c001e1c9:	fb                   	sti    
c001e1ca:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e1cf:	48                   	dec    eax
c001e1d0:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001e1d5:	75 09                	jne    c001e1e0 <terminateTask(int)+0x85>
c001e1d7:	83 3d 20 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c20,0x0
c001e1de:	75 2e                	jne    c001e20e <terminateTask(int)+0xb3>
c001e1e0:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e1e5:	48                   	dec    eax
c001e1e6:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e1eb:	75 01                	jne    c001e1ee <terminateTask(int)+0x93>
c001e1ed:	fb                   	sti    
c001e1ee:	fa                   	cli    
c001e1ef:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e1f5:	e8 c1 f6 ff ff       	call   c001d8bb <schedule()>
c001e1fa:	eb e4                	jmp    c001e1e0 <terminateTask(int)+0x85>
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	68 41 b9 02 c0       	push   0xc002b941
c001e204:	e8 bb 43 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	eb ae                	jmp    c001e1bc <terminateTask(int)+0x61>
c001e20e:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001e218:	eb db                	jmp    c001e1f5 <terminateTask(int)+0x9a>

c001e21a <Thr::terminateFromIRQ(int)>:
c001e21a:	83 ec 18             	sub    esp,0x18
c001e21d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e221:	e8 35 ff ff ff       	call   c001e15b <terminateTask(int)>

c001e226 <Semaphore::release()>:
c001e226:	83 ec 0c             	sub    esp,0xc
c001e229:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e22d:	fa                   	cli    
c001e22e:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e233:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e239:	8d 48 01             	lea    ecx,[eax+0x1]
c001e23c:	89 0d 24 0c 03 c0    	mov    DWORD PTR ds:0xc0030c24,ecx
c001e242:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e245:	85 c9                	test   ecx,ecx
c001e247:	74 3c                	je     c001e285 <Semaphore::release()+0x5f>
c001e249:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e24c:	83 ec 0c             	sub    esp,0xc
c001e24f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e252:	51                   	push   ecx
c001e253:	e8 e6 fa ff ff       	call   c001dd3e <unblockTask(ThreadControlBlock*)>
c001e258:	a1 24 0c 03 c0       	mov    eax,ds:0xc0030c24
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	48                   	dec    eax
c001e261:	a3 24 0c 03 c0       	mov    ds:0xc0030c24,eax
c001e266:	85 c0                	test   eax,eax
c001e268:	75 09                	jne    c001e273 <Semaphore::release()+0x4d>
c001e26a:	a1 20 0c 03 c0       	mov    eax,ds:0xc0030c20
c001e26f:	85 c0                	test   eax,eax
c001e271:	75 17                	jne    c001e28a <Semaphore::release()+0x64>
c001e273:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e278:	48                   	dec    eax
c001e279:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e27e:	75 01                	jne    c001e281 <Semaphore::release()+0x5b>
c001e280:	fb                   	sti    
c001e281:	83 c4 0c             	add    esp,0xc
c001e284:	c3                   	ret    
c001e285:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e288:	eb d7                	jmp    c001e261 <Semaphore::release()+0x3b>
c001e28a:	c7 05 20 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c20,0x0
c001e294:	e8 22 f6 ff ff       	call   c001d8bb <schedule()>
c001e299:	eb d8                	jmp    c001e273 <Semaphore::release()+0x4d>

c001e29b <__static_initialization_and_destruction_0(int, int)>:
c001e29b:	83 ec 0c             	sub    esp,0xc
c001e29e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e2a3:	0f 85 88 00 00 00    	jne    c001e331 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2a9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e2b1:	75 7e                	jne    c001e331 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2b3:	83 ec 0c             	sub    esp,0xc
c001e2b6:	68 44 0c 03 c0       	push   0xc0030c44
c001e2bb:	e8 00 a7 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2c0:	83 c4 10             	add    esp,0x10
c001e2c3:	83 ec 04             	sub    esp,0x4
c001e2c6:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e2cb:	68 44 0c 03 c0       	push   0xc0030c44
c001e2d0:	68 74 89 02 c0       	push   0xc0028974
c001e2d5:	e8 8c 41 ff ff       	call   c0012466 <__cxa_atexit>
c001e2da:	83 c4 10             	add    esp,0x10
c001e2dd:	83 ec 0c             	sub    esp,0xc
c001e2e0:	68 38 0c 03 c0       	push   0xc0030c38
c001e2e5:	e8 d6 a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2ea:	83 c4 10             	add    esp,0x10
c001e2ed:	83 ec 04             	sub    esp,0x4
c001e2f0:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e2f5:	68 38 0c 03 c0       	push   0xc0030c38
c001e2fa:	68 74 89 02 c0       	push   0xc0028974
c001e2ff:	e8 62 41 ff ff       	call   c0012466 <__cxa_atexit>
c001e304:	83 c4 10             	add    esp,0x10
c001e307:	83 ec 0c             	sub    esp,0xc
c001e30a:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e30f:	e8 ac a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e314:	83 c4 10             	add    esp,0x10
c001e317:	83 ec 04             	sub    esp,0x4
c001e31a:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e31f:	68 2c 0c 03 c0       	push   0xc0030c2c
c001e324:	68 74 89 02 c0       	push   0xc0028974
c001e329:	e8 38 41 ff ff       	call   c0012466 <__cxa_atexit>
c001e32e:	83 c4 10             	add    esp,0x10
c001e331:	90                   	nop
c001e332:	83 c4 0c             	add    esp,0xc
c001e335:	c3                   	ret    

c001e336 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e336:	83 ec 0c             	sub    esp,0xc
c001e339:	83 ec 08             	sub    esp,0x8
c001e33c:	68 ff ff 00 00       	push   0xffff
c001e341:	6a 01                	push   0x1
c001e343:	e8 53 ff ff ff       	call   c001e29b <__static_initialization_and_destruction_0(int, int)>
c001e348:	83 c4 10             	add    esp,0x10
c001e34b:	83 c4 0c             	add    esp,0xc
c001e34e:	c3                   	ret    

c001e34f <Vm::inbv(unsigned short)>:
c001e34f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e353:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e358:	75 06                	jne    c001e360 <Vm::inbv(unsigned short)+0x11>
c001e35a:	a0 8c 0c 03 c0       	mov    al,ds:0xc0030c8c
c001e35f:	c3                   	ret    
c001e360:	ec                   	in     al,dx
c001e361:	c3                   	ret    

c001e362 <Vm::outbv(unsigned short, unsigned char)>:
c001e362:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e366:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e36a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e36f:	75 25                	jne    c001e396 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e371:	8b 0d 8c 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c8c
c001e377:	8d 51 01             	lea    edx,[ecx+0x1]
c001e37a:	88 81 a0 0c 03 c0    	mov    BYTE PTR [ecx-0x3ffcf360],al
c001e380:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c001e386:	83 fa 20             	cmp    edx,0x20
c001e389:	75 0c                	jne    c001e397 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e38b:	c7 05 8c 0c 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030c8c,0x1f
c001e395:	c3                   	ret    
c001e396:	ee                   	out    dx,al
c001e397:	c3                   	ret    

c001e398 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e398:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e39d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e3a2:	c1 e0 04             	shl    eax,0x4
c001e3a5:	01 d0                	add    eax,edx
c001e3a7:	c3                   	ret    

c001e3a8 <Vm::getSegment(unsigned int)>:
c001e3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ac:	c1 e8 10             	shr    eax,0x10
c001e3af:	c3                   	ret    

c001e3b0 <Vm::getOffset(unsigned int)>:
c001e3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3b4:	c3                   	ret    

c001e3b5 <Vm::mainloop2()>:
c001e3b5:	83 ec 18             	sub    esp,0x18
c001e3b8:	fa                   	cli    
c001e3b9:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e3bf:	6a 02                	push   0x2
c001e3c1:	c6 05 85 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c85,0x1
c001e3c8:	e8 9e f6 ff ff       	call   c001da6b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3d2:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e3d6:	52                   	push   edx
c001e3d7:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e3db:	52                   	push   edx
c001e3dc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e3e0:	52                   	push   edx
c001e3e1:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e3e5:	50                   	push   eax
c001e3e6:	e8 0f 1f fe ff       	call   c00002fa <goToVM86>
c001e3eb:	83 c4 2c             	add    esp,0x2c
c001e3ee:	c3                   	ret    

c001e3ef <Vm::mainVm8086Loop(void*)>:
c001e3ef:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e3f4:	48                   	dec    eax
c001e3f5:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e3fa:	75 01                	jne    c001e3fd <Vm::mainVm8086Loop(void*)+0xe>
c001e3fc:	fb                   	sti    
c001e3fd:	eb b6                	jmp    c001e3b5 <Vm::mainloop2()>

c001e3ff <Vm::mainloop3(unsigned long)>:
c001e3ff:	83 ec 18             	sub    esp,0x18
c001e402:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e406:	fa                   	cli    
c001e407:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e40d:	6a 02                	push   0x2
c001e40f:	c6 05 84 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c84,0x1
c001e416:	a3 80 0c 03 c0       	mov    ds:0xc0030c80,eax
c001e41b:	e8 4b f6 ff ff       	call   c001da6b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e420:	83 c4 1c             	add    esp,0x1c
c001e423:	eb 90                	jmp    c001e3b5 <Vm::mainloop2()>

c001e425 <Vm::initialise8086()>:
c001e425:	83 ec 0c             	sub    esp,0xc
c001e428:	68 80 00 00 00       	push   0x80
c001e42d:	6a 00                	push   0x0
c001e42f:	68 ef e3 01 c0       	push   0xc001e3ef
c001e434:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001e43a:	e8 57 f2 ff ff       	call   c001d696 <Process::createThread(void (*)(void*), void*, int)>
c001e43f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e446:	a3 88 0c 03 c0       	mov    ds:0xc0030c88,eax
c001e44b:	68 00 01 00 00       	push   0x100
c001e450:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c001e455:	6a 00                	push   0x0
c001e457:	6a 00                	push   0x0
c001e459:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e45f:	e8 14 38 ff ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e464:	83 c4 2c             	add    esp,0x2c
c001e467:	c3                   	ret    

c001e468 <Vm::finish8086()>:
c001e468:	53                   	push   ebx
c001e469:	83 ec 08             	sub    esp,0x8
c001e46c:	fa                   	cli    
c001e46d:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e473:	80 3d 84 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c84,0x0
c001e47a:	75 15                	jne    c001e491 <Vm::finish8086()+0x29>
c001e47c:	e8 3a f4 ff ff       	call   c001d8bb <schedule()>
c001e481:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e486:	48                   	dec    eax
c001e487:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e48c:	75 de                	jne    c001e46c <Vm::finish8086()+0x4>
c001e48e:	fb                   	sti    
c001e48f:	eb db                	jmp    c001e46c <Vm::finish8086()+0x4>
c001e491:	83 ec 0c             	sub    esp,0xc
c001e494:	8b 1d 80 0c 03 c0    	mov    ebx,DWORD PTR ds:0xc0030c80
c001e49a:	ff 35 88 0c 03 c0    	push   DWORD PTR ds:0xc0030c88
c001e4a0:	c6 05 84 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c84,0x0
c001e4a7:	e8 92 f8 ff ff       	call   c001dd3e <unblockTask(ThreadControlBlock*)>
c001e4ac:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e4b1:	83 c4 10             	add    esp,0x10
c001e4b4:	8d 50 ff             	lea    edx,[eax-0x1]
c001e4b7:	89 15 28 0c 03 c0    	mov    DWORD PTR ds:0xc0030c28,edx
c001e4bd:	85 d2                	test   edx,edx
c001e4bf:	75 01                	jne    c001e4c2 <Vm::finish8086()+0x5a>
c001e4c1:	fb                   	sti    
c001e4c2:	89 d8                	mov    eax,ebx
c001e4c4:	83 c4 08             	add    esp,0x8
c001e4c7:	5b                   	pop    ebx
c001e4c8:	c3                   	ret    

c001e4c9 <Vm::getOutput8086(unsigned char*)>:
c001e4c9:	57                   	push   edi
c001e4ca:	8b 0d 8c 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c8c
c001e4d0:	56                   	push   esi
c001e4d1:	be a0 0c 03 c0       	mov    esi,0xc0030ca0
c001e4d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4dc:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c001e4e1:	5e                   	pop    esi
c001e4e2:	c7 05 8c 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c8c,0x0
c001e4ec:	5f                   	pop    edi
c001e4ed:	c3                   	ret    

c001e4ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e4ee:	55                   	push   ebp
c001e4ef:	57                   	push   edi
c001e4f0:	56                   	push   esi
c001e4f1:	53                   	push   ebx
c001e4f2:	83 ec 2c             	sub    esp,0x2c
c001e4f5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e4f9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e4fd:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e501:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e505:	fa                   	cli    
c001e506:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c001e50c:	0f b6 35 85 0c 03 c0 	movzx  esi,BYTE PTR ds:0xc0030c85
c001e513:	89 f0                	mov    eax,esi
c001e515:	84 c0                	test   al,al
c001e517:	75 1d                	jne    c001e536 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e519:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e51d:	e8 99 f3 ff ff       	call   c001d8bb <schedule()>
c001e522:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e527:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e52b:	48                   	dec    eax
c001e52c:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e531:	75 d2                	jne    c001e505 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e533:	fb                   	sti    
c001e534:	eb cf                	jmp    c001e505 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e536:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c001e53b:	c7 05 8c 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c8c,0x0
c001e545:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e549:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e54d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e551:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e555:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e559:	50                   	push   eax
c001e55a:	6a 20                	push   0x20
c001e55c:	6a 00                	push   0x0
c001e55e:	68 a0 0c 03 c0       	push   0xc0030ca0
c001e563:	e8 e8 21 fe ff       	call   c0000750 <memset>
c001e568:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e56f:	e8 28 10 ff ff       	call   c000f59c <malloc>
c001e574:	83 c4 0c             	add    esp,0xc
c001e577:	89 c3                	mov    ebx,eax
c001e579:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c001e57f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e583:	50                   	push   eax
c001e584:	e8 99 45 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c001e589:	83 c4 10             	add    esp,0x10
c001e58c:	85 db                	test   ebx,ebx
c001e58e:	75 0a                	jne    c001e59a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e590:	83 ec 0c             	sub    esp,0xc
c001e593:	68 4c ba 02 c0       	push   0xc002ba4c
c001e598:	eb 3e                	jmp    c001e5d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e59a:	50                   	push   eax
c001e59b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e59f:	50                   	push   eax
c001e5a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e5a4:	50                   	push   eax
c001e5a5:	53                   	push   ebx
c001e5a6:	e8 87 48 ff ff       	call   c0012e32 <File::stat(unsigned long long*, bool*)>
c001e5ab:	83 c4 10             	add    esp,0x10
c001e5ae:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e5b3:	74 0a                	je     c001e5bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e5b5:	83 ec 0c             	sub    esp,0xc
c001e5b8:	68 60 ba 02 c0       	push   0xc002ba60
c001e5bd:	eb 19                	jmp    c001e5d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e5bf:	51                   	push   ecx
c001e5c0:	51                   	push   ecx
c001e5c1:	6a 01                	push   0x1
c001e5c3:	53                   	push   ebx
c001e5c4:	e8 bd 45 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c001e5c9:	83 c4 10             	add    esp,0x10
c001e5cc:	85 c0                	test   eax,eax
c001e5ce:	74 24                	je     c001e5f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e5d0:	83 ec 0c             	sub    esp,0xc
c001e5d3:	68 79 ba 02 c0       	push   0xc002ba79
c001e5d8:	e8 52 b7 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001e5dd:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e5e2:	83 c4 10             	add    esp,0x10
c001e5e5:	48                   	dec    eax
c001e5e6:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e5eb:	85 c0                	test   eax,eax
c001e5ed:	75 01                	jne    c001e5f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e5ef:	fb                   	sti    
c001e5f0:	31 f6                	xor    esi,esi
c001e5f2:	eb 58                	jmp    c001e64c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e5f4:	0f b7 ed             	movzx  ebp,bp
c001e5f7:	50                   	push   eax
c001e5f8:	0f b7 ff             	movzx  edi,di
c001e5fb:	50                   	push   eax
c001e5fc:	55                   	push   ebp
c001e5fd:	57                   	push   edi
c001e5fe:	e8 95 fd ff ff       	call   c001e398 <Vm::realToLinear(unsigned short, unsigned short)>
c001e603:	5a                   	pop    edx
c001e604:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e606:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e60a:	51                   	push   ecx
c001e60b:	50                   	push   eax
c001e60c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e610:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e614:	53                   	push   ebx
c001e615:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e618:	83 c4 14             	add    esp,0x14
c001e61b:	53                   	push   ebx
c001e61c:	e8 c3 45 ff ff       	call   c0012be4 <File::close()>
c001e621:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c001e626:	83 c4 10             	add    esp,0x10
c001e629:	48                   	dec    eax
c001e62a:	c6 05 85 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c85,0x0
c001e631:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c001e636:	85 c0                	test   eax,eax
c001e638:	75 01                	jne    c001e63b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e63a:	fb                   	sti    
c001e63b:	83 ec 0c             	sub    esp,0xc
c001e63e:	ff 35 88 0c 03 c0    	push   DWORD PTR ds:0xc0030c88
c001e644:	e8 f5 f6 ff ff       	call   c001dd3e <unblockTask(ThreadControlBlock*)>
c001e649:	83 c4 10             	add    esp,0x10
c001e64c:	83 c4 2c             	add    esp,0x2c
c001e64f:	89 f0                	mov    eax,esi
c001e651:	5b                   	pop    ebx
c001e652:	5e                   	pop    esi
c001e653:	5f                   	pop    edi
c001e654:	5d                   	pop    ebp
c001e655:	c3                   	ret    

c001e656 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e656:	57                   	push   edi
c001e657:	56                   	push   esi
c001e658:	53                   	push   ebx
c001e659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e661:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e665:	83 e8 06             	sub    eax,0x6
c001e668:	0f b7 c0             	movzx  eax,ax
c001e66b:	50                   	push   eax
c001e66c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e671:	50                   	push   eax
c001e672:	e8 21 fd ff ff       	call   c001e398 <Vm::realToLinear(unsigned short, unsigned short)>
c001e677:	5a                   	pop    edx
c001e678:	5e                   	pop    esi
c001e679:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e67c:	8d 56 fa             	lea    edx,[esi-0x6]
c001e67f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e685:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e688:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e68b:	83 c2 02             	add    edx,0x2
c001e68e:	66 89 10             	mov    WORD PTR [eax],dx
c001e691:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e694:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e698:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e69b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e69f:	89 d6                	mov    esi,edx
c001e6a1:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e6a7:	66 81 e6 ff fd       	and    si,0xfdff
c001e6ac:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e6b0:	74 07                	je     c001e6b9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e6b2:	89 d6                	mov    esi,edx
c001e6b4:	66 81 ce 00 02       	or     si,0x200
c001e6b9:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e6bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e6c6:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e6ce:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e6d1:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e6d9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e6dc:	5b                   	pop    ebx
c001e6dd:	5e                   	pop    esi
c001e6de:	5f                   	pop    edi
c001e6df:	c3                   	ret    

c001e6e0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e6e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6ea:	c1 e0 04             	shl    eax,0x4
c001e6ed:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e6f0:	c3                   	ret    

c001e6f1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e6f1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6f6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6fb:	c1 e0 04             	shl    eax,0x4
c001e6fe:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e702:	c3                   	ret    

c001e703 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e703:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e708:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e70d:	c1 e0 04             	shl    eax,0x4
c001e710:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e713:	c3                   	ret    

c001e714 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e714:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e719:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e71e:	c1 e0 04             	shl    eax,0x4
c001e721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e725:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e728:	c3                   	ret    

c001e729 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e729:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e72e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e733:	c1 e0 04             	shl    eax,0x4
c001e736:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e73a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e73e:	c3                   	ret    

c001e73f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e73f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e744:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e749:	c1 e0 04             	shl    eax,0x4
c001e74c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e750:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e753:	c3                   	ret    

c001e754 <Vm::faultHandler(regs*)>:
c001e754:	55                   	push   ebp
c001e755:	57                   	push   edi
c001e756:	56                   	push   esi
c001e757:	53                   	push   ebx
c001e758:	83 ec 1c             	sub    esp,0x1c
c001e75b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e75f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e762:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e766:	0f b7 f8             	movzx  edi,ax
c001e769:	52                   	push   edx
c001e76a:	0f b7 c0             	movzx  eax,ax
c001e76d:	50                   	push   eax
c001e76e:	e8 25 fc ff ff       	call   c001e398 <Vm::realToLinear(unsigned short, unsigned short)>
c001e773:	5a                   	pop    edx
c001e774:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e777:	59                   	pop    ecx
c001e778:	89 c1                	mov    ecx,eax
c001e77a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e77d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e781:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e786:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e78a:	0f b7 c5             	movzx  eax,bp
c001e78d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e791:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e795:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e799:	e8 fa fb ff ff       	call   c001e398 <Vm::realToLinear(unsigned short, unsigned short)>
c001e79e:	5e                   	pop    esi
c001e79f:	be 06 00 00 00       	mov    esi,0x6
c001e7a4:	5a                   	pop    edx
c001e7a5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e7aa:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e7af:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e7b2:	80 fa 9d             	cmp    dl,0x9d
c001e7b5:	0f 84 2c 02 00 00    	je     c001e9e7 <Vm::faultHandler(regs*)+0x293>
c001e7bb:	0f 87 91 00 00 00    	ja     c001e852 <Vm::faultHandler(regs*)+0xfe>
c001e7c1:	80 fa 66             	cmp    dl,0x66
c001e7c4:	0f 84 98 01 00 00    	je     c001e962 <Vm::faultHandler(regs*)+0x20e>
c001e7ca:	77 47                	ja     c001e813 <Vm::faultHandler(regs*)+0xbf>
c001e7cc:	80 fa 36             	cmp    dl,0x36
c001e7cf:	0f 84 80 01 00 00    	je     c001e955 <Vm::faultHandler(regs*)+0x201>
c001e7d5:	77 1a                	ja     c001e7f1 <Vm::faultHandler(regs*)+0x9d>
c001e7d7:	80 fa 26             	cmp    dl,0x26
c001e7da:	0f 84 4e 01 00 00    	je     c001e92e <Vm::faultHandler(regs*)+0x1da>
c001e7e0:	80 fa 2e             	cmp    dl,0x2e
c001e7e3:	0f 85 e2 05 00 00    	jne    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e7e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e7ec:	31 f6                	xor    esi,esi
c001e7ee:	41                   	inc    ecx
c001e7ef:	eb be                	jmp    c001e7af <Vm::faultHandler(regs*)+0x5b>
c001e7f1:	80 fa 64             	cmp    dl,0x64
c001e7f4:	0f 84 41 01 00 00    	je     c001e93b <Vm::faultHandler(regs*)+0x1e7>
c001e7fa:	0f 87 48 01 00 00    	ja     c001e948 <Vm::faultHandler(regs*)+0x1f4>
c001e800:	80 fa 3e             	cmp    dl,0x3e
c001e803:	0f 85 c2 05 00 00    	jne    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e809:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e80c:	be 01 00 00 00       	mov    esi,0x1
c001e811:	eb db                	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e813:	80 fa 6d             	cmp    dl,0x6d
c001e816:	0f 84 ec 02 00 00    	je     c001eb08 <Vm::faultHandler(regs*)+0x3b4>
c001e81c:	77 17                	ja     c001e835 <Vm::faultHandler(regs*)+0xe1>
c001e81e:	80 fa 67             	cmp    dl,0x67
c001e821:	0f 84 48 01 00 00    	je     c001e96f <Vm::faultHandler(regs*)+0x21b>
c001e827:	80 fa 6c             	cmp    dl,0x6c
c001e82a:	0f 84 69 02 00 00    	je     c001ea99 <Vm::faultHandler(regs*)+0x345>
c001e830:	e9 96 05 00 00       	jmp    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e835:	80 fa 6f             	cmp    dl,0x6f
c001e838:	0f 84 f4 03 00 00    	je     c001ec32 <Vm::faultHandler(regs*)+0x4de>
c001e83e:	0f 82 59 03 00 00    	jb     c001eb9d <Vm::faultHandler(regs*)+0x449>
c001e844:	80 fa 9c             	cmp    dl,0x9c
c001e847:	0f 84 2f 01 00 00    	je     c001e97c <Vm::faultHandler(regs*)+0x228>
c001e84d:	e9 79 05 00 00       	jmp    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e852:	80 fa ec             	cmp    dl,0xec
c001e855:	0f 84 14 05 00 00    	je     c001ed6f <Vm::faultHandler(regs*)+0x61b>
c001e85b:	77 7b                	ja     c001e8d8 <Vm::faultHandler(regs*)+0x184>
c001e85d:	80 fa e4             	cmp    dl,0xe4
c001e860:	0f 84 93 04 00 00    	je     c001ecf9 <Vm::faultHandler(regs*)+0x5a5>
c001e866:	77 53                	ja     c001e8bb <Vm::faultHandler(regs*)+0x167>
c001e868:	80 fa cd             	cmp    dl,0xcd
c001e86b:	0f 84 d9 01 00 00    	je     c001ea4a <Vm::faultHandler(regs*)+0x2f6>
c001e871:	80 fa cf             	cmp    dl,0xcf
c001e874:	0f 85 51 05 00 00    	jne    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e87a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e87d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e880:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e884:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e887:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e88b:	81 ca 00 02 02 00    	or     edx,0x20200
c001e891:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e894:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e898:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e89e:	66 c1 e8 09          	shr    ax,0x9
c001e8a2:	83 e0 01             	and    eax,0x1
c001e8a5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e8a8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8ab:	83 c0 06             	add    eax,0x6
c001e8ae:	25 ff ff 00 00       	and    eax,0xffff
c001e8b3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e8b6:	e9 0c 05 00 00       	jmp    c001edc7 <Vm::faultHandler(regs*)+0x673>
c001e8bb:	80 fa e6             	cmp    dl,0xe6
c001e8be:	0f 84 7f 04 00 00    	je     c001ed43 <Vm::faultHandler(regs*)+0x5ef>
c001e8c4:	0f 82 4b 04 00 00    	jb     c001ed15 <Vm::faultHandler(regs*)+0x5c1>
c001e8ca:	80 fa e7             	cmp    dl,0xe7
c001e8cd:	0f 84 87 04 00 00    	je     c001ed5a <Vm::faultHandler(regs*)+0x606>
c001e8d3:	e9 f3 04 00 00       	jmp    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e8d8:	80 fa ef             	cmp    dl,0xef
c001e8db:	0f 84 d1 04 00 00    	je     c001edb2 <Vm::faultHandler(regs*)+0x65e>
c001e8e1:	77 28                	ja     c001e90b <Vm::faultHandler(regs*)+0x1b7>
c001e8e3:	80 fa ed             	cmp    dl,0xed
c001e8e6:	0f 84 9f 04 00 00    	je     c001ed8b <Vm::faultHandler(regs*)+0x637>
c001e8ec:	80 fa ee             	cmp    dl,0xee
c001e8ef:	0f 85 d6 04 00 00    	jne    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e8f5:	50                   	push   eax
c001e8f6:	50                   	push   eax
c001e8f7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e8fb:	50                   	push   eax
c001e8fc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e900:	50                   	push   eax
c001e901:	e8 5c fa ff ff       	call   c001e362 <Vm::outbv(unsigned short, unsigned char)>
c001e906:	e9 9f 04 00 00       	jmp    c001edaa <Vm::faultHandler(regs*)+0x656>
c001e90b:	80 fa fa             	cmp    dl,0xfa
c001e90e:	0f 84 69 01 00 00    	je     c001ea7d <Vm::faultHandler(regs*)+0x329>
c001e914:	80 fa fb             	cmp    dl,0xfb
c001e917:	0f 84 6e 01 00 00    	je     c001ea8b <Vm::faultHandler(regs*)+0x337>
c001e91d:	80 fa f3             	cmp    dl,0xf3
c001e920:	0f 85 a5 04 00 00    	jne    c001edcb <Vm::faultHandler(regs*)+0x677>
c001e926:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e929:	e9 c0 fe ff ff       	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e92e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e931:	be 02 00 00 00       	mov    esi,0x2
c001e936:	e9 b3 fe ff ff       	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e93b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e93e:	be 03 00 00 00       	mov    esi,0x3
c001e943:	e9 a6 fe ff ff       	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e948:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e94b:	be 04 00 00 00       	mov    esi,0x4
c001e950:	e9 99 fe ff ff       	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e955:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e958:	be 05 00 00 00       	mov    esi,0x5
c001e95d:	e9 8c fe ff ff       	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e962:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e965:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e96a:	e9 7f fe ff ff       	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e96f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e972:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e977:	e9 72 fe ff ff       	jmp    c001e7ee <Vm::faultHandler(regs*)+0x9a>
c001e97c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e97f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e983:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e988:	74 30                	je     c001e9ba <Vm::faultHandler(regs*)+0x266>
c001e98a:	83 e9 04             	sub    ecx,0x4
c001e98d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e993:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e999:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e99c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e99f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9a5:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e9a9:	0f 84 15 04 00 00    	je     c001edc4 <Vm::faultHandler(regs*)+0x670>
c001e9af:	80 ce 02             	or     dh,0x2
c001e9b2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e9b5:	e9 0a 04 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001e9ba:	83 e9 02             	sub    ecx,0x2
c001e9bd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e9c3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e9c6:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e9ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9d0:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e9d4:	74 05                	je     c001e9db <Vm::faultHandler(regs*)+0x287>
c001e9d6:	80 ce 02             	or     dh,0x2
c001e9d9:	eb 03                	jmp    c001e9de <Vm::faultHandler(regs*)+0x28a>
c001e9db:	80 e6 fd             	and    dh,0xfd
c001e9de:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e9e2:	e9 dd 03 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001e9e7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e9ec:	74 2a                	je     c001ea18 <Vm::faultHandler(regs*)+0x2c4>
c001e9ee:	8b 10                	mov    edx,DWORD PTR [eax]
c001e9f0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e9f6:	81 ca 00 02 02 00    	or     edx,0x20200
c001e9fc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e9ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea01:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea07:	c1 e8 09             	shr    eax,0x9
c001ea0a:	83 e0 01             	and    eax,0x1
c001ea0d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea10:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea13:	83 c0 04             	add    eax,0x4
c001ea16:	eb 25                	jmp    c001ea3d <Vm::faultHandler(regs*)+0x2e9>
c001ea18:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ea1b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea21:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea24:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ea27:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea2d:	66 c1 e8 09          	shr    ax,0x9
c001ea31:	83 e0 01             	and    eax,0x1
c001ea34:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea37:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea3a:	83 c0 02             	add    eax,0x2
c001ea3d:	25 ff ff 00 00       	and    eax,0xffff
c001ea42:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea45:	e9 7a 03 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001ea4a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea4e:	3c ee                	cmp    al,0xee
c001ea50:	75 10                	jne    c001ea62 <Vm::faultHandler(regs*)+0x30e>
c001ea52:	83 ec 0c             	sub    esp,0xc
c001ea55:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ea58:	e8 a2 f9 ff ff       	call   c001e3ff <Vm::mainloop3(unsigned long)>
c001ea5d:	e9 4b 03 00 00       	jmp    c001edad <Vm::faultHandler(regs*)+0x659>
c001ea62:	83 ec 0c             	sub    esp,0xc
c001ea65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ea69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea6d:	51                   	push   ecx
c001ea6e:	50                   	push   eax
c001ea6f:	53                   	push   ebx
c001ea70:	e8 e1 fb ff ff       	call   c001e656 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ea75:	83 c4 20             	add    esp,0x20
c001ea78:	e9 4a 03 00 00       	jmp    c001edc7 <Vm::faultHandler(regs*)+0x673>
c001ea7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea86:	e9 39 03 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001ea8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea90:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ea94:	e9 2b 03 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001ea99:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ea9c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eaa1:	74 2b                	je     c001eace <Vm::faultHandler(regs*)+0x37a>
c001eaa3:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eaaa:	76 22                	jbe    c001eace <Vm::faultHandler(regs*)+0x37a>
c001eaac:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eab0:	50                   	push   eax
c001eab1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eab5:	50                   	push   eax
c001eab6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eaba:	50                   	push   eax
c001eabb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eabf:	50                   	push   eax
c001eac0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eac4:	50                   	push   eax
c001eac5:	6a 6c                	push   0x6c
c001eac7:	6a 6c                	push   0x6c
c001eac9:	e9 b9 01 00 00       	jmp    c001ec87 <Vm::faultHandler(regs*)+0x533>
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ead5:	0f b7 f6             	movzx  esi,si
c001ead8:	50                   	push   eax
c001ead9:	e8 71 f8 ff ff       	call   c001e34f <Vm::inbv(unsigned short)>
c001eade:	83 c4 0c             	add    esp,0xc
c001eae1:	0f b6 c0             	movzx  eax,al
c001eae4:	50                   	push   eax
c001eae5:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001eae9:	50                   	push   eax
c001eaea:	56                   	push   esi
c001eaeb:	e8 24 fc ff ff       	call   c001e714 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eaf0:	83 c4 10             	add    esp,0x10
c001eaf3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eaf6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eafa:	74 03                	je     c001eaff <Vm::faultHandler(regs*)+0x3ab>
c001eafc:	48                   	dec    eax
c001eafd:	eb 01                	jmp    c001eb00 <Vm::faultHandler(regs*)+0x3ac>
c001eaff:	40                   	inc    eax
c001eb00:	0f b7 c0             	movzx  eax,ax
c001eb03:	e9 8d 00 00 00       	jmp    c001eb95 <Vm::faultHandler(regs*)+0x441>
c001eb08:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb0e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb13:	74 29                	je     c001eb3e <Vm::faultHandler(regs*)+0x3ea>
c001eb15:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb1a:	76 22                	jbe    c001eb3e <Vm::faultHandler(regs*)+0x3ea>
c001eb1c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb20:	50                   	push   eax
c001eb21:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb25:	50                   	push   eax
c001eb26:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb2a:	50                   	push   eax
c001eb2b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb2f:	50                   	push   eax
c001eb30:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb34:	50                   	push   eax
c001eb35:	6a 6d                	push   0x6d
c001eb37:	6a 6d                	push   0x6d
c001eb39:	e9 49 01 00 00       	jmp    c001ec87 <Vm::faultHandler(regs*)+0x533>
c001eb3e:	0f b7 c8             	movzx  ecx,ax
c001eb41:	0f b7 f6             	movzx  esi,si
c001eb44:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eb47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb4c:	74 20                	je     c001eb6e <Vm::faultHandler(regs*)+0x41a>
c001eb4e:	ed                   	in     eax,dx
c001eb4f:	55                   	push   ebp
c001eb50:	50                   	push   eax
c001eb51:	51                   	push   ecx
c001eb52:	56                   	push   esi
c001eb53:	e8 e7 fb ff ff       	call   c001e73f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eb58:	83 c4 10             	add    esp,0x10
c001eb5b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb5e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb62:	74 05                	je     c001eb69 <Vm::faultHandler(regs*)+0x415>
c001eb64:	83 e8 04             	sub    eax,0x4
c001eb67:	eb 27                	jmp    c001eb90 <Vm::faultHandler(regs*)+0x43c>
c001eb69:	83 c0 04             	add    eax,0x4
c001eb6c:	eb 22                	jmp    c001eb90 <Vm::faultHandler(regs*)+0x43c>
c001eb6e:	66 ed                	in     ax,dx
c001eb70:	0f b7 c0             	movzx  eax,ax
c001eb73:	57                   	push   edi
c001eb74:	50                   	push   eax
c001eb75:	51                   	push   ecx
c001eb76:	56                   	push   esi
c001eb77:	e8 ad fb ff ff       	call   c001e729 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eb7c:	83 c4 10             	add    esp,0x10
c001eb7f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb82:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb86:	74 05                	je     c001eb8d <Vm::faultHandler(regs*)+0x439>
c001eb88:	83 e8 02             	sub    eax,0x2
c001eb8b:	eb 03                	jmp    c001eb90 <Vm::faultHandler(regs*)+0x43c>
c001eb8d:	83 c0 02             	add    eax,0x2
c001eb90:	25 ff ff 00 00       	and    eax,0xffff
c001eb95:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eb98:	e9 27 02 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001eb9d:	8d 46 ff             	lea    eax,[esi-0x1]
c001eba0:	3c 05                	cmp    al,0x5
c001eba2:	77 24                	ja     c001ebc8 <Vm::faultHandler(regs*)+0x474>
c001eba4:	0f b6 c0             	movzx  eax,al
c001eba7:	ff 24 85 ec ba 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4514]
c001ebae:	0f b7 fd             	movzx  edi,bp
c001ebb1:	eb 15                	jmp    c001ebc8 <Vm::faultHandler(regs*)+0x474>
c001ebb3:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ebb7:	eb 0f                	jmp    c001ebc8 <Vm::faultHandler(regs*)+0x474>
c001ebb9:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ebbd:	eb 09                	jmp    c001ebc8 <Vm::faultHandler(regs*)+0x474>
c001ebbf:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ebc3:	eb 03                	jmp    c001ebc8 <Vm::faultHandler(regs*)+0x474>
c001ebc5:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ebc8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ebcb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebd0:	74 29                	je     c001ebfb <Vm::faultHandler(regs*)+0x4a7>
c001ebd2:	3d ff ff 00 00       	cmp    eax,0xffff
c001ebd7:	76 22                	jbe    c001ebfb <Vm::faultHandler(regs*)+0x4a7>
c001ebd9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebdd:	50                   	push   eax
c001ebde:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebe2:	50                   	push   eax
c001ebe3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebe7:	50                   	push   eax
c001ebe8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebec:	50                   	push   eax
c001ebed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebf1:	50                   	push   eax
c001ebf2:	6a 6e                	push   0x6e
c001ebf4:	6a 6e                	push   0x6e
c001ebf6:	e9 8c 00 00 00       	jmp    c001ec87 <Vm::faultHandler(regs*)+0x533>
c001ebfb:	0f b7 c0             	movzx  eax,ax
c001ebfe:	52                   	push   edx
c001ebff:	52                   	push   edx
c001ec00:	50                   	push   eax
c001ec01:	57                   	push   edi
c001ec02:	e8 d9 fa ff ff       	call   c001e6e0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ec07:	59                   	pop    ecx
c001ec08:	0f b6 c0             	movzx  eax,al
c001ec0b:	5e                   	pop    esi
c001ec0c:	50                   	push   eax
c001ec0d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec11:	50                   	push   eax
c001ec12:	e8 4b f7 ff ff       	call   c001e362 <Vm::outbv(unsigned short, unsigned char)>
c001ec17:	83 c4 10             	add    esp,0x10
c001ec1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ec1d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec21:	74 03                	je     c001ec26 <Vm::faultHandler(regs*)+0x4d2>
c001ec23:	48                   	dec    eax
c001ec24:	eb 01                	jmp    c001ec27 <Vm::faultHandler(regs*)+0x4d3>
c001ec26:	40                   	inc    eax
c001ec27:	0f b7 c0             	movzx  eax,ax
c001ec2a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ec2d:	e9 92 01 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001ec32:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec35:	3c 05                	cmp    al,0x5
c001ec37:	77 1f                	ja     c001ec58 <Vm::faultHandler(regs*)+0x504>
c001ec39:	0f b6 c0             	movzx  eax,al
c001ec3c:	ff 24 85 04 bb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd44fc]
c001ec43:	89 ef                	mov    edi,ebp
c001ec45:	eb 11                	jmp    c001ec58 <Vm::faultHandler(regs*)+0x504>
c001ec47:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ec4a:	eb 0c                	jmp    c001ec58 <Vm::faultHandler(regs*)+0x504>
c001ec4c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ec4f:	eb 07                	jmp    c001ec58 <Vm::faultHandler(regs*)+0x504>
c001ec51:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ec54:	eb 02                	jmp    c001ec58 <Vm::faultHandler(regs*)+0x504>
c001ec56:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ec58:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ec5b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec60:	74 37                	je     c001ec99 <Vm::faultHandler(regs*)+0x545>
c001ec62:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ec68:	76 2f                	jbe    c001ec99 <Vm::faultHandler(regs*)+0x545>
c001ec6a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec6e:	50                   	push   eax
c001ec6f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec73:	50                   	push   eax
c001ec74:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec78:	50                   	push   eax
c001ec79:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec7d:	50                   	push   eax
c001ec7e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec82:	50                   	push   eax
c001ec83:	6a 6f                	push   0x6f
c001ec85:	6a 6f                	push   0x6f
c001ec87:	68 92 ba 02 c0       	push   0xc002ba92
c001ec8c:	e8 33 39 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001ec91:	83 c4 20             	add    esp,0x20
c001ec94:	e9 86 01 00 00       	jmp    c001ee1f <Vm::faultHandler(regs*)+0x6cb>
c001ec99:	0f b7 d7             	movzx  edx,di
c001ec9c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ec9f:	0f b7 c6             	movzx  eax,si
c001eca2:	81 e1 00 04 00 00    	and    ecx,0x400
c001eca8:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ecab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecb0:	74 1d                	je     c001eccf <Vm::faultHandler(regs*)+0x57b>
c001ecb2:	55                   	push   ebp
c001ecb3:	55                   	push   ebp
c001ecb4:	50                   	push   eax
c001ecb5:	52                   	push   edx
c001ecb6:	e8 48 fa ff ff       	call   c001e703 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ecbb:	83 c4 10             	add    esp,0x10
c001ecbe:	89 fa                	mov    edx,edi
c001ecc0:	ef                   	out    dx,eax
c001ecc1:	85 c9                	test   ecx,ecx
c001ecc3:	74 05                	je     c001ecca <Vm::faultHandler(regs*)+0x576>
c001ecc5:	83 ee 04             	sub    esi,0x4
c001ecc8:	eb 21                	jmp    c001eceb <Vm::faultHandler(regs*)+0x597>
c001ecca:	83 c6 04             	add    esi,0x4
c001eccd:	eb 1c                	jmp    c001eceb <Vm::faultHandler(regs*)+0x597>
c001eccf:	55                   	push   ebp
c001ecd0:	55                   	push   ebp
c001ecd1:	50                   	push   eax
c001ecd2:	52                   	push   edx
c001ecd3:	e8 19 fa ff ff       	call   c001e6f1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ecd8:	83 c4 10             	add    esp,0x10
c001ecdb:	89 fa                	mov    edx,edi
c001ecdd:	66 ef                	out    dx,ax
c001ecdf:	85 c9                	test   ecx,ecx
c001ece1:	74 05                	je     c001ece8 <Vm::faultHandler(regs*)+0x594>
c001ece3:	83 ee 02             	sub    esi,0x2
c001ece6:	eb 03                	jmp    c001eceb <Vm::faultHandler(regs*)+0x597>
c001ece8:	83 c6 02             	add    esi,0x2
c001eceb:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ecf1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ecf4:	e9 cb 00 00 00       	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001ecf9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed00:	83 ec 0c             	sub    esp,0xc
c001ed03:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed07:	50                   	push   eax
c001ed08:	e8 42 f6 ff ff       	call   c001e34f <Vm::inbv(unsigned short)>
c001ed0d:	0f b6 c0             	movzx  eax,al
c001ed10:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed13:	eb 3f                	jmp    c001ed54 <Vm::faultHandler(regs*)+0x600>
c001ed15:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed1a:	74 07                	je     c001ed23 <Vm::faultHandler(regs*)+0x5cf>
c001ed1c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed20:	ed                   	in     eax,dx
c001ed21:	eb 14                	jmp    c001ed37 <Vm::faultHandler(regs*)+0x5e3>
c001ed23:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ed26:	66 31 f6             	xor    si,si
c001ed29:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ed2c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed30:	66 ed                	in     ax,dx
c001ed32:	0f b7 c0             	movzx  eax,ax
c001ed35:	09 f0                	or     eax,esi
c001ed37:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ed3a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed3e:	e9 84 00 00 00       	jmp    c001edc7 <Vm::faultHandler(regs*)+0x673>
c001ed43:	52                   	push   edx
c001ed44:	52                   	push   edx
c001ed45:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ed49:	50                   	push   eax
c001ed4a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed4e:	50                   	push   eax
c001ed4f:	e8 0e f6 ff ff       	call   c001e362 <Vm::outbv(unsigned short, unsigned char)>
c001ed54:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed58:	eb 53                	jmp    c001edad <Vm::faultHandler(regs*)+0x659>
c001ed5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ed5d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed61:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed66:	74 03                	je     c001ed6b <Vm::faultHandler(regs*)+0x617>
c001ed68:	ef                   	out    dx,eax
c001ed69:	eb cf                	jmp    c001ed3a <Vm::faultHandler(regs*)+0x5e6>
c001ed6b:	66 ef                	out    dx,ax
c001ed6d:	eb cb                	jmp    c001ed3a <Vm::faultHandler(regs*)+0x5e6>
c001ed6f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed76:	83 ec 0c             	sub    esp,0xc
c001ed79:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed7d:	50                   	push   eax
c001ed7e:	e8 cc f5 ff ff       	call   c001e34f <Vm::inbv(unsigned short)>
c001ed83:	0f b6 c0             	movzx  eax,al
c001ed86:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed89:	eb 1f                	jmp    c001edaa <Vm::faultHandler(regs*)+0x656>
c001ed8b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ed8e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed93:	74 03                	je     c001ed98 <Vm::faultHandler(regs*)+0x644>
c001ed95:	ed                   	in     eax,dx
c001ed96:	eb 0d                	jmp    c001eda5 <Vm::faultHandler(regs*)+0x651>
c001ed98:	66 ed                	in     ax,dx
c001ed9a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ed9d:	0f b7 c0             	movzx  eax,ax
c001eda0:	66 31 d2             	xor    dx,dx
c001eda3:	09 d0                	or     eax,edx
c001eda5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eda8:	eb 1a                	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001edaa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001edad:	83 c4 10             	add    esp,0x10
c001edb0:	eb 15                	jmp    c001edc7 <Vm::faultHandler(regs*)+0x673>
c001edb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001edb5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001edb8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edbd:	74 03                	je     c001edc2 <Vm::faultHandler(regs*)+0x66e>
c001edbf:	ef                   	out    dx,eax
c001edc0:	eb 02                	jmp    c001edc4 <Vm::faultHandler(regs*)+0x670>
c001edc2:	66 ef                	out    dx,ax
c001edc4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001edc7:	b0 01                	mov    al,0x1
c001edc9:	eb 56                	jmp    c001ee21 <Vm::faultHandler(regs*)+0x6cd>
c001edcb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edcf:	50                   	push   eax
c001edd0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001edd4:	50                   	push   eax
c001edd5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001edd9:	50                   	push   eax
c001edda:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001edde:	50                   	push   eax
c001eddf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ede3:	50                   	push   eax
c001ede4:	52                   	push   edx
c001ede5:	52                   	push   edx
c001ede6:	68 bf ba 02 c0       	push   0xc002babf
c001edeb:	e8 d4 37 ff ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c001edf0:	83 c4 20             	add    esp,0x20
c001edf3:	83 ec 0c             	sub    esp,0xc
c001edf6:	6a 60                	push   0x60
c001edf8:	e8 52 f5 ff ff       	call   c001e34f <Vm::inbv(unsigned short)>
c001edfd:	83 c4 10             	add    esp,0x10
c001ee00:	3c 1c                	cmp    al,0x1c
c001ee02:	74 04                	je     c001ee08 <Vm::faultHandler(regs*)+0x6b4>
c001ee04:	3c 5a                	cmp    al,0x5a
c001ee06:	75 eb                	jne    c001edf3 <Vm::faultHandler(regs*)+0x69f>
c001ee08:	3c 5a                	cmp    al,0x5a
c001ee0a:	74 04                	je     c001ee10 <Vm::faultHandler(regs*)+0x6bc>
c001ee0c:	3c 1c                	cmp    al,0x1c
c001ee0e:	75 0f                	jne    c001ee1f <Vm::faultHandler(regs*)+0x6cb>
c001ee10:	83 ec 0c             	sub    esp,0xc
c001ee13:	6a 60                	push   0x60
c001ee15:	e8 35 f5 ff ff       	call   c001e34f <Vm::inbv(unsigned short)>
c001ee1a:	83 c4 10             	add    esp,0x10
c001ee1d:	eb e9                	jmp    c001ee08 <Vm::faultHandler(regs*)+0x6b4>
c001ee1f:	31 c0                	xor    eax,eax
c001ee21:	83 c4 1c             	add    esp,0x1c
c001ee24:	5b                   	pop    ebx
c001ee25:	5e                   	pop    esi
c001ee26:	5f                   	pop    edi
c001ee27:	5d                   	pop    ebp
c001ee28:	c3                   	ret    

c001ee29 <Vm::fpuInternalTo32(unsigned long long)>:
c001ee29:	57                   	push   edi
c001ee2a:	56                   	push   esi
c001ee2b:	53                   	push   ebx
c001ee2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee34:	89 d6                	mov    esi,edx
c001ee36:	89 d7                	mov    edi,edx
c001ee38:	89 c1                	mov    ecx,eax
c001ee3a:	c1 ef 14             	shr    edi,0x14
c001ee3d:	89 d3                	mov    ebx,edx
c001ee3f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ee45:	31 d2                	xor    edx,edx
c001ee47:	89 f8                	mov    eax,edi
c001ee49:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ee4f:	bf ff 00 00 00       	mov    edi,0xff
c001ee54:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ee59:	83 d2 ff             	adc    edx,0xffffffff
c001ee5c:	39 c7                	cmp    edi,eax
c001ee5e:	bf 00 00 00 00       	mov    edi,0x0
c001ee63:	19 d7                	sbb    edi,edx
c001ee65:	72 15                	jb     c001ee7c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ee67:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ee6b:	c1 e0 17             	shl    eax,0x17
c001ee6e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ee74:	09 f1                	or     ecx,esi
c001ee76:	09 c1                	or     ecx,eax
c001ee78:	89 cf                	mov    edi,ecx
c001ee7a:	eb 02                	jmp    c001ee7e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ee7c:	31 ff                	xor    edi,edi
c001ee7e:	89 f8                	mov    eax,edi
c001ee80:	5b                   	pop    ebx
c001ee81:	5e                   	pop    esi
c001ee82:	5f                   	pop    edi
c001ee83:	c3                   	ret    

c001ee84 <Vm::fpuInternalTo64(unsigned long long)>:
c001ee84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee8c:	c3                   	ret    

c001ee8d <Vm::fpu32ToInternal(unsigned int)>:
c001ee8d:	57                   	push   edi
c001ee8e:	31 ff                	xor    edi,edi
c001ee90:	56                   	push   esi
c001ee91:	53                   	push   ebx
c001ee92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee96:	89 cb                	mov    ebx,ecx
c001ee98:	89 ce                	mov    esi,ecx
c001ee9a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eea0:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eea6:	c1 e9 17             	shr    ecx,0x17
c001eea9:	89 f0                	mov    eax,esi
c001eeab:	0f b6 d1             	movzx  edx,cl
c001eeae:	81 c2 80 03 00 00    	add    edx,0x380
c001eeb4:	89 d1                	mov    ecx,edx
c001eeb6:	89 fa                	mov    edx,edi
c001eeb8:	c1 e1 14             	shl    ecx,0x14
c001eebb:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eebf:	c1 e0 1d             	shl    eax,0x1d
c001eec2:	89 d7                	mov    edi,edx
c001eec4:	89 c6                	mov    esi,eax
c001eec6:	89 ca                	mov    edx,ecx
c001eec8:	89 f0                	mov    eax,esi
c001eeca:	09 fa                	or     edx,edi
c001eecc:	09 da                	or     edx,ebx
c001eece:	5b                   	pop    ebx
c001eecf:	5e                   	pop    esi
c001eed0:	5f                   	pop    edi
c001eed1:	c3                   	ret    

c001eed2 <Vm::fpu64ToInternal(unsigned long long)>:
c001eed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eeda:	c3                   	ret    

c001eedb <Vm::fpuFloatToLong(unsigned long long)>:
c001eedb:	57                   	push   edi
c001eedc:	31 c0                	xor    eax,eax
c001eede:	56                   	push   esi
c001eedf:	31 d2                	xor    edx,edx
c001eee1:	53                   	push   ebx
c001eee2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eee6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eeea:	89 d9                	mov    ecx,ebx
c001eeec:	c1 e9 14             	shr    ecx,0x14
c001eeef:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001eef5:	89 cf                	mov    edi,ecx
c001eef7:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001eefd:	78 33                	js     c001ef32 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eeff:	89 d9                	mov    ecx,ebx
c001ef01:	89 f0                	mov    eax,esi
c001ef03:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ef09:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ef0f:	89 ca                	mov    edx,ecx
c001ef11:	b9 34 00 00 00       	mov    ecx,0x34
c001ef16:	29 f9                	sub    ecx,edi
c001ef18:	0f ad d0             	shrd   eax,edx,cl
c001ef1b:	d3 fa                	sar    edx,cl
c001ef1d:	f6 c1 20             	test   cl,0x20
c001ef20:	74 05                	je     c001ef27 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ef22:	89 d0                	mov    eax,edx
c001ef24:	c1 fa 1f             	sar    edx,0x1f
c001ef27:	85 db                	test   ebx,ebx
c001ef29:	79 07                	jns    c001ef32 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef2b:	f7 d8                	neg    eax
c001ef2d:	83 d2 00             	adc    edx,0x0
c001ef30:	f7 da                	neg    edx
c001ef32:	5b                   	pop    ebx
c001ef33:	5e                   	pop    esi
c001ef34:	5f                   	pop    edi
c001ef35:	c3                   	ret    

c001ef36 <Vm::fpuULongToFloat(unsigned long long)>:
c001ef36:	57                   	push   edi
c001ef37:	31 c9                	xor    ecx,ecx
c001ef39:	56                   	push   esi
c001ef3a:	53                   	push   ebx
c001ef3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef3f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ef43:	0f ba e7 14          	bt     edi,0x14
c001ef47:	72 07                	jb     c001ef50 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ef49:	01 f6                	add    esi,esi
c001ef4b:	11 ff                	adc    edi,edi
c001ef4d:	41                   	inc    ecx
c001ef4e:	eb f3                	jmp    c001ef43 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ef50:	89 fa                	mov    edx,edi
c001ef52:	89 f0                	mov    eax,esi
c001ef54:	bb 33 04 00 00       	mov    ebx,0x433
c001ef59:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ef5f:	29 cb                	sub    ebx,ecx
c001ef61:	89 d9                	mov    ecx,ebx
c001ef63:	5b                   	pop    ebx
c001ef64:	c1 e1 14             	shl    ecx,0x14
c001ef67:	5e                   	pop    esi
c001ef68:	09 ca                	or     edx,ecx
c001ef6a:	5f                   	pop    edi
c001ef6b:	c3                   	ret    

c001ef6c <Vm::fpuLongToFloat(long long)>:
c001ef6c:	56                   	push   esi
c001ef6d:	31 c0                	xor    eax,eax
c001ef6f:	53                   	push   ebx
c001ef70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ef74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef78:	39 c8                	cmp    eax,ecx
c001ef7a:	19 d8                	sbb    eax,ebx
c001ef7c:	7d 04                	jge    c001ef82 <Vm::fpuLongToFloat(long long)+0x16>
c001ef7e:	31 f6                	xor    esi,esi
c001ef80:	eb 0c                	jmp    c001ef8e <Vm::fpuLongToFloat(long long)+0x22>
c001ef82:	f7 d9                	neg    ecx
c001ef84:	be 01 00 00 00       	mov    esi,0x1
c001ef89:	83 d3 00             	adc    ebx,0x0
c001ef8c:	f7 db                	neg    ebx
c001ef8e:	31 c0                	xor    eax,eax
c001ef90:	0f ba e3 14          	bt     ebx,0x14
c001ef94:	72 07                	jb     c001ef9d <Vm::fpuLongToFloat(long long)+0x31>
c001ef96:	01 c9                	add    ecx,ecx
c001ef98:	11 db                	adc    ebx,ebx
c001ef9a:	40                   	inc    eax
c001ef9b:	eb f3                	jmp    c001ef90 <Vm::fpuLongToFloat(long long)+0x24>
c001ef9d:	ba 33 04 00 00       	mov    edx,0x433
c001efa2:	29 c2                	sub    edx,eax
c001efa4:	89 c8                	mov    eax,ecx
c001efa6:	c1 e2 14             	shl    edx,0x14
c001efa9:	89 d9                	mov    ecx,ebx
c001efab:	89 f3                	mov    ebx,esi
c001efad:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efb3:	09 ca                	or     edx,ecx
c001efb5:	84 db                	test   bl,bl
c001efb7:	74 06                	je     c001efbf <Vm::fpuLongToFloat(long long)+0x53>
c001efb9:	81 ca 00 00 00 80    	or     edx,0x80000000
c001efbf:	5b                   	pop    ebx
c001efc0:	5e                   	pop    esi
c001efc1:	c3                   	ret    

c001efc2 <Vm::fpuGet0()>:
c001efc2:	31 c0                	xor    eax,eax
c001efc4:	31 d2                	xor    edx,edx
c001efc6:	c3                   	ret    

c001efc7 <Vm::fpuGet1()>:
c001efc7:	b8 01 00 00 00       	mov    eax,0x1
c001efcc:	31 d2                	xor    edx,edx
c001efce:	c3                   	ret    

c001efcf <Vm::fpuGetPi()>:
c001efcf:	b8 03 00 00 00       	mov    eax,0x3
c001efd4:	31 d2                	xor    edx,edx
c001efd6:	c3                   	ret    

c001efd7 <Vm::fpuGetLog2E()>:
c001efd7:	83 ec 18             	sub    esp,0x18
c001efda:	68 1c bb 02 c0       	push   0xc002bb1c
c001efdf:	e8 4b ad ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001efe4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001efe9:	31 d2                	xor    edx,edx
c001efeb:	83 c4 1c             	add    esp,0x1c
c001efee:	c3                   	ret    

c001efef <Vm::fpuGetLogE2()>:
c001efef:	83 ec 18             	sub    esp,0x18
c001eff2:	68 28 bb 02 c0       	push   0xc002bb28
c001eff7:	e8 33 ad ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001effc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f001:	31 d2                	xor    edx,edx
c001f003:	83 c4 1c             	add    esp,0x1c
c001f006:	c3                   	ret    

c001f007 <Vm::fpuGetLog210()>:
c001f007:	83 ec 18             	sub    esp,0x18
c001f00a:	68 34 bb 02 c0       	push   0xc002bb34
c001f00f:	e8 1b ad ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001f014:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f019:	31 d2                	xor    edx,edx
c001f01b:	83 c4 1c             	add    esp,0x1c
c001f01e:	c3                   	ret    

c001f01f <Vm::fpuGetLog102()>:
c001f01f:	83 ec 18             	sub    esp,0x18
c001f022:	68 41 bb 02 c0       	push   0xc002bb41
c001f027:	e8 03 ad ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001f02c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f031:	31 d2                	xor    edx,edx
c001f033:	83 c4 1c             	add    esp,0x1c
c001f036:	c3                   	ret    

c001f037 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f037:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f03b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f03f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f043:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f047:	0f 92 c0             	setb   al
c001f04a:	c3                   	ret    

c001f04b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f04b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f053:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f057:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f05b:	09 c2                	or     edx,eax
c001f05d:	0f 94 c0             	sete   al
c001f060:	c3                   	ret    

c001f061 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f061:	57                   	push   edi
c001f062:	56                   	push   esi
c001f063:	53                   	push   ebx
c001f064:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f068:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f06c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f070:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f074:	57                   	push   edi
c001f075:	56                   	push   esi
c001f076:	53                   	push   ebx
c001f077:	51                   	push   ecx
c001f078:	e8 ce ff ff ff       	call   c001f04b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f07d:	83 c4 10             	add    esp,0x10
c001f080:	88 c2                	mov    dl,al
c001f082:	31 c0                	xor    eax,eax
c001f084:	84 d2                	test   dl,dl
c001f086:	75 0c                	jne    c001f094 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f088:	57                   	push   edi
c001f089:	56                   	push   esi
c001f08a:	53                   	push   ebx
c001f08b:	51                   	push   ecx
c001f08c:	e8 a6 ff ff ff       	call   c001f037 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f091:	83 c4 10             	add    esp,0x10
c001f094:	83 e0 01             	and    eax,0x1
c001f097:	5b                   	pop    ebx
c001f098:	88 c1                	mov    cl,al
c001f09a:	83 e2 01             	and    edx,0x1
c001f09d:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f0a2:	c1 e2 06             	shl    edx,0x6
c001f0a5:	83 e0 ba             	and    eax,0xffffffba
c001f0a8:	5e                   	pop    esi
c001f0a9:	09 c8                	or     eax,ecx
c001f0ab:	5f                   	pop    edi
c001f0ac:	09 d0                	or     eax,edx
c001f0ae:	a2 c1 0c 03 c0       	mov    ds:0xc0030cc1,al
c001f0b3:	c3                   	ret    

c001f0b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f0b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0bc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f0c0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f0c4:	c3                   	ret    

c001f0c5 <Vm::fpuAbs(unsigned long long)>:
c001f0c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0cd:	c3                   	ret    

c001f0ce <Vm::fpuChs(unsigned long long)>:
c001f0ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0d6:	f7 d8                	neg    eax
c001f0d8:	83 d2 00             	adc    edx,0x0
c001f0db:	f7 da                	neg    edx
c001f0dd:	c3                   	ret    

c001f0de <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f0de:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f0e2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f0e7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f0eb:	eb c7                	jmp    c001f0b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f0ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f0ed:	53                   	push   ebx
c001f0ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0fe:	0f af ca             	imul   ecx,edx
c001f101:	0f af d8             	imul   ebx,eax
c001f104:	f7 e2                	mul    edx
c001f106:	01 d9                	add    ecx,ebx
c001f108:	5b                   	pop    ebx
c001f109:	01 ca                	add    edx,ecx
c001f10b:	c3                   	ret    

c001f10c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11f:	e8 e0 74 00 00       	call   c0026604 <__udivdi3>
c001f124:	83 c4 1c             	add    esp,0x1c
c001f127:	c3                   	ret    

c001f128 <Vm::fpuSquare(unsigned long long)>:
c001f128:	50                   	push   eax
c001f129:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f12d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f131:	52                   	push   edx
c001f132:	50                   	push   eax
c001f133:	52                   	push   edx
c001f134:	50                   	push   eax
c001f135:	e8 b3 ff ff ff       	call   c001f0ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f13a:	83 c4 14             	add    esp,0x14
c001f13d:	c3                   	ret    

c001f13e <Vm::fpuGetReg(int)>:
c001f13e:	83 ec 0c             	sub    esp,0xc
c001f141:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f146:	76 10                	jbe    c001f158 <Vm::fpuGetReg(int)+0x1a>
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	68 4e bb 02 c0       	push   0xc002bb4e
c001f150:	e8 da ab ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001f155:	83 c4 10             	add    esp,0x10
c001f158:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f15d:	b9 08 00 00 00       	mov    ecx,0x8
c001f162:	c0 e8 03             	shr    al,0x3
c001f165:	83 e0 07             	and    eax,0x7
c001f168:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f16c:	99                   	cdq    
c001f16d:	f7 f9                	idiv   ecx
c001f16f:	8b 04 d5 c4 0c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf33c]
c001f176:	8b 14 d5 c8 0c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf338]
c001f17d:	83 c4 0c             	add    esp,0xc
c001f180:	c3                   	ret    

c001f181 <Vm::fpuSetReg(int, unsigned long long)>:
c001f181:	57                   	push   edi
c001f182:	56                   	push   esi
c001f183:	52                   	push   edx
c001f184:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f188:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f18c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f191:	76 10                	jbe    c001f1a3 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f193:	83 ec 0c             	sub    esp,0xc
c001f196:	68 61 bb 02 c0       	push   0xc002bb61
c001f19b:	e8 8f ab ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c001f1a0:	83 c4 10             	add    esp,0x10
c001f1a3:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f1a8:	b9 08 00 00 00       	mov    ecx,0x8
c001f1ad:	c0 e8 03             	shr    al,0x3
c001f1b0:	83 e0 07             	and    eax,0x7
c001f1b3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f1b7:	99                   	cdq    
c001f1b8:	f7 f9                	idiv   ecx
c001f1ba:	89 34 d5 c4 0c 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf33c],esi
c001f1c1:	89 3c d5 c8 0c 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf338],edi
c001f1c8:	58                   	pop    eax
c001f1c9:	5e                   	pop    esi
c001f1ca:	5f                   	pop    edi
c001f1cb:	c3                   	ret    

c001f1cc <Vm::fpuPush(unsigned long long)>:
c001f1cc:	a0 c1 0c 03 c0       	mov    al,ds:0xc0030cc1
c001f1d1:	c0 e8 03             	shr    al,0x3
c001f1d4:	83 e0 07             	and    eax,0x7
c001f1d7:	83 c0 07             	add    eax,0x7
c001f1da:	88 c2                	mov    dl,al
c001f1dc:	83 e0 07             	and    eax,0x7
c001f1df:	83 e2 07             	and    edx,0x7
c001f1e2:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f1e9:	8a 15 c1 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030cc1
c001f1ef:	83 e2 c7             	and    edx,0xffffffc7
c001f1f2:	09 ca                	or     edx,ecx
c001f1f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1f8:	88 15 c1 0c 03 c0    	mov    BYTE PTR ds:0xc0030cc1,dl
c001f1fe:	89 0c c5 c8 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf338],ecx
c001f205:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f209:	89 14 c5 c4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf33c],edx
c001f210:	a1 04 0d 03 c0       	mov    eax,ds:0xc0030d04
c001f215:	83 f8 08             	cmp    eax,0x8
c001f218:	75 08                	jne    c001f222 <Vm::fpuPush(unsigned long long)+0x56>
c001f21a:	80 0d c0 0c 03 c0 40 	or     BYTE PTR ds:0xc0030cc0,0x40
c001f221:	c3                   	ret    
c001f222:	40                   	inc    eax
c001f223:	a3 04 0d 03 c0       	mov    ds:0xc0030d04,eax
c001f228:	c3                   	ret    

c001f229 <Vm::fpuPop()>:
c001f229:	8a 0d c1 0c 03 c0    	mov    cl,BYTE PTR ds:0xc0030cc1
c001f22f:	53                   	push   ebx
c001f230:	c0 e9 03             	shr    cl,0x3
c001f233:	8a 1d c1 0c 03 c0    	mov    bl,BYTE PTR ds:0xc0030cc1
c001f239:	83 e1 07             	and    ecx,0x7
c001f23c:	83 e3 c7             	and    ebx,0xffffffc7
c001f23f:	8b 04 cd c4 0c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf33c]
c001f246:	8b 14 cd c8 0c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf338]
c001f24d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f254:	83 e1 38             	and    ecx,0x38
c001f257:	09 d9                	or     ecx,ebx
c001f259:	88 0d c1 0c 03 c0    	mov    BYTE PTR ds:0xc0030cc1,cl
c001f25f:	8b 0d 04 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d04
c001f265:	85 c9                	test   ecx,ecx
c001f267:	74 09                	je     c001f272 <Vm::fpuPop()+0x49>
c001f269:	49                   	dec    ecx
c001f26a:	89 0d 04 0d 03 c0    	mov    DWORD PTR ds:0xc0030d04,ecx
c001f270:	eb 07                	jmp    c001f279 <Vm::fpuPop()+0x50>
c001f272:	80 0d c0 0c 03 c0 40 	or     BYTE PTR ds:0xc0030cc0,0x40
c001f279:	5b                   	pop    ebx
c001f27a:	c3                   	ret    

c001f27b <Vm::x87Handler(regs*)>:
c001f27b:	55                   	push   ebp
c001f27c:	57                   	push   edi
c001f27d:	56                   	push   esi
c001f27e:	53                   	push   ebx
c001f27f:	83 ec 1c             	sub    esp,0x1c
c001f282:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f286:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f28b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f28e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f296:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f29a:	50                   	push   eax
c001f29b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f29f:	50                   	push   eax
c001f2a0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2a4:	50                   	push   eax
c001f2a5:	53                   	push   ebx
c001f2a6:	e8 9d a1 ff ff       	call   c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f2ab:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f2ae:	83 c4 10             	add    esp,0x10
c001f2b1:	89 c6                	mov    esi,eax
c001f2b3:	80 fa d9             	cmp    dl,0xd9
c001f2b6:	0f 85 52 01 00 00    	jne    c001f40e <Vm::x87Handler(regs*)+0x193>
c001f2bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2c0:	8d 50 20             	lea    edx,[eax+0x20]
c001f2c3:	80 fa 0e             	cmp    dl,0xe
c001f2c6:	0f 87 86 00 00 00    	ja     c001f352 <Vm::x87Handler(regs*)+0xd7>
c001f2cc:	0f b6 d2             	movzx  edx,dl
c001f2cf:	ff 24 95 74 bb 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd448c]
c001f2d6:	e8 e7 fc ff ff       	call   c001efc2 <Vm::fpuGet0()>
c001f2db:	eb 05                	jmp    c001f2e2 <Vm::x87Handler(regs*)+0x67>
c001f2dd:	e8 e5 fc ff ff       	call   c001efc7 <Vm::fpuGet1()>
c001f2e2:	57                   	push   edi
c001f2e3:	57                   	push   edi
c001f2e4:	52                   	push   edx
c001f2e5:	50                   	push   eax
c001f2e6:	e8 e1 fe ff ff       	call   c001f1cc <Vm::fpuPush(unsigned long long)>
c001f2eb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	b0 01                	mov    al,0x1
c001f2f4:	e9 e3 09 00 00       	jmp    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001f2f9:	83 ec 0c             	sub    esp,0xc
c001f2fc:	6a 00                	push   0x0
c001f2fe:	e8 3b fe ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f303:	59                   	pop    ecx
c001f304:	5e                   	pop    esi
c001f305:	52                   	push   edx
c001f306:	50                   	push   eax
c001f307:	e8 c2 fd ff ff       	call   c001f0ce <Vm::fpuChs(unsigned long long)>
c001f30c:	eb 13                	jmp    c001f321 <Vm::x87Handler(regs*)+0xa6>
c001f30e:	83 ec 0c             	sub    esp,0xc
c001f311:	6a 00                	push   0x0
c001f313:	e8 26 fe ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f318:	5f                   	pop    edi
c001f319:	5d                   	pop    ebp
c001f31a:	52                   	push   edx
c001f31b:	50                   	push   eax
c001f31c:	e8 a4 fd ff ff       	call   c001f0c5 <Vm::fpuAbs(unsigned long long)>
c001f321:	83 c4 0c             	add    esp,0xc
c001f324:	52                   	push   edx
c001f325:	50                   	push   eax
c001f326:	6a 00                	push   0x0
c001f328:	e8 54 fe ff ff       	call   c001f181 <Vm::fpuSetReg(int, unsigned long long)>
c001f32d:	eb bc                	jmp    c001f2eb <Vm::x87Handler(regs*)+0x70>
c001f32f:	e8 d3 fc ff ff       	call   c001f007 <Vm::fpuGetLog210()>
c001f334:	eb ac                	jmp    c001f2e2 <Vm::x87Handler(regs*)+0x67>
c001f336:	e8 9c fc ff ff       	call   c001efd7 <Vm::fpuGetLog2E()>
c001f33b:	eb a5                	jmp    c001f2e2 <Vm::x87Handler(regs*)+0x67>
c001f33d:	e8 8d fc ff ff       	call   c001efcf <Vm::fpuGetPi()>
c001f342:	eb 9e                	jmp    c001f2e2 <Vm::x87Handler(regs*)+0x67>
c001f344:	e8 d6 fc ff ff       	call   c001f01f <Vm::fpuGetLog102()>
c001f349:	eb 97                	jmp    c001f2e2 <Vm::x87Handler(regs*)+0x67>
c001f34b:	e8 9f fc ff ff       	call   c001efef <Vm::fpuGetLogE2()>
c001f350:	eb 90                	jmp    c001f2e2 <Vm::x87Handler(regs*)+0x67>
c001f352:	8d 50 40             	lea    edx,[eax+0x40]
c001f355:	80 fa 07             	cmp    dl,0x7
c001f358:	77 15                	ja     c001f36f <Vm::x87Handler(regs*)+0xf4>
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	2d c0 00 00 00       	sub    eax,0xc0
c001f362:	50                   	push   eax
c001f363:	e8 d6 fd ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f368:	59                   	pop    ecx
c001f369:	5e                   	pop    esi
c001f36a:	e9 75 ff ff ff       	jmp    c001f2e4 <Vm::x87Handler(regs*)+0x69>
c001f36f:	8d 50 38             	lea    edx,[eax+0x38]
c001f372:	80 fa 07             	cmp    dl,0x7
c001f375:	77 3c                	ja     c001f3b3 <Vm::x87Handler(regs*)+0x138>
c001f377:	83 ec 0c             	sub    esp,0xc
c001f37a:	2d c8 00 00 00       	sub    eax,0xc8
c001f37f:	50                   	push   eax
c001f380:	e8 b9 fd ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f385:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f38c:	89 c6                	mov    esi,eax
c001f38e:	89 d7                	mov    edi,edx
c001f390:	e8 a9 fd ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f395:	83 c4 0c             	add    esp,0xc
c001f398:	52                   	push   edx
c001f399:	50                   	push   eax
c001f39a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f39e:	2d c8 00 00 00       	sub    eax,0xc8
c001f3a3:	50                   	push   eax
c001f3a4:	e8 d8 fd ff ff       	call   c001f181 <Vm::fpuSetReg(int, unsigned long long)>
c001f3a9:	83 c4 0c             	add    esp,0xc
c001f3ac:	57                   	push   edi
c001f3ad:	56                   	push   esi
c001f3ae:	e9 73 ff ff ff       	jmp    c001f326 <Vm::x87Handler(regs*)+0xab>
c001f3b3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3b7:	84 d2                	test   dl,dl
c001f3b9:	75 0f                	jne    c001f3ca <Vm::x87Handler(regs*)+0x14f>
c001f3bb:	83 ec 0c             	sub    esp,0xc
c001f3be:	ff 36                	push   DWORD PTR [esi]
c001f3c0:	e8 c8 fa ff ff       	call   c001ee8d <Vm::fpu32ToInternal(unsigned int)>
c001f3c5:	e9 bf 00 00 00       	jmp    c001f489 <Vm::x87Handler(regs*)+0x20e>
c001f3ca:	80 fa 03             	cmp    dl,0x3
c001f3cd:	75 13                	jne    c001f3e2 <Vm::x87Handler(regs*)+0x167>
c001f3cf:	e8 55 fe ff ff       	call   c001f229 <Vm::fpuPop()>
c001f3d4:	55                   	push   ebp
c001f3d5:	55                   	push   ebp
c001f3d6:	52                   	push   edx
c001f3d7:	50                   	push   eax
c001f3d8:	e8 4c fa ff ff       	call   c001ee29 <Vm::fpuInternalTo32(unsigned long long)>
c001f3dd:	e9 88 00 00 00       	jmp    c001f46a <Vm::x87Handler(regs*)+0x1ef>
c001f3e2:	80 fa 05             	cmp    dl,0x5
c001f3e5:	75 0e                	jne    c001f3f5 <Vm::x87Handler(regs*)+0x17a>
c001f3e7:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f3ea:	66 a3 c2 0c 03 c0    	mov    ds:0xc0030cc2,ax
c001f3f0:	e9 df 00 00 00       	jmp    c001f4d4 <Vm::x87Handler(regs*)+0x259>
c001f3f5:	31 c0                	xor    eax,eax
c001f3f7:	80 fa 07             	cmp    dl,0x7
c001f3fa:	0f 85 dc 08 00 00    	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001f400:	66 a1 c2 0c 03 c0    	mov    ax,ds:0xc0030cc2
c001f406:	66 89 06             	mov    WORD PTR [esi],ax
c001f409:	e9 c6 00 00 00       	jmp    c001f4d4 <Vm::x87Handler(regs*)+0x259>
c001f40e:	80 fa d8             	cmp    dl,0xd8
c001f411:	0f 84 c9 00 00 00    	je     c001f4e0 <Vm::x87Handler(regs*)+0x265>
c001f417:	80 fa dc             	cmp    dl,0xdc
c001f41a:	0f 84 0d 02 00 00    	je     c001f62d <Vm::x87Handler(regs*)+0x3b2>
c001f420:	80 fa de             	cmp    dl,0xde
c001f423:	0f 84 cd 02 00 00    	je     c001f6f6 <Vm::x87Handler(regs*)+0x47b>
c001f429:	80 fa dd             	cmp    dl,0xdd
c001f42c:	0f 84 5f 04 00 00    	je     c001f891 <Vm::x87Handler(regs*)+0x616>
c001f432:	80 fa da             	cmp    dl,0xda
c001f435:	0f 84 24 05 00 00    	je     c001f95f <Vm::x87Handler(regs*)+0x6e4>
c001f43b:	80 fa df             	cmp    dl,0xdf
c001f43e:	0f 84 68 05 00 00    	je     c001f9ac <Vm::x87Handler(regs*)+0x731>
c001f444:	31 c0                	xor    eax,eax
c001f446:	80 fa db             	cmp    dl,0xdb
c001f449:	0f 85 8d 08 00 00    	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001f44f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f453:	80 fa 03             	cmp    dl,0x3
c001f456:	0f 85 70 06 00 00    	jne    c001facc <Vm::x87Handler(regs*)+0x851>
c001f45c:	e8 c8 fd ff ff       	call   c001f229 <Vm::fpuPop()>
c001f461:	55                   	push   ebp
c001f462:	55                   	push   ebp
c001f463:	52                   	push   edx
c001f464:	50                   	push   eax
c001f465:	e8 71 fa ff ff       	call   c001eedb <Vm::fpuFloatToLong(unsigned long long)>
c001f46a:	83 c4 10             	add    esp,0x10
c001f46d:	89 06                	mov    DWORD PTR [esi],eax
c001f46f:	eb 63                	jmp    c001f4d4 <Vm::x87Handler(regs*)+0x259>
c001f471:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f475:	84 d2                	test   dl,dl
c001f477:	0f 85 e6 05 00 00    	jne    c001fa63 <Vm::x87Handler(regs*)+0x7e8>
c001f47d:	57                   	push   edi
c001f47e:	57                   	push   edi
c001f47f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f482:	ff 36                	push   DWORD PTR [esi]
c001f484:	e8 49 fa ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001f489:	5e                   	pop    esi
c001f48a:	5f                   	pop    edi
c001f48b:	52                   	push   edx
c001f48c:	50                   	push   eax
c001f48d:	e8 3a fd ff ff       	call   c001f1cc <Vm::fpuPush(unsigned long long)>
c001f492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f496:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f499:	e9 51 fe ff ff       	jmp    c001f2ef <Vm::x87Handler(regs*)+0x74>
c001f49e:	80 fa 03             	cmp    dl,0x3
c001f4a1:	0f 85 d7 06 00 00    	jne    c001fb7e <Vm::x87Handler(regs*)+0x903>
c001f4a7:	57                   	push   edi
c001f4a8:	57                   	push   edi
c001f4a9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4ac:	ff 36                	push   DWORD PTR [esi]
c001f4ae:	e8 1f fa ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001f4b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ba:	89 c6                	mov    esi,eax
c001f4bc:	89 d7                	mov    edi,edx
c001f4be:	e8 7b fc ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f4c3:	57                   	push   edi
c001f4c4:	56                   	push   esi
c001f4c5:	52                   	push   edx
c001f4c6:	50                   	push   eax
c001f4c7:	e8 95 fb ff ff       	call   c001f061 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f4cc:	83 c4 20             	add    esp,0x20
c001f4cf:	e8 55 fd ff ff       	call   c001f229 <Vm::fpuPop()>
c001f4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4d8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f4db:	e9 12 fe ff ff       	jmp    c001f2f2 <Vm::x87Handler(regs*)+0x77>
c001f4e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4e4:	8d 50 40             	lea    edx,[eax+0x40]
c001f4e7:	80 fa 07             	cmp    dl,0x7
c001f4ea:	77 29                	ja     c001f515 <Vm::x87Handler(regs*)+0x29a>
c001f4ec:	83 ec 0c             	sub    esp,0xc
c001f4ef:	2d c0 00 00 00       	sub    eax,0xc0
c001f4f4:	50                   	push   eax
c001f4f5:	e8 44 fc ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f4fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f501:	89 c6                	mov    esi,eax
c001f503:	89 d7                	mov    edi,edx
c001f505:	e8 34 fc ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f50a:	57                   	push   edi
c001f50b:	56                   	push   esi
c001f50c:	52                   	push   edx
c001f50d:	50                   	push   eax
c001f50e:	e8 a1 fb ff ff       	call   c001f0b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f513:	eb 2f                	jmp    c001f544 <Vm::x87Handler(regs*)+0x2c9>
c001f515:	8d 50 38             	lea    edx,[eax+0x38]
c001f518:	80 fa 07             	cmp    dl,0x7
c001f51b:	77 2f                	ja     c001f54c <Vm::x87Handler(regs*)+0x2d1>
c001f51d:	83 ec 0c             	sub    esp,0xc
c001f520:	2d c8 00 00 00       	sub    eax,0xc8
c001f525:	50                   	push   eax
c001f526:	e8 13 fc ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f52b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f532:	89 c6                	mov    esi,eax
c001f534:	89 d7                	mov    edi,edx
c001f536:	e8 03 fc ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f53b:	57                   	push   edi
c001f53c:	56                   	push   esi
c001f53d:	52                   	push   edx
c001f53e:	50                   	push   eax
c001f53f:	e8 a9 fb ff ff       	call   c001f0ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f544:	83 c4 1c             	add    esp,0x1c
c001f547:	e9 d8 fd ff ff       	jmp    c001f324 <Vm::x87Handler(regs*)+0xa9>
c001f54c:	8d 50 30             	lea    edx,[eax+0x30]
c001f54f:	80 fa 07             	cmp    dl,0x7
c001f552:	77 0d                	ja     c001f561 <Vm::x87Handler(regs*)+0x2e6>
c001f554:	83 ec 0c             	sub    esp,0xc
c001f557:	2d d0 00 00 00       	sub    eax,0xd0
c001f55c:	e9 99 03 00 00       	jmp    c001f8fa <Vm::x87Handler(regs*)+0x67f>
c001f561:	8d 50 28             	lea    edx,[eax+0x28]
c001f564:	80 fa 07             	cmp    dl,0x7
c001f567:	77 0d                	ja     c001f576 <Vm::x87Handler(regs*)+0x2fb>
c001f569:	83 ec 0c             	sub    esp,0xc
c001f56c:	2d d8 00 00 00       	sub    eax,0xd8
c001f571:	e9 c0 03 00 00       	jmp    c001f936 <Vm::x87Handler(regs*)+0x6bb>
c001f576:	8d 50 20             	lea    edx,[eax+0x20]
c001f579:	80 fa 07             	cmp    dl,0x7
c001f57c:	77 1b                	ja     c001f599 <Vm::x87Handler(regs*)+0x31e>
c001f57e:	83 ec 0c             	sub    esp,0xc
c001f581:	2d e0 00 00 00       	sub    eax,0xe0
c001f586:	50                   	push   eax
c001f587:	e8 b2 fb ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f58c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f593:	89 c6                	mov    esi,eax
c001f595:	89 d7                	mov    edi,edx
c001f597:	eb 22                	jmp    c001f5bb <Vm::x87Handler(regs*)+0x340>
c001f599:	8d 50 18             	lea    edx,[eax+0x18]
c001f59c:	80 fa 07             	cmp    dl,0x7
c001f59f:	77 2d                	ja     c001f5ce <Vm::x87Handler(regs*)+0x353>
c001f5a1:	83 ec 0c             	sub    esp,0xc
c001f5a4:	6a 00                	push   0x0
c001f5a6:	e8 93 fb ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f5ab:	89 c6                	mov    esi,eax
c001f5ad:	89 d7                	mov    edi,edx
c001f5af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5b3:	2d e8 00 00 00       	sub    eax,0xe8
c001f5b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5bb:	e8 7e fb ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f5c0:	57                   	push   edi
c001f5c1:	56                   	push   esi
c001f5c2:	52                   	push   edx
c001f5c3:	50                   	push   eax
c001f5c4:	e8 15 fb ff ff       	call   c001f0de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5c9:	e9 76 ff ff ff       	jmp    c001f544 <Vm::x87Handler(regs*)+0x2c9>
c001f5ce:	8d 50 10             	lea    edx,[eax+0x10]
c001f5d1:	80 fa 07             	cmp    dl,0x7
c001f5d4:	77 1b                	ja     c001f5f1 <Vm::x87Handler(regs*)+0x376>
c001f5d6:	83 ec 0c             	sub    esp,0xc
c001f5d9:	2d f0 00 00 00       	sub    eax,0xf0
c001f5de:	50                   	push   eax
c001f5df:	e8 5a fb ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f5e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5eb:	89 c6                	mov    esi,eax
c001f5ed:	89 d7                	mov    edi,edx
c001f5ef:	eb 22                	jmp    c001f613 <Vm::x87Handler(regs*)+0x398>
c001f5f1:	3c f7                	cmp    al,0xf7
c001f5f3:	0f 86 d1 03 00 00    	jbe    c001f9ca <Vm::x87Handler(regs*)+0x74f>
c001f5f9:	83 ec 0c             	sub    esp,0xc
c001f5fc:	6a 00                	push   0x0
c001f5fe:	e8 3b fb ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f603:	89 c6                	mov    esi,eax
c001f605:	89 d7                	mov    edi,edx
c001f607:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f60b:	2d f8 00 00 00       	sub    eax,0xf8
c001f610:	89 04 24             	mov    DWORD PTR [esp],eax
c001f613:	e8 26 fb ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f618:	57                   	push   edi
c001f619:	56                   	push   esi
c001f61a:	52                   	push   edx
c001f61b:	50                   	push   eax
c001f61c:	e8 eb fa ff ff       	call   c001f10c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f621:	83 c4 1c             	add    esp,0x1c
c001f624:	52                   	push   edx
c001f625:	50                   	push   eax
c001f626:	6a 00                	push   0x0
c001f628:	e9 51 02 00 00       	jmp    c001f87e <Vm::x87Handler(regs*)+0x603>
c001f62d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f631:	8d 50 40             	lea    edx,[eax+0x40]
c001f634:	80 fa 07             	cmp    dl,0x7
c001f637:	77 37                	ja     c001f670 <Vm::x87Handler(regs*)+0x3f5>
c001f639:	83 ec 0c             	sub    esp,0xc
c001f63c:	2d c0 00 00 00       	sub    eax,0xc0
c001f641:	50                   	push   eax
c001f642:	e8 f7 fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f647:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f64e:	89 c6                	mov    esi,eax
c001f650:	89 d7                	mov    edi,edx
c001f652:	e8 e7 fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f657:	57                   	push   edi
c001f658:	56                   	push   esi
c001f659:	52                   	push   edx
c001f65a:	50                   	push   eax
c001f65b:	e8 54 fa ff ff       	call   c001f0b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f660:	83 c4 1c             	add    esp,0x1c
c001f663:	52                   	push   edx
c001f664:	50                   	push   eax
c001f665:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f669:	2d c0 00 00 00       	sub    eax,0xc0
c001f66e:	eb 3d                	jmp    c001f6ad <Vm::x87Handler(regs*)+0x432>
c001f670:	8d 50 38             	lea    edx,[eax+0x38]
c001f673:	80 fa 07             	cmp    dl,0x7
c001f676:	77 3b                	ja     c001f6b3 <Vm::x87Handler(regs*)+0x438>
c001f678:	83 ec 0c             	sub    esp,0xc
c001f67b:	2d c8 00 00 00       	sub    eax,0xc8
c001f680:	50                   	push   eax
c001f681:	e8 b8 fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f686:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f68d:	89 c6                	mov    esi,eax
c001f68f:	89 d7                	mov    edi,edx
c001f691:	e8 a8 fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f696:	57                   	push   edi
c001f697:	56                   	push   esi
c001f698:	52                   	push   edx
c001f699:	50                   	push   eax
c001f69a:	e8 4e fa ff ff       	call   c001f0ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f69f:	83 c4 1c             	add    esp,0x1c
c001f6a2:	52                   	push   edx
c001f6a3:	50                   	push   eax
c001f6a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6a8:	2d c8 00 00 00       	sub    eax,0xc8
c001f6ad:	50                   	push   eax
c001f6ae:	e9 75 fc ff ff       	jmp    c001f328 <Vm::x87Handler(regs*)+0xad>
c001f6b3:	83 c0 18             	add    eax,0x18
c001f6b6:	3c 07                	cmp    al,0x7
c001f6b8:	0f 87 3b 04 00 00    	ja     c001faf9 <Vm::x87Handler(regs*)+0x87e>
c001f6be:	83 ec 0c             	sub    esp,0xc
c001f6c1:	6a 00                	push   0x0
c001f6c3:	e8 76 fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f6c8:	89 c6                	mov    esi,eax
c001f6ca:	89 d7                	mov    edi,edx
c001f6cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d0:	2d e8 00 00 00       	sub    eax,0xe8
c001f6d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6d8:	e8 61 fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f6dd:	57                   	push   edi
c001f6de:	56                   	push   esi
c001f6df:	52                   	push   edx
c001f6e0:	50                   	push   eax
c001f6e1:	e8 f8 f9 ff ff       	call   c001f0de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6e6:	83 c4 1c             	add    esp,0x1c
c001f6e9:	52                   	push   edx
c001f6ea:	50                   	push   eax
c001f6eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6ef:	2d e8 00 00 00       	sub    eax,0xe8
c001f6f4:	eb b7                	jmp    c001f6ad <Vm::x87Handler(regs*)+0x432>
c001f6f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6fa:	8d 50 40             	lea    edx,[eax+0x40]
c001f6fd:	80 fa 07             	cmp    dl,0x7
c001f700:	77 3a                	ja     c001f73c <Vm::x87Handler(regs*)+0x4c1>
c001f702:	83 ec 0c             	sub    esp,0xc
c001f705:	2d c0 00 00 00       	sub    eax,0xc0
c001f70a:	50                   	push   eax
c001f70b:	e8 2e fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f710:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f717:	89 c6                	mov    esi,eax
c001f719:	89 d7                	mov    edi,edx
c001f71b:	e8 1e fa ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f720:	57                   	push   edi
c001f721:	56                   	push   esi
c001f722:	52                   	push   edx
c001f723:	50                   	push   eax
c001f724:	e8 8b f9 ff ff       	call   c001f0b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f729:	83 c4 1c             	add    esp,0x1c
c001f72c:	52                   	push   edx
c001f72d:	50                   	push   eax
c001f72e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f732:	2d c0 00 00 00       	sub    eax,0xc0
c001f737:	e9 9e 01 00 00       	jmp    c001f8da <Vm::x87Handler(regs*)+0x65f>
c001f73c:	8d 50 20             	lea    edx,[eax+0x20]
c001f73f:	80 fa 07             	cmp    dl,0x7
c001f742:	77 3a                	ja     c001f77e <Vm::x87Handler(regs*)+0x503>
c001f744:	83 ec 0c             	sub    esp,0xc
c001f747:	2d e0 00 00 00       	sub    eax,0xe0
c001f74c:	50                   	push   eax
c001f74d:	e8 ec f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f752:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f759:	89 c6                	mov    esi,eax
c001f75b:	89 d7                	mov    edi,edx
c001f75d:	e8 dc f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f762:	57                   	push   edi
c001f763:	56                   	push   esi
c001f764:	52                   	push   edx
c001f765:	50                   	push   eax
c001f766:	e8 73 f9 ff ff       	call   c001f0de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f76b:	83 c4 1c             	add    esp,0x1c
c001f76e:	52                   	push   edx
c001f76f:	50                   	push   eax
c001f770:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f774:	2d e0 00 00 00       	sub    eax,0xe0
c001f779:	e9 5c 01 00 00       	jmp    c001f8da <Vm::x87Handler(regs*)+0x65f>
c001f77e:	8d 50 18             	lea    edx,[eax+0x18]
c001f781:	80 fa 07             	cmp    dl,0x7
c001f784:	77 3b                	ja     c001f7c1 <Vm::x87Handler(regs*)+0x546>
c001f786:	83 ec 0c             	sub    esp,0xc
c001f789:	6a 00                	push   0x0
c001f78b:	e8 ae f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f790:	89 c6                	mov    esi,eax
c001f792:	89 d7                	mov    edi,edx
c001f794:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f798:	2d e8 00 00 00       	sub    eax,0xe8
c001f79d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7a0:	e8 99 f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f7a5:	57                   	push   edi
c001f7a6:	56                   	push   esi
c001f7a7:	52                   	push   edx
c001f7a8:	50                   	push   eax
c001f7a9:	e8 30 f9 ff ff       	call   c001f0de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7ae:	83 c4 1c             	add    esp,0x1c
c001f7b1:	52                   	push   edx
c001f7b2:	50                   	push   eax
c001f7b3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b7:	2d e8 00 00 00       	sub    eax,0xe8
c001f7bc:	e9 19 01 00 00       	jmp    c001f8da <Vm::x87Handler(regs*)+0x65f>
c001f7c1:	8d 50 38             	lea    edx,[eax+0x38]
c001f7c4:	80 fa 07             	cmp    dl,0x7
c001f7c7:	77 37                	ja     c001f800 <Vm::x87Handler(regs*)+0x585>
c001f7c9:	83 ec 0c             	sub    esp,0xc
c001f7cc:	2d c8 00 00 00       	sub    eax,0xc8
c001f7d1:	50                   	push   eax
c001f7d2:	e8 67 f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f7d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7de:	89 c6                	mov    esi,eax
c001f7e0:	89 d7                	mov    edi,edx
c001f7e2:	e8 57 f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f7e7:	57                   	push   edi
c001f7e8:	56                   	push   esi
c001f7e9:	52                   	push   edx
c001f7ea:	50                   	push   eax
c001f7eb:	e8 fd f8 ff ff       	call   c001f0ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7f0:	83 c4 1c             	add    esp,0x1c
c001f7f3:	52                   	push   edx
c001f7f4:	50                   	push   eax
c001f7f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7f9:	2d c8 00 00 00       	sub    eax,0xc8
c001f7fe:	eb 7d                	jmp    c001f87d <Vm::x87Handler(regs*)+0x602>
c001f800:	3c f7                	cmp    al,0xf7
c001f802:	76 38                	jbe    c001f83c <Vm::x87Handler(regs*)+0x5c1>
c001f804:	83 ec 0c             	sub    esp,0xc
c001f807:	6a 00                	push   0x0
c001f809:	e8 30 f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f80e:	89 c6                	mov    esi,eax
c001f810:	89 d7                	mov    edi,edx
c001f812:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f816:	2d f8 00 00 00       	sub    eax,0xf8
c001f81b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f81e:	e8 1b f9 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f823:	57                   	push   edi
c001f824:	56                   	push   esi
c001f825:	52                   	push   edx
c001f826:	50                   	push   eax
c001f827:	e8 e0 f8 ff ff       	call   c001f10c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f82c:	83 c4 1c             	add    esp,0x1c
c001f82f:	52                   	push   edx
c001f830:	50                   	push   eax
c001f831:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f835:	2d f8 00 00 00       	sub    eax,0xf8
c001f83a:	eb 41                	jmp    c001f87d <Vm::x87Handler(regs*)+0x602>
c001f83c:	8d 50 10             	lea    edx,[eax+0x10]
c001f83f:	80 fa 07             	cmp    dl,0x7
c001f842:	0f 87 5a 01 00 00    	ja     c001f9a2 <Vm::x87Handler(regs*)+0x727>
c001f848:	83 ec 0c             	sub    esp,0xc
c001f84b:	2d f0 00 00 00       	sub    eax,0xf0
c001f850:	50                   	push   eax
c001f851:	e8 e8 f8 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f856:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f85d:	89 c6                	mov    esi,eax
c001f85f:	89 d7                	mov    edi,edx
c001f861:	e8 d8 f8 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f866:	57                   	push   edi
c001f867:	56                   	push   esi
c001f868:	52                   	push   edx
c001f869:	50                   	push   eax
c001f86a:	e8 9d f8 ff ff       	call   c001f10c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f86f:	83 c4 1c             	add    esp,0x1c
c001f872:	52                   	push   edx
c001f873:	50                   	push   eax
c001f874:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f878:	2d f0 00 00 00       	sub    eax,0xf0
c001f87d:	50                   	push   eax
c001f87e:	e8 fe f8 ff ff       	call   c001f181 <Vm::fpuSetReg(int, unsigned long long)>
c001f883:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f887:	e8 9d f9 ff ff       	call   c001f229 <Vm::fpuPop()>
c001f88c:	e9 5e fa ff ff       	jmp    c001f2ef <Vm::x87Handler(regs*)+0x74>
c001f891:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f895:	8d 50 30             	lea    edx,[eax+0x30]
c001f898:	80 fa 07             	cmp    dl,0x7
c001f89b:	77 1d                	ja     c001f8ba <Vm::x87Handler(regs*)+0x63f>
c001f89d:	83 ec 0c             	sub    esp,0xc
c001f8a0:	6a 00                	push   0x0
c001f8a2:	e8 97 f8 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f8a7:	83 c4 0c             	add    esp,0xc
c001f8aa:	52                   	push   edx
c001f8ab:	50                   	push   eax
c001f8ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8b0:	2d d0 00 00 00       	sub    eax,0xd0
c001f8b5:	e9 f3 fd ff ff       	jmp    c001f6ad <Vm::x87Handler(regs*)+0x432>
c001f8ba:	8d 50 28             	lea    edx,[eax+0x28]
c001f8bd:	80 fa 07             	cmp    dl,0x7
c001f8c0:	77 28                	ja     c001f8ea <Vm::x87Handler(regs*)+0x66f>
c001f8c2:	83 ec 0c             	sub    esp,0xc
c001f8c5:	6a 00                	push   0x0
c001f8c7:	e8 72 f8 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f8cc:	83 c4 0c             	add    esp,0xc
c001f8cf:	52                   	push   edx
c001f8d0:	50                   	push   eax
c001f8d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d5:	2d d8 00 00 00       	sub    eax,0xd8
c001f8da:	50                   	push   eax
c001f8db:	e8 a1 f8 ff ff       	call   c001f181 <Vm::fpuSetReg(int, unsigned long long)>
c001f8e0:	e8 44 f9 ff ff       	call   c001f229 <Vm::fpuPop()>
c001f8e5:	e9 01 fa ff ff       	jmp    c001f2eb <Vm::x87Handler(regs*)+0x70>
c001f8ea:	8d 50 20             	lea    edx,[eax+0x20]
c001f8ed:	80 fa 07             	cmp    dl,0x7
c001f8f0:	77 30                	ja     c001f922 <Vm::x87Handler(regs*)+0x6a7>
c001f8f2:	83 ec 0c             	sub    esp,0xc
c001f8f5:	2d e0 00 00 00       	sub    eax,0xe0
c001f8fa:	50                   	push   eax
c001f8fb:	e8 3e f8 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f900:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f907:	89 c6                	mov    esi,eax
c001f909:	89 d7                	mov    edi,edx
c001f90b:	e8 2e f8 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f910:	57                   	push   edi
c001f911:	56                   	push   esi
c001f912:	52                   	push   edx
c001f913:	50                   	push   eax
c001f914:	e8 48 f7 ff ff       	call   c001f061 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f919:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f91d:	e9 54 02 00 00       	jmp    c001fb76 <Vm::x87Handler(regs*)+0x8fb>
c001f922:	8d 50 18             	lea    edx,[eax+0x18]
c001f925:	80 fa 07             	cmp    dl,0x7
c001f928:	0f 87 43 fb ff ff    	ja     c001f471 <Vm::x87Handler(regs*)+0x1f6>
c001f92e:	83 ec 0c             	sub    esp,0xc
c001f931:	2d e8 00 00 00       	sub    eax,0xe8
c001f936:	50                   	push   eax
c001f937:	e8 02 f8 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f93c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f943:	89 c6                	mov    esi,eax
c001f945:	89 d7                	mov    edi,edx
c001f947:	e8 f2 f7 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f94c:	57                   	push   edi
c001f94d:	56                   	push   esi
c001f94e:	52                   	push   edx
c001f94f:	50                   	push   eax
c001f950:	e8 0c f7 ff ff       	call   c001f061 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f955:	83 c4 20             	add    esp,0x20
c001f958:	e8 cc f8 ff ff       	call   c001f229 <Vm::fpuPop()>
c001f95d:	eb 62                	jmp    c001f9c1 <Vm::x87Handler(regs*)+0x746>
c001f95f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f963:	0f 85 0f 01 00 00    	jne    c001fa78 <Vm::x87Handler(regs*)+0x7fd>
c001f969:	83 ec 0c             	sub    esp,0xc
c001f96c:	6a 01                	push   0x1
c001f96e:	e8 cb f7 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f973:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f97a:	89 c6                	mov    esi,eax
c001f97c:	89 d7                	mov    edi,edx
c001f97e:	e8 bb f7 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001f983:	57                   	push   edi
c001f984:	56                   	push   esi
c001f985:	52                   	push   edx
c001f986:	50                   	push   eax
c001f987:	e8 d5 f6 ff ff       	call   c001f061 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f98c:	83 c4 20             	add    esp,0x20
c001f98f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f993:	e8 91 f8 ff ff       	call   c001f229 <Vm::fpuPop()>
c001f998:	e8 8c f8 ff ff       	call   c001f229 <Vm::fpuPop()>
c001f99d:	e9 50 f9 ff ff       	jmp    c001f2f2 <Vm::x87Handler(regs*)+0x77>
c001f9a2:	3c d9                	cmp    al,0xd9
c001f9a4:	0f 85 b5 02 00 00    	jne    c001fc5f <Vm::x87Handler(regs*)+0x9e4>
c001f9aa:	eb bd                	jmp    c001f969 <Vm::x87Handler(regs*)+0x6ee>
c001f9ac:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f9b0:	0f 85 ea 02 00 00    	jne    c001fca0 <Vm::x87Handler(regs*)+0xa25>
c001f9b6:	0f b7 05 c0 0c 03 c0 	movzx  eax,WORD PTR ds:0xc0030cc0
c001f9bd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f9c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9c5:	e9 28 f9 ff ff       	jmp    c001f2f2 <Vm::x87Handler(regs*)+0x77>
c001f9ca:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9ce:	84 d2                	test   dl,dl
c001f9d0:	75 0f                	jne    c001f9e1 <Vm::x87Handler(regs*)+0x766>
c001f9d2:	83 ec 0c             	sub    esp,0xc
c001f9d5:	ff 36                	push   DWORD PTR [esi]
c001f9d7:	e8 b1 f4 ff ff       	call   c001ee8d <Vm::fpu32ToInternal(unsigned int)>
c001f9dc:	e9 2c 01 00 00       	jmp    c001fb0d <Vm::x87Handler(regs*)+0x892>
c001f9e1:	80 fa 01             	cmp    dl,0x1
c001f9e4:	75 0f                	jne    c001f9f5 <Vm::x87Handler(regs*)+0x77a>
c001f9e6:	83 ec 0c             	sub    esp,0xc
c001f9e9:	ff 36                	push   DWORD PTR [esi]
c001f9eb:	e8 9d f4 ff ff       	call   c001ee8d <Vm::fpu32ToInternal(unsigned int)>
c001f9f0:	e9 81 02 00 00       	jmp    c001fc76 <Vm::x87Handler(regs*)+0x9fb>
c001f9f5:	80 fa 04             	cmp    dl,0x4
c001f9f8:	75 0f                	jne    c001fa09 <Vm::x87Handler(regs*)+0x78e>
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	ff 36                	push   DWORD PTR [esi]
c001f9ff:	e8 89 f4 ff ff       	call   c001ee8d <Vm::fpu32ToInternal(unsigned int)>
c001fa04:	e9 86 01 00 00       	jmp    c001fb8f <Vm::x87Handler(regs*)+0x914>
c001fa09:	80 fa 05             	cmp    dl,0x5
c001fa0c:	75 1b                	jne    c001fa29 <Vm::x87Handler(regs*)+0x7ae>
c001fa0e:	83 ec 0c             	sub    esp,0xc
c001fa11:	6a 00                	push   0x0
c001fa13:	e8 26 f7 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fa18:	89 c7                	mov    edi,eax
c001fa1a:	89 d5                	mov    ebp,edx
c001fa1c:	58                   	pop    eax
c001fa1d:	ff 36                	push   DWORD PTR [esi]
c001fa1f:	e8 69 f4 ff ff       	call   c001ee8d <Vm::fpu32ToInternal(unsigned int)>
c001fa24:	e9 a3 01 00 00       	jmp    c001fbcc <Vm::x87Handler(regs*)+0x951>
c001fa29:	80 fa 06             	cmp    dl,0x6
c001fa2c:	75 0f                	jne    c001fa3d <Vm::x87Handler(regs*)+0x7c2>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	ff 36                	push   DWORD PTR [esi]
c001fa33:	e8 55 f4 ff ff       	call   c001ee8d <Vm::fpu32ToInternal(unsigned int)>
c001fa38:	e9 ae 01 00 00       	jmp    c001fbeb <Vm::x87Handler(regs*)+0x970>
c001fa3d:	31 c0                	xor    eax,eax
c001fa3f:	80 fa 07             	cmp    dl,0x7
c001fa42:	0f 85 94 02 00 00    	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	6a 00                	push   0x0
c001fa4d:	e8 ec f6 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fa52:	89 c7                	mov    edi,eax
c001fa54:	89 d5                	mov    ebp,edx
c001fa56:	58                   	pop    eax
c001fa57:	ff 36                	push   DWORD PTR [esi]
c001fa59:	e8 2f f4 ff ff       	call   c001ee8d <Vm::fpu32ToInternal(unsigned int)>
c001fa5e:	e9 cb 01 00 00       	jmp    c001fc2e <Vm::x87Handler(regs*)+0x9b3>
c001fa63:	80 fa 03             	cmp    dl,0x3
c001fa66:	0f 85 d3 01 00 00    	jne    c001fc3f <Vm::x87Handler(regs*)+0x9c4>
c001fa6c:	e8 b8 f7 ff ff       	call   c001f229 <Vm::fpuPop()>
c001fa71:	51                   	push   ecx
c001fa72:	51                   	push   ecx
c001fa73:	e9 de 01 00 00       	jmp    c001fc56 <Vm::x87Handler(regs*)+0x9db>
c001fa78:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa7c:	80 fa 01             	cmp    dl,0x1
c001fa7f:	75 09                	jne    c001fa8a <Vm::x87Handler(regs*)+0x80f>
c001fa81:	57                   	push   edi
c001fa82:	57                   	push   edi
c001fa83:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa85:	e9 e3 01 00 00       	jmp    c001fc6d <Vm::x87Handler(regs*)+0x9f2>
c001fa8a:	80 fa 04             	cmp    dl,0x4
c001fa8d:	75 12                	jne    c001faa1 <Vm::x87Handler(regs*)+0x826>
c001fa8f:	31 d2                	xor    edx,edx
c001fa91:	51                   	push   ecx
c001fa92:	51                   	push   ecx
c001fa93:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa95:	52                   	push   edx
c001fa96:	50                   	push   eax
c001fa97:	e8 d0 f4 ff ff       	call   c001ef6c <Vm::fpuLongToFloat(long long)>
c001fa9c:	e9 ee 00 00 00       	jmp    c001fb8f <Vm::x87Handler(regs*)+0x914>
c001faa1:	31 c0                	xor    eax,eax
c001faa3:	80 fa 07             	cmp    dl,0x7
c001faa6:	0f 85 30 02 00 00    	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	6a 00                	push   0x0
c001fab1:	e8 88 f6 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fab6:	89 c7                	mov    edi,eax
c001fab8:	89 d5                	mov    ebp,edx
c001faba:	58                   	pop    eax
c001fabb:	8b 06                	mov    eax,DWORD PTR [esi]
c001fabd:	5a                   	pop    edx
c001fabe:	31 d2                	xor    edx,edx
c001fac0:	52                   	push   edx
c001fac1:	50                   	push   eax
c001fac2:	e8 a5 f4 ff ff       	call   c001ef6c <Vm::fpuLongToFloat(long long)>
c001fac7:	e9 62 01 00 00       	jmp    c001fc2e <Vm::x87Handler(regs*)+0x9b3>
c001facc:	84 d2                	test   dl,dl
c001face:	75 0d                	jne    c001fadd <Vm::x87Handler(regs*)+0x862>
c001fad0:	31 d2                	xor    edx,edx
c001fad2:	55                   	push   ebp
c001fad3:	55                   	push   ebp
c001fad4:	8b 06                	mov    eax,DWORD PTR [esi]
c001fad6:	52                   	push   edx
c001fad7:	50                   	push   eax
c001fad8:	e9 d3 01 00 00       	jmp    c001fcb0 <Vm::x87Handler(regs*)+0xa35>
c001fadd:	31 c0                	xor    eax,eax
c001fadf:	80 fa 02             	cmp    dl,0x2
c001fae2:	0f 85 f4 01 00 00    	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	6a 00                	push   0x0
c001faed:	e8 4c f6 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001faf2:	59                   	pop    ecx
c001faf3:	5f                   	pop    edi
c001faf4:	e9 6a f9 ff ff       	jmp    c001f463 <Vm::x87Handler(regs*)+0x1e8>
c001faf9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fafd:	84 d2                	test   dl,dl
c001faff:	75 2a                	jne    c001fb2b <Vm::x87Handler(regs*)+0x8b0>
c001fb01:	50                   	push   eax
c001fb02:	50                   	push   eax
c001fb03:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb06:	ff 36                	push   DWORD PTR [esi]
c001fb08:	e8 c5 f3 ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001fb0d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb14:	89 c6                	mov    esi,eax
c001fb16:	89 d7                	mov    edi,edx
c001fb18:	e8 21 f6 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fb1d:	57                   	push   edi
c001fb1e:	56                   	push   esi
c001fb1f:	52                   	push   edx
c001fb20:	50                   	push   eax
c001fb21:	e8 8e f5 ff ff       	call   c001f0b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb26:	e9 64 01 00 00       	jmp    c001fc8f <Vm::x87Handler(regs*)+0xa14>
c001fb2b:	80 fa 01             	cmp    dl,0x1
c001fb2e:	75 11                	jne    c001fb41 <Vm::x87Handler(regs*)+0x8c6>
c001fb30:	50                   	push   eax
c001fb31:	50                   	push   eax
c001fb32:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb35:	ff 36                	push   DWORD PTR [esi]
c001fb37:	e8 96 f3 ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001fb3c:	e9 35 01 00 00       	jmp    c001fc76 <Vm::x87Handler(regs*)+0x9fb>
c001fb41:	80 fa 02             	cmp    dl,0x2
c001fb44:	0f 85 54 f9 ff ff    	jne    c001f49e <Vm::x87Handler(regs*)+0x223>
c001fb4a:	55                   	push   ebp
c001fb4b:	55                   	push   ebp
c001fb4c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb4f:	ff 36                	push   DWORD PTR [esi]
c001fb51:	e8 7c f3 ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001fb56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb5d:	89 c6                	mov    esi,eax
c001fb5f:	89 d7                	mov    edi,edx
c001fb61:	e8 d8 f5 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fb66:	57                   	push   edi
c001fb67:	56                   	push   esi
c001fb68:	52                   	push   edx
c001fb69:	50                   	push   eax
c001fb6a:	e8 f2 f4 ff ff       	call   c001f061 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fb73:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb76:	83 c4 20             	add    esp,0x20
c001fb79:	e9 74 f7 ff ff       	jmp    c001f2f2 <Vm::x87Handler(regs*)+0x77>
c001fb7e:	80 fa 04             	cmp    dl,0x4
c001fb81:	75 2a                	jne    c001fbad <Vm::x87Handler(regs*)+0x932>
c001fb83:	51                   	push   ecx
c001fb84:	51                   	push   ecx
c001fb85:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb88:	ff 36                	push   DWORD PTR [esi]
c001fb8a:	e8 43 f3 ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001fb8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb96:	89 c6                	mov    esi,eax
c001fb98:	89 d7                	mov    edi,edx
c001fb9a:	e8 9f f5 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fb9f:	57                   	push   edi
c001fba0:	56                   	push   esi
c001fba1:	52                   	push   edx
c001fba2:	50                   	push   eax
c001fba3:	e8 36 f5 ff ff       	call   c001f0de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fba8:	e9 e2 00 00 00       	jmp    c001fc8f <Vm::x87Handler(regs*)+0xa14>
c001fbad:	80 fa 05             	cmp    dl,0x5
c001fbb0:	75 28                	jne    c001fbda <Vm::x87Handler(regs*)+0x95f>
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	6a 00                	push   0x0
c001fbb7:	e8 82 f5 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fbbc:	89 c7                	mov    edi,eax
c001fbbe:	89 d5                	mov    ebp,edx
c001fbc0:	58                   	pop    eax
c001fbc1:	5a                   	pop    edx
c001fbc2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbc5:	ff 36                	push   DWORD PTR [esi]
c001fbc7:	e8 06 f3 ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001fbcc:	83 c4 10             	add    esp,0x10
c001fbcf:	55                   	push   ebp
c001fbd0:	57                   	push   edi
c001fbd1:	52                   	push   edx
c001fbd2:	50                   	push   eax
c001fbd3:	e8 06 f5 ff ff       	call   c001f0de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbd8:	eb 60                	jmp    c001fc3a <Vm::x87Handler(regs*)+0x9bf>
c001fbda:	80 fa 06             	cmp    dl,0x6
c001fbdd:	75 2a                	jne    c001fc09 <Vm::x87Handler(regs*)+0x98e>
c001fbdf:	51                   	push   ecx
c001fbe0:	51                   	push   ecx
c001fbe1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbe4:	ff 36                	push   DWORD PTR [esi]
c001fbe6:	e8 e7 f2 ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001fbeb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf2:	89 c6                	mov    esi,eax
c001fbf4:	89 d7                	mov    edi,edx
c001fbf6:	e8 43 f5 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fbfb:	57                   	push   edi
c001fbfc:	56                   	push   esi
c001fbfd:	52                   	push   edx
c001fbfe:	50                   	push   eax
c001fbff:	e8 08 f5 ff ff       	call   c001f10c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc04:	e9 86 00 00 00       	jmp    c001fc8f <Vm::x87Handler(regs*)+0xa14>
c001fc09:	31 c0                	xor    eax,eax
c001fc0b:	80 fa 07             	cmp    dl,0x7
c001fc0e:	0f 85 c8 00 00 00    	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	6a 00                	push   0x0
c001fc19:	e8 20 f5 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fc1e:	89 c7                	mov    edi,eax
c001fc20:	89 d5                	mov    ebp,edx
c001fc22:	58                   	pop    eax
c001fc23:	5a                   	pop    edx
c001fc24:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc27:	ff 36                	push   DWORD PTR [esi]
c001fc29:	e8 a4 f2 ff ff       	call   c001eed2 <Vm::fpu64ToInternal(unsigned long long)>
c001fc2e:	83 c4 10             	add    esp,0x10
c001fc31:	55                   	push   ebp
c001fc32:	57                   	push   edi
c001fc33:	52                   	push   edx
c001fc34:	50                   	push   eax
c001fc35:	e8 d2 f4 ff ff       	call   c001f10c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc3a:	83 c4 0c             	add    esp,0xc
c001fc3d:	eb 53                	jmp    c001fc92 <Vm::x87Handler(regs*)+0xa17>
c001fc3f:	31 c0                	xor    eax,eax
c001fc41:	80 fa 02             	cmp    dl,0x2
c001fc44:	0f 85 92 00 00 00    	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001fc4a:	83 ec 0c             	sub    esp,0xc
c001fc4d:	6a 00                	push   0x0
c001fc4f:	e8 ea f4 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fc54:	59                   	pop    ecx
c001fc55:	5f                   	pop    edi
c001fc56:	52                   	push   edx
c001fc57:	50                   	push   eax
c001fc58:	e8 27 f2 ff ff       	call   c001ee84 <Vm::fpuInternalTo64(unsigned long long)>
c001fc5d:	eb 70                	jmp    c001fccf <Vm::x87Handler(regs*)+0xa54>
c001fc5f:	31 c0                	xor    eax,eax
c001fc61:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fc66:	75 74                	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001fc68:	50                   	push   eax
c001fc69:	50                   	push   eax
c001fc6a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fc6d:	31 d2                	xor    edx,edx
c001fc6f:	52                   	push   edx
c001fc70:	50                   	push   eax
c001fc71:	e8 f6 f2 ff ff       	call   c001ef6c <Vm::fpuLongToFloat(long long)>
c001fc76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc7d:	89 c6                	mov    esi,eax
c001fc7f:	89 d7                	mov    edi,edx
c001fc81:	e8 b8 f4 ff ff       	call   c001f13e <Vm::fpuGetReg(int)>
c001fc86:	57                   	push   edi
c001fc87:	56                   	push   esi
c001fc88:	52                   	push   edx
c001fc89:	50                   	push   eax
c001fc8a:	e8 5e f4 ff ff       	call   c001f0ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc8f:	83 c4 1c             	add    esp,0x1c
c001fc92:	52                   	push   edx
c001fc93:	50                   	push   eax
c001fc94:	6a 00                	push   0x0
c001fc96:	e8 e6 f4 ff ff       	call   c001f181 <Vm::fpuSetReg(int, unsigned long long)>
c001fc9b:	e9 f2 f7 ff ff       	jmp    c001f492 <Vm::x87Handler(regs*)+0x217>
c001fca0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fca4:	80 fa 05             	cmp    dl,0x5
c001fca7:	75 11                	jne    c001fcba <Vm::x87Handler(regs*)+0xa3f>
c001fca9:	55                   	push   ebp
c001fcaa:	55                   	push   ebp
c001fcab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcae:	ff 36                	push   DWORD PTR [esi]
c001fcb0:	e8 81 f2 ff ff       	call   c001ef36 <Vm::fpuULongToFloat(unsigned long long)>
c001fcb5:	e9 cf f7 ff ff       	jmp    c001f489 <Vm::x87Handler(regs*)+0x20e>
c001fcba:	31 c0                	xor    eax,eax
c001fcbc:	80 fa 07             	cmp    dl,0x7
c001fcbf:	75 1b                	jne    c001fcdc <Vm::x87Handler(regs*)+0xa61>
c001fcc1:	e8 63 f5 ff ff       	call   c001f229 <Vm::fpuPop()>
c001fcc6:	51                   	push   ecx
c001fcc7:	51                   	push   ecx
c001fcc8:	52                   	push   edx
c001fcc9:	50                   	push   eax
c001fcca:	e8 0c f2 ff ff       	call   c001eedb <Vm::fpuFloatToLong(unsigned long long)>
c001fccf:	83 c4 10             	add    esp,0x10
c001fcd2:	89 06                	mov    DWORD PTR [esi],eax
c001fcd4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fcd7:	e9 f8 f7 ff ff       	jmp    c001f4d4 <Vm::x87Handler(regs*)+0x259>
c001fcdc:	83 c4 1c             	add    esp,0x1c
c001fcdf:	5b                   	pop    ebx
c001fce0:	5e                   	pop    esi
c001fce1:	5f                   	pop    edi
c001fce2:	5d                   	pop    ebp
c001fce3:	c3                   	ret    

c001fce4 <__static_initialization_and_destruction_0(int, int)>:
c001fce4:	83 ec 0c             	sub    esp,0xc
c001fce7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fcec:	75 1a                	jne    c001fd08 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fcee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fcf6:	75 10                	jne    c001fd08 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	68 c0 0c 03 c0       	push   0xc0030cc0
c001fd00:	e8 05 8d 00 00       	call   c0028a0a <Vm::_FPUState::_FPUState()>
c001fd05:	83 c4 10             	add    esp,0x10
c001fd08:	90                   	nop
c001fd09:	83 c4 0c             	add    esp,0xc
c001fd0c:	c3                   	ret    

c001fd0d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fd0d:	83 ec 0c             	sub    esp,0xc
c001fd10:	83 ec 08             	sub    esp,0x8
c001fd13:	68 ff ff 00 00       	push   0xffff
c001fd18:	6a 01                	push   0x1
c001fd1a:	e8 c5 ff ff ff       	call   c001fce4 <__static_initialization_and_destruction_0(int, int)>
c001fd1f:	83 c4 10             	add    esp,0x10
c001fd22:	83 c4 0c             	add    esp,0xc
c001fd25:	c3                   	ret    

c001fd26 <FAT::getName()>:
c001fd26:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c001fd2b:	c3                   	ret    

c001fd2c <FAT::tell(void*, unsigned long long*)>:
c001fd2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd31:	75 06                	jne    c001fd39 <FAT::tell(void*, unsigned long long*)+0xd>
c001fd33:	b8 04 00 00 00       	mov    eax,0x4
c001fd38:	c3                   	ret    
c001fd39:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd3e:	75 06                	jne    c001fd46 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fd40:	b8 04 00 00 00       	mov    eax,0x4
c001fd45:	c3                   	ret    
c001fd46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd4a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fd4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fd50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd54:	89 01                	mov    DWORD PTR [ecx],eax
c001fd56:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd59:	b8 00 00 00 00       	mov    eax,0x0
c001fd5e:	c3                   	ret    
c001fd5f:	90                   	nop

c001fd60 <FAT::stat(void*, unsigned long long*)>:
c001fd60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd65:	75 06                	jne    c001fd6d <FAT::stat(void*, unsigned long long*)+0xd>
c001fd67:	b8 04 00 00 00       	mov    eax,0x4
c001fd6c:	c3                   	ret    
c001fd6d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd72:	75 06                	jne    c001fd7a <FAT::stat(void*, unsigned long long*)+0x1a>
c001fd74:	b8 04 00 00 00       	mov    eax,0x4
c001fd79:	c3                   	ret    
c001fd7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd7e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fd81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fd84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd88:	89 01                	mov    DWORD PTR [ecx],eax
c001fd8a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd8d:	b8 00 00 00 00       	mov    eax,0x0
c001fd92:	c3                   	ret    
c001fd93:	90                   	nop

c001fd94 <FAT::~FAT()>:
c001fd94:	83 ec 0c             	sub    esp,0xc
c001fd97:	ba fc bb 02 c0       	mov    edx,0xc002bbfc
c001fd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda0:	89 10                	mov    DWORD PTR [eax],edx
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	50                   	push   eax
c001fdaa:	e8 43 2b ff ff       	call   c00128f2 <Filesystem::~Filesystem()>
c001fdaf:	83 c4 10             	add    esp,0x10
c001fdb2:	90                   	nop
c001fdb3:	83 c4 0c             	add    esp,0xc
c001fdb6:	c3                   	ret    
c001fdb7:	90                   	nop

c001fdb8 <FAT::~FAT()>:
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	83 ec 0c             	sub    esp,0xc
c001fdbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc2:	e8 cd ff ff ff       	call   c001fd94 <FAT::~FAT()>
c001fdc7:	83 c4 10             	add    esp,0x10
c001fdca:	83 ec 08             	sub    esp,0x8
c001fdcd:	6a 08                	push   0x8
c001fdcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd3:	e8 14 27 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c001fdd8:	83 c4 10             	add    esp,0x10
c001fddb:	83 c4 0c             	add    esp,0xc
c001fdde:	c3                   	ret    
c001fddf:	90                   	nop

c001fde0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fde0:	83 ec 1c             	sub    esp,0x1c
c001fde3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fdea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fdef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fdf3:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001fdfa:	83 f8 ff             	cmp    eax,0xffffffff
c001fdfd:	75 34                	jne    c001fe33 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fdff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe03:	88 c2                	mov    dl,al
c001fe05:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001fe0a:	01 d0                	add    eax,edx
c001fe0c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe10:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c001fe16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe1a:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c001fe21:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001fe26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fe2a:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c001fe31:	eb 17                	jmp    c001fe4a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fe33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe37:	88 c2                	mov    dl,al
c001fe39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe3d:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001fe44:	01 d0                	add    eax,edx
c001fe46:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe4a:	83 ec 04             	sub    esp,0x4
c001fe4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe55:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fe59:	50                   	push   eax
c001fe5a:	e8 9f 6e fe ff       	call   c0006cfe <f_getlabel>
c001fe5f:	83 c4 10             	add    esp,0x10
c001fe62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe66:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe6b:	75 07                	jne    c001fe74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fe6d:	b8 00 00 00 00       	mov    eax,0x0
c001fe72:	eb 05                	jmp    c001fe79 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fe74:	b8 01 00 00 00       	mov    eax,0x1
c001fe79:	83 c4 1c             	add    esp,0x1c
c001fe7c:	c3                   	ret    
c001fe7d:	90                   	nop

c001fe7e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fe7e:	57                   	push   edi
c001fe7f:	83 ec 58             	sub    esp,0x58
c001fe82:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fe8a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fe8e:	b9 0f 00 00 00       	mov    ecx,0xf
c001fe93:	b8 00 00 00 00       	mov    eax,0x0
c001fe98:	fc                   	cld    
c001fe99:	89 d7                	mov    edi,edx
c001fe9b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe9d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fea1:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001fea8:	83 f8 ff             	cmp    eax,0xffffffff
c001feab:	75 34                	jne    c001fee1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fead:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001feb1:	88 c2                	mov    dl,al
c001feb3:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001feb8:	01 d0                	add    eax,edx
c001feba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001febe:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c001fec4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fec8:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c001fecf:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001fed4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fed8:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c001fedf:	eb 17                	jmp    c001fef8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fee1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fee5:	88 c2                	mov    dl,al
c001fee7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001feeb:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c001fef2:	01 d0                	add    eax,edx
c001fef4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fef8:	83 ec 08             	sub    esp,0x8
c001fefb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001feff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff03:	50                   	push   eax
c001ff04:	e8 43 0a fe ff       	call   c000094c <strcat>
c001ff09:	83 c4 10             	add    esp,0x10
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff13:	50                   	push   eax
c001ff14:	e8 d3 6f fe ff       	call   c0006eec <f_setlabel>
c001ff19:	83 c4 10             	add    esp,0x10
c001ff1c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ff20:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ff25:	75 07                	jne    c001ff2e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ff27:	b8 00 00 00 00       	mov    eax,0x0
c001ff2c:	eb 05                	jmp    c001ff33 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ff2e:	b8 01 00 00 00       	mov    eax,0x1
c001ff33:	83 c4 58             	add    esp,0x58
c001ff36:	5f                   	pop    edi
c001ff37:	c3                   	ret    

c001ff38 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ff38:	83 ec 2c             	sub    esp,0x2c
c001ff3b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ff43:	83 ec 08             	sub    esp,0x8
c001ff46:	68 d4 bb 02 c0       	push   0xc002bbd4
c001ff4b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff4f:	e8 44 09 fe ff       	call   c0000898 <strcmp>
c001ff54:	83 c4 10             	add    esp,0x10
c001ff57:	85 c0                	test   eax,eax
c001ff59:	0f 94 c0             	sete   al
c001ff5c:	84 c0                	test   al,al
c001ff5e:	74 0d                	je     c001ff6d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ff60:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff68:	e9 a6 00 00 00       	jmp    c0020013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff6d:	83 ec 08             	sub    esp,0x8
c001ff70:	68 c6 bb 02 c0       	push   0xc002bbc6
c001ff75:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff79:	e8 1a 09 fe ff       	call   c0000898 <strcmp>
c001ff7e:	83 c4 10             	add    esp,0x10
c001ff81:	85 c0                	test   eax,eax
c001ff83:	0f 94 c0             	sete   al
c001ff86:	84 c0                	test   al,al
c001ff88:	74 0a                	je     c001ff94 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001ff8a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff92:	eb 7f                	jmp    c0020013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff94:	83 ec 08             	sub    esp,0x8
c001ff97:	68 cc bb 02 c0       	push   0xc002bbcc
c001ff9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffa0:	e8 f3 08 fe ff       	call   c0000898 <strcmp>
c001ffa5:	83 c4 10             	add    esp,0x10
c001ffa8:	85 c0                	test   eax,eax
c001ffaa:	0f 94 c0             	sete   al
c001ffad:	84 c0                	test   al,al
c001ffaf:	74 0a                	je     c001ffbb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001ffb1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ffb9:	eb 58                	jmp    c0020013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffbb:	83 ec 08             	sub    esp,0x8
c001ffbe:	68 6c 91 02 c0       	push   0xc002916c
c001ffc3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffc7:	e8 cc 08 fe ff       	call   c0000898 <strcmp>
c001ffcc:	83 c4 10             	add    esp,0x10
c001ffcf:	85 c0                	test   eax,eax
c001ffd1:	0f 94 c0             	sete   al
c001ffd4:	84 c0                	test   al,al
c001ffd6:	74 0a                	je     c001ffe2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ffd8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ffe0:	eb 31                	jmp    c0020013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffe2:	83 ec 08             	sub    esp,0x8
c001ffe5:	68 d2 bb 02 c0       	push   0xc002bbd2
c001ffea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffee:	e8 a5 08 fe ff       	call   c0000898 <strcmp>
c001fff3:	83 c4 10             	add    esp,0x10
c001fff6:	85 c0                	test   eax,eax
c001fff8:	0f 94 c0             	sete   al
c001fffb:	84 c0                	test   al,al
c001fffd:	74 0a                	je     c0020009 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ffff:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020007:	eb 0a                	jmp    c0020013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020009:	b8 08 00 00 00       	mov    eax,0x8
c002000e:	e9 df 00 00 00       	jmp    c00200f2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020013:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002001a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002001f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020023:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c002002a:	83 f8 ff             	cmp    eax,0xffffffff
c002002d:	75 34                	jne    c0020063 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002002f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020033:	88 c2                	mov    dl,al
c0020035:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c002003a:	01 d0                	add    eax,edx
c002003c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020040:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c0020046:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002004a:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c0020051:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c0020056:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002005a:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c0020061:	eb 17                	jmp    c002007a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020063:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020067:	88 c2                	mov    dl,al
c0020069:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002006d:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c0020074:	01 d0                	add    eax,edx
c0020076:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002007a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002007e:	88 04 24             	mov    BYTE PTR [esp],al
c0020081:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020085:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020089:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020091:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020096:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002009e:	83 ec 0c             	sub    esp,0xc
c00200a1:	68 00 20 00 00       	push   0x2000
c00200a6:	e8 f1 f4 fe ff       	call   c000f59c <malloc>
c00200ab:	83 c4 10             	add    esp,0x10
c00200ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00200b2:	68 00 20 00 00       	push   0x2000
c00200b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200bf:	50                   	push   eax
c00200c0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00200c4:	50                   	push   eax
c00200c5:	e8 6d 72 fe ff       	call   c0007337 <f_mkfs>
c00200ca:	83 c4 10             	add    esp,0x10
c00200cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00200d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00200d6:	75 07                	jne    c00200df <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00200d8:	b8 00 00 00 00       	mov    eax,0x0
c00200dd:	eb 13                	jmp    c00200f2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200df:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00200e4:	75 07                	jne    c00200ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00200e6:	b8 09 00 00 00       	mov    eax,0x9
c00200eb:	eb 05                	jmp    c00200f2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200ed:	b8 01 00 00 00       	mov    eax,0x1
c00200f2:	83 c4 2c             	add    esp,0x2c
c00200f5:	c3                   	ret    

c00200f6 <FAT::tryMount(LogicalDisk*, int)>:
c00200f6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00200fc:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c0020101:	83 f8 14             	cmp    eax,0x14
c0020104:	75 17                	jne    c002011d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020106:	83 ec 0c             	sub    esp,0xc
c0020109:	68 d8 bb 02 c0       	push   0xc002bbd8
c002010e:	e8 1c 9c ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	b0 00                	mov    al,0x0
c0020118:	e9 d7 01 00 00       	jmp    c00202f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002011d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020124:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002012a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020130:	3d 00 02 00 00       	cmp    eax,0x200
c0020135:	74 07                	je     c002013e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020137:	b0 00                	mov    al,0x0
c0020139:	e9 b6 01 00 00       	jmp    c00202f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002013e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020146:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002014d:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c0020154:	83 f8 ff             	cmp    eax,0xffffffff
c0020157:	74 07                	je     c0020160 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020159:	b0 01                	mov    al,0x1
c002015b:	e9 94 01 00 00       	jmp    c00202f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020160:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002016a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020172:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020179:	88 c2                	mov    dl,al
c002017b:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c0020180:	01 d0                	add    eax,edx
c0020182:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020189:	8b 15 20 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d20
c002018f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020196:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c002019d:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c00201a2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00201a9:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c00201b0:	83 ec 0c             	sub    esp,0xc
c00201b3:	68 54 02 00 00       	push   0x254
c00201b8:	e8 df f3 fe ff       	call   c000f59c <malloc>
c00201bd:	83 c4 10             	add    esp,0x10
c00201c0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00201c7:	83 ec 04             	sub    esp,0x4
c00201ca:	6a 00                	push   0x0
c00201cc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201d3:	50                   	push   eax
c00201d4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201db:	e8 15 4d fe ff       	call   c0004ef5 <f_mount>
c00201e0:	83 c4 10             	add    esp,0x10
c00201e3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00201ea:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00201f2:	74 19                	je     c002020d <FAT::tryMount(LogicalDisk*, int)+0x117>
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201fe:	e8 b9 f3 fe ff       	call   c000f5bc <rfree>
c0020203:	83 c4 10             	add    esp,0x10
c0020206:	b0 00                	mov    al,0x0
c0020208:	e9 e7 00 00 00       	jmp    c00202f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002020d:	83 ec 04             	sub    esp,0x4
c0020210:	68 00 01 00 00       	push   0x100
c0020215:	6a 00                	push   0x0
c0020217:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002021e:	50                   	push   eax
c002021f:	e8 2c 05 fe ff       	call   c0000750 <memset>
c0020224:	83 c4 10             	add    esp,0x10
c0020227:	83 ec 08             	sub    esp,0x8
c002022a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020231:	50                   	push   eax
c0020232:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020239:	50                   	push   eax
c002023a:	e8 0d 07 fe ff       	call   c000094c <strcat>
c002023f:	83 c4 10             	add    esp,0x10
c0020242:	83 ec 08             	sub    esp,0x8
c0020245:	68 e6 bb 02 c0       	push   0xc002bbe6
c002024a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020251:	50                   	push   eax
c0020252:	e8 f5 06 fe ff       	call   c000094c <strcat>
c0020257:	83 c4 10             	add    esp,0x10
c002025a:	83 ec 04             	sub    esp,0x4
c002025d:	6a 01                	push   0x1
c002025f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020266:	50                   	push   eax
c0020267:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002026b:	50                   	push   eax
c002026c:	e8 e6 4c fe ff       	call   c0004f57 <f_open>
c0020271:	83 c4 10             	add    esp,0x10
c0020274:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002027b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020282:	85 c0                	test   eax,eax
c0020284:	74 0a                	je     c0020290 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020286:	78 2d                	js     c00202b5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020288:	83 e8 04             	sub    eax,0x4
c002028b:	83 f8 01             	cmp    eax,0x1
c002028e:	77 25                	ja     c00202b5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020290:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020298:	83 ec 0c             	sub    esp,0xc
c002029b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002029f:	50                   	push   eax
c00202a0:	e8 04 58 fe ff       	call   c0005aa9 <f_close>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	90                   	nop
c00202a9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00202b1:	74 3a                	je     c00202ed <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00202b3:	eb 2d                	jmp    c00202e2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00202b5:	83 ec 0c             	sub    esp,0xc
c00202b8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202bf:	e8 f8 f2 fe ff       	call   c000f5bc <rfree>
c00202c4:	83 c4 10             	add    esp,0x10
c00202c7:	83 ec 04             	sub    esp,0x4
c00202ca:	6a 00                	push   0x0
c00202cc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202d3:	50                   	push   eax
c00202d4:	6a 00                	push   0x0
c00202d6:	e8 1a 4c fe ff       	call   c0004ef5 <f_mount>
c00202db:	83 c4 10             	add    esp,0x10
c00202de:	b0 00                	mov    al,0x0
c00202e0:	eb 12                	jmp    c00202f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202e2:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c00202e7:	40                   	inc    eax
c00202e8:	a3 20 0d 03 c0       	mov    ds:0xc0030d20,eax
c00202ed:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00202f4:	81 c4 6c 03 00 00    	add    esp,0x36c
c00202fa:	c3                   	ret    
c00202fb:	90                   	nop

c00202fc <FAT::getFileFirstSector(char const*)>:
c00202fc:	53                   	push   ebx
c00202fd:	83 ec 28             	sub    esp,0x28
c0020300:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020308:	83 ec 0c             	sub    esp,0xc
c002030b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030f:	e8 88 f2 fe ff       	call   c000f59c <malloc>
c0020314:	83 c4 10             	add    esp,0x10
c0020317:	89 c3                	mov    ebx,eax
c0020319:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c002031e:	83 ec 04             	sub    esp,0x4
c0020321:	50                   	push   eax
c0020322:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020326:	53                   	push   ebx
c0020327:	e8 f6 27 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c002032c:	83 c4 10             	add    esp,0x10
c002032f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020333:	83 ec 08             	sub    esp,0x8
c0020336:	6a 01                	push   0x1
c0020338:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002033c:	e8 45 28 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c0020341:	83 c4 10             	add    esp,0x10
c0020344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020348:	8b 00                	mov    eax,DWORD PTR [eax]
c002034a:	83 c0 0c             	add    eax,0xc
c002034d:	8b 00                	mov    eax,DWORD PTR [eax]
c002034f:	83 ec 0c             	sub    esp,0xc
c0020352:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020356:	52                   	push   edx
c0020357:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002035b:	52                   	push   edx
c002035c:	6a 00                	push   0x0
c002035e:	6a 04                	push   0x4
c0020360:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020364:	ff d0                	call   eax
c0020366:	83 c4 20             	add    esp,0x20
c0020369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002036d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020373:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020377:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002037b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002037e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020381:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020385:	83 ec 0c             	sub    esp,0xc
c0020388:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002038c:	e8 53 28 ff ff       	call   c0012be4 <File::close()>
c0020391:	83 c4 10             	add    esp,0x10
c0020394:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020398:	ba 00 00 00 00       	mov    edx,0x0
c002039d:	83 c4 28             	add    esp,0x28
c00203a0:	5b                   	pop    ebx
c00203a1:	c3                   	ret    

c00203a2 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00203a2:	57                   	push   edi
c00203a3:	56                   	push   esi
c00203a4:	53                   	push   ebx
c00203a5:	81 ec 50 02 00 00    	sub    esp,0x250
c00203ab:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00203b3:	74 0a                	je     c00203bf <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00203b5:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00203bd:	75 0a                	jne    c00203c9 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00203bf:	b8 04 00 00 00       	mov    eax,0x4
c00203c4:	e9 29 01 00 00       	jmp    c00204f2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00203c9:	83 ec 08             	sub    esp,0x8
c00203cc:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00203d3:	50                   	push   eax
c00203d4:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00203db:	e8 d3 5c fe ff       	call   c00060b3 <f_readdir>
c00203e0:	83 c4 10             	add    esp,0x10
c00203e3:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00203ea:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00203f1:	83 ec 0c             	sub    esp,0xc
c00203f4:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00203fb:	83 c0 1a             	add    eax,0x1a
c00203fe:	50                   	push   eax
c00203ff:	e8 68 03 fe ff       	call   c000076c <strlen>
c0020404:	83 c4 10             	add    esp,0x10
c0020407:	ba 00 00 00 00       	mov    edx,0x0
c002040c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020410:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020414:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002041b:	0f b6 c0             	movzx  eax,al
c002041e:	83 e0 10             	and    eax,0x10
c0020421:	74 07                	je     c002042a <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020423:	b8 02 00 00 00       	mov    eax,0x2
c0020428:	eb 05                	jmp    c002042f <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002042a:	b8 01 00 00 00       	mov    eax,0x1
c002042f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020433:	83 ec 08             	sub    esp,0x8
c0020436:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002043d:	83 c0 1a             	add    eax,0x1a
c0020440:	50                   	push   eax
c0020441:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020445:	83 c0 10             	add    eax,0x10
c0020448:	50                   	push   eax
c0020449:	e8 be 03 fe ff       	call   c000080c <strcpy>
c002044e:	83 c4 10             	add    esp,0x10
c0020451:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020458:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002045f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020463:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002046a:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020471:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020478:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002047f:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020486:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002048d:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020494:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002049b:	89 c6                	mov    esi,eax
c002049d:	89 d7                	mov    edi,edx
c002049f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204a1:	89 c8                	mov    eax,ecx
c00204a3:	89 fa                	mov    edx,edi
c00204a5:	89 f3                	mov    ebx,esi
c00204a7:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00204ae:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00204b5:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00204bc:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00204c3:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00204c9:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00204d0:	84 c0                	test   al,al
c00204d2:	75 07                	jne    c00204db <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00204d4:	b8 07 00 00 00       	mov    eax,0x7
c00204d9:	eb 17                	jmp    c00204f2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204db:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00204e2:	85 c0                	test   eax,eax
c00204e4:	75 07                	jne    c00204ed <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00204e6:	b8 00 00 00 00       	mov    eax,0x0
c00204eb:	eb 05                	jmp    c00204f2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204ed:	b8 01 00 00 00       	mov    eax,0x1
c00204f2:	81 c4 50 02 00 00    	add    esp,0x250
c00204f8:	5b                   	pop    ebx
c00204f9:	5e                   	pop    esi
c00204fa:	5f                   	pop    edi
c00204fb:	c3                   	ret    

c00204fc <FAT::read(void*, unsigned long, void*, int*)>:
c00204fc:	83 ec 1c             	sub    esp,0x1c
c00204ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020504:	74 07                	je     c002050d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020506:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002050b:	75 07                	jne    c0020514 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002050d:	b8 04 00 00 00       	mov    eax,0x4
c0020512:	eb 3d                	jmp    c0020551 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020514:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020518:	50                   	push   eax
c0020519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002051d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020521:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020525:	e8 69 4e fe ff       	call   c0005393 <f_read>
c002052a:	83 c4 10             	add    esp,0x10
c002052d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020531:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020535:	89 c2                	mov    edx,eax
c0020537:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002053b:	89 10                	mov    DWORD PTR [eax],edx
c002053d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020541:	85 c0                	test   eax,eax
c0020543:	75 07                	jne    c002054c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020545:	b8 00 00 00 00       	mov    eax,0x0
c002054a:	eb 05                	jmp    c0020551 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002054c:	b8 01 00 00 00       	mov    eax,0x1
c0020551:	83 c4 1c             	add    esp,0x1c
c0020554:	c3                   	ret    
c0020555:	90                   	nop

c0020556 <FAT::write(void*, unsigned long, void*, int*)>:
c0020556:	83 ec 1c             	sub    esp,0x1c
c0020559:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002055e:	74 07                	je     c0020567 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020560:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020565:	75 07                	jne    c002056e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020567:	b8 04 00 00 00       	mov    eax,0x4
c002056c:	eb 3d                	jmp    c00205ab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002056e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020572:	50                   	push   eax
c0020573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002057b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002057f:	e8 8f 50 fe ff       	call   c0005613 <f_write>
c0020584:	83 c4 10             	add    esp,0x10
c0020587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002058b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002058f:	89 c2                	mov    edx,eax
c0020591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020595:	89 10                	mov    DWORD PTR [eax],edx
c0020597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002059b:	85 c0                	test   eax,eax
c002059d:	75 07                	jne    c00205a6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002059f:	b8 00 00 00 00       	mov    eax,0x0
c00205a4:	eb 05                	jmp    c00205ab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00205a6:	b8 01 00 00 00       	mov    eax,0x1
c00205ab:	83 c4 1c             	add    esp,0x1c
c00205ae:	c3                   	ret    
c00205af:	90                   	nop

c00205b0 <FAT::close(void*)>:
c00205b0:	83 ec 1c             	sub    esp,0x1c
c00205b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205b8:	75 07                	jne    c00205c1 <FAT::close(void*)+0x11>
c00205ba:	b8 04 00 00 00       	mov    eax,0x4
c00205bf:	eb 36                	jmp    c00205f7 <FAT::close(void*)+0x47>
c00205c1:	83 ec 0c             	sub    esp,0xc
c00205c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205c8:	e8 dc 54 fe ff       	call   c0005aa9 <f_close>
c00205cd:	83 c4 10             	add    esp,0x10
c00205d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205d4:	83 ec 0c             	sub    esp,0xc
c00205d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205db:	e8 cc ef fe ff       	call   c000f5ac <free>
c00205e0:	83 c4 10             	add    esp,0x10
c00205e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205e7:	85 c0                	test   eax,eax
c00205e9:	75 07                	jne    c00205f2 <FAT::close(void*)+0x42>
c00205eb:	b8 00 00 00 00       	mov    eax,0x0
c00205f0:	eb 05                	jmp    c00205f7 <FAT::close(void*)+0x47>
c00205f2:	b8 01 00 00 00       	mov    eax,0x1
c00205f7:	83 c4 1c             	add    esp,0x1c
c00205fa:	c3                   	ret    
c00205fb:	90                   	nop

c00205fc <FAT::closeDir(void*)>:
c00205fc:	83 ec 1c             	sub    esp,0x1c
c00205ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020604:	75 07                	jne    c002060d <FAT::closeDir(void*)+0x11>
c0020606:	b8 04 00 00 00       	mov    eax,0x4
c002060b:	eb 36                	jmp    c0020643 <FAT::closeDir(void*)+0x47>
c002060d:	83 ec 0c             	sub    esp,0xc
c0020610:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020614:	e8 78 5a fe ff       	call   c0006091 <f_closedir>
c0020619:	83 c4 10             	add    esp,0x10
c002061c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020620:	83 ec 0c             	sub    esp,0xc
c0020623:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020627:	e8 80 ef fe ff       	call   c000f5ac <free>
c002062c:	83 c4 10             	add    esp,0x10
c002062f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020633:	85 c0                	test   eax,eax
c0020635:	75 07                	jne    c002063e <FAT::closeDir(void*)+0x42>
c0020637:	b8 00 00 00 00       	mov    eax,0x0
c002063c:	eb 05                	jmp    c0020643 <FAT::closeDir(void*)+0x47>
c002063e:	b8 01 00 00 00       	mov    eax,0x1
c0020643:	83 c4 1c             	add    esp,0x1c
c0020646:	c3                   	ret    
c0020647:	90                   	nop

c0020648 <FAT::seek(void*, unsigned long long)>:
c0020648:	83 ec 2c             	sub    esp,0x2c
c002064b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002064f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020653:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020657:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002065b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020660:	75 07                	jne    c0020669 <FAT::seek(void*, unsigned long long)+0x21>
c0020662:	b8 04 00 00 00       	mov    eax,0x4
c0020667:	eb 2f                	jmp    c0020698 <FAT::seek(void*, unsigned long long)+0x50>
c0020669:	83 ec 04             	sub    esp,0x4
c002066c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020670:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020678:	e8 5b 54 fe ff       	call   c0005ad8 <f_lseek>
c002067d:	83 c4 10             	add    esp,0x10
c0020680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020688:	85 c0                	test   eax,eax
c002068a:	75 07                	jne    c0020693 <FAT::seek(void*, unsigned long long)+0x4b>
c002068c:	b8 00 00 00 00       	mov    eax,0x0
c0020691:	eb 05                	jmp    c0020698 <FAT::seek(void*, unsigned long long)+0x50>
c0020693:	b8 01 00 00 00       	mov    eax,0x1
c0020698:	83 c4 2c             	add    esp,0x2c
c002069b:	c3                   	ret    

c002069c <fatWrapperReadDisk>:
c002069c:	83 ec 1c             	sub    esp,0x1c
c002069f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00206ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206bb:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c00206c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206c6:	83 ec 0c             	sub    esp,0xc
c00206c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206cd:	52                   	push   edx
c00206ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206d6:	50                   	push   eax
c00206d7:	e8 3c 58 ff ff       	call   c0015f18 <LogicalDisk::read(unsigned long long, int, void*)>
c00206dc:	83 c4 20             	add    esp,0x20
c00206df:	83 c4 1c             	add    esp,0x1c
c00206e2:	c3                   	ret    

c00206e3 <fatWrapperWriteDisk>:
c00206e3:	83 ec 1c             	sub    esp,0x1c
c00206e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00206f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206fd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020702:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c0020709:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002070d:	83 ec 0c             	sub    esp,0xc
c0020710:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020714:	52                   	push   edx
c0020715:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020719:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002071d:	50                   	push   eax
c002071e:	e8 61 58 ff ff       	call   c0015f84 <LogicalDisk::write(unsigned long long, int, void*)>
c0020723:	83 c4 20             	add    esp,0x20
c0020726:	83 c4 1c             	add    esp,0x1c
c0020729:	c3                   	ret    

c002072a <fatWrapperIoctl>:
c002072a:	53                   	push   ebx
c002072b:	83 ec 28             	sub    esp,0x28
c002072e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020732:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020736:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002073a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002073e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020743:	75 31                	jne    c0020776 <fatWrapperIoctl+0x4c>
c0020745:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020749:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002074d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020752:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c0020759:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002075f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020765:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020769:	66 89 02             	mov    WORD PTR [edx],ax
c002076c:	b8 00 00 00 00       	mov    eax,0x0
c0020771:	e9 b2 00 00 00       	jmp    c0020828 <fatWrapperIoctl+0xfe>
c0020776:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002077b:	75 6a                	jne    c00207e7 <fatWrapperIoctl+0xbd>
c002077d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020781:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020785:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002078a:	8b 04 85 00 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2300]
c0020791:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020797:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002079d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00207a3:	89 c8                	mov    eax,ecx
c00207a5:	89 da                	mov    edx,ebx
c00207a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00207ab:	c1 e0 0a             	shl    eax,0xa
c00207ae:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00207b3:	8b 0c 8d 00 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2300]
c00207ba:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00207c0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00207c6:	89 cb                	mov    ebx,ecx
c00207c8:	c1 fb 1f             	sar    ebx,0x1f
c00207cb:	53                   	push   ebx
c00207cc:	51                   	push   ecx
c00207cd:	52                   	push   edx
c00207ce:	50                   	push   eax
c00207cf:	e8 30 5e 00 00       	call   c0026604 <__udivdi3>
c00207d4:	83 c4 10             	add    esp,0x10
c00207d7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00207db:	89 01                	mov    DWORD PTR [ecx],eax
c00207dd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00207e0:	b8 00 00 00 00       	mov    eax,0x0
c00207e5:	eb 41                	jmp    c0020828 <fatWrapperIoctl+0xfe>
c00207e7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00207ec:	75 07                	jne    c00207f5 <fatWrapperIoctl+0xcb>
c00207ee:	b8 00 00 00 00       	mov    eax,0x0
c00207f3:	eb 33                	jmp    c0020828 <fatWrapperIoctl+0xfe>
c00207f5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00207fa:	75 19                	jne    c0020815 <fatWrapperIoctl+0xeb>
c00207fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020800:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020804:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020808:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002080e:	b8 00 00 00 00       	mov    eax,0x0
c0020813:	eb 13                	jmp    c0020828 <fatWrapperIoctl+0xfe>
c0020815:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002081a:	75 07                	jne    c0020823 <fatWrapperIoctl+0xf9>
c002081c:	b8 00 00 00 00       	mov    eax,0x0
c0020821:	eb 05                	jmp    c0020828 <fatWrapperIoctl+0xfe>
c0020823:	b8 04 00 00 00       	mov    eax,0x4
c0020828:	83 c4 28             	add    esp,0x28
c002082b:	5b                   	pop    ebx
c002082c:	c3                   	ret    
c002082d:	90                   	nop

c002082e <FAT::FAT()>:
c002082e:	83 ec 1c             	sub    esp,0x1c
c0020831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020835:	83 ec 0c             	sub    esp,0xc
c0020838:	50                   	push   eax
c0020839:	e8 90 20 ff ff       	call   c00128ce <Filesystem::Filesystem()>
c002083e:	83 c4 10             	add    esp,0x10
c0020841:	ba fc bb 02 c0       	mov    edx,0xc002bbfc
c0020846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002084a:	89 10                	mov    DWORD PTR [eax],edx
c002084c:	c7 05 20 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d20,0x0
c0020856:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002085e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020863:	7f 15                	jg     c002087a <FAT::FAT()+0x4c>
c0020865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020869:	c7 04 85 40 0d 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf2c0],0xffffffff
c0020874:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020878:	eb e4                	jmp    c002085e <FAT::FAT()+0x30>
c002087a:	90                   	nop
c002087b:	83 c4 1c             	add    esp,0x1c
c002087e:	c3                   	ret    
c002087f:	90                   	nop

c0020880 <FAT::fixFilepath(char*)>:
c0020880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020884:	8a 00                	mov    al,BYTE PTR [eax]
c0020886:	3c 40                	cmp    al,0x40
c0020888:	7e 2c                	jle    c00208b6 <FAT::fixFilepath(char*)+0x36>
c002088a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002088e:	8a 00                	mov    al,BYTE PTR [eax]
c0020890:	83 e8 41             	sub    eax,0x41
c0020893:	88 c2                	mov    dl,al
c0020895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020899:	88 10                	mov    BYTE PTR [eax],dl
c002089b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002089f:	8a 00                	mov    al,BYTE PTR [eax]
c00208a1:	0f be c0             	movsx  eax,al
c00208a4:	8b 04 85 40 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2c0]
c00208ab:	83 c0 30             	add    eax,0x30
c00208ae:	88 c2                	mov    dl,al
c00208b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208b4:	88 10                	mov    BYTE PTR [eax],dl
c00208b6:	90                   	nop
c00208b7:	c3                   	ret    

c00208b8 <FAT::open(char const*, void**, FileOpenMode)>:
c00208b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00208c6:	74 0a                	je     c00208d2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00208c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00208d0:	75 0a                	jne    c00208dc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00208d2:	b8 04 00 00 00       	mov    eax,0x4
c00208d7:	e9 fd 00 00 00       	jmp    c00209d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00208dc:	83 ec 08             	sub    esp,0x8
c00208df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00208ea:	50                   	push   eax
c00208eb:	e8 1c ff fd ff       	call   c000080c <strcpy>
c00208f0:	83 c4 10             	add    esp,0x10
c00208f3:	83 ec 08             	sub    esp,0x8
c00208f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00208fa:	50                   	push   eax
c00208fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020902:	e8 79 ff ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020907:	83 c4 10             	add    esp,0x10
c002090a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020912:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020919:	83 e0 01             	and    eax,0x1
c002091c:	74 08                	je     c0020926 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002091e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020926:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002092d:	83 e0 04             	and    eax,0x4
c0020930:	74 10                	je     c0020942 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020932:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002093a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020942:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020949:	83 e0 02             	and    eax,0x2
c002094c:	74 08                	je     c0020956 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002094e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020956:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002095d:	83 e0 08             	and    eax,0x8
c0020960:	74 08                	je     c002096a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020962:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002096a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020971:	83 e0 10             	and    eax,0x10
c0020974:	74 08                	je     c002097e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020976:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002097e:	83 ec 0c             	sub    esp,0xc
c0020981:	68 50 02 00 00       	push   0x250
c0020986:	e8 11 ec fe ff       	call   c000f59c <malloc>
c002098b:	83 c4 10             	add    esp,0x10
c002098e:	89 c2                	mov    edx,eax
c0020990:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020997:	89 10                	mov    DWORD PTR [eax],edx
c0020999:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00209a1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00209aa:	83 ec 04             	sub    esp,0x4
c00209ad:	52                   	push   edx
c00209ae:	8d 54 24 10          	lea    edx,[esp+0x10]
c00209b2:	52                   	push   edx
c00209b3:	50                   	push   eax
c00209b4:	e8 9e 45 fe ff       	call   c0004f57 <f_open>
c00209b9:	83 c4 10             	add    esp,0x10
c00209bc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00209c3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00209cb:	74 07                	je     c00209d4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00209cd:	b8 01 00 00 00       	mov    eax,0x1
c00209d2:	eb 05                	jmp    c00209d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209d4:	b8 00 00 00 00       	mov    eax,0x0
c00209d9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209df:	c3                   	ret    

c00209e0 <FAT::openDir(char const*, void**)>:
c00209e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209ee:	74 0a                	je     c00209fa <FAT::openDir(char const*, void**)+0x1a>
c00209f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209f8:	75 07                	jne    c0020a01 <FAT::openDir(char const*, void**)+0x21>
c00209fa:	b8 04 00 00 00       	mov    eax,0x4
c00209ff:	eb 7d                	jmp    c0020a7e <FAT::openDir(char const*, void**)+0x9e>
c0020a01:	83 ec 08             	sub    esp,0x8
c0020a04:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020a0f:	50                   	push   eax
c0020a10:	e8 f7 fd fd ff       	call   c000080c <strcpy>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	83 ec 08             	sub    esp,0x8
c0020a1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a1f:	50                   	push   eax
c0020a20:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a27:	e8 54 fe ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020a2c:	83 c4 10             	add    esp,0x10
c0020a2f:	83 ec 0c             	sub    esp,0xc
c0020a32:	6a 4c                	push   0x4c
c0020a34:	e8 63 eb fe ff       	call   c000f59c <malloc>
c0020a39:	83 c4 10             	add    esp,0x10
c0020a3c:	89 c2                	mov    edx,eax
c0020a3e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a45:	89 10                	mov    DWORD PTR [eax],edx
c0020a47:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a50:	83 ec 08             	sub    esp,0x8
c0020a53:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a57:	52                   	push   edx
c0020a58:	50                   	push   eax
c0020a59:	e8 31 55 fe ff       	call   c0005f8f <f_opendir>
c0020a5e:	83 c4 10             	add    esp,0x10
c0020a61:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a68:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020a70:	74 07                	je     c0020a79 <FAT::openDir(char const*, void**)+0x99>
c0020a72:	b8 01 00 00 00       	mov    eax,0x1
c0020a77:	eb 05                	jmp    c0020a7e <FAT::openDir(char const*, void**)+0x9e>
c0020a79:	b8 00 00 00 00       	mov    eax,0x0
c0020a7e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a84:	c3                   	ret    
c0020a85:	90                   	nop

c0020a86 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020a86:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020a8c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020a94:	75 0a                	jne    c0020aa0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020a96:	b8 04 00 00 00       	mov    eax,0x4
c0020a9b:	e9 c9 00 00 00       	jmp    c0020b69 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020aa0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020aa8:	75 0a                	jne    c0020ab4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020aaa:	b8 04 00 00 00       	mov    eax,0x4
c0020aaf:	e9 b5 00 00 00       	jmp    c0020b69 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ab4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020abc:	75 0a                	jne    c0020ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020abe:	b8 04 00 00 00       	mov    eax,0x4
c0020ac3:	e9 a1 00 00 00       	jmp    c0020b69 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ac8:	83 ec 08             	sub    esp,0x8
c0020acb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ad2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020ad9:	50                   	push   eax
c0020ada:	e8 2d fd fd ff       	call   c000080c <strcpy>
c0020adf:	83 c4 10             	add    esp,0x10
c0020ae2:	83 ec 08             	sub    esp,0x8
c0020ae5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020aec:	50                   	push   eax
c0020aed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020af4:	e8 87 fd ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020af9:	83 c4 10             	add    esp,0x10
c0020afc:	83 ec 08             	sub    esp,0x8
c0020aff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b03:	50                   	push   eax
c0020b04:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b0b:	50                   	push   eax
c0020b0c:	e8 3d 56 fe ff       	call   c000614e <f_stat>
c0020b11:	83 c4 10             	add    esp,0x10
c0020b14:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020b1b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020b22:	85 c0                	test   eax,eax
c0020b24:	74 07                	je     c0020b2d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020b26:	83 f8 04             	cmp    eax,0x4
c0020b29:	74 32                	je     c0020b5d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020b2b:	eb 37                	jmp    c0020b64 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020b2d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b31:	0f b6 c0             	movzx  eax,al
c0020b34:	83 e0 10             	and    eax,0x10
c0020b37:	0f 95 c2             	setne  dl
c0020b3a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020b41:	88 10                	mov    BYTE PTR [eax],dl
c0020b43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020b4a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020b51:	89 01                	mov    DWORD PTR [ecx],eax
c0020b53:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b56:	b8 00 00 00 00       	mov    eax,0x0
c0020b5b:	eb 0c                	jmp    c0020b69 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b5d:	b8 02 00 00 00       	mov    eax,0x2
c0020b62:	eb 05                	jmp    c0020b69 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b64:	b8 01 00 00 00       	mov    eax,0x1
c0020b69:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020b6f:	c3                   	ret    

c0020b70 <FAT::unlink(char const*)>:
c0020b70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b7e:	75 07                	jne    c0020b87 <FAT::unlink(char const*)+0x17>
c0020b80:	b8 04 00 00 00       	mov    eax,0x4
c0020b85:	eb 5c                	jmp    c0020be3 <FAT::unlink(char const*)+0x73>
c0020b87:	83 ec 08             	sub    esp,0x8
c0020b8a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b95:	50                   	push   eax
c0020b96:	e8 71 fc fd ff       	call   c000080c <strcpy>
c0020b9b:	83 c4 10             	add    esp,0x10
c0020b9e:	83 ec 08             	sub    esp,0x8
c0020ba1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ba5:	50                   	push   eax
c0020ba6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bad:	e8 ce fc ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020bb2:	83 c4 10             	add    esp,0x10
c0020bb5:	83 ec 0c             	sub    esp,0xc
c0020bb8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bbc:	50                   	push   eax
c0020bbd:	e8 de 58 fe ff       	call   c00064a0 <f_unlink>
c0020bc2:	83 c4 10             	add    esp,0x10
c0020bc5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020bcc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020bd3:	85 c0                	test   eax,eax
c0020bd5:	75 07                	jne    c0020bde <FAT::unlink(char const*)+0x6e>
c0020bd7:	b8 00 00 00 00       	mov    eax,0x0
c0020bdc:	eb 05                	jmp    c0020be3 <FAT::unlink(char const*)+0x73>
c0020bde:	b8 01 00 00 00       	mov    eax,0x1
c0020be3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020be9:	c3                   	ret    

c0020bea <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020bea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020bf0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020bf7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020bfe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020c02:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020c06:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020c0e:	75 0a                	jne    c0020c1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020c10:	b8 04 00 00 00       	mov    eax,0x4
c0020c15:	e9 1c 01 00 00       	jmp    c0020d36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c1a:	83 ec 08             	sub    esp,0x8
c0020c1d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c24:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c28:	50                   	push   eax
c0020c29:	e8 de fb fd ff       	call   c000080c <strcpy>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	83 ec 08             	sub    esp,0x8
c0020c34:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020c38:	50                   	push   eax
c0020c39:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c40:	e8 3b fc ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020c45:	83 c4 10             	add    esp,0x10
c0020c48:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020c50:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020c58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c5d:	83 e0 01             	and    eax,0x1
c0020c60:	74 08                	je     c0020c6a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020c62:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020c6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c6f:	83 e0 02             	and    eax,0x2
c0020c72:	74 08                	je     c0020c7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020c74:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020c7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c81:	83 e0 04             	and    eax,0x4
c0020c84:	74 08                	je     c0020c8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020c86:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020c8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c93:	83 e0 08             	and    eax,0x8
c0020c96:	74 08                	je     c0020ca0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020c98:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020ca0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ca5:	83 e0 01             	and    eax,0x1
c0020ca8:	74 08                	je     c0020cb2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020caa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020cb2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cb7:	83 e0 02             	and    eax,0x2
c0020cba:	74 08                	je     c0020cc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020cbc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020cc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cc9:	83 e0 04             	and    eax,0x4
c0020ccc:	74 08                	je     c0020cd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020cce:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020cd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cdb:	83 e0 08             	and    eax,0x8
c0020cde:	74 08                	je     c0020ce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020ce0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020ce8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020cef:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020cf6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020cfe:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020d06:	83 ec 04             	sub    esp,0x4
c0020d09:	52                   	push   edx
c0020d0a:	50                   	push   eax
c0020d0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d0f:	50                   	push   eax
c0020d10:	e8 2d 5e fe ff       	call   c0006b42 <f_chmod>
c0020d15:	83 c4 10             	add    esp,0x10
c0020d18:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020d1f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020d26:	85 c0                	test   eax,eax
c0020d28:	75 07                	jne    c0020d31 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020d2a:	b8 00 00 00 00       	mov    eax,0x0
c0020d2f:	eb 05                	jmp    c0020d36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d31:	b8 01 00 00 00       	mov    eax,0x1
c0020d36:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020d3c:	c3                   	ret    
c0020d3d:	90                   	nop

c0020d3e <FAT::rename(char const*, char const*)>:
c0020d3e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020d44:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020d4c:	74 0a                	je     c0020d58 <FAT::rename(char const*, char const*)+0x1a>
c0020d4e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020d56:	75 0a                	jne    c0020d62 <FAT::rename(char const*, char const*)+0x24>
c0020d58:	b8 04 00 00 00       	mov    eax,0x4
c0020d5d:	e9 98 00 00 00       	jmp    c0020dfa <FAT::rename(char const*, char const*)+0xbc>
c0020d62:	83 ec 08             	sub    esp,0x8
c0020d65:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d6c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d73:	50                   	push   eax
c0020d74:	e8 93 fa fd ff       	call   c000080c <strcpy>
c0020d79:	83 c4 10             	add    esp,0x10
c0020d7c:	83 ec 08             	sub    esp,0x8
c0020d7f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020d86:	50                   	push   eax
c0020d87:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d8e:	e8 ed fa ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020d93:	83 c4 10             	add    esp,0x10
c0020d96:	83 ec 08             	sub    esp,0x8
c0020d99:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020da0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020da4:	50                   	push   eax
c0020da5:	e8 62 fa fd ff       	call   c000080c <strcpy>
c0020daa:	83 c4 10             	add    esp,0x10
c0020dad:	83 ec 08             	sub    esp,0x8
c0020db0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020db4:	50                   	push   eax
c0020db5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020dbc:	e8 bf fa ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020dc1:	83 c4 10             	add    esp,0x10
c0020dc4:	83 ec 08             	sub    esp,0x8
c0020dc7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dcb:	50                   	push   eax
c0020dcc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020dd3:	50                   	push   eax
c0020dd4:	e8 76 5a fe ff       	call   c000684f <f_rename>
c0020dd9:	83 c4 10             	add    esp,0x10
c0020ddc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020de3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020dea:	85 c0                	test   eax,eax
c0020dec:	75 07                	jne    c0020df5 <FAT::rename(char const*, char const*)+0xb7>
c0020dee:	b8 00 00 00 00       	mov    eax,0x0
c0020df3:	eb 05                	jmp    c0020dfa <FAT::rename(char const*, char const*)+0xbc>
c0020df5:	b8 01 00 00 00       	mov    eax,0x1
c0020dfa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020e00:	c3                   	ret    
c0020e01:	90                   	nop

c0020e02 <FAT::mkdir(char const*)>:
c0020e02:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e08:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e10:	75 07                	jne    c0020e19 <FAT::mkdir(char const*)+0x17>
c0020e12:	b8 04 00 00 00       	mov    eax,0x4
c0020e17:	eb 5c                	jmp    c0020e75 <FAT::mkdir(char const*)+0x73>
c0020e19:	83 ec 08             	sub    esp,0x8
c0020e1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e27:	50                   	push   eax
c0020e28:	e8 df f9 fd ff       	call   c000080c <strcpy>
c0020e2d:	83 c4 10             	add    esp,0x10
c0020e30:	83 ec 08             	sub    esp,0x8
c0020e33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e37:	50                   	push   eax
c0020e38:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e3f:	e8 3c fa ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020e44:	83 c4 10             	add    esp,0x10
c0020e47:	83 ec 0c             	sub    esp,0xc
c0020e4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e4e:	50                   	push   eax
c0020e4f:	e8 cf 57 fe ff       	call   c0006623 <f_mkdir>
c0020e54:	83 c4 10             	add    esp,0x10
c0020e57:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e5e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e65:	85 c0                	test   eax,eax
c0020e67:	75 07                	jne    c0020e70 <FAT::mkdir(char const*)+0x6e>
c0020e69:	b8 00 00 00 00       	mov    eax,0x0
c0020e6e:	eb 05                	jmp    c0020e75 <FAT::mkdir(char const*)+0x73>
c0020e70:	b8 01 00 00 00       	mov    eax,0x1
c0020e75:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e7b:	c3                   	ret    

c0020e7c <FAT::exists(char const*)>:
c0020e7c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e82:	83 ec 08             	sub    esp,0x8
c0020e85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e90:	50                   	push   eax
c0020e91:	e8 76 f9 fd ff       	call   c000080c <strcpy>
c0020e96:	83 c4 10             	add    esp,0x10
c0020e99:	83 ec 08             	sub    esp,0x8
c0020e9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ea0:	50                   	push   eax
c0020ea1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ea8:	e8 d3 f9 ff ff       	call   c0020880 <FAT::fixFilepath(char*)>
c0020ead:	83 c4 10             	add    esp,0x10
c0020eb0:	83 ec 08             	sub    esp,0x8
c0020eb3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020eba:	50                   	push   eax
c0020ebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ebf:	50                   	push   eax
c0020ec0:	e8 89 52 fe ff       	call   c000614e <f_stat>
c0020ec5:	83 c4 10             	add    esp,0x10
c0020ec8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ecf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020ed6:	85 c0                	test   eax,eax
c0020ed8:	75 04                	jne    c0020ede <FAT::exists(char const*)+0x62>
c0020eda:	b0 01                	mov    al,0x1
c0020edc:	eb 02                	jmp    c0020ee0 <FAT::exists(char const*)+0x64>
c0020ede:	b0 00                	mov    al,0x0
c0020ee0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ee6:	c3                   	ret    
c0020ee7:	90                   	nop

c0020ee8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020ee8:	b8 08 00 00 00       	mov    eax,0x8
c0020eed:	c3                   	ret    

c0020eee <ISO9660::seek(void*, unsigned long long)>:
c0020eee:	53                   	push   ebx
c0020eef:	b8 04 00 00 00       	mov    eax,0x4
c0020ef4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020ef8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020efc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f00:	85 d2                	test   edx,edx
c0020f02:	74 17                	je     c0020f1b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f04:	89 c8                	mov    eax,ecx
c0020f06:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020f09:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020f0c:	b8 01 00 00 00       	mov    eax,0x1
c0020f11:	73 08                	jae    c0020f1b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f13:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020f16:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020f19:	31 c0                	xor    eax,eax
c0020f1b:	5b                   	pop    ebx
c0020f1c:	c3                   	ret    
c0020f1d:	90                   	nop

c0020f1e <ISO9660::tell(void*, unsigned long long*)>:
c0020f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f26:	85 d2                	test   edx,edx
c0020f28:	74 12                	je     c0020f3c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f2a:	85 c0                	test   eax,eax
c0020f2c:	74 0e                	je     c0020f3c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f2e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020f31:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020f34:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f37:	89 10                	mov    DWORD PTR [eax],edx
c0020f39:	31 c0                	xor    eax,eax
c0020f3b:	c3                   	ret    
c0020f3c:	b8 04 00 00 00       	mov    eax,0x4
c0020f41:	c3                   	ret    

c0020f42 <ISO9660::getName()>:
c0020f42:	b8 5c bc 02 c0       	mov    eax,0xc002bc5c
c0020f47:	c3                   	ret    

c0020f48 <ISO9660::stat(void*, unsigned long long*)>:
c0020f48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f50:	85 d2                	test   edx,edx
c0020f52:	74 12                	je     c0020f66 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f54:	85 c0                	test   eax,eax
c0020f56:	74 0e                	je     c0020f66 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f58:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020f5b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f5e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f61:	89 10                	mov    DWORD PTR [eax],edx
c0020f63:	31 c0                	xor    eax,eax
c0020f65:	c3                   	ret    
c0020f66:	b8 04 00 00 00       	mov    eax,0x4
c0020f6b:	c3                   	ret    

c0020f6c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f6c:	b8 01 00 00 00       	mov    eax,0x1
c0020f71:	c3                   	ret    

c0020f72 <ISO9660::unlink(char const*)>:
c0020f72:	b8 01 00 00 00       	mov    eax,0x1
c0020f77:	c3                   	ret    

c0020f78 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020f78:	b8 01 00 00 00       	mov    eax,0x1
c0020f7d:	c3                   	ret    

c0020f7e <ISO9660::rename(char const*, char const*)>:
c0020f7e:	b8 01 00 00 00       	mov    eax,0x1
c0020f83:	c3                   	ret    

c0020f84 <ISO9660::mkdir(char const*)>:
c0020f84:	b8 01 00 00 00       	mov    eax,0x1
c0020f89:	c3                   	ret    

c0020f8a <ISO9660::close(void*)>:
c0020f8a:	83 ec 0c             	sub    esp,0xc
c0020f8d:	b8 04 00 00 00       	mov    eax,0x4
c0020f92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f96:	85 d2                	test   edx,edx
c0020f98:	74 0e                	je     c0020fa8 <ISO9660::close(void*)+0x1e>
c0020f9a:	83 ec 0c             	sub    esp,0xc
c0020f9d:	52                   	push   edx
c0020f9e:	e8 09 e6 fe ff       	call   c000f5ac <free>
c0020fa3:	83 c4 10             	add    esp,0x10
c0020fa6:	31 c0                	xor    eax,eax
c0020fa8:	83 c4 0c             	add    esp,0xc
c0020fab:	c3                   	ret    

c0020fac <ISO9660::closeDir(void*)>:
c0020fac:	83 ec 0c             	sub    esp,0xc
c0020faf:	b8 04 00 00 00       	mov    eax,0x4
c0020fb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fb8:	85 d2                	test   edx,edx
c0020fba:	74 0e                	je     c0020fca <ISO9660::closeDir(void*)+0x1e>
c0020fbc:	83 ec 0c             	sub    esp,0xc
c0020fbf:	52                   	push   edx
c0020fc0:	e8 e7 e5 fe ff       	call   c000f5ac <free>
c0020fc5:	83 c4 10             	add    esp,0x10
c0020fc8:	31 c0                	xor    eax,eax
c0020fca:	83 c4 0c             	add    esp,0xc
c0020fcd:	c3                   	ret    

c0020fce <ISO9660::~ISO9660()>:
c0020fce:	83 ec 0c             	sub    esp,0xc
c0020fd1:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c0020fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fda:	89 10                	mov    DWORD PTR [eax],edx
c0020fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fe0:	83 ec 0c             	sub    esp,0xc
c0020fe3:	50                   	push   eax
c0020fe4:	e8 09 19 ff ff       	call   c00128f2 <Filesystem::~Filesystem()>
c0020fe9:	83 c4 10             	add    esp,0x10
c0020fec:	90                   	nop
c0020fed:	83 c4 0c             	add    esp,0xc
c0020ff0:	c3                   	ret    
c0020ff1:	90                   	nop

c0020ff2 <ISO9660::~ISO9660()>:
c0020ff2:	83 ec 0c             	sub    esp,0xc
c0020ff5:	83 ec 0c             	sub    esp,0xc
c0020ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ffc:	e8 cd ff ff ff       	call   c0020fce <ISO9660::~ISO9660()>
c0021001:	83 c4 10             	add    esp,0x10
c0021004:	83 ec 08             	sub    esp,0x8
c0021007:	6a 08                	push   0x8
c0021009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002100d:	e8 da 14 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0021012:	83 c4 10             	add    esp,0x10
c0021015:	83 c4 0c             	add    esp,0xc
c0021018:	c3                   	ret    

c0021019 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021019:	55                   	push   ebp
c002101a:	31 c9                	xor    ecx,ecx
c002101c:	57                   	push   edi
c002101d:	56                   	push   esi
c002101e:	53                   	push   ebx
c002101f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021023:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021027:	89 eb                	mov    ebx,ebp
c0021029:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002102d:	39 ce                	cmp    esi,ecx
c002102f:	7e 17                	jle    c0021048 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021031:	31 d2                	xor    edx,edx
c0021033:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021037:	7d 13                	jge    c002104c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021039:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002103d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021040:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021043:	75 0d                	jne    c0021052 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021045:	42                   	inc    edx
c0021046:	eb eb                	jmp    c0021033 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021048:	31 c0                	xor    eax,eax
c002104a:	eb 0a                	jmp    c0021056 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002104c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021050:	eb 04                	jmp    c0021056 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021052:	41                   	inc    ecx
c0021053:	43                   	inc    ebx
c0021054:	eb d7                	jmp    c002102d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021056:	5b                   	pop    ebx
c0021057:	5e                   	pop    esi
c0021058:	5f                   	pop    edi
c0021059:	5d                   	pop    ebp
c002105a:	c3                   	ret    

c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002105b:	57                   	push   edi
c002105c:	56                   	push   esi
c002105d:	53                   	push   ebx
c002105e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021062:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021066:	39 0d 20 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e20,ecx
c002106c:	75 08                	jne    c0021076 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002106e:	38 05 94 cc 02 c0    	cmp    BYTE PTR ds:0xc002cc94,al
c0021074:	74 2b                	je     c00210a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021076:	83 ec 0c             	sub    esp,0xc
c0021079:	a2 94 cc 02 c0       	mov    ds:0xc002cc94,al
c002107e:	68 40 0e 03 c0       	push   0xc0030e40
c0021083:	0f be c0             	movsx  eax,al
c0021086:	6a 01                	push   0x1
c0021088:	89 0d 20 0e 03 c0    	mov    DWORD PTR ds:0xc0030e20,ecx
c002108e:	31 db                	xor    ebx,ebx
c0021090:	53                   	push   ebx
c0021091:	51                   	push   ecx
c0021092:	ff 34 85 fc db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2404]
c0021099:	e8 7a 4e ff ff       	call   c0015f18 <LogicalDisk::read(unsigned long long, int, void*)>
c002109e:	83 c4 20             	add    esp,0x20
c00210a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00210a5:	be 40 0e 03 c0       	mov    esi,0xc0030e40
c00210aa:	b9 00 08 00 00       	mov    ecx,0x800
c00210af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210b1:	5b                   	pop    ebx
c00210b2:	5e                   	pop    esi
c00210b3:	5f                   	pop    edi
c00210b4:	c3                   	ret    
c00210b5:	90                   	nop

c00210b6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00210b6:	81 ec 10 08 00 00    	sub    esp,0x810
c00210bc:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00210c3:	83 c0 41             	add    eax,0x41
c00210c6:	0f be c0             	movsx  eax,al
c00210c9:	50                   	push   eax
c00210ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210ce:	50                   	push   eax
c00210cf:	6a 10                	push   0x10
c00210d1:	e8 85 ff ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210d6:	83 c4 10             	add    esp,0x10
c00210d9:	31 c0                	xor    eax,eax
c00210db:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00210e0:	75 1d                	jne    c00210ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210e2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00210e7:	75 16                	jne    c00210ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210e9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00210ee:	75 0f                	jne    c00210ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210f0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00210f5:	75 08                	jne    c00210ff <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210f7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00210fc:	0f 94 c0             	sete   al
c00210ff:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021105:	c3                   	ret    

c0021106 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021106:	55                   	push   ebp
c0021107:	57                   	push   edi
c0021108:	56                   	push   esi
c0021109:	53                   	push   ebx
c002110a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021110:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021117:	85 ed                	test   ebp,ebp
c0021119:	0f 84 da 01 00 00    	je     c00212f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002111f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021127:	0f 84 cc 01 00 00    	je     c00212f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002112d:	b8 01 00 00 00       	mov    eax,0x1
c0021132:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021136:	0f 85 c2 01 00 00    	jne    c00212fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002113c:	31 d2                	xor    edx,edx
c002113e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021145:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021148:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002114b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002114e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021151:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021155:	01 c8                	add    eax,ecx
c0021157:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002115a:	11 da                	adc    edx,ebx
c002115c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021160:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021164:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021168:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002116c:	19 d7                	sbb    edi,edx
c002116e:	72 11                	jb     c0021181 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021170:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021173:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021177:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002117b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002117f:	eb 0c                	jmp    c002118d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021181:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021185:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021189:	29 ce                	sub    esi,ecx
c002118b:	19 df                	sbb    edi,ebx
c002118d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021190:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021193:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021197:	c1 e0 0b             	shl    eax,0xb
c002119a:	01 c8                	add    eax,ecx
c002119c:	11 da                	adc    edx,ebx
c002119e:	89 04 24             	mov    DWORD PTR [esp],eax
c00211a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211a5:	51                   	push   ecx
c00211a6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211aa:	50                   	push   eax
c00211ab:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00211af:	53                   	push   ebx
c00211b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211b8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211bc:	50                   	push   eax
c00211bd:	e8 99 fe ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211c2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00211c5:	b8 00 08 00 00       	mov    eax,0x800
c00211ca:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00211d0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00211d4:	29 d0                	sub    eax,edx
c00211d6:	83 c4 10             	add    esp,0x10
c00211d9:	89 f9                	mov    ecx,edi
c00211db:	39 c6                	cmp    esi,eax
c00211dd:	83 d9 00             	sbb    ecx,0x0
c00211e0:	7d 1b                	jge    c00211fd <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00211e2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00211e7:	75 12                	jne    c00211fb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00211e9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00211f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211f6:	e9 fa 00 00 00       	jmp    c00212f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00211fb:	89 f0                	mov    eax,esi
c00211fd:	01 d3                	add    ebx,edx
c00211ff:	31 d2                	xor    edx,edx
c0021201:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021205:	39 c2                	cmp    edx,eax
c0021207:	7d 14                	jge    c002121d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021209:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021210:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021214:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021217:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002121a:	42                   	inc    edx
c002121b:	eb e8                	jmp    c0021205 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002121d:	89 c2                	mov    edx,eax
c002121f:	85 c0                	test   eax,eax
c0021221:	79 02                	jns    c0021225 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021223:	31 d2                	xor    edx,edx
c0021225:	01 c2                	add    edx,eax
c0021227:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002122a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021231:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021235:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021239:	99                   	cdq    
c002123a:	01 c1                	add    ecx,eax
c002123c:	11 d3                	adc    ebx,edx
c002123e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021242:	29 c6                	sub    esi,eax
c0021244:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021248:	19 d7                	sbb    edi,edx
c002124a:	89 34 24             	mov    DWORD PTR [esp],esi
c002124d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021251:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021256:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021259:	b8 00 00 00 00       	mov    eax,0x0
c002125e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021262:	7d 43                	jge    c00212a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021264:	52                   	push   edx
c0021265:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021269:	50                   	push   eax
c002126a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002126e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021272:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021276:	0f ac d0 0b          	shrd   eax,edx,0xb
c002127a:	50                   	push   eax
c002127b:	e8 db fd ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021280:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021288:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002128d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021295:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002129d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00212a2:	83 c4 10             	add    esp,0x10
c00212a5:	eb aa                	jmp    c0021251 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00212a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212ab:	0b 04 24             	or     eax,DWORD PTR [esp]
c00212ae:	74 2a                	je     c00212da <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00212b0:	50                   	push   eax
c00212b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212b5:	50                   	push   eax
c00212b6:	8d 74 24 28          	lea    esi,[esp+0x28]
c00212ba:	56                   	push   esi
c00212bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00212bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00212c3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00212c7:	51                   	push   ecx
c00212c8:	e8 8e fd ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212cd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00212d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00212d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00212d7:	83 c4 10             	add    esp,0x10
c00212da:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00212e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00212e9:	89 18                	mov    DWORD PTR [eax],ebx
c00212eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212ef:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00212f2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00212f5:	31 c0                	xor    eax,eax
c00212f7:	eb 05                	jmp    c00212fe <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00212f9:	b8 04 00 00 00       	mov    eax,0x4
c00212fe:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021304:	5b                   	pop    ebx
c0021305:	5e                   	pop    esi
c0021306:	5f                   	pop    edi
c0021307:	5d                   	pop    ebp
c0021308:	c3                   	ret    
c0021309:	90                   	nop

c002130a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002130a:	55                   	push   ebp
c002130b:	57                   	push   edi
c002130c:	56                   	push   esi
c002130d:	53                   	push   ebx
c002130e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021314:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002131b:	85 ed                	test   ebp,ebp
c002131d:	0f 84 51 02 00 00    	je     c0021574 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021323:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002132b:	0f 84 43 02 00 00    	je     c0021574 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021331:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021334:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021337:	75 0a                	jne    c0021343 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021339:	b8 07 00 00 00       	mov    eax,0x7
c002133e:	e9 36 02 00 00       	jmp    c0021579 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021343:	50                   	push   eax
c0021344:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021348:	50                   	push   eax
c0021349:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021350:	53                   	push   ebx
c0021351:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021354:	c1 e0 0b             	shl    eax,0xb
c0021357:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002135a:	c1 e8 0b             	shr    eax,0xb
c002135d:	50                   	push   eax
c002135e:	e8 f8 fc ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021363:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	89 c1                	mov    ecx,eax
c002136b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002136e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021374:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021377:	84 db                	test   bl,bl
c0021379:	0f 85 8b 00 00 00    	jne    c002140a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002137f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021385:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021388:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002138e:	29 c6                	sub    esi,eax
c0021390:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021394:	89 f3                	mov    ebx,esi
c0021396:	89 f1                	mov    ecx,esi
c0021398:	c1 fb 1f             	sar    ebx,0x1f
c002139b:	01 f0                	add    eax,esi
c002139d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00213a0:	11 da                	adc    edx,ebx
c00213a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00213a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213a9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213ac:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213af:	89 d8                	mov    eax,ebx
c00213b1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00213b5:	ba 00 00 00 00       	mov    edx,0x0
c00213ba:	19 f8                	sbb    eax,edi
c00213bc:	b8 00 00 00 00       	mov    eax,0x0
c00213c1:	73 08                	jae    c00213cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00213c3:	89 f0                	mov    eax,esi
c00213c5:	89 fa                	mov    edx,edi
c00213c7:	29 c8                	sub    eax,ecx
c00213c9:	19 da                	sbb    edx,ebx
c00213cb:	89 d7                	mov    edi,edx
c00213cd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00213d0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00213d3:	09 c7                	or     edi,eax
c00213d5:	0f 84 5e ff ff ff    	je     c0021339 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00213db:	57                   	push   edi
c00213dc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213e0:	50                   	push   eax
c00213e1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00213e8:	53                   	push   ebx
c00213e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00213ec:	c1 e0 0b             	shl    eax,0xb
c00213ef:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00213f3:	c1 e8 0b             	shr    eax,0xb
c00213f6:	50                   	push   eax
c00213f7:	e8 5f fc ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00213ff:	83 c4 10             	add    esp,0x10
c0021402:	25 ff 07 00 00       	and    eax,0x7ff
c0021407:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002140a:	31 ff                	xor    edi,edi
c002140c:	56                   	push   esi
c002140d:	6a 28                	push   0x28
c002140f:	6a 00                	push   0x0
c0021411:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021415:	50                   	push   eax
c0021416:	e8 35 f3 fd ff       	call   c0000750 <memset>
c002141b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002141e:	25 ff 07 00 00       	and    eax,0x7ff
c0021423:	89 c6                	mov    esi,eax
c0021425:	83 c6 21             	add    esi,0x21
c0021428:	83 d7 00             	adc    edi,0x0
c002142b:	83 c4 10             	add    esp,0x10
c002142e:	31 c9                	xor    ecx,ecx
c0021430:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021437:	83 f9 28             	cmp    ecx,0x28
c002143a:	88 04 24             	mov    BYTE PTR [esp],al
c002143d:	0f 94 c2             	sete   dl
c0021440:	88 d0                	mov    al,dl
c0021442:	ba ff 07 00 00       	mov    edx,0x7ff
c0021447:	39 f2                	cmp    edx,esi
c0021449:	ba 00 00 00 00       	mov    edx,0x0
c002144e:	19 fa                	sbb    edx,edi
c0021450:	0f 92 c2             	setb   dl
c0021453:	09 c2                	or     edx,eax
c0021455:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021459:	0f 94 c0             	sete   al
c002145c:	08 d0                	or     al,dl
c002145e:	75 16                	jne    c0021476 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021460:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021464:	74 10                	je     c0021476 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021466:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021469:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002146d:	41                   	inc    ecx
c002146e:	83 c6 01             	add    esi,0x1
c0021471:	83 d7 00             	adc    edi,0x0
c0021474:	eb ba                	jmp    c0021430 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021476:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002147d:	83 ec 0c             	sub    esp,0xc
c0021480:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021484:	56                   	push   esi
c0021485:	e8 e2 f2 fd ff       	call   c000076c <strlen>
c002148a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021491:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021495:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002149d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214a0:	5a                   	pop    edx
c00214a1:	25 ff 07 00 00       	and    eax,0x7ff
c00214a6:	59                   	pop    ecx
c00214a7:	01 f8                	add    eax,edi
c00214a9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00214af:	83 e0 02             	and    eax,0x2
c00214b2:	3c 01                	cmp    al,0x1
c00214b4:	19 c0                	sbb    eax,eax
c00214b6:	83 c0 02             	add    eax,0x2
c00214b9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214bd:	56                   	push   esi
c00214be:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00214c2:	50                   	push   eax
c00214c3:	e8 44 f3 fd ff       	call   c000080c <strcpy>
c00214c8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00214cc:	83 c4 10             	add    esp,0x10
c00214cf:	84 c0                	test   al,al
c00214d1:	75 21                	jne    c00214f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00214d3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00214db:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00214e3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00214eb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00214f2:	eb 28                	jmp    c002151c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00214f4:	fe c8                	dec    al
c00214f6:	75 24                	jne    c002151c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00214f8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021500:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021508:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021510:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021517:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002151c:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021520:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021527:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002152e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021530:	0f b6 f3             	movzx  esi,bl
c0021533:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002153a:	31 db                	xor    ebx,ebx
c002153c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021542:	89 df                	mov    edi,ebx
c0021544:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002154a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002154d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021550:	39 c6                	cmp    esi,eax
c0021552:	19 d7                	sbb    edi,edx
c0021554:	72 10                	jb     c0021566 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021556:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002155d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021564:	eb 0a                	jmp    c0021570 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021566:	29 f0                	sub    eax,esi
c0021568:	19 da                	sbb    edx,ebx
c002156a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002156d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021570:	31 c0                	xor    eax,eax
c0021572:	eb 05                	jmp    c0021579 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021574:	b8 04 00 00 00       	mov    eax,0x4
c0021579:	81 c4 5c 09 00 00    	add    esp,0x95c
c002157f:	5b                   	pop    ebx
c0021580:	5e                   	pop    esi
c0021581:	5f                   	pop    edi
c0021582:	5d                   	pop    ebp
c0021583:	c3                   	ret    

c0021584 <readRoot(unsigned int*, unsigned int*, char)>:
c0021584:	57                   	push   edi
c0021585:	56                   	push   esi
c0021586:	81 ec 38 08 00 00    	sub    esp,0x838
c002158c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021594:	50                   	push   eax
c0021595:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021599:	50                   	push   eax
c002159a:	6a 10                	push   0x10
c002159c:	e8 ba fa ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215a1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00215a8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00215ac:	b9 22 00 00 00       	mov    ecx,0x22
c00215b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215b3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00215ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00215be:	89 10                	mov    DWORD PTR [eax],edx
c00215c0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00215c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00215cb:	89 10                	mov    DWORD PTR [eax],edx
c00215cd:	81 c4 44 08 00 00    	add    esp,0x844
c00215d3:	b0 01                	mov    al,0x1
c00215d5:	5e                   	pop    esi
c00215d6:	5f                   	pop    edi
c00215d7:	c3                   	ret    

c00215d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00215d8:	55                   	push   ebp
c00215d9:	57                   	push   edi
c00215da:	56                   	push   esi
c00215db:	53                   	push   ebx
c00215dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215e2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00215e9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00215f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215f4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00215f8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00215fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021600:	75 03                	jne    c0021605 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021602:	83 c3 02             	add    ebx,0x2
c0021605:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021608:	75 03                	jne    c002160d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002160a:	43                   	inc    ebx
c002160b:	eb f8                	jmp    c0021605 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002160d:	51                   	push   ecx
c002160e:	68 00 01 00 00       	push   0x100
c0021613:	6a 00                	push   0x0
c0021615:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021619:	50                   	push   eax
c002161a:	e8 31 f1 fd ff       	call   c0000750 <memset>
c002161f:	83 c4 10             	add    esp,0x10
c0021622:	31 d2                	xor    edx,edx
c0021624:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021627:	84 c0                	test   al,al
c0021629:	74 21                	je     c002164c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002162b:	3c 2f                	cmp    al,0x2f
c002162d:	75 0b                	jne    c002163a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002162f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021633:	bd 01 00 00 00       	mov    ebp,0x1
c0021638:	eb 14                	jmp    c002164e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002163a:	8d 48 9f             	lea    ecx,[eax-0x61]
c002163d:	80 f9 19             	cmp    cl,0x19
c0021640:	77 03                	ja     c0021645 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021642:	83 e8 20             	sub    eax,0x20
c0021645:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021649:	42                   	inc    edx
c002164a:	eb d8                	jmp    c0021624 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002164c:	31 ed                	xor    ebp,ebp
c002164e:	83 ec 0c             	sub    esp,0xc
c0021651:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021658:	e8 3f df fe ff       	call   c000f59c <malloc>
c002165d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021664:	89 c6                	mov    esi,eax
c0021666:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002166c:	c1 ef 0b             	shr    edi,0xb
c002166f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021676:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002167a:	83 c4 10             	add    esp,0x10
c002167d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021682:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021686:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002168d:	74 28                	je     c00216b7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002168f:	52                   	push   edx
c0021690:	57                   	push   edi
c0021691:	50                   	push   eax
c0021692:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021696:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002169d:	e8 b9 f9 ff ff       	call   c002105b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216a6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00216ad:	05 00 08 00 00       	add    eax,0x800
c00216b2:	83 c4 10             	add    esp,0x10
c00216b5:	eb cb                	jmp    c0021682 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00216b7:	83 ec 0c             	sub    esp,0xc
c00216ba:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00216be:	57                   	push   edi
c00216bf:	e8 a8 f0 fd ff       	call   c000076c <strlen>
c00216c4:	50                   	push   eax
c00216c5:	57                   	push   edi
c00216c6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00216cd:	56                   	push   esi
c00216ce:	e8 46 f9 ff ff       	call   c0021019 <__memmem(unsigned char*, int, unsigned char*, int)>
c00216d3:	83 c4 20             	add    esp,0x20
c00216d6:	85 c0                	test   eax,eax
c00216d8:	75 13                	jne    c00216ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00216da:	83 ec 0c             	sub    esp,0xc
c00216dd:	56                   	push   esi
c00216de:	e8 c9 de fe ff       	call   c000f5ac <free>
c00216e3:	83 c4 10             	add    esp,0x10
c00216e6:	31 c0                	xor    eax,eax
c00216e8:	e9 b3 00 00 00       	jmp    c00217a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00216ed:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00216f1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00216f5:	c1 e7 08             	shl    edi,0x8
c00216f8:	c1 e2 10             	shl    edx,0x10
c00216fb:	09 d7                	or     edi,edx
c00216fd:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021701:	09 d7                	or     edi,edx
c0021703:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021707:	c1 e2 18             	shl    edx,0x18
c002170a:	09 d7                	or     edi,edx
c002170c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021710:	89 d1                	mov    ecx,edx
c0021712:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021716:	c1 e1 08             	shl    ecx,0x8
c0021719:	c1 e2 10             	shl    edx,0x10
c002171c:	09 ca                	or     edx,ecx
c002171e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021722:	09 ca                	or     edx,ecx
c0021724:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021728:	c1 e1 18             	shl    ecx,0x18
c002172b:	09 ca                	or     edx,ecx
c002172d:	89 e9                	mov    ecx,ebp
c002172f:	84 c9                	test   cl,cl
c0021731:	74 3c                	je     c002176f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021733:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021737:	83 ec 0c             	sub    esp,0xc
c002173a:	56                   	push   esi
c002173b:	e8 6c de fe ff       	call   c000f5ac <free>
c0021740:	83 c4 0c             	add    esp,0xc
c0021743:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002174a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002174f:	50                   	push   eax
c0021750:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021757:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002175e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021762:	52                   	push   edx
c0021763:	57                   	push   edi
c0021764:	53                   	push   ebx
c0021765:	e8 6e fe ff ff       	call   c00215d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002176a:	83 c4 20             	add    esp,0x20
c002176d:	eb 31                	jmp    c00217a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002176f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021772:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021779:	d0 e8                	shr    al,1
c002177b:	89 3b                	mov    DWORD PTR [ebx],edi
c002177d:	83 e0 01             	and    eax,0x1
c0021780:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021787:	83 ec 0c             	sub    esp,0xc
c002178a:	89 13                	mov    DWORD PTR [ebx],edx
c002178c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021793:	89 03                	mov    DWORD PTR [ebx],eax
c0021795:	56                   	push   esi
c0021796:	e8 11 de fe ff       	call   c000f5ac <free>
c002179b:	83 c4 10             	add    esp,0x10
c002179e:	b0 01                	mov    al,0x1
c00217a0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217a6:	5b                   	pop    ebx
c00217a7:	5e                   	pop    esi
c00217a8:	5f                   	pop    edi
c00217a9:	5d                   	pop    ebp
c00217aa:	c3                   	ret    

c00217ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00217ab:	55                   	push   ebp
c00217ac:	57                   	push   edi
c00217ad:	56                   	push   esi
c00217ae:	53                   	push   ebx
c00217af:	83 ec 20             	sub    esp,0x20
c00217b2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00217b6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00217ba:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00217be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217c6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00217ce:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00217d3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00217d9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00217df:	57                   	push   edi
c00217e0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217e4:	50                   	push   eax
c00217e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217e9:	50                   	push   eax
c00217ea:	e8 95 fd ff ff       	call   c0021584 <readRoot(unsigned int*, unsigned int*, char)>
c00217ef:	5a                   	pop    edx
c00217f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00217f4:	e8 73 ef fd ff       	call   c000076c <strlen>
c00217f9:	83 c4 10             	add    esp,0x10
c00217fc:	83 f8 03             	cmp    eax,0x3
c00217ff:	77 17                	ja     c0021818 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021805:	89 03                	mov    DWORD PTR [ebx],eax
c0021807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002180b:	89 06                	mov    DWORD PTR [esi],eax
c002180d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021814:	b0 01                	mov    al,0x1
c0021816:	eb 19                	jmp    c0021831 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021818:	50                   	push   eax
c0021819:	55                   	push   ebp
c002181a:	57                   	push   edi
c002181b:	56                   	push   esi
c002181c:	53                   	push   ebx
c002181d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021821:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021825:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021829:	e8 aa fd ff ff       	call   c00215d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002182e:	83 c4 20             	add    esp,0x20
c0021831:	83 c4 1c             	add    esp,0x1c
c0021834:	5b                   	pop    ebx
c0021835:	5e                   	pop    esi
c0021836:	5f                   	pop    edi
c0021837:	5d                   	pop    ebp
c0021838:	c3                   	ret    
c0021839:	90                   	nop

c002183a <ISO9660::open(char const*, void**, FileOpenMode)>:
c002183a:	57                   	push   edi
c002183b:	56                   	push   esi
c002183c:	53                   	push   ebx
c002183d:	83 ec 10             	sub    esp,0x10
c0021840:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021844:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021848:	85 ff                	test   edi,edi
c002184a:	0f 84 8b 00 00 00    	je     c00218db <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021850:	85 f6                	test   esi,esi
c0021852:	0f 84 83 00 00 00    	je     c00218db <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021858:	b8 03 00 00 00       	mov    eax,0x3
c002185d:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021862:	75 7c                	jne    c00218e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021864:	83 ec 0c             	sub    esp,0xc
c0021867:	6a 1c                	push   0x1c
c0021869:	e8 2e dd fe ff       	call   c000f59c <malloc>
c002186e:	89 07                	mov    DWORD PTR [edi],eax
c0021870:	89 c3                	mov    ebx,eax
c0021872:	58                   	pop    eax
c0021873:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021877:	50                   	push   eax
c0021878:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002187b:	50                   	push   eax
c002187c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021880:	50                   	push   eax
c0021881:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021885:	50                   	push   eax
c0021886:	56                   	push   esi
c0021887:	e8 1f ff ff ff       	call   c00217ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002188c:	83 c4 20             	add    esp,0x20
c002188f:	84 c0                	test   al,al
c0021891:	74 07                	je     c002189a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021893:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021898:	74 0b                	je     c00218a5 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c002189a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002189e:	b8 01 00 00 00       	mov    eax,0x1
c00218a3:	eb 3b                	jmp    c00218e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00218a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218a9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00218ad:	89 03                	mov    DWORD PTR [ebx],eax
c00218af:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00218b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218ba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00218c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00218cb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00218d2:	8a 06                	mov    al,BYTE PTR [esi]
c00218d4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00218d7:	31 c0                	xor    eax,eax
c00218d9:	eb 05                	jmp    c00218e0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00218db:	b8 04 00 00 00       	mov    eax,0x4
c00218e0:	83 c4 10             	add    esp,0x10
c00218e3:	5b                   	pop    ebx
c00218e4:	5e                   	pop    esi
c00218e5:	5f                   	pop    edi
c00218e6:	c3                   	ret    
c00218e7:	90                   	nop

c00218e8 <ISO9660::exists(char const*)>:
c00218e8:	83 ec 28             	sub    esp,0x28
c00218eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00218ef:	8d 54 24 18          	lea    edx,[esp+0x18]
c00218f3:	52                   	push   edx
c00218f4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00218f7:	52                   	push   edx
c00218f8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00218fc:	52                   	push   edx
c00218fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021901:	52                   	push   edx
c0021902:	50                   	push   eax
c0021903:	e8 a3 fe ff ff       	call   c00217ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021908:	83 c4 3c             	add    esp,0x3c
c002190b:	c3                   	ret    

c002190c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002190c:	56                   	push   esi
c002190d:	53                   	push   ebx
c002190e:	83 ec 14             	sub    esp,0x14
c0021911:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021915:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021919:	85 db                	test   ebx,ebx
c002191b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002191f:	0f 94 c2             	sete   dl
c0021922:	85 f6                	test   esi,esi
c0021924:	0f 94 c0             	sete   al
c0021927:	08 c2                	or     dl,al
c0021929:	75 68                	jne    c0021993 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002192b:	85 c9                	test   ecx,ecx
c002192d:	74 64                	je     c0021993 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002192f:	83 ec 0c             	sub    esp,0xc
c0021932:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021935:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021939:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002193f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021946:	50                   	push   eax
c0021947:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002194a:	50                   	push   eax
c002194b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002194f:	50                   	push   eax
c0021950:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021954:	50                   	push   eax
c0021955:	51                   	push   ecx
c0021956:	e8 50 fe ff ff       	call   c00217ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002195b:	83 c4 20             	add    esp,0x20
c002195e:	ba 01 00 00 00       	mov    edx,0x1
c0021963:	84 c0                	test   al,al
c0021965:	74 31                	je     c0021998 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021967:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002196b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021972:	89 03                	mov    DWORD PTR [ebx],eax
c0021974:	ba 00 00 00 00       	mov    edx,0x0
c0021979:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002197d:	85 c0                	test   eax,eax
c002197f:	0f 95 06             	setne  BYTE PTR [esi]
c0021982:	74 14                	je     c0021998 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021984:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002198a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021991:	eb 05                	jmp    c0021998 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021993:	ba 04 00 00 00       	mov    edx,0x4
c0021998:	83 c4 14             	add    esp,0x14
c002199b:	89 d0                	mov    eax,edx
c002199d:	5b                   	pop    ebx
c002199e:	5e                   	pop    esi
c002199f:	c3                   	ret    

c00219a0 <ISO9660::openDir(char const*, void**)>:
c00219a0:	57                   	push   edi
c00219a1:	56                   	push   esi
c00219a2:	53                   	push   ebx
c00219a3:	83 ec 10             	sub    esp,0x10
c00219a6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219aa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219ae:	85 ff                	test   edi,edi
c00219b0:	74 7b                	je     c0021a2d <ISO9660::openDir(char const*, void**)+0x8d>
c00219b2:	85 f6                	test   esi,esi
c00219b4:	74 77                	je     c0021a2d <ISO9660::openDir(char const*, void**)+0x8d>
c00219b6:	83 ec 0c             	sub    esp,0xc
c00219b9:	6a 1c                	push   0x1c
c00219bb:	e8 dc db fe ff       	call   c000f59c <malloc>
c00219c0:	89 07                	mov    DWORD PTR [edi],eax
c00219c2:	89 c3                	mov    ebx,eax
c00219c4:	58                   	pop    eax
c00219c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219c9:	50                   	push   eax
c00219ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00219cd:	50                   	push   eax
c00219ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219d2:	50                   	push   eax
c00219d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219d7:	50                   	push   eax
c00219d8:	56                   	push   esi
c00219d9:	e8 cd fd ff ff       	call   c00217ab <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219de:	83 c4 20             	add    esp,0x20
c00219e1:	84 c0                	test   al,al
c00219e3:	74 07                	je     c00219ec <ISO9660::openDir(char const*, void**)+0x4c>
c00219e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219ea:	75 0b                	jne    c00219f7 <ISO9660::openDir(char const*, void**)+0x57>
c00219ec:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00219f0:	b8 01 00 00 00       	mov    eax,0x1
c00219f5:	eb 3b                	jmp    c0021a32 <ISO9660::openDir(char const*, void**)+0x92>
c00219f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219fb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00219ff:	89 03                	mov    DWORD PTR [ebx],eax
c0021a01:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a0c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a13:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a1a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a1d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a24:	8a 06                	mov    al,BYTE PTR [esi]
c0021a26:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a29:	31 c0                	xor    eax,eax
c0021a2b:	eb 05                	jmp    c0021a32 <ISO9660::openDir(char const*, void**)+0x92>
c0021a2d:	b8 04 00 00 00       	mov    eax,0x4
c0021a32:	83 c4 10             	add    esp,0x10
c0021a35:	5b                   	pop    ebx
c0021a36:	5e                   	pop    esi
c0021a37:	5f                   	pop    edi
c0021a38:	c3                   	ret    
c0021a39:	90                   	nop

c0021a3a <ISO9660::ISO9660()>:
c0021a3a:	83 ec 0c             	sub    esp,0xc
c0021a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a41:	83 ec 0c             	sub    esp,0xc
c0021a44:	50                   	push   eax
c0021a45:	e8 84 0e ff ff       	call   c00128ce <Filesystem::Filesystem()>
c0021a4a:	83 c4 10             	add    esp,0x10
c0021a4d:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c0021a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a56:	89 10                	mov    DWORD PTR [eax],edx
c0021a58:	90                   	nop
c0021a59:	83 c4 0c             	add    esp,0xc
c0021a5c:	c3                   	ret    
c0021a5d:	90                   	nop

c0021a5e <SoundChannel::SoundChannel(int, int, int, int)>:
c0021a5e:	83 ec 1c             	sub    esp,0x1c
c0021a61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021a69:	89 10                	mov    DWORD PTR [eax],edx
c0021a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021a73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021a7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a81:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021a86:	75 23                	jne    c0021aab <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a95:	0f af c2             	imul   eax,edx
c0021a98:	85 c0                	test   eax,eax
c0021a9a:	79 03                	jns    c0021a9f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021a9c:	83 c0 03             	add    eax,0x3
c0021a9f:	c1 f8 02             	sar    eax,0x2
c0021aa2:	05 a0 0f 00 00       	add    eax,0xfa0
c0021aa7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021ab3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aba:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ac5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ad0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ad3:	c1 e0 02             	shl    eax,0x2
c0021ad6:	83 ec 0c             	sub    esp,0xc
c0021ad9:	50                   	push   eax
c0021ada:	e8 bd da fe ff       	call   c000f59c <malloc>
c0021adf:	83 c4 10             	add    esp,0x10
c0021ae2:	89 c2                	mov    edx,eax
c0021ae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ae8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021aeb:	83 ec 04             	sub    esp,0x4
c0021aee:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021af2:	50                   	push   eax
c0021af3:	6a 01                	push   0x1
c0021af5:	6a 04                	push   0x4
c0021af7:	e8 69 70 fe ff       	call   c0008b65 <src_new>
c0021afc:	83 c4 10             	add    esp,0x10
c0021aff:	89 c2                	mov    edx,eax
c0021b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b0c:	85 c0                	test   eax,eax
c0021b0e:	74 10                	je     c0021b20 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021b10:	83 ec 0c             	sub    esp,0xc
c0021b13:	68 e0 bc 02 c0       	push   0xc002bce0
c0021b18:	e8 12 82 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0021b1d:	83 c4 10             	add    esp,0x10
c0021b20:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0021b25:	83 f0 01             	xor    eax,0x1
c0021b28:	84 c0                	test   al,al
c0021b2a:	74 57                	je     c0021b83 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021b2c:	a1 fc bc 02 c0       	mov    eax,ds:0xc002bcfc
c0021b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b3d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021b45:	7f 35                	jg     c0021b7c <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021b47:	83 ec 0c             	sub    esp,0xc
c0021b4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021b4e:	e8 dc 53 00 00       	call   c0026f2f <__floatsisf>
c0021b53:	83 c4 10             	add    esp,0x10
c0021b56:	8b 15 fc bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bcfc
c0021b5c:	83 ec 08             	sub    esp,0x8
c0021b5f:	52                   	push   edx
c0021b60:	50                   	push   eax
c0021b61:	e8 db 4f 00 00       	call   c0026b41 <__mulsf3>
c0021b66:	83 c4 10             	add    esp,0x10
c0021b69:	89 c2                	mov    edx,eax
c0021b6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b6f:	89 14 85 40 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9c0],edx
c0021b76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021b7a:	eb c1                	jmp    c0021b3d <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021b7c:	c6 05 40 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a40,0x1
c0021b83:	90                   	nop
c0021b84:	83 c4 1c             	add    esp,0x1c
c0021b87:	c3                   	ret    

c0021b88 <SoundChannel::~SoundChannel()>:
c0021b88:	83 ec 0c             	sub    esp,0xc
c0021b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021b92:	83 ec 0c             	sub    esp,0xc
c0021b95:	50                   	push   eax
c0021b96:	e8 11 da fe ff       	call   c000f5ac <free>
c0021b9b:	83 c4 10             	add    esp,0x10
c0021b9e:	90                   	nop
c0021b9f:	83 c4 0c             	add    esp,0xc
c0021ba2:	c3                   	ret    
c0021ba3:	90                   	nop

c0021ba4 <SoundChannel::getSampleRate()>:
c0021ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021baa:	c3                   	ret    
c0021bab:	90                   	nop

c0021bac <SoundChannel::getBits()>:
c0021bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bb3:	c3                   	ret    

c0021bb4 <SoundChannel::getBufferUsed()>:
c0021bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021bbb:	c3                   	ret    

c0021bbc <SoundChannel::getBufferSize()>:
c0021bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bc0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bc3:	c3                   	ret    

c0021bc4 <SoundChannel::unbuffer(float*, int, int)>:
c0021bc4:	56                   	push   esi
c0021bc5:	53                   	push   ebx
c0021bc6:	83 ec 40             	sub    esp,0x40
c0021bc9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021bcd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021bd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021bd4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021bd7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021bdb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021bdf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021be3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021be7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021beb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021bef:	e8 3b 53 00 00       	call   c0026f2f <__floatsisf>
c0021bf4:	5a                   	pop    edx
c0021bf5:	89 c6                	mov    esi,eax
c0021bf7:	ff 33                	push   DWORD PTR [ebx]
c0021bf9:	e8 31 53 00 00       	call   c0026f2f <__floatsisf>
c0021bfe:	59                   	pop    ecx
c0021bff:	5a                   	pop    edx
c0021c00:	50                   	push   eax
c0021c01:	56                   	push   esi
c0021c02:	e8 fd 50 00 00       	call   c0026d04 <__divsf3>
c0021c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c0a:	e8 f0 65 00 00       	call   c00281ff <__extendsfdf2>
c0021c0f:	59                   	pop    ecx
c0021c10:	5e                   	pop    esi
c0021c11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c15:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021c19:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021c21:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c25:	50                   	push   eax
c0021c26:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021c29:	e8 2c 6b fe ff       	call   c000875a <src_process>
c0021c2e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021c32:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021c35:	83 c4 0c             	add    esp,0xc
c0021c38:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021c3b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021c3e:	29 d0                	sub    eax,edx
c0021c40:	c1 e0 02             	shl    eax,0x2
c0021c43:	50                   	push   eax
c0021c44:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021c47:	50                   	push   eax
c0021c48:	51                   	push   ecx
c0021c49:	e8 3a ea fd ff       	call   c0000688 <memmove>
c0021c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c52:	83 c4 44             	add    esp,0x44
c0021c55:	5b                   	pop    ebx
c0021c56:	5e                   	pop    esi
c0021c57:	c3                   	ret    

c0021c58 <SoundChannel::buffer16(short*, int)>:
c0021c58:	55                   	push   ebp
c0021c59:	57                   	push   edi
c0021c5a:	56                   	push   esi
c0021c5b:	53                   	push   ebx
c0021c5c:	83 ec 1c             	sub    esp,0x1c
c0021c5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021c63:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021c66:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021c69:	0f 84 d2 00 00 00    	je     c0021d41 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c6f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021c73:	85 ed                	test   ebp,ebp
c0021c75:	0f 8e c6 00 00 00    	jle    c0021d41 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c7f:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021c84:	83 ec 0c             	sub    esp,0xc
c0021c87:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021c8a:	50                   	push   eax
c0021c8b:	e8 9f 52 00 00       	call   c0026f2f <__floatsisf>
c0021c90:	59                   	pop    ecx
c0021c91:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021c94:	5f                   	pop    edi
c0021c95:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021c98:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c9b:	55                   	push   ebp
c0021c9c:	50                   	push   eax
c0021c9d:	e8 9f 4e 00 00       	call   c0026b41 <__mulsf3>
c0021ca2:	83 c4 10             	add    esp,0x10
c0021ca5:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021ca8:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021cab:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021cae:	0f 84 99 00 00 00    	je     c0021d4d <SoundChannel::buffer16(short*, int)+0xf5>
c0021cb4:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021cb9:	74 78                	je     c0021d33 <SoundChannel::buffer16(short*, int)+0xdb>
c0021cbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021cbf:	83 ec 0c             	sub    esp,0xc
c0021cc2:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021cc6:	50                   	push   eax
c0021cc7:	e8 63 52 00 00       	call   c0026f2f <__floatsisf>
c0021ccc:	5f                   	pop    edi
c0021ccd:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021cd0:	5a                   	pop    edx
c0021cd1:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021cd4:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021cd7:	55                   	push   ebp
c0021cd8:	50                   	push   eax
c0021cd9:	e8 63 4e 00 00       	call   c0026b41 <__mulsf3>
c0021cde:	83 c4 10             	add    esp,0x10
c0021ce1:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021ce4:	be 02 00 00 00       	mov    esi,0x2
c0021ce9:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021cec:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021cef:	74 46                	je     c0021d37 <SoundChannel::buffer16(short*, int)+0xdf>
c0021cf1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021cf5:	eb 36                	jmp    c0021d2d <SoundChannel::buffer16(short*, int)+0xd5>
c0021cf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021cfb:	83 ec 0c             	sub    esp,0xc
c0021cfe:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021d02:	46                   	inc    esi
c0021d03:	50                   	push   eax
c0021d04:	e8 26 52 00 00       	call   c0026f2f <__floatsisf>
c0021d09:	5a                   	pop    edx
c0021d0a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021d0d:	59                   	pop    ecx
c0021d0e:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021d11:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d18:	50                   	push   eax
c0021d19:	e8 23 4e 00 00       	call   c0026b41 <__mulsf3>
c0021d1e:	83 c4 10             	add    esp,0x10
c0021d21:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021d25:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021d28:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021d2b:	74 0a                	je     c0021d37 <SoundChannel::buffer16(short*, int)+0xdf>
c0021d2d:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021d31:	75 c4                	jne    c0021cf7 <SoundChannel::buffer16(short*, int)+0x9f>
c0021d33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021d37:	83 c4 1c             	add    esp,0x1c
c0021d3a:	89 f0                	mov    eax,esi
c0021d3c:	5b                   	pop    ebx
c0021d3d:	5e                   	pop    esi
c0021d3e:	5f                   	pop    edi
c0021d3f:	5d                   	pop    ebp
c0021d40:	c3                   	ret    
c0021d41:	83 c4 1c             	add    esp,0x1c
c0021d44:	31 f6                	xor    esi,esi
c0021d46:	5b                   	pop    ebx
c0021d47:	89 f0                	mov    eax,esi
c0021d49:	5e                   	pop    esi
c0021d4a:	5f                   	pop    edi
c0021d4b:	5d                   	pop    ebp
c0021d4c:	c3                   	ret    
c0021d4d:	be 01 00 00 00       	mov    esi,0x1
c0021d52:	eb e3                	jmp    c0021d37 <SoundChannel::buffer16(short*, int)+0xdf>

c0021d54 <SoundChannel::buffer8(unsigned char*, int)>:
c0021d54:	55                   	push   ebp
c0021d55:	57                   	push   edi
c0021d56:	56                   	push   esi
c0021d57:	53                   	push   ebx
c0021d58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d5c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021d60:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d67:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d6a:	74 7a                	je     c0021de6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d6c:	85 ff                	test   edi,edi
c0021d6e:	7e 76                	jle    c0021de6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d70:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021d74:	8d 70 01             	lea    esi,[eax+0x1]
c0021d77:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d7a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d7d:	8b 1c 9d 40 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce9c0]
c0021d84:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d87:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d8a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d8d:	74 5e                	je     c0021ded <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021d8f:	83 ff 01             	cmp    edi,0x1
c0021d92:	74 4b                	je     c0021ddf <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021d94:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021d98:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d9b:	8d 70 01             	lea    esi,[eax+0x1]
c0021d9e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021da1:	8b 1c 9d 40 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce9c0]
c0021da8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021dab:	b8 02 00 00 00       	mov    eax,0x2
c0021db0:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021db3:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021db6:	75 23                	jne    c0021ddb <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021db8:	eb 27                	jmp    c0021de1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021dba:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021dbf:	8d 71 01             	lea    esi,[ecx+0x1]
c0021dc2:	40                   	inc    eax
c0021dc3:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021dc6:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021dc9:	8b 1c 9d 40 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce9c0]
c0021dd0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021dd3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021dd6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021dd9:	74 06                	je     c0021de1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ddb:	39 c7                	cmp    edi,eax
c0021ddd:	75 db                	jne    c0021dba <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021ddf:	89 f8                	mov    eax,edi
c0021de1:	5b                   	pop    ebx
c0021de2:	5e                   	pop    esi
c0021de3:	5f                   	pop    edi
c0021de4:	5d                   	pop    ebp
c0021de5:	c3                   	ret    
c0021de6:	5b                   	pop    ebx
c0021de7:	31 c0                	xor    eax,eax
c0021de9:	5e                   	pop    esi
c0021dea:	5f                   	pop    edi
c0021deb:	5d                   	pop    ebp
c0021dec:	c3                   	ret    
c0021ded:	b8 01 00 00 00       	mov    eax,0x1
c0021df2:	eb ed                	jmp    c0021de1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021df4 <SoundDevice::SoundDevice(char const*)>:
c0021df4:	83 ec 1c             	sub    esp,0x1c
c0021df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dfb:	83 ec 08             	sub    esp,0x8
c0021dfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021e02:	50                   	push   eax
c0021e03:	e8 f8 1d ff ff       	call   c0013c00 <Device::Device(char const*)>
c0021e08:	83 c4 10             	add    esp,0x10
c0021e0b:	ba 08 bd 02 c0       	mov    edx,0xc002bd08
c0021e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e14:	89 10                	mov    DWORD PTR [eax],edx
c0021e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e1a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e28:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021e32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e3a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e3f:	7f 19                	jg     c0021e5a <SoundDevice::SoundDevice(char const*)+0x66>
c0021e41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e49:	83 c2 54             	add    edx,0x54
c0021e4c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021e54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e58:	eb e0                	jmp    c0021e3a <SoundDevice::SoundDevice(char const*)+0x46>
c0021e5a:	90                   	nop
c0021e5b:	83 c4 1c             	add    esp,0x1c
c0021e5e:	c3                   	ret    
c0021e5f:	90                   	nop

c0021e60 <SoundDevice::~SoundDevice()>:
c0021e60:	53                   	push   ebx
c0021e61:	83 ec 18             	sub    esp,0x18
c0021e64:	ba 08 bd 02 c0       	mov    edx,0xc002bd08
c0021e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e6d:	89 10                	mov    DWORD PTR [eax],edx
c0021e6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e77:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e7c:	7f 46                	jg     c0021ec4 <SoundDevice::~SoundDevice()+0x64>
c0021e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e86:	83 c2 54             	add    edx,0x54
c0021e89:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021e8d:	85 c0                	test   eax,eax
c0021e8f:	74 2d                	je     c0021ebe <SoundDevice::~SoundDevice()+0x5e>
c0021e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e99:	83 c2 54             	add    edx,0x54
c0021e9c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021ea0:	85 db                	test   ebx,ebx
c0021ea2:	74 1a                	je     c0021ebe <SoundDevice::~SoundDevice()+0x5e>
c0021ea4:	83 ec 0c             	sub    esp,0xc
c0021ea7:	53                   	push   ebx
c0021ea8:	e8 db fc ff ff       	call   c0021b88 <SoundChannel::~SoundChannel()>
c0021ead:	83 c4 10             	add    esp,0x10
c0021eb0:	83 ec 08             	sub    esp,0x8
c0021eb3:	6a 2c                	push   0x2c
c0021eb5:	53                   	push   ebx
c0021eb6:	e8 31 06 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0021ebb:	83 c4 10             	add    esp,0x10
c0021ebe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ec2:	eb b3                	jmp    c0021e77 <SoundDevice::~SoundDevice()+0x17>
c0021ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ec8:	83 ec 0c             	sub    esp,0xc
c0021ecb:	50                   	push   eax
c0021ecc:	e8 f9 19 ff ff       	call   c00138ca <Device::~Device()>
c0021ed1:	83 c4 10             	add    esp,0x10
c0021ed4:	90                   	nop
c0021ed5:	83 c4 18             	add    esp,0x18
c0021ed8:	5b                   	pop    ebx
c0021ed9:	c3                   	ret    

c0021eda <SoundDevice::~SoundDevice()>:
c0021eda:	83 ec 0c             	sub    esp,0xc
c0021edd:	83 ec 0c             	sub    esp,0xc
c0021ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ee4:	e8 77 ff ff ff       	call   c0021e60 <SoundDevice::~SoundDevice()>
c0021ee9:	83 c4 10             	add    esp,0x10
c0021eec:	83 ec 08             	sub    esp,0x8
c0021eef:	68 e4 01 00 00       	push   0x1e4
c0021ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ef8:	e8 ef 05 ff ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0021efd:	83 c4 10             	add    esp,0x10
c0021f00:	83 c4 0c             	add    esp,0xc
c0021f03:	c3                   	ret    

c0021f04 <SoundDevice::getFreeChannelNum()>:
c0021f04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f08:	31 c0                	xor    eax,eax
c0021f0a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021f12:	74 09                	je     c0021f1d <SoundDevice::getFreeChannelNum()+0x19>
c0021f14:	40                   	inc    eax
c0021f15:	83 f8 20             	cmp    eax,0x20
c0021f18:	75 f0                	jne    c0021f0a <SoundDevice::getFreeChannelNum()+0x6>
c0021f1a:	83 c8 ff             	or     eax,0xffffffff
c0021f1d:	c3                   	ret    

c0021f1e <SoundDevice::addChannel(SoundChannel*)>:
c0021f1e:	56                   	push   esi
c0021f1f:	53                   	push   ebx
c0021f20:	51                   	push   ecx
c0021f21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021f29:	53                   	push   ebx
c0021f2a:	e8 d5 ff ff ff       	call   c0021f04 <SoundDevice::getFreeChannelNum()>
c0021f2f:	5a                   	pop    edx
c0021f30:	83 f8 ff             	cmp    eax,0xffffffff
c0021f33:	74 51                	je     c0021f86 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f35:	85 f6                	test   esi,esi
c0021f37:	74 4d                	je     c0021f86 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f39:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021f40:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021f47:	75 30                	jne    c0021f79 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021f49:	83 ec 0c             	sub    esp,0xc
c0021f4c:	56                   	push   esi
c0021f4d:	e8 52 fc ff ff       	call   c0021ba4 <SoundChannel::getSampleRate()>
c0021f52:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021f58:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f5b:	e8 4c fc ff ff       	call   c0021bac <SoundChannel::getBits()>
c0021f60:	83 c4 0c             	add    esp,0xc
c0021f63:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021f69:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021f6b:	50                   	push   eax
c0021f6c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021f72:	53                   	push   ebx
c0021f73:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021f76:	83 c4 10             	add    esp,0x10
c0021f79:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021f7f:	b8 01 00 00 00       	mov    eax,0x1
c0021f84:	eb 03                	jmp    c0021f89 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021f86:	83 c8 ff             	or     eax,0xffffffff
c0021f89:	5a                   	pop    edx
c0021f8a:	5b                   	pop    ebx
c0021f8b:	5e                   	pop    esi
c0021f8c:	c3                   	ret    
c0021f8d:	90                   	nop

c0021f8e <SoundDevice::removeChannel(int)>:
c0021f8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f96:	83 fa 1f             	cmp    edx,0x1f
c0021f99:	77 23                	ja     c0021fbe <SoundDevice::removeChannel(int)+0x30>
c0021f9b:	8d 14 90             	lea    edx,[eax+edx*4]
c0021f9e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021fa5:	74 17                	je     c0021fbe <SoundDevice::removeChannel(int)+0x30>
c0021fa7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021fb1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021fb7:	75 05                	jne    c0021fbe <SoundDevice::removeChannel(int)+0x30>
c0021fb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fbb:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021fbe:	c3                   	ret    
c0021fbf:	90                   	nop

c0021fc0 <SoundDevice::floatTo16(float*, short*, int)>:
c0021fc0:	57                   	push   edi
c0021fc1:	56                   	push   esi
c0021fc2:	53                   	push   ebx
c0021fc3:	31 db                	xor    ebx,ebx
c0021fc5:	83 ec 10             	sub    esp,0x10
c0021fc8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021fcc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021fd0:	0f 8d d0 00 00 00    	jge    c00220a6 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021fd6:	83 ec 0c             	sub    esp,0xc
c0021fd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fdd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021fe0:	e8 1a 62 00 00       	call   c00281ff <__extendsfdf2>
c0021fe5:	83 c4 10             	add    esp,0x10
c0021fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ff0:	68 00 00 f0 3f       	push   0x3ff00000
c0021ff5:	6a 00                	push   0x0
c0021ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fff:	e8 87 51 00 00       	call   c002718b <__adddf3>
c0022004:	83 c4 10             	add    esp,0x10
c0022007:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002200b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002200f:	68 00 00 e0 3f       	push   0x3fe00000
c0022014:	6a 00                	push   0x0
c0022016:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002201a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002201e:	e8 e5 57 00 00       	call   c0027808 <__muldf3>
c0022023:	83 c4 10             	add    esp,0x10
c0022026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002202a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002202e:	68 c0 ff df 40       	push   0x40dfffc0
c0022033:	6a 00                	push   0x0
c0022035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002203d:	e8 c6 57 00 00       	call   c0027808 <__muldf3>
c0022042:	59                   	pop    ecx
c0022043:	5f                   	pop    edi
c0022044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022048:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002204c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022054:	e8 82 60 00 00       	call   c00280db <__truncdfsf2>
c0022059:	5a                   	pop    edx
c002205a:	89 c7                	mov    edi,eax
c002205c:	59                   	pop    ecx
c002205d:	68 00 fe ff 46       	push   0x46fffe00
c0022062:	50                   	push   eax
c0022063:	e8 1d 51 00 00       	call   c0027185 <__gesf2>
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	85 c0                	test   eax,eax
c002206d:	78 08                	js     c0022077 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002206f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022075:	eb 29                	jmp    c00220a0 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022077:	50                   	push   eax
c0022078:	50                   	push   eax
c0022079:	6a 00                	push   0x0
c002207b:	57                   	push   edi
c002207c:	e8 08 51 00 00       	call   c0027189 <__lesf2>
c0022081:	83 c4 10             	add    esp,0x10
c0022084:	85 c0                	test   eax,eax
c0022086:	7f 08                	jg     c0022090 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022088:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002208e:	eb 10                	jmp    c00220a0 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022090:	83 ec 0c             	sub    esp,0xc
c0022093:	57                   	push   edi
c0022094:	e8 03 62 00 00       	call   c002829c <lrintf>
c0022099:	83 c4 10             	add    esp,0x10
c002209c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00220a0:	43                   	inc    ebx
c00220a1:	e9 26 ff ff ff       	jmp    c0021fcc <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00220a6:	83 c4 10             	add    esp,0x10
c00220a9:	5b                   	pop    ebx
c00220aa:	5e                   	pop    esi
c00220ab:	5f                   	pop    edi
c00220ac:	c3                   	ret    
c00220ad:	90                   	nop

c00220ae <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00220ae:	57                   	push   edi
c00220af:	56                   	push   esi
c00220b0:	53                   	push   ebx
c00220b1:	31 db                	xor    ebx,ebx
c00220b3:	83 ec 10             	sub    esp,0x10
c00220b6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220ba:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220be:	0f 8d cb 00 00 00    	jge    c002218f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00220c4:	83 ec 0c             	sub    esp,0xc
c00220c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220cb:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220ce:	e8 2c 61 00 00       	call   c00281ff <__extendsfdf2>
c00220d3:	83 c4 10             	add    esp,0x10
c00220d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220de:	68 00 00 f0 3f       	push   0x3ff00000
c00220e3:	6a 00                	push   0x0
c00220e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220ed:	e8 99 50 00 00       	call   c002718b <__adddf3>
c00220f2:	83 c4 10             	add    esp,0x10
c00220f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220fd:	68 00 00 e0 3f       	push   0x3fe00000
c0022102:	6a 00                	push   0x0
c0022104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002210c:	e8 f7 56 00 00       	call   c0027808 <__muldf3>
c0022111:	83 c4 10             	add    esp,0x10
c0022114:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022118:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002211c:	68 00 00 60 40       	push   0x40600000
c0022121:	6a 00                	push   0x0
c0022123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212b:	e8 d8 56 00 00       	call   c0027808 <__muldf3>
c0022130:	59                   	pop    ecx
c0022131:	5f                   	pop    edi
c0022132:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022136:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002213a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022142:	e8 94 5f 00 00       	call   c00280db <__truncdfsf2>
c0022147:	5a                   	pop    edx
c0022148:	89 c7                	mov    edi,eax
c002214a:	59                   	pop    ecx
c002214b:	68 00 00 fe 42       	push   0x42fe0000
c0022150:	50                   	push   eax
c0022151:	e8 2f 50 00 00       	call   c0027185 <__gesf2>
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	85 c0                	test   eax,eax
c002215b:	78 06                	js     c0022163 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002215d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022161:	eb 26                	jmp    c0022189 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022163:	50                   	push   eax
c0022164:	50                   	push   eax
c0022165:	6a 00                	push   0x0
c0022167:	57                   	push   edi
c0022168:	e8 1c 50 00 00       	call   c0027189 <__lesf2>
c002216d:	83 c4 10             	add    esp,0x10
c0022170:	85 c0                	test   eax,eax
c0022172:	7f 06                	jg     c002217a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022174:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022178:	eb 0f                	jmp    c0022189 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002217a:	83 ec 0c             	sub    esp,0xc
c002217d:	57                   	push   edi
c002217e:	e8 19 61 00 00       	call   c002829c <lrintf>
c0022183:	83 c4 10             	add    esp,0x10
c0022186:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022189:	43                   	inc    ebx
c002218a:	e9 2b ff ff ff       	jmp    c00220ba <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002218f:	83 c4 10             	add    esp,0x10
c0022192:	5b                   	pop    ebx
c0022193:	5e                   	pop    esi
c0022194:	5f                   	pop    edi
c0022195:	c3                   	ret    

c0022196 <SoundDevice::getAudio(int, float*, float*)>:
c0022196:	55                   	push   ebp
c0022197:	31 ed                	xor    ebp,ebp
c0022199:	57                   	push   edi
c002219a:	56                   	push   esi
c002219b:	31 f6                	xor    esi,esi
c002219d:	53                   	push   ebx
c002219e:	83 ec 20             	sub    esp,0x20
c00221a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00221a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00221a9:	c1 e0 02             	shl    eax,0x2
c00221ac:	50                   	push   eax
c00221ad:	6a 00                	push   0x0
c00221af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00221b3:	e8 98 e5 fd ff       	call   c0000750 <memset>
c00221b8:	83 c4 10             	add    esp,0x10
c00221bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221c3:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00221ca:	85 c9                	test   ecx,ecx
c00221cc:	74 52                	je     c0022220 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00221ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00221d2:	99                   	cdq    
c00221d3:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00221d9:	50                   	push   eax
c00221da:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00221e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00221e4:	51                   	push   ecx
c00221e5:	e8 da f9 ff ff       	call   c0021bc4 <SoundChannel::unbuffer(float*, int, int)>
c00221ea:	31 d2                	xor    edx,edx
c00221ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221f0:	83 c4 10             	add    esp,0x10
c00221f3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00221f7:	7d 1e                	jge    c0022217 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00221f9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00221fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022201:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022204:	89 cf                	mov    edi,ecx
c0022206:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002220c:	0f af ca             	imul   ecx,edx
c002220f:	42                   	inc    edx
c0022210:	01 e9                	add    ecx,ebp
c0022212:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022215:	eb dc                	jmp    c00221f3 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022217:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002221b:	45                   	inc    ebp
c002221c:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022220:	46                   	inc    esi
c0022221:	83 fe 20             	cmp    esi,0x20
c0022224:	75 9d                	jne    c00221c3 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002222a:	83 c4 1c             	add    esp,0x1c
c002222d:	5b                   	pop    ebx
c002222e:	5e                   	pop    esi
c002222f:	5f                   	pop    edi
c0022230:	5d                   	pop    ebp
c0022231:	c3                   	ret    

c0022232 <PCI::open(int, int, void*)>:
c0022232:	83 ec 18             	sub    esp,0x18
c0022235:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022239:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002223d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022243:	8b 10                	mov    edx,DWORD PTR [eax]
c0022245:	50                   	push   eax
c0022246:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022249:	31 c0                	xor    eax,eax
c002224b:	83 c4 1c             	add    esp,0x1c
c002224e:	c3                   	ret    
c002224f:	90                   	nop

c0022250 <PCI::close(int, int, void*)>:
c0022250:	31 c0                	xor    eax,eax
c0022252:	c3                   	ret    
c0022253:	90                   	nop

c0022254 <PCI::PCI()>:
c0022254:	83 ec 0c             	sub    esp,0xc
c0022257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225b:	83 ec 08             	sub    esp,0x8
c002225e:	68 38 bd 02 c0       	push   0xc002bd38
c0022263:	50                   	push   eax
c0022264:	e8 fb 0f ff ff       	call   c0013264 <Bus::Bus(char const*)>
c0022269:	83 c4 10             	add    esp,0x10
c002226c:	ba 24 be 02 c0       	mov    edx,0xc002be24
c0022271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022275:	89 10                	mov    DWORD PTR [eax],edx
c0022277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022289:	a3 44 1a 03 c0       	mov    ds:0xc0031a44,eax
c002228e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022292:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022298:	0f b6 d0             	movzx  edx,al
c002229b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00222a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222b0:	0f b6 d0             	movzx  edx,al
c00222b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00222bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222c6:	8d 50 01             	lea    edx,[eax+0x1]
c00222c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222cd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00222d3:	0f b6 d0             	movzx  edx,al
c00222d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222da:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00222de:	83 c9 c0             	or     ecx,0xffffffc0
c00222e1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00222e5:	90                   	nop
c00222e6:	83 c4 0c             	add    esp,0xc
c00222e9:	c3                   	ret    

c00222ea <PCI::readBAR8(unsigned int, int)>:
c00222ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222f2:	f6 c2 01             	test   dl,0x1
c00222f5:	74 07                	je     c00222fe <PCI::readBAR8(unsigned int, int)+0x14>
c00222f7:	83 e2 fc             	and    edx,0xfffffffc
c00222fa:	01 c2                	add    edx,eax
c00222fc:	ec                   	in     al,dx
c00222fd:	c3                   	ret    
c00222fe:	83 e2 f0             	and    edx,0xfffffff0
c0022301:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022304:	c3                   	ret    
c0022305:	90                   	nop

c0022306 <PCI::readBAR16(unsigned int, int)>:
c0022306:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002230a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002230e:	f6 c2 01             	test   dl,0x1
c0022311:	74 08                	je     c002231b <PCI::readBAR16(unsigned int, int)+0x15>
c0022313:	83 e2 fc             	and    edx,0xfffffffc
c0022316:	01 c2                	add    edx,eax
c0022318:	66 ed                	in     ax,dx
c002231a:	c3                   	ret    
c002231b:	83 e2 f0             	and    edx,0xfffffff0
c002231e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022322:	c3                   	ret    
c0022323:	90                   	nop

c0022324 <PCI::readBAR32(unsigned int, int)>:
c0022324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002232c:	f6 c2 01             	test   dl,0x1
c002232f:	74 07                	je     c0022338 <PCI::readBAR32(unsigned int, int)+0x14>
c0022331:	83 e2 fc             	and    edx,0xfffffffc
c0022334:	01 c2                	add    edx,eax
c0022336:	ed                   	in     eax,dx
c0022337:	c3                   	ret    
c0022338:	83 e2 f0             	and    edx,0xfffffff0
c002233b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002233e:	c3                   	ret    
c002233f:	90                   	nop

c0022340 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022348:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002234c:	f6 c2 01             	test   dl,0x1
c002234f:	74 07                	je     c0022358 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022351:	83 e2 fc             	and    edx,0xfffffffc
c0022354:	01 ca                	add    edx,ecx
c0022356:	ee                   	out    dx,al
c0022357:	c3                   	ret    
c0022358:	83 e2 f0             	and    edx,0xfffffff0
c002235b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002235e:	c3                   	ret    
c002235f:	90                   	nop

c0022360 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002236c:	f6 c2 01             	test   dl,0x1
c002236f:	74 08                	je     c0022379 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022371:	83 e2 fc             	and    edx,0xfffffffc
c0022374:	01 ca                	add    edx,ecx
c0022376:	66 ef                	out    dx,ax
c0022378:	c3                   	ret    
c0022379:	83 e2 f0             	and    edx,0xfffffff0
c002237c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022380:	c3                   	ret    
c0022381:	90                   	nop

c0022382 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022382:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002238a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002238e:	f6 c2 01             	test   dl,0x1
c0022391:	74 07                	je     c002239a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022393:	83 e2 fc             	and    edx,0xfffffffc
c0022396:	01 ca                	add    edx,ecx
c0022398:	ef                   	out    dx,eax
c0022399:	c3                   	ret    
c002239a:	83 e2 f0             	and    edx,0xfffffff0
c002239d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00223a0:	c3                   	ret    
c00223a1:	90                   	nop

c00223a2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223a2:	55                   	push   ebp
c00223a3:	57                   	push   edi
c00223a4:	56                   	push   esi
c00223a5:	53                   	push   ebx
c00223a6:	83 ec 0c             	sub    esp,0xc
c00223a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00223ad:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00223b1:	89 f0                	mov    eax,esi
c00223b3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00223b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00223bb:	3c 07                	cmp    al,0x7
c00223bd:	76 10                	jbe    c00223cf <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00223bf:	83 ec 0c             	sub    esp,0xc
c00223c2:	68 40 bd 02 c0       	push   0xc002bd40
c00223c7:	e8 63 79 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00223cc:	83 c4 10             	add    esp,0x10
c00223cf:	80 fb 0f             	cmp    bl,0xf
c00223d2:	76 10                	jbe    c00223e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00223d4:	83 ec 0c             	sub    esp,0xc
c00223d7:	68 70 bd 02 c0       	push   0xc002bd70
c00223dc:	e8 4e 79 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00223e1:	83 c4 10             	add    esp,0x10
c00223e4:	8d 04 36             	lea    eax,[esi+esi*1]
c00223e7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00223ec:	83 c8 f0             	or     eax,0xfffffff0
c00223ef:	ee                   	out    dx,al
c00223f0:	ba fa 0c 00 00       	mov    edx,0xcfa
c00223f5:	89 e8                	mov    eax,ebp
c00223f7:	ee                   	out    dx,al
c00223f8:	83 c4 0c             	add    esp,0xc
c00223fb:	89 d8                	mov    eax,ebx
c00223fd:	66 81 e7 fc 00       	and    di,0xfc
c0022402:	5b                   	pop    ebx
c0022403:	c1 e0 08             	shl    eax,0x8
c0022406:	5e                   	pop    esi
c0022407:	09 f8                	or     eax,edi
c0022409:	5f                   	pop    edi
c002240a:	66 0d 00 c0          	or     ax,0xc000
c002240e:	5d                   	pop    ebp
c002240f:	c3                   	ret    

c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022410:	57                   	push   edi
c0022411:	56                   	push   esi
c0022412:	53                   	push   ebx
c0022413:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022417:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002241b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022421:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022425:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022429:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002242d:	83 ff 01             	cmp    edi,0x1
c0022430:	75 3e                	jne    c0022470 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022432:	89 de                	mov    esi,ebx
c0022434:	0f b6 c0             	movzx  eax,al
c0022437:	81 e6 fc 00 00 00    	and    esi,0xfc
c002243d:	c1 e0 10             	shl    eax,0x10
c0022440:	0f b6 c9             	movzx  ecx,cl
c0022443:	09 f0                	or     eax,esi
c0022445:	c1 e1 08             	shl    ecx,0x8
c0022448:	0f b6 d2             	movzx  edx,dl
c002244b:	09 c8                	or     eax,ecx
c002244d:	c1 e2 0b             	shl    edx,0xb
c0022450:	09 d0                	or     eax,edx
c0022452:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022457:	0d 00 00 00 80       	or     eax,0x80000000
c002245c:	ef                   	out    dx,eax
c002245d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022462:	ed                   	in     eax,dx
c0022463:	83 e3 02             	and    ebx,0x2
c0022466:	0f b6 cb             	movzx  ecx,bl
c0022469:	c1 e1 03             	shl    ecx,0x3
c002246c:	d3 e8                	shr    eax,cl
c002246e:	eb 43                	jmp    c00224b3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022470:	83 ff 02             	cmp    edi,0x2
c0022473:	75 2c                	jne    c00224a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022475:	83 ec 0c             	sub    esp,0xc
c0022478:	0f b6 c9             	movzx  ecx,cl
c002247b:	0f b6 d2             	movzx  edx,dl
c002247e:	0f b6 fb             	movzx  edi,bl
c0022481:	0f b6 c0             	movzx  eax,al
c0022484:	57                   	push   edi
c0022485:	51                   	push   ecx
c0022486:	52                   	push   edx
c0022487:	50                   	push   eax
c0022488:	56                   	push   esi
c0022489:	e8 14 ff ff ff       	call   c00223a2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002248e:	89 c2                	mov    edx,eax
c0022490:	ed                   	in     eax,dx
c0022491:	83 e3 02             	and    ebx,0x2
c0022494:	83 c4 20             	add    esp,0x20
c0022497:	0f b6 cb             	movzx  ecx,bl
c002249a:	c1 e1 03             	shl    ecx,0x3
c002249d:	d3 e8                	shr    eax,cl
c002249f:	eb 12                	jmp    c00224b3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00224a1:	83 ec 0c             	sub    esp,0xc
c00224a4:	68 a0 bd 02 c0       	push   0xc002bda0
c00224a9:	e8 81 78 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00224ae:	83 c4 10             	add    esp,0x10
c00224b1:	31 c0                	xor    eax,eax
c00224b3:	5b                   	pop    ebx
c00224b4:	5e                   	pop    esi
c00224b5:	5f                   	pop    edi
c00224b6:	c3                   	ret    
c00224b7:	90                   	nop

c00224b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00224b8:	83 ec 18             	sub    esp,0x18
c00224bb:	6a 00                	push   0x0
c00224bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c2:	50                   	push   eax
c00224c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c8:	50                   	push   eax
c00224c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ce:	50                   	push   eax
c00224cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224d3:	e8 38 ff ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224d8:	83 c4 2c             	add    esp,0x2c
c00224db:	c3                   	ret    

c00224dc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00224dc:	83 ec 18             	sub    esp,0x18
c00224df:	6a 0e                	push   0xe
c00224e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224e6:	50                   	push   eax
c00224e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ec:	50                   	push   eax
c00224ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224f2:	50                   	push   eax
c00224f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224f7:	e8 14 ff ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224fc:	83 c4 2c             	add    esp,0x2c
c00224ff:	0f b6 c0             	movzx  eax,al
c0022502:	c3                   	ret    
c0022503:	90                   	nop

c0022504 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022504:	55                   	push   ebp
c0022505:	57                   	push   edi
c0022506:	56                   	push   esi
c0022507:	53                   	push   ebx
c0022508:	83 ec 18             	sub    esp,0x18
c002250b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022510:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022515:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002251a:	6a 0a                	push   0xa
c002251c:	56                   	push   esi
c002251d:	55                   	push   ebp
c002251e:	57                   	push   edi
c002251f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022523:	e8 e8 fe ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022528:	83 c4 14             	add    esp,0x14
c002252b:	89 c3                	mov    ebx,eax
c002252d:	6a 0a                	push   0xa
c002252f:	0f b6 db             	movzx  ebx,bl
c0022532:	56                   	push   esi
c0022533:	55                   	push   ebp
c0022534:	57                   	push   edi
c0022535:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022539:	e8 d2 fe ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002253e:	83 c4 2c             	add    esp,0x2c
c0022541:	25 00 ff 00 00       	and    eax,0xff00
c0022546:	09 d8                	or     eax,ebx
c0022548:	5b                   	pop    ebx
c0022549:	5e                   	pop    esi
c002254a:	5f                   	pop    edi
c002254b:	5d                   	pop    ebp
c002254c:	c3                   	ret    
c002254d:	90                   	nop

c002254e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002254e:	83 ec 18             	sub    esp,0x18
c0022551:	6a 08                	push   0x8
c0022553:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022558:	50                   	push   eax
c0022559:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002255e:	50                   	push   eax
c002255f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022564:	50                   	push   eax
c0022565:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022569:	e8 a2 fe ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002256e:	83 c4 2c             	add    esp,0x2c
c0022571:	0f b6 c4             	movzx  eax,ah
c0022574:	c3                   	ret    
c0022575:	90                   	nop

c0022576 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022576:	83 ec 18             	sub    esp,0x18
c0022579:	6a 08                	push   0x8
c002257b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022580:	50                   	push   eax
c0022581:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022586:	50                   	push   eax
c0022587:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002258c:	50                   	push   eax
c002258d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022591:	e8 7a fe ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022596:	83 c4 2c             	add    esp,0x2c
c0022599:	c3                   	ret    

c002259a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002259a:	83 ec 18             	sub    esp,0x18
c002259d:	6a 3c                	push   0x3c
c002259f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225a4:	50                   	push   eax
c00225a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225aa:	50                   	push   eax
c00225ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225b0:	50                   	push   eax
c00225b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225b5:	e8 56 fe ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225ba:	83 c4 2c             	add    esp,0x2c
c00225bd:	c3                   	ret    

c00225be <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00225be:	83 ec 18             	sub    esp,0x18
c00225c1:	6a 18                	push   0x18
c00225c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225c8:	50                   	push   eax
c00225c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ce:	50                   	push   eax
c00225cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d4:	50                   	push   eax
c00225d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225d9:	e8 32 fe ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225de:	83 c4 2c             	add    esp,0x2c
c00225e1:	0f b6 c4             	movzx  eax,ah
c00225e4:	c3                   	ret    
c00225e5:	90                   	nop

c00225e6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225e6:	55                   	push   ebp
c00225e7:	57                   	push   edi
c00225e8:	56                   	push   esi
c00225e9:	53                   	push   ebx
c00225ea:	83 ec 28             	sub    esp,0x28
c00225ed:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00225f1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00225f6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00225fb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022600:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022607:	8d 43 12             	lea    eax,[ebx+0x12]
c002260a:	83 c3 10             	add    ebx,0x10
c002260d:	0f b6 c0             	movzx  eax,al
c0022610:	0f b6 db             	movzx  ebx,bl
c0022613:	50                   	push   eax
c0022614:	51                   	push   ecx
c0022615:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022619:	57                   	push   edi
c002261a:	55                   	push   ebp
c002261b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002261f:	e8 ec fd ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022624:	83 c4 14             	add    esp,0x14
c0022627:	89 c6                	mov    esi,eax
c0022629:	53                   	push   ebx
c002262a:	c1 e6 10             	shl    esi,0x10
c002262d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022631:	51                   	push   ecx
c0022632:	57                   	push   edi
c0022633:	55                   	push   ebp
c0022634:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022638:	e8 d3 fd ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002263d:	83 c4 3c             	add    esp,0x3c
c0022640:	0f b7 c0             	movzx  eax,ax
c0022643:	5b                   	pop    ebx
c0022644:	09 f0                	or     eax,esi
c0022646:	5e                   	pop    esi
c0022647:	5f                   	pop    edi
c0022648:	5d                   	pop    ebp
c0022649:	c3                   	ret    

c002264a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002264a:	55                   	push   ebp
c002264b:	57                   	push   edi
c002264c:	56                   	push   esi
c002264d:	53                   	push   ebx
c002264e:	83 ec 0c             	sub    esp,0xc
c0022651:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022655:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022659:	89 f5                	mov    ebp,esi
c002265b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022661:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022665:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022669:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002266d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022671:	83 f9 01             	cmp    ecx,0x1
c0022674:	75 5d                	jne    c00226d3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022676:	0f b6 c8             	movzx  ecx,al
c0022679:	0f b6 d2             	movzx  edx,dl
c002267c:	c1 e1 10             	shl    ecx,0x10
c002267f:	c1 e2 0b             	shl    edx,0xb
c0022682:	89 f0                	mov    eax,esi
c0022684:	25 fc 00 00 00       	and    eax,0xfc
c0022689:	09 c1                	or     ecx,eax
c002268b:	89 e8                	mov    eax,ebp
c002268d:	0f b6 c0             	movzx  eax,al
c0022690:	c1 e0 08             	shl    eax,0x8
c0022693:	09 c1                	or     ecx,eax
c0022695:	09 d1                	or     ecx,edx
c0022697:	ba f8 0c 00 00       	mov    edx,0xcf8
c002269c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00226a2:	89 c8                	mov    eax,ecx
c00226a4:	ef                   	out    dx,eax
c00226a5:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226aa:	ed                   	in     eax,dx
c00226ab:	0f b7 db             	movzx  ebx,bx
c00226ae:	83 e6 02             	and    esi,0x2
c00226b1:	74 0a                	je     c00226bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00226b3:	0f b7 d0             	movzx  edx,ax
c00226b6:	c1 e3 10             	shl    ebx,0x10
c00226b9:	09 d3                	or     ebx,edx
c00226bb:	eb 05                	jmp    c00226c2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00226bd:	66 31 c0             	xor    ax,ax
c00226c0:	09 c3                	or     ebx,eax
c00226c2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226c7:	89 c8                	mov    eax,ecx
c00226c9:	ef                   	out    dx,eax
c00226ca:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226cf:	89 d8                	mov    eax,ebx
c00226d1:	eb 41                	jmp    c0022714 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00226d3:	83 f9 02             	cmp    ecx,0x2
c00226d6:	75 45                	jne    c002271d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00226d8:	83 ec 0c             	sub    esp,0xc
c00226db:	0f b6 d2             	movzx  edx,dl
c00226de:	89 f1                	mov    ecx,esi
c00226e0:	0f b6 c0             	movzx  eax,al
c00226e3:	0f b6 f1             	movzx  esi,cl
c00226e6:	89 e9                	mov    ecx,ebp
c00226e8:	56                   	push   esi
c00226e9:	0f b6 c9             	movzx  ecx,cl
c00226ec:	51                   	push   ecx
c00226ed:	52                   	push   edx
c00226ee:	50                   	push   eax
c00226ef:	57                   	push   edi
c00226f0:	e8 ad fc ff ff       	call   c00223a2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226f5:	89 c2                	mov    edx,eax
c00226f7:	ed                   	in     eax,dx
c00226f8:	83 c4 20             	add    esp,0x20
c00226fb:	0f b7 db             	movzx  ebx,bx
c00226fe:	f6 c2 02             	test   dl,0x2
c0022701:	74 0c                	je     c002270f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022703:	0f b7 c8             	movzx  ecx,ax
c0022706:	89 d8                	mov    eax,ebx
c0022708:	c1 e0 10             	shl    eax,0x10
c002270b:	09 c8                	or     eax,ecx
c002270d:	eb 05                	jmp    c0022714 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002270f:	66 31 c0             	xor    ax,ax
c0022712:	09 d8                	or     eax,ebx
c0022714:	ef                   	out    dx,eax
c0022715:	83 c4 0c             	add    esp,0xc
c0022718:	5b                   	pop    ebx
c0022719:	5e                   	pop    esi
c002271a:	5f                   	pop    edi
c002271b:	5d                   	pop    ebp
c002271c:	c3                   	ret    
c002271d:	c7 44 24 20 a0 bd 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bda0
c0022725:	83 c4 0c             	add    esp,0xc
c0022728:	5b                   	pop    ebx
c0022729:	5e                   	pop    esi
c002272a:	5f                   	pop    edi
c002272b:	5d                   	pop    ebp
c002272c:	e9 fe 75 ff ff       	jmp    c0019d2f <Krnl::panic(char const*)>
c0022731:	90                   	nop

c0022732 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022732:	55                   	push   ebp
c0022733:	57                   	push   edi
c0022734:	56                   	push   esi
c0022735:	53                   	push   ebx
c0022736:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002273c:	80 3d 50 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a50,0x0
c0022743:	0f 85 84 00 00 00    	jne    c00227cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022749:	83 ec 0c             	sub    esp,0xc
c002274c:	68 14 01 00 00       	push   0x114
c0022751:	e8 46 ce fe ff       	call   c000f59c <malloc>
c0022756:	83 c4 0c             	add    esp,0xc
c0022759:	89 c3                	mov    ebx,eax
c002275b:	ff 35 50 0c 03 c0    	push   DWORD PTR ds:0xc0030c50
c0022761:	68 a6 bd 02 c0       	push   0xc002bda6
c0022766:	50                   	push   eax
c0022767:	e8 b6 03 ff ff       	call   c0012b22 <File::File(char const*, Process*)>
c002276c:	5a                   	pop    edx
c002276d:	59                   	pop    ecx
c002276e:	6a 01                	push   0x1
c0022770:	53                   	push   ebx
c0022771:	e8 10 04 ff ff       	call   c0012b86 <File::open(FileOpenMode)>
c0022776:	83 c4 0c             	add    esp,0xc
c0022779:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002277d:	50                   	push   eax
c002277e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022782:	50                   	push   eax
c0022783:	53                   	push   ebx
c0022784:	e8 a9 06 ff ff       	call   c0012e32 <File::stat(unsigned long long*, bool*)>
c0022789:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002278d:	40                   	inc    eax
c002278e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022791:	e8 06 ce fe ff       	call   c000f59c <malloc>
c0022796:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002279a:	a3 4c 1a 03 c0       	mov    ds:0xc0031a4c,eax
c002279f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00227a3:	5e                   	pop    esi
c00227a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00227a6:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00227aa:	51                   	push   ecx
c00227ab:	50                   	push   eax
c00227ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227b0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227b4:	53                   	push   ebx
c00227b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00227b8:	83 c4 14             	add    esp,0x14
c00227bb:	53                   	push   ebx
c00227bc:	e8 23 04 ff ff       	call   c0012be4 <File::close()>
c00227c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227c5:	83 c4 10             	add    esp,0x10
c00227c8:	a3 48 1a 03 c0       	mov    ds:0xc0031a48,eax
c00227cd:	a1 48 1a 03 c0       	mov    eax,ds:0xc0031a48
c00227d2:	8b 15 4c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a4c
c00227d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00227db:	31 ff                	xor    edi,edi
c00227dd:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00227e5:	31 f6                	xor    esi,esi
c00227e7:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00227ec:	31 db                	xor    ebx,ebx
c00227ee:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00227f6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00227fb:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022802:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022806:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002280d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022811:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022814:	0f 8e 6b 01 00 00    	jle    c0022985 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c002281a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002281d:	d4 40                	aam    0x40
c002281f:	d5 39                	aad    0x39
c0022821:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022825:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022829:	d4 40                	aam    0x40
c002282b:	d5 39                	aad    0x39
c002282d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022831:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022835:	d4 40                	aam    0x40
c0022837:	d5 39                	aad    0x39
c0022839:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002283d:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022841:	d4 40                	aam    0x40
c0022843:	d5 39                	aad    0x39
c0022845:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022849:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002284d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022851:	3c 56                	cmp    al,0x56
c0022853:	74 45                	je     c002289a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022855:	d4 40                	aam    0x40
c0022857:	d5 39                	aad    0x39
c0022859:	8d 48 d0             	lea    ecx,[eax-0x30]
c002285c:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022860:	0f b6 c9             	movzx  ecx,cl
c0022863:	c1 e1 04             	shl    ecx,0x4
c0022866:	d4 40                	aam    0x40
c0022868:	d5 39                	aad    0x39
c002286a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002286d:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022871:	0f b6 db             	movzx  ebx,bl
c0022874:	09 cb                	or     ebx,ecx
c0022876:	c1 e3 04             	shl    ebx,0x4
c0022879:	d4 40                	aam    0x40
c002287b:	d5 39                	aad    0x39
c002287d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022880:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022884:	0f b6 c9             	movzx  ecx,cl
c0022887:	09 cb                	or     ebx,ecx
c0022889:	c1 e3 04             	shl    ebx,0x4
c002288c:	89 d9                	mov    ecx,ebx
c002288e:	d4 40                	aam    0x40
c0022890:	d5 39                	aad    0x39
c0022892:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022895:	0f b6 db             	movzx  ebx,bl
c0022898:	09 cb                	or     ebx,ecx
c002289a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002289e:	80 f9 44             	cmp    cl,0x44
c00228a1:	74 47                	je     c00228ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00228a3:	88 c8                	mov    al,cl
c00228a5:	d4 40                	aam    0x40
c00228a7:	d5 39                	aad    0x39
c00228a9:	83 e8 30             	sub    eax,0x30
c00228ac:	0f b6 e8             	movzx  ebp,al
c00228af:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00228b3:	c1 e5 04             	shl    ebp,0x4
c00228b6:	d4 40                	aam    0x40
c00228b8:	d5 39                	aad    0x39
c00228ba:	83 e8 30             	sub    eax,0x30
c00228bd:	0f b6 f0             	movzx  esi,al
c00228c0:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00228c4:	09 ee                	or     esi,ebp
c00228c6:	c1 e6 04             	shl    esi,0x4
c00228c9:	d4 40                	aam    0x40
c00228cb:	d5 39                	aad    0x39
c00228cd:	83 e8 30             	sub    eax,0x30
c00228d0:	0f b6 e8             	movzx  ebp,al
c00228d3:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00228d7:	09 ee                	or     esi,ebp
c00228d9:	c1 e6 04             	shl    esi,0x4
c00228dc:	89 f5                	mov    ebp,esi
c00228de:	d4 40                	aam    0x40
c00228e0:	d5 39                	aad    0x39
c00228e2:	83 e8 30             	sub    eax,0x30
c00228e5:	0f b6 f0             	movzx  esi,al
c00228e8:	09 ee                	or     esi,ebp
c00228ea:	83 c7 10             	add    edi,0x10
c00228ed:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00228f1:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00228f4:	3c 0a                	cmp    al,0xa
c00228f6:	74 09                	je     c0022901 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00228f8:	45                   	inc    ebp
c00228f9:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00228fc:	75 16                	jne    c0022914 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00228fe:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022901:	3c 0a                	cmp    al,0xa
c0022903:	0f 94 c0             	sete   al
c0022906:	0f b6 c0             	movzx  eax,al
c0022909:	01 c7                	add    edi,eax
c002290b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022910:	75 0c                	jne    c002291e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022912:	eb 15                	jmp    c0022929 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022914:	47                   	inc    edi
c0022915:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022918:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002291c:	eb d3                	jmp    c00228f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c002291e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022923:	0f 85 e8 fe ff ff    	jne    c0022811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022929:	80 f9 44             	cmp    cl,0x44
c002292c:	74 0b                	je     c0022939 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c002292e:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022933:	0f 85 d8 fe ff ff    	jne    c0022811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022939:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002293d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022941:	c1 e1 04             	shl    ecx,0x4
c0022944:	83 e8 30             	sub    eax,0x30
c0022947:	09 c8                	or     eax,ecx
c0022949:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c002294d:	0f 85 be fe ff ff    	jne    c0022811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022953:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022957:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002295b:	c1 e1 04             	shl    ecx,0x4
c002295e:	83 e8 30             	sub    eax,0x30
c0022961:	09 c8                	or     eax,ecx
c0022963:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022967:	0f 85 a4 fe ff ff    	jne    c0022811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002296d:	50                   	push   eax
c002296e:	50                   	push   eax
c002296f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022973:	50                   	push   eax
c0022974:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c002297b:	e8 8c de fd ff       	call   c000080c <strcpy>
c0022980:	83 c4 10             	add    esp,0x10
c0022983:	eb 15                	jmp    c002299a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022985:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002298c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022997:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002299a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00229a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00229a7:	5b                   	pop    ebx
c00229a8:	5e                   	pop    esi
c00229a9:	5f                   	pop    edi
c00229aa:	5d                   	pop    ebp
c00229ab:	c3                   	ret    

c00229ac <PCI::checkBus(unsigned char)>:
c00229ac:	56                   	push   esi
c00229ad:	53                   	push   ebx
c00229ae:	31 db                	xor    ebx,ebx
c00229b0:	51                   	push   ecx
c00229b1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00229b6:	52                   	push   edx
c00229b7:	53                   	push   ebx
c00229b8:	43                   	inc    ebx
c00229b9:	56                   	push   esi
c00229ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229be:	e8 37 03 00 00       	call   c0022cfa <PCI::checkDevice(unsigned char, unsigned char)>
c00229c3:	83 c4 10             	add    esp,0x10
c00229c6:	83 fb 20             	cmp    ebx,0x20
c00229c9:	75 eb                	jne    c00229b6 <PCI::checkBus(unsigned char)+0xa>
c00229cb:	58                   	pop    eax
c00229cc:	5b                   	pop    ebx
c00229cd:	5e                   	pop    esi
c00229ce:	c3                   	ret    
c00229cf:	90                   	nop

c00229d0 <PCI::foundDevice(PCIDeviceInfo)>:
c00229d0:	55                   	push   ebp
c00229d1:	57                   	push   edi
c00229d2:	56                   	push   esi
c00229d3:	53                   	push   ebx
c00229d4:	83 ec 1c             	sub    esp,0x1c
c00229d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00229db:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00229e1:	0f 84 52 01 00 00    	je     c0022b39 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00229e7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00229eb:	66 81 f9 06 04       	cmp    cx,0x406
c00229f0:	75 2c                	jne    c0022a1e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00229f2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00229f7:	50                   	push   eax
c00229f8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00229fd:	50                   	push   eax
c00229fe:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022a03:	50                   	push   eax
c0022a04:	56                   	push   esi
c0022a05:	e8 b4 fb ff ff       	call   c00225be <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022a0a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a0e:	0f b6 c0             	movzx  eax,al
c0022a11:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022a15:	83 c4 2c             	add    esp,0x2c
c0022a18:	5b                   	pop    ebx
c0022a19:	5e                   	pop    esi
c0022a1a:	5f                   	pop    edi
c0022a1b:	5d                   	pop    ebp
c0022a1c:	eb 8e                	jmp    c00229ac <PCI::checkBus(unsigned char)>
c0022a1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a22:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022a28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a2c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022a30:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022a34:	88 d3                	mov    bl,dl
c0022a36:	85 c0                	test   eax,eax
c0022a38:	74 33                	je     c0022a6d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022a3a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022a3d:	85 d2                	test   edx,edx
c0022a3f:	74 28                	je     c0022a69 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a41:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022a47:	31 ef                	xor    edi,ebp
c0022a49:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022a4f:	75 18                	jne    c0022a69 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022a55:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022a5b:	75 0c                	jne    c0022a69 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a5d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022a63:	0f 84 d0 00 00 00    	je     c0022b39 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a6b:	eb c9                	jmp    c0022a36 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022a6d:	66 81 f9 01 06       	cmp    cx,0x601
c0022a72:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022a76:	75 19                	jne    c0022a91 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022a78:	83 ec 0c             	sub    esp,0xc
c0022a7b:	68 64 01 00 00       	push   0x164
c0022a80:	e8 17 cb fe ff       	call   c000f59c <malloc>
c0022a85:	89 c5                	mov    ebp,eax
c0022a87:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a8a:	e8 85 0e 00 00       	call   c0023914 <SATABus::SATABus()>
c0022a8f:	eb 1e                	jmp    c0022aaf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022a91:	66 81 f9 01 01       	cmp    cx,0x101
c0022a96:	75 60                	jne    c0022af8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022a98:	83 ec 0c             	sub    esp,0xc
c0022a9b:	68 70 02 00 00       	push   0x270
c0022aa0:	e8 f7 ca fe ff       	call   c000f59c <malloc>
c0022aa5:	89 c5                	mov    ebp,eax
c0022aa7:	89 04 24             	mov    DWORD PTR [esp],eax
c0022aaa:	e8 0f 03 00 00       	call   c0022dbe <IDE::IDE()>
c0022aaf:	58                   	pop    eax
c0022ab0:	5a                   	pop    edx
c0022ab1:	55                   	push   ebp
c0022ab2:	56                   	push   esi
c0022ab3:	e8 44 0f ff ff       	call   c00139fc <Device::addChild(Device*)>
c0022ab8:	83 ec 1c             	sub    esp,0x1c
c0022abb:	b9 09 00 00 00       	mov    ecx,0x9
c0022ac0:	fc                   	cld    
c0022ac1:	89 e7                	mov    edi,esp
c0022ac3:	89 de                	mov    esi,ebx
c0022ac5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ac7:	55                   	push   ebp
c0022ac8:	e8 41 0e ff ff       	call   c001390e <Device::preOpenPCI(PCIDeviceInfo)>
c0022acd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ad0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022ad4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022adc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022ae4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022aec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022aef:	83 c4 4c             	add    esp,0x4c
c0022af2:	5b                   	pop    ebx
c0022af3:	5e                   	pop    esi
c0022af4:	5f                   	pop    edi
c0022af5:	5d                   	pop    ebp
c0022af6:	ff e0                	jmp    eax
c0022af8:	83 ec 0c             	sub    esp,0xc
c0022afb:	68 58 01 00 00       	push   0x158
c0022b00:	e8 97 ca fe ff       	call   c000f59c <malloc>
c0022b05:	89 c5                	mov    ebp,eax
c0022b07:	58                   	pop    eax
c0022b08:	5a                   	pop    edx
c0022b09:	68 bf bd 02 c0       	push   0xc002bdbf
c0022b0e:	55                   	push   ebp
c0022b0f:	e8 f2 11 ff ff       	call   c0013d06 <DriverlessDevice::DriverlessDevice(char const*)>
c0022b14:	59                   	pop    ecx
c0022b15:	5f                   	pop    edi
c0022b16:	55                   	push   ebp
c0022b17:	56                   	push   esi
c0022b18:	e8 df 0e ff ff       	call   c00139fc <Device::addChild(Device*)>
c0022b1d:	b9 09 00 00 00       	mov    ecx,0x9
c0022b22:	fc                   	cld    
c0022b23:	89 df                	mov    edi,ebx
c0022b25:	89 de                	mov    esi,ebx
c0022b27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b29:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022b2d:	83 c4 2c             	add    esp,0x2c
c0022b30:	5b                   	pop    ebx
c0022b31:	5e                   	pop    esi
c0022b32:	5f                   	pop    edi
c0022b33:	5d                   	pop    ebp
c0022b34:	e9 d5 0d ff ff       	jmp    c001390e <Device::preOpenPCI(PCIDeviceInfo)>
c0022b39:	83 c4 1c             	add    esp,0x1c
c0022b3c:	5b                   	pop    ebx
c0022b3d:	5e                   	pop    esi
c0022b3e:	5f                   	pop    edi
c0022b3f:	5d                   	pop    ebp
c0022b40:	c3                   	ret    
c0022b41:	90                   	nop

c0022b42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022b42:	55                   	push   ebp
c0022b43:	57                   	push   edi
c0022b44:	56                   	push   esi
c0022b45:	53                   	push   ebx
c0022b46:	83 ec 68             	sub    esp,0x68
c0022b49:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022b54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022b5f:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022b64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b68:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022b6f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022b74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b78:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022b7d:	6a 0c                	push   0xc
c0022b7f:	57                   	push   edi
c0022b80:	53                   	push   ebx
c0022b81:	56                   	push   esi
c0022b82:	55                   	push   ebp
c0022b83:	e8 88 f8 ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b88:	83 c4 20             	add    esp,0x20
c0022b8b:	57                   	push   edi
c0022b8c:	53                   	push   ebx
c0022b8d:	56                   	push   esi
c0022b8e:	55                   	push   ebp
c0022b8f:	e8 70 f9 ff ff       	call   c0022504 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022b94:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022b99:	57                   	push   edi
c0022b9a:	53                   	push   ebx
c0022b9b:	56                   	push   esi
c0022b9c:	55                   	push   ebp
c0022b9d:	e8 f8 f9 ff ff       	call   c002259a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ba2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022ba6:	83 c4 14             	add    esp,0x14
c0022ba9:	6a 3c                	push   0x3c
c0022bab:	57                   	push   edi
c0022bac:	53                   	push   ebx
c0022bad:	56                   	push   esi
c0022bae:	55                   	push   ebp
c0022baf:	e8 5c f8 ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb4:	0f b6 c4             	movzx  eax,ah
c0022bb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022bbb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022bbf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022bc3:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0022bc8:	83 c4 20             	add    esp,0x20
c0022bcb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022bd1:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022bd8:	74 7c                	je     c0022c56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022bda:	31 c0                	xor    eax,eax
c0022bdc:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0022be2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022be8:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022bee:	7e 66                	jle    c0022c56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022bf0:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022bf3:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022bfa:	39 cb                	cmp    ebx,ecx
c0022bfc:	75 55                	jne    c0022c53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022bfe:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022c05:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022c09:	75 48                	jne    c0022c53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022c0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022c0f:	83 ec 0c             	sub    esp,0xc
c0022c12:	68 d9 bd 02 c0       	push   0xc002bdd9
c0022c17:	e8 a8 f9 fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0022c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c20:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c0022c26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022c2a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c30:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022c38:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022c3c:	52                   	push   edx
c0022c3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c41:	53                   	push   ebx
c0022c42:	68 fe bd 02 c0       	push   0xc002bdfe
c0022c47:	e8 78 f9 fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0022c4c:	83 c4 20             	add    esp,0x20
c0022c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c53:	40                   	inc    eax
c0022c54:	eb 86                	jmp    c0022bdc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022c56:	31 d2                	xor    edx,edx
c0022c58:	83 ec 0c             	sub    esp,0xc
c0022c5b:	57                   	push   edi
c0022c5c:	53                   	push   ebx
c0022c5d:	56                   	push   esi
c0022c5e:	52                   	push   edx
c0022c5f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022c63:	55                   	push   ebp
c0022c64:	e8 7d f9 ff ff       	call   c00225e6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c6d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022c71:	42                   	inc    edx
c0022c72:	83 c4 20             	add    esp,0x20
c0022c75:	83 fa 06             	cmp    edx,0x6
c0022c78:	75 de                	jne    c0022c58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022c7a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022c7f:	83 ec 0c             	sub    esp,0xc
c0022c82:	86 e0                	xchg   al,ah
c0022c84:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022c89:	6a 02                	push   0x2
c0022c8b:	57                   	push   edi
c0022c8c:	53                   	push   ebx
c0022c8d:	56                   	push   esi
c0022c8e:	55                   	push   ebp
c0022c8f:	e8 7c f7 ff ff       	call   c0022410 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c94:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022c99:	83 c4 20             	add    esp,0x20
c0022c9c:	57                   	push   edi
c0022c9d:	53                   	push   ebx
c0022c9e:	56                   	push   esi
c0022c9f:	55                   	push   ebp
c0022ca0:	e8 a9 f8 ff ff       	call   c002254e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ca5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ca9:	57                   	push   edi
c0022caa:	53                   	push   ebx
c0022cab:	56                   	push   esi
c0022cac:	55                   	push   ebp
c0022cad:	e8 06 f8 ff ff       	call   c00224b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cb2:	b9 09 00 00 00       	mov    ecx,0x9
c0022cb7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022cbc:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022cc0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022cc4:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022cc8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022ccc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022cd0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022cd4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022cd8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022cdc:	83 ec 0c             	sub    esp,0xc
c0022cdf:	fc                   	cld    
c0022ce0:	89 e7                	mov    edi,esp
c0022ce2:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022ce6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ce8:	55                   	push   ebp
c0022ce9:	e8 e2 fc ff ff       	call   c00229d0 <PCI::foundDevice(PCIDeviceInfo)>
c0022cee:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022cf4:	5b                   	pop    ebx
c0022cf5:	5e                   	pop    esi
c0022cf6:	5f                   	pop    edi
c0022cf7:	5d                   	pop    ebp
c0022cf8:	c3                   	ret    
c0022cf9:	90                   	nop

c0022cfa <PCI::checkDevice(unsigned char, unsigned char)>:
c0022cfa:	55                   	push   ebp
c0022cfb:	57                   	push   edi
c0022cfc:	56                   	push   esi
c0022cfd:	53                   	push   ebx
c0022cfe:	83 ec 0c             	sub    esp,0xc
c0022d01:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d05:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d0a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022d0f:	6a 00                	push   0x0
c0022d11:	56                   	push   esi
c0022d12:	57                   	push   edi
c0022d13:	55                   	push   ebp
c0022d14:	e8 9f f7 ff ff       	call   c00224b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d19:	6a 00                	push   0x0
c0022d1b:	56                   	push   esi
c0022d1c:	57                   	push   edi
c0022d1d:	55                   	push   ebp
c0022d1e:	e8 1f fe ff ff       	call   c0022b42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d23:	83 c4 20             	add    esp,0x20
c0022d26:	6a 00                	push   0x0
c0022d28:	56                   	push   esi
c0022d29:	57                   	push   edi
c0022d2a:	55                   	push   ebp
c0022d2b:	e8 ac f7 ff ff       	call   c00224dc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d30:	83 c4 10             	add    esp,0x10
c0022d33:	84 c0                	test   al,al
c0022d35:	79 27                	jns    c0022d5e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022d37:	bb 01 00 00 00       	mov    ebx,0x1
c0022d3c:	53                   	push   ebx
c0022d3d:	56                   	push   esi
c0022d3e:	57                   	push   edi
c0022d3f:	55                   	push   ebp
c0022d40:	e8 73 f7 ff ff       	call   c00224b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d45:	83 c4 10             	add    esp,0x10
c0022d48:	66 40                	inc    ax
c0022d4a:	74 0c                	je     c0022d58 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022d4c:	53                   	push   ebx
c0022d4d:	56                   	push   esi
c0022d4e:	57                   	push   edi
c0022d4f:	55                   	push   ebp
c0022d50:	e8 ed fd ff ff       	call   c0022b42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d55:	83 c4 10             	add    esp,0x10
c0022d58:	43                   	inc    ebx
c0022d59:	83 fb 08             	cmp    ebx,0x8
c0022d5c:	75 de                	jne    c0022d3c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022d5e:	83 c4 0c             	add    esp,0xc
c0022d61:	5b                   	pop    ebx
c0022d62:	5e                   	pop    esi
c0022d63:	5f                   	pop    edi
c0022d64:	5d                   	pop    ebp
c0022d65:	c3                   	ret    

c0022d66 <PCI::detect()>:
c0022d66:	56                   	push   esi
c0022d67:	53                   	push   ebx
c0022d68:	53                   	push   ebx
c0022d69:	31 db                	xor    ebx,ebx
c0022d6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022d6f:	6a 00                	push   0x0
c0022d71:	6a 00                	push   0x0
c0022d73:	6a 00                	push   0x0
c0022d75:	56                   	push   esi
c0022d76:	e8 61 f7 ff ff       	call   c00224dc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d7b:	83 c4 10             	add    esp,0x10
c0022d7e:	a8 80                	test   al,0x80
c0022d80:	75 21                	jne    c0022da3 <PCI::detect()+0x3d>
c0022d82:	51                   	push   ecx
c0022d83:	51                   	push   ecx
c0022d84:	6a 00                	push   0x0
c0022d86:	56                   	push   esi
c0022d87:	e8 20 fc ff ff       	call   c00229ac <PCI::checkBus(unsigned char)>
c0022d8c:	83 c4 10             	add    esp,0x10
c0022d8f:	eb 24                	jmp    c0022db5 <PCI::detect()+0x4f>
c0022d91:	52                   	push   edx
c0022d92:	52                   	push   edx
c0022d93:	53                   	push   ebx
c0022d94:	43                   	inc    ebx
c0022d95:	56                   	push   esi
c0022d96:	e8 11 fc ff ff       	call   c00229ac <PCI::checkBus(unsigned char)>
c0022d9b:	83 c4 10             	add    esp,0x10
c0022d9e:	83 fb 08             	cmp    ebx,0x8
c0022da1:	74 12                	je     c0022db5 <PCI::detect()+0x4f>
c0022da3:	53                   	push   ebx
c0022da4:	6a 00                	push   0x0
c0022da6:	6a 00                	push   0x0
c0022da8:	56                   	push   esi
c0022da9:	e8 0a f7 ff ff       	call   c00224b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dae:	83 c4 10             	add    esp,0x10
c0022db1:	66 40                	inc    ax
c0022db3:	74 dc                	je     c0022d91 <PCI::detect()+0x2b>
c0022db5:	58                   	pop    eax
c0022db6:	5b                   	pop    ebx
c0022db7:	5e                   	pop    esi
c0022db8:	c3                   	ret    
c0022db9:	90                   	nop

c0022dba <IDE::close(int, int, void*)>:
c0022dba:	83 c8 ff             	or     eax,0xffffffff
c0022dbd:	c3                   	ret    

c0022dbe <IDE::IDE()>:
c0022dbe:	83 ec 0c             	sub    esp,0xc
c0022dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc5:	83 ec 08             	sub    esp,0x8
c0022dc8:	68 48 be 02 c0       	push   0xc002be48
c0022dcd:	50                   	push   eax
c0022dce:	e8 d7 0f ff ff       	call   c0013daa <HardDiskController::HardDiskController(char const*)>
c0022dd3:	83 c4 10             	add    esp,0x10
c0022dd6:	ba d8 be 02 c0       	mov    edx,0xc002bed8
c0022ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ddf:	89 10                	mov    DWORD PTR [eax],edx
c0022de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022dec:	90                   	nop
c0022ded:	83 c4 0c             	add    esp,0xc
c0022df0:	c3                   	ret    
c0022df1:	90                   	nop

c0022df2 <IDE::prepareInterrupt(unsigned char)>:
c0022df2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022df7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022dfb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e03:	c3                   	ret    

c0022e04 <selectDrive(unsigned char, unsigned char)>:
c0022e04:	c3                   	ret    
c0022e05:	90                   	nop

c0022e06 <IDE::getBase(unsigned char)>:
c0022e06:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e0f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022e17:	c3                   	ret    

c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022e18:	55                   	push   ebp
c0022e19:	57                   	push   edi
c0022e1a:	56                   	push   esi
c0022e1b:	53                   	push   ebx
c0022e1c:	83 ec 1c             	sub    esp,0x1c
c0022e1f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e23:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e27:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022e2a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e32:	80 f9 03             	cmp    cl,0x3
c0022e35:	77 51                	ja     c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022e37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e3b:	0f b6 f2             	movzx  esi,dl
c0022e3e:	0f b6 db             	movzx  ebx,bl
c0022e41:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e44:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022e48:	83 ca 80             	or     edx,0xffffff80
c0022e4b:	0f b6 d2             	movzx  edx,dl
c0022e4e:	52                   	push   edx
c0022e4f:	6a 0c                	push   0xc
c0022e51:	56                   	push   esi
c0022e52:	57                   	push   edi
c0022e53:	e8 c0 ff ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e58:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022e5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e61:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022e65:	ee                   	out    dx,al
c0022e66:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022e6b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022e6f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022e73:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022e77:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022e7f:	83 c4 2c             	add    esp,0x2c
c0022e82:	5b                   	pop    ebx
c0022e83:	5e                   	pop    esi
c0022e84:	5f                   	pop    edi
c0022e85:	5d                   	pop    ebp
c0022e86:	eb 90                	jmp    c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e88:	80 fb 07             	cmp    bl,0x7
c0022e8b:	77 12                	ja     c0022e9f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022e8d:	0f b6 d2             	movzx  edx,dl
c0022e90:	0f b6 db             	movzx  ebx,bl
c0022e93:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022e9b:	89 da                	mov    edx,ebx
c0022e9d:	eb 2f                	jmp    c0022ece <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022e9f:	80 fb 0d             	cmp    bl,0xd
c0022ea2:	77 13                	ja     c0022eb7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ea4:	0f b6 d2             	movzx  edx,dl
c0022ea7:	0f b6 db             	movzx  ebx,bl
c0022eaa:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022eb1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022eb5:	eb 17                	jmp    c0022ece <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022eb7:	80 fb 15             	cmp    bl,0x15
c0022eba:	77 13                	ja     c0022ecf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022ebc:	0f b6 d2             	movzx  edx,dl
c0022ebf:	0f b6 db             	movzx  ebx,bl
c0022ec2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022eca:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022ece:	ee                   	out    dx,al
c0022ecf:	83 c4 1c             	add    esp,0x1c
c0022ed2:	5b                   	pop    ebx
c0022ed3:	5e                   	pop    esi
c0022ed4:	5f                   	pop    edi
c0022ed5:	5d                   	pop    ebp
c0022ed6:	c3                   	ret    
c0022ed7:	90                   	nop

c0022ed8 <IDE::read(unsigned char, unsigned char)>:
c0022ed8:	55                   	push   ebp
c0022ed9:	57                   	push   edi
c0022eda:	56                   	push   esi
c0022edb:	53                   	push   ebx
c0022edc:	83 ec 1c             	sub    esp,0x1c
c0022edf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ee3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ee7:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022eea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022eee:	3c 03                	cmp    al,0x3
c0022ef0:	77 43                	ja     c0022f35 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022ef2:	0f b6 f2             	movzx  esi,dl
c0022ef5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ef8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022efc:	83 c8 80             	or     eax,0xffffff80
c0022eff:	0f b6 c0             	movzx  eax,al
c0022f02:	50                   	push   eax
c0022f03:	6a 0c                	push   0xc
c0022f05:	56                   	push   esi
c0022f06:	57                   	push   edi
c0022f07:	e8 0c ff ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f0c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022f11:	0f b6 c3             	movzx  eax,bl
c0022f14:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022f18:	ec                   	in     al,dx
c0022f19:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022f1d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022f22:	52                   	push   edx
c0022f23:	6a 0c                	push   0xc
c0022f25:	56                   	push   esi
c0022f26:	57                   	push   edi
c0022f27:	e8 ec fe ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f2c:	83 c4 20             	add    esp,0x20
c0022f2f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022f33:	eb 49                	jmp    c0022f7e <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f35:	80 fb 07             	cmp    bl,0x7
c0022f38:	77 12                	ja     c0022f4c <IDE::read(unsigned char, unsigned char)+0x74>
c0022f3a:	0f b6 d2             	movzx  edx,dl
c0022f3d:	0f b6 c3             	movzx  eax,bl
c0022f40:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022f48:	89 c2                	mov    edx,eax
c0022f4a:	eb 31                	jmp    c0022f7d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f4c:	80 fb 0d             	cmp    bl,0xd
c0022f4f:	77 13                	ja     c0022f64 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022f51:	0f b6 d2             	movzx  edx,dl
c0022f54:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022f5b:	0f b6 d3             	movzx  edx,bl
c0022f5e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022f62:	eb 19                	jmp    c0022f7d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f64:	31 c0                	xor    eax,eax
c0022f66:	80 fb 15             	cmp    bl,0x15
c0022f69:	77 13                	ja     c0022f7e <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f6b:	0f b6 d2             	movzx  edx,dl
c0022f6e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022f76:	0f b6 d3             	movzx  edx,bl
c0022f79:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022f7d:	ec                   	in     al,dx
c0022f7e:	83 c4 1c             	add    esp,0x1c
c0022f81:	5b                   	pop    ebx
c0022f82:	5e                   	pop    esi
c0022f83:	5f                   	pop    edi
c0022f84:	5d                   	pop    ebp
c0022f85:	c3                   	ret    

c0022f86 <IDE::waitInterrupt(unsigned char)>:
c0022f86:	55                   	push   ebp
c0022f87:	57                   	push   edi
c0022f88:	56                   	push   esi
c0022f89:	53                   	push   ebx
c0022f8a:	31 db                	xor    ebx,ebx
c0022f8c:	83 ec 0c             	sub    esp,0xc
c0022f8f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022f93:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022f98:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022fa0:	89 e8                	mov    eax,ebp
c0022fa2:	84 c0                	test   al,al
c0022fa4:	75 34                	jne    c0022fda <IDE::waitInterrupt(unsigned char)+0x54>
c0022fa6:	52                   	push   edx
c0022fa7:	6a 0c                	push   0xc
c0022fa9:	56                   	push   esi
c0022faa:	57                   	push   edi
c0022fab:	e8 28 ff ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0022fb0:	83 c4 10             	add    esp,0x10
c0022fb3:	a8 01                	test   al,0x1
c0022fb5:	75 2b                	jne    c0022fe2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022fb7:	f6 c3 04             	test   bl,0x4
c0022fba:	75 16                	jne    c0022fd2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022fbc:	83 fb 32             	cmp    ebx,0x32
c0022fbf:	7e 11                	jle    c0022fd2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022fc1:	50                   	push   eax
c0022fc2:	50                   	push   eax
c0022fc3:	6a 00                	push   0x0
c0022fc5:	68 80 96 98 00       	push   0x989680
c0022fca:	e8 c6 ab ff ff       	call   c001db95 <nanoSleep(unsigned long long)>
c0022fcf:	83 c4 10             	add    esp,0x10
c0022fd2:	83 fb 3c             	cmp    ebx,0x3c
c0022fd5:	74 0b                	je     c0022fe2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022fd7:	43                   	inc    ebx
c0022fd8:	eb be                	jmp    c0022f98 <IDE::waitInterrupt(unsigned char)+0x12>
c0022fda:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022fe2:	83 c4 0c             	add    esp,0xc
c0022fe5:	89 e8                	mov    eax,ebp
c0022fe7:	5b                   	pop    ebx
c0022fe8:	5e                   	pop    esi
c0022fe9:	5f                   	pop    edi
c0022fea:	5d                   	pop    ebp
c0022feb:	c3                   	ret    

c0022fec <ideChannel0IRQHandler(regs*, void*)>:
c0022fec:	83 ec 10             	sub    esp,0x10
c0022fef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ff3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022ffa:	6a 07                	push   0x7
c0022ffc:	6a 00                	push   0x0
c0022ffe:	50                   	push   eax
c0022fff:	e8 d4 fe ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023004:	83 c4 1c             	add    esp,0x1c
c0023007:	c3                   	ret    

c0023008 <ideChannel1IRQHandler(regs*, void*)>:
c0023008:	83 ec 10             	sub    esp,0x10
c002300b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002300f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023016:	6a 07                	push   0x7
c0023018:	6a 01                	push   0x1
c002301a:	50                   	push   eax
c002301b:	e8 b8 fe ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023020:	83 c4 1c             	add    esp,0x1c
c0023023:	c3                   	ret    

c0023024 <IDE::enableIRQs(unsigned char, bool)>:
c0023024:	57                   	push   edi
c0023025:	56                   	push   esi
c0023026:	be 04 00 00 00       	mov    esi,0x4
c002302b:	53                   	push   ebx
c002302c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023035:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002303a:	0f 94 c0             	sete   al
c002303d:	d1 e0                	shl    eax,1
c002303f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023046:	0f b6 c0             	movzx  eax,al
c0023049:	50                   	push   eax
c002304a:	6a 0c                	push   0xc
c002304c:	57                   	push   edi
c002304d:	53                   	push   ebx
c002304e:	e8 c5 fd ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023053:	83 c4 10             	add    esp,0x10
c0023056:	50                   	push   eax
c0023057:	6a 0c                	push   0xc
c0023059:	57                   	push   edi
c002305a:	53                   	push   ebx
c002305b:	e8 78 fe ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023060:	83 c4 10             	add    esp,0x10
c0023063:	4e                   	dec    esi
c0023064:	75 f0                	jne    c0023056 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023066:	5b                   	pop    ebx
c0023067:	5e                   	pop    esi
c0023068:	5f                   	pop    edi
c0023069:	c3                   	ret    

c002306a <IDE::open(int, int, void*)>:
c002306a:	55                   	push   ebp
c002306b:	57                   	push   edi
c002306c:	56                   	push   esi
c002306d:	53                   	push   ebx
c002306e:	83 ec 1c             	sub    esp,0x1c
c0023071:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023075:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002307e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023087:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002308e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023095:	0f 85 b0 02 00 00    	jne    c002334b <IDE::open(int, int, void*)+0x2e1>
c002309b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00230a1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00230a5:	83 e0 7f             	and    eax,0x7f
c00230a8:	3c 05                	cmp    al,0x5
c00230aa:	74 04                	je     c00230b0 <IDE::open(int, int, void*)+0x46>
c00230ac:	3c 0f                	cmp    al,0xf
c00230ae:	75 32                	jne    c00230e2 <IDE::open(int, int, void*)+0x78>
c00230b0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00230b6:	83 e0 fc             	and    eax,0xfffffffc
c00230b9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00230c0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00230c6:	83 e0 fc             	and    eax,0xfffffffc
c00230c9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00230d0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00230d6:	83 e0 fc             	and    eax,0xfffffffc
c00230d9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00230e0:	eb 14                	jmp    c00230f6 <IDE::open(int, int, void*)+0x8c>
c00230e2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00230ec:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00230f6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00230fd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023104:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023108:	89 c6                	mov    esi,eax
c002310a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002310f:	c1 e6 10             	shl    esi,0x10
c0023112:	89 e8                	mov    eax,ebp
c0023114:	89 fa                	mov    edx,edi
c0023116:	c1 e0 0b             	shl    eax,0xb
c0023119:	09 f0                	or     eax,esi
c002311b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023122:	c1 e6 08             	shl    esi,0x8
c0023125:	09 c6                	or     esi,eax
c0023127:	89 f0                	mov    eax,esi
c0023129:	0d 08 00 00 80       	or     eax,0x80000008
c002312e:	ef                   	out    dx,eax
c002312f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023134:	89 ca                	mov    edx,ecx
c0023136:	ed                   	in     eax,dx
c0023137:	c1 e8 10             	shr    eax,0x10
c002313a:	3d ff ff 00 00       	cmp    eax,0xffff
c002313f:	0f 84 f5 00 00 00    	je     c002323a <IDE::open(int, int, void*)+0x1d0>
c0023145:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002314b:	89 fa                	mov    edx,edi
c002314d:	89 f0                	mov    eax,esi
c002314f:	ef                   	out    dx,eax
c0023150:	b0 fe                	mov    al,0xfe
c0023152:	89 ca                	mov    edx,ecx
c0023154:	ee                   	out    dx,al
c0023155:	89 f0                	mov    eax,esi
c0023157:	89 fa                	mov    edx,edi
c0023159:	ef                   	out    dx,eax
c002315a:	89 ca                	mov    edx,ecx
c002315c:	ed                   	in     eax,dx
c002315d:	3c fe                	cmp    al,0xfe
c002315f:	0f 85 a9 00 00 00    	jne    c002320e <IDE::open(int, int, void*)+0x1a4>
c0023165:	8b 15 08 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d708
c002316b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023172:	74 33                	je     c00231a7 <IDE::open(int, int, void*)+0x13d>
c0023174:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002317a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002317e:	40                   	inc    eax
c002317f:	83 ec 0c             	sub    esp,0xc
c0023182:	0f b6 c0             	movzx  eax,al
c0023185:	50                   	push   eax
c0023186:	55                   	push   ebp
c0023187:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002318b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023191:	51                   	push   ecx
c0023192:	e8 51 48 ff ff       	call   c00179e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023197:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002319c:	83 c4 1c             	add    esp,0x1c
c002319f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00231a5:	eb 0a                	jmp    c00231b1 <IDE::open(int, int, void*)+0x147>
c00231a7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00231b1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00231b8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00231bf:	c1 e1 10             	shl    ecx,0x10
c00231c2:	c1 e0 08             	shl    eax,0x8
c00231c5:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231ca:	09 c1                	or     ecx,eax
c00231cc:	89 fa                	mov    edx,edi
c00231ce:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00231d5:	c1 e0 0b             	shl    eax,0xb
c00231d8:	09 c1                	or     ecx,eax
c00231da:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00231e0:	89 c8                	mov    eax,ecx
c00231e2:	ef                   	out    dx,eax
c00231e3:	be fc 0c 00 00       	mov    esi,0xcfc
c00231e8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00231ee:	89 f2                	mov    edx,esi
c00231f0:	ee                   	out    dx,al
c00231f1:	89 c8                	mov    eax,ecx
c00231f3:	89 fa                	mov    edx,edi
c00231f5:	ef                   	out    dx,eax
c00231f6:	89 f2                	mov    edx,esi
c00231f8:	ed                   	in     eax,dx
c00231f9:	0f b6 c0             	movzx  eax,al
c00231fc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023202:	74 46                	je     c002324a <IDE::open(int, int, void*)+0x1e0>
c0023204:	83 ec 0c             	sub    esp,0xc
c0023207:	68 60 be 02 c0       	push   0xc002be60
c002320c:	eb 34                	jmp    c0023242 <IDE::open(int, int, void*)+0x1d8>
c002320e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023217:	75 17                	jne    c0023230 <IDE::open(int, int, void*)+0x1c6>
c0023219:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002321e:	74 07                	je     c0023227 <IDE::open(int, int, void*)+0x1bd>
c0023220:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023225:	75 09                	jne    c0023230 <IDE::open(int, int, void*)+0x1c6>
c0023227:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002322e:	eb 1a                	jmp    c002324a <IDE::open(int, int, void*)+0x1e0>
c0023230:	83 ec 0c             	sub    esp,0xc
c0023233:	68 68 be 02 c0       	push   0xc002be68
c0023238:	eb 08                	jmp    c0023242 <IDE::open(int, int, void*)+0x1d8>
c002323a:	83 ec 0c             	sub    esp,0xc
c002323d:	68 99 be 02 c0       	push   0xc002be99
c0023242:	e8 e8 6a ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0023247:	83 c4 10             	add    esp,0x10
c002324a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023251:	79 1a                	jns    c002326d <IDE::open(int, int, void*)+0x203>
c0023253:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023259:	83 e0 fc             	and    eax,0xfffffffc
c002325c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023263:	83 c0 08             	add    eax,0x8
c0023266:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002326d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023273:	89 c2                	mov    edx,eax
c0023275:	83 e2 0f             	and    edx,0xf
c0023278:	66 83 fa 08          	cmp    dx,0x8
c002327c:	75 0a                	jne    c0023288 <IDE::open(int, int, void*)+0x21e>
c002327e:	83 e8 02             	sub    eax,0x2
c0023281:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023288:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002328e:	89 c2                	mov    edx,eax
c0023290:	83 e2 0f             	and    edx,0xf
c0023293:	66 83 fa 08          	cmp    dx,0x8
c0023297:	75 0a                	jne    c00232a3 <IDE::open(int, int, void*)+0x239>
c0023299:	83 e8 02             	sub    eax,0x2
c002329c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232a3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00232aa:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00232b1:	89 d0                	mov    eax,edx
c00232b3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00232b6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00232ba:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00232be:	8d 4a 01             	lea    ecx,[edx+0x1]
c00232c1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00232c6:	0f b6 c9             	movzx  ecx,cl
c00232c9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00232d0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00232d3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00232d7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00232db:	8d 50 02             	lea    edx,[eax+0x2]
c00232de:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00232e3:	0f b6 d2             	movzx  edx,dl
c00232e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00232ec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00232ef:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00232f3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00232f7:	8d 48 03             	lea    ecx,[eax+0x3]
c00232fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00232ff:	0f b6 c9             	movzx  ecx,cl
c0023302:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023308:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002330b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002330f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023313:	8d 50 04             	lea    edx,[eax+0x4]
c0023316:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002331c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023321:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023328:	66 85 f6             	test   si,si
c002332b:	74 5b                	je     c0023388 <IDE::open(int, int, void*)+0x31e>
c002332d:	0f b6 d2             	movzx  edx,dl
c0023330:	83 c0 05             	add    eax,0x5
c0023333:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023336:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002333a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002333e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023344:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023349:	eb 3d                	jmp    c0023388 <IDE::open(int, int, void*)+0x31e>
c002334b:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023351:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023358:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002335f:	66 05 06 02          	add    ax,0x206
c0023363:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002336a:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023371:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023378:	66 05 06 02          	add    ax,0x206
c002337c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023383:	e9 e5 fe ff ff       	jmp    c002326d <IDE::open(int, int, void*)+0x203>
c0023388:	50                   	push   eax
c0023389:	50                   	push   eax
c002338a:	6a 00                	push   0x0
c002338c:	53                   	push   ebx
c002338d:	e8 60 fa ff ff       	call   c0022df2 <IDE::prepareInterrupt(unsigned char)>
c0023392:	5a                   	pop    edx
c0023393:	59                   	pop    ecx
c0023394:	6a 01                	push   0x1
c0023396:	53                   	push   ebx
c0023397:	e8 56 fa ff ff       	call   c0022df2 <IDE::prepareInterrupt(unsigned char)>
c002339c:	83 c4 0c             	add    esp,0xc
c002339f:	6a 00                	push   0x0
c00233a1:	6a 00                	push   0x0
c00233a3:	53                   	push   ebx
c00233a4:	e8 7b fc ff ff       	call   c0023024 <IDE::enableIRQs(unsigned char, bool)>
c00233a9:	83 c4 0c             	add    esp,0xc
c00233ac:	6a 00                	push   0x0
c00233ae:	6a 01                	push   0x1
c00233b0:	53                   	push   ebx
c00233b1:	e8 6e fc ff ff       	call   c0023024 <IDE::enableIRQs(unsigned char, bool)>
c00233b6:	83 c4 10             	add    esp,0x10
c00233b9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00233c0:	74 34                	je     c00233f6 <IDE::open(int, int, void*)+0x38c>
c00233c2:	83 ec 0c             	sub    esp,0xc
c00233c5:	53                   	push   ebx
c00233c6:	6a 01                	push   0x1
c00233c8:	68 ec 2f 02 c0       	push   0xc0022fec
c00233cd:	6a 0e                	push   0xe
c00233cf:	53                   	push   ebx
c00233d0:	e8 9f 05 ff ff       	call   c0013974 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233d5:	83 c4 14             	add    esp,0x14
c00233d8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233de:	53                   	push   ebx
c00233df:	6a 01                	push   0x1
c00233e1:	68 08 30 02 c0       	push   0xc0023008
c00233e6:	6a 0f                	push   0xf
c00233e8:	53                   	push   ebx
c00233e9:	e8 86 05 ff ff       	call   c0013974 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233ee:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00233f4:	eb 38                	jmp    c002342e <IDE::open(int, int, void*)+0x3c4>
c00233f6:	83 ec 0c             	sub    esp,0xc
c00233f9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023403:	53                   	push   ebx
c0023404:	6a 00                	push   0x0
c0023406:	68 ec 2f 02 c0       	push   0xc0022fec
c002340b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023411:	53                   	push   ebx
c0023412:	e8 5d 05 ff ff       	call   c0013974 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023417:	83 c4 14             	add    esp,0x14
c002341a:	53                   	push   ebx
c002341b:	6a 00                	push   0x0
c002341d:	68 08 30 02 c0       	push   0xc0023008
c0023422:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023428:	53                   	push   ebx
c0023429:	e8 46 05 ff ff       	call   c0013974 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002342e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023430:	83 c4 20             	add    esp,0x20
c0023433:	83 ec 0c             	sub    esp,0xc
c0023436:	53                   	push   ebx
c0023437:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002343a:	83 c4 0c             	add    esp,0xc
c002343d:	6a 07                	push   0x7
c002343f:	6a 00                	push   0x0
c0023441:	53                   	push   ebx
c0023442:	e8 91 fa ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023447:	83 c4 0c             	add    esp,0xc
c002344a:	6a 07                	push   0x7
c002344c:	6a 01                	push   0x1
c002344e:	53                   	push   ebx
c002344f:	e8 84 fa ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023454:	83 c4 0c             	add    esp,0xc
c0023457:	6a 01                	push   0x1
c0023459:	6a 00                	push   0x0
c002345b:	53                   	push   ebx
c002345c:	e8 c3 fb ff ff       	call   c0023024 <IDE::enableIRQs(unsigned char, bool)>
c0023461:	83 c4 0c             	add    esp,0xc
c0023464:	6a 01                	push   0x1
c0023466:	6a 01                	push   0x1
c0023468:	53                   	push   ebx
c0023469:	e8 b6 fb ff ff       	call   c0023024 <IDE::enableIRQs(unsigned char, bool)>
c002346e:	83 c4 2c             	add    esp,0x2c
c0023471:	31 c0                	xor    eax,eax
c0023473:	5b                   	pop    ebx
c0023474:	5e                   	pop    esi
c0023475:	5f                   	pop    edi
c0023476:	5d                   	pop    ebp
c0023477:	c3                   	ret    

c0023478 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023478:	55                   	push   ebp
c0023479:	57                   	push   edi
c002347a:	56                   	push   esi
c002347b:	53                   	push   ebx
c002347c:	83 ec 1c             	sub    esp,0x1c
c002347f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023483:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023487:	8d 50 f8             	lea    edx,[eax-0x8]
c002348a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002348e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023492:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023496:	80 fa 03             	cmp    dl,0x3
c0023499:	77 5d                	ja     c00234f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002349b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002349f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234a3:	0f b6 db             	movzx  ebx,bl
c00234a6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00234a9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00234ad:	83 ca 80             	or     edx,0xffffff80
c00234b0:	0f b6 d2             	movzx  edx,dl
c00234b3:	52                   	push   edx
c00234b4:	6a 0c                	push   0xc
c00234b6:	53                   	push   ebx
c00234b7:	56                   	push   esi
c00234b8:	e8 5b f9 ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234bd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00234c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00234ca:	0f b6 c0             	movzx  eax,al
c00234cd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00234d1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00234d3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00234d8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00234dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00234e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00234e4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00234ec:	83 c4 2c             	add    esp,0x2c
c00234ef:	5b                   	pop    ebx
c00234f0:	5e                   	pop    esi
c00234f1:	5f                   	pop    edi
c00234f2:	5d                   	pop    ebp
c00234f3:	e9 20 f9 ff ff       	jmp    c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234f8:	3c 07                	cmp    al,0x7
c00234fa:	77 10                	ja     c002350c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00234fc:	0f b6 db             	movzx  ebx,bl
c00234ff:	0f b6 d0             	movzx  edx,al
c0023502:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002350a:	eb 2d                	jmp    c0023539 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002350c:	3c 0d                	cmp    al,0xd
c002350e:	77 13                	ja     c0023523 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023510:	0f b6 db             	movzx  ebx,bl
c0023513:	0f b6 c0             	movzx  eax,al
c0023516:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002351d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023521:	eb 16                	jmp    c0023539 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023523:	3c 15                	cmp    al,0x15
c0023525:	77 14                	ja     c002353b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023527:	0f b6 db             	movzx  ebx,bl
c002352a:	0f b6 c0             	movzx  eax,al
c002352d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023535:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023539:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002353b:	83 c4 1c             	add    esp,0x1c
c002353e:	5b                   	pop    ebx
c002353f:	5e                   	pop    esi
c0023540:	5f                   	pop    edi
c0023541:	5d                   	pop    ebp
c0023542:	c3                   	ret    
c0023543:	90                   	nop

c0023544 <IDE::detect()>:
c0023544:	55                   	push   ebp
c0023545:	57                   	push   edi
c0023546:	56                   	push   esi
c0023547:	53                   	push   ebx
c0023548:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002354e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023555:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002355c:	0f 85 9d 02 00 00    	jne    c00237ff <IDE::detect()+0x2bb>
c0023562:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023569:	31 f6                	xor    esi,esi
c002356b:	31 ed                	xor    ebp,ebp
c002356d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023575:	89 e8                	mov    eax,ebp
c0023577:	c1 e0 06             	shl    eax,0x6
c002357a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023582:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023586:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002358a:	c1 e0 04             	shl    eax,0x4
c002358d:	83 c8 a0             	or     eax,0xffffffa0
c0023590:	0f b6 c0             	movzx  eax,al
c0023593:	50                   	push   eax
c0023594:	6a 06                	push   0x6
c0023596:	56                   	push   esi
c0023597:	53                   	push   ebx
c0023598:	e8 7b f8 ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002359d:	83 c4 0c             	add    esp,0xc
c00235a0:	6a 0c                	push   0xc
c00235a2:	56                   	push   esi
c00235a3:	53                   	push   ebx
c00235a4:	e8 2f f9 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00235a9:	83 c4 0c             	add    esp,0xc
c00235ac:	6a 0c                	push   0xc
c00235ae:	56                   	push   esi
c00235af:	53                   	push   ebx
c00235b0:	e8 23 f9 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00235b5:	83 c4 0c             	add    esp,0xc
c00235b8:	6a 0c                	push   0xc
c00235ba:	56                   	push   esi
c00235bb:	53                   	push   ebx
c00235bc:	e8 17 f9 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00235c1:	83 c4 0c             	add    esp,0xc
c00235c4:	6a 0c                	push   0xc
c00235c6:	56                   	push   esi
c00235c7:	53                   	push   ebx
c00235c8:	e8 0b f9 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00235cd:	68 ec 00 00 00       	push   0xec
c00235d2:	6a 07                	push   0x7
c00235d4:	56                   	push   esi
c00235d5:	53                   	push   ebx
c00235d6:	e8 3d f8 ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235db:	83 c4 1c             	add    esp,0x1c
c00235de:	6a 0c                	push   0xc
c00235e0:	56                   	push   esi
c00235e1:	53                   	push   ebx
c00235e2:	e8 f1 f8 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00235e7:	83 c4 0c             	add    esp,0xc
c00235ea:	6a 0c                	push   0xc
c00235ec:	56                   	push   esi
c00235ed:	53                   	push   ebx
c00235ee:	e8 e5 f8 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00235f3:	83 c4 0c             	add    esp,0xc
c00235f6:	6a 0c                	push   0xc
c00235f8:	56                   	push   esi
c00235f9:	53                   	push   ebx
c00235fa:	e8 d9 f8 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00235ff:	83 c4 0c             	add    esp,0xc
c0023602:	6a 0c                	push   0xc
c0023604:	56                   	push   esi
c0023605:	53                   	push   ebx
c0023606:	e8 cd f8 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c002360b:	83 c4 0c             	add    esp,0xc
c002360e:	6a 0c                	push   0xc
c0023610:	56                   	push   esi
c0023611:	53                   	push   ebx
c0023612:	e8 c1 f8 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023617:	83 c4 10             	add    esp,0x10
c002361a:	84 c0                	test   al,al
c002361c:	0f 84 63 01 00 00    	je     c0023785 <IDE::detect()+0x241>
c0023622:	31 ff                	xor    edi,edi
c0023624:	50                   	push   eax
c0023625:	6a 0c                	push   0xc
c0023627:	56                   	push   esi
c0023628:	53                   	push   ebx
c0023629:	e8 aa f8 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c002362e:	83 c4 10             	add    esp,0x10
c0023631:	a8 01                	test   al,0x1
c0023633:	0f 85 6d 01 00 00    	jne    c00237a6 <IDE::detect()+0x262>
c0023639:	84 c0                	test   al,al
c002363b:	78 04                	js     c0023641 <IDE::detect()+0xfd>
c002363d:	a8 08                	test   al,0x8
c002363f:	75 27                	jne    c0023668 <IDE::detect()+0x124>
c0023641:	47                   	inc    edi
c0023642:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023648:	7e da                	jle    c0023624 <IDE::detect()+0xe0>
c002364a:	50                   	push   eax
c002364b:	50                   	push   eax
c002364c:	6a 00                	push   0x0
c002364e:	68 40 4b 4c 00       	push   0x4c4b40
c0023653:	e8 3d a5 ff ff       	call   c001db95 <nanoSleep(unsigned long long)>
c0023658:	83 c4 10             	add    esp,0x10
c002365b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023661:	75 c1                	jne    c0023624 <IDE::detect()+0xe0>
c0023663:	e9 3e 01 00 00       	jmp    c00237a6 <IDE::detect()+0x262>
c0023668:	31 c9                	xor    ecx,ecx
c002366a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002366e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023672:	83 ec 0c             	sub    esp,0xc
c0023675:	68 80 00 00 00       	push   0x80
c002367a:	57                   	push   edi
c002367b:	6a 00                	push   0x0
c002367d:	56                   	push   esi
c002367e:	53                   	push   ebx
c002367f:	e8 f4 fd ff ff       	call   c0023478 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023684:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023689:	89 e8                	mov    eax,ebp
c002368b:	89 d1                	mov    ecx,edx
c002368d:	c1 e0 06             	shl    eax,0x6
c0023690:	01 d8                	add    eax,ebx
c0023692:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023699:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00236a0:	89 f2                	mov    edx,esi
c00236a2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00236a8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00236ac:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00236b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236b6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00236bd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00236c5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00236cc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00236d4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00236da:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00236e1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00236e7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00236eb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00236ef:	83 c4 20             	add    esp,0x20
c00236f2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00236f5:	83 c0 02             	add    eax,0x2
c00236f8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00236fe:	83 c7 02             	add    edi,0x2
c0023701:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023704:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002370a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002370e:	75 e2                	jne    c00236f2 <IDE::detect()+0x1ae>
c0023710:	89 e8                	mov    eax,ebp
c0023712:	c1 e0 06             	shl    eax,0x6
c0023715:	01 d8                	add    eax,ebx
c0023717:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002371d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023724:	66 c1 ea 09          	shr    dx,0x9
c0023728:	83 e2 01             	and    edx,0x1
c002372b:	84 c9                	test   cl,cl
c002372d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023733:	75 22                	jne    c0023757 <IDE::detect()+0x213>
c0023735:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002373c:	74 46                	je     c0023784 <IDE::detect()+0x240>
c002373e:	83 ec 0c             	sub    esp,0xc
c0023741:	68 7c 01 00 00       	push   0x17c
c0023746:	e8 51 be fe ff       	call   c000f59c <malloc>
c002374b:	89 c7                	mov    edi,eax
c002374d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023750:	e8 15 05 00 00       	call   c0023c6a <ATA::ATA()>
c0023755:	eb 17                	jmp    c002376e <IDE::detect()+0x22a>
c0023757:	83 ec 0c             	sub    esp,0xc
c002375a:	68 80 01 00 00       	push   0x180
c002375f:	e8 38 be fe ff       	call   c000f59c <malloc>
c0023764:	89 c7                	mov    edi,eax
c0023766:	89 04 24             	mov    DWORD PTR [esp],eax
c0023769:	e8 04 0b 00 00       	call   c0024272 <ATAPI::ATAPI()>
c002376e:	5a                   	pop    edx
c002376f:	59                   	pop    ecx
c0023770:	57                   	push   edi
c0023771:	53                   	push   ebx
c0023772:	e8 85 02 ff ff       	call   c00139fc <Device::addChild(Device*)>
c0023777:	8b 07                	mov    eax,DWORD PTR [edi]
c0023779:	53                   	push   ebx
c002377a:	55                   	push   ebp
c002377b:	6a 00                	push   0x0
c002377d:	57                   	push   edi
c002377e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023781:	83 c4 20             	add    esp,0x20
c0023784:	45                   	inc    ebp
c0023785:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002378a:	74 0d                	je     c0023799 <IDE::detect()+0x255>
c002378c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023794:	e9 dc fd ff ff       	jmp    c0023575 <IDE::detect()+0x31>
c0023799:	4e                   	dec    esi
c002379a:	74 63                	je     c00237ff <IDE::detect()+0x2bb>
c002379c:	be 01 00 00 00       	mov    esi,0x1
c00237a1:	e9 c7 fd ff ff       	jmp    c002356d <IDE::detect()+0x29>
c00237a6:	50                   	push   eax
c00237a7:	6a 04                	push   0x4
c00237a9:	56                   	push   esi
c00237aa:	53                   	push   ebx
c00237ab:	e8 28 f7 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00237b0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00237b4:	83 c4 0c             	add    esp,0xc
c00237b7:	6a 05                	push   0x5
c00237b9:	56                   	push   esi
c00237ba:	53                   	push   ebx
c00237bb:	e8 18 f7 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00237c0:	83 c4 10             	add    esp,0x10
c00237c3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00237c7:	80 fa 14             	cmp    dl,0x14
c00237ca:	75 04                	jne    c00237d0 <IDE::detect()+0x28c>
c00237cc:	3c eb                	cmp    al,0xeb
c00237ce:	eb 07                	jmp    c00237d7 <IDE::detect()+0x293>
c00237d0:	3c 96                	cmp    al,0x96
c00237d2:	75 b1                	jne    c0023785 <IDE::detect()+0x241>
c00237d4:	80 fa 69             	cmp    dl,0x69
c00237d7:	75 ac                	jne    c0023785 <IDE::detect()+0x241>
c00237d9:	68 a1 00 00 00       	push   0xa1
c00237de:	6a 07                	push   0x7
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	e8 31 f6 ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237e7:	5f                   	pop    edi
c00237e8:	58                   	pop    eax
c00237e9:	6a 00                	push   0x0
c00237eb:	68 40 42 0f 00       	push   0xf4240
c00237f0:	e8 a0 a3 ff ff       	call   c001db95 <nanoSleep(unsigned long long)>
c00237f5:	83 c4 10             	add    esp,0x10
c00237f8:	b1 01                	mov    cl,0x1
c00237fa:	e9 6b fe ff ff       	jmp    c002366a <IDE::detect()+0x126>
c00237ff:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023805:	5b                   	pop    ebx
c0023806:	5e                   	pop    esi
c0023807:	5f                   	pop    edi
c0023808:	5d                   	pop    ebp
c0023809:	c3                   	ret    

c002380a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002380a:	55                   	push   ebp
c002380b:	57                   	push   edi
c002380c:	56                   	push   esi
c002380d:	53                   	push   ebx
c002380e:	83 ec 1c             	sub    esp,0x1c
c0023811:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023815:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023819:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002381d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023821:	88 c3                	mov    bl,al
c0023823:	84 c0                	test   al,al
c0023825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023829:	0f 84 81 00 00 00    	je     c00238b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002382f:	83 ec 0c             	sub    esp,0xc
c0023832:	68 c3 be 02 c0       	push   0xc002bec3
c0023837:	e8 88 ed fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c002383c:	83 c4 10             	add    esp,0x10
c002383f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023843:	3c 01                	cmp    al,0x1
c0023845:	74 63                	je     c00238aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023847:	3c 02                	cmp    al,0x2
c0023849:	75 53                	jne    c002389e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002384b:	d1 e6                	shl    esi,1
c002384d:	09 ee                	or     esi,ebp
c002384f:	50                   	push   eax
c0023850:	89 f0                	mov    eax,esi
c0023852:	6a 01                	push   0x1
c0023854:	0f b6 f0             	movzx  esi,al
c0023857:	c1 e6 06             	shl    esi,0x6
c002385a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023862:	50                   	push   eax
c0023863:	57                   	push   edi
c0023864:	e8 6f f6 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023869:	83 c4 10             	add    esp,0x10
c002386c:	a8 01                	test   al,0x1
c002386e:	74 02                	je     c0023872 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023870:	b3 07                	mov    bl,0x7
c0023872:	a8 02                	test   al,0x2
c0023874:	74 02                	je     c0023878 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023876:	b3 03                	mov    bl,0x3
c0023878:	a8 04                	test   al,0x4
c002387a:	74 02                	je     c002387e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c002387c:	b3 14                	mov    bl,0x14
c002387e:	a8 08                	test   al,0x8
c0023880:	74 02                	je     c0023884 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023882:	b3 03                	mov    bl,0x3
c0023884:	a8 10                	test   al,0x10
c0023886:	74 02                	je     c002388a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023888:	b3 15                	mov    bl,0x15
c002388a:	a8 20                	test   al,0x20
c002388c:	74 02                	je     c0023890 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c002388e:	b3 03                	mov    bl,0x3
c0023890:	a8 40                	test   al,0x40
c0023892:	74 02                	je     c0023896 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023894:	b3 16                	mov    bl,0x16
c0023896:	84 c0                	test   al,al
c0023898:	79 16                	jns    c00238b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002389a:	b3 0d                	mov    bl,0xd
c002389c:	eb 12                	jmp    c00238b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002389e:	3c 03                	cmp    al,0x3
c00238a0:	74 0c                	je     c00238ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00238a2:	3c 04                	cmp    al,0x4
c00238a4:	75 0a                	jne    c00238b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238a6:	b3 08                	mov    bl,0x8
c00238a8:	eb 06                	jmp    c00238b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238aa:	b3 13                	mov    bl,0x13
c00238ac:	eb 02                	jmp    c00238b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238ae:	b3 17                	mov    bl,0x17
c00238b0:	83 c4 1c             	add    esp,0x1c
c00238b3:	88 d8                	mov    al,bl
c00238b5:	5b                   	pop    ebx
c00238b6:	5e                   	pop    esi
c00238b7:	5f                   	pop    edi
c00238b8:	5d                   	pop    ebp
c00238b9:	c3                   	ret    

c00238ba <IDE::polling(unsigned char, unsigned int)>:
c00238ba:	57                   	push   edi
c00238bb:	56                   	push   esi
c00238bc:	53                   	push   ebx
c00238bd:	bb 04 00 00 00       	mov    ebx,0x4
c00238c2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00238c6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00238cb:	52                   	push   edx
c00238cc:	6a 0c                	push   0xc
c00238ce:	56                   	push   esi
c00238cf:	57                   	push   edi
c00238d0:	e8 03 f6 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00238d5:	83 c4 10             	add    esp,0x10
c00238d8:	4b                   	dec    ebx
c00238d9:	75 f0                	jne    c00238cb <IDE::polling(unsigned char, unsigned int)+0x11>
c00238db:	bb a0 86 01 00       	mov    ebx,0x186a0
c00238e0:	50                   	push   eax
c00238e1:	6a 0c                	push   0xc
c00238e3:	56                   	push   esi
c00238e4:	57                   	push   edi
c00238e5:	e8 ee f5 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00238ea:	83 c4 10             	add    esp,0x10
c00238ed:	a8 01                	test   al,0x1
c00238ef:	75 17                	jne    c0023908 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00238f1:	a8 20                	test   al,0x20
c00238f3:	75 0f                	jne    c0023904 <IDE::polling(unsigned char, unsigned int)+0x4a>
c00238f5:	4b                   	dec    ebx
c00238f6:	74 10                	je     c0023908 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00238f8:	84 c0                	test   al,al
c00238fa:	78 e4                	js     c00238e0 <IDE::polling(unsigned char, unsigned int)+0x26>
c00238fc:	a8 08                	test   al,0x8
c00238fe:	74 e0                	je     c00238e0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023900:	31 c0                	xor    eax,eax
c0023902:	eb 06                	jmp    c002390a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023904:	b0 01                	mov    al,0x1
c0023906:	eb 02                	jmp    c002390a <IDE::polling(unsigned char, unsigned int)+0x50>
c0023908:	b0 02                	mov    al,0x2
c002390a:	5b                   	pop    ebx
c002390b:	5e                   	pop    esi
c002390c:	5f                   	pop    edi
c002390d:	c3                   	ret    

c002390e <SATABus::close(int, int, void*)>:
c002390e:	31 c0                	xor    eax,eax
c0023910:	c3                   	ret    
c0023911:	90                   	nop

c0023912 <SATABus::detect()>:
c0023912:	c3                   	ret    
c0023913:	90                   	nop

c0023914 <SATABus::SATABus()>:
c0023914:	83 ec 0c             	sub    esp,0xc
c0023917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002391b:	83 ec 08             	sub    esp,0x8
c002391e:	68 fc be 02 c0       	push   0xc002befc
c0023923:	50                   	push   eax
c0023924:	e8 81 04 ff ff       	call   c0013daa <HardDiskController::HardDiskController(char const*)>
c0023929:	83 c4 10             	add    esp,0x10
c002392c:	ba 50 bf 02 c0       	mov    edx,0xc002bf50
c0023931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023935:	89 10                	mov    DWORD PTR [eax],edx
c0023937:	83 ec 0c             	sub    esp,0xc
c002393a:	6a 50                	push   0x50
c002393c:	e8 cd c0 fe ff       	call   c000fa0e <Phys::allocateContiguousPages(int)>
c0023941:	83 c4 10             	add    esp,0x10
c0023944:	89 c2                	mov    edx,eax
c0023946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002394a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023950:	83 ec 0c             	sub    esp,0xc
c0023953:	6a 50                	push   0x50
c0023955:	e8 6b d8 fe ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c002395a:	83 c4 10             	add    esp,0x10
c002395d:	89 c2                	mov    edx,eax
c002395f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023963:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023969:	a1 70 d8 02 c0       	mov    eax,ds:0xc002d870
c002396e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023972:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023978:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002397c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023982:	83 ec 0c             	sub    esp,0xc
c0023985:	6a 03                	push   0x3
c0023987:	6a 50                	push   0x50
c0023989:	51                   	push   ecx
c002398a:	52                   	push   edx
c002398b:	50                   	push   eax
c002398c:	e8 e7 e2 fe ff       	call   c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023991:	83 c4 20             	add    esp,0x20
c0023994:	90                   	nop
c0023995:	83 c4 0c             	add    esp,0xc
c0023998:	c3                   	ret    
c0023999:	90                   	nop

c002399a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002399a:	83 ec 0c             	sub    esp,0xc
c002399d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00239a1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00239a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00239a7:	09 c2                	or     edx,eax
c00239a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00239b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00239b5:	31 c0                	xor    eax,eax
c00239b7:	c1 e9 08             	shr    ecx,0x8
c00239ba:	83 e1 0f             	and    ecx,0xf
c00239bd:	39 c8                	cmp    eax,ecx
c00239bf:	74 0a                	je     c00239cb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00239c1:	f6 c2 01             	test   dl,0x1
c00239c4:	74 18                	je     c00239de <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00239c6:	d1 ea                	shr    edx,1
c00239c8:	40                   	inc    eax
c00239c9:	eb f2                	jmp    c00239bd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00239cb:	83 ec 0c             	sub    esp,0xc
c00239ce:	68 20 bf 02 c0       	push   0xc002bf20
c00239d3:	e8 57 63 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00239d8:	83 c4 10             	add    esp,0x10
c00239db:	83 c8 ff             	or     eax,0xffffffff
c00239de:	83 c4 0c             	add    esp,0xc
c00239e1:	c3                   	ret    

c00239e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00239e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00239e6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00239e9:	89 c2                	mov    edx,eax
c00239eb:	c1 ea 08             	shr    edx,0x8
c00239ee:	83 e2 0f             	and    edx,0xf
c00239f1:	fe ca                	dec    dl
c00239f3:	75 31                	jne    c0023a26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00239f5:	83 e0 0f             	and    eax,0xf
c00239f8:	3c 03                	cmp    al,0x3
c00239fa:	75 2a                	jne    c0023a26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00239fc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00239ff:	b8 02 00 00 00       	mov    eax,0x2
c0023a04:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023a0a:	74 1c                	je     c0023a28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a0c:	b8 04 00 00 00       	mov    eax,0x4
c0023a11:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023a17:	74 0f                	je     c0023a28 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a19:	31 c0                	xor    eax,eax
c0023a1b:	83 fa 03             	cmp    edx,0x3
c0023a1e:	0f 94 c0             	sete   al
c0023a21:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023a25:	c3                   	ret    
c0023a26:	31 c0                	xor    eax,eax
c0023a28:	c3                   	ret    
c0023a29:	90                   	nop

c0023a2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a2e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a31:	0f ba e2 0f          	bt     edx,0xf
c0023a35:	72 f7                	jb     c0023a2e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023a37:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a3a:	83 ca 10             	or     edx,0x10
c0023a3d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a43:	83 ca 01             	or     edx,0x1
c0023a46:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a49:	c3                   	ret    

c0023a4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a51:	83 e2 fe             	and    edx,0xfffffffe
c0023a54:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a5a:	83 e2 ef             	and    edx,0xffffffef
c0023a5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a63:	0f ba e2 0e          	bt     edx,0xe
c0023a67:	72 f7                	jb     c0023a60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a6c:	0f ba e2 0f          	bt     edx,0xf
c0023a70:	72 ee                	jb     c0023a60 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a72:	c3                   	ret    
c0023a73:	90                   	nop

c0023a74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023a74:	55                   	push   ebp
c0023a75:	57                   	push   edi
c0023a76:	56                   	push   esi
c0023a77:	53                   	push   ebx
c0023a78:	83 ec 1c             	sub    esp,0x1c
c0023a7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a87:	53                   	push   ebx
c0023a88:	89 fd                	mov    ebp,edi
c0023a8a:	56                   	push   esi
c0023a8b:	c1 e5 0a             	shl    ebp,0xa
c0023a8e:	e8 b7 ff ff ff       	call   c0023a4a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023a93:	83 ec 0c             	sub    esp,0xc
c0023a96:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023a9c:	01 e8                	add    eax,ebp
c0023a9e:	89 03                	mov    DWORD PTR [ebx],eax
c0023aa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023aa2:	68 00 04 00 00       	push   0x400
c0023aa7:	6a 00                	push   0x0
c0023aa9:	50                   	push   eax
c0023aaa:	e8 a1 cc fd ff       	call   c0000750 <memset>
c0023aaf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ab5:	89 fa                	mov    edx,edi
c0023ab7:	01 e8                	add    eax,ebp
c0023ab9:	c1 e7 0d             	shl    edi,0xd
c0023abc:	89 03                	mov    DWORD PTR [ebx],eax
c0023abe:	c1 e2 08             	shl    edx,0x8
c0023ac1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023ac8:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ace:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ad2:	89 d0                	mov    eax,edx
c0023ad4:	83 c4 1c             	add    esp,0x1c
c0023ad7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023add:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023ae0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023ae3:	68 00 01 00 00       	push   0x100
c0023ae8:	6a 00                	push   0x0
c0023aea:	50                   	push   eax
c0023aeb:	e8 60 cc fd ff       	call   c0000750 <memset>
c0023af0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023af4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023afa:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023b00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023b04:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023b07:	83 c4 10             	add    esp,0x10
c0023b0a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023b11:	31 ff                	xor    edi,edi
c0023b13:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023b19:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023b1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b23:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023b29:	83 c5 20             	add    ebp,0x20
c0023b2c:	01 f8                	add    eax,edi
c0023b2e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b31:	52                   	push   edx
c0023b32:	68 00 01 00 00       	push   0x100
c0023b37:	6a 00                	push   0x0
c0023b39:	50                   	push   eax
c0023b3a:	e8 11 cc fd ff       	call   c0000750 <memset>
c0023b3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023b43:	83 c4 10             	add    esp,0x10
c0023b46:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023b4c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023b53:	01 f8                	add    eax,edi
c0023b55:	81 c7 00 01 00 00    	add    edi,0x100
c0023b5b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b5e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023b64:	75 b3                	jne    c0023b19 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023b66:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023b6a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023b6e:	83 c4 1c             	add    esp,0x1c
c0023b71:	5b                   	pop    ebx
c0023b72:	5e                   	pop    esi
c0023b73:	5f                   	pop    edi
c0023b74:	5d                   	pop    ebp
c0023b75:	e9 b0 fe ff ff       	jmp    c0023a2a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023b7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023b7a:	55                   	push   ebp
c0023b7b:	57                   	push   edi
c0023b7c:	56                   	push   esi
c0023b7d:	53                   	push   ebx
c0023b7e:	31 db                	xor    ebx,ebx
c0023b80:	83 ec 0c             	sub    esp,0xc
c0023b83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023b87:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023b8b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023b8e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023b94:	74 7a                	je     c0023c10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023b96:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023b9a:	89 d8                	mov    eax,ebx
c0023b9c:	c1 e0 07             	shl    eax,0x7
c0023b9f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023ba6:	55                   	push   ebp
c0023ba7:	56                   	push   esi
c0023ba8:	e8 35 fe ff ff       	call   c00239e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023bad:	5a                   	pop    edx
c0023bae:	83 f8 01             	cmp    eax,0x1
c0023bb1:	59                   	pop    ecx
c0023bb2:	75 21                	jne    c0023bd5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023bb4:	50                   	push   eax
c0023bb5:	53                   	push   ebx
c0023bb6:	55                   	push   ebp
c0023bb7:	56                   	push   esi
c0023bb8:	e8 b7 fe ff ff       	call   c0023a74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023bbd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023bc4:	e8 d3 b9 fe ff       	call   c000f59c <malloc>
c0023bc9:	89 c5                	mov    ebp,eax
c0023bcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0023bce:	e8 03 0d 00 00       	call   c00248d6 <SATA::SATA()>
c0023bd3:	eb 24                	jmp    c0023bf9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023bd5:	83 f8 04             	cmp    eax,0x4
c0023bd8:	75 36                	jne    c0023c10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023bda:	51                   	push   ecx
c0023bdb:	53                   	push   ebx
c0023bdc:	55                   	push   ebp
c0023bdd:	56                   	push   esi
c0023bde:	e8 91 fe ff ff       	call   c0023a74 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023be3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023bea:	e8 ad b9 fe ff       	call   c000f59c <malloc>
c0023bef:	89 c5                	mov    ebp,eax
c0023bf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023bf4:	e8 53 10 00 00       	call   c0024c4c <SATAPI::SATAPI()>
c0023bf9:	58                   	pop    eax
c0023bfa:	5a                   	pop    edx
c0023bfb:	55                   	push   ebp
c0023bfc:	56                   	push   esi
c0023bfd:	e8 fa fd fe ff       	call   c00139fc <Device::addChild(Device*)>
c0023c02:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023c05:	56                   	push   esi
c0023c06:	6a 00                	push   0x0
c0023c08:	53                   	push   ebx
c0023c09:	55                   	push   ebp
c0023c0a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023c0d:	83 c4 20             	add    esp,0x20
c0023c10:	d1 ef                	shr    edi,1
c0023c12:	43                   	inc    ebx
c0023c13:	83 fb 20             	cmp    ebx,0x20
c0023c16:	0f 85 72 ff ff ff    	jne    c0023b8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023c1c:	83 c4 0c             	add    esp,0xc
c0023c1f:	5b                   	pop    ebx
c0023c20:	5e                   	pop    esi
c0023c21:	5f                   	pop    edi
c0023c22:	5d                   	pop    ebp
c0023c23:	c3                   	ret    

c0023c24 <SATABus::open(int, int, void*)>:
c0023c24:	83 ec 14             	sub    esp,0x14
c0023c27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c2b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023c31:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023c37:	52                   	push   edx
c0023c38:	50                   	push   eax
c0023c39:	e8 3c ff ff ff       	call   c0023b7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023c3e:	31 c0                	xor    eax,eax
c0023c40:	83 c4 1c             	add    esp,0x1c
c0023c43:	c3                   	ret    

c0023c44 <ATA::close(int, int, void*)>:
c0023c44:	83 ec 0c             	sub    esp,0xc
c0023c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c51:	85 c0                	test   eax,eax
c0023c53:	74 0c                	je     c0023c61 <ATA::close(int, int, void*)+0x1d>
c0023c55:	83 ec 0c             	sub    esp,0xc
c0023c58:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c5a:	50                   	push   eax
c0023c5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c5e:	83 c4 10             	add    esp,0x10
c0023c61:	31 c0                	xor    eax,eax
c0023c63:	83 c4 0c             	add    esp,0xc
c0023c66:	c3                   	ret    
c0023c67:	90                   	nop

c0023c68 <ATA::powerSaving(PowerSavingLevel)>:
c0023c68:	c3                   	ret    
c0023c69:	90                   	nop

c0023c6a <ATA::ATA()>:
c0023c6a:	83 ec 0c             	sub    esp,0xc
c0023c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c71:	83 ec 04             	sub    esp,0x4
c0023c74:	68 00 02 00 00       	push   0x200
c0023c79:	68 19 c0 02 c0       	push   0xc002c019
c0023c7e:	50                   	push   eax
c0023c7f:	e8 ae 01 ff ff       	call   c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c84:	83 c4 10             	add    esp,0x10
c0023c87:	ba 9c bf 02 c0       	mov    edx,0xc002bf9c
c0023c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c90:	89 10                	mov    DWORD PTR [eax],edx
c0023c92:	90                   	nop
c0023c93:	83 c4 0c             	add    esp,0xc
c0023c96:	c3                   	ret    
c0023c97:	90                   	nop

c0023c98 <ATA::flush(bool)>:
c0023c98:	53                   	push   ebx
c0023c99:	83 ec 08             	sub    esp,0x8
c0023c9c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023ca1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ca5:	19 c0                	sbb    eax,eax
c0023ca7:	83 e0 fd             	and    eax,0xfffffffd
c0023caa:	05 ea 00 00 00       	add    eax,0xea
c0023caf:	50                   	push   eax
c0023cb0:	6a 07                	push   0x7
c0023cb2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cb9:	50                   	push   eax
c0023cba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cc0:	e8 53 f1 ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cc5:	83 c4 0c             	add    esp,0xc
c0023cc8:	6a 00                	push   0x0
c0023cca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cd1:	50                   	push   eax
c0023cd2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cd8:	e8 dd fb ff ff       	call   c00238ba <IDE::polling(unsigned char, unsigned int)>
c0023cdd:	83 c4 18             	add    esp,0x18
c0023ce0:	5b                   	pop    ebx
c0023ce1:	c3                   	ret    

c0023ce2 <ATA::readyForCommand()>:
c0023ce2:	56                   	push   esi
c0023ce3:	53                   	push   ebx
c0023ce4:	31 db                	xor    ebx,ebx
c0023ce6:	50                   	push   eax
c0023ce7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ceb:	50                   	push   eax
c0023cec:	6a 0c                	push   0xc
c0023cee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023cf5:	50                   	push   eax
c0023cf6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023cfc:	e8 d7 f1 ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c0023d01:	83 c4 10             	add    esp,0x10
c0023d04:	a8 88                	test   al,0x88
c0023d06:	74 23                	je     c0023d2b <ATA::readyForCommand()+0x49>
c0023d08:	43                   	inc    ebx
c0023d09:	83 fb 63             	cmp    ebx,0x63
c0023d0c:	7e dd                	jle    c0023ceb <ATA::readyForCommand()+0x9>
c0023d0e:	51                   	push   ecx
c0023d0f:	51                   	push   ecx
c0023d10:	6a 00                	push   0x0
c0023d12:	68 40 42 0f 00       	push   0xf4240
c0023d17:	e8 79 9e ff ff       	call   c001db95 <nanoSleep(unsigned long long)>
c0023d1c:	83 c4 10             	add    esp,0x10
c0023d1f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023d25:	75 c4                	jne    c0023ceb <ATA::readyForCommand()+0x9>
c0023d27:	31 c0                	xor    eax,eax
c0023d29:	eb 02                	jmp    c0023d2d <ATA::readyForCommand()+0x4b>
c0023d2b:	b0 01                	mov    al,0x1
c0023d2d:	5a                   	pop    edx
c0023d2e:	5b                   	pop    ebx
c0023d2f:	5e                   	pop    esi
c0023d30:	c3                   	ret    
c0023d31:	90                   	nop

c0023d32 <ATA::access(unsigned long long, int, void*, bool)>:
c0023d32:	55                   	push   ebp
c0023d33:	57                   	push   edi
c0023d34:	56                   	push   esi
c0023d35:	53                   	push   ebx
c0023d36:	83 ec 2c             	sub    esp,0x2c
c0023d39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023d3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023d41:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023d45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d49:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023d4d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023d51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023d55:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023d5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023d5f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023d65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d69:	c1 e0 06             	shl    eax,0x6
c0023d6c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023d74:	74 5d                	je     c0023dd3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023d76:	89 fa                	mov    edx,edi
c0023d78:	89 f0                	mov    eax,esi
c0023d7a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023d7e:	c1 ea 1c             	shr    edx,0x1c
c0023d81:	89 d1                	mov    ecx,edx
c0023d83:	09 c1                	or     ecx,eax
c0023d85:	74 25                	je     c0023dac <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023d87:	31 ed                	xor    ebp,ebp
c0023d89:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023d90:	89 fa                	mov    edx,edi
c0023d92:	89 f0                	mov    eax,esi
c0023d94:	0f ad d0             	shrd   eax,edx,cl
c0023d97:	d3 ea                	shr    edx,cl
c0023d99:	f6 c1 20             	test   cl,0x20
c0023d9c:	74 02                	je     c0023da0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023d9e:	89 d0                	mov    eax,edx
c0023da0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023da4:	45                   	inc    ebp
c0023da5:	83 fd 06             	cmp    ebp,0x6
c0023da8:	75 df                	jne    c0023d89 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023daa:	eb 76                	jmp    c0023e22 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023dac:	89 f0                	mov    eax,esi
c0023dae:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023db3:	89 fa                	mov    edx,edi
c0023db5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023dbc:	0f ac d0 10          	shrd   eax,edx,0x10
c0023dc0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023dc5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023dc9:	c1 ee 18             	shr    esi,0x18
c0023dcc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023dd1:	eb 56                	jmp    c0023e29 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023dd3:	6a 00                	push   0x0
c0023dd5:	6a 3f                	push   0x3f
c0023dd7:	57                   	push   edi
c0023dd8:	56                   	push   esi
c0023dd9:	e8 26 29 00 00       	call   c0026704 <__umoddi3>
c0023dde:	83 c4 10             	add    esp,0x10
c0023de1:	40                   	inc    eax
c0023de2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023de6:	6a 00                	push   0x0
c0023de8:	68 f0 03 00 00       	push   0x3f0
c0023ded:	57                   	push   edi
c0023dee:	56                   	push   esi
c0023def:	e8 10 28 00 00       	call   c0026604 <__udivdi3>
c0023df4:	83 c4 10             	add    esp,0x10
c0023df7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023dfc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023e03:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023e08:	6a 00                	push   0x0
c0023e0a:	6a 3f                	push   0x3f
c0023e0c:	57                   	push   edi
c0023e0d:	56                   	push   esi
c0023e0e:	e8 f1 27 00 00       	call   c0026604 <__udivdi3>
c0023e13:	83 c4 10             	add    esp,0x10
c0023e16:	89 c6                	mov    esi,eax
c0023e18:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023e1d:	83 e6 0f             	and    esi,0xf
c0023e20:	eb 07                	jmp    c0023e29 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023e22:	31 f6                	xor    esi,esi
c0023e24:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023e29:	bf 01 00 00 00       	mov    edi,0x1
c0023e2e:	50                   	push   eax
c0023e2f:	6a 00                	push   0x0
c0023e31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e38:	50                   	push   eax
c0023e39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023e3d:	e8 e2 f1 ff ff       	call   c0023024 <IDE::enableIRQs(unsigned char, bool)>
c0023e42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e45:	e8 98 fe ff ff       	call   c0023ce2 <ATA::readyForCommand()>
c0023e4a:	83 c4 10             	add    esp,0x10
c0023e4d:	84 c0                	test   al,al
c0023e4f:	0f 84 5a 02 00 00    	je     c00240af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023e55:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023e5b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e61:	c1 e0 04             	shl    eax,0x4
c0023e64:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023e6b:	09 c6                	or     esi,eax
c0023e6d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023e72:	75 05                	jne    c0023e79 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023e74:	83 ce a0             	or     esi,0xffffffa0
c0023e77:	eb 03                	jmp    c0023e7c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023e79:	83 ce e0             	or     esi,0xffffffe0
c0023e7c:	89 f0                	mov    eax,esi
c0023e7e:	0f b6 f0             	movzx  esi,al
c0023e81:	56                   	push   esi
c0023e82:	6a 06                	push   0x6
c0023e84:	51                   	push   ecx
c0023e85:	52                   	push   edx
c0023e86:	e8 8d ef ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e8b:	83 c4 10             	add    esp,0x10
c0023e8e:	6a 00                	push   0x0
c0023e90:	6a 01                	push   0x1
c0023e92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e99:	50                   	push   eax
c0023e9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ea0:	e8 73 ef ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ea5:	83 c4 10             	add    esp,0x10
c0023ea8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ead:	75 6e                	jne    c0023f1d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023eaf:	6a 00                	push   0x0
c0023eb1:	6a 08                	push   0x8
c0023eb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023eba:	50                   	push   eax
c0023ebb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ec1:	e8 52 ef ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ec6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023ecb:	50                   	push   eax
c0023ecc:	6a 09                	push   0x9
c0023ece:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ed5:	50                   	push   eax
c0023ed6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023edc:	e8 37 ef ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ee1:	83 c4 20             	add    esp,0x20
c0023ee4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023ee9:	50                   	push   eax
c0023eea:	6a 0a                	push   0xa
c0023eec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ef3:	50                   	push   eax
c0023ef4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023efa:	e8 19 ef ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eff:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023f04:	50                   	push   eax
c0023f05:	6a 0b                	push   0xb
c0023f07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f0e:	50                   	push   eax
c0023f0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f15:	e8 fe ee ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f1a:	83 c4 20             	add    esp,0x20
c0023f1d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023f22:	50                   	push   eax
c0023f23:	6a 02                	push   0x2
c0023f25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f2c:	50                   	push   eax
c0023f2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f33:	e8 e0 ee ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f38:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023f3d:	50                   	push   eax
c0023f3e:	6a 03                	push   0x3
c0023f40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f47:	50                   	push   eax
c0023f48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f4e:	e8 c5 ee ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f53:	83 c4 20             	add    esp,0x20
c0023f56:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023f5b:	50                   	push   eax
c0023f5c:	6a 04                	push   0x4
c0023f5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f65:	50                   	push   eax
c0023f66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f6c:	e8 a7 ee ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023f76:	50                   	push   eax
c0023f77:	6a 05                	push   0x5
c0023f79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f80:	50                   	push   eax
c0023f81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f87:	e8 8c ee ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f8c:	83 c4 20             	add    esp,0x20
c0023f8f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f94:	0f 94 c0             	sete   al
c0023f97:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023f9c:	74 09                	je     c0023fa7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023f9e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023fa5:	eb 07                	jmp    c0023fae <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023fa7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023fae:	0f b6 c0             	movzx  eax,al
c0023fb1:	50                   	push   eax
c0023fb2:	6a 07                	push   0x7
c0023fb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fbb:	50                   	push   eax
c0023fbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc2:	e8 51 ee ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023fcb:	83 c4 10             	add    esp,0x10
c0023fce:	85 f6                	test   esi,esi
c0023fd0:	0f 84 ba 00 00 00    	je     c0024090 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023fd6:	50                   	push   eax
c0023fd7:	6a 01                	push   0x1
c0023fd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe0:	50                   	push   eax
c0023fe1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe7:	e8 ce f8 ff ff       	call   c00238ba <IDE::polling(unsigned char, unsigned int)>
c0023fec:	83 c4 10             	add    esp,0x10
c0023fef:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023ff5:	84 c0                	test   al,al
c0023ff7:	74 2c                	je     c0024025 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023ff9:	0f b6 f8             	movzx  edi,al
c0023ffc:	0f b6 d2             	movzx  edx,dl
c0023fff:	57                   	push   edi
c0024000:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024007:	50                   	push   eax
c0024008:	52                   	push   edx
c0024009:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002400f:	e8 f6 f7 ff ff       	call   c002380a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024014:	c7 04 24 74 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf74
c002401b:	e8 a4 e5 fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0024020:	e9 87 00 00 00       	jmp    c00240ac <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024025:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002402a:	74 33                	je     c002405f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002402c:	31 ed                	xor    ebp,ebp
c002402e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024032:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024036:	50                   	push   eax
c0024037:	50                   	push   eax
c0024038:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002403f:	50                   	push   eax
c0024040:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024046:	e8 bb ed ff ff       	call   c0022e06 <IDE::getBase(unsigned char)>
c002404b:	89 c2                	mov    edx,eax
c002404d:	89 f8                	mov    eax,edi
c002404f:	66 ef                	out    dx,ax
c0024051:	45                   	inc    ebp
c0024052:	83 c4 10             	add    esp,0x10
c0024055:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002405b:	75 d1                	jne    c002402e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002405d:	eb 23                	jmp    c0024082 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002405f:	0f b6 d2             	movzx  edx,dl
c0024062:	51                   	push   ecx
c0024063:	51                   	push   ecx
c0024064:	52                   	push   edx
c0024065:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002406b:	e8 96 ed ff ff       	call   c0022e06 <IDE::getBase(unsigned char)>
c0024070:	b9 00 01 00 00       	mov    ecx,0x100
c0024075:	89 c2                	mov    edx,eax
c0024077:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002407b:	fc                   	cld    
c002407c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002407f:	83 c4 10             	add    esp,0x10
c0024082:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002408a:	4e                   	dec    esi
c002408b:	e9 3e ff ff ff       	jmp    c0023fce <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024090:	31 ff                	xor    edi,edi
c0024092:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024097:	74 16                	je     c00240af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024099:	50                   	push   eax
c002409a:	50                   	push   eax
c002409b:	31 c0                	xor    eax,eax
c002409d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00240a2:	0f 94 c0             	sete   al
c00240a5:	50                   	push   eax
c00240a6:	53                   	push   ebx
c00240a7:	e8 ec fb ff ff       	call   c0023c98 <ATA::flush(bool)>
c00240ac:	83 c4 10             	add    esp,0x10
c00240af:	83 c4 2c             	add    esp,0x2c
c00240b2:	89 f8                	mov    eax,edi
c00240b4:	5b                   	pop    ebx
c00240b5:	5e                   	pop    esi
c00240b6:	5f                   	pop    edi
c00240b7:	5d                   	pop    ebp
c00240b8:	c3                   	ret    
c00240b9:	90                   	nop

c00240ba <ATA::read(unsigned long long, int, void*)>:
c00240ba:	57                   	push   edi
c00240bb:	b8 04 00 00 00       	mov    eax,0x4
c00240c0:	56                   	push   esi
c00240c1:	53                   	push   ebx
c00240c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00240ca:	8d 7a ff             	lea    edi,[edx-0x1]
c00240cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00240d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00240d5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00240db:	77 25                	ja     c0024102 <ATA::read(unsigned long long, int, void*)+0x48>
c00240dd:	b8 06 00 00 00       	mov    eax,0x6
c00240e2:	85 f6                	test   esi,esi
c00240e4:	74 1c                	je     c0024102 <ATA::read(unsigned long long, int, void*)+0x48>
c00240e6:	50                   	push   eax
c00240e7:	50                   	push   eax
c00240e8:	6a 00                	push   0x0
c00240ea:	56                   	push   esi
c00240eb:	52                   	push   edx
c00240ec:	53                   	push   ebx
c00240ed:	51                   	push   ecx
c00240ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00240f2:	e8 3b fc ff ff       	call   c0023d32 <ATA::access(unsigned long long, int, void*, bool)>
c00240f7:	83 c4 20             	add    esp,0x20
c00240fa:	85 c0                	test   eax,eax
c00240fc:	0f 95 c0             	setne  al
c00240ff:	0f b6 c0             	movzx  eax,al
c0024102:	5b                   	pop    ebx
c0024103:	5e                   	pop    esi
c0024104:	5f                   	pop    edi
c0024105:	c3                   	ret    

c0024106 <ATA::write(unsigned long long, int, void*)>:
c0024106:	57                   	push   edi
c0024107:	b8 04 00 00 00       	mov    eax,0x4
c002410c:	56                   	push   esi
c002410d:	53                   	push   ebx
c002410e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024112:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024116:	8d 7a ff             	lea    edi,[edx-0x1]
c0024119:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002411d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024121:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024127:	77 25                	ja     c002414e <ATA::write(unsigned long long, int, void*)+0x48>
c0024129:	b8 06 00 00 00       	mov    eax,0x6
c002412e:	85 f6                	test   esi,esi
c0024130:	74 1c                	je     c002414e <ATA::write(unsigned long long, int, void*)+0x48>
c0024132:	50                   	push   eax
c0024133:	50                   	push   eax
c0024134:	6a 01                	push   0x1
c0024136:	56                   	push   esi
c0024137:	52                   	push   edx
c0024138:	53                   	push   ebx
c0024139:	51                   	push   ecx
c002413a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002413e:	e8 ef fb ff ff       	call   c0023d32 <ATA::access(unsigned long long, int, void*, bool)>
c0024143:	83 c4 20             	add    esp,0x20
c0024146:	85 c0                	test   eax,eax
c0024148:	0f 95 c0             	setne  al
c002414b:	0f b6 c0             	movzx  eax,al
c002414e:	5b                   	pop    ebx
c002414f:	5e                   	pop    esi
c0024150:	5f                   	pop    edi
c0024151:	c3                   	ret    

c0024152 <ATA::detectCHS()>:
c0024152:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024156:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002415c:	c1 e0 06             	shl    eax,0x6
c002415f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024165:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002416f:	c7 44 24 04 7f bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bf7f
c0024177:	e9 b3 5b ff ff       	jmp    c0019d2f <Krnl::panic(char const*)>

c002417c <ATA::open(int, int, void*)>:
c002417c:	53                   	push   ebx
c002417d:	83 ec 08             	sub    esp,0x8
c0024180:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024184:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024188:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002418c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024192:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024198:	c1 e0 06             	shl    eax,0x6
c002419b:	01 d0                	add    eax,edx
c002419d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00241a4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00241aa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00241b1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00241bb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00241c1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00241c8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00241cf:	75 0c                	jne    c00241dd <ATA::open(int, int, void*)+0x61>
c00241d1:	83 ec 0c             	sub    esp,0xc
c00241d4:	53                   	push   ebx
c00241d5:	e8 78 ff ff ff       	call   c0024152 <ATA::detectCHS()>
c00241da:	83 c4 10             	add    esp,0x10
c00241dd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241e9:	c1 e0 06             	shl    eax,0x6
c00241ec:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00241f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00241fd:	d1 e8                	shr    eax,1
c00241ff:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024205:	6a 04                	push   0x4
c0024207:	6a 0c                	push   0xc
c0024209:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024210:	50                   	push   eax
c0024211:	52                   	push   edx
c0024212:	e8 01 ec ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024217:	90                   	nop
c0024218:	90                   	nop
c0024219:	6a 00                	push   0x0
c002421b:	6a 0c                	push   0xc
c002421d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024224:	50                   	push   eax
c0024225:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002422b:	e8 e8 eb ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024230:	83 c4 14             	add    esp,0x14
c0024233:	53                   	push   ebx
c0024234:	e8 61 fc fe ff       	call   c0013e9a <PhysicalDisk::startCache()>
c0024239:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002423c:	e8 db 1e ff ff       	call   c001611c <createPartitionsForDisk(PhysicalDisk*)>
c0024241:	31 c0                	xor    eax,eax
c0024243:	83 c4 18             	add    esp,0x18
c0024246:	5b                   	pop    ebx
c0024247:	c3                   	ret    

c0024248 <ATAPI::write(unsigned long long, int, void*)>:
c0024248:	b8 03 00 00 00       	mov    eax,0x3
c002424d:	c3                   	ret    

c002424e <ATAPI::close(int, int, void*)>:
c002424e:	83 ec 0c             	sub    esp,0xc
c0024251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024255:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002425b:	85 c0                	test   eax,eax
c002425d:	74 0c                	je     c002426b <ATAPI::close(int, int, void*)+0x1d>
c002425f:	83 ec 0c             	sub    esp,0xc
c0024262:	8b 10                	mov    edx,DWORD PTR [eax]
c0024264:	50                   	push   eax
c0024265:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024268:	83 c4 10             	add    esp,0x10
c002426b:	31 c0                	xor    eax,eax
c002426d:	83 c4 0c             	add    esp,0xc
c0024270:	c3                   	ret    
c0024271:	90                   	nop

c0024272 <ATAPI::ATAPI()>:
c0024272:	83 ec 0c             	sub    esp,0xc
c0024275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024279:	83 ec 04             	sub    esp,0x4
c002427c:	68 00 08 00 00       	push   0x800
c0024281:	68 b9 c0 02 c0       	push   0xc002c0b9
c0024286:	50                   	push   eax
c0024287:	e8 a6 fb fe ff       	call   c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002428c:	83 c4 10             	add    esp,0x10
c002428f:	ba d4 bf 02 c0       	mov    edx,0xc002bfd4
c0024294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024298:	89 10                	mov    DWORD PTR [eax],edx
c002429a:	90                   	nop
c002429b:	83 c4 0c             	add    esp,0xc
c002429e:	c3                   	ret    
c002429f:	90                   	nop

c00242a0 <ATAPI::readyForCommand()>:
c00242a0:	56                   	push   esi
c00242a1:	53                   	push   ebx
c00242a2:	31 db                	xor    ebx,ebx
c00242a4:	50                   	push   eax
c00242a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00242a9:	50                   	push   eax
c00242aa:	6a 0c                	push   0xc
c00242ac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00242b3:	50                   	push   eax
c00242b4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00242ba:	e8 19 ec ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00242bf:	83 c4 10             	add    esp,0x10
c00242c2:	a8 88                	test   al,0x88
c00242c4:	74 23                	je     c00242e9 <ATAPI::readyForCommand()+0x49>
c00242c6:	43                   	inc    ebx
c00242c7:	83 fb 63             	cmp    ebx,0x63
c00242ca:	7e dd                	jle    c00242a9 <ATAPI::readyForCommand()+0x9>
c00242cc:	51                   	push   ecx
c00242cd:	51                   	push   ecx
c00242ce:	6a 00                	push   0x0
c00242d0:	68 40 42 0f 00       	push   0xf4240
c00242d5:	e8 bb 98 ff ff       	call   c001db95 <nanoSleep(unsigned long long)>
c00242da:	83 c4 10             	add    esp,0x10
c00242dd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00242e3:	75 c4                	jne    c00242a9 <ATAPI::readyForCommand()+0x9>
c00242e5:	31 c0                	xor    eax,eax
c00242e7:	eb 02                	jmp    c00242eb <ATAPI::readyForCommand()+0x4b>
c00242e9:	b0 01                	mov    al,0x1
c00242eb:	5a                   	pop    edx
c00242ec:	5b                   	pop    ebx
c00242ed:	5e                   	pop    esi
c00242ee:	c3                   	ret    
c00242ef:	90                   	nop

c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00242f0:	55                   	push   ebp
c00242f1:	57                   	push   edi
c00242f2:	56                   	push   esi
c00242f3:	53                   	push   ebx
c00242f4:	83 ec 20             	sub    esp,0x20
c00242f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00242fb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00242ff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024303:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024307:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002430b:	6a 01                	push   0x1
c002430d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024314:	50                   	push   eax
c0024315:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002431b:	e8 04 ed ff ff       	call   c0023024 <IDE::enableIRQs(unsigned char, bool)>
c0024320:	5e                   	pop    esi
c0024321:	58                   	pop    eax
c0024322:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024329:	50                   	push   eax
c002432a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024330:	e8 bd ea ff ff       	call   c0022df2 <IDE::prepareInterrupt(unsigned char)>
c0024335:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024338:	e8 63 ff ff ff       	call   c00242a0 <ATAPI::readyForCommand()>
c002433d:	83 c4 10             	add    esp,0x10
c0024340:	84 c0                	test   al,al
c0024342:	75 0a                	jne    c002434e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024344:	bb 01 00 00 00       	mov    ebx,0x1
c0024349:	e9 57 02 00 00       	jmp    c00245a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002434e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024354:	c1 e0 04             	shl    eax,0x4
c0024357:	0f b6 c0             	movzx  eax,al
c002435a:	50                   	push   eax
c002435b:	6a 06                	push   0x6
c002435d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024364:	50                   	push   eax
c0024365:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002436b:	e8 a8 ea ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024370:	6a 00                	push   0x0
c0024372:	6a 01                	push   0x1
c0024374:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002437b:	50                   	push   eax
c002437c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024382:	e8 91 ea ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024387:	83 c4 20             	add    esp,0x20
c002438a:	0f b6 c3             	movzx  eax,bl
c002438d:	0f b6 df             	movzx  ebx,bh
c0024390:	50                   	push   eax
c0024391:	6a 04                	push   0x4
c0024393:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002439a:	50                   	push   eax
c002439b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243a1:	e8 72 ea ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243a6:	53                   	push   ebx
c00243a7:	6a 05                	push   0x5
c00243a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243b0:	50                   	push   eax
c00243b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243b7:	e8 5c ea ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243bc:	83 c4 20             	add    esp,0x20
c00243bf:	68 a0 00 00 00       	push   0xa0
c00243c4:	6a 07                	push   0x7
c00243c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243cd:	50                   	push   eax
c00243ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243d4:	e8 3f ea ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d9:	83 c4 0c             	add    esp,0xc
c00243dc:	6a 01                	push   0x1
c00243de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243e5:	50                   	push   eax
c00243e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243ec:	e8 c9 f4 ff ff       	call   c00238ba <IDE::polling(unsigned char, unsigned int)>
c00243f1:	83 c4 10             	add    esp,0x10
c00243f4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00243fa:	84 c0                	test   al,al
c00243fc:	74 23                	je     c0024421 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00243fe:	0f b6 d8             	movzx  ebx,al
c0024401:	0f b6 d2             	movzx  edx,dl
c0024404:	53                   	push   ebx
c0024405:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002440c:	50                   	push   eax
c002440d:	52                   	push   edx
c002440e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024414:	e8 f1 f3 ff ff       	call   c002380a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024419:	83 c4 10             	add    esp,0x10
c002441c:	e9 84 01 00 00       	jmp    c00245a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024421:	0f b6 d2             	movzx  edx,dl
c0024424:	53                   	push   ebx
c0024425:	53                   	push   ebx
c0024426:	52                   	push   edx
c0024427:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002442d:	e8 d4 e9 ff ff       	call   c0022e06 <IDE::getBase(unsigned char)>
c0024432:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024436:	b9 06 00 00 00       	mov    ecx,0x6
c002443b:	89 c2                	mov    edx,eax
c002443d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024440:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024444:	83 c4 10             	add    esp,0x10
c0024447:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002444d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024454:	85 db                	test   ebx,ebx
c0024456:	0f 84 ec 00 00 00    	je     c0024548 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002445c:	51                   	push   ecx
c002445d:	51                   	push   ecx
c002445e:	52                   	push   edx
c002445f:	50                   	push   eax
c0024460:	e8 21 eb ff ff       	call   c0022f86 <IDE::waitInterrupt(unsigned char)>
c0024465:	83 c4 10             	add    esp,0x10
c0024468:	84 c0                	test   al,al
c002446a:	0f 84 d4 fe ff ff    	je     c0024344 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024470:	56                   	push   esi
c0024471:	56                   	push   esi
c0024472:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024479:	50                   	push   eax
c002447a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024480:	e8 6d e9 ff ff       	call   c0022df2 <IDE::prepareInterrupt(unsigned char)>
c0024485:	83 c4 0c             	add    esp,0xc
c0024488:	6a 04                	push   0x4
c002448a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024491:	50                   	push   eax
c0024492:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024498:	e8 3b ea ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c002449d:	83 c4 0c             	add    esp,0xc
c00244a0:	89 c6                	mov    esi,eax
c00244a2:	6a 05                	push   0x5
c00244a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ab:	50                   	push   eax
c00244ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b2:	e8 21 ea ff ff       	call   c0022ed8 <IDE::read(unsigned char, unsigned char)>
c00244b7:	89 f1                	mov    ecx,esi
c00244b9:	0f b6 c0             	movzx  eax,al
c00244bc:	0f b6 f1             	movzx  esi,cl
c00244bf:	c1 e0 08             	shl    eax,0x8
c00244c2:	09 c6                	or     esi,eax
c00244c4:	d1 fe                	sar    esi,1
c00244c6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00244ca:	83 c4 10             	add    esp,0x10
c00244cd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00244d2:	74 41                	je     c0024515 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00244d4:	31 c9                	xor    ecx,ecx
c00244d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244dc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244e3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00244e7:	75 0a                	jne    c00244f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00244e9:	01 c9                	add    ecx,ecx
c00244eb:	01 cd                	add    ebp,ecx
c00244ed:	4b                   	dec    ebx
c00244ee:	e9 54 ff ff ff       	jmp    c0024447 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00244f3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00244f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00244fc:	51                   	push   ecx
c00244fd:	51                   	push   ecx
c00244fe:	52                   	push   edx
c00244ff:	50                   	push   eax
c0024500:	e8 01 e9 ff ff       	call   c0022e06 <IDE::getBase(unsigned char)>
c0024505:	89 c2                	mov    edx,eax
c0024507:	89 f0                	mov    eax,esi
c0024509:	66 ef                	out    dx,ax
c002450b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002450f:	83 c4 10             	add    esp,0x10
c0024512:	41                   	inc    ecx
c0024513:	eb c1                	jmp    c00244d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024515:	31 f6                	xor    esi,esi
c0024517:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002451d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024524:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024528:	75 06                	jne    c0024530 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002452a:	01 f6                	add    esi,esi
c002452c:	01 f5                	add    ebp,esi
c002452e:	eb bd                	jmp    c00244ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024530:	51                   	push   ecx
c0024531:	51                   	push   ecx
c0024532:	52                   	push   edx
c0024533:	50                   	push   eax
c0024534:	e8 cd e8 ff ff       	call   c0022e06 <IDE::getBase(unsigned char)>
c0024539:	89 c2                	mov    edx,eax
c002453b:	66 ed                	in     ax,dx
c002453d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024542:	83 c4 10             	add    esp,0x10
c0024545:	46                   	inc    esi
c0024546:	eb cf                	jmp    c0024517 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024548:	51                   	push   ecx
c0024549:	51                   	push   ecx
c002454a:	52                   	push   edx
c002454b:	50                   	push   eax
c002454c:	e8 35 ea ff ff       	call   c0022f86 <IDE::waitInterrupt(unsigned char)>
c0024551:	83 c4 10             	add    esp,0x10
c0024554:	84 c0                	test   al,al
c0024556:	0f 84 e8 fd ff ff    	je     c0024344 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002455c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024561:	52                   	push   edx
c0024562:	52                   	push   edx
c0024563:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002456a:	50                   	push   eax
c002456b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024571:	e8 7c e8 ff ff       	call   c0022df2 <IDE::prepareInterrupt(unsigned char)>
c0024576:	83 c4 10             	add    esp,0x10
c0024579:	50                   	push   eax
c002457a:	50                   	push   eax
c002457b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024582:	50                   	push   eax
c0024583:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024589:	e8 78 e8 ff ff       	call   c0022e06 <IDE::getBase(unsigned char)>
c002458e:	8d 50 07             	lea    edx,[eax+0x7]
c0024591:	ec                   	in     al,dx
c0024592:	83 c4 10             	add    esp,0x10
c0024595:	a8 88                	test   al,0x88
c0024597:	74 0a                	je     c00245a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024599:	4b                   	dec    ebx
c002459a:	75 dd                	jne    c0024579 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002459c:	bb 02 00 00 00       	mov    ebx,0x2
c00245a1:	eb 02                	jmp    c00245a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245a3:	31 db                	xor    ebx,ebx
c00245a5:	83 c4 1c             	add    esp,0x1c
c00245a8:	89 d8                	mov    eax,ebx
c00245aa:	5b                   	pop    ebx
c00245ab:	5e                   	pop    esi
c00245ac:	5f                   	pop    edi
c00245ad:	5d                   	pop    ebp
c00245ae:	c3                   	ret    
c00245af:	90                   	nop

c00245b0 <ATAPI::diskRemoved()>:
c00245b0:	83 ec 18             	sub    esp,0x18
c00245b3:	68 c5 c0 02 c0       	push   0xc002c0c5
c00245b8:	e8 07 e0 fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00245bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245c1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00245c8:	83 c4 1c             	add    esp,0x1c
c00245cb:	c3                   	ret    

c00245cc <ATAPI::eject()>:
c00245cc:	57                   	push   edi
c00245cd:	b9 03 00 00 00       	mov    ecx,0x3
c00245d2:	53                   	push   ebx
c00245d3:	83 ec 14             	sub    esp,0x14
c00245d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00245da:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00245de:	fc                   	cld    
c00245df:	31 c0                	xor    eax,eax
c00245e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00245e3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00245e8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00245ed:	50                   	push   eax
c00245ee:	50                   	push   eax
c00245ef:	6a 00                	push   0x0
c00245f1:	6a 00                	push   0x0
c00245f3:	6a 00                	push   0x0
c00245f5:	6a 02                	push   0x2
c00245f7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00245fb:	50                   	push   eax
c00245fc:	53                   	push   ebx
c00245fd:	e8 ee fc ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024602:	83 c4 14             	add    esp,0x14
c0024605:	53                   	push   ebx
c0024606:	e8 a5 ff ff ff       	call   c00245b0 <ATAPI::diskRemoved()>
c002460b:	83 c4 24             	add    esp,0x24
c002460e:	31 c0                	xor    eax,eax
c0024610:	5b                   	pop    ebx
c0024611:	5f                   	pop    edi
c0024612:	c3                   	ret    
c0024613:	90                   	nop

c0024614 <ATAPI::diskInserted()>:
c0024614:	53                   	push   ebx
c0024615:	83 ec 14             	sub    esp,0x14
c0024618:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002461c:	68 dc c0 02 c0       	push   0xc002c0dc
c0024621:	e8 9e df fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0024626:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002462d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024630:	e8 65 f8 fe ff       	call   c0013e9a <PhysicalDisk::startCache()>
c0024635:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024639:	83 c4 18             	add    esp,0x18
c002463c:	5b                   	pop    ebx
c002463d:	e9 da 1a ff ff       	jmp    c001611c <createPartitionsForDisk(PhysicalDisk*)>

c0024642 <ATAPI::detectMedia()>:
c0024642:	56                   	push   esi
c0024643:	53                   	push   ebx
c0024644:	83 ec 28             	sub    esp,0x28
c0024647:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002464b:	6a 0c                	push   0xc
c002464d:	6a 00                	push   0x0
c002464f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024653:	56                   	push   esi
c0024654:	e8 f7 c0 fd ff       	call   c0000750 <memset>
c0024659:	58                   	pop    eax
c002465a:	5a                   	pop    edx
c002465b:	6a 00                	push   0x0
c002465d:	6a 00                	push   0x0
c002465f:	6a 00                	push   0x0
c0024661:	6a 00                	push   0x0
c0024663:	56                   	push   esi
c0024664:	53                   	push   ebx
c0024665:	e8 86 fc ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002466a:	83 c4 1c             	add    esp,0x1c
c002466d:	6a 0c                	push   0xc
c002466f:	6a 00                	push   0x0
c0024671:	56                   	push   esi
c0024672:	e8 d9 c0 fd ff       	call   c0000750 <memset>
c0024677:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002467c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024681:	59                   	pop    ecx
c0024682:	58                   	pop    eax
c0024683:	6a 01                	push   0x1
c0024685:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024689:	50                   	push   eax
c002468a:	6a 00                	push   0x0
c002468c:	6a 12                	push   0x12
c002468e:	56                   	push   esi
c002468f:	53                   	push   ebx
c0024690:	e8 5b fc ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024695:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024699:	83 c4 20             	add    esp,0x20
c002469c:	83 e0 7f             	and    eax,0x7f
c002469f:	3c 70                	cmp    al,0x70
c00246a1:	74 15                	je     c00246b8 <ATAPI::detectMedia()+0x76>
c00246a3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246aa:	75 0c                	jne    c00246b8 <ATAPI::detectMedia()+0x76>
c00246ac:	83 ec 0c             	sub    esp,0xc
c00246af:	53                   	push   ebx
c00246b0:	e8 5f ff ff ff       	call   c0024614 <ATAPI::diskInserted()>
c00246b5:	83 c4 10             	add    esp,0x10
c00246b8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00246bc:	83 e0 0f             	and    eax,0xf
c00246bf:	3c 02                	cmp    al,0x2
c00246c1:	75 1b                	jne    c00246de <ATAPI::detectMedia()+0x9c>
c00246c3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00246c8:	75 2d                	jne    c00246f7 <ATAPI::detectMedia()+0xb5>
c00246ca:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246d1:	74 24                	je     c00246f7 <ATAPI::detectMedia()+0xb5>
c00246d3:	83 ec 0c             	sub    esp,0xc
c00246d6:	53                   	push   ebx
c00246d7:	e8 d4 fe ff ff       	call   c00245b0 <ATAPI::diskRemoved()>
c00246dc:	eb 16                	jmp    c00246f4 <ATAPI::detectMedia()+0xb2>
c00246de:	84 c0                	test   al,al
c00246e0:	75 15                	jne    c00246f7 <ATAPI::detectMedia()+0xb5>
c00246e2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246e9:	75 0c                	jne    c00246f7 <ATAPI::detectMedia()+0xb5>
c00246eb:	83 ec 0c             	sub    esp,0xc
c00246ee:	53                   	push   ebx
c00246ef:	e8 20 ff ff ff       	call   c0024614 <ATAPI::diskInserted()>
c00246f4:	83 c4 10             	add    esp,0x10
c00246f7:	83 c4 24             	add    esp,0x24
c00246fa:	5b                   	pop    ebx
c00246fb:	5e                   	pop    esi
c00246fc:	c3                   	ret    
c00246fd:	90                   	nop

c00246fe <ATAPI::open(int, int, void*)>:
c00246fe:	53                   	push   ebx
c00246ff:	83 ec 08             	sub    esp,0x8
c0024702:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002470a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002470e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024714:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002471a:	c1 e0 06             	shl    eax,0x6
c002471d:	01 d0                	add    eax,edx
c002471f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024726:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002472c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024733:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002473d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024743:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002474a:	6a 04                	push   0x4
c002474c:	6a 0c                	push   0xc
c002474e:	51                   	push   ecx
c002474f:	52                   	push   edx
c0024750:	e8 c3 e6 ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024755:	90                   	nop
c0024756:	90                   	nop
c0024757:	6a 00                	push   0x0
c0024759:	6a 0c                	push   0xc
c002475b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024762:	50                   	push   eax
c0024763:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024769:	e8 aa e6 ff ff       	call   c0022e18 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024775:	83 c4 14             	add    esp,0x14
c0024778:	53                   	push   ebx
c0024779:	e8 c4 fe ff ff       	call   c0024642 <ATAPI::detectMedia()>
c002477e:	31 c0                	xor    eax,eax
c0024780:	83 c4 18             	add    esp,0x18
c0024783:	5b                   	pop    ebx
c0024784:	c3                   	ret    
c0024785:	90                   	nop

c0024786 <ATAPI::read(unsigned long long, int, void*)>:
c0024786:	55                   	push   ebp
c0024787:	57                   	push   edi
c0024788:	56                   	push   esi
c0024789:	53                   	push   ebx
c002478a:	83 ec 1c             	sub    esp,0x1c
c002478d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024791:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024795:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024799:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247a0:	74 41                	je     c00247e3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00247a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247a6:	b9 03 00 00 00       	mov    ecx,0x3
c00247ab:	fc                   	cld    
c00247ac:	31 c0                	xor    eax,eax
c00247ae:	86 fb                	xchg   bl,bh
c00247b0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247b2:	c1 c3 10             	rol    ebx,0x10
c00247b5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00247ba:	89 e8                	mov    eax,ebp
c00247bc:	86 fb                	xchg   bl,bh
c00247be:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00247c2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00247c6:	50                   	push   eax
c00247c7:	50                   	push   eax
c00247c8:	55                   	push   ebp
c00247c9:	c1 e5 0b             	shl    ebp,0xb
c00247cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00247d0:	6a 00                	push   0x0
c00247d2:	55                   	push   ebp
c00247d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00247d7:	50                   	push   eax
c00247d8:	56                   	push   esi
c00247d9:	e8 12 fb ff ff       	call   c00242f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247de:	83 c4 20             	add    esp,0x20
c00247e1:	eb 1a                	jmp    c00247fd <ATAPI::read(unsigned long long, int, void*)+0x77>
c00247e3:	83 ec 0c             	sub    esp,0xc
c00247e6:	56                   	push   esi
c00247e7:	e8 56 fe ff ff       	call   c0024642 <ATAPI::detectMedia()>
c00247ec:	83 c4 10             	add    esp,0x10
c00247ef:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247f6:	75 aa                	jne    c00247a2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00247f8:	b8 02 00 00 00       	mov    eax,0x2
c00247fd:	83 c4 1c             	add    esp,0x1c
c0024800:	5b                   	pop    ebx
c0024801:	5e                   	pop    esi
c0024802:	5f                   	pop    edi
c0024803:	5d                   	pop    ebp
c0024804:	c3                   	ret    
c0024805:	90                   	nop

c0024806 <SATA::close(int, int, void*)>:
c0024806:	83 ec 0c             	sub    esp,0xc
c0024809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002480d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024813:	85 c0                	test   eax,eax
c0024815:	74 0c                	je     c0024823 <SATA::close(int, int, void*)+0x1d>
c0024817:	83 ec 0c             	sub    esp,0xc
c002481a:	8b 10                	mov    edx,DWORD PTR [eax]
c002481c:	50                   	push   eax
c002481d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024820:	83 c4 10             	add    esp,0x10
c0024823:	31 c0                	xor    eax,eax
c0024825:	83 c4 0c             	add    esp,0xc
c0024828:	c3                   	ret    
c0024829:	90                   	nop

c002482a <SATA::powerSaving(PowerSavingLevel)>:
c002482a:	c3                   	ret    
c002482b:	90                   	nop

c002482c <SATA::open(int, int, void*)>:
c002482c:	56                   	push   esi
c002482d:	53                   	push   ebx
c002482e:	50                   	push   eax
c002482f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024833:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024837:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024841:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024847:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024855:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002485f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024865:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002486c:	e8 cf b0 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024871:	89 c6                	mov    esi,eax
c0024873:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024879:	81 c6 00 10 00 00    	add    esi,0x1000
c002487f:	e8 bc b0 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024884:	39 c6                	cmp    esi,eax
c0024886:	74 10                	je     c0024898 <SATA::open(int, int, void*)+0x6c>
c0024888:	83 ec 0c             	sub    esp,0xc
c002488b:	68 04 c0 02 c0       	push   0xc002c004
c0024890:	e8 9a 54 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0024895:	83 c4 10             	add    esp,0x10
c0024898:	83 ec 0c             	sub    esp,0xc
c002489b:	6a 02                	push   0x2
c002489d:	e8 23 c9 fe ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c00248a2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248a8:	6a 03                	push   0x3
c00248aa:	50                   	push   eax
c00248ab:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00248b1:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c00248b7:	e8 c6 d0 fe ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c00248bc:	83 c4 14             	add    esp,0x14
c00248bf:	53                   	push   ebx
c00248c0:	e8 d5 f5 fe ff       	call   c0013e9a <PhysicalDisk::startCache()>
c00248c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248c8:	e8 4f 18 ff ff       	call   c001611c <createPartitionsForDisk(PhysicalDisk*)>
c00248cd:	83 c4 14             	add    esp,0x14
c00248d0:	31 c0                	xor    eax,eax
c00248d2:	5b                   	pop    ebx
c00248d3:	5e                   	pop    esi
c00248d4:	c3                   	ret    
c00248d5:	90                   	nop

c00248d6 <SATA::SATA()>:
c00248d6:	83 ec 0c             	sub    esp,0xc
c00248d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248dd:	83 ec 04             	sub    esp,0x4
c00248e0:	68 00 02 00 00       	push   0x200
c00248e5:	68 18 c0 02 c0       	push   0xc002c018
c00248ea:	50                   	push   eax
c00248eb:	e8 42 f5 fe ff       	call   c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248f0:	83 c4 10             	add    esp,0x10
c00248f3:	ba 88 c0 02 c0       	mov    edx,0xc002c088
c00248f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248fc:	89 10                	mov    DWORD PTR [eax],edx
c00248fe:	90                   	nop
c00248ff:	83 c4 0c             	add    esp,0xc
c0024902:	c3                   	ret    
c0024903:	90                   	nop

c0024904 <SATA::access(unsigned long long, int, void*, bool)>:
c0024904:	55                   	push   ebp
c0024905:	57                   	push   edi
c0024906:	56                   	push   esi
c0024907:	53                   	push   ebx
c0024908:	83 ec 2c             	sub    esp,0x2c
c002490b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002490f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024917:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002491b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002491f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024928:	7e 10                	jle    c002493a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002492a:	83 ec 0c             	sub    esp,0xc
c002492d:	68 28 c0 02 c0       	push   0xc002c028
c0024932:	e8 f8 53 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0024937:	83 c4 10             	add    esp,0x10
c002493a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024940:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024946:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002494c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024950:	89 d0                	mov    eax,edx
c0024952:	c1 e0 07             	shl    eax,0x7
c0024955:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024959:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024963:	51                   	push   ecx
c0024964:	8d 42 02             	lea    eax,[edx+0x2]
c0024967:	51                   	push   ecx
c0024968:	c1 e0 07             	shl    eax,0x7
c002496b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002496f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024973:	50                   	push   eax
c0024974:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002497a:	e8 1b f0 ff ff       	call   c002399a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002497f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024983:	83 c4 10             	add    esp,0x10
c0024986:	b8 01 00 00 00       	mov    eax,0x1
c002498b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024990:	0f 84 cb 01 00 00    	je     c0024b61 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024996:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002499a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002499e:	c1 e0 09             	shl    eax,0x9
c00249a1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00249a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00249aa:	74 0e                	je     c00249ba <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00249ac:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00249b2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00249b6:	89 c1                	mov    ecx,eax
c00249b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00249ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00249be:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00249c4:	8d 42 02             	lea    eax,[edx+0x2]
c00249c7:	c1 e0 07             	shl    eax,0x7
c00249ca:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00249ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00249d0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249d6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00249e0:	c1 e1 05             	shl    ecx,0x5
c00249e3:	01 c8                	add    eax,ecx
c00249e5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00249e9:	83 e1 01             	and    ecx,0x1
c00249ec:	89 ce                	mov    esi,ecx
c00249ee:	8a 08                	mov    cl,BYTE PTR [eax]
c00249f0:	c1 e6 06             	shl    esi,0x6
c00249f3:	83 e1 bf             	and    ecx,0xffffffbf
c00249f6:	09 f1                	or     ecx,esi
c00249f8:	88 08                	mov    BYTE PTR [eax],cl
c00249fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249fc:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024a02:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024a08:	89 08                	mov    DWORD PTR [eax],ecx
c0024a0a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024a10:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024a16:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024a1c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024a1f:	50                   	push   eax
c0024a20:	68 90 00 00 00       	push   0x90
c0024a25:	6a 00                	push   0x0
c0024a27:	56                   	push   esi
c0024a28:	e8 23 bd fd ff       	call   c0000750 <memset>
c0024a2d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a33:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024a37:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024a3d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024a41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a45:	83 c4 10             	add    esp,0x10
c0024a48:	48                   	dec    eax
c0024a49:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024a4e:	89 c1                	mov    ecx,eax
c0024a50:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024a56:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a5b:	09 c8                	or     eax,ecx
c0024a5d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024a63:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024a66:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024a6d:	66 25 00 7f          	and    ax,0x7f00
c0024a71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a75:	66 0d 27 80          	or     ax,0x8027
c0024a79:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024a7e:	66 89 06             	mov    WORD PTR [esi],ax
c0024a81:	19 c0                	sbb    eax,eax
c0024a83:	83 e0 f0             	and    eax,0xfffffff0
c0024a86:	83 c0 35             	add    eax,0x35
c0024a89:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024a8c:	89 e8                	mov    eax,ebp
c0024a8e:	c1 e8 10             	shr    eax,0x10
c0024a91:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024a94:	89 e8                	mov    eax,ebp
c0024a96:	c1 e8 18             	shr    eax,0x18
c0024a99:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024a9c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024aa0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024aa3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024aa7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024aaa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024aae:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024ab2:	89 d6                	mov    esi,edx
c0024ab4:	31 c0                	xor    eax,eax
c0024ab6:	c1 e6 07             	shl    esi,0x7
c0024ab9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024abd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024ac3:	80 e1 88             	and    cl,0x88
c0024ac6:	74 0a                	je     c0024ad2 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024ac8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024acd:	74 0a                	je     c0024ad9 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024acf:	40                   	inc    eax
c0024ad0:	eb eb                	jmp    c0024abd <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024ad2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ad7:	75 0a                	jne    c0024ae3 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024ad9:	83 ec 0c             	sub    esp,0xc
c0024adc:	68 61 c0 02 c0       	push   0xc002c061
c0024ae1:	eb 56                	jmp    c0024b39 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024ae3:	b8 01 00 00 00       	mov    eax,0x1
c0024ae8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024aec:	c1 e2 07             	shl    edx,0x7
c0024aef:	d3 e0                	shl    eax,cl
c0024af1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024af5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024afb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024b01:	85 c8                	test   eax,ecx
c0024b03:	74 20                	je     c0024b25 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024b05:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024b0b:	0f ba e1 1e          	bt     ecx,0x1e
c0024b0f:	73 ea                	jae    c0024afb <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024b11:	83 ec 0c             	sub    esp,0xc
c0024b14:	68 6f c0 02 c0       	push   0xc002c06f
c0024b19:	e8 11 52 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0024b1e:	83 c4 10             	add    esp,0x10
c0024b21:	31 c0                	xor    eax,eax
c0024b23:	eb 3c                	jmp    c0024b61 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b25:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024b2b:	0f ba e0 1e          	bt     eax,0x1e
c0024b2f:	73 17                	jae    c0024b48 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024b31:	83 ec 0c             	sub    esp,0xc
c0024b34:	68 6f c0 02 c0       	push   0xc002c06f
c0024b39:	e8 f1 51 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0024b3e:	83 c4 10             	add    esp,0x10
c0024b41:	b8 01 00 00 00       	mov    eax,0x1
c0024b46:	eb 19                	jmp    c0024b61 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b48:	31 c0                	xor    eax,eax
c0024b4a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b4f:	75 10                	jne    c0024b61 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b51:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024b57:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024b5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b61:	83 c4 2c             	add    esp,0x2c
c0024b64:	5b                   	pop    ebx
c0024b65:	5e                   	pop    esi
c0024b66:	5f                   	pop    edi
c0024b67:	5d                   	pop    ebp
c0024b68:	c3                   	ret    
c0024b69:	90                   	nop

c0024b6a <SATA::read(unsigned long long, int, void*)>:
c0024b6a:	57                   	push   edi
c0024b6b:	b8 04 00 00 00       	mov    eax,0x4
c0024b70:	56                   	push   esi
c0024b71:	53                   	push   ebx
c0024b72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b7a:	8d 7a ff             	lea    edi,[edx-0x1]
c0024b7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024b81:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024b85:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024b8b:	77 25                	ja     c0024bb2 <SATA::read(unsigned long long, int, void*)+0x48>
c0024b8d:	b8 06 00 00 00       	mov    eax,0x6
c0024b92:	85 f6                	test   esi,esi
c0024b94:	74 1c                	je     c0024bb2 <SATA::read(unsigned long long, int, void*)+0x48>
c0024b96:	50                   	push   eax
c0024b97:	50                   	push   eax
c0024b98:	6a 00                	push   0x0
c0024b9a:	56                   	push   esi
c0024b9b:	52                   	push   edx
c0024b9c:	53                   	push   ebx
c0024b9d:	51                   	push   ecx
c0024b9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ba2:	e8 5d fd ff ff       	call   c0024904 <SATA::access(unsigned long long, int, void*, bool)>
c0024ba7:	83 c4 20             	add    esp,0x20
c0024baa:	85 c0                	test   eax,eax
c0024bac:	0f 95 c0             	setne  al
c0024baf:	0f b6 c0             	movzx  eax,al
c0024bb2:	5b                   	pop    ebx
c0024bb3:	5e                   	pop    esi
c0024bb4:	5f                   	pop    edi
c0024bb5:	c3                   	ret    

c0024bb6 <SATA::write(unsigned long long, int, void*)>:
c0024bb6:	55                   	push   ebp
c0024bb7:	b8 04 00 00 00       	mov    eax,0x4
c0024bbc:	57                   	push   edi
c0024bbd:	56                   	push   esi
c0024bbe:	53                   	push   ebx
c0024bbf:	83 ec 0c             	sub    esp,0xc
c0024bc2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024bc6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024bca:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024bcd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024bd1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024bd5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024bdb:	77 3d                	ja     c0024c1a <SATA::write(unsigned long long, int, void*)+0x64>
c0024bdd:	b8 06 00 00 00       	mov    eax,0x6
c0024be2:	85 ed                	test   ebp,ebp
c0024be4:	74 34                	je     c0024c1a <SATA::write(unsigned long long, int, void*)+0x64>
c0024be6:	c1 e3 09             	shl    ebx,0x9
c0024be9:	01 eb                	add    ebx,ebp
c0024beb:	89 d6                	mov    esi,edx
c0024bed:	89 cf                	mov    edi,ecx
c0024bef:	83 c6 01             	add    esi,0x1
c0024bf2:	83 d7 00             	adc    edi,0x0
c0024bf5:	50                   	push   eax
c0024bf6:	50                   	push   eax
c0024bf7:	6a 01                	push   0x1
c0024bf9:	55                   	push   ebp
c0024bfa:	81 c5 00 02 00 00    	add    ebp,0x200
c0024c00:	6a 01                	push   0x1
c0024c02:	51                   	push   ecx
c0024c03:	52                   	push   edx
c0024c04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c08:	e8 f7 fc ff ff       	call   c0024904 <SATA::access(unsigned long long, int, void*, bool)>
c0024c0d:	83 c4 20             	add    esp,0x20
c0024c10:	89 f2                	mov    edx,esi
c0024c12:	89 f9                	mov    ecx,edi
c0024c14:	39 dd                	cmp    ebp,ebx
c0024c16:	75 d3                	jne    c0024beb <SATA::write(unsigned long long, int, void*)+0x35>
c0024c18:	31 c0                	xor    eax,eax
c0024c1a:	83 c4 0c             	add    esp,0xc
c0024c1d:	5b                   	pop    ebx
c0024c1e:	5e                   	pop    esi
c0024c1f:	5f                   	pop    edi
c0024c20:	5d                   	pop    ebp
c0024c21:	c3                   	ret    

c0024c22 <SATAPI::write(unsigned long long, int, void*)>:
c0024c22:	b8 03 00 00 00       	mov    eax,0x3
c0024c27:	c3                   	ret    

c0024c28 <SATAPI::close(int, int, void*)>:
c0024c28:	83 ec 0c             	sub    esp,0xc
c0024c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c2f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c35:	85 c0                	test   eax,eax
c0024c37:	74 0c                	je     c0024c45 <SATAPI::close(int, int, void*)+0x1d>
c0024c39:	83 ec 0c             	sub    esp,0xc
c0024c3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c3e:	50                   	push   eax
c0024c3f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c42:	83 c4 10             	add    esp,0x10
c0024c45:	31 c0                	xor    eax,eax
c0024c47:	83 c4 0c             	add    esp,0xc
c0024c4a:	c3                   	ret    
c0024c4b:	90                   	nop

c0024c4c <SATAPI::SATAPI()>:
c0024c4c:	83 ec 0c             	sub    esp,0xc
c0024c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c53:	83 ec 04             	sub    esp,0x4
c0024c56:	68 00 08 00 00       	push   0x800
c0024c5b:	68 b8 c0 02 c0       	push   0xc002c0b8
c0024c60:	50                   	push   eax
c0024c61:	e8 cc f1 fe ff       	call   c0013e32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c66:	83 c4 10             	add    esp,0x10
c0024c69:	ba 64 c1 02 c0       	mov    edx,0xc002c164
c0024c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c72:	89 10                	mov    DWORD PTR [eax],edx
c0024c74:	90                   	nop
c0024c75:	83 c4 0c             	add    esp,0xc
c0024c78:	c3                   	ret    
c0024c79:	90                   	nop

c0024c7a <SATAPI::diskRemoved()>:
c0024c7a:	83 ec 18             	sub    esp,0x18
c0024c7d:	68 c4 c0 02 c0       	push   0xc002c0c4
c0024c82:	e8 3d d9 fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0024c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c8b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024c92:	83 c4 1c             	add    esp,0x1c
c0024c95:	c3                   	ret    

c0024c96 <SATAPI::diskInserted()>:
c0024c96:	53                   	push   ebx
c0024c97:	83 ec 14             	sub    esp,0x14
c0024c9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024c9e:	68 db c0 02 c0       	push   0xc002c0db
c0024ca3:	e8 1c d9 fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0024ca8:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024caf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cb2:	e8 e3 f1 fe ff       	call   c0013e9a <PhysicalDisk::startCache()>
c0024cb7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024cbb:	83 c4 18             	add    esp,0x18
c0024cbe:	5b                   	pop    ebx
c0024cbf:	e9 58 14 ff ff       	jmp    c001611c <createPartitionsForDisk(PhysicalDisk*)>

c0024cc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024cc4:	55                   	push   ebp
c0024cc5:	57                   	push   edi
c0024cc6:	56                   	push   esi
c0024cc7:	53                   	push   ebx
c0024cc8:	83 ec 34             	sub    esp,0x34
c0024ccb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024ccf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024cd3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024cd7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024cdb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024cdf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cef:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024cf5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024cf9:	c1 e0 07             	shl    eax,0x7
c0024cfc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024d00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d04:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d12:	8d 58 02             	lea    ebx,[eax+0x2]
c0024d15:	c1 e3 07             	shl    ebx,0x7
c0024d18:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024d1c:	53                   	push   ebx
c0024d1d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d23:	e8 72 ec ff ff       	call   c002399a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024d2c:	83 c4 10             	add    esp,0x10
c0024d2f:	b8 01 00 00 00       	mov    eax,0x1
c0024d34:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024d39:	0f 84 85 01 00 00    	je     c0024ec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024d3f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d47:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d4d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d57:	c1 e1 05             	shl    ecx,0x5
c0024d5a:	01 c8                	add    eax,ecx
c0024d5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d5e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d64:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024d6a:	89 08                	mov    DWORD PTR [eax],ecx
c0024d6c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d72:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d78:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d7e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d81:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024d84:	50                   	push   eax
c0024d85:	68 90 00 00 00       	push   0x90
c0024d8a:	6a 00                	push   0x0
c0024d8c:	53                   	push   ebx
c0024d8d:	e8 be b9 fd ff       	call   c0000750 <memset>
c0024d92:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024d96:	b9 0c 00 00 00       	mov    ecx,0xc
c0024d9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024d9d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024da3:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024da7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dad:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024db1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024db5:	48                   	dec    eax
c0024db6:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024dbb:	89 c1                	mov    ecx,eax
c0024dbd:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dc3:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024dc8:	09 c8                	or     eax,ecx
c0024dca:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024dd0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dd3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024dda:	66 25 00 7f          	and    ax,0x7f00
c0024dde:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024de2:	66 0d 27 80          	or     ax,0x8027
c0024de6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024dea:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ded:	89 d0                	mov    eax,edx
c0024def:	c1 ea 18             	shr    edx,0x18
c0024df2:	c1 e8 10             	shr    eax,0x10
c0024df5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024df8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024dfb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024dff:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e06:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e09:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024e0d:	83 c4 10             	add    esp,0x10
c0024e10:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e14:	31 c0                	xor    eax,eax
c0024e16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024e1a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024e20:	80 e2 88             	and    dl,0x88
c0024e23:	74 0a                	je     c0024e2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024e25:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e2a:	74 0a                	je     c0024e36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024e2c:	40                   	inc    eax
c0024e2d:	eb eb                	jmp    c0024e1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024e2f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e34:	75 0f                	jne    c0024e45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024e36:	83 ec 0c             	sub    esp,0xc
c0024e39:	68 61 c0 02 c0       	push   0xc002c061
c0024e3e:	e8 ec 4e ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0024e43:	eb 3f                	jmp    c0024e84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024e45:	ba 01 00 00 00       	mov    edx,0x1
c0024e4a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e52:	d3 e2                	shl    edx,cl
c0024e54:	c1 e0 07             	shl    eax,0x7
c0024e57:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024e5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024e61:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024e67:	85 ca                	test   edx,ecx
c0024e69:	74 23                	je     c0024e8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024e6b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024e71:	0f ba e1 1e          	bt     ecx,0x1e
c0024e75:	73 ea                	jae    c0024e61 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024e77:	83 ec 0c             	sub    esp,0xc
c0024e7a:	68 f3 c0 02 c0       	push   0xc002c0f3
c0024e7f:	e8 40 d7 fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0024e84:	83 c4 10             	add    esp,0x10
c0024e87:	b8 01 00 00 00       	mov    eax,0x1
c0024e8c:	eb 36                	jmp    c0024ec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e8e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024e94:	0f ba e0 1e          	bt     eax,0x1e
c0024e98:	73 0a                	jae    c0024ea4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024e9a:	83 ec 0c             	sub    esp,0xc
c0024e9d:	68 06 c1 02 c0       	push   0xc002c106
c0024ea2:	eb db                	jmp    c0024e7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024ea4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024ea9:	74 17                	je     c0024ec2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024eab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024eb0:	74 10                	je     c0024ec2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024eb2:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024eb8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024ebc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024ec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ec2:	31 c0                	xor    eax,eax
c0024ec4:	83 c4 2c             	add    esp,0x2c
c0024ec7:	5b                   	pop    ebx
c0024ec8:	5e                   	pop    esi
c0024ec9:	5f                   	pop    edi
c0024eca:	5d                   	pop    ebp
c0024ecb:	c3                   	ret    

c0024ecc <SATAPI::eject()>:
c0024ecc:	57                   	push   edi
c0024ecd:	b9 03 00 00 00       	mov    ecx,0x3
c0024ed2:	53                   	push   ebx
c0024ed3:	83 ec 14             	sub    esp,0x14
c0024ed6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024eda:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ede:	fc                   	cld    
c0024edf:	31 c0                	xor    eax,eax
c0024ee1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ee3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ee8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024eed:	50                   	push   eax
c0024eee:	6a 00                	push   0x0
c0024ef0:	6a 00                	push   0x0
c0024ef2:	6a 00                	push   0x0
c0024ef4:	6a 00                	push   0x0
c0024ef6:	6a 02                	push   0x2
c0024ef8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024efc:	50                   	push   eax
c0024efd:	53                   	push   ebx
c0024efe:	e8 c1 fd ff ff       	call   c0024cc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f03:	83 c4 14             	add    esp,0x14
c0024f06:	53                   	push   ebx
c0024f07:	e8 6e fd ff ff       	call   c0024c7a <SATAPI::diskRemoved()>
c0024f0c:	83 c4 24             	add    esp,0x24
c0024f0f:	31 c0                	xor    eax,eax
c0024f11:	5b                   	pop    ebx
c0024f12:	5f                   	pop    edi
c0024f13:	c3                   	ret    

c0024f14 <SATAPI::detectMedia()>:
c0024f14:	56                   	push   esi
c0024f15:	53                   	push   ebx
c0024f16:	83 ec 28             	sub    esp,0x28
c0024f19:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f1d:	6a 0c                	push   0xc
c0024f1f:	6a 00                	push   0x0
c0024f21:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024f25:	56                   	push   esi
c0024f26:	e8 25 b8 fd ff       	call   c0000750 <memset>
c0024f2b:	83 c4 0c             	add    esp,0xc
c0024f2e:	6a 00                	push   0x0
c0024f30:	6a 00                	push   0x0
c0024f32:	6a 00                	push   0x0
c0024f34:	6a 00                	push   0x0
c0024f36:	6a 00                	push   0x0
c0024f38:	56                   	push   esi
c0024f39:	53                   	push   ebx
c0024f3a:	e8 85 fd ff ff       	call   c0024cc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f3f:	83 c4 1c             	add    esp,0x1c
c0024f42:	6a 0c                	push   0xc
c0024f44:	6a 00                	push   0x0
c0024f46:	56                   	push   esi
c0024f47:	e8 04 b8 fd ff       	call   c0000750 <memset>
c0024f4c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024f51:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024f56:	83 c4 0c             	add    esp,0xc
c0024f59:	6a 01                	push   0x1
c0024f5b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024f5f:	50                   	push   eax
c0024f60:	6a 00                	push   0x0
c0024f62:	6a 00                	push   0x0
c0024f64:	6a 12                	push   0x12
c0024f66:	56                   	push   esi
c0024f67:	53                   	push   ebx
c0024f68:	e8 57 fd ff ff       	call   c0024cc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f6d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024f71:	83 c4 20             	add    esp,0x20
c0024f74:	83 e0 7f             	and    eax,0x7f
c0024f77:	3c 70                	cmp    al,0x70
c0024f79:	74 15                	je     c0024f90 <SATAPI::detectMedia()+0x7c>
c0024f7b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f82:	75 0c                	jne    c0024f90 <SATAPI::detectMedia()+0x7c>
c0024f84:	83 ec 0c             	sub    esp,0xc
c0024f87:	53                   	push   ebx
c0024f88:	e8 09 fd ff ff       	call   c0024c96 <SATAPI::diskInserted()>
c0024f8d:	83 c4 10             	add    esp,0x10
c0024f90:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024f94:	83 e0 0f             	and    eax,0xf
c0024f97:	3c 02                	cmp    al,0x2
c0024f99:	75 1b                	jne    c0024fb6 <SATAPI::detectMedia()+0xa2>
c0024f9b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024fa0:	75 2d                	jne    c0024fcf <SATAPI::detectMedia()+0xbb>
c0024fa2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fa9:	74 24                	je     c0024fcf <SATAPI::detectMedia()+0xbb>
c0024fab:	83 ec 0c             	sub    esp,0xc
c0024fae:	53                   	push   ebx
c0024faf:	e8 c6 fc ff ff       	call   c0024c7a <SATAPI::diskRemoved()>
c0024fb4:	eb 16                	jmp    c0024fcc <SATAPI::detectMedia()+0xb8>
c0024fb6:	84 c0                	test   al,al
c0024fb8:	75 15                	jne    c0024fcf <SATAPI::detectMedia()+0xbb>
c0024fba:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fc1:	75 0c                	jne    c0024fcf <SATAPI::detectMedia()+0xbb>
c0024fc3:	83 ec 0c             	sub    esp,0xc
c0024fc6:	53                   	push   ebx
c0024fc7:	e8 ca fc ff ff       	call   c0024c96 <SATAPI::diskInserted()>
c0024fcc:	83 c4 10             	add    esp,0x10
c0024fcf:	83 c4 24             	add    esp,0x24
c0024fd2:	5b                   	pop    ebx
c0024fd3:	5e                   	pop    esi
c0024fd4:	c3                   	ret    
c0024fd5:	90                   	nop

c0024fd6 <SATAPI::open(int, int, void*)>:
c0024fd6:	56                   	push   esi
c0024fd7:	53                   	push   ebx
c0024fd8:	50                   	push   eax
c0024fd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fe1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024feb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024ff1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ffb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fff:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025009:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002500f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025016:	e8 25 a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c002501b:	89 c6                	mov    esi,eax
c002501d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025023:	81 c6 00 10 00 00    	add    esi,0x1000
c0025029:	e8 12 a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c002502e:	39 c6                	cmp    esi,eax
c0025030:	74 10                	je     c0025042 <SATAPI::open(int, int, void*)+0x6c>
c0025032:	83 ec 0c             	sub    esp,0xc
c0025035:	68 1b c1 02 c0       	push   0xc002c11b
c002503a:	e8 f0 4c ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c002503f:	83 c4 10             	add    esp,0x10
c0025042:	83 ec 0c             	sub    esp,0xc
c0025045:	6a 02                	push   0x2
c0025047:	e8 79 c1 fe ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c002504c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025052:	6a 03                	push   0x3
c0025054:	50                   	push   eax
c0025055:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002505b:	ff 35 70 d8 02 c0    	push   DWORD PTR ds:0xc002d870
c0025061:	e8 1c c9 fe ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025066:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002506d:	83 c4 14             	add    esp,0x14
c0025070:	53                   	push   ebx
c0025071:	e8 9e fe ff ff       	call   c0024f14 <SATAPI::detectMedia()>
c0025076:	83 c4 14             	add    esp,0x14
c0025079:	31 c0                	xor    eax,eax
c002507b:	5b                   	pop    ebx
c002507c:	5e                   	pop    esi
c002507d:	c3                   	ret    

c002507e <SATAPI::read(unsigned long long, int, void*)>:
c002507e:	55                   	push   ebp
c002507f:	57                   	push   edi
c0025080:	56                   	push   esi
c0025081:	53                   	push   ebx
c0025082:	83 ec 1c             	sub    esp,0x1c
c0025085:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025089:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002508d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025091:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025098:	74 19                	je     c00250b3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002509a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002509f:	7e 2e                	jle    c00250cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250a1:	83 ec 0c             	sub    esp,0xc
c00250a4:	68 31 c1 02 c0       	push   0xc002c131
c00250a9:	e8 81 4c ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00250ae:	83 c4 10             	add    esp,0x10
c00250b1:	eb 1c                	jmp    c00250cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250b3:	83 ec 0c             	sub    esp,0xc
c00250b6:	55                   	push   ebp
c00250b7:	e8 58 fe ff ff       	call   c0024f14 <SATAPI::detectMedia()>
c00250bc:	83 c4 10             	add    esp,0x10
c00250bf:	b8 02 00 00 00       	mov    eax,0x2
c00250c4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250cb:	75 cd                	jne    c002509a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00250cd:	eb 49                	jmp    c0025118 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00250cf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00250d3:	b9 03 00 00 00       	mov    ecx,0x3
c00250d8:	fc                   	cld    
c00250d9:	31 c0                	xor    eax,eax
c00250db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00250dd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00250e2:	89 d8                	mov    eax,ebx
c00250e4:	86 e0                	xchg   al,ah
c00250e6:	c1 c0 10             	rol    eax,0x10
c00250e9:	86 e0                	xchg   al,ah
c00250eb:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00250ef:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00250f3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00250f7:	50                   	push   eax
c00250f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00250fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025100:	56                   	push   esi
c0025101:	53                   	push   ebx
c0025102:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025106:	c1 e0 0b             	shl    eax,0xb
c0025109:	50                   	push   eax
c002510a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002510e:	50                   	push   eax
c002510f:	55                   	push   ebp
c0025110:	e8 af fb ff ff       	call   c0024cc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025115:	83 c4 20             	add    esp,0x20
c0025118:	83 c4 1c             	add    esp,0x1c
c002511b:	5b                   	pop    ebx
c002511c:	5e                   	pop    esi
c002511d:	5f                   	pop    edi
c002511e:	5d                   	pop    ebp
c002511f:	c3                   	ret    

c0025120 <AVX::open(int, int, void*)>:
c0025120:	83 ec 0c             	sub    esp,0xc
c0025123:	e8 40 11 00 00       	call   c0026268 <avxInit>
c0025128:	b8 00 00 00 00       	mov    eax,0x0
c002512d:	83 c4 0c             	add    esp,0xc
c0025130:	c3                   	ret    
c0025131:	90                   	nop

c0025132 <AVX::close(int, int, void*)>:
c0025132:	83 ec 0c             	sub    esp,0xc
c0025135:	e8 2f 11 00 00       	call   c0026269 <avxClose>
c002513a:	b8 00 00 00 00       	mov    eax,0x0
c002513f:	83 c4 0c             	add    esp,0xc
c0025142:	c3                   	ret    
c0025143:	90                   	nop

c0025144 <AVX::available()>:
c0025144:	83 ec 0c             	sub    esp,0xc
c0025147:	e8 14 11 00 00       	call   c0026260 <avxDetect>
c002514c:	85 c0                	test   eax,eax
c002514e:	0f 95 c0             	setne  al
c0025151:	83 c4 0c             	add    esp,0xc
c0025154:	c3                   	ret    
c0025155:	90                   	nop

c0025156 <AVX::save(void*)>:
c0025156:	83 ec 0c             	sub    esp,0xc
c0025159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002515d:	83 ec 0c             	sub    esp,0xc
c0025160:	50                   	push   eax
c0025161:	e8 00 11 00 00       	call   c0026266 <avxSave>
c0025166:	83 c4 10             	add    esp,0x10
c0025169:	90                   	nop
c002516a:	83 c4 0c             	add    esp,0xc
c002516d:	c3                   	ret    

c002516e <AVX::load(void*)>:
c002516e:	83 ec 0c             	sub    esp,0xc
c0025171:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025175:	83 ec 0c             	sub    esp,0xc
c0025178:	50                   	push   eax
c0025179:	e8 e9 10 00 00       	call   c0026267 <avxLoad>
c002517e:	83 c4 10             	add    esp,0x10
c0025181:	90                   	nop
c0025182:	83 c4 0c             	add    esp,0xc
c0025185:	c3                   	ret    

c0025186 <AVX::AVX()>:
c0025186:	83 ec 0c             	sub    esp,0xc
c0025189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002518d:	83 ec 08             	sub    esp,0x8
c0025190:	68 94 c1 02 c0       	push   0xc002c194
c0025195:	50                   	push   eax
c0025196:	e8 75 ed fe ff       	call   c0013f10 <FPU::FPU(char const*)>
c002519b:	83 c4 10             	add    esp,0x10
c002519e:	ba a4 c1 02 c0       	mov    edx,0xc002c1a4
c00251a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a7:	89 10                	mov    DWORD PTR [eax],edx
c00251a9:	90                   	nop
c00251aa:	83 c4 0c             	add    esp,0xc
c00251ad:	c3                   	ret    

c00251ae <MMX::available()>:
c00251ae:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00251b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251b9:	83 e0 20             	and    eax,0x20
c00251bc:	84 c0                	test   al,al
c00251be:	0f 95 c0             	setne  al
c00251c1:	c3                   	ret    

c00251c2 <MMX::open(int, int, void*)>:
c00251c2:	83 ec 0c             	sub    esp,0xc
c00251c5:	e8 28 11 00 00       	call   c00262f2 <x87Init>
c00251ca:	b8 00 00 00 00       	mov    eax,0x0
c00251cf:	83 c4 0c             	add    esp,0xc
c00251d2:	c3                   	ret    
c00251d3:	90                   	nop

c00251d4 <MMX::close(int, int, void*)>:
c00251d4:	83 ec 0c             	sub    esp,0xc
c00251d7:	e8 30 11 00 00       	call   c002630c <x87Close>
c00251dc:	b8 00 00 00 00       	mov    eax,0x0
c00251e1:	83 c4 0c             	add    esp,0xc
c00251e4:	c3                   	ret    
c00251e5:	90                   	nop

c00251e6 <MMX::save(void*)>:
c00251e6:	83 ec 0c             	sub    esp,0xc
c00251e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251ed:	83 ec 0c             	sub    esp,0xc
c00251f0:	50                   	push   eax
c00251f1:	e8 eb 10 00 00       	call   c00262e1 <x87Save>
c00251f6:	83 c4 10             	add    esp,0x10
c00251f9:	90                   	nop
c00251fa:	83 c4 0c             	add    esp,0xc
c00251fd:	c3                   	ret    

c00251fe <MMX::load(void*)>:
c00251fe:	83 ec 0c             	sub    esp,0xc
c0025201:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025205:	83 ec 0c             	sub    esp,0xc
c0025208:	50                   	push   eax
c0025209:	e8 dc 10 00 00       	call   c00262ea <x87Load>
c002520e:	83 c4 10             	add    esp,0x10
c0025211:	90                   	nop
c0025212:	83 c4 0c             	add    esp,0xc
c0025215:	c3                   	ret    

c0025216 <MMX::MMX()>:
c0025216:	83 ec 0c             	sub    esp,0xc
c0025219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521d:	83 ec 08             	sub    esp,0x8
c0025220:	68 d4 c1 02 c0       	push   0xc002c1d4
c0025225:	50                   	push   eax
c0025226:	e8 e5 ec fe ff       	call   c0013f10 <FPU::FPU(char const*)>
c002522b:	83 c4 10             	add    esp,0x10
c002522e:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c0025233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025237:	89 10                	mov    DWORD PTR [eax],edx
c0025239:	90                   	nop
c002523a:	83 c4 0c             	add    esp,0xc
c002523d:	c3                   	ret    

c002523e <SSE::open(int, int, void*)>:
c002523e:	83 ec 0c             	sub    esp,0xc
c0025241:	e8 5e 10 00 00       	call   c00262a4 <sseInit>
c0025246:	b8 00 00 00 00       	mov    eax,0x0
c002524b:	83 c4 0c             	add    esp,0xc
c002524e:	c3                   	ret    
c002524f:	90                   	nop

c0025250 <SSE::close(int, int, void*)>:
c0025250:	83 ec 0c             	sub    esp,0xc
c0025253:	e8 5c 10 00 00       	call   c00262b4 <sseClose>
c0025258:	b8 00 00 00 00       	mov    eax,0x0
c002525d:	83 c4 0c             	add    esp,0xc
c0025260:	c3                   	ret    
c0025261:	90                   	nop

c0025262 <SSE::available()>:
c0025262:	83 ec 1c             	sub    esp,0x1c
c0025265:	e8 16 10 00 00       	call   c0026280 <absolutelyNoChanceInHell>
c002526a:	85 c0                	test   eax,eax
c002526c:	0f 95 c0             	setne  al
c002526f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025273:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025277:	83 c4 1c             	add    esp,0x1c
c002527a:	c3                   	ret    
c002527b:	90                   	nop

c002527c <SSE::save(void*)>:
c002527c:	83 ec 0c             	sub    esp,0xc
c002527f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025283:	83 ec 0c             	sub    esp,0xc
c0025286:	50                   	push   eax
c0025287:	e8 0c 10 00 00       	call   c0026298 <sseSave>
c002528c:	83 c4 10             	add    esp,0x10
c002528f:	90                   	nop
c0025290:	83 c4 0c             	add    esp,0xc
c0025293:	c3                   	ret    

c0025294 <SSE::load(void*)>:
c0025294:	83 ec 0c             	sub    esp,0xc
c0025297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002529b:	83 ec 0c             	sub    esp,0xc
c002529e:	50                   	push   eax
c002529f:	e8 fa 0f 00 00       	call   c002629e <sseLoad>
c00252a4:	83 c4 10             	add    esp,0x10
c00252a7:	90                   	nop
c00252a8:	83 c4 0c             	add    esp,0xc
c00252ab:	c3                   	ret    

c00252ac <SSE::SSE()>:
c00252ac:	83 ec 0c             	sub    esp,0xc
c00252af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b3:	83 ec 08             	sub    esp,0x8
c00252b6:	68 14 c2 02 c0       	push   0xc002c214
c00252bb:	50                   	push   eax
c00252bc:	e8 4f ec fe ff       	call   c0013f10 <FPU::FPU(char const*)>
c00252c1:	83 c4 10             	add    esp,0x10
c00252c4:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c00252c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252cd:	89 10                	mov    DWORD PTR [eax],edx
c00252cf:	90                   	nop
c00252d0:	83 c4 0c             	add    esp,0xc
c00252d3:	c3                   	ret    

c00252d4 <x87::open(int, int, void*)>:
c00252d4:	83 ec 0c             	sub    esp,0xc
c00252d7:	e8 16 10 00 00       	call   c00262f2 <x87Init>
c00252dc:	b8 00 00 00 00       	mov    eax,0x0
c00252e1:	83 c4 0c             	add    esp,0xc
c00252e4:	c3                   	ret    
c00252e5:	90                   	nop

c00252e6 <x87::close(int, int, void*)>:
c00252e6:	83 ec 0c             	sub    esp,0xc
c00252e9:	e8 1e 10 00 00       	call   c002630c <x87Close>
c00252ee:	b8 00 00 00 00       	mov    eax,0x0
c00252f3:	83 c4 0c             	add    esp,0xc
c00252f6:	c3                   	ret    
c00252f7:	90                   	nop

c00252f8 <x87::available()>:
c00252f8:	83 ec 0c             	sub    esp,0xc
c00252fb:	e8 c6 0f 00 00       	call   c00262c6 <x87Detect>
c0025300:	85 c0                	test   eax,eax
c0025302:	0f 95 c0             	setne  al
c0025305:	83 c4 0c             	add    esp,0xc
c0025308:	c3                   	ret    
c0025309:	90                   	nop

c002530a <x87::save(void*)>:
c002530a:	83 ec 0c             	sub    esp,0xc
c002530d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025311:	83 ec 0c             	sub    esp,0xc
c0025314:	50                   	push   eax
c0025315:	e8 c7 0f 00 00       	call   c00262e1 <x87Save>
c002531a:	83 c4 10             	add    esp,0x10
c002531d:	90                   	nop
c002531e:	83 c4 0c             	add    esp,0xc
c0025321:	c3                   	ret    

c0025322 <x87::load(void*)>:
c0025322:	83 ec 0c             	sub    esp,0xc
c0025325:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025329:	83 ec 0c             	sub    esp,0xc
c002532c:	50                   	push   eax
c002532d:	e8 b8 0f 00 00       	call   c00262ea <x87Load>
c0025332:	83 c4 10             	add    esp,0x10
c0025335:	90                   	nop
c0025336:	83 c4 0c             	add    esp,0xc
c0025339:	c3                   	ret    

c002533a <x87::x87()>:
c002533a:	83 ec 0c             	sub    esp,0xc
c002533d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025341:	83 ec 08             	sub    esp,0x8
c0025344:	68 54 c2 02 c0       	push   0xc002c254
c0025349:	50                   	push   eax
c002534a:	e8 c1 eb fe ff       	call   c0013f10 <FPU::FPU(char const*)>
c002534f:	83 c4 10             	add    esp,0x10
c0025352:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c0025357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002535b:	89 10                	mov    DWORD PTR [eax],edx
c002535d:	90                   	nop
c002535e:	83 c4 0c             	add    esp,0xc
c0025361:	c3                   	ret    

c0025362 <APIC::disable()>:
c0025362:	90                   	nop
c0025363:	c3                   	ret    

c0025364 <APIC::close(int, int, void*)>:
c0025364:	55                   	push   ebp
c0025365:	89 e5                	mov    ebp,esp
c0025367:	83 ec 08             	sub    esp,0x8
c002536a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002536d:	8b 00                	mov    eax,DWORD PTR [eax]
c002536f:	83 c0 3c             	add    eax,0x3c
c0025372:	8b 00                	mov    eax,DWORD PTR [eax]
c0025374:	83 ec 0c             	sub    esp,0xc
c0025377:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002537a:	ff d0                	call   eax
c002537c:	83 c4 10             	add    esp,0x10
c002537f:	b8 00 00 00 00       	mov    eax,0x0
c0025384:	c9                   	leave  
c0025385:	c3                   	ret    

c0025386 <IOAPIC::close(int, int, void*)>:
c0025386:	b8 00 00 00 00       	mov    eax,0x0
c002538b:	c3                   	ret    

c002538c <APIC::io_wait()>:
c002538c:	eb 00                	jmp    c002538e <APIC::io_wait()+0x2>
c002538e:	eb 00                	jmp    c0025390 <APIC::io_wait()+0x4>
c0025390:	90                   	nop
c0025391:	c3                   	ret    

c0025392 <APIC::getBase()>:
c0025392:	55                   	push   ebp
c0025393:	89 e5                	mov    ebp,esp
c0025395:	83 ec 18             	sub    esp,0x18
c0025398:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c002539d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00253a3:	83 e0 08             	and    eax,0x8
c00253a6:	84 c0                	test   al,al
c00253a8:	75 07                	jne    c00253b1 <APIC::getBase()+0x1f>
c00253aa:	b8 00 00 00 00       	mov    eax,0x0
c00253af:	eb 21                	jmp    c00253d2 <APIC::getBase()+0x40>
c00253b1:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00253b6:	83 ec 08             	sub    esp,0x8
c00253b9:	6a 1b                	push   0x1b
c00253bb:	50                   	push   eax
c00253bc:	e8 7f 97 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00253c1:	83 c4 10             	add    esp,0x10
c00253c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00253c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00253ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00253d2:	c9                   	leave  
c00253d3:	c3                   	ret    

c00253d4 <APIC::eoi(unsigned char)>:
c00253d4:	55                   	push   ebp
c00253d5:	89 e5                	mov    ebp,esp
c00253d7:	83 ec 28             	sub    esp,0x28
c00253da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00253dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00253e0:	83 ec 0c             	sub    esp,0xc
c00253e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253e6:	e8 a7 ff ff ff       	call   c0025392 <APIC::getBase()>
c00253eb:	83 c4 10             	add    esp,0x10
c00253ee:	05 b0 00 00 00       	add    eax,0xb0
c00253f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00253f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00253f9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00253ff:	90                   	nop
c0025400:	c9                   	leave  
c0025401:	c3                   	ret    

c0025402 <APIC::open(int, int, void*)>:
c0025402:	55                   	push   ebp
c0025403:	89 e5                	mov    ebp,esp
c0025405:	57                   	push   edi
c0025406:	56                   	push   esi
c0025407:	53                   	push   ebx
c0025408:	83 ec 2c             	sub    esp,0x2c
c002540b:	83 ec 0c             	sub    esp,0xc
c002540e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025411:	e8 7c ff ff ff       	call   c0025392 <APIC::getBase()>
c0025416:	83 c4 10             	add    esp,0x10
c0025419:	89 c2                	mov    edx,eax
c002541b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002541e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025424:	0f b6 f8             	movzx  edi,al
c0025427:	89 d0                	mov    eax,edx
c0025429:	ba 00 00 00 00       	mov    edx,0x0
c002542e:	89 c1                	mov    ecx,eax
c0025430:	80 e5 ff             	and    ch,0xff
c0025433:	89 cb                	mov    ebx,ecx
c0025435:	0f b6 f2             	movzx  esi,dl
c0025438:	89 d8                	mov    eax,ebx
c002543a:	89 f2                	mov    edx,esi
c002543c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002543f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025442:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025446:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002544a:	83 e0 00             	and    eax,0x0
c002544d:	09 d0                	or     eax,edx
c002544f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025456:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002545c:	8d 50 01             	lea    edx,[eax+0x1]
c002545f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025462:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025468:	0f b6 d0             	movzx  edx,al
c002546b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002546e:	83 c2 08             	add    edx,0x8
c0025471:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025475:	0f b6 c9             	movzx  ecx,cl
c0025478:	81 c9 00 00 01 00    	or     ecx,0x10000
c002547e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025488:	e8 05 ff ff ff       	call   c0025392 <APIC::getBase()>
c002548d:	83 c4 10             	add    esp,0x10
c0025490:	05 f0 00 00 00       	add    eax,0xf0
c0025495:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025498:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002549b:	8b 00                	mov    eax,DWORD PTR [eax]
c002549d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00254a0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00254a7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00254ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254b1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00254b4:	89 10                	mov    DWORD PTR [eax],edx
c00254b6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00254bd:	a1 d0 ff 02 c0       	mov    eax,ds:0xc002ffd0
c00254c2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00254c5:	7d 7c                	jge    c0025543 <APIC::open(int, int, void*)+0x141>
c00254c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254ca:	8b 04 85 e0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0020]
c00254d1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00254d4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254d7:	8b 04 85 e0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0020]
c00254de:	c1 e8 08             	shr    eax,0x8
c00254e1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00254e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254e8:	8b 04 85 e0 ff 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0020]
c00254ef:	c1 e8 18             	shr    eax,0x18
c00254f2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00254f5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00254f9:	75 40                	jne    c002553b <APIC::open(int, int, void*)+0x139>
c00254fb:	83 ec 0c             	sub    esp,0xc
c00254fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025501:	e8 8c fe ff ff       	call   c0025392 <APIC::getBase()>
c0025506:	83 c4 10             	add    esp,0x10
c0025509:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002550d:	75 07                	jne    c0025516 <APIC::open(int, int, void*)+0x114>
c002550f:	ba 60 03 00 00       	mov    edx,0x360
c0025514:	eb 05                	jmp    c002551b <APIC::open(int, int, void*)+0x119>
c0025516:	ba 50 03 00 00       	mov    edx,0x350
c002551b:	01 d0                	add    eax,edx
c002551d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025520:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025523:	8b 00                	mov    eax,DWORD PTR [eax]
c0025525:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025528:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002552f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025533:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025536:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025539:	89 10                	mov    DWORD PTR [eax],edx
c002553b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002553e:	e9 7a ff ff ff       	jmp    c00254bd <APIC::open(int, int, void*)+0xbb>
c0025543:	b8 00 00 00 00       	mov    eax,0x0
c0025548:	8d 65 f4             	lea    esp,[ebp-0xc]
c002554b:	5b                   	pop    ebx
c002554c:	5e                   	pop    esi
c002554d:	5f                   	pop    edi
c002554e:	5d                   	pop    ebp
c002554f:	c3                   	ret    

c0025550 <IOAPIC::IOAPIC()>:
c0025550:	83 ec 0c             	sub    esp,0xc
c0025553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025557:	83 ec 08             	sub    esp,0x8
c002555a:	68 94 c2 02 c0       	push   0xc002c294
c002555f:	50                   	push   eax
c0025560:	e8 9b e6 fe ff       	call   c0013c00 <Device::Device(char const*)>
c0025565:	83 c4 10             	add    esp,0x10
c0025568:	ba bc c3 02 c0       	mov    edx,0xc002c3bc
c002556d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025571:	89 10                	mov    DWORD PTR [eax],edx
c0025573:	90                   	nop
c0025574:	83 c4 0c             	add    esp,0xc
c0025577:	c3                   	ret    

c0025578 <APIC::APIC()>:
c0025578:	53                   	push   ebx
c0025579:	83 ec 18             	sub    esp,0x18
c002557c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025580:	83 ec 08             	sub    esp,0x8
c0025583:	68 9c c2 02 c0       	push   0xc002c29c
c0025588:	50                   	push   eax
c0025589:	e8 dc ed fe ff       	call   c001436a <InterruptController::InterruptController(char const*)>
c002558e:	83 c4 10             	add    esp,0x10
c0025591:	ba 74 c3 02 c0       	mov    edx,0xc002c374
c0025596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002559a:	89 10                	mov    DWORD PTR [eax],edx
c002559c:	a0 a0 1a 03 c0       	mov    al,ds:0xc0031aa0
c00255a1:	83 f0 01             	xor    eax,0x1
c00255a4:	84 c0                	test   al,al
c00255a6:	0f 84 a1 00 00 00    	je     c002564d <APIC::APIC()+0xd5>
c00255ac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00255b1:	a0 80 00 03 c0       	mov    al,ds:0xc0030080
c00255b6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00255ba:	0f 83 86 00 00 00    	jae    c0025646 <APIC::APIC()+0xce>
c00255c0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00255c8:	83 ec 0c             	sub    esp,0xc
c00255cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00255cf:	e8 c8 9f fe ff       	call   c000f59c <malloc>
c00255d4:	83 c4 10             	add    esp,0x10
c00255d7:	89 c3                	mov    ebx,eax
c00255d9:	83 ec 0c             	sub    esp,0xc
c00255dc:	53                   	push   ebx
c00255dd:	e8 6e ff ff ff       	call   c0025550 <IOAPIC::IOAPIC()>
c00255e2:	83 c4 10             	add    esp,0x10
c00255e5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00255e9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00255ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00255f2:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c00255f9:	a1 60 1a 03 c0       	mov    eax,ds:0xc0031a60
c00255fe:	40                   	inc    eax
c00255ff:	a3 60 1a 03 c0       	mov    ds:0xc0031a60,eax
c0025604:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0025609:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002560f:	83 ec 08             	sub    esp,0x8
c0025612:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025616:	50                   	push   eax
c0025617:	e8 e0 e3 fe ff       	call   c00139fc <Device::addChild(Device*)>
c002561c:	83 c4 10             	add    esp,0x10
c002561f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025623:	8b 00                	mov    eax,DWORD PTR [eax]
c0025625:	83 c0 08             	add    eax,0x8
c0025628:	8b 00                	mov    eax,DWORD PTR [eax]
c002562a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002562f:	6a 00                	push   0x0
c0025631:	6a 00                	push   0x0
c0025633:	52                   	push   edx
c0025634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025638:	ff d0                	call   eax
c002563a:	83 c4 10             	add    esp,0x10
c002563d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025641:	e9 6b ff ff ff       	jmp    c00255b1 <APIC::APIC()+0x39>
c0025646:	c6 05 a0 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aa0,0x1
c002564d:	90                   	nop
c002564e:	83 c4 18             	add    esp,0x18
c0025651:	5b                   	pop    ebx
c0025652:	c3                   	ret    
c0025653:	90                   	nop

c0025654 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025654:	55                   	push   ebp
c0025655:	89 e5                	mov    ebp,esp
c0025657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002565a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025660:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025663:	72 1d                	jb     c0025682 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025668:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025671:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025677:	01 d0                	add    eax,edx
c0025679:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002567c:	73 04                	jae    c0025682 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002567e:	b0 01                	mov    al,0x1
c0025680:	eb 02                	jmp    c0025684 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025682:	b0 00                	mov    al,0x0
c0025684:	5d                   	pop    ebp
c0025685:	c3                   	ret    

c0025686 <IOAPIC::read(int)>:
c0025686:	55                   	push   ebp
c0025687:	89 e5                	mov    ebp,esp
c0025689:	83 ec 10             	sub    esp,0x10
c002568c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002568f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025695:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025698:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002569b:	0f b6 d0             	movzx  edx,al
c002569e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256a1:	89 10                	mov    DWORD PTR [eax],edx
c00256a3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256a6:	83 c0 10             	add    eax,0x10
c00256a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00256ab:	c9                   	leave  
c00256ac:	c3                   	ret    
c00256ad:	90                   	nop

c00256ae <IOAPIC::open(int, int, void*)>:
c00256ae:	55                   	push   ebp
c00256af:	89 e5                	mov    ebp,esp
c00256b1:	57                   	push   edi
c00256b2:	56                   	push   esi
c00256b3:	53                   	push   ebx
c00256b4:	83 ec 0c             	sub    esp,0xc
c00256b7:	83 ec 0c             	sub    esp,0xc
c00256ba:	68 c7 c2 02 c0       	push   0xc002c2c7
c00256bf:	e8 00 cf fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c00256c4:	83 c4 10             	add    esp,0x10
c00256c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00256d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00256dc:	8b 14 85 c0 00 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcff40]
c00256e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00256ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00256f5:	8b 14 85 40 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfec0]
c00256fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025708:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002570e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025711:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025717:	0f b6 f8             	movzx  edi,al
c002571a:	89 d0                	mov    eax,edx
c002571c:	ba 00 00 00 00       	mov    edx,0x0
c0025721:	89 c1                	mov    ecx,eax
c0025723:	80 e5 ff             	and    ch,0xff
c0025726:	89 cb                	mov    ebx,ecx
c0025728:	0f b6 f2             	movzx  esi,dl
c002572b:	89 d8                	mov    eax,ebx
c002572d:	89 f2                	mov    edx,esi
c002572f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025732:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025735:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025739:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002573d:	83 e0 00             	and    eax,0x0
c0025740:	09 d0                	or     eax,edx
c0025742:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025749:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002574f:	8d 50 01             	lea    edx,[eax+0x1]
c0025752:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025755:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002575b:	0f b6 d0             	movzx  edx,al
c002575e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025761:	83 c2 08             	add    edx,0x8
c0025764:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025768:	0f b6 c9             	movzx  ecx,cl
c002576b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025771:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025775:	83 ec 08             	sub    esp,0x8
c0025778:	6a 01                	push   0x1
c002577a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577d:	e8 04 ff ff ff       	call   c0025686 <IOAPIC::read(int)>
c0025782:	83 c4 10             	add    esp,0x10
c0025785:	c1 f8 10             	sar    eax,0x10
c0025788:	0f b6 c0             	movzx  eax,al
c002578b:	8d 50 01             	lea    edx,[eax+0x1]
c002578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025791:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025797:	b8 00 00 00 00       	mov    eax,0x0
c002579c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002579f:	5b                   	pop    ebx
c00257a0:	5e                   	pop    esi
c00257a1:	5f                   	pop    edi
c00257a2:	5d                   	pop    ebp
c00257a3:	c3                   	ret    

c00257a4 <IOAPIC::write(int, int)>:
c00257a4:	55                   	push   ebp
c00257a5:	89 e5                	mov    ebp,esp
c00257a7:	83 ec 10             	sub    esp,0x10
c00257aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257b3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257b9:	0f b6 d0             	movzx  edx,al
c00257bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257bf:	89 10                	mov    DWORD PTR [eax],edx
c00257c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257c4:	8d 50 10             	lea    edx,[eax+0x10]
c00257c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257ca:	89 02                	mov    DWORD PTR [edx],eax
c00257cc:	90                   	nop
c00257cd:	c9                   	leave  
c00257ce:	c3                   	ret    
c00257cf:	90                   	nop

c00257d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00257d0:	55                   	push   ebp
c00257d1:	89 e5                	mov    ebp,esp
c00257d3:	53                   	push   ebx
c00257d4:	83 ec 2c             	sub    esp,0x2c
c00257d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257da:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00257dd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00257e0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00257e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257e9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00257ec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00257ef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00257f2:	88 d8                	mov    al,bl
c00257f4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00257f7:	88 c8                	mov    al,cl
c00257f9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00257fc:	88 d0                	mov    al,dl
c00257fe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025801:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025805:	83 c0 08             	add    eax,0x8
c0025808:	01 c0                	add    eax,eax
c002580a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002580d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025811:	83 c0 08             	add    eax,0x8
c0025814:	01 c0                	add    eax,eax
c0025816:	40                   	inc    eax
c0025817:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002581a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002581d:	50                   	push   eax
c002581e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025821:	e8 60 fe ff ff       	call   c0025686 <IOAPIC::read(int)>
c0025826:	83 c4 08             	add    esp,0x8
c0025829:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002582c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025833:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025836:	c1 e0 18             	shl    eax,0x18
c0025839:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002583c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002583f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025842:	52                   	push   edx
c0025843:	50                   	push   eax
c0025844:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025847:	e8 58 ff ff ff       	call   c00257a4 <IOAPIC::write(int, int)>
c002584c:	83 c4 0c             	add    esp,0xc
c002584f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025852:	50                   	push   eax
c0025853:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025856:	e8 2b fe ff ff       	call   c0025686 <IOAPIC::read(int)>
c002585b:	83 c4 08             	add    esp,0x8
c002585e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025861:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025868:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002586f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025876:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002587a:	74 09                	je     c0025885 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002587c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025883:	eb 07                	jmp    c002588c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025885:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002588c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025890:	74 09                	je     c002589b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025892:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025899:	eb 07                	jmp    c00258a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002589b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00258a2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00258a9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00258ad:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00258b0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00258b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258b6:	52                   	push   edx
c00258b7:	50                   	push   eax
c00258b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258bb:	e8 e4 fe ff ff       	call   c00257a4 <IOAPIC::write(int, int)>
c00258c0:	83 c4 0c             	add    esp,0xc
c00258c3:	90                   	nop
c00258c4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00258c7:	c9                   	leave  
c00258c8:	c3                   	ret    
c00258c9:	90                   	nop

c00258ca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00258ca:	55                   	push   ebp
c00258cb:	89 e5                	mov    ebp,esp
c00258cd:	57                   	push   edi
c00258ce:	56                   	push   esi
c00258cf:	53                   	push   ebx
c00258d0:	83 ec 2c             	sub    esp,0x2c
c00258d3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258d6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258d9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00258dd:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00258e1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00258e5:	74 5a                	je     c0025941 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00258e7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00258eb:	7f 44                	jg     c0025931 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00258ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258f0:	05 60 c9 02 c0       	add    eax,0xc002c960
c00258f5:	8a 00                	mov    al,BYTE PTR [eax]
c00258f7:	0f b6 c0             	movzx  eax,al
c00258fa:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00258fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025900:	66 8b 84 00 60 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcffa0]
c0025908:	0f b7 c0             	movzx  eax,ax
c002590b:	83 e0 02             	and    eax,0x2
c002590e:	85 c0                	test   eax,eax
c0025910:	74 04                	je     c0025916 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025912:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025916:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025919:	66 8b 84 00 60 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcffa0]
c0025921:	0f b7 c0             	movzx  eax,ax
c0025924:	83 e0 08             	and    eax,0x8
c0025927:	85 c0                	test   eax,eax
c0025929:	74 16                	je     c0025941 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002592b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002592f:	eb 10                	jmp    c0025941 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025931:	83 ec 0c             	sub    esp,0xc
c0025934:	68 d8 c2 02 c0       	push   0xc002c2d8
c0025939:	e8 f1 43 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c002593e:	83 c4 10             	add    esp,0x10
c0025941:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025945:	a1 60 1a 03 c0       	mov    eax,ds:0xc0031a60
c002594a:	83 ec 08             	sub    esp,0x8
c002594d:	50                   	push   eax
c002594e:	68 10 c3 02 c0       	push   0xc002c310
c0025953:	e8 6c cc fe ff       	call   c00125c4 <Dbg::kprintf(char const*, ...)>
c0025958:	83 c4 10             	add    esp,0x10
c002595b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025962:	a1 60 1a 03 c0       	mov    eax,ds:0xc0031a60
c0025967:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002596a:	7d 67                	jge    c00259d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002596c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002596f:	8b 04 85 80 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce580]
c0025976:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025979:	83 ec 08             	sub    esp,0x8
c002597c:	52                   	push   edx
c002597d:	50                   	push   eax
c002597e:	e8 d1 fc ff ff       	call   c0025654 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025983:	83 c4 10             	add    esp,0x10
c0025986:	84 c0                	test   al,al
c0025988:	74 44                	je     c00259ce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002598a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002598d:	8b 1c 85 80 1a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce580]
c0025994:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025998:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002599b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002599f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259a2:	83 c0 20             	add    eax,0x20
c00259a5:	0f b6 f0             	movzx  esi,al
c00259a8:	b8 00 00 00 00       	mov    eax,0x0
c00259ad:	99                   	cdq    
c00259ae:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00259b1:	0f b6 c9             	movzx  ecx,cl
c00259b4:	83 ec 04             	sub    esp,0x4
c00259b7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00259ba:	57                   	push   edi
c00259bb:	56                   	push   esi
c00259bc:	52                   	push   edx
c00259bd:	50                   	push   eax
c00259be:	51                   	push   ecx
c00259bf:	53                   	push   ebx
c00259c0:	e8 0b fe ff ff       	call   c00257d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00259c5:	83 c4 20             	add    esp,0x20
c00259c8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00259cc:	eb 05                	jmp    c00259d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259ce:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00259d1:	eb 8f                	jmp    c0025962 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00259d3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00259d6:	83 f0 01             	xor    eax,0x1
c00259d9:	84 c0                	test   al,al
c00259db:	74 10                	je     c00259ed <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00259dd:	83 ec 0c             	sub    esp,0xc
c00259e0:	68 27 c3 02 c0       	push   0xc002c327
c00259e5:	e8 45 43 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00259ea:	83 c4 10             	add    esp,0x10
c00259ed:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00259f1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00259f8:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00259fc:	7f 65                	jg     c0025a63 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00259fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a04:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a0b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a0e:	01 ca                	add    edx,ecx
c0025a10:	83 c2 54             	add    edx,0x54
c0025a13:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a17:	85 c0                	test   eax,eax
c0025a19:	75 43                	jne    c0025a5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a21:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a28:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a2b:	01 ca                	add    edx,ecx
c0025a2d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a30:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a33:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a3d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a44:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a47:	01 ca                	add    edx,ecx
c0025a49:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025a4f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025a52:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a59:	83 e8 20             	sub    eax,0x20
c0025a5c:	eb 1a                	jmp    c0025a78 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025a5e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a61:	eb 95                	jmp    c00259f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a63:	83 ec 0c             	sub    esp,0xc
c0025a66:	68 34 c3 02 c0       	push   0xc002c334
c0025a6b:	e8 bf 42 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0025a70:	83 c4 10             	add    esp,0x10
c0025a73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025a78:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a7b:	5b                   	pop    ebx
c0025a7c:	5e                   	pop    esi
c0025a7d:	5f                   	pop    edi
c0025a7e:	5d                   	pop    ebp
c0025a7f:	c3                   	ret    

c0025a80 <PIC::disable()>:
c0025a80:	55                   	push   ebp
c0025a81:	89 e5                	mov    ebp,esp
c0025a83:	83 ec 10             	sub    esp,0x10
c0025a86:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025a8c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025a90:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025a93:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025a97:	ee                   	out    dx,al
c0025a98:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025a9e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025aa2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025aa5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025aa9:	ee                   	out    dx,al
c0025aaa:	90                   	nop
c0025aab:	c9                   	leave  
c0025aac:	c3                   	ret    
c0025aad:	90                   	nop

c0025aae <PIC::close(int, int, void*)>:
c0025aae:	55                   	push   ebp
c0025aaf:	89 e5                	mov    ebp,esp
c0025ab1:	83 ec 08             	sub    esp,0x8
c0025ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ab9:	83 c0 3c             	add    eax,0x3c
c0025abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025abe:	83 ec 0c             	sub    esp,0xc
c0025ac1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ac4:	ff d0                	call   eax
c0025ac6:	83 c4 10             	add    esp,0x10
c0025ac9:	b8 00 00 00 00       	mov    eax,0x0
c0025ace:	c9                   	leave  
c0025acf:	c3                   	ret    

c0025ad0 <PIC::PIC()>:
c0025ad0:	83 ec 0c             	sub    esp,0xc
c0025ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad7:	83 ec 08             	sub    esp,0x8
c0025ada:	68 e0 c3 02 c0       	push   0xc002c3e0
c0025adf:	50                   	push   eax
c0025ae0:	e8 85 e8 fe ff       	call   c001436a <InterruptController::InterruptController(char const*)>
c0025ae5:	83 c4 10             	add    esp,0x10
c0025ae8:	ba 0c c4 02 c0       	mov    edx,0xc002c40c
c0025aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af1:	89 10                	mov    DWORD PTR [eax],edx
c0025af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025afd:	0f b6 d0             	movzx  edx,al
c0025b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b04:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b15:	0f b6 d0             	movzx  edx,al
c0025b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b2b:	8d 50 01             	lea    edx,[eax+0x1]
c0025b2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b32:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b38:	0f b6 d0             	movzx  edx,al
c0025b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b3f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b43:	83 e1 3f             	and    ecx,0x3f
c0025b46:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b54:	0f b6 d0             	movzx  edx,al
c0025b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b5b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b6c:	0f b6 d0             	movzx  edx,al
c0025b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b82:	8d 50 01             	lea    edx,[eax+0x1]
c0025b85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b89:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b8f:	0f b6 d0             	movzx  edx,al
c0025b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b96:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b9a:	83 e1 3f             	and    ecx,0x3f
c0025b9d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ba1:	90                   	nop
c0025ba2:	83 c4 0c             	add    esp,0xc
c0025ba5:	c3                   	ret    

c0025ba6 <PIC::ioWait()>:
c0025ba6:	eb 00                	jmp    c0025ba8 <PIC::ioWait()+0x2>
c0025ba8:	eb 00                	jmp    c0025baa <PIC::ioWait()+0x4>
c0025baa:	90                   	nop
c0025bab:	c3                   	ret    

c0025bac <PIC::getIRQReg(int)>:
c0025bac:	55                   	push   ebp
c0025bad:	89 e5                	mov    ebp,esp
c0025baf:	83 ec 10             	sub    esp,0x10
c0025bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb5:	0f b6 c0             	movzx  eax,al
c0025bb8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bbe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025bc1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bc4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bc8:	ee                   	out    dx,al
c0025bc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bcc:	0f b6 c0             	movzx  eax,al
c0025bcf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025bd5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025bd8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025bdb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025bdf:	ee                   	out    dx,al
c0025be0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025be6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025bea:	89 c2                	mov    edx,eax
c0025bec:	ec                   	in     al,dx
c0025bed:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025bf0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bf3:	0f b6 c0             	movzx  eax,al
c0025bf6:	c1 e0 08             	shl    eax,0x8
c0025bf9:	89 c1                	mov    ecx,eax
c0025bfb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025c01:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025c05:	89 c2                	mov    edx,eax
c0025c07:	ec                   	in     al,dx
c0025c08:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025c0b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c0e:	0f b6 c0             	movzx  eax,al
c0025c11:	09 c8                	or     eax,ecx
c0025c13:	c9                   	leave  
c0025c14:	c3                   	ret    
c0025c15:	90                   	nop

c0025c16 <PIC::eoi(unsigned char)>:
c0025c16:	55                   	push   ebp
c0025c17:	89 e5                	mov    ebp,esp
c0025c19:	83 ec 14             	sub    esp,0x14
c0025c1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c1f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025c22:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c26:	75 1e                	jne    c0025c46 <PIC::eoi(unsigned char)+0x30>
c0025c28:	6a 0b                	push   0xb
c0025c2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c2d:	e8 7a ff ff ff       	call   c0025bac <PIC::getIRQReg(int)>
c0025c32:	83 c4 08             	add    esp,0x8
c0025c35:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025c39:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025c3d:	25 80 00 00 00       	and    eax,0x80
c0025c42:	85 c0                	test   eax,eax
c0025c44:	74 5f                	je     c0025ca5 <PIC::eoi(unsigned char)+0x8f>
c0025c46:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025c4a:	75 2d                	jne    c0025c79 <PIC::eoi(unsigned char)+0x63>
c0025c4c:	6a 0b                	push   0xb
c0025c4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c51:	e8 56 ff ff ff       	call   c0025bac <PIC::getIRQReg(int)>
c0025c56:	83 c4 08             	add    esp,0x8
c0025c59:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025c5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c60:	66 85 c0             	test   ax,ax
c0025c63:	78 14                	js     c0025c79 <PIC::eoi(unsigned char)+0x63>
c0025c65:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025c6b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025c6f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c72:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c76:	ee                   	out    dx,al
c0025c77:	eb 2d                	jmp    c0025ca6 <PIC::eoi(unsigned char)+0x90>
c0025c79:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c7d:	76 12                	jbe    c0025c91 <PIC::eoi(unsigned char)+0x7b>
c0025c7f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c85:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025c89:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c8c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c90:	ee                   	out    dx,al
c0025c91:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025c97:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025c9b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025c9e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ca2:	ee                   	out    dx,al
c0025ca3:	eb 01                	jmp    c0025ca6 <PIC::eoi(unsigned char)+0x90>
c0025ca5:	90                   	nop
c0025ca6:	c9                   	leave  
c0025ca7:	c3                   	ret    

c0025ca8 <PIC::remap()>:
c0025ca8:	55                   	push   ebp
c0025ca9:	89 e5                	mov    ebp,esp
c0025cab:	83 ec 48             	sub    esp,0x48
c0025cae:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025cb5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025cbc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025cc2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025cc5:	89 c2                	mov    edx,eax
c0025cc7:	ec                   	in     al,dx
c0025cc8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025ccb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025cce:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025cd1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025cd7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025cda:	89 c2                	mov    edx,eax
c0025cdc:	ec                   	in     al,dx
c0025cdd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025ce0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025ce3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025ce6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025cec:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025cf0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025cf3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025cf6:	ee                   	out    dx,al
c0025cf7:	83 ec 0c             	sub    esp,0xc
c0025cfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cfd:	e8 a4 fe ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025d02:	83 c4 10             	add    esp,0x10
c0025d05:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025d0b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025d0f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025d12:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d15:	ee                   	out    dx,al
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d1c:	e8 85 fe ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025d21:	83 c4 10             	add    esp,0x10
c0025d24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d27:	0f b6 c0             	movzx  eax,al
c0025d2a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025d30:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025d33:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025d36:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025d39:	ee                   	out    dx,al
c0025d3a:	83 ec 0c             	sub    esp,0xc
c0025d3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d40:	e8 61 fe ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025d45:	83 c4 10             	add    esp,0x10
c0025d48:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d4b:	0f b6 c0             	movzx  eax,al
c0025d4e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025d54:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025d57:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025d5a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025d5d:	ee                   	out    dx,al
c0025d5e:	83 ec 0c             	sub    esp,0xc
c0025d61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d64:	e8 3d fe ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025d69:	83 c4 10             	add    esp,0x10
c0025d6c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025d72:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025d76:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025d79:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025d7c:	ee                   	out    dx,al
c0025d7d:	83 ec 0c             	sub    esp,0xc
c0025d80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d83:	e8 1e fe ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025d88:	83 c4 10             	add    esp,0x10
c0025d8b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025d91:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025d95:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025d98:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d9b:	ee                   	out    dx,al
c0025d9c:	83 ec 0c             	sub    esp,0xc
c0025d9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025da2:	e8 ff fd ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025da7:	83 c4 10             	add    esp,0x10
c0025daa:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025db0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025db4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025db7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025dba:	ee                   	out    dx,al
c0025dbb:	83 ec 0c             	sub    esp,0xc
c0025dbe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dc1:	e8 e0 fd ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025dc6:	83 c4 10             	add    esp,0x10
c0025dc9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025dcf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025dd3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025dd6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025dd9:	ee                   	out    dx,al
c0025dda:	83 ec 0c             	sub    esp,0xc
c0025ddd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de0:	e8 c1 fd ff ff       	call   c0025ba6 <PIC::ioWait()>
c0025de5:	83 c4 10             	add    esp,0x10
c0025de8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025dec:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025df2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025df5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025df8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025dfb:	ee                   	out    dx,al
c0025dfc:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025e00:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025e06:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025e09:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025e0c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025e0f:	ee                   	out    dx,al
c0025e10:	90                   	nop
c0025e11:	c9                   	leave  
c0025e12:	c3                   	ret    
c0025e13:	90                   	nop

c0025e14 <PIC::open(int, int, void*)>:
c0025e14:	55                   	push   ebp
c0025e15:	89 e5                	mov    ebp,esp
c0025e17:	83 ec 18             	sub    esp,0x18
c0025e1a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025e20:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025e24:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e27:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e2b:	ee                   	out    dx,al
c0025e2c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025e32:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025e36:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e39:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e3d:	ee                   	out    dx,al
c0025e3e:	83 ec 0c             	sub    esp,0xc
c0025e41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e44:	e8 5f fe ff ff       	call   c0025ca8 <PIC::remap()>
c0025e49:	83 c4 10             	add    esp,0x10
c0025e4c:	b8 00 00 00 00       	mov    eax,0x0
c0025e51:	c9                   	leave  
c0025e52:	c3                   	ret    
c0025e53:	90                   	nop

c0025e54 <APICTimer::close(int, int, void*)>:
c0025e54:	b8 00 00 00 00       	mov    eax,0x0
c0025e59:	c3                   	ret    

c0025e5a <apicTimerHandler(regs*, void*)>:
c0025e5a:	83 ec 0c             	sub    esp,0xc
c0025e5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e61:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e63:	99                   	cdq    
c0025e64:	52                   	push   edx
c0025e65:	50                   	push   eax
c0025e66:	6a 00                	push   0x0
c0025e68:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025e6d:	e8 92 07 00 00       	call   c0026604 <__udivdi3>
c0025e72:	83 c4 10             	add    esp,0x10
c0025e75:	83 ec 08             	sub    esp,0x8
c0025e78:	52                   	push   edx
c0025e79:	50                   	push   eax
c0025e7a:	e8 42 06 ff ff       	call   c00164c1 <timerHandler(unsigned long long)>
c0025e7f:	83 c4 10             	add    esp,0x10
c0025e82:	90                   	nop
c0025e83:	83 c4 0c             	add    esp,0xc
c0025e86:	c3                   	ret    
c0025e87:	90                   	nop

c0025e88 <APICTimer::write(int)>:
c0025e88:	53                   	push   ebx
c0025e89:	83 ec 28             	sub    esp,0x28
c0025e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e90:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025e94:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025e9a:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0025e9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ea5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025eab:	83 ec 0c             	sub    esp,0xc
c0025eae:	50                   	push   eax
c0025eaf:	e8 de f4 ff ff       	call   c0025392 <APIC::getBase()>
c0025eb4:	83 c4 10             	add    esp,0x10
c0025eb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ebb:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c0025ec0:	8b 15 74 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd74
c0025ec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025eca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025ece:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ed2:	05 e0 03 00 00       	add    eax,0x3e0
c0025ed7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ee1:	05 80 03 00 00       	add    eax,0x380
c0025ee6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025eec:	fb                   	sti    
c0025eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ef5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025efa:	83 d2 00             	adc    edx,0x0
c0025efd:	89 c1                	mov    ecx,eax
c0025eff:	89 d3                	mov    ebx,edx
c0025f01:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c0025f06:	8b 15 74 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd74
c0025f0c:	39 c8                	cmp    eax,ecx
c0025f0e:	89 d0                	mov    eax,edx
c0025f10:	19 d8                	sbb    eax,ebx
c0025f12:	73 02                	jae    c0025f16 <APICTimer::write(int)+0x8e>
c0025f14:	eb d7                	jmp    c0025eed <APICTimer::write(int)+0x65>
c0025f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f1a:	05 20 03 00 00       	add    eax,0x320
c0025f1f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f29:	05 90 03 00 00       	add    eax,0x390
c0025f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f30:	f7 d0                	not    eax
c0025f32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025f36:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f3e:	ba 00 00 00 00       	mov    edx,0x0
c0025f43:	f7 f3                	div    ebx
c0025f45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f53:	0d 00 00 02 00       	or     eax,0x20000
c0025f58:	89 c2                	mov    edx,eax
c0025f5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f5e:	05 20 03 00 00       	add    eax,0x320
c0025f63:	89 10                	mov    DWORD PTR [eax],edx
c0025f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f69:	05 e0 03 00 00       	add    eax,0x3e0
c0025f6e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f78:	05 80 03 00 00       	add    eax,0x380
c0025f7d:	89 c2                	mov    edx,eax
c0025f7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025f83:	89 02                	mov    DWORD PTR [edx],eax
c0025f85:	90                   	nop
c0025f86:	83 c4 28             	add    esp,0x28
c0025f89:	5b                   	pop    ebx
c0025f8a:	c3                   	ret    
c0025f8b:	90                   	nop

c0025f8c <APICTimer::open(int, int, void*)>:
c0025f8c:	57                   	push   edi
c0025f8d:	56                   	push   esi
c0025f8e:	53                   	push   ebx
c0025f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f93:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f95:	83 c0 24             	add    eax,0x24
c0025f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f9a:	83 ec 08             	sub    esp,0x8
c0025f9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fa5:	ff d0                	call   eax
c0025fa7:	83 c4 10             	add    esp,0x10
c0025faa:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0025faf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fb5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fbb:	83 ec 0c             	sub    esp,0xc
c0025fbe:	50                   	push   eax
c0025fbf:	e8 ce f3 ff ff       	call   c0025392 <APIC::getBase()>
c0025fc4:	83 c4 10             	add    esp,0x10
c0025fc7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fd7:	0f b6 f8             	movzx  edi,al
c0025fda:	89 d0                	mov    eax,edx
c0025fdc:	ba 00 00 00 00       	mov    edx,0x0
c0025fe1:	89 c1                	mov    ecx,eax
c0025fe3:	80 e5 ff             	and    ch,0xff
c0025fe6:	89 cb                	mov    ebx,ecx
c0025fe8:	0f b6 f2             	movzx  esi,dl
c0025feb:	89 d8                	mov    eax,ebx
c0025fed:	89 f2                	mov    edx,esi
c0025fef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ff3:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ff6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ffa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ffe:	83 e0 00             	and    eax,0x0
c0026001:	09 d0                	or     eax,edx
c0026003:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026011:	8d 50 01             	lea    edx,[eax+0x1]
c0026014:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026018:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002601e:	0f b6 d0             	movzx  edx,al
c0026021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026025:	83 c2 08             	add    edx,0x8
c0026028:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002602c:	0f b6 c9             	movzx  ecx,cl
c002602f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026035:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026041:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002604b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002604f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026055:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026059:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002605f:	83 ec 0c             	sub    esp,0xc
c0026062:	51                   	push   ecx
c0026063:	6a 01                	push   0x1
c0026065:	68 5a 5e 02 c0       	push   0xc0025e5a
c002606a:	52                   	push   edx
c002606b:	50                   	push   eax
c002606c:	e8 03 d9 fe ff       	call   c0013974 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026071:	83 c4 20             	add    esp,0x20
c0026074:	89 c2                	mov    edx,eax
c0026076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002607a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026080:	b8 00 00 00 00       	mov    eax,0x0
c0026085:	5b                   	pop    ebx
c0026086:	5e                   	pop    esi
c0026087:	5f                   	pop    edi
c0026088:	c3                   	ret    
c0026089:	90                   	nop

c002608a <APICTimer::APICTimer()>:
c002608a:	83 ec 0c             	sub    esp,0xc
c002608d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026091:	83 ec 08             	sub    esp,0x8
c0026094:	68 4c c4 02 c0       	push   0xc002c44c
c0026099:	50                   	push   eax
c002609a:	e8 93 03 ff ff       	call   c0016432 <Timer::Timer(char const*)>
c002609f:	83 c4 10             	add    esp,0x10
c00260a2:	ba 60 c4 02 c0       	mov    edx,0xc002c460
c00260a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ab:	89 10                	mov    DWORD PTR [eax],edx
c00260ad:	90                   	nop
c00260ae:	83 c4 0c             	add    esp,0xc
c00260b1:	c3                   	ret    

c00260b2 <PIT::write(int)>:
c00260b2:	83 ec 10             	sub    esp,0x10
c00260b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00260c7:	a3 a4 1a 03 c0       	mov    ds:0xc0031aa4,eax
c00260cc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00260d1:	99                   	cdq    
c00260d2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00260d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00260da:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00260e1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00260e6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00260ea:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00260ef:	ee                   	out    dx,al
c00260f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260f4:	0f b6 c0             	movzx  eax,al
c00260f7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00260fe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026102:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026106:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002610b:	ee                   	out    dx,al
c002610c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026110:	c1 f8 08             	sar    eax,0x8
c0026113:	0f b6 c0             	movzx  eax,al
c0026116:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002611d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026121:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026125:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002612a:	ee                   	out    dx,al
c002612b:	90                   	nop
c002612c:	83 c4 10             	add    esp,0x10
c002612f:	c3                   	ret    

c0026130 <pitHandler(regs*, void*)>:
c0026130:	83 ec 0c             	sub    esp,0xc
c0026133:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c0026138:	99                   	cdq    
c0026139:	52                   	push   edx
c002613a:	50                   	push   eax
c002613b:	6a 00                	push   0x0
c002613d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026142:	e8 bd 04 00 00       	call   c0026604 <__udivdi3>
c0026147:	83 c4 10             	add    esp,0x10
c002614a:	83 ec 08             	sub    esp,0x8
c002614d:	52                   	push   edx
c002614e:	50                   	push   eax
c002614f:	e8 6d 03 ff ff       	call   c00164c1 <timerHandler(unsigned long long)>
c0026154:	83 c4 10             	add    esp,0x10
c0026157:	90                   	nop
c0026158:	83 c4 0c             	add    esp,0xc
c002615b:	c3                   	ret    

c002615c <PIT::open(int, int, void*)>:
c002615c:	83 ec 0c             	sub    esp,0xc
c002615f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026163:	8b 00                	mov    eax,DWORD PTR [eax]
c0026165:	83 c0 24             	add    eax,0x24
c0026168:	8b 00                	mov    eax,DWORD PTR [eax]
c002616a:	83 ec 08             	sub    esp,0x8
c002616d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026175:	ff d0                	call   eax
c0026177:	83 c4 10             	add    esp,0x10
c002617a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617e:	83 ec 0c             	sub    esp,0xc
c0026181:	6a 00                	push   0x0
c0026183:	6a 01                	push   0x1
c0026185:	68 30 61 02 c0       	push   0xc0026130
c002618a:	6a 00                	push   0x0
c002618c:	50                   	push   eax
c002618d:	e8 e2 d7 fe ff       	call   c0013974 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026192:	83 c4 20             	add    esp,0x20
c0026195:	89 c2                	mov    edx,eax
c0026197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261a1:	b8 00 00 00 00       	mov    eax,0x0
c00261a6:	83 c4 0c             	add    esp,0xc
c00261a9:	c3                   	ret    

c00261aa <PIT::close(int, int, void*)>:
c00261aa:	83 ec 0c             	sub    esp,0xc
c00261ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00261bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261bf:	6a 01                	push   0x1
c00261c1:	68 30 61 02 c0       	push   0xc0026130
c00261c6:	6a 00                	push   0x0
c00261c8:	50                   	push   eax
c00261c9:	e8 f0 d7 fe ff       	call   c00139be <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00261ce:	83 c4 10             	add    esp,0x10
c00261d1:	b8 00 00 00 00       	mov    eax,0x0
c00261d6:	83 c4 0c             	add    esp,0xc
c00261d9:	c3                   	ret    

c00261da <PIT::PIT()>:
c00261da:	83 ec 0c             	sub    esp,0xc
c00261dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e1:	83 ec 08             	sub    esp,0x8
c00261e4:	68 88 c4 02 c0       	push   0xc002c488
c00261e9:	50                   	push   eax
c00261ea:	e8 43 02 ff ff       	call   c0016432 <Timer::Timer(char const*)>
c00261ef:	83 c4 10             	add    esp,0x10
c00261f2:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c00261f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261fb:	89 10                	mov    DWORD PTR [eax],edx
c00261fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026201:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026207:	0f b6 d0             	movzx  edx,al
c002620a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026219:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002621f:	0f b6 d0             	movzx  edx,al
c0026222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026226:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002622b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026235:	8d 50 01             	lea    edx,[eax+0x1]
c0026238:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002623c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026242:	0f b6 d0             	movzx  edx,al
c0026245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026249:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002624d:	83 e1 3f             	and    ecx,0x3f
c0026250:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026254:	90                   	nop
c0026255:	83 c4 0c             	add    esp,0xc
c0026258:	c3                   	ret    
c0026259:	66 90                	xchg   ax,ax
c002625b:	66 90                	xchg   ax,ax
c002625d:	66 90                	xchg   ax,ax
c002625f:	90                   	nop

c0026260 <avxDetect>:
c0026260:	b8 00 00 00 00       	mov    eax,0x0
c0026265:	c3                   	ret    

c0026266 <avxSave>:
c0026266:	c3                   	ret    

c0026267 <avxLoad>:
c0026267:	c3                   	ret    

c0026268 <avxInit>:
c0026268:	c3                   	ret    

c0026269 <avxClose>:
c0026269:	c3                   	ret    

c002626a <wouldSheSayYes>:
c002626a:	c3                   	ret    
c002626b:	49                   	dec    ecx
c002626c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026270:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026274:	75 20                	jne    c0026296 <sseDetect.noSSE+0x1>
c0026276:	4e                   	dec    esi
c0026277:	79 61                	jns    c00262da <x87Detect+0x14>
c0026279:	68 2e 2e 2e 00       	push   0x2e2e2e
c002627e:	66 90                	xchg   ax,ax

c0026280 <absolutelyNoChanceInHell>:
c0026280:	b8 01 00 00 00       	mov    eax,0x1
c0026285:	0f a2                	cpuid  
c0026287:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002628d:	74 06                	je     c0026295 <sseDetect.noSSE>
c002628f:	b8 01 00 00 00       	mov    eax,0x1
c0026294:	c3                   	ret    

c0026295 <sseDetect.noSSE>:
c0026295:	31 c0                	xor    eax,eax
c0026297:	c3                   	ret    

c0026298 <sseSave>:
c0026298:	0f ae 44 24 04       	fxsave [esp+0x4]
c002629d:	c3                   	ret    

c002629e <sseLoad>:
c002629e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00262a3:	c3                   	ret    

c00262a4 <sseInit>:
c00262a4:	e8 49 00 00 00       	call   c00262f2 <x87Init>
c00262a9:	0f 20 e0             	mov    eax,cr4
c00262ac:	66 0d 00 06          	or     ax,0x600
c00262b0:	0f 22 e0             	mov    cr4,eax
c00262b3:	c3                   	ret    

c00262b4 <sseClose>:
c00262b4:	c3                   	ret    
c00262b5:	66 90                	xchg   ax,ax
c00262b7:	66 90                	xchg   ax,ax
c00262b9:	66 90                	xchg   ax,ax
c00262bb:	66 90                	xchg   ax,ax
c00262bd:	66 90                	xchg   ax,ax
c00262bf:	90                   	nop

c00262c0 <value_37F>:
c00262c0:	7f 03                	jg     c00262c5 <value_37A+0x1>

c00262c2 <value_37E>:
c00262c2:	7e 03                	jle    c00262c7 <x87Detect+0x1>

c00262c4 <value_37A>:
c00262c4:	7a 03                	jp     c00262c9 <x87Detect+0x3>

c00262c6 <x87Detect>:
c00262c6:	b8 01 00 00 00       	mov    eax,0x1
c00262cb:	0f a2                	cpuid  
c00262cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00262d3:	74 06                	je     c00262db <x87Detect.nox87>
c00262d5:	b8 01 00 00 00       	mov    eax,0x1
c00262da:	c3                   	ret    

c00262db <x87Detect.nox87>:
c00262db:	b8 00 00 00 00       	mov    eax,0x0
c00262e0:	c3                   	ret    

c00262e1 <x87Save>:
c00262e1:	55                   	push   ebp
c00262e2:	89 e5                	mov    ebp,esp
c00262e4:	9b dd 75 08          	fsave  [ebp+0x8]
c00262e8:	c9                   	leave  
c00262e9:	c3                   	ret    

c00262ea <x87Load>:
c00262ea:	55                   	push   ebp
c00262eb:	89 e5                	mov    ebp,esp
c00262ed:	dd 65 08             	frstor [ebp+0x8]
c00262f0:	c9                   	leave  
c00262f1:	c3                   	ret    

c00262f2 <x87Init>:
c00262f2:	9b db e3             	finit  
c00262f5:	0f 20 c0             	mov    eax,cr0
c00262f8:	66 25 fb ff          	and    ax,0xfffb
c00262fc:	66 0d 22 00          	or     ax,0x22
c0026300:	0f 22 c0             	mov    cr0,eax
c0026303:	0f 06                	clts   
c0026305:	d9 2d c4 62 02 c0    	fldcw  WORD PTR ds:0xc00262c4
c002630b:	c3                   	ret    

c002630c <x87Close>:
c002630c:	c3                   	ret    
c002630d:	66 90                	xchg   ax,ax
c002630f:	90                   	nop

c0026310 <__do_global_ctors_aux>:
c0026310:	a1 04 8f 02 c0       	mov    eax,ds:0xc0028f04
c0026315:	83 f8 ff             	cmp    eax,0xffffffff
c0026318:	74 1a                	je     c0026334 <__do_global_ctors_aux+0x24>
c002631a:	55                   	push   ebp
c002631b:	89 e5                	mov    ebp,esp
c002631d:	53                   	push   ebx
c002631e:	52                   	push   edx
c002631f:	bb 04 8f 02 c0       	mov    ebx,0xc0028f04
c0026324:	ff d0                	call   eax
c0026326:	83 eb 04             	sub    ebx,0x4
c0026329:	8b 03                	mov    eax,DWORD PTR [ebx]
c002632b:	83 f8 ff             	cmp    eax,0xffffffff
c002632e:	75 f4                	jne    c0026324 <__do_global_ctors_aux+0x14>
c0026330:	58                   	pop    eax
c0026331:	5b                   	pop    ebx
c0026332:	5d                   	pop    ebp
c0026333:	c3                   	ret    
c0026334:	c3                   	ret    
c0026335:	66 90                	xchg   ax,ax
c0026337:	90                   	nop

c0026338 <__divdi3>:
c0026338:	55                   	push   ebp
c0026339:	57                   	push   edi
c002633a:	56                   	push   esi
c002633b:	53                   	push   ebx
c002633c:	83 ec 1c             	sub    esp,0x1c
c002633f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026343:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026347:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002634a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002634e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026352:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026356:	85 db                	test   ebx,ebx
c0026358:	0f 88 8e 00 00 00    	js     c00263ec <__divdi3+0xb4>
c002635e:	89 dd                	mov    ebp,ebx
c0026360:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026368:	89 d3                	mov    ebx,edx
c002636a:	85 d2                	test   edx,edx
c002636c:	79 0d                	jns    c002637b <__divdi3+0x43>
c002636e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026372:	f7 d8                	neg    eax
c0026374:	83 d2 00             	adc    edx,0x0
c0026377:	f7 da                	neg    edx
c0026379:	89 d3                	mov    ebx,edx
c002637b:	89 c7                	mov    edi,eax
c002637d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026380:	85 db                	test   ebx,ebx
c0026382:	75 48                	jne    c00263cc <__divdi3+0x94>
c0026384:	39 ef                	cmp    edi,ebp
c0026386:	76 24                	jbe    c00263ac <__divdi3+0x74>
c0026388:	89 ea                	mov    edx,ebp
c002638a:	f7 f7                	div    edi
c002638c:	89 c1                	mov    ecx,eax
c002638e:	31 f6                	xor    esi,esi
c0026390:	89 c8                	mov    eax,ecx
c0026392:	89 f2                	mov    edx,esi
c0026394:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026398:	85 c9                	test   ecx,ecx
c002639a:	74 07                	je     c00263a3 <__divdi3+0x6b>
c002639c:	f7 d8                	neg    eax
c002639e:	83 d2 00             	adc    edx,0x0
c00263a1:	f7 da                	neg    edx
c00263a3:	83 c4 1c             	add    esp,0x1c
c00263a6:	5b                   	pop    ebx
c00263a7:	5e                   	pop    esi
c00263a8:	5f                   	pop    edi
c00263a9:	5d                   	pop    ebp
c00263aa:	c3                   	ret    
c00263ab:	90                   	nop
c00263ac:	85 ff                	test   edi,edi
c00263ae:	75 0b                	jne    c00263bb <__divdi3+0x83>
c00263b0:	b8 01 00 00 00       	mov    eax,0x1
c00263b5:	31 d2                	xor    edx,edx
c00263b7:	f7 f3                	div    ebx
c00263b9:	89 c7                	mov    edi,eax
c00263bb:	31 d2                	xor    edx,edx
c00263bd:	89 e8                	mov    eax,ebp
c00263bf:	f7 f7                	div    edi
c00263c1:	89 c6                	mov    esi,eax
c00263c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263c6:	f7 f7                	div    edi
c00263c8:	89 c1                	mov    ecx,eax
c00263ca:	eb c4                	jmp    c0026390 <__divdi3+0x58>
c00263cc:	39 eb                	cmp    ebx,ebp
c00263ce:	77 3c                	ja     c002640c <__divdi3+0xd4>
c00263d0:	0f bd f3             	bsr    esi,ebx
c00263d3:	83 f6 1f             	xor    esi,0x1f
c00263d6:	75 40                	jne    c0026418 <__divdi3+0xe0>
c00263d8:	39 eb                	cmp    ebx,ebp
c00263da:	72 09                	jb     c00263e5 <__divdi3+0xad>
c00263dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00263df:	0f 87 97 00 00 00    	ja     c002647c <__divdi3+0x144>
c00263e5:	b9 01 00 00 00       	mov    ecx,0x1
c00263ea:	eb a4                	jmp    c0026390 <__divdi3+0x58>
c00263ec:	f7 d9                	neg    ecx
c00263ee:	83 d3 00             	adc    ebx,0x0
c00263f1:	f7 db                	neg    ebx
c00263f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00263f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00263fa:	89 dd                	mov    ebp,ebx
c00263fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026404:	e9 5f ff ff ff       	jmp    c0026368 <__divdi3+0x30>
c0026409:	8d 76 00             	lea    esi,[esi+0x0]
c002640c:	31 f6                	xor    esi,esi
c002640e:	31 c9                	xor    ecx,ecx
c0026410:	e9 7b ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c0026415:	8d 76 00             	lea    esi,[esi+0x0]
c0026418:	b8 20 00 00 00       	mov    eax,0x20
c002641d:	29 f0                	sub    eax,esi
c002641f:	89 f1                	mov    ecx,esi
c0026421:	d3 e3                	shl    ebx,cl
c0026423:	89 fa                	mov    edx,edi
c0026425:	88 c1                	mov    cl,al
c0026427:	d3 ea                	shr    edx,cl
c0026429:	09 da                	or     edx,ebx
c002642b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002642f:	89 f1                	mov    ecx,esi
c0026431:	d3 e7                	shl    edi,cl
c0026433:	89 eb                	mov    ebx,ebp
c0026435:	88 c1                	mov    cl,al
c0026437:	d3 eb                	shr    ebx,cl
c0026439:	89 f1                	mov    ecx,esi
c002643b:	d3 e5                	shl    ebp,cl
c002643d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026440:	88 c1                	mov    cl,al
c0026442:	d3 ea                	shr    edx,cl
c0026444:	09 d5                	or     ebp,edx
c0026446:	89 e8                	mov    eax,ebp
c0026448:	89 da                	mov    edx,ebx
c002644a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002644e:	89 d3                	mov    ebx,edx
c0026450:	89 c5                	mov    ebp,eax
c0026452:	f7 e7                	mul    edi
c0026454:	39 d3                	cmp    ebx,edx
c0026456:	72 18                	jb     c0026470 <__divdi3+0x138>
c0026458:	74 0a                	je     c0026464 <__divdi3+0x12c>
c002645a:	89 e9                	mov    ecx,ebp
c002645c:	31 f6                	xor    esi,esi
c002645e:	e9 2d ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c0026463:	90                   	nop
c0026464:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026467:	89 f1                	mov    ecx,esi
c0026469:	d3 e7                	shl    edi,cl
c002646b:	39 c7                	cmp    edi,eax
c002646d:	73 eb                	jae    c002645a <__divdi3+0x122>
c002646f:	90                   	nop
c0026470:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026473:	31 f6                	xor    esi,esi
c0026475:	e9 16 ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c002647a:	66 90                	xchg   ax,ax
c002647c:	31 c9                	xor    ecx,ecx
c002647e:	e9 0d ff ff ff       	jmp    c0026390 <__divdi3+0x58>
c0026483:	90                   	nop

c0026484 <__moddi3>:
c0026484:	55                   	push   ebp
c0026485:	57                   	push   edi
c0026486:	56                   	push   esi
c0026487:	53                   	push   ebx
c0026488:	83 ec 2c             	sub    esp,0x2c
c002648b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002648f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026493:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026497:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002649b:	85 db                	test   ebx,ebx
c002649d:	0f 88 85 00 00 00    	js     c0026528 <__moddi3+0xa4>
c00264a3:	89 de                	mov    esi,ebx
c00264a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00264ad:	89 d7                	mov    edi,edx
c00264af:	85 d2                	test   edx,edx
c00264b1:	79 09                	jns    c00264bc <__moddi3+0x38>
c00264b3:	f7 d8                	neg    eax
c00264b5:	83 d2 00             	adc    edx,0x0
c00264b8:	f7 da                	neg    edx
c00264ba:	89 d7                	mov    edi,edx
c00264bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264c0:	89 cd                	mov    ebp,ecx
c00264c2:	85 ff                	test   edi,edi
c00264c4:	75 52                	jne    c0026518 <__moddi3+0x94>
c00264c6:	89 c3                	mov    ebx,eax
c00264c8:	39 f0                	cmp    eax,esi
c00264ca:	76 24                	jbe    c00264f0 <__moddi3+0x6c>
c00264cc:	89 c8                	mov    eax,ecx
c00264ce:	89 f2                	mov    edx,esi
c00264d0:	f7 f3                	div    ebx
c00264d2:	89 d6                	mov    esi,edx
c00264d4:	89 f0                	mov    eax,esi
c00264d6:	31 d2                	xor    edx,edx
c00264d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264dc:	85 c9                	test   ecx,ecx
c00264de:	74 07                	je     c00264e7 <__moddi3+0x63>
c00264e0:	f7 d8                	neg    eax
c00264e2:	83 d2 00             	adc    edx,0x0
c00264e5:	f7 da                	neg    edx
c00264e7:	83 c4 2c             	add    esp,0x2c
c00264ea:	5b                   	pop    ebx
c00264eb:	5e                   	pop    esi
c00264ec:	5f                   	pop    edi
c00264ed:	5d                   	pop    ebp
c00264ee:	c3                   	ret    
c00264ef:	90                   	nop
c00264f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00264f4:	85 db                	test   ebx,ebx
c00264f6:	75 0d                	jne    c0026505 <__moddi3+0x81>
c00264f8:	b8 01 00 00 00       	mov    eax,0x1
c00264fd:	31 d2                	xor    edx,edx
c00264ff:	f7 f7                	div    edi
c0026501:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026505:	89 f0                	mov    eax,esi
c0026507:	31 d2                	xor    edx,edx
c0026509:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002650d:	f7 f7                	div    edi
c002650f:	89 e8                	mov    eax,ebp
c0026511:	f7 f7                	div    edi
c0026513:	89 d6                	mov    esi,edx
c0026515:	eb bd                	jmp    c00264d4 <__moddi3+0x50>
c0026517:	90                   	nop
c0026518:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002651c:	39 f7                	cmp    edi,esi
c002651e:	76 20                	jbe    c0026540 <__moddi3+0xbc>
c0026520:	89 c8                	mov    eax,ecx
c0026522:	89 f2                	mov    edx,esi
c0026524:	eb b2                	jmp    c00264d8 <__moddi3+0x54>
c0026526:	66 90                	xchg   ax,ax
c0026528:	f7 d9                	neg    ecx
c002652a:	83 d3 00             	adc    ebx,0x0
c002652d:	f7 db                	neg    ebx
c002652f:	89 de                	mov    esi,ebx
c0026531:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026539:	e9 6f ff ff ff       	jmp    c00264ad <__moddi3+0x29>
c002653e:	66 90                	xchg   ax,ax
c0026540:	0f bd c7             	bsr    eax,edi
c0026543:	83 f0 1f             	xor    eax,0x1f
c0026546:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002654a:	75 24                	jne    c0026570 <__moddi3+0xec>
c002654c:	39 f7                	cmp    edi,esi
c002654e:	72 06                	jb     c0026556 <__moddi3+0xd2>
c0026550:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026554:	77 0c                	ja     c0026562 <__moddi3+0xde>
c0026556:	89 e9                	mov    ecx,ebp
c0026558:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002655c:	19 fe                	sbb    esi,edi
c002655e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026562:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026566:	89 f2                	mov    edx,esi
c0026568:	e9 6b ff ff ff       	jmp    c00264d8 <__moddi3+0x54>
c002656d:	8d 76 00             	lea    esi,[esi+0x0]
c0026570:	b8 20 00 00 00       	mov    eax,0x20
c0026575:	89 c2                	mov    edx,eax
c0026577:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002657b:	29 da                	sub    edx,ebx
c002657d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026581:	88 d9                	mov    cl,bl
c0026583:	d3 e7                	shl    edi,cl
c0026585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026589:	88 d1                	mov    cl,dl
c002658b:	d3 e8                	shr    eax,cl
c002658d:	09 c7                	or     edi,eax
c002658f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026593:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026597:	89 d8                	mov    eax,ebx
c0026599:	88 d9                	mov    cl,bl
c002659b:	d3 e7                	shl    edi,cl
c002659d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265a1:	89 f3                	mov    ebx,esi
c00265a3:	88 d1                	mov    cl,dl
c00265a5:	d3 eb                	shr    ebx,cl
c00265a7:	89 c7                	mov    edi,eax
c00265a9:	88 c1                	mov    cl,al
c00265ab:	d3 e6                	shl    esi,cl
c00265ad:	89 e8                	mov    eax,ebp
c00265af:	88 d1                	mov    cl,dl
c00265b1:	d3 e8                	shr    eax,cl
c00265b3:	09 f0                	or     eax,esi
c00265b5:	89 f9                	mov    ecx,edi
c00265b7:	d3 e5                	shl    ebp,cl
c00265b9:	89 da                	mov    edx,ebx
c00265bb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00265bf:	89 d3                	mov    ebx,edx
c00265c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265c5:	89 c6                	mov    esi,eax
c00265c7:	89 d1                	mov    ecx,edx
c00265c9:	39 d3                	cmp    ebx,edx
c00265cb:	72 27                	jb     c00265f4 <__moddi3+0x170>
c00265cd:	74 21                	je     c00265f0 <__moddi3+0x16c>
c00265cf:	29 f5                	sub    ebp,esi
c00265d1:	19 cb                	sbb    ebx,ecx
c00265d3:	89 de                	mov    esi,ebx
c00265d5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00265d9:	d3 e6                	shl    esi,cl
c00265db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00265df:	89 f9                	mov    ecx,edi
c00265e1:	d3 ed                	shr    ebp,cl
c00265e3:	09 ee                	or     esi,ebp
c00265e5:	89 f0                	mov    eax,esi
c00265e7:	d3 eb                	shr    ebx,cl
c00265e9:	89 da                	mov    edx,ebx
c00265eb:	e9 e8 fe ff ff       	jmp    c00264d8 <__moddi3+0x54>
c00265f0:	39 c5                	cmp    ebp,eax
c00265f2:	73 db                	jae    c00265cf <__moddi3+0x14b>
c00265f4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00265f8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00265fc:	89 d1                	mov    ecx,edx
c00265fe:	89 c6                	mov    esi,eax
c0026600:	eb cd                	jmp    c00265cf <__moddi3+0x14b>
c0026602:	66 90                	xchg   ax,ax

c0026604 <__udivdi3>:
c0026604:	55                   	push   ebp
c0026605:	57                   	push   edi
c0026606:	56                   	push   esi
c0026607:	53                   	push   ebx
c0026608:	83 ec 1c             	sub    esp,0x1c
c002660b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002660f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026613:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026617:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002661b:	85 d2                	test   edx,edx
c002661d:	75 41                	jne    c0026660 <__udivdi3+0x5c>
c002661f:	39 f7                	cmp    edi,esi
c0026621:	76 15                	jbe    c0026638 <__udivdi3+0x34>
c0026623:	89 e8                	mov    eax,ebp
c0026625:	89 f2                	mov    edx,esi
c0026627:	f7 f7                	div    edi
c0026629:	31 db                	xor    ebx,ebx
c002662b:	89 da                	mov    edx,ebx
c002662d:	83 c4 1c             	add    esp,0x1c
c0026630:	5b                   	pop    ebx
c0026631:	5e                   	pop    esi
c0026632:	5f                   	pop    edi
c0026633:	5d                   	pop    ebp
c0026634:	c3                   	ret    
c0026635:	8d 76 00             	lea    esi,[esi+0x0]
c0026638:	89 f9                	mov    ecx,edi
c002663a:	85 ff                	test   edi,edi
c002663c:	75 0b                	jne    c0026649 <__udivdi3+0x45>
c002663e:	b8 01 00 00 00       	mov    eax,0x1
c0026643:	31 d2                	xor    edx,edx
c0026645:	f7 f7                	div    edi
c0026647:	89 c1                	mov    ecx,eax
c0026649:	31 d2                	xor    edx,edx
c002664b:	89 f0                	mov    eax,esi
c002664d:	f7 f1                	div    ecx
c002664f:	89 c3                	mov    ebx,eax
c0026651:	89 e8                	mov    eax,ebp
c0026653:	f7 f1                	div    ecx
c0026655:	89 da                	mov    edx,ebx
c0026657:	83 c4 1c             	add    esp,0x1c
c002665a:	5b                   	pop    ebx
c002665b:	5e                   	pop    esi
c002665c:	5f                   	pop    edi
c002665d:	5d                   	pop    ebp
c002665e:	c3                   	ret    
c002665f:	90                   	nop
c0026660:	39 f2                	cmp    edx,esi
c0026662:	77 1c                	ja     c0026680 <__udivdi3+0x7c>
c0026664:	0f bd da             	bsr    ebx,edx
c0026667:	83 f3 1f             	xor    ebx,0x1f
c002666a:	75 24                	jne    c0026690 <__udivdi3+0x8c>
c002666c:	39 f2                	cmp    edx,esi
c002666e:	72 08                	jb     c0026678 <__udivdi3+0x74>
c0026670:	39 ef                	cmp    edi,ebp
c0026672:	0f 87 84 00 00 00    	ja     c00266fc <__udivdi3+0xf8>
c0026678:	b8 01 00 00 00       	mov    eax,0x1
c002667d:	eb ac                	jmp    c002662b <__udivdi3+0x27>
c002667f:	90                   	nop
c0026680:	31 db                	xor    ebx,ebx
c0026682:	31 c0                	xor    eax,eax
c0026684:	89 da                	mov    edx,ebx
c0026686:	83 c4 1c             	add    esp,0x1c
c0026689:	5b                   	pop    ebx
c002668a:	5e                   	pop    esi
c002668b:	5f                   	pop    edi
c002668c:	5d                   	pop    ebp
c002668d:	c3                   	ret    
c002668e:	66 90                	xchg   ax,ax
c0026690:	b8 20 00 00 00       	mov    eax,0x20
c0026695:	29 d8                	sub    eax,ebx
c0026697:	88 d9                	mov    cl,bl
c0026699:	d3 e2                	shl    edx,cl
c002669b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002669f:	89 fa                	mov    edx,edi
c00266a1:	88 c1                	mov    cl,al
c00266a3:	d3 ea                	shr    edx,cl
c00266a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266a9:	09 d1                	or     ecx,edx
c00266ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266af:	88 d9                	mov    cl,bl
c00266b1:	d3 e7                	shl    edi,cl
c00266b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266b7:	89 f7                	mov    edi,esi
c00266b9:	88 c1                	mov    cl,al
c00266bb:	d3 ef                	shr    edi,cl
c00266bd:	88 d9                	mov    cl,bl
c00266bf:	d3 e6                	shl    esi,cl
c00266c1:	89 ea                	mov    edx,ebp
c00266c3:	88 c1                	mov    cl,al
c00266c5:	d3 ea                	shr    edx,cl
c00266c7:	09 d6                	or     esi,edx
c00266c9:	89 f0                	mov    eax,esi
c00266cb:	89 fa                	mov    edx,edi
c00266cd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00266d1:	89 d7                	mov    edi,edx
c00266d3:	89 c6                	mov    esi,eax
c00266d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266d9:	39 d7                	cmp    edi,edx
c00266db:	72 13                	jb     c00266f0 <__udivdi3+0xec>
c00266dd:	74 09                	je     c00266e8 <__udivdi3+0xe4>
c00266df:	89 f0                	mov    eax,esi
c00266e1:	31 db                	xor    ebx,ebx
c00266e3:	e9 43 ff ff ff       	jmp    c002662b <__udivdi3+0x27>
c00266e8:	88 d9                	mov    cl,bl
c00266ea:	d3 e5                	shl    ebp,cl
c00266ec:	39 c5                	cmp    ebp,eax
c00266ee:	73 ef                	jae    c00266df <__udivdi3+0xdb>
c00266f0:	8d 46 ff             	lea    eax,[esi-0x1]
c00266f3:	31 db                	xor    ebx,ebx
c00266f5:	e9 31 ff ff ff       	jmp    c002662b <__udivdi3+0x27>
c00266fa:	66 90                	xchg   ax,ax
c00266fc:	31 c0                	xor    eax,eax
c00266fe:	e9 28 ff ff ff       	jmp    c002662b <__udivdi3+0x27>
c0026703:	90                   	nop

c0026704 <__umoddi3>:
c0026704:	55                   	push   ebp
c0026705:	57                   	push   edi
c0026706:	56                   	push   esi
c0026707:	53                   	push   ebx
c0026708:	83 ec 1c             	sub    esp,0x1c
c002670b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002670f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026713:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026717:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002671b:	89 da                	mov    edx,ebx
c002671d:	85 c0                	test   eax,eax
c002671f:	75 37                	jne    c0026758 <__umoddi3+0x54>
c0026721:	39 df                	cmp    edi,ebx
c0026723:	76 13                	jbe    c0026738 <__umoddi3+0x34>
c0026725:	89 f0                	mov    eax,esi
c0026727:	f7 f7                	div    edi
c0026729:	89 d0                	mov    eax,edx
c002672b:	31 d2                	xor    edx,edx
c002672d:	83 c4 1c             	add    esp,0x1c
c0026730:	5b                   	pop    ebx
c0026731:	5e                   	pop    esi
c0026732:	5f                   	pop    edi
c0026733:	5d                   	pop    ebp
c0026734:	c3                   	ret    
c0026735:	8d 76 00             	lea    esi,[esi+0x0]
c0026738:	89 fd                	mov    ebp,edi
c002673a:	85 ff                	test   edi,edi
c002673c:	75 0b                	jne    c0026749 <__umoddi3+0x45>
c002673e:	b8 01 00 00 00       	mov    eax,0x1
c0026743:	31 d2                	xor    edx,edx
c0026745:	f7 f7                	div    edi
c0026747:	89 c5                	mov    ebp,eax
c0026749:	89 d8                	mov    eax,ebx
c002674b:	31 d2                	xor    edx,edx
c002674d:	f7 f5                	div    ebp
c002674f:	89 f0                	mov    eax,esi
c0026751:	f7 f5                	div    ebp
c0026753:	89 d0                	mov    eax,edx
c0026755:	eb d4                	jmp    c002672b <__umoddi3+0x27>
c0026757:	90                   	nop
c0026758:	89 f1                	mov    ecx,esi
c002675a:	39 d8                	cmp    eax,ebx
c002675c:	76 0a                	jbe    c0026768 <__umoddi3+0x64>
c002675e:	89 f0                	mov    eax,esi
c0026760:	83 c4 1c             	add    esp,0x1c
c0026763:	5b                   	pop    ebx
c0026764:	5e                   	pop    esi
c0026765:	5f                   	pop    edi
c0026766:	5d                   	pop    ebp
c0026767:	c3                   	ret    
c0026768:	0f bd e8             	bsr    ebp,eax
c002676b:	83 f5 1f             	xor    ebp,0x1f
c002676e:	75 1c                	jne    c002678c <__umoddi3+0x88>
c0026770:	39 d8                	cmp    eax,ebx
c0026772:	72 04                	jb     c0026778 <__umoddi3+0x74>
c0026774:	39 f7                	cmp    edi,esi
c0026776:	77 08                	ja     c0026780 <__umoddi3+0x7c>
c0026778:	89 da                	mov    edx,ebx
c002677a:	29 fe                	sub    esi,edi
c002677c:	19 c2                	sbb    edx,eax
c002677e:	89 f1                	mov    ecx,esi
c0026780:	89 c8                	mov    eax,ecx
c0026782:	83 c4 1c             	add    esp,0x1c
c0026785:	5b                   	pop    ebx
c0026786:	5e                   	pop    esi
c0026787:	5f                   	pop    edi
c0026788:	5d                   	pop    ebp
c0026789:	c3                   	ret    
c002678a:	66 90                	xchg   ax,ax
c002678c:	ba 20 00 00 00       	mov    edx,0x20
c0026791:	29 ea                	sub    edx,ebp
c0026793:	89 e9                	mov    ecx,ebp
c0026795:	d3 e0                	shl    eax,cl
c0026797:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002679b:	89 f8                	mov    eax,edi
c002679d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00267a1:	88 d1                	mov    cl,dl
c00267a3:	d3 e8                	shr    eax,cl
c00267a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267a9:	09 c1                	or     ecx,eax
c00267ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267af:	89 e9                	mov    ecx,ebp
c00267b1:	d3 e7                	shl    edi,cl
c00267b3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267b7:	89 d8                	mov    eax,ebx
c00267b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00267bd:	88 d1                	mov    cl,dl
c00267bf:	d3 e8                	shr    eax,cl
c00267c1:	89 c7                	mov    edi,eax
c00267c3:	89 e9                	mov    ecx,ebp
c00267c5:	d3 e3                	shl    ebx,cl
c00267c7:	89 f0                	mov    eax,esi
c00267c9:	88 d1                	mov    cl,dl
c00267cb:	d3 e8                	shr    eax,cl
c00267cd:	09 d8                	or     eax,ebx
c00267cf:	89 e9                	mov    ecx,ebp
c00267d1:	d3 e6                	shl    esi,cl
c00267d3:	89 f3                	mov    ebx,esi
c00267d5:	89 fa                	mov    edx,edi
c00267d7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267db:	89 d1                	mov    ecx,edx
c00267dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267e1:	89 c6                	mov    esi,eax
c00267e3:	89 d7                	mov    edi,edx
c00267e5:	39 d1                	cmp    ecx,edx
c00267e7:	72 27                	jb     c0026810 <__umoddi3+0x10c>
c00267e9:	74 21                	je     c002680c <__umoddi3+0x108>
c00267eb:	89 ca                	mov    edx,ecx
c00267ed:	29 f3                	sub    ebx,esi
c00267ef:	19 fa                	sbb    edx,edi
c00267f1:	89 d0                	mov    eax,edx
c00267f3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00267f7:	d3 e0                	shl    eax,cl
c00267f9:	89 e9                	mov    ecx,ebp
c00267fb:	d3 eb                	shr    ebx,cl
c00267fd:	09 d8                	or     eax,ebx
c00267ff:	d3 ea                	shr    edx,cl
c0026801:	83 c4 1c             	add    esp,0x1c
c0026804:	5b                   	pop    ebx
c0026805:	5e                   	pop    esi
c0026806:	5f                   	pop    edi
c0026807:	5d                   	pop    ebp
c0026808:	c3                   	ret    
c0026809:	8d 76 00             	lea    esi,[esi+0x0]
c002680c:	39 c3                	cmp    ebx,eax
c002680e:	73 db                	jae    c00267eb <__umoddi3+0xe7>
c0026810:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026814:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026818:	89 d7                	mov    edi,edx
c002681a:	89 c6                	mov    esi,eax
c002681c:	eb cd                	jmp    c00267eb <__umoddi3+0xe7>

c002681e <__addsf3>:
c002681e:	55                   	push   ebp
c002681f:	89 e5                	mov    ebp,esp
c0026821:	57                   	push   edi
c0026822:	56                   	push   esi
c0026823:	53                   	push   ebx
c0026824:	83 ec 08             	sub    esp,0x8
c0026827:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002682a:	89 fa                	mov    edx,edi
c002682c:	89 f8                	mov    eax,edi
c002682e:	c1 f8 17             	sar    eax,0x17
c0026831:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026834:	c1 e2 08             	shl    edx,0x8
c0026837:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002683d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026840:	89 de                	mov    esi,ebx
c0026842:	c1 fe 17             	sar    esi,0x17
c0026845:	c1 e3 08             	shl    ebx,0x8
c0026848:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002684e:	31 f0                	xor    eax,esi
c0026850:	0f 88 3b 01 00 00    	js     c0026991 <__addsf3+0x173>
c0026856:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026859:	29 f1                	sub    ecx,esi
c002685b:	85 c9                	test   ecx,ecx
c002685d:	7e 54                	jle    c00268b3 <__addsf3+0x95>
c002685f:	89 f0                	mov    eax,esi
c0026861:	84 c0                	test   al,al
c0026863:	75 10                	jne    c0026875 <__addsf3+0x57>
c0026865:	85 db                	test   ebx,ebx
c0026867:	0f 84 aa 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c002686d:	49                   	dec    ecx
c002686e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026871:	74 38                	je     c00268ab <__addsf3+0x8d>
c0026873:	eb 13                	jmp    c0026888 <__addsf3+0x6a>
c0026875:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026878:	f7 d0                	not    eax
c002687a:	84 c0                	test   al,al
c002687c:	0f 84 95 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026882:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026888:	83 f9 1f             	cmp    ecx,0x1f
c002688b:	0f 8f 86 02 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c0026891:	89 de                	mov    esi,ebx
c0026893:	d3 ee                	shr    esi,cl
c0026895:	b8 20 00 00 00       	mov    eax,0x20
c002689a:	29 c8                	sub    eax,ecx
c002689c:	89 c1                	mov    ecx,eax
c002689e:	d3 e3                	shl    ebx,cl
c00268a0:	31 c0                	xor    eax,eax
c00268a2:	85 db                	test   ebx,ebx
c00268a4:	0f 95 c0             	setne  al
c00268a7:	09 f0                	or     eax,esi
c00268a9:	01 d0                	add    eax,edx
c00268ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268ae:	e9 b6 00 00 00       	jmp    c0026969 <__addsf3+0x14b>
c00268b3:	74 5c                	je     c0026911 <__addsf3+0xf3>
c00268b5:	89 f1                	mov    ecx,esi
c00268b7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00268ba:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268bd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00268c1:	75 14                	jne    c00268d7 <__addsf3+0xb9>
c00268c3:	85 d2                	test   edx,edx
c00268c5:	0f 84 4c 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00268cb:	49                   	dec    ecx
c00268cc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268cf:	0f 84 94 00 00 00    	je     c0026969 <__addsf3+0x14b>
c00268d5:	eb 12                	jmp    c00268e9 <__addsf3+0xcb>
c00268d7:	89 f0                	mov    eax,esi
c00268d9:	f7 d0                	not    eax
c00268db:	84 c0                	test   al,al
c00268dd:	0f 84 34 02 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00268e3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00268e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268ec:	83 f9 1f             	cmp    ecx,0x1f
c00268ef:	0f 8f 22 02 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c00268f5:	89 d7                	mov    edi,edx
c00268f7:	d3 ef                	shr    edi,cl
c00268f9:	b8 20 00 00 00       	mov    eax,0x20
c00268fe:	29 c8                	sub    eax,ecx
c0026900:	89 c1                	mov    ecx,eax
c0026902:	d3 e2                	shl    edx,cl
c0026904:	31 c0                	xor    eax,eax
c0026906:	85 d2                	test   edx,edx
c0026908:	0f 95 c0             	setne  al
c002690b:	09 f8                	or     eax,edi
c002690d:	01 d8                	add    eax,ebx
c002690f:	eb 58                	jmp    c0026969 <__addsf3+0x14b>
c0026911:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026914:	8d 70 01             	lea    esi,[eax+0x1]
c0026917:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002691d:	75 32                	jne    c0026951 <__addsf3+0x133>
c002691f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026923:	75 1f                	jne    c0026944 <__addsf3+0x126>
c0026925:	85 d2                	test   edx,edx
c0026927:	0f 84 e0 01 00 00    	je     c0026b0d <__addsf3+0x2ef>
c002692d:	85 db                	test   ebx,ebx
c002692f:	0f 84 e2 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026935:	89 d0                	mov    eax,edx
c0026937:	01 d8                	add    eax,ebx
c0026939:	0f 89 a9 01 00 00    	jns    c0026ae8 <__addsf3+0x2ca>
c002693f:	e9 9d 01 00 00       	jmp    c0026ae1 <__addsf3+0x2c3>
c0026944:	85 d2                	test   edx,edx
c0026946:	0f 85 cb 01 00 00    	jne    c0026b17 <__addsf3+0x2f9>
c002694c:	e9 bc 01 00 00       	jmp    c0026b0d <__addsf3+0x2ef>
c0026951:	31 c0                	xor    eax,eax
c0026953:	89 f1                	mov    ecx,esi
c0026955:	f7 d1                	not    ecx
c0026957:	84 c9                	test   cl,cl
c0026959:	0f 84 90 01 00 00    	je     c0026aef <__addsf3+0x2d1>
c002695f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026962:	d1 e8                	shr    eax,1
c0026964:	e9 86 01 00 00       	jmp    c0026aef <__addsf3+0x2d1>
c0026969:	85 c0                	test   eax,eax
c002696b:	0f 89 7e 01 00 00    	jns    c0026aef <__addsf3+0x2d1>
c0026971:	46                   	inc    esi
c0026972:	89 f2                	mov    edx,esi
c0026974:	f7 d2                	not    edx
c0026976:	84 d2                	test   dl,dl
c0026978:	0f 84 6f 01 00 00    	je     c0026aed <__addsf3+0x2cf>
c002697e:	89 c2                	mov    edx,eax
c0026980:	83 e2 01             	and    edx,0x1
c0026983:	d1 e8                	shr    eax,1
c0026985:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002698a:	09 d0                	or     eax,edx
c002698c:	e9 5e 01 00 00       	jmp    c0026aef <__addsf3+0x2d1>
c0026991:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026995:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026998:	89 f0                	mov    eax,esi
c002699a:	0f b6 c0             	movzx  eax,al
c002699d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269a0:	29 c1                	sub    ecx,eax
c00269a2:	85 c9                	test   ecx,ecx
c00269a4:	7e 55                	jle    c00269fb <__addsf3+0x1dd>
c00269a6:	85 c0                	test   eax,eax
c00269a8:	75 11                	jne    c00269bb <__addsf3+0x19d>
c00269aa:	85 db                	test   ebx,ebx
c00269ac:	0f 84 65 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00269b2:	49                   	dec    ecx
c00269b3:	75 19                	jne    c00269ce <__addsf3+0x1b0>
c00269b5:	89 d0                	mov    eax,edx
c00269b7:	29 d8                	sub    eax,ebx
c00269b9:	eb 38                	jmp    c00269f3 <__addsf3+0x1d5>
c00269bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269be:	f7 d0                	not    eax
c00269c0:	84 c0                	test   al,al
c00269c2:	0f 84 4f 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c00269c8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269ce:	83 f9 1f             	cmp    ecx,0x1f
c00269d1:	0f 8f 40 01 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c00269d7:	89 de                	mov    esi,ebx
c00269d9:	d3 ee                	shr    esi,cl
c00269db:	b8 20 00 00 00       	mov    eax,0x20
c00269e0:	29 c8                	sub    eax,ecx
c00269e2:	89 c1                	mov    ecx,eax
c00269e4:	d3 e3                	shl    ebx,cl
c00269e6:	31 c0                	xor    eax,eax
c00269e8:	85 db                	test   ebx,ebx
c00269ea:	0f 95 c0             	setne  al
c00269ed:	09 f0                	or     eax,esi
c00269ef:	29 c2                	sub    edx,eax
c00269f1:	89 d0                	mov    eax,edx
c00269f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269f6:	e9 af 00 00 00       	jmp    c0026aaa <__addsf3+0x28c>
c00269fb:	74 5c                	je     c0026a59 <__addsf3+0x23b>
c00269fd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026a00:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a03:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a07:	75 14                	jne    c0026a1d <__addsf3+0x1ff>
c0026a09:	85 d2                	test   edx,edx
c0026a0b:	0f 84 06 01 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026a11:	48                   	dec    eax
c0026a12:	75 1b                	jne    c0026a2f <__addsf3+0x211>
c0026a14:	89 d8                	mov    eax,ebx
c0026a16:	29 d0                	sub    eax,edx
c0026a18:	e9 8d 00 00 00       	jmp    c0026aaa <__addsf3+0x28c>
c0026a1d:	89 f1                	mov    ecx,esi
c0026a1f:	f7 d1                	not    ecx
c0026a21:	84 c9                	test   cl,cl
c0026a23:	0f 84 ee 00 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026a29:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a32:	83 f8 1f             	cmp    eax,0x1f
c0026a35:	0f 8f dc 00 00 00    	jg     c0026b17 <__addsf3+0x2f9>
c0026a3b:	89 d7                	mov    edi,edx
c0026a3d:	88 c1                	mov    cl,al
c0026a3f:	d3 ef                	shr    edi,cl
c0026a41:	b9 20 00 00 00       	mov    ecx,0x20
c0026a46:	29 c1                	sub    ecx,eax
c0026a48:	d3 e2                	shl    edx,cl
c0026a4a:	31 c0                	xor    eax,eax
c0026a4c:	85 d2                	test   edx,edx
c0026a4e:	0f 95 c0             	setne  al
c0026a51:	09 f8                	or     eax,edi
c0026a53:	29 c3                	sub    ebx,eax
c0026a55:	89 d8                	mov    eax,ebx
c0026a57:	eb 51                	jmp    c0026aaa <__addsf3+0x28c>
c0026a59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a5c:	40                   	inc    eax
c0026a5d:	a8 fe                	test   al,0xfe
c0026a5f:	75 3d                	jne    c0026a9e <__addsf3+0x280>
c0026a61:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a65:	0f 85 a7 00 00 00    	jne    c0026b12 <__addsf3+0x2f4>
c0026a6b:	85 d2                	test   edx,edx
c0026a6d:	75 12                	jne    c0026a81 <__addsf3+0x263>
c0026a6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a72:	85 db                	test   ebx,ebx
c0026a74:	0f 85 9d 00 00 00    	jne    c0026b17 <__addsf3+0x2f9>
c0026a7a:	31 ff                	xor    edi,edi
c0026a7c:	e9 96 00 00 00       	jmp    c0026b17 <__addsf3+0x2f9>
c0026a81:	85 db                	test   ebx,ebx
c0026a83:	0f 84 8e 00 00 00    	je     c0026b17 <__addsf3+0x2f9>
c0026a89:	89 d0                	mov    eax,edx
c0026a8b:	29 d8                	sub    eax,ebx
c0026a8d:	79 06                	jns    c0026a95 <__addsf3+0x277>
c0026a8f:	89 d8                	mov    eax,ebx
c0026a91:	29 d0                	sub    eax,edx
c0026a93:	eb 5a                	jmp    c0026aef <__addsf3+0x2d1>
c0026a95:	bf 00 00 00 00       	mov    edi,0x0
c0026a9a:	74 7b                	je     c0026b17 <__addsf3+0x2f9>
c0026a9c:	eb 4a                	jmp    c0026ae8 <__addsf3+0x2ca>
c0026a9e:	89 d0                	mov    eax,edx
c0026aa0:	29 d8                	sub    eax,ebx
c0026aa2:	79 12                	jns    c0026ab6 <__addsf3+0x298>
c0026aa4:	89 d8                	mov    eax,ebx
c0026aa6:	29 d0                	sub    eax,edx
c0026aa8:	eb 09                	jmp    c0026ab3 <__addsf3+0x295>
c0026aaa:	85 c0                	test   eax,eax
c0026aac:	79 41                	jns    c0026aef <__addsf3+0x2d1>
c0026aae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ab3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ab6:	31 f6                	xor    esi,esi
c0026ab8:	85 c0                	test   eax,eax
c0026aba:	74 33                	je     c0026aef <__addsf3+0x2d1>
c0026abc:	0f bd c8             	bsr    ecx,eax
c0026abf:	83 f1 1f             	xor    ecx,0x1f
c0026ac2:	d3 e0                	shl    eax,cl
c0026ac4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ac8:	39 ca                	cmp    edx,ecx
c0026aca:	7f 10                	jg     c0026adc <__addsf3+0x2be>
c0026acc:	29 d1                	sub    ecx,edx
c0026ace:	41                   	inc    ecx
c0026acf:	d3 e8                	shr    eax,cl
c0026ad1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ad4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ada:	eb 13                	jmp    c0026aef <__addsf3+0x2d1>
c0026adc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026adf:	29 ce                	sub    esi,ecx
c0026ae1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ae6:	eb 07                	jmp    c0026aef <__addsf3+0x2d1>
c0026ae8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026aeb:	eb 02                	jmp    c0026aef <__addsf3+0x2d1>
c0026aed:	31 c0                	xor    eax,eax
c0026aef:	89 c2                	mov    edx,eax
c0026af1:	c1 ea 08             	shr    edx,0x8
c0026af4:	a8 7f                	test   al,0x7f
c0026af6:	0f 95 c1             	setne  cl
c0026af9:	09 d1                	or     ecx,edx
c0026afb:	83 e1 01             	and    ecx,0x1
c0026afe:	c1 e8 07             	shr    eax,0x7
c0026b01:	21 c8                	and    eax,ecx
c0026b03:	c1 e6 17             	shl    esi,0x17
c0026b06:	09 d6                	or     esi,edx
c0026b08:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026b0b:	eb 0a                	jmp    c0026b17 <__addsf3+0x2f9>
c0026b0d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b10:	eb 05                	jmp    c0026b17 <__addsf3+0x2f9>
c0026b12:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026b17:	89 f8                	mov    eax,edi
c0026b19:	5a                   	pop    edx
c0026b1a:	59                   	pop    ecx
c0026b1b:	5b                   	pop    ebx
c0026b1c:	5e                   	pop    esi
c0026b1d:	5f                   	pop    edi
c0026b1e:	5d                   	pop    ebp
c0026b1f:	c3                   	ret    

c0026b20 <__subsf3>:
c0026b20:	55                   	push   ebp
c0026b21:	89 e5                	mov    ebp,esp
c0026b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b26:	05 00 00 00 80       	add    eax,0x80000000
c0026b2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b2e:	5d                   	pop    ebp
c0026b2f:	e9 ea fc ff ff       	jmp    c002681e <__addsf3>

c0026b34 <__negsf2>:
c0026b34:	55                   	push   ebp
c0026b35:	89 e5                	mov    ebp,esp
c0026b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b3a:	05 00 00 00 80       	add    eax,0x80000000
c0026b3f:	5d                   	pop    ebp
c0026b40:	c3                   	ret    

c0026b41 <__mulsf3>:
c0026b41:	55                   	push   ebp
c0026b42:	89 e5                	mov    ebp,esp
c0026b44:	57                   	push   edi
c0026b45:	56                   	push   esi
c0026b46:	53                   	push   ebx
c0026b47:	83 ec 1c             	sub    esp,0x1c
c0026b4a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026b4d:	89 f0                	mov    eax,esi
c0026b4f:	89 f1                	mov    ecx,esi
c0026b51:	c1 f9 17             	sar    ecx,0x17
c0026b54:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b57:	c1 e0 08             	shl    eax,0x8
c0026b5a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b5f:	89 c1                	mov    ecx,eax
c0026b61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b64:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b67:	89 c7                	mov    edi,eax
c0026b69:	c1 ff 17             	sar    edi,0x17
c0026b6c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026b70:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026b73:	89 f8                	mov    eax,edi
c0026b75:	0f b6 c0             	movzx  eax,al
c0026b78:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026b7b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026b7f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b82:	42                   	inc    edx
c0026b83:	80 e2 fe             	and    dl,0xfe
c0026b86:	75 7b                	jne    c0026c03 <__mulsf3+0xc2>
c0026b88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026b8c:	74 54                	je     c0026be2 <__mulsf3+0xa1>
c0026b8e:	85 c9                	test   ecx,ecx
c0026b90:	0f 85 64 01 00 00    	jne    c0026cfa <__mulsf3+0x1b9>
c0026b96:	8d 57 01             	lea    edx,[edi+0x1]
c0026b99:	80 e2 fe             	and    dl,0xfe
c0026b9c:	75 1f                	jne    c0026bbd <__mulsf3+0x7c>
c0026b9e:	85 c0                	test   eax,eax
c0026ba0:	b8 00 00 00 00       	mov    eax,0x0
c0026ba5:	74 29                	je     c0026bd0 <__mulsf3+0x8f>
c0026ba7:	53                   	push   ebx
c0026ba8:	53                   	push   ebx
c0026ba9:	50                   	push   eax
c0026baa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bad:	e8 96 05 00 00       	call   c0027148 <__nesf2>
c0026bb2:	83 c4 10             	add    esp,0x10
c0026bb5:	85 c0                	test   eax,eax
c0026bb7:	0f 85 3a 01 00 00    	jne    c0026cf7 <__mulsf3+0x1b6>
c0026bbd:	85 ff                	test   edi,edi
c0026bbf:	0f 89 35 01 00 00    	jns    c0026cfa <__mulsf3+0x1b9>
c0026bc5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026bcb:	e9 2a 01 00 00       	jmp    c0026cfa <__mulsf3+0x1b9>
c0026bd0:	51                   	push   ecx
c0026bd1:	51                   	push   ecx
c0026bd2:	50                   	push   eax
c0026bd3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bd6:	e8 6d 05 00 00       	call   c0027148 <__nesf2>
c0026bdb:	83 c4 10             	add    esp,0x10
c0026bde:	85 c0                	test   eax,eax
c0026be0:	eb 15                	jmp    c0026bf7 <__mulsf3+0xb6>
c0026be2:	85 c9                	test   ecx,ecx
c0026be4:	74 0b                	je     c0026bf1 <__mulsf3+0xb0>
c0026be6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026be9:	01 c9                	add    ecx,ecx
c0026beb:	78 16                	js     c0026c03 <__mulsf3+0xc2>
c0026bed:	89 d3                	mov    ebx,edx
c0026bef:	eb f5                	jmp    c0026be6 <__mulsf3+0xa5>
c0026bf1:	89 f8                	mov    eax,edi
c0026bf3:	f7 d0                	not    eax
c0026bf5:	84 c0                	test   al,al
c0026bf7:	75 c4                	jne    c0026bbd <__mulsf3+0x7c>
c0026bf9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026bfe:	e9 f7 00 00 00       	jmp    c0026cfa <__mulsf3+0x1b9>
c0026c03:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026c06:	c1 e6 08             	shl    esi,0x8
c0026c09:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026c0f:	8d 57 01             	lea    edx,[edi+0x1]
c0026c12:	80 e2 fe             	and    dl,0xfe
c0026c15:	75 63                	jne    c0026c7a <__mulsf3+0x139>
c0026c17:	85 c0                	test   eax,eax
c0026c19:	74 2f                	je     c0026c4a <__mulsf3+0x109>
c0026c1b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c1f:	0f 89 d2 00 00 00    	jns    c0026cf7 <__mulsf3+0x1b6>
c0026c25:	52                   	push   edx
c0026c26:	52                   	push   edx
c0026c27:	6a 00                	push   0x0
c0026c29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c2c:	e8 dc 04 00 00       	call   c002710d <__eqsf2>
c0026c31:	83 c4 10             	add    esp,0x10
c0026c34:	85 c0                	test   eax,eax
c0026c36:	0f 85 bb 00 00 00    	jne    c0026cf7 <__mulsf3+0x1b6>
c0026c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c3f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026c45:	e9 b0 00 00 00       	jmp    c0026cfa <__mulsf3+0x1b9>
c0026c4a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c4d:	50                   	push   eax
c0026c4e:	50                   	push   eax
c0026c4f:	6a 00                	push   0x0
c0026c51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c54:	e8 b4 04 00 00       	call   c002710d <__eqsf2>
c0026c59:	83 c4 10             	add    esp,0x10
c0026c5c:	85 c0                	test   eax,eax
c0026c5e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c61:	75 0c                	jne    c0026c6f <__mulsf3+0x12e>
c0026c63:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c67:	0f 89 8a 00 00 00    	jns    c0026cf7 <__mulsf3+0x1b6>
c0026c6d:	eb cd                	jmp    c0026c3c <__mulsf3+0xfb>
c0026c6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026c72:	01 f6                	add    esi,esi
c0026c74:	78 04                	js     c0026c7a <__mulsf3+0x139>
c0026c76:	89 c3                	mov    ebx,eax
c0026c78:	eb f5                	jmp    c0026c6f <__mulsf3+0x12e>
c0026c7a:	89 c8                	mov    eax,ecx
c0026c7c:	0d 00 00 00 80       	or     eax,0x80000000
c0026c81:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026c87:	f7 e6                	mul    esi
c0026c89:	85 c0                	test   eax,eax
c0026c8b:	0f 95 c0             	setne  al
c0026c8e:	0f b6 c0             	movzx  eax,al
c0026c91:	09 c2                	or     edx,eax
c0026c93:	78 03                	js     c0026c98 <__mulsf3+0x157>
c0026c95:	01 d2                	add    edx,edx
c0026c97:	4b                   	dec    ebx
c0026c98:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026c9e:	7f 22                	jg     c0026cc2 <__mulsf3+0x181>
c0026ca0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ca6:	85 db                	test   ebx,ebx
c0026ca8:	7f 23                	jg     c0026ccd <__mulsf3+0x18c>
c0026caa:	83 fb e9             	cmp    ebx,0xffffffe9
c0026cad:	7c 1a                	jl     c0026cc9 <__mulsf3+0x188>
c0026caf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cb5:	b9 01 00 00 00       	mov    ecx,0x1
c0026cba:	29 d9                	sub    ecx,ebx
c0026cbc:	d3 ea                	shr    edx,cl
c0026cbe:	31 db                	xor    ebx,ebx
c0026cc0:	eb 0b                	jmp    c0026ccd <__mulsf3+0x18c>
c0026cc2:	bb ff 00 00 00       	mov    ebx,0xff
c0026cc7:	eb 02                	jmp    c0026ccb <__mulsf3+0x18a>
c0026cc9:	31 db                	xor    ebx,ebx
c0026ccb:	31 d2                	xor    edx,edx
c0026ccd:	89 d0                	mov    eax,edx
c0026ccf:	c1 e8 08             	shr    eax,0x8
c0026cd2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026cd5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026cdb:	09 fb                	or     ebx,edi
c0026cdd:	c1 e3 17             	shl    ebx,0x17
c0026ce0:	09 c3                	or     ebx,eax
c0026ce2:	f6 c2 7f             	test   dl,0x7f
c0026ce5:	0f 95 c1             	setne  cl
c0026ce8:	09 c8                	or     eax,ecx
c0026cea:	83 e0 01             	and    eax,0x1
c0026ced:	c1 ea 07             	shr    edx,0x7
c0026cf0:	21 c2                	and    edx,eax
c0026cf2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026cf5:	eb 03                	jmp    c0026cfa <__mulsf3+0x1b9>
c0026cf7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026cfa:	89 f0                	mov    eax,esi
c0026cfc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026cff:	5b                   	pop    ebx
c0026d00:	5e                   	pop    esi
c0026d01:	5f                   	pop    edi
c0026d02:	5d                   	pop    ebp
c0026d03:	c3                   	ret    

c0026d04 <__divsf3>:
c0026d04:	55                   	push   ebp
c0026d05:	89 e5                	mov    ebp,esp
c0026d07:	57                   	push   edi
c0026d08:	56                   	push   esi
c0026d09:	53                   	push   ebx
c0026d0a:	83 ec 1c             	sub    esp,0x1c
c0026d0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d10:	89 d8                	mov    eax,ebx
c0026d12:	89 d9                	mov    ecx,ebx
c0026d14:	c1 f9 17             	sar    ecx,0x17
c0026d17:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d1a:	c1 e0 08             	shl    eax,0x8
c0026d1d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d22:	89 c1                	mov    ecx,eax
c0026d24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d27:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d2a:	89 c7                	mov    edi,eax
c0026d2c:	c1 ff 17             	sar    edi,0x17
c0026d2f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d33:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d36:	89 f8                	mov    eax,edi
c0026d38:	0f b6 c0             	movzx  eax,al
c0026d3b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d3e:	29 c6                	sub    esi,eax
c0026d40:	83 c6 7f             	add    esi,0x7f
c0026d43:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d46:	42                   	inc    edx
c0026d47:	80 e2 fe             	and    dl,0xfe
c0026d4a:	0f 85 9c 00 00 00    	jne    c0026dec <__divsf3+0xe8>
c0026d50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d54:	74 33                	je     c0026d89 <__divsf3+0x85>
c0026d56:	85 c9                	test   ecx,ecx
c0026d58:	0f 85 c7 01 00 00    	jne    c0026f25 <__divsf3+0x221>
c0026d5e:	8d 57 01             	lea    edx,[edi+0x1]
c0026d61:	80 e2 fe             	and    dl,0xfe
c0026d64:	75 2f                	jne    c0026d95 <__divsf3+0x91>
c0026d66:	85 c0                	test   eax,eax
c0026d68:	74 2b                	je     c0026d95 <__divsf3+0x91>
c0026d6a:	51                   	push   ecx
c0026d6b:	51                   	push   ecx
c0026d6c:	6a 00                	push   0x0
c0026d6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d71:	e8 d2 03 00 00       	call   c0027148 <__nesf2>
c0026d76:	83 c4 10             	add    esp,0x10
c0026d79:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d7c:	85 c0                	test   eax,eax
c0026d7e:	0f 85 a1 01 00 00    	jne    c0026f25 <__divsf3+0x221>
c0026d84:	e9 92 01 00 00       	jmp    c0026f1b <__divsf3+0x217>
c0026d89:	85 c9                	test   ecx,ecx
c0026d8b:	75 1b                	jne    c0026da8 <__divsf3+0xa4>
c0026d8d:	8d 57 01             	lea    edx,[edi+0x1]
c0026d90:	80 e2 fe             	and    dl,0xfe
c0026d93:	74 1e                	je     c0026db3 <__divsf3+0xaf>
c0026d95:	85 ff                	test   edi,edi
c0026d97:	0f 89 88 01 00 00    	jns    c0026f25 <__divsf3+0x221>
c0026d9d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026da3:	e9 7d 01 00 00       	jmp    c0026f25 <__divsf3+0x221>
c0026da8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026dab:	01 c9                	add    ecx,ecx
c0026dad:	78 3d                	js     c0026dec <__divsf3+0xe8>
c0026daf:	89 d6                	mov    esi,edx
c0026db1:	eb f5                	jmp    c0026da8 <__divsf3+0xa4>
c0026db3:	85 c0                	test   eax,eax
c0026db5:	b8 00 00 00 00       	mov    eax,0x0
c0026dba:	74 18                	je     c0026dd4 <__divsf3+0xd0>
c0026dbc:	52                   	push   edx
c0026dbd:	52                   	push   edx
c0026dbe:	50                   	push   eax
c0026dbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dc2:	e8 81 03 00 00       	call   c0027148 <__nesf2>
c0026dc7:	83 c4 10             	add    esp,0x10
c0026dca:	85 c0                	test   eax,eax
c0026dcc:	0f 85 50 01 00 00    	jne    c0026f22 <__divsf3+0x21e>
c0026dd2:	eb c1                	jmp    c0026d95 <__divsf3+0x91>
c0026dd4:	56                   	push   esi
c0026dd5:	56                   	push   esi
c0026dd6:	50                   	push   eax
c0026dd7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dda:	e8 69 03 00 00       	call   c0027148 <__nesf2>
c0026ddf:	83 c4 10             	add    esp,0x10
c0026de2:	85 c0                	test   eax,eax
c0026de4:	0f 84 31 01 00 00    	je     c0026f1b <__divsf3+0x217>
c0026dea:	eb a9                	jmp    c0026d95 <__divsf3+0x91>
c0026dec:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026def:	c1 e3 08             	shl    ebx,0x8
c0026df2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026df8:	8d 57 01             	lea    edx,[edi+0x1]
c0026dfb:	80 e2 fe             	and    dl,0xfe
c0026dfe:	75 71                	jne    c0026e71 <__divsf3+0x16d>
c0026e00:	85 c0                	test   eax,eax
c0026e02:	ba 00 00 00 00       	mov    edx,0x0
c0026e07:	74 2f                	je     c0026e38 <__divsf3+0x134>
c0026e09:	51                   	push   ecx
c0026e0a:	51                   	push   ecx
c0026e0b:	52                   	push   edx
c0026e0c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e0f:	e8 f9 02 00 00       	call   c002710d <__eqsf2>
c0026e14:	83 c4 10             	add    esp,0x10
c0026e17:	85 c0                	test   eax,eax
c0026e19:	0f 85 03 01 00 00    	jne    c0026f22 <__divsf3+0x21e>
c0026e1f:	31 d2                	xor    edx,edx
c0026e21:	89 d3                	mov    ebx,edx
c0026e23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e26:	31 f8                	xor    eax,edi
c0026e28:	0f 89 f7 00 00 00    	jns    c0026f25 <__divsf3+0x221>
c0026e2e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026e33:	e9 ed 00 00 00       	jmp    c0026f25 <__divsf3+0x221>
c0026e38:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e3b:	50                   	push   eax
c0026e3c:	50                   	push   eax
c0026e3d:	52                   	push   edx
c0026e3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e41:	e8 c7 02 00 00       	call   c002710d <__eqsf2>
c0026e46:	83 c4 10             	add    esp,0x10
c0026e49:	85 c0                	test   eax,eax
c0026e4b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e4e:	75 16                	jne    c0026e66 <__divsf3+0x162>
c0026e50:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e53:	31 fb                	xor    ebx,edi
c0026e55:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026e5b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026e61:	e9 bf 00 00 00       	jmp    c0026f25 <__divsf3+0x221>
c0026e66:	8d 46 01             	lea    eax,[esi+0x1]
c0026e69:	01 db                	add    ebx,ebx
c0026e6b:	78 04                	js     c0026e71 <__divsf3+0x16d>
c0026e6d:	89 c6                	mov    esi,eax
c0026e6f:	eb f5                	jmp    c0026e66 <__divsf3+0x162>
c0026e71:	89 c8                	mov    eax,ecx
c0026e73:	0d 00 00 00 80       	or     eax,0x80000000
c0026e78:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e7e:	31 d2                	xor    edx,edx
c0026e80:	39 d8                	cmp    eax,ebx
c0026e82:	72 07                	jb     c0026e8b <__divsf3+0x187>
c0026e84:	29 d8                	sub    eax,ebx
c0026e86:	ba 01 00 00 00       	mov    edx,0x1
c0026e8b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026e92:	01 d2                	add    edx,edx
c0026e94:	89 c1                	mov    ecx,eax
c0026e96:	01 c0                	add    eax,eax
c0026e98:	85 c9                	test   ecx,ecx
c0026e9a:	78 04                	js     c0026ea0 <__divsf3+0x19c>
c0026e9c:	39 c3                	cmp    ebx,eax
c0026e9e:	77 05                	ja     c0026ea5 <__divsf3+0x1a1>
c0026ea0:	29 d8                	sub    eax,ebx
c0026ea2:	83 ca 01             	or     edx,0x1
c0026ea5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026ea8:	75 e8                	jne    c0026e92 <__divsf3+0x18e>
c0026eaa:	85 c0                	test   eax,eax
c0026eac:	0f 95 c0             	setne  al
c0026eaf:	0f b6 c0             	movzx  eax,al
c0026eb2:	c1 e2 06             	shl    edx,0x6
c0026eb5:	09 c2                	or     edx,eax
c0026eb7:	78 03                	js     c0026ebc <__divsf3+0x1b8>
c0026eb9:	01 d2                	add    edx,edx
c0026ebb:	4e                   	dec    esi
c0026ebc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026ec2:	7f 22                	jg     c0026ee6 <__divsf3+0x1e2>
c0026ec4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026eca:	85 f6                	test   esi,esi
c0026ecc:	7f 23                	jg     c0026ef1 <__divsf3+0x1ed>
c0026ece:	83 fe e9             	cmp    esi,0xffffffe9
c0026ed1:	7c 1a                	jl     c0026eed <__divsf3+0x1e9>
c0026ed3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ed9:	b9 01 00 00 00       	mov    ecx,0x1
c0026ede:	29 f1                	sub    ecx,esi
c0026ee0:	d3 ea                	shr    edx,cl
c0026ee2:	31 f6                	xor    esi,esi
c0026ee4:	eb 0b                	jmp    c0026ef1 <__divsf3+0x1ed>
c0026ee6:	be ff 00 00 00       	mov    esi,0xff
c0026eeb:	eb 02                	jmp    c0026eef <__divsf3+0x1eb>
c0026eed:	31 f6                	xor    esi,esi
c0026eef:	31 d2                	xor    edx,edx
c0026ef1:	89 d0                	mov    eax,edx
c0026ef3:	c1 e8 08             	shr    eax,0x8
c0026ef6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ef9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026eff:	09 fe                	or     esi,edi
c0026f01:	c1 e6 17             	shl    esi,0x17
c0026f04:	09 c6                	or     esi,eax
c0026f06:	f6 c2 7f             	test   dl,0x7f
c0026f09:	0f 95 c1             	setne  cl
c0026f0c:	09 c8                	or     eax,ecx
c0026f0e:	83 e0 01             	and    eax,0x1
c0026f11:	c1 ea 07             	shr    edx,0x7
c0026f14:	21 c2                	and    edx,eax
c0026f16:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026f19:	eb 0a                	jmp    c0026f25 <__divsf3+0x221>
c0026f1b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026f20:	eb 03                	jmp    c0026f25 <__divsf3+0x221>
c0026f22:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f25:	89 d8                	mov    eax,ebx
c0026f27:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f2a:	5b                   	pop    ebx
c0026f2b:	5e                   	pop    esi
c0026f2c:	5f                   	pop    edi
c0026f2d:	5d                   	pop    ebp
c0026f2e:	c3                   	ret    

c0026f2f <__floatsisf>:
c0026f2f:	55                   	push   ebp
c0026f30:	89 e5                	mov    ebp,esp
c0026f32:	53                   	push   ebx
c0026f33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f36:	85 d2                	test   edx,edx
c0026f38:	7e 2b                	jle    c0026f65 <__floatsisf+0x36>
c0026f3a:	0f bd ca             	bsr    ecx,edx
c0026f3d:	83 f1 1f             	xor    ecx,0x1f
c0026f40:	d3 e2                	shl    edx,cl
c0026f42:	89 d0                	mov    eax,edx
c0026f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f49:	89 c3                	mov    ebx,eax
c0026f4b:	c1 eb 08             	shr    ebx,0x8
c0026f4e:	80 e2 7f             	and    dl,0x7f
c0026f51:	0f 95 c2             	setne  dl
c0026f54:	09 da                	or     edx,ebx
c0026f56:	83 e2 01             	and    edx,0x1
c0026f59:	c1 e8 07             	shr    eax,0x7
c0026f5c:	21 c2                	and    edx,eax
c0026f5e:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f63:	eb 32                	jmp    c0026f97 <__floatsisf+0x68>
c0026f65:	b8 00 00 00 00       	mov    eax,0x0
c0026f6a:	74 34                	je     c0026fa0 <__floatsisf+0x71>
c0026f6c:	f7 da                	neg    edx
c0026f6e:	0f bd ca             	bsr    ecx,edx
c0026f71:	83 f1 1f             	xor    ecx,0x1f
c0026f74:	d3 e2                	shl    edx,cl
c0026f76:	89 d0                	mov    eax,edx
c0026f78:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f7d:	89 c3                	mov    ebx,eax
c0026f7f:	c1 eb 08             	shr    ebx,0x8
c0026f82:	80 e2 7f             	and    dl,0x7f
c0026f85:	0f 95 c2             	setne  dl
c0026f88:	09 da                	or     edx,ebx
c0026f8a:	83 e2 01             	and    edx,0x1
c0026f8d:	c1 e8 07             	shr    eax,0x7
c0026f90:	21 c2                	and    edx,eax
c0026f92:	b8 9e 01 00 00       	mov    eax,0x19e
c0026f97:	29 c8                	sub    eax,ecx
c0026f99:	c1 e0 17             	shl    eax,0x17
c0026f9c:	09 d8                	or     eax,ebx
c0026f9e:	01 d0                	add    eax,edx
c0026fa0:	5b                   	pop    ebx
c0026fa1:	5d                   	pop    ebp
c0026fa2:	c3                   	ret    

c0026fa3 <__floatunsisf>:
c0026fa3:	55                   	push   ebp
c0026fa4:	89 e5                	mov    ebp,esp
c0026fa6:	53                   	push   ebx
c0026fa7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026faa:	31 c0                	xor    eax,eax
c0026fac:	85 d2                	test   edx,edx
c0026fae:	74 32                	je     c0026fe2 <__floatunsisf+0x3f>
c0026fb0:	0f bd ca             	bsr    ecx,edx
c0026fb3:	83 f1 1f             	xor    ecx,0x1f
c0026fb6:	d3 e2                	shl    edx,cl
c0026fb8:	89 d0                	mov    eax,edx
c0026fba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fbf:	89 c3                	mov    ebx,eax
c0026fc1:	c1 eb 08             	shr    ebx,0x8
c0026fc4:	80 e2 7f             	and    dl,0x7f
c0026fc7:	0f 95 c2             	setne  dl
c0026fca:	09 da                	or     edx,ebx
c0026fcc:	83 e2 01             	and    edx,0x1
c0026fcf:	c1 e8 07             	shr    eax,0x7
c0026fd2:	21 c2                	and    edx,eax
c0026fd4:	b8 9e 00 00 00       	mov    eax,0x9e
c0026fd9:	29 c8                	sub    eax,ecx
c0026fdb:	c1 e0 17             	shl    eax,0x17
c0026fde:	09 d8                	or     eax,ebx
c0026fe0:	01 d0                	add    eax,edx
c0026fe2:	5b                   	pop    ebx
c0026fe3:	5d                   	pop    ebp
c0026fe4:	c3                   	ret    

c0026fe5 <__fixsfsi>:
c0026fe5:	55                   	push   ebp
c0026fe6:	89 e5                	mov    ebp,esp
c0026fe8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026feb:	89 d1                	mov    ecx,edx
c0026fed:	c1 e1 08             	shl    ecx,0x8
c0026ff0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026ff6:	c1 fa 17             	sar    edx,0x17
c0026ff9:	78 1c                	js     c0027017 <__fixsfsi+0x32>
c0026ffb:	83 ea 7f             	sub    edx,0x7f
c0026ffe:	31 c0                	xor    eax,eax
c0027000:	83 fa 1e             	cmp    edx,0x1e
c0027003:	77 40                	ja     c0027045 <__fixsfsi+0x60>
c0027005:	89 c8                	mov    eax,ecx
c0027007:	0d 00 00 00 80       	or     eax,0x80000000
c002700c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027011:	29 d1                	sub    ecx,edx
c0027013:	d3 e8                	shr    eax,cl
c0027015:	eb 2e                	jmp    c0027045 <__fixsfsi+0x60>
c0027017:	31 c0                	xor    eax,eax
c0027019:	81 c2 81 00 00 00    	add    edx,0x81
c002701f:	78 24                	js     c0027045 <__fixsfsi+0x60>
c0027021:	83 fa 1e             	cmp    edx,0x1e
c0027024:	7e 09                	jle    c002702f <__fixsfsi+0x4a>
c0027026:	83 fa 1f             	cmp    edx,0x1f
c0027029:	75 18                	jne    c0027043 <__fixsfsi+0x5e>
c002702b:	85 c9                	test   ecx,ecx
c002702d:	75 14                	jne    c0027043 <__fixsfsi+0x5e>
c002702f:	89 c8                	mov    eax,ecx
c0027031:	0d 00 00 00 80       	or     eax,0x80000000
c0027036:	b9 1f 00 00 00       	mov    ecx,0x1f
c002703b:	29 d1                	sub    ecx,edx
c002703d:	d3 e8                	shr    eax,cl
c002703f:	f7 d8                	neg    eax
c0027041:	eb 02                	jmp    c0027045 <__fixsfsi+0x60>
c0027043:	31 c0                	xor    eax,eax
c0027045:	5d                   	pop    ebp
c0027046:	c3                   	ret    

c0027047 <__fixunssfsi>:
c0027047:	55                   	push   ebp
c0027048:	89 e5                	mov    ebp,esp
c002704a:	53                   	push   ebx
c002704b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002704e:	89 d3                	mov    ebx,edx
c0027050:	c1 fb 17             	sar    ebx,0x17
c0027053:	83 eb 7f             	sub    ebx,0x7f
c0027056:	31 c0                	xor    eax,eax
c0027058:	83 fb 1f             	cmp    ebx,0x1f
c002705b:	77 18                	ja     c0027075 <__fixunssfsi+0x2e>
c002705d:	89 d0                	mov    eax,edx
c002705f:	c1 e0 08             	shl    eax,0x8
c0027062:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027067:	0d 00 00 00 80       	or     eax,0x80000000
c002706c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027071:	29 d9                	sub    ecx,ebx
c0027073:	d3 e8                	shr    eax,cl
c0027075:	5b                   	pop    ebx
c0027076:	5d                   	pop    ebp
c0027077:	c3                   	ret    

c0027078 <__cmpsf2>:
c0027078:	55                   	push   ebp
c0027079:	89 e5                	mov    ebp,esp
c002707b:	57                   	push   edi
c002707c:	56                   	push   esi
c002707d:	53                   	push   ebx
c002707e:	83 ec 24             	sub    esp,0x24
c0027081:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027084:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027087:	e8 4f 10 00 00       	call   c00280db <__truncdfsf2>
c002708c:	5a                   	pop    edx
c002708d:	59                   	pop    ecx
c002708e:	89 c3                	mov    ebx,eax
c0027090:	c1 e8 17             	shr    eax,0x17
c0027093:	0f b6 f0             	movzx  esi,al
c0027096:	89 d8                	mov    eax,ebx
c0027098:	c1 e8 1f             	shr    eax,0x1f
c002709b:	31 c6                	xor    esi,eax
c002709d:	c1 e3 08             	shl    ebx,0x8
c00270a0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00270a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00270a6:	e8 30 10 00 00       	call   c00280db <__truncdfsf2>
c00270ab:	83 c4 10             	add    esp,0x10
c00270ae:	89 c1                	mov    ecx,eax
c00270b0:	c1 e9 17             	shr    ecx,0x17
c00270b3:	0f b6 c9             	movzx  ecx,cl
c00270b6:	89 c7                	mov    edi,eax
c00270b8:	c1 ef 1f             	shr    edi,0x1f
c00270bb:	89 ca                	mov    edx,ecx
c00270bd:	31 fa                	xor    edx,edi
c00270bf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00270c2:	c1 e0 08             	shl    eax,0x8
c00270c5:	89 c2                	mov    edx,eax
c00270c7:	89 d8                	mov    eax,ebx
c00270c9:	09 d0                	or     eax,edx
c00270cb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270d0:	09 f0                	or     eax,esi
c00270d2:	75 08                	jne    c00270dc <__cmpsf2+0x64>
c00270d4:	31 c0                	xor    eax,eax
c00270d6:	39 f9                	cmp    ecx,edi
c00270d8:	75 0c                	jne    c00270e6 <__cmpsf2+0x6e>
c00270da:	eb 29                	jmp    c0027105 <__cmpsf2+0x8d>
c00270dc:	b8 01 00 00 00       	mov    eax,0x1
c00270e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270e4:	7f 1f                	jg     c0027105 <__cmpsf2+0x8d>
c00270e6:	83 c8 ff             	or     eax,0xffffffff
c00270e9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270ec:	7c 17                	jl     c0027105 <__cmpsf2+0x8d>
c00270ee:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00270f4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00270fa:	b8 01 00 00 00       	mov    eax,0x1
c00270ff:	39 d3                	cmp    ebx,edx
c0027101:	77 02                	ja     c0027105 <__cmpsf2+0x8d>
c0027103:	19 c0                	sbb    eax,eax
c0027105:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027108:	5b                   	pop    ebx
c0027109:	5e                   	pop    esi
c002710a:	5f                   	pop    edi
c002710b:	5d                   	pop    ebp
c002710c:	c3                   	ret    

c002710d <__eqsf2>:
c002710d:	55                   	push   ebp
c002710e:	89 e5                	mov    ebp,esp
c0027110:	83 ec 24             	sub    esp,0x24
c0027113:	6a 01                	push   0x1
c0027115:	83 ec 0c             	sub    esp,0xc
c0027118:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002711b:	e8 df 10 00 00       	call   c00281ff <__extendsfdf2>
c0027120:	83 c4 10             	add    esp,0x10
c0027123:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027126:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027129:	52                   	push   edx
c002712a:	50                   	push   eax
c002712b:	50                   	push   eax
c002712c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002712f:	e8 cb 10 00 00       	call   c00281ff <__extendsfdf2>
c0027134:	59                   	pop    ecx
c0027135:	59                   	pop    ecx
c0027136:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027139:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002713c:	52                   	push   edx
c002713d:	50                   	push   eax
c002713e:	e8 35 ff ff ff       	call   c0027078 <__cmpsf2>
c0027143:	83 c4 20             	add    esp,0x20
c0027146:	c9                   	leave  
c0027147:	c3                   	ret    

c0027148 <__nesf2>:
c0027148:	eb c3                	jmp    c002710d <__eqsf2>

c002714a <__gtsf2>:
c002714a:	55                   	push   ebp
c002714b:	89 e5                	mov    ebp,esp
c002714d:	83 ec 24             	sub    esp,0x24
c0027150:	6a ff                	push   0xffffffff
c0027152:	83 ec 0c             	sub    esp,0xc
c0027155:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027158:	e8 a2 10 00 00       	call   c00281ff <__extendsfdf2>
c002715d:	83 c4 10             	add    esp,0x10
c0027160:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027163:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027166:	52                   	push   edx
c0027167:	50                   	push   eax
c0027168:	50                   	push   eax
c0027169:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002716c:	e8 8e 10 00 00       	call   c00281ff <__extendsfdf2>
c0027171:	59                   	pop    ecx
c0027172:	59                   	pop    ecx
c0027173:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027176:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027179:	52                   	push   edx
c002717a:	50                   	push   eax
c002717b:	e8 f8 fe ff ff       	call   c0027078 <__cmpsf2>
c0027180:	83 c4 20             	add    esp,0x20
c0027183:	c9                   	leave  
c0027184:	c3                   	ret    

c0027185 <__gesf2>:
c0027185:	eb c3                	jmp    c002714a <__gtsf2>

c0027187 <__ltsf2>:
c0027187:	eb 84                	jmp    c002710d <__eqsf2>

c0027189 <__lesf2>:
c0027189:	eb 82                	jmp    c002710d <__eqsf2>

c002718b <__adddf3>:
c002718b:	55                   	push   ebp
c002718c:	89 e5                	mov    ebp,esp
c002718e:	57                   	push   edi
c002718f:	56                   	push   esi
c0027190:	53                   	push   ebx
c0027191:	83 ec 24             	sub    esp,0x24
c0027194:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027197:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002719a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002719d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00271a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00271a6:	89 c8                	mov    eax,ecx
c00271a8:	89 ce                	mov    esi,ecx
c00271aa:	c1 fe 14             	sar    esi,0x14
c00271ad:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00271b0:	89 fb                	mov    ebx,edi
c00271b2:	89 fa                	mov    edx,edi
c00271b4:	c1 e2 0b             	shl    edx,0xb
c00271b7:	c1 e0 0b             	shl    eax,0xb
c00271ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271bf:	c1 eb 15             	shr    ebx,0x15
c00271c2:	09 d8                	or     eax,ebx
c00271c4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00271c7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00271ca:	c1 fe 14             	sar    esi,0x14
c00271cd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00271d0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00271d3:	89 f3                	mov    ebx,esi
c00271d5:	c1 e3 0b             	shl    ebx,0xb
c00271d8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00271db:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00271de:	c1 e3 0b             	shl    ebx,0xb
c00271e1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00271e7:	c1 ee 15             	shr    esi,0x15
c00271ea:	09 f3                	or     ebx,esi
c00271ec:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00271ef:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00271f2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00271f5:	0f 88 5f 02 00 00    	js     c002745a <__adddf3+0x2cf>
c00271fb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271fe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027201:	85 db                	test   ebx,ebx
c0027203:	0f 8e c7 00 00 00    	jle    c00272d0 <__adddf3+0x145>
c0027209:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027210:	75 1a                	jne    c002722c <__adddf3+0xa1>
c0027212:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027215:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027218:	0f 84 b2 05 00 00    	je     c00277d0 <__adddf3+0x645>
c002721e:	4b                   	dec    ebx
c002721f:	75 23                	jne    c0027244 <__adddf3+0xb9>
c0027221:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027224:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027227:	e9 99 00 00 00       	jmp    c00272c5 <__adddf3+0x13a>
c002722c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002722f:	f7 d6                	not    esi
c0027231:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027237:	0f 84 93 05 00 00    	je     c00277d0 <__adddf3+0x645>
c002723d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027244:	83 fb 1f             	cmp    ebx,0x1f
c0027247:	7e 42                	jle    c002728b <__adddf3+0x100>
c0027249:	83 fb 3f             	cmp    ebx,0x3f
c002724c:	0f 8f 7e 05 00 00    	jg     c00277d0 <__adddf3+0x645>
c0027252:	83 e3 1f             	and    ebx,0x1f
c0027255:	89 d9                	mov    ecx,ebx
c0027257:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002725a:	d3 ef                	shr    edi,cl
c002725c:	31 db                	xor    ebx,ebx
c002725e:	85 c9                	test   ecx,ecx
c0027260:	74 15                	je     c0027277 <__adddf3+0xec>
c0027262:	be 20 00 00 00       	mov    esi,0x20
c0027267:	29 ce                	sub    esi,ecx
c0027269:	89 f1                	mov    ecx,esi
c002726b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002726e:	d3 e6                	shl    esi,cl
c0027270:	31 db                	xor    ebx,ebx
c0027272:	85 f6                	test   esi,esi
c0027274:	0f 95 c3             	setne  bl
c0027277:	31 c9                	xor    ecx,ecx
c0027279:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002727d:	0f 95 c1             	setne  cl
c0027280:	09 cf                	or     edi,ecx
c0027282:	09 fb                	or     ebx,edi
c0027284:	01 da                	add    edx,ebx
c0027286:	83 d0 00             	adc    eax,0x0
c0027289:	eb 3a                	jmp    c00272c5 <__adddf3+0x13a>
c002728b:	bf 20 00 00 00       	mov    edi,0x20
c0027290:	29 df                	sub    edi,ebx
c0027292:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027295:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027298:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002729b:	d3 e6                	shl    esi,cl
c002729d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272a0:	88 d9                	mov    cl,bl
c00272a2:	d3 ef                	shr    edi,cl
c00272a4:	09 fe                	or     esi,edi
c00272a6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272a9:	88 d9                	mov    cl,bl
c00272ab:	d3 ef                	shr    edi,cl
c00272ad:	89 fb                	mov    ebx,edi
c00272af:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272b2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272b5:	d3 e7                	shl    edi,cl
c00272b7:	85 ff                	test   edi,edi
c00272b9:	0f 95 c1             	setne  cl
c00272bc:	0f b6 c9             	movzx  ecx,cl
c00272bf:	09 ce                	or     esi,ecx
c00272c1:	01 f2                	add    edx,esi
c00272c3:	11 d8                	adc    eax,ebx
c00272c5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272cb:	e9 52 01 00 00       	jmp    c0027422 <__adddf3+0x297>
c00272d0:	0f 84 d5 00 00 00    	je     c00273ab <__adddf3+0x220>
c00272d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00272d9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00272dc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272df:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272e2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00272e9:	75 20                	jne    c002730b <__adddf3+0x180>
c00272eb:	89 d6                	mov    esi,edx
c00272ed:	09 c6                	or     esi,eax
c00272ef:	0f 84 db 04 00 00    	je     c00277d0 <__adddf3+0x645>
c00272f5:	4b                   	dec    ebx
c00272f6:	75 29                	jne    c0027321 <__adddf3+0x196>
c00272f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272fe:	01 d1                	add    ecx,edx
c0027300:	11 c6                	adc    esi,eax
c0027302:	89 f0                	mov    eax,esi
c0027304:	89 ca                	mov    edx,ecx
c0027306:	e9 17 01 00 00       	jmp    c0027422 <__adddf3+0x297>
c002730b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002730e:	f7 d6                	not    esi
c0027310:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027316:	0f 84 b4 04 00 00    	je     c00277d0 <__adddf3+0x645>
c002731c:	0d 00 00 00 80       	or     eax,0x80000000
c0027321:	83 fb 1f             	cmp    ebx,0x1f
c0027324:	7e 48                	jle    c002736e <__adddf3+0x1e3>
c0027326:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027329:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002732c:	83 fb 3f             	cmp    ebx,0x3f
c002732f:	0f 8f 9b 04 00 00    	jg     c00277d0 <__adddf3+0x645>
c0027335:	83 e3 1f             	and    ebx,0x1f
c0027338:	89 d9                	mov    ecx,ebx
c002733a:	89 c7                	mov    edi,eax
c002733c:	d3 ef                	shr    edi,cl
c002733e:	31 db                	xor    ebx,ebx
c0027340:	85 c9                	test   ecx,ecx
c0027342:	74 12                	je     c0027356 <__adddf3+0x1cb>
c0027344:	be 20 00 00 00       	mov    esi,0x20
c0027349:	29 ce                	sub    esi,ecx
c002734b:	89 f1                	mov    ecx,esi
c002734d:	d3 e0                	shl    eax,cl
c002734f:	31 db                	xor    ebx,ebx
c0027351:	85 c0                	test   eax,eax
c0027353:	0f 95 c3             	setne  bl
c0027356:	31 c0                	xor    eax,eax
c0027358:	85 d2                	test   edx,edx
c002735a:	0f 95 c0             	setne  al
c002735d:	09 c7                	or     edi,eax
c002735f:	09 fb                	or     ebx,edi
c0027361:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027364:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027367:	01 da                	add    edx,ebx
c0027369:	83 d6 00             	adc    esi,0x0
c002736c:	eb 39                	jmp    c00273a7 <__adddf3+0x21c>
c002736e:	be 20 00 00 00       	mov    esi,0x20
c0027373:	29 de                	sub    esi,ebx
c0027375:	89 c7                	mov    edi,eax
c0027377:	89 f1                	mov    ecx,esi
c0027379:	d3 e7                	shl    edi,cl
c002737b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002737e:	89 d7                	mov    edi,edx
c0027380:	88 d9                	mov    cl,bl
c0027382:	d3 ef                	shr    edi,cl
c0027384:	89 f9                	mov    ecx,edi
c0027386:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027389:	09 cf                	or     edi,ecx
c002738b:	88 d9                	mov    cl,bl
c002738d:	d3 e8                	shr    eax,cl
c002738f:	89 f1                	mov    ecx,esi
c0027391:	d3 e2                	shl    edx,cl
c0027393:	85 d2                	test   edx,edx
c0027395:	0f 95 c2             	setne  dl
c0027398:	0f b6 d2             	movzx  edx,dl
c002739b:	09 d7                	or     edi,edx
c002739d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273a3:	01 fa                	add    edx,edi
c00273a5:	11 c6                	adc    esi,eax
c00273a7:	89 f0                	mov    eax,esi
c00273a9:	eb 77                	jmp    c0027422 <__adddf3+0x297>
c00273ab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273ae:	46                   	inc    esi
c00273af:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273b2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273b8:	75 41                	jne    c00273fb <__adddf3+0x270>
c00273ba:	89 d3                	mov    ebx,edx
c00273bc:	09 c3                	or     ebx,eax
c00273be:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273c5:	75 27                	jne    c00273ee <__adddf3+0x263>
c00273c7:	85 db                	test   ebx,ebx
c00273c9:	0f 84 fb 03 00 00    	je     c00277ca <__adddf3+0x63f>
c00273cf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273d2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273d5:	0f 84 f5 03 00 00    	je     c00277d0 <__adddf3+0x645>
c00273db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273e1:	85 c0                	test   eax,eax
c00273e3:	0f 89 91 03 00 00    	jns    c002777a <__adddf3+0x5ef>
c00273e9:	e9 85 03 00 00       	jmp    c0027773 <__adddf3+0x5e8>
c00273ee:	85 db                	test   ebx,ebx
c00273f0:	0f 85 da 03 00 00    	jne    c00277d0 <__adddf3+0x645>
c00273f6:	e9 cf 03 00 00       	jmp    c00277ca <__adddf3+0x63f>
c00273fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027401:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027404:	f7 d1                	not    ecx
c0027406:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002740c:	0f 84 70 03 00 00    	je     c0027782 <__adddf3+0x5f7>
c0027412:	d1 ea                	shr    edx,1
c0027414:	89 c1                	mov    ecx,eax
c0027416:	c1 e1 1f             	shl    ecx,0x1f
c0027419:	09 ca                	or     edx,ecx
c002741b:	d1 e8                	shr    eax,1
c002741d:	e9 6f 03 00 00       	jmp    c0027791 <__adddf3+0x606>
c0027422:	85 c0                	test   eax,eax
c0027424:	0f 89 67 03 00 00    	jns    c0027791 <__adddf3+0x606>
c002742a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002742d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027430:	f7 d1                	not    ecx
c0027432:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027438:	0f 84 44 03 00 00    	je     c0027782 <__adddf3+0x5f7>
c002743e:	89 d1                	mov    ecx,edx
c0027440:	d1 e9                	shr    ecx,1
c0027442:	83 e2 01             	and    edx,0x1
c0027445:	09 ca                	or     edx,ecx
c0027447:	89 c1                	mov    ecx,eax
c0027449:	c1 e1 1f             	shl    ecx,0x1f
c002744c:	09 ca                	or     edx,ecx
c002744e:	d1 e8                	shr    eax,1
c0027450:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027455:	e9 37 03 00 00       	jmp    c0027791 <__adddf3+0x606>
c002745a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002745d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027463:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027466:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027469:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002746f:	29 de                	sub    esi,ebx
c0027471:	85 f6                	test   esi,esi
c0027473:	0f 8e bd 00 00 00    	jle    c0027536 <__adddf3+0x3ab>
c0027479:	85 db                	test   ebx,ebx
c002747b:	75 17                	jne    c0027494 <__adddf3+0x309>
c002747d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027480:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027483:	0f 84 47 03 00 00    	je     c00277d0 <__adddf3+0x645>
c0027489:	4e                   	dec    esi
c002748a:	75 20                	jne    c00274ac <__adddf3+0x321>
c002748c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002748f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027492:	eb 5b                	jmp    c00274ef <__adddf3+0x364>
c0027494:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027497:	f7 d3                	not    ebx
c0027499:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002749f:	0f 84 2b 03 00 00    	je     c00277d0 <__adddf3+0x645>
c00274a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274ac:	83 fe 1f             	cmp    esi,0x1f
c00274af:	7e 49                	jle    c00274fa <__adddf3+0x36f>
c00274b1:	83 fe 3f             	cmp    esi,0x3f
c00274b4:	0f 8f 16 03 00 00    	jg     c00277d0 <__adddf3+0x645>
c00274ba:	83 e6 1f             	and    esi,0x1f
c00274bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274c0:	89 f1                	mov    ecx,esi
c00274c2:	d3 ef                	shr    edi,cl
c00274c4:	31 db                	xor    ebx,ebx
c00274c6:	85 f6                	test   esi,esi
c00274c8:	74 13                	je     c00274dd <__adddf3+0x352>
c00274ca:	b9 20 00 00 00       	mov    ecx,0x20
c00274cf:	29 f1                	sub    ecx,esi
c00274d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274d4:	d3 e6                	shl    esi,cl
c00274d6:	31 db                	xor    ebx,ebx
c00274d8:	85 f6                	test   esi,esi
c00274da:	0f 95 c3             	setne  bl
c00274dd:	31 c9                	xor    ecx,ecx
c00274df:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274e3:	0f 95 c1             	setne  cl
c00274e6:	09 cf                	or     edi,ecx
c00274e8:	09 fb                	or     ebx,edi
c00274ea:	29 da                	sub    edx,ebx
c00274ec:	83 d8 00             	sbb    eax,0x0
c00274ef:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00274f5:	e9 aa 01 00 00       	jmp    c00276a4 <__adddf3+0x519>
c00274fa:	bf 20 00 00 00       	mov    edi,0x20
c00274ff:	29 f7                	sub    edi,esi
c0027501:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027504:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027507:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002750a:	d3 e3                	shl    ebx,cl
c002750c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002750f:	89 f1                	mov    ecx,esi
c0027511:	d3 ef                	shr    edi,cl
c0027513:	09 fb                	or     ebx,edi
c0027515:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027518:	89 f1                	mov    ecx,esi
c002751a:	d3 ef                	shr    edi,cl
c002751c:	89 fe                	mov    esi,edi
c002751e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027521:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027524:	d3 e7                	shl    edi,cl
c0027526:	85 ff                	test   edi,edi
c0027528:	0f 95 c1             	setne  cl
c002752b:	0f b6 c9             	movzx  ecx,cl
c002752e:	09 cb                	or     ebx,ecx
c0027530:	29 da                	sub    edx,ebx
c0027532:	19 f0                	sbb    eax,esi
c0027534:	eb b9                	jmp    c00274ef <__adddf3+0x364>
c0027536:	0f 84 cd 00 00 00    	je     c0027609 <__adddf3+0x47e>
c002753c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002753f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027542:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027545:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027549:	75 1b                	jne    c0027566 <__adddf3+0x3db>
c002754b:	89 d6                	mov    esi,edx
c002754d:	09 c6                	or     esi,eax
c002754f:	0f 84 7b 02 00 00    	je     c00277d0 <__adddf3+0x645>
c0027555:	4b                   	dec    ebx
c0027556:	75 24                	jne    c002757c <__adddf3+0x3f1>
c0027558:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002755b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002755e:	29 d1                	sub    ecx,edx
c0027560:	19 c6                	sbb    esi,eax
c0027562:	89 ca                	mov    edx,ecx
c0027564:	eb 61                	jmp    c00275c7 <__adddf3+0x43c>
c0027566:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027569:	f7 d6                	not    esi
c002756b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027571:	0f 84 59 02 00 00    	je     c00277d0 <__adddf3+0x645>
c0027577:	0d 00 00 00 80       	or     eax,0x80000000
c002757c:	83 fb 1f             	cmp    ebx,0x1f
c002757f:	7e 4d                	jle    c00275ce <__adddf3+0x443>
c0027581:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027584:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027587:	83 fb 3f             	cmp    ebx,0x3f
c002758a:	0f 8f 40 02 00 00    	jg     c00277d0 <__adddf3+0x645>
c0027590:	83 e3 1f             	and    ebx,0x1f
c0027593:	89 d9                	mov    ecx,ebx
c0027595:	89 c7                	mov    edi,eax
c0027597:	d3 ef                	shr    edi,cl
c0027599:	31 db                	xor    ebx,ebx
c002759b:	85 c9                	test   ecx,ecx
c002759d:	74 12                	je     c00275b1 <__adddf3+0x426>
c002759f:	be 20 00 00 00       	mov    esi,0x20
c00275a4:	29 ce                	sub    esi,ecx
c00275a6:	89 f1                	mov    ecx,esi
c00275a8:	d3 e0                	shl    eax,cl
c00275aa:	31 db                	xor    ebx,ebx
c00275ac:	85 c0                	test   eax,eax
c00275ae:	0f 95 c3             	setne  bl
c00275b1:	31 c0                	xor    eax,eax
c00275b3:	85 d2                	test   edx,edx
c00275b5:	0f 95 c0             	setne  al
c00275b8:	09 c7                	or     edi,eax
c00275ba:	09 fb                	or     ebx,edi
c00275bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275bf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275c2:	29 da                	sub    edx,ebx
c00275c4:	83 de 00             	sbb    esi,0x0
c00275c7:	89 f0                	mov    eax,esi
c00275c9:	e9 d6 00 00 00       	jmp    c00276a4 <__adddf3+0x519>
c00275ce:	be 20 00 00 00       	mov    esi,0x20
c00275d3:	29 de                	sub    esi,ebx
c00275d5:	89 c7                	mov    edi,eax
c00275d7:	89 f1                	mov    ecx,esi
c00275d9:	d3 e7                	shl    edi,cl
c00275db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275de:	89 d7                	mov    edi,edx
c00275e0:	88 d9                	mov    cl,bl
c00275e2:	d3 ef                	shr    edi,cl
c00275e4:	89 f9                	mov    ecx,edi
c00275e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275e9:	09 cf                	or     edi,ecx
c00275eb:	88 d9                	mov    cl,bl
c00275ed:	d3 e8                	shr    eax,cl
c00275ef:	89 f1                	mov    ecx,esi
c00275f1:	d3 e2                	shl    edx,cl
c00275f3:	85 d2                	test   edx,edx
c00275f5:	0f 95 c2             	setne  dl
c00275f8:	0f b6 d2             	movzx  edx,dl
c00275fb:	09 d7                	or     edi,edx
c00275fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027600:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027603:	29 fa                	sub    edx,edi
c0027605:	19 c6                	sbb    esi,eax
c0027607:	eb be                	jmp    c00275c7 <__adddf3+0x43c>
c0027609:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002760c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002760f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027615:	75 6a                	jne    c0027681 <__adddf3+0x4f6>
c0027617:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002761b:	75 58                	jne    c0027675 <__adddf3+0x4ea>
c002761d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027620:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027623:	89 d6                	mov    esi,edx
c0027625:	09 c6                	or     esi,eax
c0027627:	75 17                	jne    c0027640 <__adddf3+0x4b5>
c0027629:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002762c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002762f:	85 db                	test   ebx,ebx
c0027631:	0f 85 99 01 00 00    	jne    c00277d0 <__adddf3+0x645>
c0027637:	31 ff                	xor    edi,edi
c0027639:	31 c9                	xor    ecx,ecx
c002763b:	e9 90 01 00 00       	jmp    c00277d0 <__adddf3+0x645>
c0027640:	85 db                	test   ebx,ebx
c0027642:	0f 84 88 01 00 00    	je     c00277d0 <__adddf3+0x645>
c0027648:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002764b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002764e:	85 c0                	test   eax,eax
c0027650:	79 10                	jns    c0027662 <__adddf3+0x4d7>
c0027652:	31 c9                	xor    ecx,ecx
c0027654:	f7 da                	neg    edx
c0027656:	0f 95 c1             	setne  cl
c0027659:	01 c8                	add    eax,ecx
c002765b:	f7 d8                	neg    eax
c002765d:	e9 2f 01 00 00       	jmp    c0027791 <__adddf3+0x606>
c0027662:	31 ff                	xor    edi,edi
c0027664:	31 c9                	xor    ecx,ecx
c0027666:	89 c3                	mov    ebx,eax
c0027668:	09 d3                	or     ebx,edx
c002766a:	0f 84 60 01 00 00    	je     c00277d0 <__adddf3+0x645>
c0027670:	e9 05 01 00 00       	jmp    c002777a <__adddf3+0x5ef>
c0027675:	31 ff                	xor    edi,edi
c0027677:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002767c:	e9 4f 01 00 00       	jmp    c00277d0 <__adddf3+0x645>
c0027681:	89 c1                	mov    ecx,eax
c0027683:	89 d0                	mov    eax,edx
c0027685:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027688:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002768b:	89 ca                	mov    edx,ecx
c002768d:	85 c9                	test   ecx,ecx
c002768f:	79 2c                	jns    c00276bd <__adddf3+0x532>
c0027691:	31 c9                	xor    ecx,ecx
c0027693:	f7 d8                	neg    eax
c0027695:	0f 95 c1             	setne  cl
c0027698:	01 ca                	add    edx,ecx
c002769a:	f7 da                	neg    edx
c002769c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002769f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276a2:	eb 19                	jmp    c00276bd <__adddf3+0x532>
c00276a4:	85 c0                	test   eax,eax
c00276a6:	0f 89 e5 00 00 00    	jns    c0027791 <__adddf3+0x606>
c00276ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276b1:	89 c1                	mov    ecx,eax
c00276b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00276b9:	89 d0                	mov    eax,edx
c00276bb:	89 ca                	mov    edx,ecx
c00276bd:	85 d2                	test   edx,edx
c00276bf:	74 59                	je     c002771a <__adddf3+0x58f>
c00276c1:	0f bd da             	bsr    ebx,edx
c00276c4:	83 f3 1f             	xor    ebx,0x1f
c00276c7:	88 d9                	mov    cl,bl
c00276c9:	d3 e2                	shl    edx,cl
c00276cb:	bf 20 00 00 00       	mov    edi,0x20
c00276d0:	89 f9                	mov    ecx,edi
c00276d2:	29 d9                	sub    ecx,ebx
c00276d4:	89 c6                	mov    esi,eax
c00276d6:	d3 ee                	shr    esi,cl
c00276d8:	09 d6                	or     esi,edx
c00276da:	88 d9                	mov    cl,bl
c00276dc:	d3 e0                	shl    eax,cl
c00276de:	89 c2                	mov    edx,eax
c00276e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276e3:	25 ff 07 00 00       	and    eax,0x7ff
c00276e8:	39 d8                	cmp    eax,ebx
c00276ea:	7f 22                	jg     c002770e <__adddf3+0x583>
c00276ec:	29 c3                	sub    ebx,eax
c00276ee:	43                   	inc    ebx
c00276ef:	88 d9                	mov    cl,bl
c00276f1:	d3 ea                	shr    edx,cl
c00276f3:	29 df                	sub    edi,ebx
c00276f5:	89 f9                	mov    ecx,edi
c00276f7:	89 f0                	mov    eax,esi
c00276f9:	d3 e0                	shl    eax,cl
c00276fb:	09 c2                	or     edx,eax
c00276fd:	89 f0                	mov    eax,esi
c00276ff:	88 d9                	mov    cl,bl
c0027701:	d3 e8                	shr    eax,cl
c0027703:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027706:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002770c:	eb 6f                	jmp    c002777d <__adddf3+0x5f2>
c002770e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027711:	29 d8                	sub    eax,ebx
c0027713:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027716:	89 f0                	mov    eax,esi
c0027718:	eb 59                	jmp    c0027773 <__adddf3+0x5e8>
c002771a:	85 c0                	test   eax,eax
c002771c:	74 6a                	je     c0027788 <__adddf3+0x5fd>
c002771e:	0f bd c8             	bsr    ecx,eax
c0027721:	83 f1 1f             	xor    ecx,0x1f
c0027724:	d3 e0                	shl    eax,cl
c0027726:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027729:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002772f:	83 c1 20             	add    ecx,0x20
c0027732:	39 cb                	cmp    ebx,ecx
c0027734:	7f 35                	jg     c002776b <__adddf3+0x5e0>
c0027736:	29 d9                	sub    ecx,ebx
c0027738:	8d 71 01             	lea    esi,[ecx+0x1]
c002773b:	83 fe 1f             	cmp    esi,0x1f
c002773e:	7e 09                	jle    c0027749 <__adddf3+0x5be>
c0027740:	83 e9 1f             	sub    ecx,0x1f
c0027743:	d3 e8                	shr    eax,cl
c0027745:	89 c3                	mov    ebx,eax
c0027747:	eb 11                	jmp    c002775a <__adddf3+0x5cf>
c0027749:	b9 20 00 00 00       	mov    ecx,0x20
c002774e:	29 f1                	sub    ecx,esi
c0027750:	89 c3                	mov    ebx,eax
c0027752:	d3 e3                	shl    ebx,cl
c0027754:	89 f1                	mov    ecx,esi
c0027756:	d3 e8                	shr    eax,cl
c0027758:	89 c2                	mov    edx,eax
c002775a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002775d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027762:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027765:	89 d0                	mov    eax,edx
c0027767:	89 da                	mov    edx,ebx
c0027769:	eb 26                	jmp    c0027791 <__adddf3+0x606>
c002776b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776e:	29 cf                	sub    edi,ecx
c0027770:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027773:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027778:	eb 17                	jmp    c0027791 <__adddf3+0x606>
c002777a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002777d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027780:	eb 0f                	jmp    c0027791 <__adddf3+0x606>
c0027782:	31 d2                	xor    edx,edx
c0027784:	31 c0                	xor    eax,eax
c0027786:	eb 09                	jmp    c0027791 <__adddf3+0x606>
c0027788:	89 c2                	mov    edx,eax
c002778a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027791:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027794:	c1 e1 14             	shl    ecx,0x14
c0027797:	89 c3                	mov    ebx,eax
c0027799:	c1 eb 0b             	shr    ebx,0xb
c002779c:	09 d9                	or     ecx,ebx
c002779e:	89 d3                	mov    ebx,edx
c00277a0:	c1 eb 0b             	shr    ebx,0xb
c00277a3:	c1 e0 15             	shl    eax,0x15
c00277a6:	09 d8                	or     eax,ebx
c00277a8:	89 c7                	mov    edi,eax
c00277aa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00277b0:	0f 95 c0             	setne  al
c00277b3:	89 c6                	mov    esi,eax
c00277b5:	09 f3                	or     ebx,esi
c00277b7:	83 e3 01             	and    ebx,0x1
c00277ba:	c1 ea 0a             	shr    edx,0xa
c00277bd:	21 da                	and    edx,ebx
c00277bf:	89 f8                	mov    eax,edi
c00277c1:	01 d0                	add    eax,edx
c00277c3:	83 d1 00             	adc    ecx,0x0
c00277c6:	89 c7                	mov    edi,eax
c00277c8:	eb 06                	jmp    c00277d0 <__adddf3+0x645>
c00277ca:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277cd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277d0:	89 f8                	mov    eax,edi
c00277d2:	89 ca                	mov    edx,ecx
c00277d4:	83 c4 24             	add    esp,0x24
c00277d7:	5b                   	pop    ebx
c00277d8:	5e                   	pop    esi
c00277d9:	5f                   	pop    edi
c00277da:	5d                   	pop    ebp
c00277db:	c3                   	ret    

c00277dc <__subdf3>:
c00277dc:	55                   	push   ebp
c00277dd:	89 e5                	mov    ebp,esp
c00277df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00277e5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00277eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00277ee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00277f1:	5d                   	pop    ebp
c00277f2:	e9 94 f9 ff ff       	jmp    c002718b <__adddf3>

c00277f7 <__negdf2>:
c00277f7:	55                   	push   ebp
c00277f8:	89 e5                	mov    ebp,esp
c00277fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00277fd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027800:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027806:	5d                   	pop    ebp
c0027807:	c3                   	ret    

c0027808 <__muldf3>:
c0027808:	55                   	push   ebp
c0027809:	89 e5                	mov    ebp,esp
c002780b:	57                   	push   edi
c002780c:	56                   	push   esi
c002780d:	53                   	push   ebx
c002780e:	83 ec 24             	sub    esp,0x24
c0027811:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027814:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027817:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002781a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002781d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027820:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027823:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027826:	89 c8                	mov    eax,ecx
c0027828:	c1 f8 14             	sar    eax,0x14
c002782b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002782e:	89 f8                	mov    eax,edi
c0027830:	89 fb                	mov    ebx,edi
c0027832:	c1 e3 0b             	shl    ebx,0xb
c0027835:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027838:	c1 e1 0b             	shl    ecx,0xb
c002783b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027841:	c1 e8 15             	shr    eax,0x15
c0027844:	09 c1                	or     ecx,eax
c0027846:	89 d6                	mov    esi,edx
c0027848:	89 d0                	mov    eax,edx
c002784a:	c1 f8 14             	sar    eax,0x14
c002784d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027850:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027853:	89 c3                	mov    ebx,eax
c0027855:	c1 e3 0b             	shl    ebx,0xb
c0027858:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002785b:	c1 e6 0b             	shl    esi,0xb
c002785e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027864:	c1 e8 15             	shr    eax,0x15
c0027867:	09 c6                	or     esi,eax
c0027869:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002786c:	25 ff 07 00 00       	and    eax,0x7ff
c0027871:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027874:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027877:	25 ff 07 00 00       	and    eax,0x7ff
c002787c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002787f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027882:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027885:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002788c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002788f:	40                   	inc    eax
c0027890:	a9 fe 07 00 00       	test   eax,0x7fe
c0027895:	0f 85 8d 00 00 00    	jne    c0027928 <__muldf3+0x120>
c002789b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002789e:	09 c8                	or     eax,ecx
c00278a0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00278a4:	74 44                	je     c00278ea <__muldf3+0xe2>
c00278a6:	85 c0                	test   eax,eax
c00278a8:	0f 85 31 02 00 00    	jne    c0027adf <__muldf3+0x2d7>
c00278ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278b1:	40                   	inc    eax
c00278b2:	a9 fe 07 00 00       	test   eax,0x7fe
c00278b7:	75 13                	jne    c00278cc <__muldf3+0xc4>
c00278b9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278bc:	09 f1                	or     ecx,esi
c00278be:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278c2:	74 22                	je     c00278e6 <__muldf3+0xde>
c00278c4:	85 c9                	test   ecx,ecx
c00278c6:	0f 85 0d 02 00 00    	jne    c0027ad9 <__muldf3+0x2d1>
c00278cc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00278d0:	0f 89 09 02 00 00    	jns    c0027adf <__muldf3+0x2d7>
c00278d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00278d9:	05 00 00 00 80       	add    eax,0x80000000
c00278de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278e1:	e9 f9 01 00 00       	jmp    c0027adf <__muldf3+0x2d7>
c00278e6:	85 c9                	test   ecx,ecx
c00278e8:	eb 2e                	jmp    c0027918 <__muldf3+0x110>
c00278ea:	85 c0                	test   eax,eax
c00278ec:	74 20                	je     c002790e <__muldf3+0x106>
c00278ee:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00278f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278f4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278f7:	c1 ef 1f             	shr    edi,0x1f
c00278fa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00278fd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027900:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027903:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027906:	09 f9                	or     ecx,edi
c0027908:	78 1e                	js     c0027928 <__muldf3+0x120>
c002790a:	89 c3                	mov    ebx,eax
c002790c:	eb e0                	jmp    c00278ee <__muldf3+0xe6>
c002790e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027911:	f7 d0                	not    eax
c0027913:	a9 ff 07 00 00       	test   eax,0x7ff
c0027918:	75 b2                	jne    c00278cc <__muldf3+0xc4>
c002791a:	31 ff                	xor    edi,edi
c002791c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027923:	e9 b7 01 00 00       	jmp    c0027adf <__muldf3+0x2d7>
c0027928:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002792b:	40                   	inc    eax
c002792c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027931:	75 57                	jne    c002798a <__muldf3+0x182>
c0027933:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027936:	09 f0                	or     eax,esi
c0027938:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002793c:	74 23                	je     c0027961 <__muldf3+0x159>
c002793e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027942:	0f 89 91 01 00 00    	jns    c0027ad9 <__muldf3+0x2d1>
c0027948:	85 c0                	test   eax,eax
c002794a:	0f 85 89 01 00 00    	jne    c0027ad9 <__muldf3+0x2d1>
c0027950:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027953:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027959:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002795c:	e9 7e 01 00 00       	jmp    c0027adf <__muldf3+0x2d7>
c0027961:	85 c0                	test   eax,eax
c0027963:	75 0c                	jne    c0027971 <__muldf3+0x169>
c0027965:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027969:	0f 89 6a 01 00 00    	jns    c0027ad9 <__muldf3+0x2d1>
c002796f:	eb df                	jmp    c0027950 <__muldf3+0x148>
c0027971:	01 f6                	add    esi,esi
c0027973:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027976:	c1 ea 1f             	shr    edx,0x1f
c0027979:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002797c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002797f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027982:	09 d6                	or     esi,edx
c0027984:	78 04                	js     c002798a <__muldf3+0x182>
c0027986:	89 c3                	mov    ebx,eax
c0027988:	eb e7                	jmp    c0027971 <__muldf3+0x169>
c002798a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027990:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027996:	89 c8                	mov    eax,ecx
c0027998:	f7 e6                	mul    esi
c002799a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002799d:	89 c7                	mov    edi,eax
c002799f:	89 c8                	mov    eax,ecx
c00279a1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279a4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00279a7:	89 c1                	mov    ecx,eax
c00279a9:	89 f0                	mov    eax,esi
c00279ab:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00279ae:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00279b1:	89 c6                	mov    esi,eax
c00279b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279b6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279b9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279bc:	31 c0                	xor    eax,eax
c00279be:	01 f1                	add    ecx,esi
c00279c0:	0f 92 c0             	setb   al
c00279c3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00279c6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00279c9:	83 d6 00             	adc    esi,0x0
c00279cc:	01 c7                	add    edi,eax
c00279ce:	83 d6 00             	adc    esi,0x0
c00279d1:	01 ca                	add    edx,ecx
c00279d3:	0f 92 c1             	setb   cl
c00279d6:	0f b6 c9             	movzx  ecx,cl
c00279d9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00279dc:	83 d6 00             	adc    esi,0x0
c00279df:	01 cf                	add    edi,ecx
c00279e1:	83 d6 00             	adc    esi,0x0
c00279e4:	31 c9                	xor    ecx,ecx
c00279e6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00279e9:	0f 95 c1             	setne  cl
c00279ec:	09 cf                	or     edi,ecx
c00279ee:	85 f6                	test   esi,esi
c00279f0:	78 0c                	js     c00279fe <__muldf3+0x1f6>
c00279f2:	01 f6                	add    esi,esi
c00279f4:	89 f8                	mov    eax,edi
c00279f6:	c1 e8 1f             	shr    eax,0x1f
c00279f9:	09 c6                	or     esi,eax
c00279fb:	01 ff                	add    edi,edi
c00279fd:	4b                   	dec    ebx
c00279fe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027a04:	0f 8f 85 00 00 00    	jg     c0027a8f <__muldf3+0x287>
c0027a0a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027a10:	85 db                	test   ebx,ebx
c0027a12:	0f 8f 84 00 00 00    	jg     c0027a9c <__muldf3+0x294>
c0027a18:	83 fb cc             	cmp    ebx,0xffffffcc
c0027a1b:	7c 79                	jl     c0027a96 <__muldf3+0x28e>
c0027a1d:	ba 01 00 00 00       	mov    edx,0x1
c0027a22:	29 da                	sub    edx,ebx
c0027a24:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a2a:	83 fa 1f             	cmp    edx,0x1f
c0027a2d:	7e 30                	jle    c0027a5f <__muldf3+0x257>
c0027a2f:	83 fa 20             	cmp    edx,0x20
c0027a32:	75 0b                	jne    c0027a3f <__muldf3+0x237>
c0027a34:	31 c0                	xor    eax,eax
c0027a36:	85 ff                	test   edi,edi
c0027a38:	0f 95 c0             	setne  al
c0027a3b:	89 c7                	mov    edi,eax
c0027a3d:	eb 1a                	jmp    c0027a59 <__muldf3+0x251>
c0027a3f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027a42:	89 f0                	mov    eax,esi
c0027a44:	d3 e0                	shl    eax,cl
c0027a46:	09 f8                	or     eax,edi
c0027a48:	0f 95 c0             	setne  al
c0027a4b:	0f b6 c0             	movzx  eax,al
c0027a4e:	89 c7                	mov    edi,eax
c0027a50:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a55:	29 d9                	sub    ecx,ebx
c0027a57:	d3 ee                	shr    esi,cl
c0027a59:	09 f7                	or     edi,esi
c0027a5b:	31 db                	xor    ebx,ebx
c0027a5d:	eb 3b                	jmp    c0027a9a <__muldf3+0x292>
c0027a5f:	83 c3 1f             	add    ebx,0x1f
c0027a62:	89 f0                	mov    eax,esi
c0027a64:	88 d9                	mov    cl,bl
c0027a66:	d3 e0                	shl    eax,cl
c0027a68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a6b:	89 f8                	mov    eax,edi
c0027a6d:	88 d1                	mov    cl,dl
c0027a6f:	d3 e8                	shr    eax,cl
c0027a71:	89 c1                	mov    ecx,eax
c0027a73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a76:	09 c8                	or     eax,ecx
c0027a78:	88 d9                	mov    cl,bl
c0027a7a:	d3 e7                	shl    edi,cl
c0027a7c:	31 db                	xor    ebx,ebx
c0027a7e:	85 ff                	test   edi,edi
c0027a80:	0f 95 c3             	setne  bl
c0027a83:	89 df                	mov    edi,ebx
c0027a85:	09 c7                	or     edi,eax
c0027a87:	88 d1                	mov    cl,dl
c0027a89:	d3 ee                	shr    esi,cl
c0027a8b:	31 db                	xor    ebx,ebx
c0027a8d:	eb 0d                	jmp    c0027a9c <__muldf3+0x294>
c0027a8f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027a94:	eb 02                	jmp    c0027a98 <__muldf3+0x290>
c0027a96:	31 db                	xor    ebx,ebx
c0027a98:	31 ff                	xor    edi,edi
c0027a9a:	31 f6                	xor    esi,esi
c0027a9c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a9f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027aa2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027aa7:	09 c3                	or     ebx,eax
c0027aa9:	c1 e3 14             	shl    ebx,0x14
c0027aac:	89 f0                	mov    eax,esi
c0027aae:	c1 e8 0b             	shr    eax,0xb
c0027ab1:	09 c3                	or     ebx,eax
c0027ab3:	89 f8                	mov    eax,edi
c0027ab5:	c1 e8 0b             	shr    eax,0xb
c0027ab8:	c1 e6 15             	shl    esi,0x15
c0027abb:	09 c6                	or     esi,eax
c0027abd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ac3:	0f 95 c1             	setne  cl
c0027ac6:	09 c8                	or     eax,ecx
c0027ac8:	83 e0 01             	and    eax,0x1
c0027acb:	c1 ef 0a             	shr    edi,0xa
c0027ace:	21 c7                	and    edi,eax
c0027ad0:	01 f7                	add    edi,esi
c0027ad2:	83 d3 00             	adc    ebx,0x0
c0027ad5:	89 da                	mov    edx,ebx
c0027ad7:	eb 03                	jmp    c0027adc <__muldf3+0x2d4>
c0027ad9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027adc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027adf:	89 f8                	mov    eax,edi
c0027ae1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ae4:	83 c4 24             	add    esp,0x24
c0027ae7:	5b                   	pop    ebx
c0027ae8:	5e                   	pop    esi
c0027ae9:	5f                   	pop    edi
c0027aea:	5d                   	pop    ebp
c0027aeb:	c3                   	ret    

c0027aec <__divdf3>:
c0027aec:	55                   	push   ebp
c0027aed:	89 e5                	mov    ebp,esp
c0027aef:	57                   	push   edi
c0027af0:	56                   	push   esi
c0027af1:	53                   	push   ebx
c0027af2:	83 ec 2c             	sub    esp,0x2c
c0027af5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027af8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027afb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027afe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b01:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027b04:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b07:	89 ce                	mov    esi,ecx
c0027b09:	89 c8                	mov    eax,ecx
c0027b0b:	c1 f8 14             	sar    eax,0x14
c0027b0e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b11:	89 f8                	mov    eax,edi
c0027b13:	89 fb                	mov    ebx,edi
c0027b15:	c1 e3 0b             	shl    ebx,0xb
c0027b18:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027b1b:	c1 e6 0b             	shl    esi,0xb
c0027b1e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b24:	c1 e8 15             	shr    eax,0x15
c0027b27:	09 c6                	or     esi,eax
c0027b29:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027b2c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b2f:	89 c2                	mov    edx,eax
c0027b31:	c1 fa 14             	sar    edx,0x14
c0027b34:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027b37:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b3a:	89 de                	mov    esi,ebx
c0027b3c:	c1 e6 0b             	shl    esi,0xb
c0027b3f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b42:	c1 e0 0b             	shl    eax,0xb
c0027b45:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b4a:	c1 eb 15             	shr    ebx,0x15
c0027b4d:	09 d8                	or     eax,ebx
c0027b4f:	89 c2                	mov    edx,eax
c0027b51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b54:	25 ff 07 00 00       	and    eax,0x7ff
c0027b59:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027b5c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b5f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b65:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027b68:	29 d8                	sub    eax,ebx
c0027b6a:	05 ff 03 00 00       	add    eax,0x3ff
c0027b6f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027b72:	46                   	inc    esi
c0027b73:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b79:	0f 85 a5 00 00 00    	jne    c0027c24 <__divdf3+0x138>
c0027b7f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b82:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027b85:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027b89:	74 2a                	je     c0027bb5 <__divdf3+0xc9>
c0027b8b:	85 f6                	test   esi,esi
c0027b8d:	0f 85 cc 02 00 00    	jne    c0027e5f <__divdf3+0x373>
c0027b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b96:	40                   	inc    eax
c0027b97:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b9c:	75 26                	jne    c0027bc4 <__divdf3+0xd8>
c0027b9e:	85 db                	test   ebx,ebx
c0027ba0:	74 22                	je     c0027bc4 <__divdf3+0xd8>
c0027ba2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ba5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ba8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bab:	09 d0                	or     eax,edx
c0027bad:	0f 85 ac 02 00 00    	jne    c0027e5f <__divdf3+0x373>
c0027bb3:	eb 63                	jmp    c0027c18 <__divdf3+0x12c>
c0027bb5:	85 f6                	test   esi,esi
c0027bb7:	75 22                	jne    c0027bdb <__divdf3+0xef>
c0027bb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bbc:	40                   	inc    eax
c0027bbd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bc2:	74 36                	je     c0027bfa <__divdf3+0x10e>
c0027bc4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027bc8:	0f 89 91 02 00 00    	jns    c0027e5f <__divdf3+0x373>
c0027bce:	89 f8                	mov    eax,edi
c0027bd0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bd6:	e9 80 02 00 00       	jmp    c0027e5b <__divdf3+0x36f>
c0027bdb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bde:	01 f6                	add    esi,esi
c0027be0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027be3:	c1 ef 1f             	shr    edi,0x1f
c0027be6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027be9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027bec:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027bef:	09 f7                	or     edi,esi
c0027bf1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027bf4:	78 2e                	js     c0027c24 <__divdf3+0x138>
c0027bf6:	89 c8                	mov    eax,ecx
c0027bf8:	eb e1                	jmp    c0027bdb <__divdf3+0xef>
c0027bfa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bfd:	09 d0                	or     eax,edx
c0027bff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c03:	74 0f                	je     c0027c14 <__divdf3+0x128>
c0027c05:	85 c0                	test   eax,eax
c0027c07:	74 bb                	je     c0027bc4 <__divdf3+0xd8>
c0027c09:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c0c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c0f:	e9 4b 02 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c14:	85 c0                	test   eax,eax
c0027c16:	75 ac                	jne    c0027bc4 <__divdf3+0xd8>
c0027c18:	31 ff                	xor    edi,edi
c0027c1a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c1f:	e9 3b 02 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c24:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c27:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027c2a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027c30:	75 6b                	jne    c0027c9d <__divdf3+0x1b1>
c0027c32:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c35:	09 d6                	or     esi,edx
c0027c37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c3b:	74 28                	je     c0027c65 <__divdf3+0x179>
c0027c3d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c40:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c43:	85 f6                	test   esi,esi
c0027c45:	0f 85 14 02 00 00    	jne    c0027e5f <__divdf3+0x373>
c0027c4b:	31 ff                	xor    edi,edi
c0027c4d:	31 c9                	xor    ecx,ecx
c0027c4f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c52:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c55:	0f 89 04 02 00 00    	jns    c0027e5f <__divdf3+0x373>
c0027c5b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027c60:	e9 fa 01 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c65:	85 f6                	test   esi,esi
c0027c67:	75 1b                	jne    c0027c84 <__divdf3+0x198>
c0027c69:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c6c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c6f:	25 00 00 00 80       	and    eax,0x80000000
c0027c74:	31 c9                	xor    ecx,ecx
c0027c76:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027c7b:	89 cf                	mov    edi,ecx
c0027c7d:	89 c1                	mov    ecx,eax
c0027c7f:	e9 db 01 00 00       	jmp    c0027e5f <__divdf3+0x373>
c0027c84:	01 d2                	add    edx,edx
c0027c86:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c89:	c1 eb 1f             	shr    ebx,0x1f
c0027c8c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c8f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027c92:	8d 48 01             	lea    ecx,[eax+0x1]
c0027c95:	09 da                	or     edx,ebx
c0027c97:	78 04                	js     c0027c9d <__divdf3+0x1b1>
c0027c99:	89 c8                	mov    eax,ecx
c0027c9b:	eb e7                	jmp    c0027c84 <__divdf3+0x198>
c0027c9d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ca0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ca6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cac:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027caf:	39 d6                	cmp    esi,edx
c0027cb1:	77 0d                	ja     c0027cc0 <__divdf3+0x1d4>
c0027cb3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027cb6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027cb9:	72 1b                	jb     c0027cd6 <__divdf3+0x1ea>
c0027cbb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027cbe:	75 16                	jne    c0027cd6 <__divdf3+0x1ea>
c0027cc0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027cc3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cc6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027cc9:	83 de 00             	sbb    esi,0x0
c0027ccc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027ccf:	ba 01 00 00 00       	mov    edx,0x1
c0027cd4:	eb 02                	jmp    c0027cd8 <__divdf3+0x1ec>
c0027cd6:	31 d2                	xor    edx,edx
c0027cd8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027cdf:	31 ff                	xor    edi,edi
c0027ce1:	01 ff                	add    edi,edi
c0027ce3:	89 d1                	mov    ecx,edx
c0027ce5:	c1 e9 1f             	shr    ecx,0x1f
c0027ce8:	09 cf                	or     edi,ecx
c0027cea:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027ced:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027cf0:	89 da                	mov    edx,ebx
c0027cf2:	89 f3                	mov    ebx,esi
c0027cf4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027cf7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cfa:	c1 e9 1f             	shr    ecx,0x1f
c0027cfd:	09 ce                	or     esi,ecx
c0027cff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d02:	01 c9                	add    ecx,ecx
c0027d04:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027d07:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d0a:	85 db                	test   ebx,ebx
c0027d0c:	78 29                	js     c0027d37 <__divdf3+0x24b>
c0027d0e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027d11:	72 07                	jb     c0027d1a <__divdf3+0x22e>
c0027d13:	75 3c                	jne    c0027d51 <__divdf3+0x265>
c0027d15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d18:	77 37                	ja     c0027d51 <__divdf3+0x265>
c0027d1a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d1d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027d20:	31 d2                	xor    edx,edx
c0027d22:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027d25:	0f 97 c2             	seta   dl
c0027d28:	29 d6                	sub    esi,edx
c0027d2a:	89 d9                	mov    ecx,ebx
c0027d2c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027d2f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d32:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027d35:	eb 17                	jmp    c0027d4e <__divdf3+0x262>
c0027d37:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d3a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d40:	0f 97 c1             	seta   cl
c0027d43:	0f b6 c9             	movzx  ecx,cl
c0027d46:	29 ce                	sub    esi,ecx
c0027d48:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027d4b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027d4e:	83 ca 01             	or     edx,0x1
c0027d51:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027d54:	75 8b                	jne    c0027ce1 <__divdf3+0x1f5>
c0027d56:	c1 e7 09             	shl    edi,0x9
c0027d59:	89 d1                	mov    ecx,edx
c0027d5b:	c1 e9 17             	shr    ecx,0x17
c0027d5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d61:	09 f3                	or     ebx,esi
c0027d63:	0f 95 c3             	setne  bl
c0027d66:	0f b6 db             	movzx  ebx,bl
c0027d69:	c1 e2 09             	shl    edx,0x9
c0027d6c:	09 d3                	or     ebx,edx
c0027d6e:	89 ca                	mov    edx,ecx
c0027d70:	09 fa                	or     edx,edi
c0027d72:	78 0c                	js     c0027d80 <__divdf3+0x294>
c0027d74:	01 d2                	add    edx,edx
c0027d76:	89 d9                	mov    ecx,ebx
c0027d78:	c1 e9 1f             	shr    ecx,0x1f
c0027d7b:	09 ca                	or     edx,ecx
c0027d7d:	01 db                	add    ebx,ebx
c0027d7f:	48                   	dec    eax
c0027d80:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027d85:	0f 8f 83 00 00 00    	jg     c0027e0e <__divdf3+0x322>
c0027d8b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d91:	85 c0                	test   eax,eax
c0027d93:	0f 8f 82 00 00 00    	jg     c0027e1b <__divdf3+0x32f>
c0027d99:	83 f8 cc             	cmp    eax,0xffffffcc
c0027d9c:	7c 77                	jl     c0027e15 <__divdf3+0x329>
c0027d9e:	be 01 00 00 00       	mov    esi,0x1
c0027da3:	29 c6                	sub    esi,eax
c0027da5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dab:	83 fe 1f             	cmp    esi,0x1f
c0027dae:	7e 2f                	jle    c0027ddf <__divdf3+0x2f3>
c0027db0:	83 fe 20             	cmp    esi,0x20
c0027db3:	75 0a                	jne    c0027dbf <__divdf3+0x2d3>
c0027db5:	85 db                	test   ebx,ebx
c0027db7:	0f 95 c3             	setne  bl
c0027dba:	0f b6 db             	movzx  ebx,bl
c0027dbd:	eb 1a                	jmp    c0027dd9 <__divdf3+0x2ed>
c0027dbf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027dc2:	89 d7                	mov    edi,edx
c0027dc4:	d3 e7                	shl    edi,cl
c0027dc6:	89 f9                	mov    ecx,edi
c0027dc8:	09 d9                	or     ecx,ebx
c0027dca:	0f 95 c3             	setne  bl
c0027dcd:	0f b6 db             	movzx  ebx,bl
c0027dd0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dd5:	29 c1                	sub    ecx,eax
c0027dd7:	d3 ea                	shr    edx,cl
c0027dd9:	09 d3                	or     ebx,edx
c0027ddb:	31 c0                	xor    eax,eax
c0027ddd:	eb 3a                	jmp    c0027e19 <__divdf3+0x32d>
c0027ddf:	83 c0 1f             	add    eax,0x1f
c0027de2:	89 d7                	mov    edi,edx
c0027de4:	88 c1                	mov    cl,al
c0027de6:	d3 e7                	shl    edi,cl
c0027de8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027deb:	89 df                	mov    edi,ebx
c0027ded:	89 f1                	mov    ecx,esi
c0027def:	d3 ef                	shr    edi,cl
c0027df1:	89 f9                	mov    ecx,edi
c0027df3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027df6:	09 cf                	or     edi,ecx
c0027df8:	88 c1                	mov    cl,al
c0027dfa:	d3 e3                	shl    ebx,cl
c0027dfc:	85 db                	test   ebx,ebx
c0027dfe:	0f 95 c3             	setne  bl
c0027e01:	0f b6 db             	movzx  ebx,bl
c0027e04:	09 fb                	or     ebx,edi
c0027e06:	89 f1                	mov    ecx,esi
c0027e08:	d3 ea                	shr    edx,cl
c0027e0a:	31 c0                	xor    eax,eax
c0027e0c:	eb 0d                	jmp    c0027e1b <__divdf3+0x32f>
c0027e0e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027e13:	eb 02                	jmp    c0027e17 <__divdf3+0x32b>
c0027e15:	31 c0                	xor    eax,eax
c0027e17:	31 db                	xor    ebx,ebx
c0027e19:	31 d2                	xor    edx,edx
c0027e1b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027e1e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027e21:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027e27:	09 c8                	or     eax,ecx
c0027e29:	c1 e0 14             	shl    eax,0x14
c0027e2c:	89 d1                	mov    ecx,edx
c0027e2e:	c1 e9 0b             	shr    ecx,0xb
c0027e31:	09 c8                	or     eax,ecx
c0027e33:	89 c6                	mov    esi,eax
c0027e35:	89 d9                	mov    ecx,ebx
c0027e37:	c1 e9 0b             	shr    ecx,0xb
c0027e3a:	c1 e2 15             	shl    edx,0x15
c0027e3d:	09 ca                	or     edx,ecx
c0027e3f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027e45:	0f 95 c0             	setne  al
c0027e48:	09 c1                	or     ecx,eax
c0027e4a:	83 e1 01             	and    ecx,0x1
c0027e4d:	c1 eb 0a             	shr    ebx,0xa
c0027e50:	21 cb                	and    ebx,ecx
c0027e52:	01 d3                	add    ebx,edx
c0027e54:	89 d8                	mov    eax,ebx
c0027e56:	83 d6 00             	adc    esi,0x0
c0027e59:	89 f2                	mov    edx,esi
c0027e5b:	89 c7                	mov    edi,eax
c0027e5d:	89 d1                	mov    ecx,edx
c0027e5f:	89 f8                	mov    eax,edi
c0027e61:	89 ca                	mov    edx,ecx
c0027e63:	83 c4 2c             	add    esp,0x2c
c0027e66:	5b                   	pop    ebx
c0027e67:	5e                   	pop    esi
c0027e68:	5f                   	pop    edi
c0027e69:	5d                   	pop    ebp
c0027e6a:	c3                   	ret    

c0027e6b <__floatsidf>:
c0027e6b:	55                   	push   ebp
c0027e6c:	89 e5                	mov    ebp,esp
c0027e6e:	56                   	push   esi
c0027e6f:	53                   	push   ebx
c0027e70:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e73:	85 db                	test   ebx,ebx
c0027e75:	7e 15                	jle    c0027e8c <__floatsidf+0x21>
c0027e77:	0f bd cb             	bsr    ecx,ebx
c0027e7a:	83 f1 1f             	xor    ecx,0x1f
c0027e7d:	d3 e3                	shl    ebx,cl
c0027e7f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e85:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e8a:	eb 21                	jmp    c0027ead <__floatsidf+0x42>
c0027e8c:	b8 00 00 00 00       	mov    eax,0x0
c0027e91:	ba 00 00 00 00       	mov    edx,0x0
c0027e96:	74 2a                	je     c0027ec2 <__floatsidf+0x57>
c0027e98:	f7 db                	neg    ebx
c0027e9a:	0f bd cb             	bsr    ecx,ebx
c0027e9d:	83 f1 1f             	xor    ecx,0x1f
c0027ea0:	d3 e3                	shl    ebx,cl
c0027ea2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ea8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027ead:	29 c8                	sub    eax,ecx
c0027eaf:	c1 e0 14             	shl    eax,0x14
c0027eb2:	89 c1                	mov    ecx,eax
c0027eb4:	89 de                	mov    esi,ebx
c0027eb6:	c1 ee 0b             	shr    esi,0xb
c0027eb9:	09 f1                	or     ecx,esi
c0027ebb:	89 ca                	mov    edx,ecx
c0027ebd:	c1 e3 15             	shl    ebx,0x15
c0027ec0:	89 d8                	mov    eax,ebx
c0027ec2:	5b                   	pop    ebx
c0027ec3:	5e                   	pop    esi
c0027ec4:	5d                   	pop    ebp
c0027ec5:	c3                   	ret    

c0027ec6 <__floatunsidf>:
c0027ec6:	55                   	push   ebp
c0027ec7:	89 e5                	mov    ebp,esp
c0027ec9:	56                   	push   esi
c0027eca:	53                   	push   ebx
c0027ecb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ece:	85 db                	test   ebx,ebx
c0027ed0:	74 2a                	je     c0027efc <__floatunsidf+0x36>
c0027ed2:	0f bd cb             	bsr    ecx,ebx
c0027ed5:	83 f1 1f             	xor    ecx,0x1f
c0027ed8:	d3 e3                	shl    ebx,cl
c0027eda:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ee0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ee5:	29 c8                	sub    eax,ecx
c0027ee7:	c1 e0 14             	shl    eax,0x14
c0027eea:	89 c1                	mov    ecx,eax
c0027eec:	89 de                	mov    esi,ebx
c0027eee:	c1 ee 0b             	shr    esi,0xb
c0027ef1:	09 f1                	or     ecx,esi
c0027ef3:	89 ca                	mov    edx,ecx
c0027ef5:	c1 e3 15             	shl    ebx,0x15
c0027ef8:	89 d8                	mov    eax,ebx
c0027efa:	eb 04                	jmp    c0027f00 <__floatunsidf+0x3a>
c0027efc:	31 c0                	xor    eax,eax
c0027efe:	31 d2                	xor    edx,edx
c0027f00:	5b                   	pop    ebx
c0027f01:	5e                   	pop    esi
c0027f02:	5d                   	pop    ebp
c0027f03:	c3                   	ret    

c0027f04 <__fixdfsi>:
c0027f04:	55                   	push   ebp
c0027f05:	89 e5                	mov    ebp,esp
c0027f07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f0a:	89 d1                	mov    ecx,edx
c0027f0c:	c1 e1 0b             	shl    ecx,0xb
c0027f0f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f18:	c1 e8 15             	shr    eax,0x15
c0027f1b:	09 c1                	or     ecx,eax
c0027f1d:	c1 fa 14             	sar    edx,0x14
c0027f20:	78 1f                	js     c0027f41 <__fixdfsi+0x3d>
c0027f22:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027f28:	31 c0                	xor    eax,eax
c0027f2a:	83 fa 1e             	cmp    edx,0x1e
c0027f2d:	77 40                	ja     c0027f6f <__fixdfsi+0x6b>
c0027f2f:	89 c8                	mov    eax,ecx
c0027f31:	0d 00 00 00 80       	or     eax,0x80000000
c0027f36:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f3b:	29 d1                	sub    ecx,edx
c0027f3d:	d3 e8                	shr    eax,cl
c0027f3f:	eb 2e                	jmp    c0027f6f <__fixdfsi+0x6b>
c0027f41:	31 c0                	xor    eax,eax
c0027f43:	81 c2 01 04 00 00    	add    edx,0x401
c0027f49:	78 24                	js     c0027f6f <__fixdfsi+0x6b>
c0027f4b:	83 fa 1e             	cmp    edx,0x1e
c0027f4e:	7e 09                	jle    c0027f59 <__fixdfsi+0x55>
c0027f50:	83 fa 1f             	cmp    edx,0x1f
c0027f53:	75 18                	jne    c0027f6d <__fixdfsi+0x69>
c0027f55:	85 c9                	test   ecx,ecx
c0027f57:	75 14                	jne    c0027f6d <__fixdfsi+0x69>
c0027f59:	89 c8                	mov    eax,ecx
c0027f5b:	0d 00 00 00 80       	or     eax,0x80000000
c0027f60:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f65:	29 d1                	sub    ecx,edx
c0027f67:	d3 e8                	shr    eax,cl
c0027f69:	f7 d8                	neg    eax
c0027f6b:	eb 02                	jmp    c0027f6f <__fixdfsi+0x6b>
c0027f6d:	31 c0                	xor    eax,eax
c0027f6f:	5d                   	pop    ebp
c0027f70:	c3                   	ret    

c0027f71 <__fixunsdfsi>:
c0027f71:	55                   	push   ebp
c0027f72:	89 e5                	mov    ebp,esp
c0027f74:	53                   	push   ebx
c0027f75:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027f78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f7b:	89 d3                	mov    ebx,edx
c0027f7d:	c1 fb 14             	sar    ebx,0x14
c0027f80:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027f86:	31 c0                	xor    eax,eax
c0027f88:	83 fb 1f             	cmp    ebx,0x1f
c0027f8b:	77 1d                	ja     c0027faa <__fixunsdfsi+0x39>
c0027f8d:	89 d0                	mov    eax,edx
c0027f8f:	c1 e0 0b             	shl    eax,0xb
c0027f92:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f97:	c1 e9 15             	shr    ecx,0x15
c0027f9a:	09 c8                	or     eax,ecx
c0027f9c:	0d 00 00 00 80       	or     eax,0x80000000
c0027fa1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fa6:	29 d9                	sub    ecx,ebx
c0027fa8:	d3 e8                	shr    eax,cl
c0027faa:	5b                   	pop    ebx
c0027fab:	5d                   	pop    ebp
c0027fac:	c3                   	ret    

c0027fad <__cmpdf2>:
c0027fad:	55                   	push   ebp
c0027fae:	89 e5                	mov    ebp,esp
c0027fb0:	57                   	push   edi
c0027fb1:	56                   	push   esi
c0027fb2:	53                   	push   ebx
c0027fb3:	83 ec 0c             	sub    esp,0xc
c0027fb6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027fb9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fbc:	89 ca                	mov    edx,ecx
c0027fbe:	c1 ea 14             	shr    edx,0x14
c0027fc1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027fc7:	89 cb                	mov    ebx,ecx
c0027fc9:	c1 fb 1f             	sar    ebx,0x1f
c0027fcc:	31 da                	xor    edx,ebx
c0027fce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fd1:	89 df                	mov    edi,ebx
c0027fd3:	c1 e7 0b             	shl    edi,0xb
c0027fd6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fd9:	c1 e1 0b             	shl    ecx,0xb
c0027fdc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027fe2:	c1 eb 15             	shr    ebx,0x15
c0027fe5:	09 d9                	or     ecx,ebx
c0027fe7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027fea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027fed:	89 ce                	mov    esi,ecx
c0027fef:	c1 ee 14             	shr    esi,0x14
c0027ff2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ff8:	89 cb                	mov    ebx,ecx
c0027ffa:	c1 fb 1f             	sar    ebx,0x1f
c0027ffd:	31 de                	xor    esi,ebx
c0027fff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028002:	89 df                	mov    edi,ebx
c0028004:	c1 e7 0b             	shl    edi,0xb
c0028007:	c1 e1 0b             	shl    ecx,0xb
c002800a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028010:	c1 eb 15             	shr    ebx,0x15
c0028013:	09 d9                	or     ecx,ebx
c0028015:	89 d3                	mov    ebx,edx
c0028017:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002801d:	43                   	inc    ebx
c002801e:	83 fb 01             	cmp    ebx,0x1
c0028021:	77 08                	ja     c002802b <__cmpdf2+0x7e>
c0028023:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028026:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028029:	75 68                	jne    c0028093 <__cmpdf2+0xe6>
c002802b:	89 f3                	mov    ebx,esi
c002802d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028033:	43                   	inc    ebx
c0028034:	83 fb 01             	cmp    ebx,0x1
c0028037:	77 06                	ja     c002803f <__cmpdf2+0x92>
c0028039:	89 fb                	mov    ebx,edi
c002803b:	09 cb                	or     ebx,ecx
c002803d:	75 54                	jne    c0028093 <__cmpdf2+0xe6>
c002803f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028042:	09 f8                	or     eax,edi
c0028044:	09 c8                	or     eax,ecx
c0028046:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028049:	75 12                	jne    c002805d <__cmpdf2+0xb0>
c002804b:	8d 42 01             	lea    eax,[edx+0x1]
c002804e:	83 f8 01             	cmp    eax,0x1
c0028051:	77 0a                	ja     c002805d <__cmpdf2+0xb0>
c0028053:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028056:	31 c0                	xor    eax,eax
c0028058:	83 fb 01             	cmp    ebx,0x1
c002805b:	76 36                	jbe    c0028093 <__cmpdf2+0xe6>
c002805d:	b8 01 00 00 00       	mov    eax,0x1
c0028062:	39 f2                	cmp    edx,esi
c0028064:	7f 2d                	jg     c0028093 <__cmpdf2+0xe6>
c0028066:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002806b:	7c 26                	jl     c0028093 <__cmpdf2+0xe6>
c002806d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028070:	77 07                	ja     c0028079 <__cmpdf2+0xcc>
c0028072:	72 16                	jb     c002808a <__cmpdf2+0xdd>
c0028074:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028077:	76 0a                	jbe    c0028083 <__cmpdf2+0xd6>
c0028079:	89 d0                	mov    eax,edx
c002807b:	c1 f8 1f             	sar    eax,0x1f
c002807e:	83 c8 01             	or     eax,0x1
c0028081:	eb 10                	jmp    c0028093 <__cmpdf2+0xe6>
c0028083:	b8 00 00 00 00       	mov    eax,0x0
c0028088:	73 09                	jae    c0028093 <__cmpdf2+0xe6>
c002808a:	89 d0                	mov    eax,edx
c002808c:	c1 f8 1f             	sar    eax,0x1f
c002808f:	83 e0 02             	and    eax,0x2
c0028092:	48                   	dec    eax
c0028093:	83 c4 0c             	add    esp,0xc
c0028096:	5b                   	pop    ebx
c0028097:	5e                   	pop    esi
c0028098:	5f                   	pop    edi
c0028099:	5d                   	pop    ebp
c002809a:	c3                   	ret    

c002809b <__eqdf2>:
c002809b:	55                   	push   ebp
c002809c:	89 e5                	mov    ebp,esp
c002809e:	50                   	push   eax
c002809f:	6a 01                	push   0x1
c00280a1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280a4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280ad:	e8 fb fe ff ff       	call   c0027fad <__cmpdf2>
c00280b2:	83 c4 18             	add    esp,0x18
c00280b5:	c9                   	leave  
c00280b6:	c3                   	ret    

c00280b7 <__nedf2>:
c00280b7:	eb e2                	jmp    c002809b <__eqdf2>

c00280b9 <__gtdf2>:
c00280b9:	55                   	push   ebp
c00280ba:	89 e5                	mov    ebp,esp
c00280bc:	50                   	push   eax
c00280bd:	6a ff                	push   0xffffffff
c00280bf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280cb:	e8 dd fe ff ff       	call   c0027fad <__cmpdf2>
c00280d0:	83 c4 18             	add    esp,0x18
c00280d3:	c9                   	leave  
c00280d4:	c3                   	ret    

c00280d5 <__gedf2>:
c00280d5:	eb e2                	jmp    c00280b9 <__gtdf2>

c00280d7 <__ltdf2>:
c00280d7:	eb c2                	jmp    c002809b <__eqdf2>

c00280d9 <__ledf2>:
c00280d9:	eb c0                	jmp    c002809b <__eqdf2>

c00280db <__truncdfsf2>:
c00280db:	55                   	push   ebp
c00280dc:	89 e5                	mov    ebp,esp
c00280de:	57                   	push   edi
c00280df:	56                   	push   esi
c00280e0:	53                   	push   ebx
c00280e1:	83 ec 0c             	sub    esp,0xc
c00280e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280e7:	89 d1                	mov    ecx,edx
c00280e9:	c1 f9 14             	sar    ecx,0x14
c00280ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280ef:	89 df                	mov    edi,ebx
c00280f1:	c1 e7 0b             	shl    edi,0xb
c00280f4:	89 d0                	mov    eax,edx
c00280f6:	c1 e0 0b             	shl    eax,0xb
c00280f9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280fe:	c1 eb 15             	shr    ebx,0x15
c0028101:	09 d8                	or     eax,ebx
c0028103:	89 cb                	mov    ebx,ecx
c0028105:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002810b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028111:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028117:	0f 86 9e 00 00 00    	jbe    c00281bb <__truncdfsf2+0xe0>
c002811d:	85 db                	test   ebx,ebx
c002811f:	75 0a                	jne    c002812b <__truncdfsf2+0x50>
c0028121:	c1 fa 17             	sar    edx,0x17
c0028124:	30 d2                	xor    dl,dl
c0028126:	e9 84 00 00 00       	jmp    c00281af <__truncdfsf2+0xd4>
c002812b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028131:	83 fe 83             	cmp    esi,0xffffff83
c0028134:	7d 4b                	jge    c0028181 <__truncdfsf2+0xa6>
c0028136:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002813b:	29 f1                	sub    ecx,esi
c002813d:	83 f9 1f             	cmp    ecx,0x1f
c0028140:	7f 6b                	jg     c00281ad <__truncdfsf2+0xd2>
c0028142:	0d 00 00 00 80       	or     eax,0x80000000
c0028147:	89 c3                	mov    ebx,eax
c0028149:	d3 eb                	shr    ebx,cl
c002814b:	be 01 00 00 00       	mov    esi,0x1
c0028150:	d3 e6                	shl    esi,cl
c0028152:	4e                   	dec    esi
c0028153:	21 f0                	and    eax,esi
c0028155:	09 f8                	or     eax,edi
c0028157:	0f 95 c0             	setne  al
c002815a:	0f b6 c0             	movzx  eax,al
c002815d:	09 c3                	or     ebx,eax
c002815f:	89 d9                	mov    ecx,ebx
c0028161:	c1 e9 08             	shr    ecx,0x8
c0028164:	f6 c3 7f             	test   bl,0x7f
c0028167:	0f 95 c0             	setne  al
c002816a:	09 c8                	or     eax,ecx
c002816c:	83 e0 01             	and    eax,0x1
c002816f:	c1 eb 07             	shr    ebx,0x7
c0028172:	21 c3                	and    ebx,eax
c0028174:	81 e2 00 00 00 80    	and    edx,0x80000000
c002817a:	09 d1                	or     ecx,edx
c002817c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002817f:	eb 76                	jmp    c00281f7 <__truncdfsf2+0x11c>
c0028181:	83 c6 80             	add    esi,0xffffff80
c0028184:	7e 1d                	jle    c00281a3 <__truncdfsf2+0xc8>
c0028186:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002818c:	75 0b                	jne    c0028199 <__truncdfsf2+0xbe>
c002818e:	09 f8                	or     eax,edi
c0028190:	74 09                	je     c002819b <__truncdfsf2+0xc0>
c0028192:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028197:	eb 02                	jmp    c002819b <__truncdfsf2+0xc0>
c0028199:	31 c0                	xor    eax,eax
c002819b:	c1 fa 17             	sar    edx,0x17
c002819e:	80 ca ff             	or     dl,0xff
c00281a1:	eb 0e                	jmp    c00281b1 <__truncdfsf2+0xd6>
c00281a3:	c1 fa 1f             	sar    edx,0x1f
c00281a6:	c1 e2 08             	shl    edx,0x8
c00281a9:	09 ca                	or     edx,ecx
c00281ab:	eb 04                	jmp    c00281b1 <__truncdfsf2+0xd6>
c00281ad:	31 d2                	xor    edx,edx
c00281af:	31 c0                	xor    eax,eax
c00281b1:	c1 e2 17             	shl    edx,0x17
c00281b4:	c1 e8 08             	shr    eax,0x8
c00281b7:	09 d0                	or     eax,edx
c00281b9:	eb 3c                	jmp    c00281f7 <__truncdfsf2+0x11c>
c00281bb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00281c1:	89 ca                	mov    edx,ecx
c00281c3:	c1 fa 0b             	sar    edx,0xb
c00281c6:	c1 e2 08             	shl    edx,0x8
c00281c9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00281cc:	31 db                	xor    ebx,ebx
c00281ce:	85 ff                	test   edi,edi
c00281d0:	0f 95 c3             	setne  bl
c00281d3:	09 d8                	or     eax,ebx
c00281d5:	89 c3                	mov    ebx,eax
c00281d7:	c1 eb 08             	shr    ebx,0x8
c00281da:	a8 7f                	test   al,0x7f
c00281dc:	0f 95 c2             	setne  dl
c00281df:	89 d6                	mov    esi,edx
c00281e1:	09 de                	or     esi,ebx
c00281e3:	83 e6 01             	and    esi,0x1
c00281e6:	c1 e8 07             	shr    eax,0x7
c00281e9:	21 f0                	and    eax,esi
c00281eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00281ee:	09 ca                	or     edx,ecx
c00281f0:	c1 e2 17             	shl    edx,0x17
c00281f3:	09 da                	or     edx,ebx
c00281f5:	01 d0                	add    eax,edx
c00281f7:	83 c4 0c             	add    esp,0xc
c00281fa:	5b                   	pop    ebx
c00281fb:	5e                   	pop    esi
c00281fc:	5f                   	pop    edi
c00281fd:	5d                   	pop    ebp
c00281fe:	c3                   	ret    

c00281ff <__extendsfdf2>:
c00281ff:	55                   	push   ebp
c0028200:	89 e5                	mov    ebp,esp
c0028202:	57                   	push   edi
c0028203:	56                   	push   esi
c0028204:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028207:	89 d1                	mov    ecx,edx
c0028209:	c1 f9 17             	sar    ecx,0x17
c002820c:	c1 e2 08             	shl    edx,0x8
c002820f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028215:	89 c8                	mov    eax,ecx
c0028217:	80 e4 f8             	and    ah,0xf8
c002821a:	8d 71 01             	lea    esi,[ecx+0x1]
c002821d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028223:	75 27                	jne    c002824c <__extendsfdf2+0x4d>
c0028225:	81 e1 ff 00 00 00    	and    ecx,0xff
c002822b:	75 18                	jne    c0028245 <__extendsfdf2+0x46>
c002822d:	85 d2                	test   edx,edx
c002822f:	74 20                	je     c0028251 <__extendsfdf2+0x52>
c0028231:	41                   	inc    ecx
c0028232:	01 d2                	add    edx,edx
c0028234:	79 fb                	jns    c0028231 <__extendsfdf2+0x32>
c0028236:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002823c:	29 c8                	sub    eax,ecx
c002823e:	05 81 03 00 00       	add    eax,0x381
c0028243:	eb 0c                	jmp    c0028251 <__extendsfdf2+0x52>
c0028245:	05 00 07 00 00       	add    eax,0x700
c002824a:	eb 05                	jmp    c0028251 <__extendsfdf2+0x52>
c002824c:	05 80 03 00 00       	add    eax,0x380
c0028251:	c1 e0 14             	shl    eax,0x14
c0028254:	89 c1                	mov    ecx,eax
c0028256:	89 d0                	mov    eax,edx
c0028258:	c1 e8 0b             	shr    eax,0xb
c002825b:	09 c1                	or     ecx,eax
c002825d:	c1 e2 15             	shl    edx,0x15
c0028260:	89 d0                	mov    eax,edx
c0028262:	89 ca                	mov    edx,ecx
c0028264:	5e                   	pop    esi
c0028265:	5f                   	pop    edi
c0028266:	5d                   	pop    ebp
c0028267:	c3                   	ret    
c0028268:	66 90                	xchg   ax,ax
c002826a:	66 90                	xchg   ax,ax
c002826c:	66 90                	xchg   ax,ax
c002826e:	66 90                	xchg   ax,ax

c0028270 <fabs>:
c0028270:	83 ec 0c             	sub    esp,0xc
c0028273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028277:	89 04 24             	mov    DWORD PTR [esp],eax
c002827a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002827e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028283:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028287:	dd 04 24             	fld    QWORD PTR [esp]
c002828a:	83 c4 0c             	add    esp,0xc
c002828d:	c3                   	ret    
c002828e:	66 90                	xchg   ax,ax

c0028290 <lrint>:
c0028290:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028294:	83 ec 04             	sub    esp,0x4
c0028297:	db 1c 24             	fistp  DWORD PTR [esp]
c002829a:	58                   	pop    eax
c002829b:	c3                   	ret    

c002829c <lrintf>:
c002829c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00282a0:	83 ec 04             	sub    esp,0x4
c00282a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00282a6:	58                   	pop    eax
c00282a7:	c3                   	ret    

Disassembly of section .init:

c00282a8 <_init>:
c00282a8:	55                   	push   ebp
c00282a9:	89 e5                	mov    ebp,esp
c00282ab:	e8 68 7e fd ff       	call   c0000118 <frame_dummy>
c00282b0:	e8 5b e0 ff ff       	call   c0026310 <__do_global_ctors_aux>
c00282b5:	5d                   	pop    ebp
c00282b6:	c3                   	ret    

Disassembly of section .fini:

c00282b7 <_fini>:
c00282b7:	55                   	push   ebp
c00282b8:	89 e5                	mov    ebp,esp
c00282ba:	e8 e9 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00282bf:	5d                   	pop    ebp
c00282c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00282c2 <Computer::~Computer()>:
c00282c2:	83 ec 0c             	sub    esp,0xc
c00282c5:	ba 3c 9e 02 c0       	mov    edx,0xc0029e3c
c00282ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ce:	89 10                	mov    DWORD PTR [eax],edx
c00282d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d4:	83 ec 0c             	sub    esp,0xc
c00282d7:	50                   	push   eax
c00282d8:	e8 ed b5 fe ff       	call   c00138ca <Device::~Device()>
c00282dd:	83 c4 10             	add    esp,0x10
c00282e0:	90                   	nop
c00282e1:	83 c4 0c             	add    esp,0xc
c00282e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00282e6 <Computer::~Computer()>:
c00282e6:	83 ec 0c             	sub    esp,0xc
c00282e9:	83 ec 0c             	sub    esp,0xc
c00282ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282f0:	e8 cd ff ff ff       	call   c00282c2 <Computer::~Computer()>
c00282f5:	83 c4 10             	add    esp,0x10
c00282f8:	83 ec 08             	sub    esp,0x8
c00282fb:	68 ec 01 00 00       	push   0x1ec
c0028300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028304:	e8 e3 a1 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028309:	83 c4 10             	add    esp,0x10
c002830c:	83 c4 0c             	add    esp,0xc
c002830f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028310 <idleCommon()>:
c0028310:	83 ec 0c             	sub    esp,0xc
c0028313:	fa                   	cli    
c0028314:	ff 05 28 0c 03 c0    	inc    DWORD PTR ds:0xc0030c28
c002831a:	e8 9c 55 ff ff       	call   c001d8bb <schedule()>
c002831f:	a1 28 0c 03 c0       	mov    eax,ds:0xc0030c28
c0028324:	48                   	dec    eax
c0028325:	a3 28 0c 03 c0       	mov    ds:0xc0030c28,eax
c002832a:	75 01                	jne    c002832d <idleCommon()+0x1d>
c002832c:	fb                   	sti    
c002832d:	83 c4 0c             	add    esp,0xc
c0028330:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028332 <LinkedList<UnixFile>::~LinkedList()>:
c0028332:	90                   	nop
c0028333:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028334 <LinkedList<UnixFile>::LinkedList()>:
c0028334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002833e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028342:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002834d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002835e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028362:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002836d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028374:	90                   	nop
c0028375:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028376 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028376:	83 ec 0c             	sub    esp,0xc
c0028379:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002837e:	75 10                	jne    c0028390 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028380:	83 ec 0c             	sub    esp,0xc
c0028383:	68 48 a0 02 c0       	push   0xc002a048
c0028388:	e8 a2 19 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c002838d:	83 c4 10             	add    esp,0x10
c0028390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028394:	8b 00                	mov    eax,DWORD PTR [eax]
c0028396:	85 c0                	test   eax,eax
c0028398:	74 34                	je     c00283ce <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002839a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002839e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283a1:	85 c0                	test   eax,eax
c00283a3:	74 29                	je     c00283ce <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283cc:	eb 65                	jmp    c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00283d4:	85 c0                	test   eax,eax
c00283d6:	75 4b                	jne    c0028423 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283df:	85 c0                	test   eax,eax
c00283e1:	75 40                	jne    c0028423 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283eb:	89 10                	mov    DWORD PTR [eax],edx
c00283ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002840d:	85 c0                	test   eax,eax
c002840f:	74 22                	je     c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028411:	83 ec 0c             	sub    esp,0xc
c0028414:	68 6a a0 02 c0       	push   0xc002a06a
c0028419:	e8 11 19 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c002841e:	83 c4 10             	add    esp,0x10
c0028421:	eb 10                	jmp    c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028423:	83 ec 0c             	sub    esp,0xc
c0028426:	68 74 a0 02 c0       	push   0xc002a074
c002842b:	e8 ff 18 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0028430:	83 c4 10             	add    esp,0x10
c0028433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028437:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002843a:	8d 50 01             	lea    edx,[eax+0x1]
c002843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028441:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028444:	90                   	nop
c0028445:	83 c4 0c             	add    esp,0xc
c0028448:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002844a <LinkedList<UnixFile>::getFirstElement()>:
c002844a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002844e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028450:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028452 <LinkedList<UnixFile>::removeFirst()>:
c0028452:	83 ec 0c             	sub    esp,0xc
c0028455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028459:	8b 00                	mov    eax,DWORD PTR [eax]
c002845b:	85 c0                	test   eax,eax
c002845d:	75 12                	jne    c0028471 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002845f:	83 ec 0c             	sub    esp,0xc
c0028462:	68 80 a0 02 c0       	push   0xc002a080
c0028467:	e8 c3 18 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c002846c:	83 c4 10             	add    esp,0x10
c002846f:	eb 7e                	jmp    c00284ef <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028475:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028478:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002847b:	85 c0                	test   eax,eax
c002847d:	74 10                	je     c002848f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002847f:	83 ec 0c             	sub    esp,0xc
c0028482:	68 cb a0 02 c0       	push   0xc002a0cb
c0028487:	e8 a3 18 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c002848c:	83 c4 10             	add    esp,0x10
c002848f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028493:	8b 00                	mov    eax,DWORD PTR [eax]
c0028495:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028498:	85 c0                	test   eax,eax
c002849a:	75 33                	jne    c00284cf <LinkedList<UnixFile>::removeFirst()+0x7d>
c002849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284b8:	83 f8 01             	cmp    eax,0x1
c00284bb:	74 21                	je     c00284de <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284bd:	83 ec 0c             	sub    esp,0xc
c00284c0:	68 a4 a0 02 c0       	push   0xc002a0a4
c00284c5:	e8 65 18 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00284ca:	83 c4 10             	add    esp,0x10
c00284cd:	eb 0f                	jmp    c00284de <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00284d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	89 10                	mov    DWORD PTR [eax],edx
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284e5:	8d 50 ff             	lea    edx,[eax-0x1]
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284ef:	83 c4 0c             	add    esp,0xc
c00284f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00284f4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00284f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00284f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284fb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00284fc <DriverlessDevice::~DriverlessDevice()>:
c00284fc:	ba 3c a8 02 c0       	mov    edx,0xc002a83c
c0028501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028505:	89 10                	mov    DWORD PTR [eax],edx
c0028507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002850b:	50                   	push   eax
c002850c:	e8 b9 b3 fe ff       	call   c00138ca <Device::~Device()>
c0028511:	83 c4 04             	add    esp,0x4
c0028514:	90                   	nop
c0028515:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028516 <DriverlessDevice::~DriverlessDevice()>:
c0028516:	83 ec 0c             	sub    esp,0xc
c0028519:	83 ec 0c             	sub    esp,0xc
c002851c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028520:	e8 d7 ff ff ff       	call   c00284fc <DriverlessDevice::~DriverlessDevice()>
c0028525:	83 c4 10             	add    esp,0x10
c0028528:	83 ec 08             	sub    esp,0x8
c002852b:	68 58 01 00 00       	push   0x158
c0028530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028534:	e8 b3 9f fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028539:	83 c4 10             	add    esp,0x10
c002853c:	83 c4 0c             	add    esp,0xc
c002853f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028540 <LinkedList<Device>::addElement(Device*)>:
c0028540:	83 ec 0c             	sub    esp,0xc
c0028543:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028548:	75 10                	jne    c002855a <LinkedList<Device>::addElement(Device*)+0x1a>
c002854a:	83 ec 0c             	sub    esp,0xc
c002854d:	68 48 a0 02 c0       	push   0xc002a048
c0028552:	e8 d8 17 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0028557:	83 c4 10             	add    esp,0x10
c002855a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028560:	85 c0                	test   eax,eax
c0028562:	74 3a                	je     c002859e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002856b:	85 c0                	test   eax,eax
c002856d:	74 2f                	je     c002859e <LinkedList<Device>::addElement(Device*)+0x5e>
c002856f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002857a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028584:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028588:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002858b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002858f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028592:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002859c:	eb 68                	jmp    c0028606 <LinkedList<Device>::addElement(Device*)+0xc6>
c002859e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a4:	85 c0                	test   eax,eax
c00285a6:	75 4e                	jne    c00285f6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285af:	85 c0                	test   eax,eax
c00285b1:	75 43                	jne    c00285f6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285bb:	89 10                	mov    DWORD PTR [eax],edx
c00285bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285cf:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285e0:	85 c0                	test   eax,eax
c00285e2:	74 22                	je     c0028606 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285e4:	83 ec 0c             	sub    esp,0xc
c00285e7:	68 6a a0 02 c0       	push   0xc002a06a
c00285ec:	e8 3e 17 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00285f1:	83 c4 10             	add    esp,0x10
c00285f4:	eb 10                	jmp    c0028606 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285f6:	83 ec 0c             	sub    esp,0xc
c00285f9:	68 74 a0 02 c0       	push   0xc002a074
c00285fe:	e8 2c 17 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0028603:	83 c4 10             	add    esp,0x10
c0028606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860d:	8d 50 01             	lea    edx,[eax+0x1]
c0028610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028614:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028617:	90                   	nop
c0028618:	83 c4 0c             	add    esp,0xc
c002861b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002861c <LinkedList<Device>::LinkedList()>:
c002861c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028620:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002862a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028635:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002863c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028640:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002864a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028655:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002865c:	90                   	nop
c002865d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002865e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002865e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028662:	8b 00                	mov    eax,DWORD PTR [eax]
c0028664:	85 c0                	test   eax,eax
c0028666:	75 0e                	jne    c0028676 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002866c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002866f:	85 c0                	test   eax,eax
c0028671:	75 03                	jne    c0028676 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028673:	b0 01                	mov    al,0x1
c0028675:	c3                   	ret    
c0028676:	b0 00                	mov    al,0x0
c0028678:	90                   	nop
c0028679:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002867a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002867a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002867e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028680:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028689:	8b 00                	mov    eax,DWORD PTR [eax]
c002868b:	85 c0                	test   eax,eax
c002868d:	75 15                	jne    c00286a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002868f:	83 ec 0c             	sub    esp,0xc
c0028692:	68 80 a0 02 c0       	push   0xc002a080
c0028697:	e8 93 16 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c002869c:	83 c4 10             	add    esp,0x10
c002869f:	e9 88 00 00 00       	jmp    c002872c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00286a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286ae:	85 c0                	test   eax,eax
c00286b0:	0f 95 c0             	setne  al
c00286b3:	84 c0                	test   al,al
c00286b5:	74 10                	je     c00286c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00286b7:	83 ec 0c             	sub    esp,0xc
c00286ba:	68 cb a0 02 c0       	push   0xc002a0cb
c00286bf:	e8 6b 16 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00286c4:	83 c4 10             	add    esp,0x10
c00286c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00286cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286d0:	85 c0                	test   eax,eax
c00286d2:	0f 94 c0             	sete   al
c00286d5:	84 c0                	test   al,al
c00286d7:	74 33                	je     c002870c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00286d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f5:	83 f8 01             	cmp    eax,0x1
c00286f8:	74 21                	je     c002871b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00286fa:	83 ec 0c             	sub    esp,0xc
c00286fd:	68 a4 a0 02 c0       	push   0xc002a0a4
c0028702:	e8 28 16 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0028707:	83 c4 10             	add    esp,0x10
c002870a:	eb 0f                	jmp    c002871b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002870c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028710:	8b 00                	mov    eax,DWORD PTR [eax]
c0028712:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	89 10                	mov    DWORD PTR [eax],edx
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028722:	8d 50 ff             	lea    edx,[eax-0x1]
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028738:	75 10                	jne    c002874a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 48 a0 02 c0       	push   0xc002a048
c0028742:	e8 e8 15 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028750:	85 c0                	test   eax,eax
c0028752:	74 34                	je     c0028788 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875b:	85 c0                	test   eax,eax
c002875d:	74 29                	je     c0028788 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002875f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028763:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028771:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028775:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028786:	eb 65                	jmp    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 00                	mov    eax,DWORD PTR [eax]
c002878e:	85 c0                	test   eax,eax
c0028790:	75 4b                	jne    c00287dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028799:	85 c0                	test   eax,eax
c002879b:	75 40                	jne    c00287dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 10                	mov    DWORD PTR [eax],edx
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c7:	85 c0                	test   eax,eax
c00287c9:	74 22                	je     c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 6a a0 02 c0       	push   0xc002a06a
c00287d3:	e8 57 15 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	eb 10                	jmp    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287dd:	83 ec 0c             	sub    esp,0xc
c00287e0:	68 74 a0 02 c0       	push   0xc002a074
c00287e5:	e8 45 15 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00287ea:	83 c4 10             	add    esp,0x10
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f4:	8d 50 01             	lea    edx,[eax+0x1]
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287fe:	90                   	nop
c00287ff:	83 c4 0c             	add    esp,0xc
c0028802:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028804 <ACPI::~ACPI()>:
c0028804:	83 ec 0c             	sub    esp,0xc
c0028807:	ba a8 b0 02 c0       	mov    edx,0xc002b0a8
c002880c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028810:	89 10                	mov    DWORD PTR [eax],edx
c0028812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028816:	83 ec 0c             	sub    esp,0xc
c0028819:	50                   	push   eax
c002881a:	e8 ab b0 fe ff       	call   c00138ca <Device::~Device()>
c002881f:	83 c4 10             	add    esp,0x10
c0028822:	90                   	nop
c0028823:	83 c4 0c             	add    esp,0xc
c0028826:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028828 <ACPI::~ACPI()>:
c0028828:	83 ec 0c             	sub    esp,0xc
c002882b:	83 ec 0c             	sub    esp,0xc
c002882e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028832:	e8 cd ff ff ff       	call   c0028804 <ACPI::~ACPI()>
c0028837:	83 c4 10             	add    esp,0x10
c002883a:	83 ec 08             	sub    esp,0x8
c002883d:	68 64 12 00 00       	push   0x1264
c0028842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028846:	e8 a1 9c fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c002884b:	83 c4 10             	add    esp,0x10
c002884e:	83 c4 0c             	add    esp,0xc
c0028851:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028852 <LinkedList<Device>::~LinkedList()>:
c0028852:	90                   	nop
c0028853:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028854 <LinkedList<Device>::isEmpty()>:
c0028854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028858:	8b 00                	mov    eax,DWORD PTR [eax]
c002885a:	85 c0                	test   eax,eax
c002885c:	75 0e                	jne    c002886c <LinkedList<Device>::isEmpty()+0x18>
c002885e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028865:	85 c0                	test   eax,eax
c0028867:	75 03                	jne    c002886c <LinkedList<Device>::isEmpty()+0x18>
c0028869:	b0 01                	mov    al,0x1
c002886b:	c3                   	ret    
c002886c:	b0 00                	mov    al,0x0
c002886e:	90                   	nop
c002886f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028870 <LinkedList<Device>::getFirstElement()>:
c0028870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028874:	8b 00                	mov    eax,DWORD PTR [eax]
c0028876:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028878 <LinkedList<Device>::removeFirst()>:
c0028878:	83 ec 0c             	sub    esp,0xc
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028881:	85 c0                	test   eax,eax
c0028883:	75 15                	jne    c002889a <LinkedList<Device>::removeFirst()+0x22>
c0028885:	83 ec 0c             	sub    esp,0xc
c0028888:	68 80 a0 02 c0       	push   0xc002a080
c002888d:	e8 9d 14 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c0028892:	83 c4 10             	add    esp,0x10
c0028895:	e9 87 00 00 00       	jmp    c0028921 <LinkedList<Device>::removeFirst()+0xa9>
c002889a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00288a7:	85 c0                	test   eax,eax
c00288a9:	74 10                	je     c00288bb <LinkedList<Device>::removeFirst()+0x43>
c00288ab:	83 ec 0c             	sub    esp,0xc
c00288ae:	68 cb a0 02 c0       	push   0xc002a0cb
c00288b3:	e8 77 14 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00288c1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00288c7:	85 c0                	test   eax,eax
c00288c9:	75 33                	jne    c00288fe <LinkedList<Device>::removeFirst()+0x86>
c00288cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e7:	83 f8 01             	cmp    eax,0x1
c00288ea:	74 24                	je     c0028910 <LinkedList<Device>::removeFirst()+0x98>
c00288ec:	83 ec 0c             	sub    esp,0xc
c00288ef:	68 a4 a0 02 c0       	push   0xc002a0a4
c00288f4:	e8 36 14 ff ff       	call   c0019d2f <Krnl::panic(char const*)>
c00288f9:	83 c4 10             	add    esp,0x10
c00288fc:	eb 12                	jmp    c0028910 <LinkedList<Device>::removeFirst()+0x98>
c00288fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028902:	8b 00                	mov    eax,DWORD PTR [eax]
c0028904:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890e:	89 10                	mov    DWORD PTR [eax],edx
c0028910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028917:	8d 50 ff             	lea    edx,[eax-0x1]
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028921:	83 c4 0c             	add    esp,0xc
c0028924:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028926 <CPU::~CPU()>:
c0028926:	83 ec 0c             	sub    esp,0xc
c0028929:	ba f8 b2 02 c0       	mov    edx,0xc002b2f8
c002892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028932:	89 10                	mov    DWORD PTR [eax],edx
c0028934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028938:	83 ec 0c             	sub    esp,0xc
c002893b:	50                   	push   eax
c002893c:	e8 89 af fe ff       	call   c00138ca <Device::~Device()>
c0028941:	83 c4 10             	add    esp,0x10
c0028944:	90                   	nop
c0028945:	83 c4 0c             	add    esp,0xc
c0028948:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002894a <CPU::~CPU()>:
c002894a:	83 ec 0c             	sub    esp,0xc
c002894d:	83 ec 0c             	sub    esp,0xc
c0028950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028954:	e8 cd ff ff ff       	call   c0028926 <CPU::~CPU()>
c0028959:	83 c4 10             	add    esp,0x10
c002895c:	83 ec 08             	sub    esp,0x8
c002895f:	68 98 11 00 00       	push   0x1198
c0028964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028968:	e8 7f 9b fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c002896d:	83 c4 10             	add    esp,0x10
c0028970:	83 c4 0c             	add    esp,0xc
c0028973:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028974 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028974:	90                   	nop
c0028975:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028976 <ThreadControlBlock::ThreadControlBlock()>:
c0028976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002897a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028985:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002898c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028990:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002899b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00289a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00289ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00289b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00289bd:	90                   	nop
c00289be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00289c0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00289c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a00:	90                   	nop
c0028a01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028a02 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028a02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a09:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028a0a <Vm::_FPUState::_FPUState()>:
c0028a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a0e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028a15:	90                   	nop
c0028a16:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028a18 <PCI::~PCI()>:
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	ba 24 be 02 c0       	mov    edx,0xc002be24
c0028a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a24:	89 10                	mov    DWORD PTR [eax],edx
c0028a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2a:	83 ec 0c             	sub    esp,0xc
c0028a2d:	50                   	push   eax
c0028a2e:	e8 67 a8 fe ff       	call   c001329a <Bus::~Bus()>
c0028a33:	83 c4 10             	add    esp,0x10
c0028a36:	90                   	nop
c0028a37:	83 c4 0c             	add    esp,0xc
c0028a3a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028a3c <PCI::~PCI()>:
c0028a3c:	83 ec 0c             	sub    esp,0xc
c0028a3f:	83 ec 0c             	sub    esp,0xc
c0028a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a46:	e8 cd ff ff ff       	call   c0028a18 <PCI::~PCI()>
c0028a4b:	83 c4 10             	add    esp,0x10
c0028a4e:	83 ec 08             	sub    esp,0x8
c0028a51:	68 5c 01 00 00       	push   0x15c
c0028a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a5a:	e8 8d 9a fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028a5f:	83 c4 10             	add    esp,0x10
c0028a62:	83 c4 0c             	add    esp,0xc
c0028a65:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028a66 <IDE::~IDE()>:
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	ba d8 be 02 c0       	mov    edx,0xc002bed8
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	89 10                	mov    DWORD PTR [eax],edx
c0028a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a78:	83 ec 0c             	sub    esp,0xc
c0028a7b:	50                   	push   eax
c0028a7c:	e8 5f b3 fe ff       	call   c0013de0 <HardDiskController::~HardDiskController()>
c0028a81:	83 c4 10             	add    esp,0x10
c0028a84:	90                   	nop
c0028a85:	83 c4 0c             	add    esp,0xc
c0028a88:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028a8a <IDE::~IDE()>:
c0028a8a:	83 ec 0c             	sub    esp,0xc
c0028a8d:	83 ec 0c             	sub    esp,0xc
c0028a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a94:	e8 cd ff ff ff       	call   c0028a66 <IDE::~IDE()>
c0028a99:	83 c4 10             	add    esp,0x10
c0028a9c:	83 ec 08             	sub    esp,0x8
c0028a9f:	68 70 02 00 00       	push   0x270
c0028aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa8:	e8 3f 9a fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028aad:	83 c4 10             	add    esp,0x10
c0028ab0:	83 c4 0c             	add    esp,0xc
c0028ab3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028ab4 <SATABus::~SATABus()>:
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	ba 50 bf 02 c0       	mov    edx,0xc002bf50
c0028abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac0:	89 10                	mov    DWORD PTR [eax],edx
c0028ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	50                   	push   eax
c0028aca:	e8 11 b3 fe ff       	call   c0013de0 <HardDiskController::~HardDiskController()>
c0028acf:	83 c4 10             	add    esp,0x10
c0028ad2:	90                   	nop
c0028ad3:	83 c4 0c             	add    esp,0xc
c0028ad6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ad8 <SATABus::~SATABus()>:
c0028ad8:	83 ec 0c             	sub    esp,0xc
c0028adb:	83 ec 0c             	sub    esp,0xc
c0028ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae2:	e8 cd ff ff ff       	call   c0028ab4 <SATABus::~SATABus()>
c0028ae7:	83 c4 10             	add    esp,0x10
c0028aea:	83 ec 08             	sub    esp,0x8
c0028aed:	68 64 01 00 00       	push   0x164
c0028af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af6:	e8 f1 99 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028afb:	83 c4 10             	add    esp,0x10
c0028afe:	83 c4 0c             	add    esp,0xc
c0028b01:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028b02 <ATA::~ATA()>:
c0028b02:	83 ec 0c             	sub    esp,0xc
c0028b05:	ba 9c bf 02 c0       	mov    edx,0xc002bf9c
c0028b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0e:	89 10                	mov    DWORD PTR [eax],edx
c0028b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b14:	83 ec 0c             	sub    esp,0xc
c0028b17:	50                   	push   eax
c0028b18:	e8 a5 b3 fe ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c0028b1d:	83 c4 10             	add    esp,0x10
c0028b20:	90                   	nop
c0028b21:	83 c4 0c             	add    esp,0xc
c0028b24:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028b26 <ATA::~ATA()>:
c0028b26:	83 ec 0c             	sub    esp,0xc
c0028b29:	83 ec 0c             	sub    esp,0xc
c0028b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b30:	e8 cd ff ff ff       	call   c0028b02 <ATA::~ATA()>
c0028b35:	83 c4 10             	add    esp,0x10
c0028b38:	83 ec 08             	sub    esp,0x8
c0028b3b:	68 7c 01 00 00       	push   0x17c
c0028b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b44:	e8 a3 99 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028b49:	83 c4 10             	add    esp,0x10
c0028b4c:	83 c4 0c             	add    esp,0xc
c0028b4f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028b50 <ATAPI::~ATAPI()>:
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	ba d4 bf 02 c0       	mov    edx,0xc002bfd4
c0028b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5c:	89 10                	mov    DWORD PTR [eax],edx
c0028b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b62:	83 ec 0c             	sub    esp,0xc
c0028b65:	50                   	push   eax
c0028b66:	e8 57 b3 fe ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c0028b6b:	83 c4 10             	add    esp,0x10
c0028b6e:	90                   	nop
c0028b6f:	83 c4 0c             	add    esp,0xc
c0028b72:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028b74 <ATAPI::~ATAPI()>:
c0028b74:	83 ec 0c             	sub    esp,0xc
c0028b77:	83 ec 0c             	sub    esp,0xc
c0028b7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b7e:	e8 cd ff ff ff       	call   c0028b50 <ATAPI::~ATAPI()>
c0028b83:	83 c4 10             	add    esp,0x10
c0028b86:	83 ec 08             	sub    esp,0x8
c0028b89:	68 80 01 00 00       	push   0x180
c0028b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b92:	e8 55 99 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028b97:	83 c4 10             	add    esp,0x10
c0028b9a:	83 c4 0c             	add    esp,0xc
c0028b9d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028b9e <SATA::~SATA()>:
c0028b9e:	83 ec 0c             	sub    esp,0xc
c0028ba1:	ba 88 c0 02 c0       	mov    edx,0xc002c088
c0028ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028baa:	89 10                	mov    DWORD PTR [eax],edx
c0028bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb0:	83 ec 0c             	sub    esp,0xc
c0028bb3:	50                   	push   eax
c0028bb4:	e8 09 b3 fe ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c0028bb9:	83 c4 10             	add    esp,0x10
c0028bbc:	90                   	nop
c0028bbd:	83 c4 0c             	add    esp,0xc
c0028bc0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028bc2 <SATA::~SATA()>:
c0028bc2:	83 ec 0c             	sub    esp,0xc
c0028bc5:	83 ec 0c             	sub    esp,0xc
c0028bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bcc:	e8 cd ff ff ff       	call   c0028b9e <SATA::~SATA()>
c0028bd1:	83 c4 10             	add    esp,0x10
c0028bd4:	83 ec 08             	sub    esp,0x8
c0028bd7:	68 7c 01 00 00       	push   0x17c
c0028bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be0:	e8 07 99 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028be5:	83 c4 10             	add    esp,0x10
c0028be8:	83 c4 0c             	add    esp,0xc
c0028beb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028bec <SATAPI::~SATAPI()>:
c0028bec:	83 ec 0c             	sub    esp,0xc
c0028bef:	ba 64 c1 02 c0       	mov    edx,0xc002c164
c0028bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf8:	89 10                	mov    DWORD PTR [eax],edx
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	83 ec 0c             	sub    esp,0xc
c0028c01:	50                   	push   eax
c0028c02:	e8 bb b2 fe ff       	call   c0013ec2 <PhysicalDisk::~PhysicalDisk()>
c0028c07:	83 c4 10             	add    esp,0x10
c0028c0a:	90                   	nop
c0028c0b:	83 c4 0c             	add    esp,0xc
c0028c0e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028c10 <SATAPI::~SATAPI()>:
c0028c10:	83 ec 0c             	sub    esp,0xc
c0028c13:	83 ec 0c             	sub    esp,0xc
c0028c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c1a:	e8 cd ff ff ff       	call   c0028bec <SATAPI::~SATAPI()>
c0028c1f:	83 c4 10             	add    esp,0x10
c0028c22:	83 ec 08             	sub    esp,0x8
c0028c25:	68 80 01 00 00       	push   0x180
c0028c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2e:	e8 b9 98 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028c33:	83 c4 10             	add    esp,0x10
c0028c36:	83 c4 0c             	add    esp,0xc
c0028c39:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028c3a <AVX::~AVX()>:
c0028c3a:	83 ec 0c             	sub    esp,0xc
c0028c3d:	ba a4 c1 02 c0       	mov    edx,0xc002c1a4
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	89 10                	mov    DWORD PTR [eax],edx
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	83 ec 0c             	sub    esp,0xc
c0028c4f:	50                   	push   eax
c0028c50:	e8 f1 b2 fe ff       	call   c0013f46 <FPU::~FPU()>
c0028c55:	83 c4 10             	add    esp,0x10
c0028c58:	90                   	nop
c0028c59:	83 c4 0c             	add    esp,0xc
c0028c5c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028c5e <AVX::~AVX()>:
c0028c5e:	83 ec 0c             	sub    esp,0xc
c0028c61:	83 ec 0c             	sub    esp,0xc
c0028c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c68:	e8 cd ff ff ff       	call   c0028c3a <AVX::~AVX()>
c0028c6d:	83 c4 10             	add    esp,0x10
c0028c70:	83 ec 08             	sub    esp,0x8
c0028c73:	68 58 01 00 00       	push   0x158
c0028c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c7c:	e8 6b 98 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028c81:	83 c4 10             	add    esp,0x10
c0028c84:	83 c4 0c             	add    esp,0xc
c0028c87:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028c88 <MMX::~MMX()>:
c0028c88:	83 ec 0c             	sub    esp,0xc
c0028c8b:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c0028c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c94:	89 10                	mov    DWORD PTR [eax],edx
c0028c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9a:	83 ec 0c             	sub    esp,0xc
c0028c9d:	50                   	push   eax
c0028c9e:	e8 a3 b2 fe ff       	call   c0013f46 <FPU::~FPU()>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	90                   	nop
c0028ca7:	83 c4 0c             	add    esp,0xc
c0028caa:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028cac <MMX::~MMX()>:
c0028cac:	83 ec 0c             	sub    esp,0xc
c0028caf:	83 ec 0c             	sub    esp,0xc
c0028cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb6:	e8 cd ff ff ff       	call   c0028c88 <MMX::~MMX()>
c0028cbb:	83 c4 10             	add    esp,0x10
c0028cbe:	83 ec 08             	sub    esp,0x8
c0028cc1:	68 58 01 00 00       	push   0x158
c0028cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cca:	e8 1d 98 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028ccf:	83 c4 10             	add    esp,0x10
c0028cd2:	83 c4 0c             	add    esp,0xc
c0028cd5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028cd6 <SSE::~SSE()>:
c0028cd6:	83 ec 0c             	sub    esp,0xc
c0028cd9:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c0028cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce2:	89 10                	mov    DWORD PTR [eax],edx
c0028ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce8:	83 ec 0c             	sub    esp,0xc
c0028ceb:	50                   	push   eax
c0028cec:	e8 55 b2 fe ff       	call   c0013f46 <FPU::~FPU()>
c0028cf1:	83 c4 10             	add    esp,0x10
c0028cf4:	90                   	nop
c0028cf5:	83 c4 0c             	add    esp,0xc
c0028cf8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028cfa <SSE::~SSE()>:
c0028cfa:	83 ec 0c             	sub    esp,0xc
c0028cfd:	83 ec 0c             	sub    esp,0xc
c0028d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d04:	e8 cd ff ff ff       	call   c0028cd6 <SSE::~SSE()>
c0028d09:	83 c4 10             	add    esp,0x10
c0028d0c:	83 ec 08             	sub    esp,0x8
c0028d0f:	68 58 01 00 00       	push   0x158
c0028d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d18:	e8 cf 97 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028d1d:	83 c4 10             	add    esp,0x10
c0028d20:	83 c4 0c             	add    esp,0xc
c0028d23:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028d24 <x87::~x87()>:
c0028d24:	83 ec 0c             	sub    esp,0xc
c0028d27:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c0028d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d30:	89 10                	mov    DWORD PTR [eax],edx
c0028d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	50                   	push   eax
c0028d3a:	e8 07 b2 fe ff       	call   c0013f46 <FPU::~FPU()>
c0028d3f:	83 c4 10             	add    esp,0x10
c0028d42:	90                   	nop
c0028d43:	83 c4 0c             	add    esp,0xc
c0028d46:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028d48 <x87::~x87()>:
c0028d48:	83 ec 0c             	sub    esp,0xc
c0028d4b:	83 ec 0c             	sub    esp,0xc
c0028d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d52:	e8 cd ff ff ff       	call   c0028d24 <x87::~x87()>
c0028d57:	83 c4 10             	add    esp,0x10
c0028d5a:	83 ec 08             	sub    esp,0x8
c0028d5d:	68 58 01 00 00       	push   0x158
c0028d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d66:	e8 81 97 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028d6b:	83 c4 10             	add    esp,0x10
c0028d6e:	83 c4 0c             	add    esp,0xc
c0028d71:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028d72 <IOAPIC::~IOAPIC()>:
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	ba bc c3 02 c0       	mov    edx,0xc002c3bc
c0028d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7e:	89 10                	mov    DWORD PTR [eax],edx
c0028d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d84:	83 ec 0c             	sub    esp,0xc
c0028d87:	50                   	push   eax
c0028d88:	e8 3d ab fe ff       	call   c00138ca <Device::~Device()>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	90                   	nop
c0028d91:	83 c4 0c             	add    esp,0xc
c0028d94:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028d96 <IOAPIC::~IOAPIC()>:
c0028d96:	83 ec 0c             	sub    esp,0xc
c0028d99:	83 ec 0c             	sub    esp,0xc
c0028d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da0:	e8 cd ff ff ff       	call   c0028d72 <IOAPIC::~IOAPIC()>
c0028da5:	83 c4 10             	add    esp,0x10
c0028da8:	83 ec 08             	sub    esp,0x8
c0028dab:	68 68 01 00 00       	push   0x168
c0028db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db4:	e8 33 97 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028db9:	83 c4 10             	add    esp,0x10
c0028dbc:	83 c4 0c             	add    esp,0xc
c0028dbf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028dc0 <APIC::~APIC()>:
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	ba 74 c3 02 c0       	mov    edx,0xc002c374
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	89 10                	mov    DWORD PTR [eax],edx
c0028dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd2:	83 ec 0c             	sub    esp,0xc
c0028dd5:	50                   	push   eax
c0028dd6:	e8 35 b6 fe ff       	call   c0014410 <InterruptController::~InterruptController()>
c0028ddb:	83 c4 10             	add    esp,0x10
c0028dde:	90                   	nop
c0028ddf:	83 c4 0c             	add    esp,0xc
c0028de2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028de4 <APIC::~APIC()>:
c0028de4:	83 ec 0c             	sub    esp,0xc
c0028de7:	83 ec 0c             	sub    esp,0xc
c0028dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dee:	e8 cd ff ff ff       	call   c0028dc0 <APIC::~APIC()>
c0028df3:	83 c4 10             	add    esp,0x10
c0028df6:	83 ec 08             	sub    esp,0x8
c0028df9:	68 58 21 00 00       	push   0x2158
c0028dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e02:	e8 e5 96 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028e07:	83 c4 10             	add    esp,0x10
c0028e0a:	83 c4 0c             	add    esp,0xc
c0028e0d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028e0e <PIC::~PIC()>:
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	ba 0c c4 02 c0       	mov    edx,0xc002c40c
c0028e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1a:	89 10                	mov    DWORD PTR [eax],edx
c0028e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	50                   	push   eax
c0028e24:	e8 e7 b5 fe ff       	call   c0014410 <InterruptController::~InterruptController()>
c0028e29:	83 c4 10             	add    esp,0x10
c0028e2c:	90                   	nop
c0028e2d:	83 c4 0c             	add    esp,0xc
c0028e30:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028e32 <PIC::~PIC()>:
c0028e32:	83 ec 0c             	sub    esp,0xc
c0028e35:	83 ec 0c             	sub    esp,0xc
c0028e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3c:	e8 cd ff ff ff       	call   c0028e0e <PIC::~PIC()>
c0028e41:	83 c4 10             	add    esp,0x10
c0028e44:	83 ec 08             	sub    esp,0x8
c0028e47:	68 58 21 00 00       	push   0x2158
c0028e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e50:	e8 97 96 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028e55:	83 c4 10             	add    esp,0x10
c0028e58:	83 c4 0c             	add    esp,0xc
c0028e5b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028e5c <APICTimer::~APICTimer()>:
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	ba 60 c4 02 c0       	mov    edx,0xc002c460
c0028e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e68:	89 10                	mov    DWORD PTR [eax],edx
c0028e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6e:	83 ec 0c             	sub    esp,0xc
c0028e71:	50                   	push   eax
c0028e72:	e8 f1 d5 fe ff       	call   c0016468 <Timer::~Timer()>
c0028e77:	83 c4 10             	add    esp,0x10
c0028e7a:	90                   	nop
c0028e7b:	83 c4 0c             	add    esp,0xc
c0028e7e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028e80 <APICTimer::~APICTimer()>:
c0028e80:	83 ec 0c             	sub    esp,0xc
c0028e83:	83 ec 0c             	sub    esp,0xc
c0028e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8a:	e8 cd ff ff ff       	call   c0028e5c <APICTimer::~APICTimer()>
c0028e8f:	83 c4 10             	add    esp,0x10
c0028e92:	83 ec 08             	sub    esp,0x8
c0028e95:	68 60 01 00 00       	push   0x160
c0028e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9e:	e8 49 96 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028ea3:	83 c4 10             	add    esp,0x10
c0028ea6:	83 c4 0c             	add    esp,0xc
c0028ea9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028eaa <PIT::~PIT()>:
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	ba b0 c4 02 c0       	mov    edx,0xc002c4b0
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	89 10                	mov    DWORD PTR [eax],edx
c0028eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	50                   	push   eax
c0028ec0:	e8 a3 d5 fe ff       	call   c0016468 <Timer::~Timer()>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	90                   	nop
c0028ec9:	83 c4 0c             	add    esp,0xc
c0028ecc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028ece <PIT::~PIT()>:
c0028ece:	83 ec 0c             	sub    esp,0xc
c0028ed1:	83 ec 0c             	sub    esp,0xc
c0028ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed8:	e8 cd ff ff ff       	call   c0028eaa <PIT::~PIT()>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	83 ec 08             	sub    esp,0x8
c0028ee3:	68 5c 01 00 00       	push   0x15c
c0028ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eec:	e8 fb 95 fe ff       	call   c00124ec <operator delete(void*, unsigned long)>
c0028ef1:	83 c4 10             	add    esp,0x10
c0028ef4:	83 c4 0c             	add    esp,0xc
c0028ef7:	c3                   	ret    
